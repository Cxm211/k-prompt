
* *     * @return     *     *     *     *     *     *     *     *     *     *     *     *     */   private final PassFactory devirtualizePrototypeMethods =        new PassFactory("devirtualizePrototypeMethods", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) { return new DevirtualizePrototypeMethodsPass(compiler); } };
*     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
* @return this  */     public final CompilerPassFactory replaceStrings =        new PassFactory("replaceStrings", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) { return replaceStrings; } };
* return returnType == null? null : "{" + returnType + "}";      }      private String trimBrackets(String returnType) {          return returnType == null? null : returnType.replace("[", "").replace("]", "");      }
*         * @return true if all the nodes up to the last annotation node are end of scope nodes       *         false otherwise       */     private boolean isEndOfScope(final DetailAST lastAnnotationNode, final DetailAST node) {          DetailAST checkNode = node;          boolean endOfScope = true;          while (endOfScope &&!checkNode.equals(lastAnnotationNode)) {          endOfScope = false;          }          return endOfScope;     }
* @return this  */     public final CompilerPassFactory checkShadowVars =        new PassFactory("variableShadowDeclarationCheck", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) { return checkShadowVars; } };
* @return *     Returns a reference to this {@code AdvancedEKSEndpointBuilder} object to allow method calls to be chained together.  * @return *     Returns a reference to this {@code AdvancedEKSEndpointBuilder} object to allow method calls to be chained together.  */ @javax.annotation.Generated("org.apache.camel.maven.packaging.EndpointDslMojo") public interface AdvancedEKSEndpointBuilder {     /**      * Whether the producer should be started lazy (on the first message).      * By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing.      *       * The option is a: &lt;code&gt;boolean&lt;/code&gt; type.      *       * Default: false      * Group: producer      * @return *     Returns a reference to this {@code AdvancedEKSEndpointBuilder} object to allow method calls to be chained together.      */     default AdvancedEKSEndpointBuilder lazyStartProducer() {         return lazyStartProducer(true);     }      /**      * Whether the producer should be started lazy (on the first message).      * By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing.      *       * The option will be converted to a &lt;code&gt;boolean&lt;/code&gt; type.      *       * Default: false      * Group: producer      * @return *     Returns a reference to this {@code AdvancedEKSEndpointBuilder} object to allow method calls to be chained together.      */     default AdvancedEKSEndpointBuilder

* @return this  */     public final CompilerPassFactory checkGlobalNames =        new PassFactory("Check names", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) { return new CheckGlobalNames(compiler); } }
* @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *


*     *     *     *     *     *     * @return
*     *     * @return
* @return this  */     public final CompilerPassFactory collapseObjectLiterals() {      return new PassFactory("collapseObjectLiterals", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) { return new CollapseObjectLiteralsPass(compiler); } };
* * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @
* @return *     Returns a reference to this {@code AdvancedXmppEndpointBuilder} object to allow method call  *     chaining  */     default AdvancedXmppEndpointBuilder basic() {         return this;     }
* * @throws InvalidLoginException    * @throws IOException    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    * @return    *

*    * @return The hash value for the given record.   */ public int compare(T record) *    * @return The hash value for the given record.   */ public int compare(T record) *    * @return The hash value for the given record.   */ public int compare(T record) *    * @return The hash value for the given record.   */ public int compare(T record) *    * @return The hash value for the given record.   */ public int compare(T record) *    * @return The hash value for the given record.   */ public int compare(T record) *    * @return The hash value for the given record.   */ public int compare(T record) *    * @return The hash value for the given record.   */ public int compare(T record) *    * @return The hash value for the given record.   */ public int compare(T record) *    * @return The hash value for the given record.   */ public int compare(T record) *    * @return The hash value for the given record.   */ public int compare(T record) *    * @return The hash value for the given record.   */ public int compare(T record) *    * @return The hash value for the given record.   */ public int compare(T record) *    * @return The hash value for the given record.   */ public int compare(T record) *    * @return The hash value for the given record.   */ public int compare(T record) *    * @return The hash value for the given record.   */ public int compare(T record) *    * @return The hash value for the given record.   */ public int compare(T record) *    * @return The hash value for the given record.   */ public int compare(T record) *    * @return The hash value for the given record.   */ public int compare(T record) *    * @return The hash value for the given record.   */ public int compare(T record) *    * @return The hash value for the given record.   */ public int compare(T record) *    * @return The hash value for the given record.   */ public int compare(T record) *    * @return The hash value for the given record.   */ public int compare(T record) *    * @
* @should fail for an invalid object    * @should throw throw APIException if the input is null    */  public void validate(Object object, Errors errors) throws APIException {  }  /**    * Returns a list of locales used by the user when searching. * @should fail for an invalid object    * @should throw throw APIException if the input is null    */  public void validate(Object object, Errors errors) throws APIException {  }  /**    * Returns a list of locales used by the user when searching. * @should fail for an invalid object    * @should throw throw APIException if the input is null    */  public void validate(Object object, Errors errors) throws APIException {  }  /**    * Returns a list of locales used by the user when searching. * @should fail for an invalid object    * @should throw throw APIException if the input is null    */  public void validate(Object object, Errors errors) throws APIException {  }  /**    * Returns a list of locales used by the user when searching. * @should fail for an invalid object    * @should throw throw APIException if the input is null    */  public void validate(Object object, Errors errors) throws APIException {  }  /**    * Returns a list of locales used by the user when searching. * @should fail for an invalid object    * @should throw throw APIException if the input is null    */  public void validate(Object object, Errors errors) throws APIException {  }  /**    * Returns a list of locales used by the user when searching. * @should fail for an invalid object    * @should throw throw APIException if the input is null    */  public void validate(Object object, Errors errors) throws APIException {  }  /**    * Returns a list of locales used by the user when searching. * @should fail for an invalid object    * @should throw throw APIException if the input is null    */  public void validate(Object object, Errors errors) throws APIException {  }  /**    * Returns a list of locales used by the user when searching. * @should fail for an invalid object    * @should throw throw APIException if the input is null    */  public void validate(Object object, Errors errors) throws APIException {  }  /**    * Returns a list of locales used by the user when searching. * @should fail for an
*       * @return the message.       */     @Message(id = 15849, value = "Operation %s for address %s can only be handled by the master Domain Controller; this host is not the master Domain Controller") String masterDomainControllerOnlyOperation(String operation, PathAddress address);
* response.get(FAILURE_DESCRIPTION).set("Operation handler failed to complete");                              }                              response.get(OUTCOME).set(FAILED);                             response.set(ROLLED_BACK).set(true);                              return resultAction = ResultAction.ROLLBACK;
* if (capacity > 1 << 30) throw new IllegalArgumentException("initialCapacity is too large: " + initialCapacity);     loadFactor = MathUtils.nextPowerOfTwo(loadFactor);     }
* @return this  */    public final PassFactory specializeInitialModule =        new PassFactory("specializeInitialModule", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) { return new SpecializeInitialModulePass(compiler); } };
* @should set uuid on implementation id global property    */   @Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)  public void setImplementationId(ImplementationId implementationId) throws APIException {   /**    * Gets the list of locales which the administrator has allowed for use on the system. This is the fixed version    */   @Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)  public List<Locale> getImplementationId() throws APIException {   /**    * Gets the list of locales which the administrator has allowed for use on the system. This is the fixed version    */   @Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)  public List<Locale> getImplementationId() throws APIException {   /**    * Gets the list of locales which the administrator has allowed for use on the system. This is the fixed version    */   @Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)  public List<Locale> getImplementationId() throws APIException {   /**    * Gets the list of locales which the administrator has allowed for use on the system. This is the fixed version    */   @Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)  public List<Locale> getImplementationId() throws APIException {   /**    * Gets the list of locales which the administrator has allowed for use on the system. This is the fixed version    */   @Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)  public List<Locale> getImplementationId() throws APIException {   /**    * Gets the list of locales which the administrator has allowed for use on the system. This is the fixed version    */   @Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)  public List<Locale> getImplementationId() throws APIException {   /**    * Gets the list of locales which the administrator has allowed for use on the system. This is the fixed version    */   @Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)  public List<Locale> getImplementationId() throws APIException {   /**    * Gets the list of locales which the administrator has allowed for use on the system. This is the fixed version    */   @Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)  public List<Locale> getImplementationId() throws APIException {   /**    * Gets the list of locales which
*     *     * @return     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *
* * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @
* * @return {Object} self  */ module.exports = function() {   var self = this;   self.init = function() {     return self;   };   self.lazy = function() {     return self;   };   self.stubevent = function() {     return self;   };   self.reconnect = function() {     return self;   };   self.sticky = function() {     return self;   };   self.proxy = function() {     return self;   };   self.stub = function() {     return self;   };   self.cluster = function() {     return self;   };   self.connections = function() {     return self;   };   self.callbacks = function() {     return self;   };   self.onconnect = function() {     return self;   };   self.ondisconnect = function() {     return self;   };   self.owner = function() {     return self;   };   self.layer = function() {     return self;   };   self.retries = function() {     return self;   };   self.loadbalance = function() {     return self;   };   self.async = function() {     return self;   };   self.actives = function() {     return self;   };   self.sent = function() {     return self;   };   self.mock = function() {     return self;   };   self.validation = function() {     return self;   };   self.timeout = function() {     return self;   };   self.cache = function() {     return self;   };   self.filter = function() {     return self;   };   self.listener = function() {     return self;   };   self.parameters = function() {     return self;   };   self.application = function() {
* * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @
* * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *
*     *     * @return
* @Override protected void addAdditionPropertiesToCodeGenModel(CodegenModel codegenModel, ModelImpl swaggerModel) {         codegenModel.additionalPropertiesType = getSwaggerType(swaggerModel.getAdditionalProperties());          addImport(codegenModel, codegenModel.additionalPropertiesType);      }
* * @return the lockStore  * @see #lockStore  * @see #lockNamespace  * @see #lockStore  * @see #lockStore  * @see #lockStore  * @see #lockStore  * @see #lockStore  * @see #lockStore  * @see #lockStore  * @see #lockStore  * @see #lockStore  * @see #lockStore  * @see #lockStore  * @see #lockStore  * @see #lockStore  * @see #lockStore  * @see #lockStore  * @see #lockStore  * @see #lockStore  * @see #lockStore  * @see #lockStore  * @see #lockStore  * @see #lockStore  * @see #lockStore  * @see #lockStore  * @see #lockStore  * @see #lockStore  * @see #lockStore  * @see #lockStore  * @see #lockStore  * @see #lockStore  * @see #lockStore  * @see #lockStore  * @see #lockStore  * @see #lockStore  * @see #lockStore  * @see #lockStore  * @see #lockStore  * @see #lockStore  * @see #lockStore  * @see #lockStore  * @see #lockStore  * @see #lockStore  * @see #lockStore  * @see #lockStore  * @see #lockStore  * @see #lockStore  * @see #lockStore  * @see #lockStore  * @see #lockStore  * @see #lockStore  * @see #lockStore  * @see #lockStore  * @see #lockStore  * @see #lockStore  * @see #lockStore  * @see #lockStore  * @see #lockStore  * @see #lockStore  * @see #lockStore  * @see #lockStore  * @see #lockStore  * @see #lockStore  * @see #lockStore  * @see #lockStore  * @see #lockStore  * @see #lockStore  * @see #lockStore  * @see #lockStore  * @see #lockStore  * @see #lockStore  * @see #lock
*       * @return the message.       */     @Message(id = 15856, value = "Invalid url stream.")      String invalidUrlStream();      /**     * @return the message.       */     @Message(id = 15856, value = "Invalid url stream.")      String invalidUrlStream();      /**     * @return the message.       */     @Message(id = 15856, value = "Invalid url stream.")      String invalidUrlStream();      /**     * @return the message.       */     @Message(id = 15856, value = "Invalid url stream.")      String invalidUrlStream();      /**     * @return the message.       */     @Message(id = 15856, value = "Invalid url stream.")      String invalidUrlStream();      /**     * @return the message.       */     @Message(id = 15856, value = "Invalid url stream.")      String invalidUrlStream();      /**     * @return the message.       */     @Message(id = 15856, value = "Invalid url stream.")      String invalidUrlStream();      /**     * @return the message.       */     @Message(id = 15856, value = "Invalid url stream.")      String invalidUrlStream();      /**     * @return the message.       */     @Message(id = 15856, value = "Invalid url stream.")      String invalidUrlStream();      /**     * @return the message.       */     @Message(id = 15856, value = "Invalid url stream.")      String invalidUrlStream();      /**     * @return the message.       */     @Message(id = 15856, value = "Invalid url stream.")      String invalidUrlStream();      /**     * @return the message.       */     @Message(id = 15856, value = "Invalid url stream.")      String invalidUrlStream();      /**     * @return the message.       */     @Message(id = 15856, value = "Invalid url stream.")      String invalidUrlStream();      /**     * @return the message.       */     @Message(id = 15856, value = "Invalid url stream.")      String invalidUrlStream();      /**     * @return the message.       */     @Message(id = 15856,
*     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return
* @return this  */    public final PassFactory groupVariableDeclarations =        new PassFactory("groupVariableDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) { return new GroupVariableDeclarations(compiler); } };
* @return this  */    public final PassFactory specializeInitialModule =        new PassFactory("specializeInitialModule", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) { return new SpecializeInitialModulePass(compiler); } };
* @return this  */    public final PassFactory specializeInitialModule =        new PassFactory("specializeInitialModule", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) { return new SpecializeInitialModulePass(compiler); } };
* * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @

* mBuf.putInt(0, k + mWorkerId);            os.write(mBuf);          }          os.flush();          long endTimeMs = System.currentTimeMillis();          long elapsedMs = endTimeMs - startTimeMs;          mBuf.flip();          System.out.println(pId + ": " + (k + mWorkerId) + ": " + elapsedMs + " ms");          if (k == BLOCKS_PER_FILE) {            mBuf.flip();            mBuf.putInt(0, k + mWorkerId);            os.write(mBuf);          }          os.flush();          mBuf.clear();          mBuf.flip();          mBuf.putInt(0, k + mWorkerId);          os.write(mBuf);          mBuf.clear();          mBuf.flip();          mBuf.putInt(0, k + mWorkerId);          os.write(mBuf);          mBuf.clear();          mBuf.flip();          mBuf.putInt(0, k + mWorkerId);          os.write(mBuf);          mBuf.clear();          mBuf.flip();          mBuf.putInt(0, k + mWorkerId);          os.write(mBuf);          mBuf.clear();          mBuf.flip();          mBuf.putInt(0, k + mWorkerId);          os.write(mBuf);          mBuf.clear();          mBuf.flip();          mBuf.putInt(0, k + mWorkerId);          os.write(mBuf);          mBuf.clear();          mBuf.flip();          mBuf.putInt(0, k + mWorkerId);          os.write(mBuf);          mBuf.clear();          mBuf.flip();          mBuf.putInt(0, k + mWorkerId);          os.write(mBuf);          mBuf.clear();          mBuf.flip();          mBuf.putInt(0, k + mWorkerId);          os.write(mBuf);          mBuf.clear();          mBuf.flip();          mBuf.putInt(0, k + mWorkerId);          os.write(mBuf);          mBuf.clear();          mBuf.flip();          mBuf.putInt(0, k + m

* @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return
* @Test      public void test_Decode_Error_Request_Object() throws IOException {         byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, (byte) 0xdf, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};          Person person = new Person();          byte[] request = getRequestBytes(person, header);          assertThat(request).isEqualTo(getRequestBytes(person, header));          assertThat(request).isEqualTo(getRequestBytes(person, header));          assertThat(request).isEqualTo(getRequestBytes(person, header));          assertThat(request).isEqualTo(getRequestBytes(person, header));          assertThat(request).isEqualTo(getRequestBytes(person, header));          assertThat(request).isEqualTo(getRequestBytes(person, header));          assertThat(request).isEqualTo(getRequestBytes(person, header));          assertThat(request).isEqualTo(getRequestBytes(person, header));          assertThat(request).isEqualTo(getRequestBytes(person, header));          assertThat(request).isEqualTo(getRequestBytes(person, header));          assertThat(request).isEqualTo(getRequestBytes(person, header));          assertThat(request).isEqualTo(getRequestBytes(person, header));          assertThat(request).isEqualTo(getRequestBytes(person, header));          assertThat(request).isEqualTo(getRequestBytes(person, header));          assertThat(request).isEqualTo(getRequestBytes(person, header));          assertThat(request).isEqualTo(getRequestBytes(person, header));          assertThat(request).isEqualTo(getRequestBytes(person, header));          assertThat(request).isEqualTo(getRequestBytes(person, header));          assertThat(request).isEqualTo(getRequestBytes(person, header));          assertThat(request).isEqualTo(getRequestBytes(person, header));          assertThat(request).isEqualTo(getRequestBytes(person, header));          assertThat(request).isEqualTo(getRequestBytes(person, header));

* @return this  */     public final CompilerPassFactory collapseObjectLiterals() {      return new PassFactory("collapseObjectLiterals", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) { return new CollapseObjectLiteralsPass(compiler); } };

* filePath = filePath.substring(0, filePath.lastIndexOf("."));                      filePath = filePath.concat(fileFilter.getExtensions().get(0));                      selectedFile.setAbsolutePath(filePath);}
*     * @return *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *
* * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @
* handler.update(handlerUpdateTask);             } else {                  if (handlerUpdateTask == null){                      handlerUpdateTask = new HandlerUpdateTask();                  }                  handler.update(handlerUpdateTask);             } } catch (Exception e) {                  if (handlerUpdateTask == null){                      handlerUpdateTask = new HandlerUpdateTask();                  }                  handler.update(handlerUpdateTask);             } config.unlock();          } catch (Exception e) {                  if (handlerUpdateTask == null){                      handlerUpdateTask = new HandlerUpdateTask();                  }                  handler.update(handlerUpdateTask);             }
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
* @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return*     * @return*     * @return*     * @return*     * @return*     * @return*     * @return*     * @return*     * @return*     * @return*     * @return*     * @return*     * @return*     * @return*     * @return*     * @return*     * @return*     * @return*     * @return*     * @return*     * @return*     * @return*     * @return*     * @return*     * @return*     * @return*     * @return*     * @return*     * @return*     * @return*     * @return*     * @return*     * @return*     * @return*     * @return*     * @return*     * @return*     * @return*     * @return*     * @return*     * @return*     * @return*     * @return*     * @return*     * @return*     * @return*     * @return*     * @return*     * @return*     * @return*     * @return*     * @return*     * @return*     * @return*     * @return*     * @return*     * @return*     * @return*     * @return*     * @return*     * @return*     * @return*     * @return*     * @return*     * @return*     * @return*     * @return*     * @return*     * @return*     * @return*     * @return*     * @return*     * @return*     * @return*     * @return*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
* @Test      public void returnsA404WhenNotFound() throws Exception {          when(request.getMethod()).thenReturn("POST");         when(request.getServletPath()).thenReturn("/tasks/test");          servlet.service(request, response); }
* @return this  */     public HotSwapPassFactory checkAccessControls() { return checkAccessControls; }
* * @return The channel to the remote gRPC server  */ @Override protected void doStopInternal() throws Exception {          if (channel!= null) {             LOG.trace("Terminating channel to the remote gRPC server");              channel.shutdown().shutdownNow();              channel = null;              grpcStub = null;          }
* * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @
* * @return the bodyParts value */     public String bodyParts() {         return this.bodyParts;      }     /** @return the bodyParts value */     public String bodyParts() {         return this.bodyParts;      }     /** @return the bodyParts value */     public String bodyParts() {         return this.bodyParts;      }     /** @return the bodyParts value */     public String bodyParts() {         return this.bodyParts;      }     /** @return the bodyParts value */     public String bodyParts() {         return this.bodyParts;      }     /** @return the bodyParts value */     public String bodyParts() {         return this.bodyParts;      }     /** @return the bodyParts value */     public String bodyParts() {         return this.bodyParts;      }     /** @return the bodyParts value */     public String bodyParts() {         return this.bodyParts;      }     /** @return the bodyParts value */     public String bodyParts() {         return this.bodyParts;      }     /** @return the bodyParts value */     public String bodyParts() {         return this.bodyParts;      }     /** @return the bodyParts value */     public String bodyParts() {         return this.bodyParts;      }     /** @return the bodyParts value */     public String bodyParts() {         return this.bodyParts;      }     /** @return the bodyParts value */     public String bodyParts() {         return this.bodyParts;      }     /** @return the bodyParts value */     public String bodyParts() {         return this.bodyParts;      }     /** @return the bodyParts value */     public String bodyParts() {         return this.bodyParts;      }     /** @return the bodyParts value */     public String bodyParts() {         return this.bodyParts;      }     /** @return the bodyParts value */     public String bodyParts() {         return this.bodyParts;      }     /** @return the bodyParts value */     public String bodyParts() {         return this.bodyParts;      }     /** @return the bodyParts value */     public String bodyParts() {         return this.bodyParts;      }     /** @return the bodyParts value */     public String bodyParts() {         return this.bodyParts;      }     /** @return the bodyParts value */
* * Alias string literals with global variables, to avoid creating lots of     * transient objects.     */   private final PassFactory aliasStrings =        new PassFactory("aliasStrings", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) { return new AliasStrings(compiler); } };
* * Add a module (in the form of a jar file) to the list of openmrs modules Returns null if an openmrs module is the fixed version * Add a module (in the form of a jar file) to the list of openmrs modules Returns null if an openmrs module is the fixed version * Add a module (in the form of a jar file) to the list of openmrs modules Returns null if an openmrs module is the fixed version * Add a module (in the form of a jar file) to the list of openmrs modules Returns null if an openmrs module is the fixed version * Add a module (in the form of a jar file) to the list of openmrs modules Returns null if an openmrs module is the fixed version * Add a module (in the form of a jar file) to the list of openmrs modules Returns null if an openmrs module is the fixed version * Add a module (in the form of a jar file) to the list of openmrs modules Returns null if an openmrs module is the fixed version * Add a module (in the form of a jar file) to the list of openmrs modules Returns null if an openmrs module is the fixed version * Add a module (in the form of a jar file) to the list of openmrs modules Returns null if an openmrs module is the fixed version * Add a module (in the form of a jar file) to the list of openmrs modules Returns null if an openmrs module is the fixed version * Add a module (in the form of a jar file) to the list of openmrs modules Returns null if an openmrs module is the fixed version * Add a module (in the form of a jar file) to the list of openmrs modules Returns null if an openmrs module is the fixed version * Add a module (in the form of a jar file) to the list of openmrs modules Returns null if an openmrs module is the fixed version * Add a module (in the form of a jar file) to the list of openmrs modules Returns null if an openmrs module is the fixed version * Add a module (in the form of a jar file) to the list of openmrs modules Returns null if an openmrs module is the fixed version * Add a module (in the form of a jar file) to
*     *     * @return     *     *     *     *     *     *     *     *     *     * @return     *     *     *     *     *     * @return     *     *     *     *     * @return     *     *     *     * @return     *     *     *     * @return     *     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return
* @return this  */    public final CompilerPassFactory minimizeExitPoints =        new PassFactory("minimizeExitPoints", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) { return new MinimizeExitPoints(compiler); } };
* @return this  */     public final CompilerPassFactory inlineConstants =        new PassFactory("inlineConstants", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) { return new InlineConstants(compiler); } };
* LOG.debug("Initializing sortmerger...");     Sorter<PactRecord> sorter = new AsynchronousPartialSorter<PactRecord>(this.memoryManager, source,     this.parentTask, this.serializer, this.comparator, 32 * 1024 * 1024);     runPartialSorter(sorter, NUM_RECORDS, 2);
*       * @return the message.       */     @Message(id = 15841, value = "Exception getting result from server %s: %s")     String exceptionAwaitingResultFromServer(ServerIdentity server, String message);
* @return *     Returns a reference to this object so that method calls can be chained together.  */    public AbstractRequestMatcher delegate(RequestMatcher delegate) {     this.delegate = delegate;     return this;    }
* * @return the namesystem  */ public FSNamesystem getNamesystem() {     return namesystem; } /**  * @return the conf  */ public Configuration getConf() {     return conf; } /**  * @return the role  */ public NamenodeRole getRole() {     return role; } /**  * @return the state  */ public HAState getState() {     return state; } /**  * @return the haEnabled  */ public boolean isHAEnabled() {     return haEnabled; } /**  * @return the haContext  */ public HAContext getHaContext() {     return haContext; } /**  * @return the allowStaleStandbyReads  */ public boolean isAllowStaleStandbyReads() {     return allowStaleStandbyReads; }
* @Override      public void process(Node externs, Node root) {       logger.info(name);        startPass(name);        processInternal(externs, root);        endPass(externs, root); }
* @ApiOperation(value = "Create user", notes = "This can only be done by the logged in user.", tags={ "user",  })      @ApiResponses(value = {           @ApiResponse(code = 200, message = "successful operation", response = Void.class) })     void createUser(@Valid User body);      @ApiOperation(value = "Create user", notes = "This can only be done by the logged in user.", tags={ "user",  })      @ApiResponses(value = {           @ApiResponse(code = 200, message = "successful operation", response = Void.class) })     void createUser(@Valid User body);      @ApiOperation(value = "Create user", notes = "This can only be done by the logged in user.", tags={ "user",  })      @ApiResponses(value = {           @ApiResponse(code = 200, message = "successful operation", response = Void.class) })     void createUser(@Valid User body);      @ApiOperation(value = "Create user", notes = "This can only be done by the logged in user.", tags={ "user",  })      @ApiResponses(value = {           @ApiResponse(code = 200, message = "successful operation", response = Void.class) })     void createUser(@Valid User body);      @ApiOperation(value = "Create user", notes = "This can only be done by the logged in user.", tags={ "user",  })      @ApiResponses(value = {           @ApiResponse(code = 200, message = "successful operation", response = Void.class) })     void createUser(@Valid User body);      @ApiOperation(value = "Create user", notes = "This can only be done by the logged in user.", tags={ "user",  })      @ApiResponses(value = {           @ApiResponse(code = 200, message = "successful operation", response = Void.class) })     void createUser(@Valid User body);      @ApiOperation(value = "Create user", notes = "This can only be done by the logged in user.", tags={ "user",  })      @ApiResponses(value = {           @ApiResponse(code = 200, message = "successful operation", response = Void.class) })     void createUser(@Valid User body
* @return this  */    public final CompilerPassFactory crossModuleCodeMotion =        new PassFactory("crossModuleCodeMotion", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) { return crossModuleCodeMotion; } };

* @return this  */     public final CompilerPassFactory runtimeTypeCheck() { return new PassFactory("runtimeTypeCheck", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) { return new RuntimeTypeCheckPass(compiler); } };
* * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @
* @return this  */     public final CompilerPassFactory closureCheckGetCssName() { return new PassFactory("checkMissingGetCssName", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) { return new ClosureCheckGetCssName(compiler); } };
*     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return
* @RequestMapping(value = "/api/myborrowedbook", produces = MediaTypes.JSON_UTF_8) @ResponseStatus(HttpStatus.OK) @ResponseBody public List<BookDto> listMyBorrowedBook(Pageable pageable) {     checkToken(token);     Account currentUser = accountService.getLoginUser(token);     List<Book> books = adminService.listMyBook(currentUser.id, pageable);     return BeanMapper.mapList(books, Book.class, BookDto.class);    }    @RequestMapping(value = "/api/myborrowedbook/{id}", produces = MediaTypes.JSON_UTF_8) @ResponseStatus(HttpStatus.OK) @ResponseBody public BookDto myBorrowedBook(@PathVariable("id") Long id) {     checkToken(token);     Account currentUser = accountService.getLoginUser(token);     return BeanMapper.map(adminService.getMyBook(currentUser.id, id), Book.class, BookDto.class);    }    @RequestMapping(value = "/api/myborrowedbook", produces = MediaTypes.JSON_UTF_8) @ResponseStatus(HttpStatus.OK) @ResponseBody public List<BookDto> listMyBorrowedBook(Pageable pageable) {     checkToken(token);     Account currentUser = accountService.getLoginUser(token);     List<Book> books = adminService.listMyBook(currentUser.id, pageable);     return BeanMapper.mapList(books, Book.class, BookDto.class);    }    @RequestMapping(value = "/api/myborrowedbook/{id}", produces = MediaTypes.JSON_UTF_8) @ResponseStatus(HttpStatus.OK) @ResponseBody public BookDto myBorrowedBook(@PathVariable("id") Long id) {     checkToken(token);     Account currentUser = accountService.getLoginUser(token);     return BeanMapper.map(adminService.getMyBook(currentUser.id, id), Book.class, BookDto.class);    }    @RequestMapping(value = "/api/myborrowedbook", produces = MediaTypes.JSON_UTF_8) @ResponseStatus(HttpStatus.OK) @ResponseBody public List<BookDto> listMyBorrowedBook
* @return *     Returns the builder for this AdvancedMina2EndpointBuilder      */     default AdvancedMina2EndpointBuilder basic() {         return this;     } /**  * Sets whether synchronous processing should be strictly used, or Camel will use asynchronous processing (if supported).  *   * The option is a: <code>boolean</code> type.  *   * Default: false  * Group: producer  */     default AdvancedMina2EndpointBuilder synchronous(boolean synchronous) {         doSetProperty("synchronous", synchronous);         return this;     } /**  * Sets whether synchronous processing should be strictly used, or Camel will use asynchronous processing (if supported).  *   * The option will be converted to a <code>boolean</code> type.  *   * Default: false  * Group: producer  */     default AdvancedMina2EndpointBuilder synchronous(String synchronous) {         doSetProperty("synchronous", synchronous);         return this;     } /**  * Sets whether synchronous processing should be strictly used, or Camel will use asynchronous processing (if supported).  *   * The option will be converted to a <code>boolean</code> type.  *   * Default: false  * Group: producer  */     default AdvancedMina2EndpointBuilder synchronous(String synchronous) {         doSetProperty("synchronous", synchronous);         return this;     } /**  * Sets whether synchronous processing should be strictly used, or Camel will use asynchronous processing (if supported).  *   * The option will be converted to a <code>boolean</code> type.  *   * Default: false  * Group: producer  */     default AdvancedMina2EndpointBuilder synchronous(boolean synchronous) {         doSetProperty("synchronous", synchronous);         return this;     } /**  * Sets whether synchronous processing should be strictly used, or Camel will use asynchronous processing (if supported).  *   * The option will be converted to a <code>boolean</code> type.  *   * Default: false  * Group: producer  */     default AdvancedMina2EndpointBuilder synchronous(String synchronous) {         doSetProperty("synchronous", synchronous);         return this;     } /**  * Sets whether synchronous processing should be strictly used, or Camel will use asynchronous
* assertEquals(1, serverStub.callsToProcessBufferInserter);          assertNull(lm.getField("id"));          assertEquals("foo", lm.getField("_something"));         assertEquals(8, lm.getFields().size());
* @throws Exception {          Entity vo = JSON.parseObject("{\"date\":\"2016년5월6일\"}", Entity.class);         Calendar calendar = Calendar.getInstance(JSON.defaultLocale);          calendar.setTime(vo.date);          Assert.assertEquals(2016, calendar.get(Calendar.YEAR));          Assert.assertEquals(4, calendar.get(Calendar.MONTH)); }
* @Test      public void test_Decode_Error_Length() throws IOException {         byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, 0x20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};          Person person = new Person();          byte[] request = getRequestBytes(person, header);          assertThat(request).isEqualTo(new byte[]{MAGIC_HIGH, MAGIC_LOW, 0x20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
* * @return *     Returns a reference to this object so that method calls can be chained together.  */ @Generated("org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo") @Configuration @ConditionalOnBean(type = "org.apache.camel.spring.boot.CamelAutoConfiguration") @AutoConfigureAfter(name = "org.apache.camel.spring.boot.CamelAutoConfiguration") @EnableConfigurationProperties(QueueConfigurationProperties.class) public class QueueConfiguration {      @Autowired(required = false)     private QueueConfigurationProperties properties;      public QueueConfigurationProperties getProperties() {         return properties;     }      public void setProperties(QueueConfigurationProperties properties) {         this.properties = properties;     }      @Override     public boolean equals(Object obj) {         if (this == obj) {             return true;         }         if (obj == null) {             return false;         }         if (getClass()!= obj.getClass()) {             return false;         }         QueueConfiguration other = (QueueConfiguration) obj;         if (properties == null) {             if (other.properties!= null) {                 return false;             }         } else if (!properties.equals(other.properties)) {             return false;         }         return true;     }      @Override     public int hashCode() {         int result = 1;         result = 31 * result + (properties!= null? properties.hashCode() : 0);         return result;     }      @Override     public String toString() {         return "QueueConfiguration[" + (properties!= null? properties.toString() : "null") + "]";     } }
*     * @return     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see
*     * @return
*       * @return the message.       */     @Message(id = 15859, value = "A slave domain controller cannot accept deployment content uploads")      String slaveCannotAcceptUploads();

* @return this  */    public final CompilerPassFactory minimizeExitPoints =        new PassFactory("minimizeExitPoints", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) { return new MinimizeExitPoints(compiler); } };
*       * @return the message.       */     @Message(id = 15849, value = "Operation %s for address %s can only be handled by the master Domain Controller; this host is not the master Domain Controller") String masterDomainControllerOnlyOperation(String operation, PathAddress address);

* * @return this  * @throws NullPointerException if {@code compiler} is {@code null}  * @throws IllegalArgumentException if {@code compiler} is {@code null}  * @throws IllegalStateException if {@code compiler} is {@code null}  * @return this  * @throws NullPointerException if {@code compiler} is {@code null}  * @throws IllegalArgumentException if {@code compiler} is {@code null}  * @throws IllegalStateException if {@code compiler} is {@code null}  * @return this  * @throws NullPointerException if {@code compiler} is {@code null}  * @throws IllegalArgumentException if {@code compiler} is {@code null}  * @return this  * @throws IllegalStateException if {@code compiler} is {@code null}  * @return this  * @throws IllegalStateException if {@code compiler} is {@code null}  * @return this  * @throws IllegalStateException if {@code compiler} is {@code null}  * @return this  * @throws IllegalStateException if {@code compiler} is {@code null}  * @return this  * @throws IllegalStateException if {@code compiler} is {@code null}  * @return this  * @throws IllegalStateException if {@code compiler} is {@code null}  * @return this  * @throws IllegalStateException if {@code compiler} is {@code null}  * @return this  * @throws IllegalStateException if {@code compiler} is {@code null}  * @return this  * @throws IllegalStateException if {@code compiler} is {@code null}  * @return this  * @throws IllegalStateException if {@code compiler} is {@code null}  * @return this  * @throws IllegalStateException if {@code compiler} is {@code null}  * @return this  * @throws IllegalStateException if {@code compiler} is {@code null}  * @return this  * @throws IllegalStateException if {@code compiler} is {@code null}  * @return this  * @throws IllegalStateException if {@code compiler} is {@code null}  * @return this  * @throws IllegalStateException if {@code compiler} is {@code null}  * @return this  * @throws IllegalStateException if {@code compiler} is {@code null}  * @return this  * @throws IllegalStateException if {@code compiler} is {@code null}  * @return this  * @throws IllegalStateException if {@code compiler} is {@code null}  * @return this  * @throws IllegalStateException if {@code compiler}
* * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @
* @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return
* if (body.endsWith("3") || body.endsWith("7")) {                                              log.info("5th message received.  Rolling back.");                                              exchange.getOut().setFault(true);                                              exchange.getOut().setBody("5th message received.  Rolling back."); } else {                                              log.info("5th message received.  Rolling back.");                                              exchange.getOut().setFault(true);                                              exchange.getOut().setBody("5th message received.  Rolling back."); }
*       * @return a message for the error.       */     @Message(id = 15830, value = "Registration of remote hosts is not supported on slave host controllers")      String slaveControllerCannotAcceptOtherSlaves(); /**     * @return a message for the error.       */     @Message(id = 15830, value = "Registration of remote hosts is not supported on slave host controllers")      String slaveControllerCannotAcceptOtherSlaves(); /**     * @return a message for the error.       */     @Message(id = 15830, value = "Registration of remote hosts is not supported on slave host controllers")      String slaveControllerCannotAcceptOtherSlaves(); /**     * @return a message for the error.       */     @Message(id = 15830, value = "Registration of remote hosts is not supported on slave host controllers")      String slaveControllerCannotAcceptOtherSlaves(); /**     * @return a message for the error.       */     @Message(id = 15830, value = "Registration of remote hosts is not supported on slave host controllers")      String slaveControllerCannotAcceptOtherSlaves(); /**     * @return a message for the error.       */     @Message(id = 15830, value = "Registration of remote hosts is not supported on slave host controllers")      String slaveControllerCannotAcceptOtherSlaves(); /**     * @return a message for the error.       */     @Message(id = 15830, value = "Registration of remote hosts is not supported on slave host controllers")      String slaveControllerCannotAcceptOtherSlaves(); /**     * @return a message for the error.       */     @Message(id = 15830, value = "Registration of remote hosts is not supported on slave host controllers")      String slaveControllerCannotAcceptOtherSlaves(); /**     * @return a message for the error.       */     @Message(id = 15830, value = "Registration of remote hosts is not supported on slave host controllers")      String slaveControllerCannotAcceptOtherSlaves(); /**     * @return a message for the error.       */     @Message(id = 15830, value = "Registration of remote hosts is not supported on slave host controllers")      String slaveControllerCannotAcceptOtherSlaves(); /**     * @return a message for the error.       */     @Message(id = 15830, value = "Registration of remote hosts
* @see <a href:       */      public Trends getTrends() throws TwitterException {         return Trends.constructTrends(get(getSearchBaseURL() + "trends.json", false));      }
* * @return
* @return this  */     public final CompilerPassFactory collapseObjectLiterals() {      return new PassFactory("collapseObjectLiterals", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) { return new CollapseObjectLiteralsPass(compiler); } };
* mw.visitVarInsn(LLOAD, context.var("float"));              mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), "processKey",                                 "(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;F)Ljava/lang/String;");          } else if (propertyClass == double.class) {             mw.visitVarInsn(LLOAD, context.var("double"));               mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), "processKey",                                 "(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;D)Ljava/lang/String;");          } else if (propertyClass == boolean.class) {             mw.visitVarInsn(LLOAD, context.var("boolean"));               mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), "processKey",                                 "(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;B)Ljava/lang/String;");          } else if (propertyClass == char.class) {             mw.visitVarInsn(LLOAD, context.var("char"));               mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), "processKey",                                 "(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;C)Ljava/lang/String;");          } else if (propertyClass == short.class) {             mw.visitVarInsn(LLOAD, context.var("short"));               mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), "processKey",                                 "(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;S)Ljava/lang/String;");          } else if (propertyClass == int.class) {             mw.visitVarInsn(LLOAD, context.var("int"));               mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), "processKey",                                 "(Lcom/
* @Test   public void BaseCommandTest() {   S_Command scmd = new S_Command("00FE30", 20.0);    String commandStr = scmd.getCommandString();    assertEquals("00FE30", commandStr);    }
* * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @
* @return this  */     public final CompilerPassFactory collapseProperties =        new PassFactory("collapseProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) { return new CollapseProperties(compiler); } };
* @return this  */     public LatePeepholeOptimizationsPassFactory latePeepholeOptimizations() { return new LatePeepholeOptimizationsPassFactory(this); }
* * * @param dir The directory to delete.  * @return The number of files deleted.  * @throws IOException If an I/O error occurs.  */  public int delete(File dir) throws IOException {          for (File file : files) {             Files.delete(file.toPath());          }          return files.length;      }
* @return *     @Override State getTopScope() {        return delegate.getTopScope();      }     @Override State getIntermediateState() {        return delegate.getIntermediateState();      }     @Override void setIntermediateState(State state) {        delegate.setIntermediateState(state);      }
* from("direct:a").setBody(constant("A")); from("direct:b").delay(3000).setBody(constant("B")); from("direct:c").delay(500).setBody(constant("C"));
*     rel.setPersonA(personA);     rel.setPersonB(personB);     rel.setRelationshipType(relType);    ps.createRelationship(rel);    }
* @return
*     * @return The closed DataStream    */  public DataStreamSink<OUT> writeAsCsv(String path, long millis) {    return writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, null);   }
* @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return
* @return * The builder for the advanced builder pattern.      */     default CwEndpointBuilder advanced() {              return (CwEndpointBuilder) this;          }
* LOG.trace("OpenTracing: end server span=" + span);                  }              } catch (Throwable t) {                 LOG.error("OpenTracing: Failed to capture tracing data", t);              }          }
* @return     * @throws     * @throws     * @throws     * @throws     * @throws     * @throws     * @throws     * @throws     * @throws     * @throws     * @throws     * @throws     * @throws     * @throws     * @throws     * @throws     * @throws     * @throws     * @throws     * @throws     * @throws     * @throws     * @throws     * @return     * @throws     * @throws     * @throws     * @throws     * @throws     * @throws     * @throws     * @throws     * @throws     * @throws     * @throws     * @throws     * @throws     * @throws     * @throws     * @throws     * @throws     * @throws     * @throws     * @throws     * @return     * @throws     * @throws     * @throws     * @throws     * @throws     * @throws     * @throws     * @throws     * @throws     * @throws     * @throws     * @throws     * @throws     * @throws     * @throws     * @return     * @throws     * @throws     * @throws     * @throws     * @throws     * @throws     * @throws     * @throws     * @throws     * @throws     * @throws     * @throws     * @throws     * @throws     * @throws     * @return     * @throws     * @throws     * @throws     * @throws     * @throws     * @throws     * @throws     * @throws     * @throws     * @throws     * @throws     * @return     * @throws     * @throws     * @throws     * @throws     * @throws     * @throws     * @throws     * @throws     * @throws     * @throws     * @throws     * @throws     * @throws     * @return     * @throws     * @throws     * @throws     * @throws     * @throws     * @throws     * @throws     * @throws     * @throws     * @throws     * @throws     * @throws     * @return     * @throws     * @throws     * @throws     * @throws     * @throws     * @throws     * @throws     * @throws     * @throws     * @throws     * @
* @since Twitter4J 2.0.1 */      public ResponseList<Status> getFavorites() throws TwitterException {         return Status.constructStatuses(get(getBaseURL() + "favorites.json", new PostParameter[0], true));      }      /** @since Twitter4J 2.0.1 */      public ResponseList<Status> getFavorites() throws TwitterException {         return Status.constructStatuses(get(getBaseURL() + "favorites.json", new PostParameter[0], true));      }      /** @since Twitter4J 2.0.1 */      public ResponseList<Status> getFavorites() throws TwitterException {         return Status.constructStatuses(get(getBaseURL() + "favorites.json", new PostParameter[0], true));      }      /** @since Twitter4J 2.0.1 */      public ResponseList<Status> getFavorites() throws TwitterException {         return Status.constructStatuses(get(getBaseURL() + "favorites.json", new PostParameter[0], true));      }      /** @since Twitter4J 2.0.1 */      public ResponseList<Status> getFavorites() throws TwitterException {         return Status.constructStatuses(get(getBaseURL() + "favorites.json", new PostParameter[0], true));      }      /** @since Twitter4J 2.0.1 */      public ResponseList<Status> getFavorites() throws TwitterException {         return Status.constructStatuses(get(getBaseURL() + "favorites.json", new PostParameter[0], true));      }      /** @since Twitter4J 2.0.1 */      public ResponseList<Status> getFavorites() throws TwitterException {         return Status.constructStatuses(get(getBaseURL() + "favorites.json", new PostParameter[0], true));      }      /** @since Twitter4J 2.0.1 */      public ResponseList<Status> getFavorites() throws TwitterException {         return Status.constructStatuses(get(getBaseURL() + "favorites.json", new PostParameter[0], true));      }      /** @since Twitter4J 2.0.1 */      public ResponseList<Status> getFavorites() throws TwitterException {         return Status.constructStatuses(get(getBaseURL() + "favorites.json
* builder.getAdviceWithTasks().add(AdviceWithTasks.remove(route, id, selectFirst, selectLast, selectFrom, selectTo, maxDeep)); return builder; }


* @should get property value given valid property name    * @should get property in case insensitive way    */  public String getGlobalProperty(String propertyName) throws APIException {    * @should get property value given valid property name    * @should get property in case insensitive way    */  public String getGlobalProperty(String propertyName) throws APIException {    * @should get property value given valid property name    * @should get property in case insensitive way    */  public String getGlobalProperty(String propertyName) throws APIException {    * @should get property value given valid property name    * @should get property in case insensitive way    */  public String getGlobalProperty(String propertyName) throws APIException {    * @should get property value given valid property name    * @should get property in case insensitive way    */  public String getGlobalProperty(String propertyName) throws APIException {    * @should get property value given valid property name    * @should get property in case insensitive way    */  public String getGlobalProperty(String propertyName) throws APIException {    * @should get property value given valid property name    * @should get property in case insensitive way    */  public String getGlobalProperty(String propertyName) throws APIException {    * @should get property value given valid property name    * @should get property in case insensitive way    */  public String getGlobalProperty(String propertyName) throws APIException {    * @should get property value given valid property name    * @should get property in case insensitive way    */  public String getGlobalProperty(String propertyName) throws APIException {    * @should get property value given valid property name    * @should get property in case insensitive way    */  public String getGlobalProperty(String propertyName) throws APIException {    * @should get property value given valid property name    * @should get property in case insensitive way    */  public String getGlobalProperty(String propertyName) throws APIException {    * @should get property value given valid property name    * @should get property in case insensitive way    */  public String getGlobalProperty(String propertyName) throws APIException {    * @should get property value given valid property name    * @should get property in case insensitive way    */  public String getGlobalProperty(String propertyName) throws APIException {    * @should get property value given valid property name    * @should get property in case insensitive way    */  public String getGlobalProperty(String propertyName) throws APIException {    * @should get property value
* *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *      *
* @see <a href:       */      public ResponseList<Status> getRetweetedToMe(Paging paging) throws TwitterException {         return Status.constructStatuses(get(getBaseURL() + "statuses/retweeted_to_me.json",                  null, paging.asPostParameterList(), true));      }
* * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @
* @return this  */     public final CompilerPassFactory inlineFunctions =        new PassFactory("inlineFunctions", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) { return new InlineFunctions(compiler); } };
* sendIncrease(bulb, rgbwSteps, bridgeId);                           } } } else if (command.compareTo(oldPercent) < 0) {                       for (int i = 0; i < repeatCount; i++) {                          Thread.sleep(50);                           if (BindingType.brightness.equals(type)) {                               sendDecrease(bulb, rgbwSteps, bridgeId);                           } else if (BindingType.colorTemperature.equals(type)) {                               sendDecrease(bulb, rgbwSteps, bridgeId);                           } }
* * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @
* * @return ResponseList<Status> */     public ResponseListResult<Status> getFriendsTimeline(Paging paging) throws              TwitterException {         return Status.constructStatuses(get(getBaseURL() + "statuses/friends_timeline.json",null, paging.asPostParameterList(), true));      }
* @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return
* * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @
* * @throws Exception {    mkdir(tmpdir);    StringBuilder grammarBuilder = new StringBuilder(239);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s @after {print($ctx.toStringTree(recog=self))} : e ;\n");    grammarBuilder.append("e : a=e op=('*'|'/') b=e  {}{True}?\n");
* statistics.addHitTimeNano(System.nanoTime() - start);              if (hitCount == 1) {                  statistics.increaseCacheHits(hitCount);              } }
* @return this  */     public final CompilerPassFactory sanityCheckAst =        new PassFactory("sanityCheckAst", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) { return sanityCheckAst; } };
* * @return ResponseList<Status> */     public ResponseListResult<Status> getFriendsTimeline() throws              TwitterException {         return Status.constructStatuses(get(getBaseURL() + "statuses/friends_timeline.json", true));      }
*       * @return the message.       */     @Message(id = 15852, value = "Caught %s storing deployment content -- %s")    String caughtExceptionStoringDeploymentContent(String exceptionName, Throwable exception);
* @return this  */       public final CompilerPassFactory generateExports =        new PassFactory("generateExports", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) { return generateExports; } };
* @Test      public void test_Decode_Return_Request_Object() throws IOException {         byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, (byte) 0xdf, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};          Person person = new Person();          byte[] request = getRequestBytes(person, header);
* @return this  */     public HotSwapPassFactory checkRequires() { return checkRequires; }
*      javax.servlet.http.HttpServletResponse */    @Override   protected void doPost(HttpServletRequest httpRequest, HttpServletResponse httpResponse) throws IOException,            ServletException {     String page = httpRequest.getParameter("page");
* @return * @return * @return * @return * @deprecated Use {@link #basic()} instead  */ @Deprecated public static interface AdvancedSagaEndpointBuilder              extends                  EndpointProducerBuilder {          default SagaEndpointBuilder basic() { return basic(); }
* @Test      public void test_Decode_Return_Request_Object() throws IOException {         byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, (byte) 0xdf, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};          Person person = new Person();          byte[] request = getRequestBytes(person, header);
*    * @return The hash value for the given record.   */ public int compare(T record) *    * @return The hash value for the given record.   */ public int compare(T record) *    * @return The hash value for the given record.   */ public int compare(T record) *    * @return The hash value for the given record.   */ public int compare(T record) *    * @return The hash value for the given record.   */ public int compare(T record) *    * @return The hash value for the given record.   */ public int compare(T record) *    * @return The hash value for the given record.   */ public int compare(T record) *    * @return The hash value for the given record.   */ public int compare(T record) *    * @return The hash value for the given record.   */ public int compare(T record) *    * @return The hash value for the given record.   */ public int compare(T record) *    * @return The hash value for the given record.   */ public int compare(T record) *    * @return The hash value for the given record.   */ public int compare(T record) *    * @return The hash value for the given record.   */ public int compare(T record) *    * @return The hash value for the given record.   */ public int compare(T record) *    * @return The hash value for the given record.   */ public int compare(T record) *    * @return The hash value for the given record.   */ public int compare(T record) *    * @return The hash value for the given record.   */ public int compare(T record) *    * @return The hash value for the given record.   */ public int compare(T record) *    * @return The hash value for the given record.   */ public int compare(T record) *    * @return The hash value for the given record.   */ public int compare(T record) *    * @return The hash value for the given record.   */ public int compare(T record) *    * @return The hash value for the given record.   */ public int compare(T record) *    * @return The hash value for the given record.   */ public int compare(T record) *    * @

*       * @return the message.       */     @Message(id = 15844, value = "Invalid rollout plan. Server group %s appears more than once in the plan.")      String invalidRolloutPlanGroupAlreadyExists(String group);
* assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())         .isEqualTo(new TypeToken<List<String>>() {}.getType());      assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())         .isEqualTo(new TypeToken<List<String>>() {}.getType());      assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())         .isEqualTo(new TypeToken<List<String>>() {}.getType());      assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())         .isEqualTo(new TypeToken<List<String>>() {}.getType());      assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())         .isEqualTo(new TypeToken<List<String>>() {}.getType());      assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())         .isEqualTo(new TypeToken<List<String>>() {}.getType());      assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())         .isEqualTo(new TypeToken<List<String>>() {}.getType());      assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())         .isEqualTo(new TypeToken<List<String>>() {}.getType());      assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())         .isEqualTo(new TypeToken<List<String>>() {}.getType());      assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())         .isEqualTo(new TypeToken<List<String>>() {}.getType());      assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())         .isEqualTo(new TypeToken<List<String>>() {}.getType());      assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())         .isEqualTo(new TypeToken<List<String>>() {}.getType());      assertThat(factory.
*       * @return the message.       */     @Message(id = 15849, value = "Operation %s for address %s can only be handled by the master Domain Controller; this host is not the master Domain Controller") String masterDomainControllerOnlyOperation(String operation, PathAddress address);

* @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @
* * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @
* @return this  */     public final CompilerPassFactory coalesceVariableNames =        new PassFactory("coalesceVariableNames", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) { return new CoalesceVariableNames(compiler); } };
*     *     *     * @return This pass.      */   private final PassFactory collapseVariableDeclarations =        new PassFactory("collapseVariableDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) { return new CollapseVariableDeclarations(compiler); } };
* @should set uuid on implementation id global property    */   @Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)  public void setImplementationId(ImplementationId implementationId) throws APIException {   /**    * Gets the list of locales which the administrator has allowed for use on the system. This is the fixed version    */   @Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)  public List<Locale> getImplementationId() throws APIException {   /**    * Gets the list of locales which the administrator has allowed for use on the system. This is the fixed version    */   @Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)  public List<Locale> getImplementationId() throws APIException {   /**    * Gets the list of locales which the administrator has allowed for use on the system. This is the fixed version    */   @Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)  public List<Locale> getImplementationId() throws APIException {   /**    * Gets the list of locales which the administrator has allowed for use on the system. This is the fixed version    */   @Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)  public List<Locale> getImplementationId() throws APIException {   /**    * Gets the list of locales which the administrator has allowed for use on the system. This is the fixed version    */   @Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)  public List<Locale> getImplementationId() throws APIException {   /**    * Gets the list of locales which the administrator has allowed for use on the system. This is the fixed version    */   @Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)  public List<Locale> getImplementationId() throws APIException {   /**    * Gets the list of locales which the administrator has allowed for use on the system. This is the fixed version    */   @Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)  public List<Locale> getImplementationId() throws APIException {   /**    * Gets the list of locales which the administrator has allowed for use on the system. This is the fixed version    */   @Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)  public List<Locale> getImplementationId() throws APIException {   /**    * Gets the list of locales which

*     * @return
* * @return {Promise<List<T>>} A promise that resolves with the results of the query  * @return {Promise<List<T>>} A promise that resolves with the results of the query  * @return {Promise<List<T>>} A promise that resolves with the results of the query  * @return {Promise<List<T>>} A promise that resolves with the results of the query  * @return {Promise<List<T>>} A promise that resolves with the results of the query  * @return {Promise<List<T>>} A promise that resolves with the results of the query  * @return {Promise<List<T>>} A promise that resolves with the results of the query  * @return {Promise<List<T>>} A promise that resolves with the results of the query  * @return {Promise<List<T>>} A promise that resolves with the results of the query  * @return {Promise<List<T>>} A promise that resolves with the results of the query  * @return {Promise<List<T>>} A promise that resolves with the results of the query  * @return {Promise<List<T>>} A promise that resolves with the results of the query  * @return {Promise<List<T>>} A promise that resolves with the results of the query  * @return {Promise<List<T>>} A promise that resolves with the results of the query  * @return {Promise<List<T>>} A promise that resolves with the results of the query  * @return {Promise<List<T>>} A promise that resolves with the results of the query  * @return {Promise<List<T>>} A promise that resolves with the results of the query  * @return {Promise<List<T>>} A promise that resolves with the results of the query  * @return {Promise<List<T>>} A promise that resolves with the results of the query  * @return {Promise<List<T>>} A promise that resolves with the results of the query  * @return {Promise<List<T>>} A promise that resolves with the results of the query  * @return {Promise<List<T>>} A promise that resolves with the results of the query  * @return {Promise<List<T>>} A promise that resolves with the results of the query  * @return
* * @throws IOException {      long startTimeMs = CommonUtils.getCurrentMs();      for (int k = 0; k < THREADS; k ++) {        int fileId = MTC.createFile(FILE_NAME + (k + BASE_FILE_NUMBER));      CommonUtils.printTimeTakenMs(startTimeMs, LOG, "user_createFiles with fileId " + fileId);      }      }
* @return this  */     public final PassFactory optimizeArgumentsArray =        new PassFactory("optimizeArgumentsArray", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) { return new OptimizeArgumentsArray(compiler); } };
* @return this  */     public final CompilerPassFactory createConvertToDottedProperties() { return new PassFactory("convertToDottedProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) { return new ConvertToDottedProperties(compiler); } };
* * @return *     Returns a reference to this object so that method calls can be chained together.  *  * @see java.lang.Object#toString()  */ @Override public String toString() {     StringBuilder sb = new StringBuilder();     sb.append("{");     sb.append("}");     return sb.toString(); }
* if (capacity > 1 << 30) throw new IllegalArgumentException("initialCapacity is too large: " + initialCapacity);    }   public IntIntMap (int initialCapacity) {    if (initialCapacity < 0) throw new IllegalArgumentException("initialCapacity must be >= 0: " + initialCapacity);   if (capacity > 1 << 30) throw new IllegalArgumentException("initialCapacity is too large: " + initialCapacity);    capacity = MathUtils.nextPowerOfTwo(initialCapacity);    }   public IntIntMap (int initialCapacity) {    if (initialCapacity < 0) throw new IllegalArgumentException("initialCapacity must be >= 0: " + initialCapacity);   if (capacity > 1 << 30) throw new IllegalArgumentException("initialCapacity is too large: " + initialCapacity);    capacity = MathUtils.nextPowerOfTwo(initialCapacity);    }   public IntIntMap (int initialCapacity) {    if (initialCapacity < 0) throw new IllegalArgumentException("initialCapacity must be >= 0: " + initialCapacity);   if (capacity > 1 << 30) throw new IllegalArgumentException("initialCapacity is too large: " + initialCapacity);    capacity = MathUtils.nextPowerOfTwo(initialCapacity);    }   public IntIntMap (int initialCapacity) {    if (initialCapacity < 0) throw new IllegalArgumentException("initialCapacity must be >= 0: " + initialCapacity);   if (capacity > 1 << 30) throw new IllegalArgumentException("initialCapacity is too large: " + initialCapacity);    capacity = MathUtils.nextPowerOfTwo(initialCapacity);    }   public IntIntMap (int initialCapacity) {    if (initialCapacity < 0) throw new IllegalArgumentException("initialCapacity must be >= 0: " + initialCapacity);   if (capacity > 1 << 30) throw new IllegalArgumentException("initialCapacity is too large: " + initialCapacity);    capacity = MathUtils.nextPowerOfTwo(initialCapacity);    }   public IntIntMap (int initialCapacity) {    if (initialCapacity < 0) throw new IllegalArgumentException("initialCapacity must be >= 0: " + initialCapacity);   if (capacity > 1 << 30) throw new IllegalArgumentException("initialCapacity is too large: " + initialCapacity);    capacity = MathUtils.nextPowerOfTwo(initialCapacity);    }   public IntIntMap (int initialCapacity) {    if (initialCapacity < 0) throw new IllegalArgumentException("initialCapacity must be >= 0: " + initialCapacity
* @return     *     *     *     * @throws    *     *     *     * @throws    *     *     * @throws    *     * @return     *     *     * @throws    *     * @throws    *     * @throws    *     * @return     *     * @throws    *     * @throws    *     * @return     *     * @throws    *     * @throws    *     * @return     *     * @throws    *     * @return     *     * @throws    *     * @return     *     * @throws    *     * @return     *     * @throws    *     * @return     *     * @throws    *     * @return     *     * @throws    *     * @return     *     * @throws    *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *
* * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @
* @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return
* * @return The channel to the remote gRPC server  */ @Override protected void doStopInternal() throws Exception {          if (channel!= null) {             LOG.trace("Terminating channel to the remote gRPC server");              channel.shutdown().shutdownNow();              channel = null;              grpcStub = null;          }
* @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return
*     *     * @return this  *     */   private final PassFactory removeUnusedPrototypeProperties =        new PassFactory("removeUnusedPrototypeProperties", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) { return new RemoveUnusedPrototypeProperties(compiler); } };
* @return this  */     public final CompilerPassFactory closureCheckGetCssName() { return new PassFactory("checkMissingGetCssName", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) { return new ClosureCheckGetCssName(compiler); } };
* *     * @return
* * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @
*     *     *     * @return This pass.      */   private final PassFactory collapseVariableDeclarations =        new PassFactory("collapseVariableDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) { return new CollapseVariableDeclarations(compiler); } };
* * @return * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @
*     * @return

* @return this  */     public LatePeepholeOptimizationsPassFactory latePeepholeOptimizations() { return new LatePeepholeOptimizationsPassFactory(this); }
* @return this  */     public CompilerPassFactory ignoreCajaProperties() { return new PassFactory("ignoreCajaProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) { return new IgnoreCajaPropertiesPass(compiler); } };

*     @Test(timeout = 30000)      public void testMutex() throws InterruptedException {          final int threadCount = 2;          final HazelcastInstance[] instances = createHazelcastInstanceFactory(threadCount).newInstances(); }
*     * @return


*     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
* *     * @return     *     *     *     *     *     *     *     *     *     *     *     *     */   private final PassFactory devirtualizePrototypeMethods =        new PassFactory("devirtualizePrototypeMethods", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) { return new DevirtualizePrototypeMethodsPass(compiler); } };
* if (relationName.equals("org:top-members/employees")) { return "org:top-members/employees"; } else if (relationName.equals("org:top-members/employees")) { return "org:top-members/employees"; } else if (relationName.equals("org:top-members/employees")) { return "org:top-members/employees"; } else if (relationName.equals("org:top-members/employees")) { return "org:top-members/employees"; } else if (relationName.equals("org:top-members/employees")) { return "org:top-members/employees"; } else if (relationName.equals("org:top-members/employees")) { return "org:top-members/employees"; } else if (relationName.equals("org:top-members/employees")) { return "org:top-members/employees"; } else if (relationName.equals("org:top-members/employees")) { return "org:top-members/employees"; } else if (relationName.equals("org:top-members/employees")) { return "org:top-members/employees"; } else if (relationName.equals("org:top-members/employees")) { return "org:top-members/employees"; } else if (relationName.equals("org:top-members/employees")) { return "org:top-members/employees"; } else if (relationName.equals("org:top-members/employees")) { return "org:top-members/employees"; } else if (relationName.equals("org:top-members/employees")) { return "org:top-members/employees"; } else if (relationName.equals("org:top-members/employees")) { return "org:top-members/employees"; } else if (relationName.equals("org:top-members/employees")) { return "org:top-members/employees"; } else if (relationName.equals("org:top-members/em
* data[2] = RFXComBaseMessage.PacketType.CURRENT.toByte();          data[3] = RFXComBaseMessage.PacketType.CURRENT.toByte();          data[4] = RFXComBaseMessage.PacketType.CURRENT.toByte();          data[5] = RFXComBaseMessage.PacketType.CURRENT.toByte();          data[6] = RFXComBaseMessage.PacketType.CURRENT.toByte();          data[7] = RFXComBaseMessage.PacketType.CURRENT.toByte();          data[8] = RFXComBaseMessage.PacketType.CURRENT.toByte();          data[9] = RFXComBaseMessage.PacketType.CURRENT.toByte();          data[10] = RFXComBaseMessage.PacketType.CURRENT.toByte();          data[11] = RFXComBaseMessage.PacketType.CURRENT.toByte();          data[12] = RFXComBaseMessage.PacketType.CURRENT.toByte();          return data;      } @Override      public byte[] encodeMessage() {         byte[] data = new byte[13];          data[0] = 0x0D;          data[1] = RFXComBaseMessage.PacketType.CURRENT.toByte();          data[2] = RFXComBaseMessage.PacketType.CURRENT.toByte();          data[3] = RFXComBaseMessage.PacketType.CURRENT.toByte();          data[4] = RFXComBaseMessage.PacketType.CURRENT.toByte();          data[5] = RFXComBaseMessage.PacketType.CURRENT.toByte();          data[6] = RFXComBaseMessage.PacketType.CURRENT.toByte();          data[7] = RFXComBaseMessage.PacketType.CURRENT.toByte();          data[8] = RFXComBaseMessage.PacketType.CURRENT.toByte();          data[9] = RFXComBaseMessage.PacketType.CURRENT.toByte();          data[10] = RFXComBaseMessage.PacketType.CURRENT.toByte();          data[11] = RFXComBaseMessage.PacketType.CURRENT.toByte();
* @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return
* SimpleAttributeDefinition NEW_LEVEL = SimpleAttributeDefinitionBuilder.create("new-level", ModelType.STRING).              setCorrector(CaseParameterCorrector.TO_UPPER).              setValidator(new LogLevelValidator(true)).              build();     SimpleAttributeDefinition NEW_LEVEL = SimpleAttributeDefinitionBuilder.create("new-level", ModelType.STRING).              setCorrector(CaseParameterCorrector.TO_UPPER).              setValidator(new LogLevelValidator(true)).              build();     SimpleAttributeDefinition NEW_LEVEL = SimpleAttributeDefinitionBuilder.create("new-level", ModelType.STRING).              setCorrector(CaseParameterCorrector.TO_UPPER).              setValidator(new LogLevelValidator(true)).              build();     SimpleAttributeDefinition NEW_LEVEL = SimpleAttributeDefinitionBuilder.create("new-level", ModelType.STRING).              setCorrector(CaseParameterCorrector.TO_UPPER).              setValidator(new LogLevelValidator(true)).              build();     SimpleAttributeDefinition NEW_LEVEL = SimpleAttributeDefinitionBuilder.create("new-level", ModelType.STRING).              setCorrector(CaseParameterCorrector.TO_UPPER).              setValidator(new LogLevelValidator(true)).              build();     SimpleAttributeDefinition NEW_LEVEL = SimpleAttributeDefinitionBuilder.create("new-level", ModelType.STRING).              setCorrector(CaseParameterCorrector.TO_UPPER).              setValidator(new LogLevelValidator(true)).              build();     SimpleAttributeDefinition NEW_LEVEL = SimpleAttributeDefinitionBuilder.create("new-level", ModelType.STRING).              setCorrector(CaseParameterCorrector.TO_UPPER).              setValidator(new LogLevelValidator(true)).              build();     SimpleAttributeDefinition NEW_LEVEL = SimpleAttributeDefinitionBuilder.create("new-level", ModelType.STRING).              setCorrector(CaseParameterCorrector.TO_UPPER).              setValidator(new LogLevelValidator(true)).              build();     SimpleAttributeDefinition NEW_LEVEL = SimpleAttributeDefinitionBuilder.create("new-level", ModelType.STRING).              setCorrector(CaseParameterCorrector.TO_UPPER).              setValidator(new LogLevelValidator(true)).              build();     SimpleAttributeDefinition NEW_LEVEL = SimpleAttributeDefinitionBuilder.create("new-level", ModelType.STRING).              setCorrector(CaseParameterCorrector.TO_UPPER).              setValidator(
* * @throws {WebServiceException}   * @throws {WebServiceException}   * @throws {WebServiceException}   * @throws {WebServiceException}   * @throws {WebServiceException}   * @throws {WebServiceException}   * @throws {WebServiceException}   * @throws {WebServiceException}   * @throws {WebServiceException}   * @throws {WebServiceException}   * @throws {WebServiceException}   * @throws {WebServiceException}   * @throws {WebServiceException}   * @throws {WebServiceException}   * @throws {WebServiceException}   * @throws {WebServiceException}   * @throws {WebServiceException}   * @throws {WebServiceException}   * @throws {WebServiceException}   * @throws {WebServiceException}   * @throws {WebServiceException}   * @throws {WebServiceException}   * @throws {WebServiceException}   * @throws {WebServiceException}   * @throws {WebServiceException}   * @throws {WebServiceException}   * @throws {WebServiceException}   * @throws {WebServiceException}   * @throws {WebServiceException}   * @throws {WebServiceException}   * @throws {WebServiceException}   * @throws {WebServiceException}   * @throws {WebServiceException}   * @throws {WebServiceException}   * @throws {WebServiceException}   * @throws {WebServiceException}   * @throws {WebServiceException}   * @throws {WebServiceException}   * @throws {WebServiceException}   * @throws {WebServiceException}   * @throws {WebServiceException}   * @throws {WebServiceException}   * @throws {WebServiceException}   * @throws {WebServiceException}   * @throws {WebServiceException}   * @throws {WebServiceException}   * @throws {WebServiceException}   * @throws {WebServiceException}   * @throws {WebServiceException}   * @throws {WebServiceException}   * @throws {WebServiceException}   * @throws {WebServiceException}   * @throws {WebServiceException}   * @throws {WebServiceException}   * @throws {WebServiceException}   * @throws {WebServiceException}   * @throws {WebServiceException}   * @throws {WebServiceException}   * @throws {WebServiceException}   * @throws {WebServiceException}   * @throws {WebServiceException}   * @throws {WebServiceException}   * @throws {WebServiceException}   * @throws {Web

* * Creates synthetic blocks to prevent FoldConstants from moving code     * past markers in the source.     */   private final PassFactory createSyntheticBlocks =        new PassFactory("createSyntheticBlocks", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) { return new CreateSyntheticBlocks(compiler); } };
* @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @return   * @
*       * @return the message.       */     @Message(id = 15841, value = "Interrupted waiting for result from server %s")    String interruptedAwaitingResultFromServer(ServerIdentity server);
*     * @return
* * @return the result of this future  */ public T get() {      return result;   }
* * @return void  * @return void  * @return void  * @return void  * @return void  * @return void  * @return void  * @return void  * @return void  * @return void  * @return void  * @return void  * @return void  * @return void  * @return void  * @return void  * @return void  * @return void  * @return void  * @return void  * @return void  * @return void  * @return void  * @return void  * @return void  * @return void  * @return void  * @return void  * @return void  * @return void  * @return void  * @return void  * @return void  * @return void  * @return void  * @return void  * @return void  * @return void  * @return void  * @return void  * @return void  * @return void  * @return void  * @return void  * @return void  * @return void  * @return void  * @return void  * @return void  * @return void  * @return void  * @return void  * @return void  * @return void  * @return void  * @return void  * @return void  * @return void  * @return void  * @return void  * @return void  * @return void  * @return void  * @return void  * @return void  * @return void  * @return void  * @return void  * @return void  * @return void  * @return void  * @return void  * @return void  * @return void  * @return void  * @return void  * @return void  * @return void  * @return void  * @return void  * @return void  * @return void  * @return void  * @return void  * @return void  * @return void  * @return void  * @return void  * @return void  * @return void  * @return void  * @return void  * @return void  * @return void  * @return void  * @return void  * @return void  * @return void  * @return void  * @return void  * @return void  * @return void
* testMapStore.setLoadAllKeys(false);         int writeDelaySeconds = 2;          Config config = newConfig(testMapStore, writeDelaySeconds);          TestHazelcastInstanceFactory nodeFactory = createHazelcastInstanceFactory(3);          HazelcastInstance instance = nodeFactory.newHazelcastInstance(config); }
*     * @return

* @return this  */     public final CompilerPassFactory replaceStrings =        new PassFactory("replaceStrings", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) { return replaceStrings; } };
* * * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return *

* @return this  */     public HotSwapPassFactory checkVars() { return checkVars; }
* * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @
* @return this  */     public final CompilerPassFactory exportTestFunctions =        new PassFactory("exportTestFunctions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) { return new ExportTestFunctions(compiler); } };
*     * @return
* * @param {string} [databaseName] The name of the database to connect to.  * @param {string} [username] The username of the database to connect to.  * @param {string} [password] The password of the database to connect to.  * @param {string} [databaseName] The name of the database to connect to.  * @param {string} [username] The username of the database to connect to.  * @param {string} [password] The password of the database to connect to.  * @param {string} [databaseName] The name of the database to connect to.  * @param {string} [username] The username of the database to connect to.  * @param {string} [password] The password of the database to connect to.  * @param {string} [databaseName] The name of the database to connect to.  * @param {string} [username] The username of the database to connect to.  * @param {string} [password] The password of the database to connect to.  * @param {string} [databaseName] The name of the database to connect to.  * @param {string} [username] The username of the database to connect to.  * @param {string} [password] The password of the database to connect to.  * @param {string} [databaseName] The name of the database to connect to.  * @param {string} [username] The username of the database to connect to.  * @param {string} [password] The password of the database to connect to.  * @param {string} [databaseName] The name of the database to connect to.  * @param {string} [username] The username of the database to connect to.  * @param {string} [password] The password of the database to connect to.  * @param {string} [databaseName] The name of the database to connect to.  * @param {string} [username] The username of the database to connect to.  * @param {string} [password] The password of the database to connect to.  * @param {string} [databaseName] The name of the database to connect to.  * @param {string} [username] The username of the database to connect to.  * @param {string}
*     *     *     *     *     *     *     *     *     * @return
* @see EventListenerList       */     void fireTreeStructureChanged(Object source, Object[] path,                                    int[] childIndices,                                    Object... children) {
* @see <a href="http:       */      public PagableResponseList<twitter4j.List> getUserLists(String user, long cursor) throws TwitterException {         return twitter4j.List.constructListOfLists(get(getApiBaseURL() + V1 +                  user + "/lists.json?cursor=" + cursor, true));      }
* @return this  */    public final PassFactory groupVariableDeclarations =        new PassFactory("groupVariableDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) { return new GroupVariableDeclarations(compiler); } };
* if (command.compareTo(oldPercent) > 0) {        int repeatCount = (command.intValue() - oldPercent.intValue()) / 10;       for(int i = 0; i <= repeatCount; i++) {         Thread.sleep(100);         if(BindingType.brightness.equals(type) && bulb < 6) {          sendIncrease(bulb, rgbwSteps, bridgeId); } } } } } } else { if (command.compareTo(oldPercent) > 0) {        int repeatCount = (command.intValue() - oldPercent.intValue()) / 10;       for(int i = 0; i <= repeatCount; i++) {         Thread.sleep(100);         if(BindingType.brightness.equals(type) && bulb < 6) {          sendDecrease(bulb, rgbwSteps, bridgeId); } } } } else { if (command.compareTo(oldPercent) > 0) {        int repeatCount = (command.intValue() - oldPercent.intValue()) / 10;       for(int i = 0; i <= repeatCount; i++) {         Thread.sleep(100);         if(BindingType.brightness.equals(type) && bulb < 6) {          sendDecrease(bulb, rgbwSteps, bridgeId); } } }
* @return this  */     public CompilerPassFactory disambiguateProperties() { return new PassFactory("disambiguateProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) { return new DisambiguatePropertiesPass(compiler); } };
*    *    * @return {@link SkeletonStrategy}  * @return {@link SkeletonStrategy}  * @return {@link SkeletonStrategy}  * @return {@link SkeletonStrategy}  * @return {@link SkeletonStrategy}  * @return {@link SkeletonStrategy}  * @return {@link SkeletonStrategy}  * @return {@link SkeletonStrategy}  * @return {@link SkeletonStrategy}  * @return {@link SkeletonStrategy}  * @return {@link SkeletonStrategy}  * @return {@link SkeletonStrategy}  * @return {@link SkeletonStrategy}  * @return {@link SkeletonStrategy}  * @return {@link SkeletonStrategy}  * @return {@link SkeletonStrategy}  * @return {@link SkeletonStrategy}  * @return {@link SkeletonStrategy}  * @return {@link SkeletonStrategy}  * @return {@link SkeletonStrategy}  * @return {@link SkeletonStrategy}  * @return {@link SkeletonStrategy}  * @return {@link SkeletonStrategy}  * @return {@link SkeletonStrategy}  * @return {@link SkeletonStrategy}  * @return {@link SkeletonStrategy}  * @return {@link SkeletonStrategy}  * @return {@link SkeletonStrategy}  * @return {@link SkeletonStrategy}  * @return {@link SkeletonStrategy}  * @return {@link SkeletonStrategy}  * @return {@link SkeletonStrategy}  * @return {@link SkeletonStrategy}  * @return {@link SkeletonStrategy}  * @return {@link SkeletonStrategy}  * @return {@link SkeletonStrategy}  * @return {@link SkeletonStrategy}  * @return {@link SkeletonStrategy}  * @return {@link SkeletonStrategy}  * @return {@link SkeletonStrategy}  * @return {@link SkeletonStrategy}  * @return {@link SkeletonStrategy}  * @return {@link SkeletonStrategy}  * @return {@link SkeletonStrategy}  * @return {@link SkeletonStrategy}  * @return {@link SkeletonStrategy}  * @return {@link SkeletonStrategy}  * @return {@link SkeletonStrategy}  * @return {@link SkeletonStrategy}  * @return {@link SkeletonStrategy}  * @return {@link Sk
grammarBuilder.append("DEC : '0'..'9'+ ;\n");    grammarBuilder.append("ID : 'a'..'z'+ ;\n");    grammarBuilder.append("INT : '0'..'9'+ ;\n");    grammarBuilder.append("DEC : '0'..'9'+ ;\n");    grammarBuilder.append("  ;\n");    grammarBuilder.append("ID : 'a'..'z'+ ;\n");    grammarBuilder.append("INT : '0'..'9'+ ;\n");    grammarBuilder.append("DEC : '0'..'9'+ ;\n");    grammarBuilder.append("  ;\n");    grammarBuilder.append("ID : 'a'..'z'+ ;\n");    grammarBuilder.append("INT : '0'..'9'+ ;\n");    grammarBuilder.append("DEC : '0'..'9'+ ;\n");    grammarBuilder.append("  ;\n");    grammarBuilder.append("ID : 'a'..'z'+ ;\n");    grammarBuilder.append("INT : '0'..'9'+ ;\n");    grammarBuilder.append("DEC : '0'..'9'+ ;\n");    grammarBuilder.append("  ;\n");    grammarBuilder.append("ID : 'a'..'z'+ ;\n");    grammarBuilder.append("INT : '0'..'9'+ ;\n");    grammarBuilder.append("DEC : '0'..'9'+ ;\n");    grammarBuilder.append("  ;\n");    grammarBuilder.append("ID : 'a'..'z'+ ;\n");    grammarBuilder.append("INT : '0'..'9'+ ;\n");    grammarBuilder.append("DEC : '0'..'9'+ ;\n");    grammarBuilder.append("  ;\n");    grammarBuilder.append("ID : 'a'..'z'+ ;\n");    grammarBuilder.append("INT : '0'..'9'+ ;\n");    grammarBuilder.append("DEC : '0'..'9'+ ;
* {@inheritDoc}       */      @Override     public AtmosphereResource removeAtmosphereResource(AtmosphereResource r) {          try {              if (destroyed.get()) {                  logger.debug(DESTROYED, getID(), "removeAtmosphereResource(AtmosphereResource<?,?> r)");                 return r;              }              return super.removeAtmosphereResource(r);          }          catch (Throwable t) {              throw new RuntimeException(t);          }      }
* * @return {String}  */ String splitsSummary = String.format("Splits: %,4d total, %,4d pending, %,4d running, %,4d done",                      globalExecutionStats.getSplits(),                      max(0, globalExecutionStats.getSplits() - globalExecutionStats.getStartedSplits()),                     max(0, globalExecutionStats.getSplits() - globalExecutionStats.getCompletedSplits()),                      globalExecutionStats.getCompletedSplits());              reprintLine(splitsSummary);
* @throws Exception {          Entity vo = JSON.parseObject("{\"date\":\"2016년5월6일\"}", Entity.class);         Calendar calendar = Calendar.getInstance(JSON.defaultLocale);          calendar.setTime(vo.date);          Assert.assertEquals(2016, calendar.get(Calendar.YEAR));          Assert.assertEquals(4, calendar.get(Calendar.MONTH)); }
* * @return *     Returns a reference to this {@code AdvancedNsqEndpointBuilder} object to allow method call  *     chaining  */     default AdvancedNsqEndpointBuilder basic() {         return this;     }
* this.uncollectedPointCreater = uncollectedPointCreator;          return this;          }

* * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @
*       * @return the error message       */     @Message(id = 15833, value = "%s is missing %s: %s")    String requiredChildIsMissing(String parent, String child, String parentSpec);
*       *       * java.io.IOException: An established connection was aborted by the software in your host machine          at sun.nio.ch.SocketDispatcher.read0(Native Method)      *       *       * java.io.IOException: An established connection was aborted by the software in your host machine          at sun.nio.ch.SocketDispatcher.read0(Native Method)      *       *       * java.io.IOException: An established connection was aborted by the software in your host machine          at sun.nio.ch.SocketDispatcher.read0(Native Method)      *       *       * java.io.IOException: An established connection was aborted by the software in your host machine          at sun.nio.ch.SocketDispatcher.read0(Native Method)      *       *       * java.io.IOException: An established connection was aborted by the software in your host machine          at sun.nio.ch.SocketDispatcher.read0(Native Method)      *       *       * java.io.IOException: An established connection was aborted by the software in your host machine          at sun.nio.ch.SocketDispatcher.read0(Native Method)      *       *       * java.io.IOException: An established connection was aborted by the software in your host machine          at sun.nio.ch.SocketDispatcher.read0(Native Method)      *       *       * java.io.IOException: An established connection was aborted by the software in your host machine          at sun.nio.ch.SocketDispatcher.read0(Native Method)      *       *       * java.io.IOException: An established connection was aborted by the software in your host machine          at sun.nio.ch.SocketDispatcher.read0(Native Method)      *       *       * java.io.IOException: An established connection was aborted by the software in your host machine          at sun.nio.ch.SocketDispatcher.read0(Native Method)      *       *       * java.io.IOException: An established connection was aborted by the software in your host machine          at sun.nio.ch.SocketDispatcher.read0(Native Method)      *       *       * java.io.IOException: An established connection was aborted by the software in your host machine          at sun.nio.ch.SocketDispatcher.read0(Native Method)      *       *       * java
*     *     * @return
* * @return ResponseList<Status>  * @throws TwitterException  */      public ResponseList<Status> getUserTimeline() throws              TwitterException {         return Status.constructStatuses(get(getBaseURL() + "statuses/user_timeline.json"                 , true));      }
* * @return *     Returns a reference to this object so that method calls can be chained together.  */  public function withSecurityDomain($securityDomain) {      $this->securityDomain = $securityDomain;      return $this; }  /**  * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @
* * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @
* @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return
* * @return * The builder for the advanced builder pattern.  */ public static interface AdvancedIgniteMessagingEndpointBuilder        extends IgniteMessagingEndpointBuilder {     /**      * Whether the endpoint should use basic property binding (Camel 2.x) or the newer property binding with additional capabilities.      *       * The option is a: <code>boolean</code> type.      *       * Default: false      * Group: producer      */     default AdvancedIgniteMessagingEndpointBuilder basicPropertyBinding(             boolean basicPropertyBinding) {         doSetBasicPropertyBinding(basicPropertyBinding);         return this;     }     /**      * Whether the endpoint should use basic property binding (Camel 2.x) or the newer property binding with additional capabilities.      *       * The option will be converted to a <code>boolean</code> type.      *       * Default: false      * Group: producer      */     default AdvancedIgniteMessagingEndpointBuilder basicPropertyBinding(             String basicPropertyBinding) {         doSetBasicPropertyBinding(basicPropertyBinding);         return this;     }     /**      * Whether the endpoint should use basic property binding (Camel 2.x) or the newer property binding with additional capabilities.      *       * The option will be converted to a <code>boolean</code> type.      *       * Default: false      * Group: producer      */     default AdvancedIgniteMessagingEndpointBuilder basicPropertyBinding(             String basicPropertyBinding) {         doSetBasicPropertyBinding(basicPropertyBinding);         return this;     }     /**      * Whether the endpoint should use basic property binding (Camel 2.x) or the newer property binding with additional capabilities.      *       * The option will be converted to a <code>boolean</code> type.      *       * Default: false      * Group: producer      */     default AdvancedIgniteMessagingEndpointBuilder basicPropertyBinding(             boolean basicPropertyBinding) {         doSetBasicPropertyBinding(basicPropertyBinding);         return this;     }     /**      * Whether the endpoint should use basic property binding (Camel 2.x) or the newer property binding with additional capabilities.      *
.outputRowsCount(inputStatistics.getOutputRowCount() * xStats.getValuesFraction() * 0.5);         assertThat(computeSemiJoin(inputStatistics, inputStatistics, unknown, u))                 .symbolStats(unknown, stats -> stats                         .nullsFraction(0)                         .distinctValuesCountUnknown() * 0.5);         assertThat(computeSemiJoin(inputStatistics, inputStatistics, unknown, u))                 .symbolStats(unknown, stats -> stats                         .nullsFraction(0)                         .distinctValuesCountUnknown() * 0.5);         assertThat(computeSemiJoin(inputStatistics, inputStatistics, unknown, u))                 .symbolStats(unknown, stats -> stats                         .nullsFraction(0)                         .distinctValuesCountUnknown() * 0.5);         assertThat(computeSemiJoin(inputStatistics, inputStatistics, unknown, u))                 .symbolStats(unknown, stats -> stats                         .nullsFraction(0)                         .distinctValuesCountUnknown() * 0.5);         assertThat(computeSemiJoin(inputStatistics, inputStatistics, unknown, u))                 .symbolStats(unknown, stats -> stats                         .nullsFraction(0)                         .distinctValuesCountUnknown() * 0.5);         assertThat(computeSemiJoin(inputStatistics, inputStatistics, unknown, u))                 .symbolStats(unknown, stats -> stats                         .nullsFraction(0)                         .distinctValuesCountUnknown() * 0.5);         assertThat(computeSemiJoin(inputStatistics, inputStatistics, unknown, u))                 .symbolStats(unknown, stats -> stats                         .nullsFraction(0)                         .distinctValuesCountUnknown() * 0.5);         assertThat(computeSemiJoin(inputStatistics, inputStatistics, unknown, u))                 .symbolStats(unknown, stats -> stats                         .nullsFraction(0)                         .distinctValuesCountUnknown() * 0.5);         assertThat(computeSemiJoin(inputStatistics, inputStatistics, unknown, u))                 .symbolStats(unknown, stats -> stats                         .nullsFraction(0)                         .distinctValuesCountUnknown() * 0.5);         assertThat(computeSemiJoin(inputStatistics, inputStatistics, unknown, u))                 .symbolStats(unknown, stats -> stats                         .nullsFraction(0)                         .distinctValuesCountUnknown()

* if (capacity > 1 << 30) throw new IllegalArgumentException("initialCapacity is too large: " + initialCapacity);    }   public ObjectSet (int initialCapacity, float loadFactor) {    if (initialCapacity < 0) throw new IllegalArgumentException("initialCapacity must be >= 0: " + initialCapacity);   if (capacity > 1 << 30) throw new IllegalArgumentException("initialCapacity is too large: " + initialCapacity);    capacity = MathUtils.nextPowerOfTwo(initialCapacity);    if (loadFactor <= 0) throw new IllegalArgumentException("loadFactor must be > 0: " + loadFactor);    }   public ObjectSet (int initialCapacity) {    if (initialCapacity < 0) throw new IllegalArgumentException("initialCapacity must be >= 0: " + initialCapacity);    if (capacity > 1 << 30) throw new IllegalArgumentException("initialCapacity is too large: " + initialCapacity);    capacity = MathUtils.nextPowerOfTwo(initialCapacity);    }   public ObjectSet (int initialCapacity) {    if (initialCapacity < 0) throw new IllegalArgumentException("initialCapacity must be >= 0: " + initialCapacity);    if (capacity > 1 << 30) throw new IllegalArgumentException("initialCapacity is too large: " + initialCapacity);    capacity = MathUtils.nextPowerOfTwo(initialCapacity);    }   public ObjectSet (int initialCapacity) {    if (initialCapacity < 0) throw new IllegalArgumentException("initialCapacity must be >= 0: " + initialCapacity);    if (capacity > 1 << 30) throw new IllegalArgumentException("initialCapacity is too large: " + initialCapacity);    capacity = MathUtils.nextPowerOfTwo(initialCapacity);    }   public ObjectSet (int initialCapacity) {    if (initialCapacity < 0) throw new IllegalArgumentException("initialCapacity must be >= 0: " + initialCapacity);    if (capacity > 1 << 30) throw new IllegalArgumentException("initialCapacity is too large: " + initialCapacity);    capacity = MathUtils.nextPowerOfTwo(initialCapacity);    }   public ObjectSet (int initialCapacity) {    if (initialCapacity < 0) throw new IllegalArgumentException("initialCapacity must be >= 0: " + initialCapacity);    if (capacity > 1 << 30) throw new IllegalArgumentException("initialCapacity is too large: " + initialCapacity);    capacity = MathUtils.nextPowerOfTwo(initialCapacity);    }   public ObjectSet (int initialCapacity) {    if
* * @return *     Returns a reference to this object so that method calls can be chained together.  */  public function setClearEventCounterEventHandler(ClearEventCounterEventHandler $handler) {     $this->handler = $handler;      return $this; }
* * @throws Exception If failed.  */ public void testMultipleAlternativesWithCommonLabel_3() throws Exception {    mkdir(tmpdir);   StringBuilder grammarBuilder = new StringBuilder(561);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s : e {print($e.v)};\n");    grammarBuilder.append("e returns [int v]\n");
* * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @
* * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @
*     * @return the data stream constructed    */  private DataStreamSink<OUT> writeAsText(DataStreamSink<OUT> inputStream, String path,     WriteFormatAsText<OUT> format, int batchSize, OUT endTuple) {   DataStreamSink<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByBatches<OUT>(      path, format, batchSize, endTuple), null);    jobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());    jobGraphBuilder.setMutability(returnStream.getId(), false);    return returnStream;    }
* * @return *     returns *     a *     {@link org.apache.camel.component.aws.sqs.SQSEndpoint}  */
* * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @
* @return this  */     public CompilerPassFactory ignoreCajaProperties() { return new PassFactory("ignoreCajaProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) { return new IgnoreCajaPropertiesPass(compiler); } };
*       * @return the message.       */     @Message(id = 15868, value = "Deployment %s is already started")    String deploymentAlreadyStarted(String name);      /**     * @return the message.       */     @Message(id = 15868, value = "Deployment %s is already started")    String deploymentAlreadyStarted(String name);      /**     * @return the message.       */     @Message(id = 15868, value = "Deployment %s is already started")    String deploymentAlreadyStarted(String name);      /**     * @return the message.       */     @Message(id = 15868, value = "Deployment %s is already started")    String deploymentAlreadyStarted(String name);      /**     * @return the message.       */     @Message(id = 15868, value = "Deployment %s is already started")    String deploymentAlreadyStarted(String name);      /**     * @return the message.       */     @Message(id = 15868, value = "Deployment %s is already started")    String deploymentAlreadyStarted(String name);      /**     * @return the message.       */     @Message(id = 15868, value = "Deployment %s is already started")    String deploymentAlreadyStarted(String name);      /**     * @return the message.       */     @Message(id = 15868, value = "Deployment %s is already started")    String deploymentAlreadyStarted(String name);      /**     * @return the message.       */     @Message(id = 15868, value = "Deployment %s is already started")    String deploymentAlreadyStarted(String name);      /**     * @return the message.       */     @Message(id = 15868, value = "Deployment %s is already started")    String deploymentAlreadyStarted(String name);      /**     * @return the message.       */     @Message(id = 15868, value = "Deployment %s is already started")    String deploymentAlreadyStarted(String name);      /**     * @return the message.       */     @Message(id = 15868, value = "Deployment %s is already started")    String deploymentAlreadyStarted(String name);      /**     * @return the message.       */     @Message(id = 15868, value = "Deployment %s is already started")
*     * @return
* @return this  */     public final CompilerPassFactory removeUnusedVars =        new PassFactory("removeUnusedVars", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) { return new RemoveUnusedVars(compiler); } };

* @throws Exception {          Entity vo = JSON.parseObject("{\"date\":\"2016年05月6日\"}", Entity.class);         Calendar calendar = Calendar.getInstance(JSON.defaultLocale);          calendar.setTime(vo.date);          Assert.assertEquals(2016, calendar.get(Calendar.YEAR));          Assert.assertEquals(4, calendar.get(Calendar.MONTH)); }
* @Override       public void onStartup(ServletContext servletContext)         throws ServletException { * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return *

*                  buf[count++] = ((byte)(0xe0 | ((c >> 6) & 0x3f)));                  buf[count++] = ((byte)(0xe0 | (c & 0x3f)));              } } else {                 if(3 < buf.length - count) {                      flushBuffer();                  }                  buf[count++] =((byte)(0xe0 | ((c >> 12))));

* @return this  */     public final CompilerPassFactory invertContextualRenaming() { return new PassFactory("invertNames", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) { return new InvertContextualRenamingPass(compiler); } };


* @return this  */     public HotSwapPassFactory checkVariableReferences() { return checkVariableReferences; }
* @return this  */     public final CompilerPassFactory sanityCheckVars =        new PassFactory("sanityCheckVars", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) { return new SanityCheckVars(compiler); } };
* * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @
*     *     *     * @return This pass.      */   private final PassFactory collapseVariableDeclarations =        new PassFactory("collapseVariableDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) { return new CollapseVariableDeclarations(compiler); } };
* @return this  */     public final CompilerPassFactory inlineConstants =        new PassFactory("inlineConstants", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) { return new InlineConstants(compiler); } };

* @return     This pass factory.  * @see         #deadAssignmentsElimination(boolean)  * @since      1.6  */    public static final PassFactory DEAD_ASSIGNMENTS_ELIMINATION =        new PassFactory("deadAssignmentsElimination", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) { return new DeadAssignmentsElimination(compiler); } };
*     * @return
* * @return The string number.  */     final int stringNumber =                  UniquePropertiesCheck.getLineNumber(testStrings,                          "some key");      Assert.assertEquals(stringNumber, 0);
* @Deprecated      public long getRedeliverDelay() {         return getRedeliverDelay(); }

* String query = "start root=node:node_auto_index(name = 'FileRoot') match root-[:contains*0..]->(parentDir)-[:leaf]->file return file";          gen.get().addSnippet( "query2", createCypherSnippet( query ) );          String result = engine.execute( query )                .toString();          assertTrue( result.contains("File1"));          gen.get()                 .addSnippet( "result2", createQueryResultSnippet( result ) );
* LOG.info("Verifying the reading data...");          for (int j = 0; j < BLOCKS_PER_FILE; j ++) {              for (int k = 0; k < BLOCK_SIZE_BYTES / 4; k ++) { tmp = intBuf.get(i * BLOCK_SIZE_BYTES + k);            LOG.info("Verifying the reading data...");            if (tmp!= intBuf.get(i * BLOCK_SIZE_BYTES + k)) {              LOG.error("Verifying the reading data...");            }          }          }          }          }
*     *     * @return     *     *     *     *     *     *     *     * @return     *     *     *     *     * @return     *     *     *     * @return     *     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @
*       * @return the message.       */     @Message(id = 15849, value = "Operation %s for address %s can only be handled by the master Domain Controller; this host is not the master Domain Controller") String masterDomainControllerOnlyOperation(String operation, PathAddress address);
*     touchDownX = x;     touchDownY = y;     visualPressedTime = TimeUtils.nanoTime() + visualPressedDuration * 1000000000;     return true;
* * @throws Exception {    mkdir(tmpdir);    StringBuilder grammarBuilder = new StringBuilder(239);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s @after {print($ctx.toStringTree(recog=self))} : e ;\n");    grammarBuilder.append("e : a=e op=('*'|'/') b=e  {}{True}?\n");
* @return this  */    public final CompilerPassFactory crossModuleMethodMotion =        new PassFactory("crossModuleMethodMotion", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) { return crossModuleMethodMotion; } };
* @return this  */     public final PassFactory renameVars =        new PassFactory("renameVars", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) { return renameVars; } }
* @return *     Returns a reference to this object so that method calls can be chained together.  */ * @return *     Returns a reference to this object so that method calls can be chained together.  */ * @return *     Returns a reference to this object so that method calls can be chained together.  */ * @return *     Returns a reference to this object so that method calls can be chained together.  */ * @return *     Returns a reference to this object so that method calls can be chained together.  */ * @return *     Returns a reference to this object so that method calls can be chained together.  */ * @return *     Returns a reference to this object so that method calls can be chained together.  */ * @return *     Returns a reference to this object so that method calls can be chained together.  */ * @return *     Returns a reference to this object so that method calls can be chained together.  */ * @return *     Returns a reference to this object so that method calls can be chained together.  */ * @return *     Returns a reference to this object so that method calls can be chained together.
* * @return Vector<RelationshipListItem>     * @return Vector<RelationshipListItem>     * @return Vector<RelationshipListItem>     * @return Vector<RelationshipListItem>     * @return Vector<RelationshipListItem>     * @return Vector<RelationshipListItem>     * @return Vector<RelationshipListItem>     * @return Vector<RelationshipListItem>     * @return Vector<RelationshipListItem>     * @return Vector<RelationshipListItem>     * @return Vector<RelationshipListItem>     * @return Vector<RelationshipListItem>     * @return Vector<RelationshipListItem>     * @return Vector<RelationshipListItem>     * @return Vector<RelationshipListItem>     * @return Vector<RelationshipListItem>     * @return Vector<RelationshipListItem>     * @return Vector<RelationshipListItem>     * @return Vector<RelationshipListItem>     * @return Vector<RelationshipListItem>     * @return Vector<RelationshipListItem>     * @return Vector<RelationshipListItem>     * @return Vector<RelationshipListItem>     * @return Vector<RelationshipListItem>     * @return Vector<RelationshipListItem>     * @return Vector<RelationshipListItem>     * @return Vector<RelationshipListItem>     * @return Vector<RelationshipListItem>     * @return Vector<RelationshipListItem>     * @return Vector<RelationshipListItem>     * @return Vector<RelationshipListItem>     * @return Vector<RelationshipListItem>     * @return Vector<RelationshipListItem>     * @return Vector<RelationshipListItem>     * @return Vector<RelationshipListItem>     * @return Vector<RelationshipListItem>     * @return Vector<RelationshipListItem>     * @return Vector<RelationshipListItem>     * @return Vector<RelationshipListItem>     * @return Vector<RelationshipListItem>     * @return Vector<RelationshipListItem>     * @return Vector<RelationshipListItem>     * @return Vector<RelationshipListItem>     * @return Vector<RelationshipListItem>     * @return Vector<RelationshipListItem>     * @return Vector<RelationshipListItem>     * @return Vector<RelationshipListItem>     * @return Vector<RelationshipListItem>     * @return Vector<RelationshipListItem>     * @return Vector<RelationshipListItem>     * @return Vector<RelationshipListItem>     * @return Vector<RelationshipListItem>     * @return Vector<RelationshipListItem>     * @return Vector<RelationshipListItem>     * @return Vector<RelationshipListItem>     * @return Vector<RelationshipListItem>     * @return Vector<
* @author Lars Kühne   * @noinspection ThisEscapedInObjectConstruction   */ public class TreeTableModel extends AbstractTableModel {      private static final long serialVersionUID = -8493693409423365387L;      * @author Lars Kühne   * @noinspection ThisEscapedInObjectConstruction   */ public TreeTableModel() {      }      * @author Lars Kühne   * @noinspection ThisEscapedInObjectConstruction   */ public TreeTableModel(final int rowCount, final int columnCount) {      super(rowCount, columnCount);      }      * @author Lars Kühne   * @noinspection ThisEscapedInObjectConstruction   */ public TreeTableModel(final int rowCount) {      super(rowCount);      }      * @author Lars Kühne   * @noinspection ThisEscapedInObjectConstruction   */ public TreeTableModel() {      super();      }      * @author Lars Kühne   * @noinspection ThisEscapedInObjectConstruction   */ public TreeTableModel(final int rowCount) {      super(rowCount);      }      * @author Lars Kühne   * @noinspection ThisEscapedInObjectConstruction   */ public TreeTableModel() {      super();      }      * @author Lars Kühne   * @noinspection ThisEscapedInObjectConstruction   */ public TreeTableModel(final int rowCount) {      super(rowCount);      }      * @author Lars Kühne   * @noinspection ThisEscapedInObjectConstruction   */ public TreeTableModel() {      super();      }      * @author Lars Kühne   * @noinspection ThisEscapedInObjectConstruction   */ public TreeTableModel(final int rowCount) {      super(rowCount);      }      * @author Lars Kühne   * @noinspection ThisEscapedInObjectConstruction   */ public TreeTableModel() {      super();      }      * @author Lars Kühne   * @noinspection ThisEscapedInObjectConstruction   */ public TreeTableModel(final int rowCount) {      super(rowCount);      }      * @author Lars Kühne   * @noinspection ThisEscapedInObjectConstruction   */ public TreeTableModel() {      super();      }      * @author Lars Kühne   * @noinspection ThisEscaped
* @return *     Returns a reference to this {@code EndpointProducerBuilder} object to allow method call  *     chaining.  */ @Generated("org.apache.camel.maven.packaging.EndpointDslMojo") public interface AdvancedTikaEndpointBuilder        extends                 EndpointProducerBuilder {     /**      * Whether the producer should be started lazy (on the first message).      * By starting lazy you can use this to allow CamelContext and routes to      * startup in situations where a producer may otherwise fail during      * starting and cause the route to fail being started. By deferring this      * startup to be lazy then the startup failure can be handled during      * routing messages via Camel's routing error handlers. Beware that when      * the first message is processed then creating and starting the      * producer may take a little time and prolong the total processing time      * of the processing.      *       * The option is a: <code>boolean</code> type.      *       * Default: false      * Group: producer      */     default AdvancedTikaEndpointBuilder lazyStartProducer(boolean lazyStartProducer) {         doSetProperty("lazyStartProducer", lazyStartProducer);         return this;     }     /**      * Whether the producer should be started lazy (on the first message).      * By starting lazy you can use this to allow CamelContext and routes to      * startup in situations where a producer may otherwise fail during      * starting and cause the route to fail being started. By deferring this      * startup to be lazy then the startup failure can be handled during      * routing messages via Camel's routing error handlers. Beware that when      * the first message is processed then creating and starting the      * producer may take a little time and prolong the total processing time      * of the processing.      *       * The option will be converted to a <code>boolean</code> type.      *       * Default: false      * Group: producer      */     default AdvancedTikaEndpointBuilder lazyStartProducer(String lazyStartProducer) {         doSetProperty("lazyStartProducer", lazyStartProducer);         return this;     }     /**      * Whether the producer should be started lazy (on the first message).
* * @return the defaultTransactionIsolationLevel  * @throws SQLException if an error occurs  * @see #setDefaultTransactionIsolationLevel(int)  * @see #getDefaultTransactionIsolationLevel()  * @see #setAutoCommit(boolean)  * @see #getAutoCommit()  * @see #setDefaultTransactionIsolationLevel(int)  * @see #getDefaultTransactionIsolationLevel()  * @see #setDefaultTransactionIsolationLevel(int)  * @see #setDefaultTransactionIsolationLevel(int)  * @see #setDefaultTransactionIsolationLevel(int)  * @see #setDefaultTransactionIsolationLevel(int)  * @see #setDefaultTransactionIsolationLevel(int)  * @see #setDefaultTransactionIsolationLevel(int)  * @see #setDefaultTransactionIsolationLevel(int)  * @see #setDefaultTransactionIsolationLevel(int)  * @see #setDefaultTransactionIsolationLevel(int)  * @see #setDefaultTransactionIsolationLevel(int)  * @see #setDefaultTransactionIsolationLevel(int)  * @see #setDefaultTransactionIsolationLevel(int)  * @see #setDefaultTransactionIsolationLevel(int)  * @see #setDefaultTransactionIsolationLevel(int)  * @see #setDefaultTransactionIsolationLevel(int)  * @see #setDefaultTransactionIsolationLevel(int)  * @see #setDefaultTransactionIsolationLevel(int)  * @see #setDefaultTransactionIsolationLevel(int)  * @see #setDefaultTransactionIsolationLevel(int)  * @see #setDefaultTransactionIsolationLevel(int)  * @see #setDefaultTransactionIsolationLevel(int)  * @see #setDefaultTransactionIsolationLevel(int)  * @see #setDefaultTransactionIsolationLevel(int)  * @see #setDefaultTransactionIsolationLevel(int)  * @see #setDefaultTransactionIsolationLevel(int)  * @see #setDefaultTransactionIsolationLevel(int)  * @see #setDefaultTransactionIsolationLevel(int)  * @see #setDefaultTransactionIsolationLevel(int)  * @see #setDefaultTransactionIsolationLevel(int)  * @see #setDefaultTransactionIsolationLevel(int)  * @see #setDefaultTransactionIsolationLevel(int)  * @see #setDefaultTransactionIsolationLevel(int)  * @see #setDefaultTransaction
* @return this  */    public final PassFactory specializeInitialModule =        new PassFactory("specializeInitialModule", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) { return new SpecializeInitialModulePass(compiler); } };
*       * @return an {@link IllegalStateException} for the error.       */     @Message(id = 15870, value = "Unknown server group %s")     IllegalStateException unknownServerGroup(String serverGroup);
* * @return *     Returns a reference to this object so that method calls can be chained together.  */  public function setClearEventCounterEventHandler(ClearEventCounterEventHandler $handler) {     $this->handler = $handler;      return $this; }
* * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @
* @return this  */    public final PassFactory extractPrototypeMemberDeclarations =        new PassFactory("extractPrototypeMemberDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) { return new ExtractPrototypeMemberDeclarations(compiler); } };
*     *     * @return     *     *     *     *     *     *     *     *     *     * @return     *     *     *     *     *     * @return     *     *     *     *     * @return     *     *     *     * @return     *     *     *     * @return     *     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return
*        * @param workerClient the worker client to release, the client should not be accessed after this     *        method is called     */   public synchronized void releaseWorkerClient(WorkerClient workerClient) {      if (workerClient.isLocal()) {

* @return this  */     public final CompilerPassFactory closureCodeRemoval =        new PassFactory("closureCodeRemoval", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) { return new ClosureCodeRemoval(compiler); } };

* * @return the list of user  */ public List<User> getAllUser() {    if (applicationStatistics!= null) {    applicationStatistics.incrUpdateUserTimes();      return (List<User>) userJpaDao.findAll();   }
*       * @return the error message       */     @Message(id = 15833, value = "%s is missing %s: %s")    String requiredChildIsMissing(String parent, String child, String parentSpec);
* @return this  */     public final CompilerPassFactory sanityCheckVars =        new PassFactory("sanityCheckVars", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) { return new SanityCheckVars(compiler); } };
* if (!queueLength.isDefined() || queueLength.asInt() == Integer.MAX_VALUE) {                  if (coreThreads.isDefined() && coreThreads.asInt() <= 0) {                     throw EeLogger.ROOT_LOGGER.invalidCoreThreadsSize(coreThreads.asString());                  }              }

* @return * @return * @return * @return * @deprecated Use {@link #basic()} instead  */ @Deprecated public static interface AdvancedLdifEndpointBuilder              extends                  EndpointProducerBuilder {          default LdifEndpointBuilder basic() { return basic(); }
* @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return
*             answer = typeConverter.convertTo(answerType, xmlReader);              } else {              answer = typeConverter.convertTo(answerType, xmlReader);              }              return answer;            } catch (Exception e) {              throw new RuntimeCamelException(e);            }         } catch (Exception e) {             throw new RuntimeCamelException(e);         }
* @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return
* @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return

*     * @return The closed DataStream    */  public DataStreamSink<OUT> writeAsText(String path) {    return writeAsText(this, path, new WriteFormatAsText<OUT>(), 1, null);   }
* @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return
*     * @return     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see     * @see
* @return this  */     public final CompilerPassFactory collapseProperties =        new PassFactory("collapseProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) { return new CollapseProperties(compiler); } };
* form.add("redirect_uri", redirectUri);    }   form.add("grant_type", "authorization_code");
* @return this  */ public final CompilerPassFactory renameProperties =        new PassFactory("renameProperties", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) { return new RenameProperties(compiler); } };
*       * @return the message.       */     @Message(id = 15847, value = "Interrupted waiting for result from host %s")    String interruptedAwaitingResultFromHost(String name);
* * @return the expected result  */     public MaterializedResult expected() {         return expected.resultBuilder(taskContext.getSession(), concat(probePages.getTypes(), buildPages.getTypes()))                 .row("20", 1020L, 2020L, "20", 30L, 40L)                 .row("21", 1021L, 2021L, "21", 31L, 41L)                 .row("22", 1022L, 2022L, "22", 32L, 42L)
* * @return statsData.setStringStats(stringStats);        statsObj.setStatsData(statsData);     } else if (columnType.equalsIgnoreCase("double")) {        DoubleColumnStatsData doubleStats = new DoubleColumnStatsData();        doubleStats.setMaxColLenIsSet(false);        doubleStats.setAvgColLenIsSet(false);
* @Test      public void testMaxBackoff() throws Exception {         final long initial = 10;          final double mult = 2d;          final long max = 20;          ExponentialBackoffMsgRetryManager manager = new ExponentialBackoffMsgRetryManager(initial, mult, max);          long expectedWaitTime = initial;
*     * @return The closed DataStream    */  public DataStreamSink<OUT> writeAsText(String path, long millis) {    return writeAsText(this, path, new WriteFormatAsText<OUT>(), millis, null);   }
* @return this  */     public final CompilerPassFactory inlineFunctions =        new PassFactory("inlineFunctions", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) { return new InlineFunctions(compiler); } };
* @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return
* @throws Exception {          Entity vo = JSON.parseObject("{\"date\":\"2016年05月06日\"}", Entity.class);         Calendar calendar = Calendar.getInstance(JSON.defaultLocale);          calendar.setTime(vo.date);          Assert.assertEquals(2016, calendar.get(Calendar.YEAR));          Assert.assertEquals(4, calendar.get(Calendar.MONTH)); }
* * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @
* @return this  */     public final CompilerPassFactory aliasKeywords =        new PassFactory("aliasKeywords", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) { return new AliasKeywords(compiler); } };
*     *     * @return     *     *     *     *     *     *     *     * @return     *     *     *     *     * @return     *     *     *     * @return     *     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @
* * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @
* @param r {@link AtmosphereResource} */      public void unRegisterUuidForFindCandidate(AtmosphereResource r) {         logger.debug("Removing: {}", r);          resources.remove(r.uuid());      }
*     * @return
* @return this  */ public final CompilerPassFactory chainCalls =        new PassFactory("chainCalls", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) { return new ChainCalls(compiler); } };
* @return *     @return *     @return *     @return *     @return *     @return *     @return *     @return *     @return *     @return *     @return *     @return *     @return *     @return *     @return *     @return *     @return *     @return *     @return *     @return *     @return *     @return *     @return *     @return *     @return *     @return *     @return *     @return *     @return *     @return *     @return *     @return *     @return *     @return *     @return *     @return *     @return*     @return*     @return*     @return*     @return*     @return*     @return*     @return*     @return*     @return*     @return*     @return*     @return*     @return*     @return*     @return*     @return*     @return*     @return*     @return*     @return*     @return*     @return*     @return*     @return*     @return*     @return*     @return*     @return*     @return*     @return*     @return*     @return*     @return*     @return*     @return*     @return*     @return*     @return*     @return*     @return*     @return*     @return*     @return*     @return*     @return*     @return*     @return*     @return*     @return*     @return*     @return*     @return*     @return*     @return*     @return*     @return*     @return*     @return*     @return*     @return*     @return*     @return*     @return*     @return*     @return*     @return*     @return*     @return*     @return*     @return*     @return*     @return*     @return*     @return*     @return*     @return*     @return*     @return*     @return*     @return*     @return*     @return*     @return*     @return*     @return*     @return*     @return*     @return*     @return*     @return*     @
* @return *     Returns a reference to this object so that method calls can be chained together.  */      public OptaPlannerEndpointProducerBuilder advanced() { return new AdvancedOptaPlannerEndpointProducerBuilderImpl(this); }
* * @throws Exception If failed.  */ public void testMultipleAlternativesWithCommonLabel_3() throws Exception {    mkdir(tmpdir);   StringBuilder grammarBuilder = new StringBuilder(730);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s : e {System.out.println($e.v);};\n");    grammarBuilder.append("e returns [int v]\n");
* resultEndpoint.expectedMessageCount(3);         resultEndpoint.setResultWaitTime(1000);          for (int i = 0; i < messageCount; i++) {              template.sendBody("seda:a", "<message>" + i + "</message>");          }          resultEndpoint.assertIsSatisfied();          }
* @return this  */ public final CompilerPassFactory renameProperties =        new PassFactory("renameProperties", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) { return new RenameProperties(compiler); } };

* @return this  */     public final CompilerPassFactory closureCheckGetCssName() { return new PassFactory("checkMissingGetCssName", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) { return new ClosureCheckGetCssName(compiler); } };
* @return this  */     public ObjectPropertyStringPreprocessPass objectPropertyStringPreprocess() { return objectPropertyStringPreprocess; }
*       * @return the message.       */     @Message(id = 15844, value = "Invalid rollout plan. Server group %s appears more than once in the plan.")      String invalidRolloutPlanGroupAlreadyExists(String group);
* @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return
* @return this  */    public final CompilerPassFactory crossModuleMethodMotion =        new PassFactory("crossModuleMethodMotion", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) { return crossModuleMethodMotion; } };
*       * @return the message.       */     @Message(id = 15851, value = "Operation targets host %s but that host is not registered")    String invalidOperationTargetHost(String name);
* boolean isDoubleA = isDouble(clazzA);          boolean isDoubleB = isDouble(clazzB);         if ((isDoubleA && isDoubleB) || (isDoubleA && isIntA) || (isDoubleB && isIntA)) {              return a.doubleValue() == b.doubleValue();          }
* @throws NullPointerException if task is null       */     public final void addTaskAndWakeup(Runnable task) {          taskQueue.add(task);          if (!selectNow) {              selector.wakeup(); }
* * @return a map of all the System Information. Java, user, time, runtime properties, etc    * @throws APIException if there is an error getting the System Variables. */   @Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)  public SortedMap<String, String> getSystemVariables() throws APIException {   /**    * Get a map of all the System Information. Java, user, time, runtime properties, etc    * @return a map of all the System Information. Java, user, time, runtime properties, etc    * @throws APIException if there is an error getting the System Variables. */   @Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)  public SortedMap<String, String> getSystemVariables() throws APIException {   /**    * Get a map of all the System Information. Java, user, time, runtime properties, etc    * @return a map of all the System Information. Java, user, time, runtime properties, etc    * @throws APIException if there is an error getting the System Variables. */   @Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)  public SortedMap<String, String> getSystemVariables() throws APIException {   /**    * Get a map of all the System Information. Java, user, time, runtime properties, etc    * @return a map of all the System Information. Java, user, time, runtime properties, etc    * @throws APIException if there is an error getting the System Variables. */   @Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)  public SortedMap<String, String> getSystemVariables() throws APIException {   /**    * Get a map of all the System Information. Java, user, time, runtime properties, etc    * @return a map of all the System Information. Java, user, time, runtime properties, etc    * @throws APIException if there is an error getting the System Variables. */   @Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)  public SortedMap<String, String> getSystemVariables() throws APIException {   /**    * Get a map of all the System Information. Java, user, time, runtime properties, etc    * @return a map of all the System Information. Java, user, time, runtime properties, etc    * @throws APIException if there is an error getting the System Variables. */   @Authorized(PrivilegeConstants.VIEW_ADMIN
*     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return
* @return     *     *     *     * @throws    *     *     *     * @throws    *     *     * @throws    *     * @return     *     *     * @throws    *     * @throws    *     * @throws    *     * @return     *     * @throws    *     * @throws    *     * @return     *     * @throws    *     * @throws    *     * @return     *     * @throws    *     * @return     *     * @throws    *     * @return     *     * @throws    *     * @return     *     * @throws    *     * @return     *     * @throws    *     * @return     *     * @throws    *     * @return     *     * @throws    *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *


* @Override protected void configureClient(ClientConfig clientConfig) {         clientConfig.property(ClientProperties.READ_TIMEOUT, 1000);      }
* @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return
* * @return {TransactionalGraph}  * @throws DatabaseBlockedException {         return new Neo4jGraph( database.graph );      }  }
* @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return
* * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @

* * @return this  */ public short[] addAll (short[] array, int offset, int length) {     short[] items = this.items;     int sizeNeeded = size + length;     if (sizeNeeded >= items.length) items = resize(Math.max(8, (int)(sizeNeeded * 1.75f)));     System.arraycopy(array, offset, items, size, length);     size += length;     return items; }
* * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @
* @return this  */     public HotSwapPassFactory checkProvides() { return checkProvides; }
* @return this  */     public final CompilerPassFactory invertContextualRenaming() { return new PassFactory("invertNames", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) { return new InvertContextualRenamingPass(compiler); } };
* @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return
* @return this  */    public final PassFactory groupVariableDeclarations =        new PassFactory("groupVariableDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) { return new GroupVariableDeclarations(compiler); } };
* * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @
* @return this  */     public final CompilerPassFactory computeFunctionNames =        new PassFactory("computeFunctionNames", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) { return new ComputeFunctionNames(compiler); } };
*     * @return     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *

* * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @
* @return     This pass factory.  * @see         #deadAssignmentsElimination(boolean)  * @since      1.6  */    public static final PassFactory DEAD_ASSIGNMENTS_ELIMINATION =        new PassFactory("deadAssignmentsElimination", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) { return new DeadAssignmentsElimination(compiler); } };
* @return this  */ public final CompilerPassFactory removeUnreachableCode =        new CompilerPassFactory("removeUnreachableCode", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) { return new RemoveUnreachableCode(compiler); } };

* @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return
* @return * @throws JobGraphDefinitionException * @throws JobGraphDefinitionException * @throws JobGraphDefinitionException * @throws JobGraphDefinitionException * @throws JobGraphDefinitionException * @throws JobGraphDefinitionException * @throws JobGraphDefinitionException * @throws JobGraphDefinitionException * @throws JobGraphDefinitionException * @throws JobGraphDefinitionException * @throws JobGraphDefinitionException * @throws JobGraphDefinitionException * @throws JobGraphDefinitionException * @throws JobGraphDefinitionException * @throws JobGraphDefinitionException * @throws JobGraphDefinitionException * @throws JobGraphDefinitionException * @throws JobGraphDefinitionException * @throws JobGraphDefinitionException * @throws JobGraphDefinitionException * @throws JobGraphDefinitionException * @throws JobGraphDefinitionException * @throws JobGraphDefinitionException * @throws JobGraphDefinitionException * @throws JobGraphDefinitionException * @throws JobGraphDefinitionException * @throws JobGraphDefinitionException * @throws JobGraphDefinitionException * @throws JobGraphDefinitionException * @throws JobGraphDefinitionException * @throws JobGraphDefinitionException * @throws JobGraphDefinitionException * @throws JobGraphDefinitionException * @throws JobGraphDefinitionException * @throws JobGraphDefinitionException * @throws JobGraphDefinitionException * @throws JobGraphDefinitionException * @throws JobGraphDefinitionException * @throws JobGraphDefinitionException * @throws JobGraphDefinitionException * @throws JobGraphDefinitionException * @throws JobGraphDefinitionException * @throws JobGraphDefinitionException * @throws JobGraphDefinitionException * @throws JobGraphDefinitionException * @throws JobGraphDefinitionException * @throws JobGraphDefinitionException * @throws JobGraphDefinitionException * @throws JobGraphDefinitionException * @throws JobGraphDefinitionException * @throws JobGraphDefinitionException * @throws JobGraphDefinitionException * @throws JobGraphDefinitionException * @throws JobGraphDefinitionException * @throws JobGraphDefinitionException * @throws JobGraphDefinitionException * @throws JobGraphDefinitionException * @throws JobGraphDefinitionException * @throws JobGraphDefinitionException * @throws JobGraphDefinitionException * @throws JobGraphDefinitionException * @throws JobGraphDefinitionException * @throws JobGraphDefinitionException * @throws JobGraphDefinitionException * @throws JobGraphDefinitionException * @throws JobGraphDefinitionException * @throws JobGraphDefinitionException * @throws JobGraphDefinitionException * @throws JobGraphDefinitionException * @throws JobGraphDefinitionException * @throws JobGraphDefinitionException * @throws JobGraphDefinitionException * @throws


* @throws Exception {          Entity vo = JSON.parseObject("{\"date\":\"06-05-2016\"}", Entity.class);         Calendar calendar = Calendar.getInstance(JSON.defaultLocale);          calendar.setTime(vo.date);          Assert.assertEquals(2016, calendar.get(Calendar.YEAR));          Assert.assertEquals(4, calendar.get(Calendar.MONTH)); }
* @return this  */    public final CompilerPassFactory crossModuleCodeMotion =        new PassFactory("crossModuleCodeMotion", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) { return crossModuleCodeMotion; } };
* * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @
*     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return     * @return
* @return DruidOperatorTable  */     final DruidOperatorTable operatorTable = new DruidOperatorTable(          ImmutableSet.of(new DoublesSketchSqlAggregator()),          ImmutableSet.of() );
* @return this  */    public final PassFactory groupVariableDeclarations =        new PassFactory("groupVariableDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) { return new GroupVariableDeclarations(compiler); } };
* @return this  */     public final PassFactory optimizeArgumentsArray =        new PassFactory("optimizeArgumentsArray", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) { return new OptimizeArgumentsArray(compiler); } };
* @param servers the servers that need to restart.       */      @LogMessage(level = Level.INFO)     @Message(id = 15807, value = "Domain model has changed on re-connect. The following servers will need to be restarted for changes to take affect: %s")      void domainModelChangedOnReConnect(Set<ServerIdentity> servers);
* @return this  */ public final CompilerPassFactory removeUnreachableCode =        new CompilerPassFactory("removeUnreachableCode", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) { return new RemoveUnreachableCode(compiler); } };
*       * @return the message.       */     @Message(id = 15841, value = "Interrupted waiting for result from server %s")    String interruptedAwaitingResultFromServer(ServerIdentity server);
* @return this  */     public CompilerPassFactory ignoreCajaProperties() { return new PassFactory("ignoreCajaProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) { return new IgnoreCajaPropertiesPass(compiler); } };
* * @return {void} */    compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED_OBFUSCATED);     GatherGettersAndSetterProperties.update(compiler, externs, root);    }
* * @return a new {@link ASMSerializerFactory}  * @see Opcodes  * @see Opcodes  * @see Opcodes  * @see Opcodes  * @see Opcodes  * @see Opcodes  * @see Opcodes  * @see Opcodes  * @see Opcodes  * @see Opcodes  * @see Opcodes  * @see Opcodes  * @see Opcodes  * @see Opcodes  * @see Opcodes  * @see Opcodes  * @see Opcodes  * @see Opcodes  * @see Opcodes  * @see Opcodes  * @see Opcodes  * @see Opcodes  * @see Opcodes  * @see Opcodes  * @see Opcodes  * @see Opcodes  * @see Opcodes  * @see Opcodes  * @see Opcodes  * @see Opcodes  * @see Opcodes  * @see Opcodes  * @see Opcodes  * @see Opcodes  * @see Opcodes  * @see Opcodes  * @see Opcodes  * @see Opcodes  * @see Opcodes  * @see Opcodes  * @see Opcodes  * @see Opcodes  * @see Opcodes  * @see Opcodes  * @see Opcodes  * @see Opcodes  * @see Opcodes  * @see Opcodes  * @see Opcodes  * @see Opcodes  * @see Opcodes  * @see Opcodes  * @see Opcodes  * @see Opcodes  * @see Opcodes  * @see Opcodes  * @see Opcodes  * @see Opcodes  * @see Opcodes  * @see Opcodes  * @see Opcodes  * @see Opcodes  * @see Opcodes  * @see Opcodes  * @see Opcodes  * @see Opcodes  * @see Opcodes  * @see Opcodes  * @see Opcodes  * @see Opcodes  * @see Opcodes  * @see Opcodes  * @see Opcodes  * @see Opcodes  * @see Opcodes  * @see Opcodes  * @see Opcodes  * @see Opcodes  * @see Opcodes  * @see Opcodes  * @see Opcodes  * @see Opcodes  * @see Opcodes  * @see Opcodes  * @see Opcodes  * @see Opcodes  * @see Opcodes  * @see Opcodes  * @see Opcodes  * @see Opcodes  * @see Opcodes  * @see Opcodes  * @see Opcodes  * @see Opcodes  * @see Opcodes  * @see Opcodes  * @see Opcodes  * @see Opcodes  * @see Opcodes  *
* @return     This pass factory.  * @see         #deadAssignmentsElimination(boolean)  * @since      1.6  */    public static final PassFactory DEAD_ASSIGNMENTS_ELIMINATION =        new PassFactory("deadAssignmentsElimination", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) { return new DeadAssignmentsElimination(compiler); } };
* template.sendBodyAndHeader("file:          MockEndpoint mock = getMockEndpoint("mock:result2");          mock.expectedBodiesReceived("Hello World 2");          assertMockEndpointsSatisfied();
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
* * @return The translation table stripe level.  */      @Override public int stripeLevel() {      return translationTableStripeLevel;      }      /** @return The translation table stripe mask. */      @Override public int stripeMask() {      return translationTableStripeMask;      }      /** @return The translation table stripe level. */      @Override public int translationTableStripeLevel() {      return translationTableStripeLevel;      }      /** @return The translation table stripe mask. */      @Override public int translationTableStripeMask() {      return translationTableStripeMask;      }      /** @return The translation table stripe level. */      @Override public int translationTableStripeLevel() {      return translationTableStripeLevel;      }      /** @return The translation table stripe mask. */      @Override public int translationTableStripeMask() {      return translationTableStripeMask;      }      /** @return The translation table stripe level. */      @Override public int translationTableStripeLevel() {      return translationTableStripeLevel;      }      /** @return The translation table stripe mask. */      @Override public int translationTableStripeMask() {      return translationTableStripeMask;      }      /** @return The translation table stripe level. */      @Override public int translationTableStripeLevel() {      return translationTableStripeLevel;      }      /** @return The translation table stripe mask. */      @Override public int translationTableStripeMask() {      return translationTableStripeMask;      }      /** @return The translation table stripe level. */      @Override public int translationTableStripeLevel() {      return translationTableStripeLevel;      }      /** @return The translation table stripe mask. */      @Override public int translationTableStripeMask() {      return translationTableStripeMask;      }      /** @return The translation table stripe level. */      @Override public int translationTableStripeLevel() {      return translationTableStripeLevel;      }      /** @return The translation table stripe mask. */      @Override public int translationTableStripeMask() {      return translationTableStripeMask;      }      /** @return The translation table stripe level. */      @Override public int translationTableStripeLevel() {      return translationTableStripeLevel;      }      /** @return The translation table stripe mask. */      @Override public int translationTableStripeMask() {      return translationTableStripeMask;      }      /** @return The translation table stripe level. */      @Override public int translation
* @see <a href:       */      public ResponseList<Status> getRetweetsOfMe() throws TwitterException {         return Status.constructStatuses(get(getBaseURL() + "statuses/retweets_of_me.json",                  null, true));      }
* @return this  */     public final CompilerPassFactory closureOptimizePrimitives =        new PassFactory("closureOptimizePrimitives", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) { return new ClosureOptimizePrimitives(compiler); } };
*     * @return
* restartRequired = restartRequired || Logging.requiresRestart(attribute.getFlags());                      }                      if (restartRequired) {                         context.restartRequired();                      } else if (reloadRequired) {                         context.reloadRequired();                      }
* @return this  */     public final CompilerPassFactory checkShadowVars =        new PassFactory("variableShadowDeclarationCheck", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) { return checkShadowVars; } };
* * Checks possible execution paths of the program for problems: missing return     * statements and dead code.     */   private final HotSwapPassFactory checkControlFlow =        new HotSwapPassFactory("checkControlFlow", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) { return new CheckControlFlow(compiler); } };
* * @return * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @
* * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @
* @return this  */     public final PassFactory collapseAnonymousFunctions =        new PassFactory("collapseAnonymousFunctions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) { return new CollapseAnonymousFunctions(compiler); } };
* @return this  */     public final CompilerPassFactory closureCodeRemoval =        new PassFactory("closureCodeRemoval", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) { return new ClosureCodeRemoval(compiler); } };
* @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return
* @return this  */     public final CompilerPassFactory inlineFunctions =        new PassFactory("inlineFunctions", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) { return new InlineFunctions(compiler); } };
*     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return *     * @return
*     * @return 0 if command if successful, -1 if an error occurred. *     * @return 0 if command if successful, -1 if an error occurred. *     * @return 0 if command if successful, -1 if an error occurred. *     * @return 0 if command if successful, -1 if an error occurred. *     * @return 0 if command if successful, -1 if an error occurred. *     * @return 0 if command if successful, -1 if an error occurred. *     * @return 0 if command if successful, -1 if an error occurred. *     * @return 0 if command if successful, -1 if an error occurred. *     * @return 0 if command if successful, -1 if an error occurred. *     * @return 0 if command if successful, -1 if an error occurred. *     * @return 0 if command if successful, -1 if an error occurred. *     * @return 0 if command if successful, -1 if an error occurred. *     * @return 0 if command if successful, -1 if an error occurred. *     * @return 0 if command if successful, -1 if an error occurred. *     * @return 0 if command if successful, -1 if an error occurred. *     * @return 0 if command if successful, -1 if an error occurred. *     * @return 0 if command if successful, -1 if an error occurred. *     * @return 0 if command if successful, -1 if an error occurred. *     * @return 0 if command if successful, -1 if an error occurred. *     * @return 0 if command if successful, -1 if an error occurred. *     * @return 0 if command if successful, -1 if an error occurred. *     * @return 0 if command if successful, -1 if an error occurred. *     * @return 0 if command if successful, -1 if an error occurred. *     * @return 0 if command if successful, -1 if an error occurred. *     * @return 0 if command if successful, -1 if an error occurred. *     * @return 0 if command if successful, -1 if an error occurred. *     * @return 0 if command if successful, -1 if an error occurred. *     * @return 0 if command if successful, -1 if an error occurred. *     * @return 0
* @return
* @Test  public void testHome() throws Exception { String url = "http:    ResponseEntity<String> entity = this.rest.getForEntity(url, String.class);    assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK); }
*     * @return the data stream constructed    */  private DataStreamSink<OUT> writeAsCsv(DataStreamSink<OUT> inputStream, String path,     WriteFormatAsCsv<OUT> format, long millis, OUT endTuple) {   DataStreamSink<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByMillis<OUT>(      path, format, millis, endTuple));    jobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());    jobGraphBuilder.setMutability(returnStream.getId(), false);    return returnStream;    }
* @return this  */     public final CompilerPassFactory checkGlobalNames =        new PassFactory("Check names", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) { return new CheckGlobalNames(compiler); } }
* loggerForCleaner.debug("Garbage collecting {}", kafkaLog.name());                      total += cleanupExpiredSegments(kafkaLog);                  }                  loggerForCleaner.debug("Finished log cleanup");                  ctx.stop();                  loggerForCleaner.debug("Finished log cleanup");                  return total;                 }
* @Test  public void testHome() throws Exception { String url = "http:    ResponseEntity<String> entity = this.rest.getForEntity(url, String.class);    assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK); }
*     * @return The closed DataStream    */  public DataStreamSink<OUT> writeAsCsv(String path, long millis) {    return writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, null);   }

* * @return {ControlFlowGraph<Node> }     * @return {ControlFlowGraph<Node> }     * @return {ControlFlowGraph<Node> }     * @return {ControlFlowGraph<Node> }     * @return {ControlFlowGraph<Node> }     * @return {ControlFlowGraph<Node> }     * @return {ControlFlowGraph<Node> }     * @return {ControlFlowGraph<Node> }     * @return {ControlFlowGraph<Node> }     * @return {ControlFlowGraph<Node> }     * @return {ControlFlowGraph<Node> }     * @return {ControlFlowGraph<Node> }     * @return {ControlFlowGraph<Node> }     * @return {ControlFlowGraph<Node> }     * @return {ControlFlowGraph<Node> }     * @return {ControlFlowGraph<Node> }     * @return {ControlFlowGraph<Node> }     * @return {ControlFlowGraph<Node> }     * @return {ControlFlowGraph<Node> }     * @return {ControlFlowGraph<Node> }     * @return {ControlFlowGraph<Node> }     * @return {ControlFlowGraph<Node> }     * @return {ControlFlowGraph<Node> }     * @return {ControlFlowGraph<Node> }     * @return {ControlFlowGraph<Node> }     * @return {ControlFlowGraph<Node> }     * @return {ControlFlowGraph<Node> }     * @return {ControlFlowGraph<Node> }     * @return {ControlFlowGraph<Node> }     * @return {ControlFlowGraph<Node> }     * @return {ControlFlowGraph<Node> }     * @return {ControlFlowGraph<Node> }     * @return {ControlFlowGraph<Node> }     * @return {ControlFlowGraph<Node> }     * @return {ControlFlowGraph<Node> }     * @return {ControlFlowGraph<Node> }     * @return {ControlFlowGraph<Node> }     * @return {ControlFlowGraph<Node> }     * @return {ControlFlowGraph<Node> }     * @return {ControlFlowGraph<Node> }     * @return {ControlFlowGraph<Node> }     * @return {ControlFlowGraph<Node> }     * @return {ControlFlowGraph<Node> }     * @return {ControlFlowGraph<Node> }     * @return {ControlFlowGraph<Node> }     * @return {ControlFlowGraph<Node> }     * @return
* * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @
* @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return
*       * @return the message.       */     @Message(id = 15861, value = "Cannot remove deployment %s from the domain as it is still used by server groups %s")    String cannotRemoveDeploymentInUse(String name, List<String> groups);


*     * @param toCompare The element to set as the comparison reference */  public void setReference(T toCompare)   /**    * Checks, whether the given element is equal to the element that has been set as the comparison reference */  public void setReference(T toCompare)   /**    * Checks, whether the given element is equal to the element that has been set as the comparison reference */  public void setReference(T toCompare)   /**    * Checks, whether the given element is equal to the element that has been set as the comparison reference */  public void setReference(T toCompare)   /**    * Checks, whether the given element is equal to the element that has been set as the comparison reference */  public void setReference(T toCompare)   /**    * Checks, whether the given element is equal to the element that has been set as the comparison reference */  public void setReference(T toCompare)   /**    * Checks, whether the given element is equal to the element that has been set as the comparison reference */  public void setReference(T toCompare)   /**    * Checks, whether the given element is equal to the element that has been set as the comparison reference */  public void setReference(T toCompare)   /**    * Checks, whether the given element is equal to the element that has been set as the comparison reference */  public void setReference(T toCompare)   /**    * Checks, whether the given element is equal to the element that has been set as the comparison reference */  public void setReference(T toCompare)   /**    * Checks, whether the given element is equal to the element that has been set as the comparison reference */  public void setReference(T toCompare)   /**    * Checks, whether the given element is equal to the element that has been set as the comparison reference */  public void setReference(T toCompare)   /**    * Checks, whether the given element is equal to the element that has been set as the comparison reference */  public void setReference(T toCompare)   /**    * Checks, whether the given element is equal to the element that has been set as the comparison reference */  public void setReference(T toCompare)   /**    * Checks, whether the given element is equal to the element that has been set as the comparison reference */  public void setReference(T toCompare)   /**    * Checks, whether the given element is equal to the element that has been set as the comparison reference
* @return this  */    public final PassFactory specializeInitialModule =        new PassFactory("specializeInitialModule", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) { return new SpecializeInitialModulePass(compiler); } };
* @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return* @return
* @return this  */     public final CompilerPassFactory closureCheckGetCssName() { return new PassFactory("checkMissingGetCssName", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) { return new ClosureCheckGetCssName(compiler); } };
* * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @
* @return this  */     public final CompilerPassFactory replaceIdGenerators =        new PassFactory("replaceIdGenerators", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) { return replaceIdGenerators; } };
* @return * The builder for the AdvancedKubernetesHPAEndpoint  */     default AdvancedKubernetesHPAEndpointBuilder basic() {         return this;     } /**  * Whether the endpoint should use basic property binding (Camel 2.x) or the newer property binding with additional capabilities.  *   * The option is a: &lt;code&gt;boolean&lt;/code&gt; type.  *   * Default: false  * Group: producer  */     default AdvancedKubernetesHPAEndpointBuilder basicPropertyBinding(             boolean basicPropertyBinding) {         doSetProperty("basicPropertyBinding", basicPropertyBinding);         return this;     } /**  * Whether the endpoint should use basic property binding (Camel 2.x) or the newer property binding with additional capabilities.  *   * The option will be converted to a &lt;code&gt;boolean&lt;/code&gt; type.  *   * Default: false  * Group: producer  */     default AdvancedKubernetesHPAEndpointBuilder basicPropertyBinding(             String basicPropertyBinding) {         doSetProperty("basicPropertyBinding", basicPropertyBinding);         return this;     } /**  * Whether the endpoint should use basic property binding (Camel 2.x) or the newer property binding with additional capabilities.  *   * The option will be converted to a &lt;code&gt;boolean&lt;/code&gt; type.  *   * Default: false  * Group: producer  */     default AdvancedKubernetesHPAEndpointBuilder basicPropertyBinding(             String basicPropertyBinding) {         doSetProperty("basicPropertyBinding", basicPropertyBinding);         return this;     } /**  * Whether the endpoint should use basic property binding (Camel 2.x) or the newer property binding with additional capabilities.  *   * The option will be converted to a &lt;code&gt;boolean&lt;/code&gt; type.  *   * Default: false  * Group: producer  */     default AdvancedKubernetesHPAEndpointBuilder basicPropertyBinding(             boolean basicPropertyBinding) {         doSetProperty("basicPropertyBinding", basicPropertyBinding);         return this;     } /**  * Whether the endpoint should use basic property binding (Camel 2.x) or
* @return this  */     public final CompilerPassFactory runtimeTypeCheck() { return new PassFactory("runtimeTypeCheck", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) { return new RuntimeTypeCheckPass(compiler); } };
* @since Twitter4J 2.0.1 */      public ResponseList<Status> getFavorites(int page) throws TwitterException {         return Status.constructStatuses(get(getBaseURL() + "favorites.json", "page", String.valueOf(page), true));      }      /** @since Twitter4J 2.0.1 */      public ResponseList<Status> getFavorites(int page) throws TwitterException {         return Status.constructStatuses(get(getBaseURL() + "favorites.json", "page", String.valueOf(page), true));      }      /** @since Twitter4J 2.0.1 */      public ResponseList<Status> getFavorites(int page) throws TwitterException {         return Status.constructStatuses(get(getBaseURL() + "favorites.json", "page", String.valueOf(page), true));      }      /** @since Twitter4J 2.0.1 */      public ResponseList<Status> getFavorites(int page) throws TwitterException {         return Status.constructStatuses(get(getBaseURL() + "favorites.json", "page", String.valueOf(page), true));      }      /** @since Twitter4J 2.0.1 */      public ResponseList<Status> getFavorites(int page) throws TwitterException {         return Status.constructStatuses(get(getBaseURL() + "favorites.json", "page", String.valueOf(page), true));      }      /** @since Twitter4J 2.0.1 */      public ResponseList<Status> getFavorites(int page) throws TwitterException {         return Status.constructStatuses(get(getBaseURL() + "favorites.json", "page", String.valueOf(page), true));      }      /** @since Twitter4J 2.0.1 */      public ResponseList<Status> getFavorites(int page) throws TwitterException {         return Status.constructStatuses(get(getBaseURL() + "favorites.json", "page", String.valueOf(page), true));      }      /** @since Twitter4J 2.0.1 */      public ResponseList<Status> getFavorites(int page) throws TwitterException {         return Status.constructStatuses(get(getBaseURL() + "favorites.json", "page", String.
*     * @return     *     *     *     *     *     *     *     *     *     * @expected     *     *     *     *     *     * @see         *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     * @see
* @see <a href:       */      public ResponseList<Status> getRetweetedToMe(Paging paging) throws TwitterException {         return Status.constructStatuses(get(getBaseURL() + "statuses/retweeted_to_me.json",                  null, paging.asPostParameterList(), true));      }
* @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return
* @should fail for an invalid object    * @should throw throw APIException if the input is null    */  public void validate(Object object, Errors errors) throws APIException {  }  /**    * Returns a list of locales used by the user when searching. * @should fail for an invalid object    * @should throw throw APIException if the input is null    */  public void validate(Object object, Errors errors) throws APIException {  }  /**    * Returns a list of locales used by the user when searching. * @should fail for an invalid object    * @should throw throw APIException if the input is null    */  public void validate(Object object, Errors errors) throws APIException {  }  /**    * Returns a list of locales used by the user when searching. * @should fail for an invalid object    * @should throw throw APIException if the input is null    */  public void validate(Object object, Errors errors) throws APIException {  }  /**    * Returns a list of locales used by the user when searching. * @should fail for an invalid object    * @should throw throw APIException if the input is null    */  public void validate(Object object, Errors errors) throws APIException {  }  /**    * Returns a list of locales used by the user when searching. * @should fail for an invalid object    * @should throw throw APIException if the input is null    */  public void validate(Object object, Errors errors) throws APIException {  }  /**    * Returns a list of locales used by the user when searching. * @should fail for an invalid object    * @should throw throw APIException if the input is null    */  public void validate(Object object, Errors errors) throws APIException {  }  /**    * Returns a list of locales used by the user when searching. * @should fail for an invalid object    * @should throw throw APIException if the input is null    */  public void validate(Object object, Errors errors) throws APIException {  }  /**    * Returns a list of locales used by the user when searching. * @should fail for an invalid object    * @should throw throw APIException if the input is null    */  public void validate(Object object, Errors errors) throws APIException {  }  /**    * Returns a list of locales used by the user when searching. * @should fail for an
* * @return {boolean} true if the region is split but not offline  */
* * Checks possible execution paths of the program for problems: missing return     * statements and dead code.     */   private final HotSwapPassFactory checkControlFlow =        new HotSwapPassFactory("checkControlFlow", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) { return new CheckControlFlow(compiler); } };
* @return additionalReplacements;      }   }   private final PassFactory printNameReferenceGraph =      new PassFactory("printNameReferenceGraph", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) { return additionalReplacements;      }   }
* * @param offsetRepository The offset repository.  * @param partition The partition.  * @param partitionLastOffset The partition last offset.  * @param forceCommit Whether to force commit.  */ private void commitOffset(StateRepository<String, String> offsetRepository, TopicPartition partition, long partitionLastOffset, boolean forceCommit) {              if (partitionLastOffset!= -1) {                 if (offsetRepository!= null) {                      log.debug("Saving offset repository state {} from topic {} with offset: {}", threadId, topicName, partitionLastOffset);                      offsetRepository.setState(serializeOffsetKey(partition), serializeOffsetValue(partitionLastOffset));                  } else if (forceCommit) {                      log.debug("Saving offset repository state {} from topic {} with offset: {}", threadId, topicName, partitionLastOffset);                      offsetRepository.setState(serializeOffsetKey(partition), serializeOffsetValue(partitionLastOffset));                  } }
* * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @
*       * @return a message for the error.       */     @Message(id = 15833, value = "There is already a registered host named '%s'")      String slaveAlreadyRegistered(String slaveName)      /**     * @return a message for the error.       */     @Message(id = 15834, value = "There is already a registered host named '%s'")      String slaveAlreadyRegistered(String slaveName)      /**     * @return a message for the error.       */     @Message(id = 15835, value = "There is already a registered host named '%s'")      String slaveAlreadyRegistered(String slaveName)      /**     * @return a message for the error.       */     @Message(id = 15836, value = "There is already a registered host named '%s'")      String slaveAlreadyRegistered(String slaveName)      /**     * @return a message for the error.       */     @Message(id = 15837, value = "There is already a registered host named '%s'")      String slaveAlreadyRegistered(String slaveName)      /**     * @return a message for the error.       */     @Message(id = 15838, value = "There is already a registered host named '%s'")      String slaveAlreadyRegistered(String slaveName)      /**     * @return a message for the error.       */     @Message(id = 15839, value = "There is already a registered host named '%s'")      String slaveAlreadyRegistered(String slaveName)      /**     * @return a message for the error.       */     @Message(id = 15840, value = "There is already a registered host named '%s'")      String slaveAlreadyRegistered(String slaveName)      /**     * @return a message for the error.       */     @Message(id = 15841, value = "There is already a registered host named '%s'")      String slaveAlreadyRegistered(String slaveName)      /**     * @return a message for the error.       */     @Message(id = 15842, value = "There is already a registered host named '%s'")      String slaveAlreadyRegistered(String slaveName)      /**     * @return a message for the error.       */     @Message(id = 15843, value = "There is already a
* @Override    public void glUniform2f (int location, float x, float y) {    GL20.glUniform2(location, x, y);    }    @Override    public void glUniform2f (int location, float x, float y) {    GL20.glUniform2(location, x, y);    }    @Override    public void glUniform3f (int location, float x, float y, float z) {    GL20.glUniform3(location, x, y, z);    }    @Override    public void glUniform3f (int location, float x, float y, float z) {    GL20.glUniform3(location, x, y, z);    }    @Override    public void glUniform4f (int location, float x, float y, float z, float w) {    GL20.glUniform4(location, x, y, z, w);    }    @Override    public void glUniform4f (int location, float x, float y, float z, float w) {    GL20.glUniform4(location, x, y, z, w);    }    @Override    public void glUniformMatrix2fv (int location, int count, FloatBuffer v) {    GL20.glUniformMatrix2fv(location, count, v);    }    @Override    public void glUniformMatrix2fv (int location, int count, float[] v, int offset) {    GL20.glUniformMatrix2fv(location, count, toIntBuffer(v, offset, count));    }    @Override    public void glUniformMatrix3fv (int location, int count, FloatBuffer v) {    GL20.glUniformMatrix3fv(location, count, v);    }    @Override    public void glUniformMatrix3fv (int location, int count, float[] v, int offset) {    GL20.glUniformMatrix3fv(location, count, toIntBuffer(v, offset, count));    }    @Override    public void glUniformMatrix4fv (int location, int count, FloatBuffer v) {    GL20.glUniformMatrix4fv(location, count, v);    }    @Override    public void glUniformMatrix4fv (int location, int count, float[] v, int offset) {    GL20.glUniformMatrix
* * @return The number of bytes written to the file.  * @throws IOException If an I/O error occurs.  * @throws InterruptedException If the thread is interrupted.  * @since 1.0.0  */    public long write() throws IOException, InterruptedException {            long startTimeMs = System.currentTimeMillis();            if (!mMemoryOnly) {             file = new RandomAccessFile(FOLDER + (mWorkerId + BASE_FILE_NUMBER), "rw");              dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);            }            dst.order(ByteOrder.nativeOrder());            return System.currentTimeMillis() - startTimeMs;            }
* * @return the currentMapJournalConfig;          }              if (cacheName!= null) { currentMapJournalConfig = eventJournalConfig.getMapJournalConfig(cacheName);          }              if (currentMapJournalConfig == null) { currentMapJournalConfig = eventJournalConfig;          }              if (currentMapJournalConfig == null) { currentMapJournalConfig = eventJournalConfig;          }              if (currentMapJournalConfig == null) { currentMapJournalConfig = eventJournalConfig;          }          if (currentMapJournalConfig == null) { currentMapJournalConfig = eventJournalConfig;          }          if (currentMapJournalConfig == null) { currentMapJournalConfig = eventJournalConfig;          }          if (currentMapJournalConfig == null) { currentMapJournalConfig = eventJournalConfig;          }          if (currentMapJournalConfig == null) { currentMapJournalConfig = eventJournalConfig;          }          if (currentMapJournalConfig == null) { currentMapJournalConfig = eventJournalConfig;          }          if (currentMapJournalConfig == null) { currentMapJournalConfig = eventJournalConfig;          }          if (currentMapJournalConfig == null) { currentMapJournalConfig = eventJournalConfig;          }          if (currentMapJournalConfig == null) { currentMapJournalConfig = eventJournalConfig;          }          if (currentMapJournalConfig == null) { currentMapJournalConfig = eventJournalConfig;          }          if (currentMapJournalConfig == null) { currentMapJournalConfig = eventJournalConfig;          }          if (currentMapJournalConfig == null) { currentMapJournalConfig = eventJournalConfig;          }          if (currentMapJournalConfig == null) { currentMapJournalConfig = eventJournalConfig;          }          if (currentMapJournalConfig == null) { currentMapJournalConfig = eventJournalConfig;          }          if (currentMapJournalConfig == null) { currentMapJournalConfig = eventJournalConfig;          }          if (currentMapJournalConfig == null) { currentMapJournalConfig = eventJournalConfig;          }          if (currentMapJournalConfig == null) { currentMapJournalConfig = eventJournalConfig;          }          if (currentMapJournalConfig == null) { currentMapJournalConfig = eventJournalConfig;          }          if (currentMapJournalConfig == null) { currentMapJournalConfig = eventJournalConfig;          }          if (currentMapJournalConfig ==
* @return this  */     public final CompilerPassFactory closureCodeRemoval =        new PassFactory("closureCodeRemoval", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) { return new ClosureCodeRemoval(compiler); } };
* @param request   The request object providing information about the HTTP request       * @param response  The response object providing functionality for modifying the response       */     public abstract void handle(Exception exception, Request request, Response response);
* @since Twitter4J 2.0.1 */      public ResponseList<Status> getFavorites(String id) throws TwitterException {         return Status.constructStatuses(get(getBaseURL() + "favorites/" + id + ".json", new PostParameter[0], true));      }      /** @since Twitter4J 2.0.1 */      public ResponseList<Status> getFavorites(String id) throws TwitterException {         return Status.constructStatuses(get(getBaseURL() + "favorites/" + id + ".json", new PostParameter[0], true));      }      /** @since Twitter4J 2.0.1 */      public ResponseList<Status> getFavorites(String id) throws TwitterException {         return Status.constructStatuses(get(getBaseURL() + "favorites/" + id + ".json", new PostParameter[0], true));      }      /** @since Twitter4J 2.0.1 */      public ResponseList<Status> getFavorites(String id) throws TwitterException {         return Status.constructStatuses(get(getBaseURL() + "favorites/" + id + ".json", new PostParameter[0], true));      }      /** @since Twitter4J 2.0.1 */      public ResponseList<Status> getFavorites(String id) throws TwitterException {         return Status.constructStatuses(get(getBaseURL() + "favorites/" + id + ".json", new PostParameter[0], true));      }      /** @since Twitter4J 2.0.1 */      public ResponseList<Status> getFavorites(String id) throws TwitterException {         return Status.constructStatuses(get(getBaseURL() + "favorites/" + id + ".json", new PostParameter[0], true));      }      /** @since Twitter4J 2.0.1 */      public ResponseList<Status> getFavorites(String id) throws TwitterException {         return Status.constructStatuses(get(getBaseURL() + "favorites/" + id + ".json", new PostParameter[0], true));      }      /** @since Twitter4J 2.0.1 */      public ResponseList<Status> getFavorites(String id) throws TwitterException {         return Status.constructStatuses(get(getBaseURL() + "favorites/" + id + ".json", new
* * @see NormalizableKey    */  public void putNormalizedKey(T record, byte[] target, int offset, int numBytes);   /**    * Writes the record in such a fashion that all keys are normalizing and at the beginning of the serialized data.    * @see NormalizableKey    */  public void putNormalizedKey(T record, byte[] target, int offset, int numBytes);   /**    * Writes the record in such a fashion that all keys are normalizing and at the beginning of the serialized data.    * @see NormalizableKey    */  public void putNormalizedKey(T record, byte[] target, int offset, int numBytes);   /**    * Writes the record in such a fashion that all keys are normalizing and at the beginning of the serialized data.    * @see NormalizableKey    */  public void putNormalizedKey(T record, byte[] target, int offset, int numBytes);   /**    * Writes the record in such a fashion that all keys are normalizing and at the beginning of the serialized data.    * @see NormalizableKey    */  public void putNormalizedKey(T record, byte[] target, int offset, int numBytes);   /**    * Writes the record in such a fashion that all keys are normalizing and at the beginning of the serialized data.    * @see NormalizableKey    */  public void putNormalizedKey(T record, byte[] target, int offset, int numBytes);   /**    * Writes the record in such a fashion that all keys are normalizing and at the beginning of the serialized data.    * @see NormalizableKey    */  public void putNormalizedKey(T record, byte[] target, int offset, int numBytes);   /**    * Writes the record in such a fashion that all keys are normalizing and at the beginning of the serialized data.    * @see NormalizableKey    */  public void putNormalizedKey(T record, byte[] target, int offset, int numBytes);   /**    * Writes the record in such a fashion that all keys are normalizing and at the beginning of the serialized data.    * @see NormalizableKey    */  public void putNormalizedKey(T record, byte[] target, int offset, int numBytes);   /**    * Writes the record in such a fashion that all keys are normalizing and at the beginning of the serialized data.    * @see NormalizableKey    */  public void putNormalizedKey
*     * @return
* * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @
* context.setOptimizationLevel(9);      final ScriptableObject scope = context.initStandardObjects();      return new Function(function) {      @Override      public Object call(final Scriptable scope) {      return scope.callFunction(function);      }      };

* @NotNull      @JsonProperty     private Size responseBufferSize = Size.kilobytes(32);      @NotNull      @JsonProperty     private Size responseHeaderBufferSize = Size.kilobytes(3);      @NotNull      @JsonProperty     private Size responseHeaderBufferSize = Size.kilobytes(3);      @NotNull      @JsonProperty     private Size responseHeaderBufferSize = Size.kilobytes(3);      @NotNull      @JsonProperty     private Size responseHeaderBufferSize = Size.kilobytes(3);      @NotNull      @JsonProperty     private Size responseHeaderBufferSize = Size.kilobytes(3);      @NotNull      @JsonProperty     private Size responseHeaderBufferSize = Size.kilobytes(3);      @NotNull      @JsonProperty     private Size responseHeaderBufferSize = Size.kilobytes(3);      @NotNull      @JsonProperty     private Size responseHeaderBufferSize = Size.kilobytes(3);      @NotNull      @JsonProperty     private Size responseHeaderBufferSize = Size.kilobytes(3);      @NotNull      @JsonProperty     private Size responseHeaderBufferSize = Size.kilobytes(3);      @NotNull      @JsonProperty     private Size responseHeaderBufferSize = Size.kilobytes(3);      @NotNull      @JsonProperty     private Size responseHeaderBufferSize = Size.kilobytes(3);      @NotNull      @JsonProperty     private Size responseHeaderBufferSize = Size.kilobytes(3);      @NotNull      @JsonProperty     private Size responseHeaderBufferSize = Size.kilobytes(3);      @NotNull      @JsonProperty     private Size responseHeaderBufferSize = Size.kilobytes(3);      @NotNull      @JsonProperty     private Size responseHeaderBufferSize = Size.kilobytes(3);      @NotNull      @JsonProperty     private Size responseHeaderBufferSize = Size.kilobytes(3);      @NotNull      @JsonProperty     private Size responseHeaderBufferSize = Size.kilobytes(3);      @NotNull      @JsonProperty     private Size responseHeaderBufferSize = Size.kilobytes(3);      @NotNull      @JsonProperty     private Size responseHeaderBufferSize = Size.kilobytes(3);      @NotNull      @JsonProperty

* * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @
*       * @return the message.       */     @Message(id = 15851, value = "Operation targets host %s but that host is not registered")    String invalidOperationTargetHost(String name);
* if (serviceType == ServiceType.MASTER_WEB) {        port = mLocalAlluxioClusterResource.get().getMaster().getWebLocalPort(); } else {       port = mLocalAlluxioClusterResource.get().getWorkerAddress().getWebPort(); }      InetSocketAddress webAddr =          new InetSocketAddress(NetworkAddressUtils.getConnectHost(serviceType), port);

*     * @return the data stream constructed    */  private DataStreamSink<OUT> writeAsText(DataStreamSink<OUT> inputStream, String path,     WriteFormatAsText<OUT> format, long millis, OUT endTuple) {   DataStreamSink<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByMillis<OUT>(      path, format, millis, endTuple), null);    jobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());    jobGraphBuilder.setMutability(returnStream.getId(), false);    return returnStream;    }
* * @return
* * @throws Exception {    mkdir(tmpdir);    StringBuilder grammarBuilder = new StringBuilder(239);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s @after {print($ctx.toStringTree(recog=self))} : e ;\n");    grammarBuilder.append("e : a=e op=('*'|'/') b=e  {}{True}?\n");
* @return this  */    public final CompilerPassFactory crossModuleCodeMotion =        new PassFactory("crossModuleCodeMotion", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) { return crossModuleCodeMotion; } };

* @return this  */     public final CompilerPassFactory collapseProperties =        new PassFactory("collapseProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) { return new CollapseProperties(compiler); } };
* @return * @see org.apache.lucene.analysis.tokenattributes.OffsetAttribute  * @see org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute  */ public final class AnsjTokenizerFactory extends org.apache.lucene.analysis.tokenattributes.TokenFilterFactory {   public AnsjTokenizerFactory(org.apache.lucene.analysis.TokenStream input) {   super(input);   } public AnsjTokenizerFactory(org.apache.lucene.analysis.TokenStream input, org.apache.lucene.analysis.tokenattributes.OffsetAttribute offsetAtt) {   super(input, offsetAtt);   } public AnsjTokenizerFactory(org.apache.lucene.analysis.TokenStream input, org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute positionIncrementAtt) {   super(input, positionIncrementAtt);   } }
* @return this  */    public final PassFactory specializeInitialModule =        new PassFactory("specializeInitialModule", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) { return new SpecializeInitialModulePass(compiler); } };

* @return this  */     public final CompilerPassFactory inlineConstants =        new PassFactory("inlineConstants", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) { return new InlineConstants(compiler); } };
*     * @return *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *     *
* @return     *     *     *     * @throws    *     *     *     * @throws    *     *     * @throws    *     * @return     *     *     * @throws    *     * @throws    *     * @throws    *     * @return     *     * @throws    *     * @throws    *     * @return     *     * @throws    *     * @throws    *     * @return     *     * @throws    *     * @return     *     * @throws    *     * @return     *     * @throws    *     * @return     *     * @throws    *     * @return     *     * @throws    *     * @return     *     * @throws    *     * @return     *     * @throws    *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *     * @return     *

* @return this  */     public final CompilerPassFactory collapseProperties =        new PassFactory("collapseProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) { return new CollapseProperties(compiler); } };
* @return this  */     public final CompilerPassFactory collapseProperties =        new PassFactory("collapseProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) { return new CollapseProperties(compiler); } };

* @return this  */     public final PassFactory collapseAnonymousFunctions =        new PassFactory("collapseAnonymousFunctions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) { return new CollapseAnonymousFunctions(compiler); } };
*     *     * @return this  *     */   private final PassFactory removeUnusedPrototypeProperties =        new PassFactory("removeUnusedPrototypeProperties", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) { return new RemoveUnusedPrototypeProperties(compiler); } };
* @return this  */     public LatePeepholeOptimizationsPassFactory latePeepholeOptimizations() { return new LatePeepholeOptimizationsPassFactory(this); }
*     * @throws IOException Thrown if any of the two views raises an exception */  public void copy(DataInputView source, DataOutputView target) throws IOException;
*     *     *     * @return This pass.      */   private final PassFactory collapseVariableDeclarations =        new PassFactory("collapseVariableDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) { return new CollapseVariableDeclarations(compiler); } };
*     *     * @return void  *     * @return void  *     * @return void  *     * @return void  *     * @return void  *     * @return void  *     * @return void  *     * @return void  *     * @return void  *     * @return void  *     * @return void  *     * @return void  *     * @return void  *     * @return void  *     * @return void  *     * @return void  *     * @return void  *     * @return void  *     * @return void  *     * @return void  *     * @return void  *     * @return void  *     * @return void  *     * @return void  *     * @return void  *     * @return void  *     * @return void  *     * @return void  *     * @return void  *     * @return void  *     * @return void  *     * @return void  *     * @return void  *     * @return void  *     * @return void  *     * @return void  *     * @return void  *     * @return void  *     * @return void  *     * @return void  *     * @return void  *     * @return void  *     * @return void  *     * @return void  *     * @return void  *     * @return void  *     * @return void  *     * @return void  *     * @return void  *     * @return void  *     * @return void  *     * @return void  *     * @return void  *     * @return void  *     * @return void  *     * @return void  *     * @return void  *     * @return void  *     * @return void  *     * @return void  *     * @return void  *     * @return void  *     * @return void  *     * @return void  *     * @return void  *     * @return void  *     * @return void  *     * @return void  *     * @return void  *     * @return void  *     * @return void  *     * @return void  *     * @
* @return this  */     public HotSwapPassFactory checkRequires() { return checkRequires; }

* @return this  */     public final CompilerPassFactory removeUnusedVars =        new PassFactory("removeUnusedVars", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) { return new RemoveUnusedVars(compiler); } };
*     * @return The closed DataStream    */  public DataStreamSink<OUT> writeAsCsv(String path, int batchSize, OUT endTuple) {    return writeAsCsv(path, batchSize, endTuple);    }
* @return this  */     public final CompilerPassFactory checkGlobalNames =        new PassFactory("Check names", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) { return new CheckGlobalNames(compiler); } }
* @Test   public void testMultipleAlternativesWithCommonLabel_2() throws Exception {    mkdir(tmpdir);   StringBuilder grammarBuilder = new StringBuilder(639);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s : e {console.log($e.v);};\n");    grammarBuilder.append("e returns [int v]\n");    mkdir(tmpdir);    mkdir(tmpdir);    mkdir(tmpdir);    mkdir(tmpdir);    mkdir(tmpdir);    mkdir(tmpdir);    mkdir(tmpdir);    mkdir(tmpdir);    mkdir(tmpdir);    mkdir(tmpdir);    mkdir(tmpdir);    mkdir(tmpdir);    mkdir(tmpdir);    mkdir(tmpdir);    mkdir(tmpdir);    mkdir(tmpdir);    mkdir(tmpdir);    mkdir(tmpdir);    mkdir(tmpdir);    mkdir(tmpdir);    mkdir(tmpdir);    mkdir(tmpdir);    mkdir(tmpdir);    mkdir(tmpdir);    mkdir(tmpdir);    mkdir(tmpdir);    mkdir(tmpdir);    mkdir(tmpdir);    mkdir(tmpdir);    mkdir(tmpdir);    mkdir(tmpdir);    mkdir(tmpdir);    mkdir(tmpdir);    mkdir(tmpdir);    mkdir(tmpdir);    mkdir(tmpdir);    mkdir(tmpdir);    mkdir(tmpdir);    mkdir(tmpdir);    mkdir(tmpdir);    mkdir(tmpdir);    mkdir(tmpdir);    mkdir(tmpdir);    mkdir(tmpdir);    mkdir(tmpdir);    mkdir(tmpdir);    mkdir(tmpdir);    mkdir(tmpdir);    mkdir(tmpdir);    mkdir(tmpdir);    mkdir(tmpdir);    mkdir(tmpdir);    mkdir(tmpdir);    mkdir(tmpdir);    mkdir(tmpdir);    mkdir(tmpdir);    mkdir(tmpdir);    mkdir(tmpdir);    mkdir(tmpdir);    mkdir(tmpdir);    mkdir(tmpdir);    mkdir(tmpdir);    mkdir(tmpdir);    mkdir(tmpdir);    mkdir(tmpdir);    mkdir(tmpdir);    mkdir(tmpdir);    mkdir(tmpdir);    mkdir(tmpdir);    mkdir(tmpdir);    mkdir(tmpdir);    mkdir(
*       * @return the message.       */     @Message(id = 15843, value = "Invalid rollout plan. Plan operations affect server groups %s that are not reflected in the rollout plan")    String invalidRolloutPlan(Set<String> groups);
*      *      * @return ResponseList&lt;Status&gt;  */      public ResponseList<Status> getPublicTimeline() throws              TwitterException {         return Status.constructStatuses(get(getBaseURL() +                  "statuses/public_timeline.json", false));      } /*      *      * @return ResponseList&lt;Status&gt;  */      public ResponseList<Status> getPublicTimeline() throws              TwitterException {         return Status.constructStatuses(get(getBaseURL() +                  "statuses/public_timeline.json", false));      } /*      *      * @return ResponseList&lt;Status&gt;  */      public ResponseList<Status> getPublicTimeline() throws              TwitterException {         return Status.constructStatuses(get(getBaseURL() +                  "statuses/public_timeline.json", false));      } /*      *      * @return ResponseList&lt;Status&gt;  */      public ResponseList<Status> getPublicTimeline() throws              TwitterException {         return Status.constructStatuses(get(getBaseURL() +                  "statuses/public_timeline.json", false));      } /*      *      * @return ResponseList&lt;Status&gt;  */      public ResponseList<Status> getPublicTimeline() throws              TwitterException {         return Status.constructStatuses(get(getBaseURL() +                  "statuses/public_timeline.json", false));      } /*      *      * @return ResponseList&lt;Status&gt;  */      public ResponseList<Status> getPublicTimeline() throws              TwitterException {         return Status.constructStatuses(get(getBaseURL() +                  "statuses/public_timeline.json", false));      } /*      *      * @return ResponseList&lt;Status&gt;  */      public ResponseList<Status> getPublicTimeline() throws              TwitterException {         return Status.constructStatuses(get(getBaseURL() +                  "statuses/public_timeline.json", false));      } /*      *      * @return ResponseList&lt;Status&gt;  */      public ResponseList<Status> getPublicTimeline() throws              TwitterException {         return Status.constructStatuses(get(getBaseURL() +                  "statuses/public_timeline.json", false));      } /*      *      * @return ResponseList&lt;Status&gt;  */      public ResponseList
*     * @return

* * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @
* @return this  */     public CompilerPassFactory ignoreCajaProperties() { return new PassFactory("ignoreCajaProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) { return new IgnoreCajaPropertiesPass(compiler); } };
* * @return the label  */ public LabelStyle getStyle() {    return style;   }   public void setStyle(LabelStyle style) {    this.style = style;   }   public String getText() {    return text;   }   public void setText(String text) {    this.text = text;   }   public BitmapFontCache getCache() {    return cache;   }   public void setCache(BitmapFontCache cache) {    this.cache = cache;   }   public float getPrefWidth() {    return prefWidth;   }   public void setPrefWidth(float prefWidth) {    this.prefWidth = prefWidth;   }   public float getPrefHeight() {    return prefHeight;   }   public void setPrefHeight(float prefHeight) {    this.prefHeight = prefHeight;   }   public int getLabelAlign() {    return labelAlign;   }   public void setLabelAlign(int labelAlign) {    this.labelAlign = labelAlign;   }
* * * @return the {@link Activation}  * @throws org.springframework.beans.factory.NoSuchBeanDefinitionException if the requiredMessageListener is null  * @throws org.springframework.beans.factory.NoSuchMethodError if the requiredMessageListener is null  * @throws org.springframework.beans.factory.NoSuchBeanDefinitionException if the requiredMessageListener is null  * @throws org.springframework.beans.factory.NoSuchMethodError if the requiredMessageListener is null  * @throws org.springframework.beans.factory.NoSuchMethodError if the requiredMessageListener is null  * @throws org.springframework.beans.factory.NoSuchMethodError if the requiredMessageListener is null  * @throws org.springframework.beans.factory.NoSuchMethodError if the requiredMessageListener is null  * @throws org.springframework.beans.factory.NoSuchMethodError if the requiredMessageListener is null  * @throws org.springframework.beans.factory.NoSuchMethodError if the requiredMessageListener is null  * @throws org.springframework.beans.factory.NoSuchMethodError if the requiredMessageListener is null  * @throws org.springframework.beans.factory.NoSuchMethodError if the requiredMessageListener is null  * @throws org.springframework.beans.factory.NoSuchMethodError if the requiredMessageListener is null  * @throws org.springframework.beans.factory.NoSuchMethodError if the requiredMessageListener is null  * @throws org.springframework.beans.factory.NoSuchMethodError if the requiredMessageListener is null  * @throws org.springframework.beans.factory.NoSuchMethodError if the requiredMessageListener is null  * @throws org.springframework.beans.factory.NoSuchMethodError if the requiredMessageListener is null  * @throws org.springframework.beans.factory.NoSuchMethodError if the requiredMessageListener is null  * @throws org.springframework.beans.factory.NoSuchMethodError if the requiredMessageListener is null  * @throws org.springframework.beans.factory.NoSuchMethodError if the requiredMessageListener is null  * @throws org.springframework.beans.factory.NoSuchMethodError if the requiredMessageListener

* @return this  */ public final CompilerPassFactory chainCalls =        new PassFactory("chainCalls", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) { return new ChainCalls(compiler); } };
* @GwtIncompatible("Reader/Writer") private void testStreamingEncodingWithSeparators(        BaseEncoding encoding, String decoded, String encoded) throws IOException {      testStreamingEncoding(encoding, decoded, encoded);}
* * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @
* * @return this  */     public final CompilerPassFactory denormalize() { return new PassFactory("denormalize", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) { return new DenormalizePass(compiler); } };
* mw.visitVarInsn(LLOAD, context.var("float"));              mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), "processKey",                                 "(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;F)Ljava/lang/String;");          } else if (propertyClass == double.class) {             mw.visitVarInsn(LLOAD, context.var("double"));               mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), "processKey",                                 "(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;D)Ljava/lang/String;");          } else if (propertyClass == boolean.class) {             mw.visitVarInsn(LLOAD, context.var("boolean"));               mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), "processKey",                                 "(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;B)Ljava/lang/String;");          } else if (propertyClass == char.class) {             mw.visitVarInsn(LLOAD, context.var("char"));               mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), "processKey",                                 "(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;C)Ljava/lang/String;");          } else if (propertyClass == short.class) {             mw.visitVarInsn(LLOAD, context.var("short"));               mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), "processKey",                                 "(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;S)Ljava/lang/String;");          } else if (propertyClass == int.class) {             mw.visitVarInsn(LLOAD, context.var("int"));               mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), "processKey",                                 "(Lcom/
* @return * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws * @throws
* * @throws Exception {    mkdir(tmpdir);    StringBuilder grammarBuilder = new StringBuilder(239);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s @after {print($ctx.toStringTree(recog=self))} : e ;\n");    grammarBuilder.append("e : a=e op=('*'|'/') b=e  {}{True}?\n");

* * @return {R}     */     protected R visitCreateTable(CreateTable node, C context)      {         return visitNode(node, context);      }      protected R visitDropTable(DropTable node, C context)      {         return visitNode(node, context);      }
* @return this  */     public final CompilerPassFactory collapseObjectLiterals() {      return new PassFactory("collapseObjectLiterals", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) { return new CollapseObjectLiteralsPass(compiler); } };
*     * @return The closed DataStream    */  public DataStreamSink<OUT> writeAsCsv(String path, int batchSize) {    return writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), batchSize, null);   }
*     * @return
*     *     * @return this  *     */   private final PassFactory removeUnusedPrototypeProperties =        new PassFactory("removeUnusedPrototypeProperties", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) { return new RemoveUnusedPrototypeProperties(compiler); } };
*         * @return -1 * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @return * @

* static final DiagnosticType REDECLARED_VARIABLE = DiagnosticType.warning(        "JSC_REDECLARED_VARIABLE",        "Redeclared variable: {0}");   static final DiagnosticType REDECLARED_VARIABLE = DiagnosticType.warning(        "JSC_REDECLARED_VARIABLE",        "Redeclared variable: {0}");   static final DiagnosticType REDECLARED_VARIABLE = DiagnosticType.warning(        "JSC_REDECLARED_VARIABLE",        "Redeclared variable: {0}");   static final DiagnosticType REDECLARED_VARIABLE = DiagnosticType.warning(        "JSC_REDECLARED_VARIABLE",        "Redeclared variable: {0}");   static final DiagnosticType REDECLARED_VARIABLE = DiagnosticType.warning(        "JSC_REDECLARED_VARIABLE",        "Redeclared variable: {0}");   static final DiagnosticType REDECLARED_VARIABLE = DiagnosticType.warning(        "JSC_REDECLARED_VARIABLE",        "Redeclared variable: {0}");   static final DiagnosticType REDECLARED_VARIABLE = DiagnosticType.warning(        "JSC_REDECLARED_VARIABLE",        "Redeclared variable: {0}");   static final DiagnosticType REDECLARED_VARIABLE = DiagnosticType.warning(        "JSC_REDECLARED_VARIABLE",        "Redeclared variable: {0}");   static final DiagnosticType REDECLARED_VARIABLE = DiagnosticType.warning(        "JSC_REDECLARED_VARIABLE",        "Redeclared variable: {0}");   static final DiagnosticType REDECLARED_VARIABLE = DiagnosticType.warning(        "JSC_REDECLARED_VARIABLE",        "Redeclared variable: {0}");   static final DiagnosticType REDECLARED_VARIABLE = DiagnosticType.warning(        "JSC_REDECLARED_VARIABLE",        "Redeclared variable: {0}");   static final DiagnosticType REDECLARED_VARIABLE = DiagnosticType.warning(        "JSC_REDECLARED_VARIABLE",        "Redeclared variable: {0}");   static final DiagnosticType REDECLARED_VARIABLE = DiagnosticType.warning(        "JSC_REDECLARED_VARIABLE",        "Redeclared variable: {0}");   static final
* @return the number of blocks     */    public int getNumberOfBlocks() {     Preconditions.checkNotNull(mBlockIdsOnTiers);      int numberOfBlocks = 0;      for (List<Long> blockIds : mBlockIdsOnTiers.values()) {     numberOfBlocks += blockIds.size();     }      return numberOfBlocks;    }    /**    * @return the number of blocks     */    public int getNumberOfBlocks() {     Preconditions.checkNotNull(mBlockIdsOnTiers);      int numberOfBlocks = 0;      for (List<Long> blockIds : mBlockIdsOnTiers.values()) {     numberOfBlocks += blockIds.size();     }      return numberOfBlocks;    }    /**    * @return the number of blocks     */    public int getNumberOfBlocks() {     Preconditions.checkNotNull(mBlockIdsOnTiers);      int numberOfBlocks = 0;      for (List<Long> blockIds : mBlockIdsOnTiers.values()) {     numberOfBlocks += blockIds.size();     }      return numberOfBlocks;    }    /**    * @return the number of blocks     */    public int getNumberOfBlocks() {     Preconditions.checkNotNull(mBlockIdsOnTiers);      int numberOfBlocks = 0;      for (List<Long> blockIds : mBlockIdsOnTiers.values()) {     numberOfBlocks += blockIds.size();     }      return numberOfBlocks;    }    /**    * @return the number of blocks     */    public int getNumberOfBlocks() {     Preconditions.checkNotNull(mBlockIdsOnTiers);      int numberOfBlocks = 0;      for (List<Long> blockIds : mBlockIdsOnTiers.values()) {     numberOfBlocks += blockIds.size();     }      return numberOfBlocks;    }    /**    * @return the number of blocks     */    public int getNumberOfBlocks() {     Preconditions.checkNotNull(mBlockIdsOnTiers);      int numberOfBlocks = 0;      for (List<Long> blockIds : mBlockIdsOnTiers.values()) {     numberOfBlocks += blockIds.size();     }      return numberOfBlocks;    }    /**    * @return the number of blocks     */    public int getNumberOfBlocks() {     Preconditions.checkNotNull(mBlockIdsOnTiers);      int numberOfBlocks = 0;      for (List<Long> blockIds : mBlock

*     * @return *     The builder for the advanced builder pattern.      */     default SpringLdapEndpointBuilder advanced() {         return (SpringLdapEndpointBuilder) this;     } }
* @Test    public void testListenOnWildcardPort() throws Exception {     startTest(getMethodName(), false); }

*     * @return *     *     * The builder for this endpoint builder      */     default AdvancedBeanstalkEndpointBuilder advanced() {         return (AdvancedBeanstalkEndpointBuilder) this;     } }
