private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,      do {          switch (token) {            case STAR:               if (ignoreStar) {               return null;               }               if (builder.length() > 0) {               return builder.removeFromParent();             }             return null;           }          default:               if (builder.length() > 0) {               return builder.removeFromParent();             }           return null;         }      catch (Throwable t) {        if (t!= null) {          throw new RuntimeException(t);        }       return null;     }   else {        if (info!= null) {          info.detachFromParent();         }       return null;     }   else {        if (value!= null) {          value.detachFromParent();         }       return null;     }   else {        if (parent!= null) {          parent.detachFromParent();         }       return null;     }   else {    return null;   }   }
private boolean isNoType() {     return isNoType();     }    public final boolean isEmptyType() {     return isEmptyType();     }    public final boolean isNumberObjectType() {     return isNumberObjectType();     }    public final boolean isNumberObjectType() {     return isNumberObjectType();     }    public final boolean isNumberObjectType() {     return isNumberObjectType();     }    public final boolean isNumberObjectType() {     return isNumberObjectType();     }    public final boolean isNumberObjectType() {     return isNumberObjectType();     }    public final boolean isNumberObjectType() {     return isNumberObjectType();     }    public final boolean isNumberObjectType() {     return isNumberObjectType();     }    public final boolean isNumberObjectType() {     return isNumberObjectType();     }    public final boolean isNumberObjectType() {     return isNumberObjectType();     }    public final boolean isNumberObjectType() {     return isNumberObjectType();     }    public final boolean isNumberObjectType() {     return isNumberObjectType();     }    public final boolean isNumberObjectType() {     return isNumberObjectType();     }    public final boolean isNumberObjectType() {     return isNumberObjectType();     }    public final boolean isNumberObjectType() {     return isNumberObjectType();     }    public final boolean isNumberObjectType() {     return isNumberObjectType();     }    public final boolean isNumberObjectType() {     return isNumberObjectType();     }    public final boolean isNumberObjectType() {     return isNumberObjectType();     }    public final boolean isNumberObjectType() {     return isNumberObjectType();     }    public final boolean isNumberObjectType() {     return isNumberObjectType();     }    public final boolean isNumberObjectType() {     return isNumberObjectType();     }    public final boolean isNumberObjectType() {     return isNumberObjectType();     }    public final boolean isNumberObjectType() {     return isNumberObjectType();     }    public final boolean isNumberObjectType() {     return isNumberObjectType();     }    public final boolean isNumberObjectType() {     return isNumberObjectType();     }    public final boolean isNumberObjectType() {     return isNumberObjectType();     }    public final boolean isNumberObjectType() {     return isNumberObjectType();     }    public final boolean isNumberObjectType() {     return isNumberObjectType();     }    public final boolean isNumberObjectType() {     return isNumberObjectType();     }    public final boolean isNumberObjectType() {     return isNumberObjectType();     }    public final boolean isNumberObjectType() {     return isNumberObjectType();     }    public final boolean isNumberObjectType() {     return isNumberObjectType();     }    public final boolean isNumberObjectType() {     return isNumberObjectType();     }
private void removeRow(Comparable rowKey) {             int index = getRowIndex(rowKey);             removeRow(index);             }             private void removeRow(int index) {             if (row!= null) {               row.removeRow(index);             }             else {               if (parent!= null) {               parent.removeRow(index);             }           } else {               if (parent!= null) {               parent.removeRow(0);             }           } else {               if (this!= parent) {               parent.removeRow(0);             }           } else {               if (this!= parent) {               parent.removeRow(0);             }           } else {               if (this!= parent) {               parent.removeRow(0);             }           } else {               if (this!= parent) {               parent.removeRow(0);             }           } else {               if (this!= parent) {               parent.removeRow(0);             }           } else {               if (this!= parent) {               parent.removeRow(0);             }           } else {               if (this!= parent) {               parent.removeRow(0);             }           } else {               if (this!= parent) {               parent.removeRow(0);             }           } else {               if (this!= parent) {               parent.removeRow(0);             }           } else {               if (this!= parent) {               parent.removeRow(0);             }           } else {               if (this!= parent) {               parent.removeRow(0);             }           } else {               if (this!= parent) {               parent.removeRow(0);             }           } else {               if (this!= parent) {               parent.removeRow(0);             }           } else {               if (this!= parent) {               parent.removeRow(0);             }           } else {               if (this!= parent) {               parent.removeRow(0);             }           } else {               if (this!= parent) {               parent.removeRow(0);             }           } else {               if (this!= parent) {               parent.removeRow(0);             }           } else {               if (this!= parent) {               parent.removeRow(0);             }           } else {               if (this!= parent) {               parent
public int getDimension() {             return indices[i];             }         int idx = 1;         while (count < index) {             count += idx;             ++idx;         }         --idx;         indices[last] = idx;          return indices;          } Assignment expression modification, Loop removal, Variable removal", "#$%&'()*+,-./");     } }
!("#$%&'()*+,-./             public boolean apply(Node input) {                    case Token.REGEXP:                    case Token.NEW:                      return true;                  }                  return false;             }
public void exitScope(NodeTraversal t) {             if (t.getScopeDepth() == 2) {                 renameNamespaceShadows(t);                 aliases.clear();                 forbiddenLocals.clear();                 transformation = null;             }           } else {             if (aliases!= null) {                 aliases.removeFromParent();             }             if (forbiddenLocals!= null) {                 forbiddenLocals.removeFromParent();             }             if (transformation!= null) {                 transformation.removeFromParent();             }           } else {             if (parent!= null) {                 parent.removeFromParent();             }           }
!"#$%&'()*+,-./  public double integrate(final FirstOrderDifferentialEquations equations,                    loop     = false) { return equations.integrate(this, loop); } else { return this; }  //------------------------------------------------------------------------------  // <auto-generated>  //     This code was generated by a tool.  //     Runtime Version:4.0.30319.42000  //  //     Changes to this file may cause incorrect behavior and will be lost if  //     the code is regenerated.  // </auto-generated>  //------------------------------------------------------------------------------  using NMF.Collections.Generic; using NMF.Collections.ObjectModel; using NMF.Expressions; using NMF.Expressions.Linq; using NMF.Models; using NMF.Models.Collections; using NMF.Models.Expressions; using NMF.Models.Meta; using NMF.Models.Repository; using NMF.Serialization; using NMF.Utilities; using System; using System.Collections; using System.Collections.Generic; using System.Collections.ObjectModel; using System.ComponentModel; using System.Diagnostics; using System.Linq; using TTC2017.SmartGrids.CIM; using TTC2017.SmartGrids.CIM.IEC61970.Core; using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets; using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon; using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport; using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations; using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork; using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfTypes; using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfUtils; using TTC2017.SmartGrids.CIM.IEC61970.Informative.Informative.
private int parseInto(ReadWritableInstant instant, String text, int position) {          long instantMillis = instant.getMillis();          Chronology chrono = instant.getChronology();          long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);          chrono = selectChronology(chrono);          int defaultYear = chrono.year().get(instantLocal);          DateTimeParserBucket bucket = new DateTimeParserBucket(              instantLocal, chrono, iLocale, iPivotYear, defaultYear);          return bucket.parseInto(instant, text, position);         }
!"#$%&'()*+,-./         return value;     }      @Override     public void accept(NodeVisitor visitor) {         if (visitor instanceof NodeVisitor) {             ((NodeVisitor) visitor).visit(this, null);         } else {             visitor.visit(this);         }     }      @Override     public String toString() {         return toStringHelper(this)                .add("name", name)                .add("value", value)                .toString();     }      @Override     public int hashCode() {         return name.hashCode();     }      @Override     public boolean equals(Object obj) {         if (this == obj) {             return true;         }         if (obj == null) {             return false;         }         if (getClass()!= obj.getClass()) {             return false;         }         Node other = (Node) obj;         if (!name.equals(other.name)) {             return false;         }         if (!value.equals(other.value)) {             return false;         }         return true;     } }
private void visitParameterList(NodeTraversal t, Node n, FunctionType fnType) {          if (fnType!= null) {             visitParameterList(t, n, fnType);             ensureTyped(t, n, fnType.getInstanceType());           }           Node parent = n.getParent();           if (parent!= null) {             parent.removeChildFromParent(parent);           }           node = n;           } else {           if (node!= null) {             node.detachFromParent();           }           node = null;           }

private UnivariatePointValuePair best(UnivariatePointValuePair current, UnivariatePointValuePair previous, boolean isMinim) {             if (current == null) {               current = new UnivariatePointValuePair();             }             if (previous == null) {               previous = new UnivariatePointValuePair();             }             if (isMinim) {               current.setMinim(previous);             }             result = current;             return previous;           } else {             if (result == null) {               result = new UnivariatePointValuePair();             }             return result;           }
private static final long serialVersionUID = -7105341425736035847L;           GenericMetadataSupport returnTypeGenericMetadata =                   actualParameterizedType(invocation.getMock()).resolveGenericReturnType(invocation.getMethod());           Class<?> rawType = returnTypeGenericMetadata.rawType();           if (!mockitoCore.isTypeMockable(rawType)) {               return delegate.returnValueFor(rawType);           }             return null;           }
private void interpretAssigns() {                assignedToUnknownValue = true;              }            if (assignedToUnknownValue && hasPropertyAssign) {              changes = markReferencedVar(var) || changes;              maybeUnreferenced.remove(current);              current--;             var = null;           }           return changes;        }          private boolean markReferencedVar(Node var) {             if (var == null) {                 return false;             }             if (var.getParent() == null) {                 return false;             }             if (var.getParent().equals(this)) {                 return false;             }             return true;         }          @Override         public boolean equals(Object obj) {             if (this == obj) {                 return true;             }             if (obj == null) {                 return false;             }             if (getClass()!= obj.getClass()) {                 return false;             }             Node other = (Node) obj;             if (!super.equals(other)) {                 return false;             }             if (!var.equals(other.var)) {                 return false;             }             return true;         }          @Override         public int hashCode() {             int result = super.hashCode();             result = 31 * result + (var!= null? var.hashCode() : 0);             return result;         }          @Override         public String toString() {             if (var!= null) {                 return var.toString();             }             return "";         }     } }
private CanInlineResult canInlineReferenceDirectly(      Node block = fnNode.getLastChild();     boolean hasSideEffects = false) {       if (block.hasChildren()) {       Preconditions.checkState(block.hasOneChild());       Node stmt = block.getFirstChild();       if (stmt.isReturn()) {         hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);       }     }       Node cArg = callNode.getFirstChild().getNext();       if (cArg.isReturn()) {         hasSideEffects = NodeUtil.mayHaveSideEffects(cArg.getFirstChild(), compiler);       }       Node result = Node.var(name).useSourceInfoFrom(sourceInfo).useSourceInfoFrom(sourceInfo).useSourceInfoFrom(sourceInfo).useSourceInfoFrom(sourceInfo).useSourceInfoFrom(sourceInfo).useSourceInfoFrom(sourceInfo).useSourceInfoFrom(sourceInfo).useSourceInfoFrom(sourceInfo).useSourceInfoFrom(sourceInfo).useSourceInfoFrom(sourceInfo).useSourceInfoFrom(sourceInfo).useSourceInfoFrom(sourceInfo).useSourceInfoFrom(sourceInfo).useSourceInfoFrom(sourceInfo).useSourceInfoFrom(sourceInfo).useSourceInfoFrom(sourceInfo).useSourceInfoFrom(sourceInfo).useSourceInfoFrom(sourceInfo).useSourceInfoFrom(sourceInfo).useSourceInfoFrom(sourceInfo).useSourceInfoFrom(sourceInfo).useSourceInfoFrom(sourceInfo).useSourceInfoFrom(sourceInfo).useSourceInfoFrom(sourceInfo).useSourceInfoFrom(sourceInfo).useSourceInfoFrom(sourceInfo).useSourceInfoFrom(sourceInfo).useSourceInfoFrom(sourceInfo).useSourceInfoFrom(sourceInfo).useSourceInfoFrom(sourceInfo).useSourceInfoFrom(sourceInfo).useSourceInfoFrom(sourceInfo).useSourceInfoFrom(sourceInfo).useSourceInfoFrom(sourceInfo).useSourceInfoFrom(sourceInfo).useSourceInfoFrom(sourceInfo).useSourceInfoFrom(sourceInfo).useSourceInfoFrom(sourceInfo).useSourceInfoFrom(sourceInfo).useSourceInfoFrom(sourceInfo).useSourceInfoFrom(sourceInfo).useSourceInfoFrom(sourceInfo).useSourceInfoFrom(sourceInfo).useSourceInfoFrom(sourceInfo).useSourceInfoFrom(source
private void inlineAliases(GlobalNamespace namespace) {             if (name.globalSets == 1 && name.localSets == 0 &&            name.aliasingGets > 0) {             if (name.parent!= null) {             if (name.parent.localSets == 0) {             if (name.parent!= null) {             if (name.parent!= null) {             if (name.parent!= null) {             if (name.parent!= null) {             }             if (name.parent!= null) {             }             if (name.parent!= null) {             }             if (name.parent!= null) {             }             if (name.parent!= null) {             }             if (name.parent!= null) {             }             if (name.parent!= null) {             }             if (name.parent!= null) {             }             if (name.parent!= null) {             }             if (name.parent!= null) {             }             if (name.parent!= null) {             }             if (name.parent!= null) {             }             if (name.parent!= null) {             }             if (name.parent!= null) {             }             if (name.parent!= null) {             }             if (name.parent!= null) {             }             if (name.parent!= null) {             }             if (name.parent!= null) {             }             if (name.parent!= null) {             }             if (name.parent!= null) {             }             if (name.parent!= null) {             }             if (name.parent!= null) {             }             if (name.parent!= null) {             }             if (name.parent!= null) {             }             if (name.parent!= null) {             }             if (name.parent!= null) {             }             if (name.parent!= null) {             }             if (name.parent!= null) {             }             if (name.parent!= null) {             }             if (name.parent!= null) {             }             if (name.parent!= null) {             }             if (name.parent!= null) {             }             if (name.parent!= null) {             }             if (name.parent!= null) {             }             if (name.parent!= null) {             }
private ElitisticListPopulation(final List<Chromosome> chromosomes, final double elitismRate) {          super(populationLimit, elitismRate);         this.chromosomes = chromosomes;         this.elitismRate = elitismRate;       }      /** Assignment removal, Method call addition, Variable replacement by method call, Privileged private ElitisticListPopulation(final List<Chromosome> chromosomes, final double elitismRate) {          super(populationLimit, elitismRate);         this.chromosomes = null;         this.elitismRate = null;       }      /** Assignment removal, Method call addition, Variable replacement by method call, Privileged private ElitisticListPopulation(final List<Chromosome> chromosomes, final double elitismRate) {          super(populationLimit, elitismRate);         this.chromosomes = null;         this.elitismRate = null;       }      /** Assignment removal, Method call addition, Variable replacement by method call, Privileged private ElitisticListPopulation(final List<Chromosome> chromosomes, final double elitismRate) {          super(populationLimit, elitismRate);         this.chromosomes = null;         this.elitismRate = null;       }      /** Assignment removal, Method call addition, Variable replacement by method call, Privileged private ElitisticListPopulation(final List<Chromosome> chromosomes, final double elitismRate) {          super(populationLimit, elitismRate);         this.chromosomes = null;         this.elitismRate = null;       }      /** Assignment removal, Method call addition, Variable replacement by method call, Privileged private ElitisticListPopulation(final List<Chromosome> chromosomes, final double elitismRate) {          super(populationLimit, elitismRate);         this.chromosomes = null;         this.elitismRate = null;       }      /** Assignment removal, Method call addition, Variable replacement by method call, Privileged private ElitisticListPopulation(final List<Chromosome> chromosomes, final double elitismRate) {          super(populationLimit, elitismRate);         this.chromosomes = null;         this.elitismRate = null;
private void setRangeAxes(ValueAxis[] axes) {             this.rangeAxes = axes;             if (result < 0) {               Plot parent = getParent();             if (parent!= null) {               parent.setRangeAxes(this.rangeAxes);             }             }             return result;         }           /**           * <!-- begin-user-doc -->           * <!-- end-user-doc -->           * @generated           */          public ValueAxis[] getRangeAxes() {              return this.rangeAxes;          }           /**           * <!-- begin-user-doc -->           * <!-- end-user-doc -->           * @generated           */          public void setRangeAxes(ValueAxis[] axes) {              this.rangeAxes = axes;          }           /**           * <!-- begin-user-doc -->           * <!-- end-user-doc -->           * @generated           */          @Override          public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {              switch (featureID) {                case PlotPackage.PLOT__RANGE_AXISS:                  return ((InternalEList<?>)getRangeAxes()).basicRemove(otherEnd, msgs);                case PlotPackage.PLOT__PARENT:                  return ((InternalEList<?>)getParent()).basicRemove(otherEnd, msgs);              }              return super.eInverseRemove(otherEnd, featureID, msgs);          }           /**           * <!-- begin-user-doc -->           * <!-- end-user-doc -->           * @generated           */          @Override          public Object eGet(int featureID, boolean resolve, boolean coreType) {              switch (featureID) {                case PlotPackage.PLOT__RANGE_AXISS:                  return getRangeAxes();                case PlotPackage.PLOT__PARENT:                  return getParent();              }              return super.eGet(featureID, resolve, coreType);          }           /**           * <!-- begin-user-doc -->           * <!-- end-user-doc -->           * @generated           */          @Override          public void eSet(int featureID, Object newValue) {              switch (feature
!"#$%&'()*+,-./  public static Number createNumber(final String str) throws NumberFormatException {          final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);          try {                  final Float f = createFloat(str);                  if (!(f.isInfinite() || (f.floatValue() == 0.0F &&!allZeros))) {                      return f;                  } } catch (final NumberFormatException nfe) {          }          try {                  final Double d = createDouble(str);                  if (!(d.isInfinite() || (d.doubleValue() == 0.0D &&!allZeros))) {                      return d;                  } } catch (final NumberFormatException nfe) {          } Conditional (if) branch addition, Privileged!"#$%&'()*+,-./  public static Number createNumber(final String str) throws NumberFormatException {          final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);          try {                  final Float f = createFloat(str);                  if (!(f.isInfinite() || (f.floatValue() == 0.0F &&!allZeros))) {                      return f;                  } } catch (final NumberFormatException nfe) {          } Conditional (if) branch addition, Privileged!"#$%&'()*+,-./  public static Number createNumber(final String str) throws NumberFormatException {          final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);          try {                  final Double d = createDouble(str);                  if (!(d.isInfinite() || (d.doubleValue() == 0.0D &&!allZeros))) {                      return d;                  } } catch (final NumberFormatException nfe) {          } Conditional (if) branch addition, Privileged!"#$%&'()*+,-./  public static Number createNumber(final String str) throws NumberFormatException {          final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);          try {                  final Float f = createFloat(str);                  if (!(f.isInfinite() || (f.floatValue() == 0.0F &&!allZeros))) {                      return f;                  } } catch (final NumberFormatException nfe) {
private void escape(Writer writer, String str) throws IOException {             int len = str.length();             for (int i = 0; i < len; i++) {                 char c = str.charAt(i);               String entityName = this.entityName(c);               if (entityName == null) {                 if (c > 0x7F) { writer.write("&                      writer.write(Integer.toString(c, 10));                      writer.write(';'); Assignment addition, Assignment expression modification, Conditional (if-else) branches addition, Method call addition, Method call replacement, Variable type change,  substitutionHead private void escape(Writer writer, String str) throws IOException {             int len2 = str.length();             for (int i = 0; i < len2; i++) {                 char c = str.charAt(i);               String entityName = this.entityName(c);               if (entityName == null) {                 if (c > 0x7F) { writer.write("&                      writer.write(Integer.toString(c, 10));                      writer.write(';'); Assignment addition, Assignment expression modification, Conditional (if-else) branches addition, Method call addition, Method call replacement, Variable type change,  substitutionHead private void escape(Writer writer, String str) throws IOException {             int len3 = str.length();             for (int i = 0; i < len3; i++) {                 char c = str.charAt(i);               String entityName = this.entityName(c);               if (entityName == null) {                 if (c > 0x7F) { writer.write("&                      writer.write(Integer.toString(c, 10));                      writer.write(';'); Assignment addition, Assignment expression modification, Conditional (if-else) branches addition, Method call addition, Method call replacement, Variable type change,  substitutionHead private void escape(Writer writer, String str) throws IOException {             int len4 = str.length();             for (int i = 0; i < len4; i++) {                 char c = str.charAt(i);               String entityName = this.entityName(c);               if (entityName == null) {                 if (c > 0x7F) { writer.write("&                      writer.write(Integer.toString(c, 10));                      writer.write(';'); Assignment addition
private void findAliases(NodeTraversal t) {          Node n = v.getNode();          int type = n.getType();          Node parent = n.getParent();          if (parent.isVar()) {           if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {            String name = n.getString();            Var aliasVar = scope.getVar(name);            aliases.put(name, aliasVar);             }             Node child = n.getFirstChild();             if (child!= null) {               parent.replaceChild(child, parent);             }             node = parent;           }           else {             if (node!= null) {               scope.removeChild(node);             }             node = parent;           }           return;         }           private void findAliases(NodeTraversal t) {         Node n = v.getNode();         int type = n.getType();         Node parent = n.getParent();         if (parent.isVar()) {           if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {           String name = n.getString();           Var aliasVar = scope.getVar(name);           aliases.put(name, aliasVar);           }           Node child = n.getFirstChild();           if (child!= null) {               scope.replaceChild(child, parent);           }           else {             scope.removeChild(parent);           }           return;         }           private void findAliases(NodeTraversal t) {         Node n = v.getNode();         int type = n.getType();         Node parent = n.getParent();         if (parent.isVar()) {           if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {           String name = n.getString();           Var aliasVar = scope.getVar(name);           aliases.put(name, aliasVar);           }           Node child = n.getFirstChild();           if (child!= null) {               scope.replaceChild(child, parent);           }           else {             scope.removeChild(parent);           }           return;         }           private void findAliases(NodeTraversal t) {         Node n = v.getNode();         int type = n.getType();         Node parent = n.getParent();         if (parent
private BooleanOptionHandler(        @Override         public int parseArguments(Parameters params) throws CmdLineException {          String param = params.getParameter(0);          if (param == null) {            setter.addValue(false); Assignment addition, try-catch addition,  substitutionHead private BooleanOptionHandler(        @Override         public int parseArguments(Parameters params) throws CmdLineException {          String param2 = params.getParameter(1);          if (param2 == null) {            setter.addValue(false); Assignment addition, try-catch addition,  substitutionHead private BooleanOptionHandler(        @Override         public int parseArguments(Parameters params) throws CmdLineException {          String param3 = params.getParameter(2);          if (param3 == null) {            setter.addValue(false); Assignment addition, try-catch addition,  substitutionHead private BooleanOptionHandler(        @Override         public int parseArguments(Parameters params) throws CmdLineException {          String param4 = params.getParameter(3);          if (param4 == null) {            setter.addValue(false); Assignment addition, try-catch addition,  substitutionHead private BooleanOptionHandler(        @Override         public int parseArguments(Parameters params) throws CmdLineException {          String param5 = params.getParameter(4);          if (param5 == null) {            setter.addValue(false); Assignment addition, try-catch addition,  substitutionHead private BooleanOptionHandler(        @Override         public int parseArguments(Parameters params) throws CmdLineException {          String param6 = params.getParameter(5);          if (param6 == null) {            setter.addValue(false); Assignment addition, try-catch addition,  substitutionHead private BooleanOptionHandler(        @Override         public int parseArguments(Parameters params) throws CmdLineException {          String param7 = params.getParameter(6);          if (param7 == null) {            setter.addValue(false); Assignment addition, try-catch addition,  substitutionHead private BooleanOptionHandler(        @Override         public int parseArguments(Parameters params) throws CmdLineException {          String param8 = params.getParameter(7);          if (param8 == null) {            setter.addValue(false); Assignment addition, try-catch addition,  substitutionHead private BooleanOptionHandler(        @Override         public int parseArguments(Parameters
!"#$%&'()*+,-./  public double solve(final UnivariateRealFunction f, final double initial, final double yInitial, final double max, final double yMax, final double initial) { return f.solve(initial, yInitial, max, yMax, initial); }  public double solve(final UnivariateRealFunction f, final double min, final double yMin, final double max, final double yMax, final double initial) { return f.solve(min, yMin, max, yMax, initial); }  public double solve(final UnivariateRealFunction f, final double min, final double yMin, final double max, final double yMax, final double initial) { return f.solve(min, yMin, max, yMax, initial); }  public double solve(final UnivariateRealFunction f, final double min, final double yMin, final double max, final double yMax, final double initial) { return f.solve(min, yMin, max, yMax, initial); }  public double solve(final UnivariateRealFunction f, final double min, final double yMin, final double max, final double yMax, final double initial) { return f.solve(min, yMin, max, yMax, initial); }  public double solve(final UnivariateRealFunction f, final double min, final double yMin, final double max, final double yMax, final double initial) { return f.solve(min, yMin, max, yMax, initial); }  public double solve(final UnivariateRealFunction f, final double min, final double yMin, final double max, final double yMax, final double initial) { return f.solve(min, yMin, max, yMax, initial); }  public double solve(final UnivariateRealFunction f, final double min, final double yMin, final double max, final double yMax, final double initial) { return f.solve(min, yMin, max, yMax, initial); }  public double solve(final UnivariateRealFunction f, final double min, final double yMin, final double max, final double yMax, final double initial) { return f.solve(min, yMin, max, yMax, initial); }  public double solve(final UnivariateRealFunction f, final double min, final double
private Node tryMinimizeIf(Node n) {              if (mayEffectMutableState(lhs)) {                n.removeChild(cond);                Node assignName = thenOp.removeFirstChild();              }              if (mayEffectMutableState(lhs)) {                n.removeChild(thenOp);              }              if (mayEffectMutableState(lhs)) {                n.removeChild(lhs);              }              if (mayEffectMutableState(lhs)) {                n.removeChild(lhs);              }              if (mayEffectMutableState(lhs)) {                n.removeChild(lhs);              }              if (mayEffectMutableState(lhs)) {                n.removeChild(lhs);              }              if (mayEffectMutableState(lhs)) {                n.removeChild(lhs);              }              if (mayEffectMutableState(lhs)) {                n.removeChild(lhs);              }              if (mayEffectMutableState(lhs)) {                n.removeChild(lhs);              }              if (mayEffectMutableState(lhs)) {                n.removeChild(lhs);              }              if (mayEffectMutableState(lhs)) {                n.removeChild(lhs);              }              if (mayEffectMutableState(lhs)) {                n.removeChild(lhs);              }              if (mayEffectMutableState(lhs)) {                n.removeChild(lhs);              }              if (mayEffectMutableState(lhs)) {                n.removeChild(lhs);              }              if (mayEffectMutableState(lhs)) {                n.removeChild(lhs);              }              if (mayEffectMutableState(lhs)) {                n.removeChild(lhs);              }              if (mayEffectMutableState(lhs)) {                n.removeChild(lhs);              }              if (mayEffectMutableState(lhs)) {                n.removeChild(lhs);              }              if (mayEffectMutableState(lhs)) {                n.removeChild(lhs);              }              if (mayEffectMutableState(lhs)) {                n.removeChild(lhs);              }              if (mayEffectMutableState(lhs)) {                n.removeChild(lhs);              }              if (mayEffect
! "#$%&'()*+,-./            public static <T> T isA(Class<T> clazz) {          return reportMatcher(new InstanceOf(clazz)).<T>returnNull();       }       /** Method call addition, Method call replacement, Return expression modification, ResolverRule! "#$%&'()*+,-./            public static <T> T isA(Class<T> clazz) {          return reportMatcher(new InstanceOf(clazz)).<T>returnNull();       }       /** Method call addition, Method call replacement, Return expression modification, ResolverRule! "#$%&'()*+,-./            public static <T> T isA(Class<T> clazz) {          return reportMatcher(new InstanceOf(clazz)).<T>returnNull();       }       /** Method call addition, Method call replacement, Return expression modification, ResolverRule! "#$%&'()*+,-./            public static <T> T isA(Class<T> clazz) {          return reportMatcher(new InstanceOf(clazz)).<T>returnNull();       }       /** Method call addition, Method call replacement, Return expression modification, ResolverRule! "#$%&'()*+,-./            public static <T> T isA(Class<T> clazz) {          return reportMatcher(new InstanceOf(clazz)).<T>returnNull();       }       /** Method call addition, Method call replacement, Return expression modification, ResolverRule! "#$%&'()*+,-./            public static <T> T isA(Class<T> clazz) {          return reportMatcher(new InstanceOf(clazz)).<T>returnNull();       }       /** Method call addition, Method call replacement, Return expression modification, ResolverRule! "#$%&'()*+,-./            public static <T> T isA(Class<T> clazz) {          return reportMatcher(new InstanceOf(clazz)).<T>returnNull();       }       /** Method call addition, Method call replacement, Return expression modification, ResolverRule! "#$%&'()*+,-./            public static <T> T isA(Class<T> clazz) {          return report
public void delete(int start, int end) {       *         subclasses may differ.        */       public Object clone() throws CloneNotSupportedException {          Object clone = createCopy(0, getItemCount() - 1);           return clone;       } Assignment assignment, Assignment expression modification, Method call addition, Method call removal, Variable type change,  substitutionHead public void delete(int start, int end) {       *         subclasses may differ.        */       public Object clone() throws CloneNotSupportedException {          Object clone = createCopy(0, getItemCount() - 1);           return clone;       } Assignment assignment, Assignment expression modification, Method call addition, Method call removal, Variable type change,  substitutionHead newParent public void delete(int start, int end) {       *         subclasses may differ.        */       public Object clone() throws CloneNotSupportedException {          Object clone = createCopy(0, getItemCount() - 1);           return clone;       } Assignment assignment, Assignment expression modification, Method call addition, Method call removal, Variable type change,  substitutionHead newParent newParent) {       *         subclasses may differ.        */       public Object clone() throws CloneNotSupportedException {          Object clone = createCopy(0, getItemCount() - 1);           return clone;       }
! "#$%&'()*+,-./             public Fraction divide(final int i) {             return multiply(100).divide(i);           }             /** Method call removal, Return expression modification, ResolverRule! "#$%&'()*+,-./             public Fraction divide(final int i) {             return multiply(100).divide(i);           }             /** Method call removal, Return expression modification, ResolverRule! "#$%&'()*+,-./             public Fraction divide(final int i) {             return multiply(100).divide(i);           }             /** Method call removal, Return expression modification, ResolverRule! "#$%&'()*+,-./             public Fraction divide(final int i) {             return multiply(100).divide(i);           }             /** Method call removal, Return expression modification, ResolverRule! "#$%&'()*+,-./             public Fraction divide(final int i) {             return multiply(100).divide(i);           }             /** Method call removal, Return expression modification, ResolverRule! "#$%&'()*+,-./             public Fraction divide(final int i) {             return multiply(100).divide(i);           }             /** Method call removal, Return expression modification, ResolverRule! "#$%&'()*+,-./             public Fraction divide(final int i) {             return multiply(100).divide(i);           }             /** Method call removal, Return expression modification, ResolverRule! "#$%&'()*+,-./             public Fraction divide(final int i) {             return multiply(100).divide(i);           }             /** Method call removal, Return expression modification, ResolverRule! "#$%&'()*+,-./             public Fraction divide(final int i) {             return multiply(100).divide(i);           }             /** Method call removal, Return expression modification, ResolverRule! "#$%&'()*+,-./             public Fraction divide(final int i) {             return multiply(100).divide(i);           }             /** Method call removal, Return expression modification, ResolverRule
!"#$%&'()*+,-./  public static int safeMultiply(int val1, long val2) {          switch (val2) {              case -1:                  return -val1;              case 0:                  return 0L; Conditional (if) branch addition, throw addition, Object instantiation addition,  privKey!"#$%&'()*+,-./  public static long safeMultiply(long val1, int val2) {          switch (val2) {              case -1:                  return -val1;              case 0:                  return 0L; Conditional (if) branch addition, throw addition, Object instantiation addition,  privKey!"#$%&'()*+,-./  public static int safeMultiply(int val1, long val2) {          switch (val2) {              case -1:                  return -val1;              case 0:                  return 0L; Conditional (if) branch addition, throw addition, Object instantiation addition,  privKey!"#$%&'()*+,-./  public static int safeMultiply(int val1, long val2) {          switch (val2) {              case -1:                  return -val1;              case 0:                  return 0L; Conditional (if) branch addition, throw addition, Object instantiation addition,  privKey!"#$%&'()*+,-./  public static int safeMultiply(int val1, long val2) {          switch (val2) {              case -1:                  return -val1;              case 0:                  return 0L; Conditional (if) branch addition, throw addition, Object instantiation addition,  privKey!"#$%&'()*+,-./  public static int safeMultiply(int val1, long val2) {          switch (val2) {              case -1:                  return -val1;              case 0:                  return 0L; Conditional (if) branch addition, throw addition, Object instantiation addition,  privKey!"#$%&'()*+,-./  public static int safeMultiply(int val1, long val2) {          switch (val2) {              case -1:                  return -val1;              case 0:                  return 0L; Conditional (if) branch addition, throw
private static <T> T[] copyArrayGrow1(T[] array, Class<T> type) {             if (array == null) {               array = new T[0];             }             System.arraycopy(array, 0, newArray, 0, array.length);             return newArray;           } else {             return null;           }           } else {             return null;           }           } else {             return null;           }           } else {             return null;           }           } else {             return null;           }           } else {             return null;           }           } else {             return null;           }           } else {             return null;           }           } else {             return null;           }           } else {             return null;           }           } else {             return null;           }           }
}             copy.data.add(this.data.get(index));             return copy;           } else {             return null;           }           } else {             return null;           }           } else {             return null;           }           } else {             return null;           }           } else {             return null;           }           } else {             return null;           }           } else {             return null;           }           } else {             return null;           }           } else {             return null;           }           } else {             return null;           }           } else {             return null;           }           } else {             return null;           }           } else {             return null;           }           } else {           return null;           }           } else {           return null;           }           } else {           return null;           }           } else {           return null;           }           } else {           return null;           }           } else {           return null;           }           } else {           return null;           }           } else {           return null;           }           }
private Node tryFoldComparison(Node n, Node left, Node right) {             int lhType = left.getType();             int rhType = right.getType();             switch (lhType) {             case Token.VOID:               if (NodeUtil.isLiteralValue(left.getFirstChild(), false)) {                 NodeUtil.replaceChild(n, left, right);                 return n;             }             if (NodeUtil.isLiteralValue(right.getFirstChild(), false)) {                 NodeUtil.replaceChild(n, right, left);                 return n;             }             return null;           } else if (rhType!= Token.VOID) {             if (NodeUtil.isLiteralValue(left.getFirstChild(), false)) {                 NodeUtil.replaceChild(n, left, right);                 return n;             }             if (NodeUtil.isLiteralValue(right.getFirstChild(), false)) {                 NodeUtil.replaceChild(n, right, left);                 return n;             }             return right;           } else {             return left;           }
private void unrollBinaryOperator(      Node current = firstNonOperator;      do { current = current.getParent();       cc.listSeparator();        addExpr(current.getFirstChild().getNext(), rightPrecedence, rhsContext);      } while (current!= n);    }    private void unrollBinaryOperator(      Node current = firstNonOperator;      do { current = current.getParent();       cc.listSeparator();        addExpr(current.getFirstChild().getNext(), rightPrecedence, rhsContext);      } while (current!= n);    }    private void unrollBinaryOperator(      Node current = firstNonOperator;      do { current = current.getParent();       cc.listSeparator();        addExpr(current.getFirstChild().getNext(), rightPrecedence, rhsContext);      } while (current!= n);    }    private void unrollBinaryOperator(      Node current = firstNonOperator;      do { current = current.getParent();       cc.listSeparator();        addExpr(current.getFirstChild().getNext(), rightPrecedence, rhsContext);      } while (current!= n);    }    private void unrollBinaryOperator(      Node current = firstNonOperator;      do { current = current.getParent();       cc.listSeparator();        addExpr(current.getFirstChild().getNext(), rightPrecedence, rhsContext);      } while (current!= n);    }    private void unrollBinaryOperator(      Node current = firstNonOperator;      do { current = current.getParent();       cc.listSeparator();        addExpr(current.getFirstChild().getNext(), rightPrecedence, rhsContext);      } while (current!= n);    }    private void unrollBinaryOperator(      Node current = firstNonOperator;      do { current = current.getParent();       cc.listSeparator();        addExpr(current.getFirstChild().getNext(), rightPrecedence, rhsContext);      } while (current!= n);    }    private void unrollBinaryOperator(      Node current = firstNonOperator;      do { current = current.getParent();       cc.listSeparator();        addExpr(current.getFirstChild().getNext(), rightPrecedence, rhsContext);      } while (current!= n);    }    private void unrollBinaryOperator(      Node current = firstNonOperator
private long add(long instant, long value) {             long localInstant = iZone.convertUTCToLocal(instant);             localInstant = iField.add(localInstant, value);             return iZone.convertLocalToUTC(localInstant);              }          private long add(long instant, long value) {             long localInstant = iZone.convertUTCToLocal(instant);             return iField.add(localInstant, value);             }          private long add(long instant, long value) {             long localInstant = iZone.convertUTCToLocal(instant);             return iField.add(localInstant, value);             }          private long add(long instant, long value) {             long localInstant = iZone.convertUTCToLocal(instant);             return iField.add(localInstant, value);             }          private long add(long instant, long value) {             long localInstant = iZone.convertUTCToLocal(instant);             return iField.add(localInstant, value);             }          private long add(long instant, long value) {             long localInstant = iZone.convertUTCToLocal(instant);             return iField.add(localInstant, value);             }          private long add(long instant, long value) {             long localInstant = iZone.convertUTCToLocal(instant);             return iField.add(localInstant, value);             }          private long add(long instant, long value) {             long localInstant = iZone.convertUTCToLocal(instant);             return iField.add(localInstant, value);             }          private long add(long instant, long value) {             long localInstant = iZone.convertUTCToLocal(instant);             return iField.add(localInstant, value);             }          private long add(long instant, long value) {             long localInstant = iZone.convertUTCToLocal(instant);             return iField.add(localInstant, value);             }          private long add(long instant, long value) {             long localInstant = iZone.convertUTCToLocal(instant);             return iField.add(localInstant, value);             }          private long add(long instant, long value) {             long localInstant = iZone.convertUTCToLocal(instant);             return iField.add(localInstant, value);             }          private long add
private long add(long instant, int value) {             long localInstant = iZone.convertUTCToLocal(instant);             localInstant = iField.add(localInstant, value);             return iZone.convertLocalToUTC(instant, false);              }          private long add(long localInstant, int value) {             return iZone.convertLocalToUTC(localInstant, value);             }          private long add(long localInstant, int value) {             return iField.add(localInstant, value);             }          private long add(long localInstant, int value) {             return iField.add(localInstant, value);             }          private long add(long localInstant, int value) {             return iField.add(localInstant, value);             }          private long add(long localInstant, int value) {             return iField.add(localInstant, value);             }          private long add(long localInstant, int value) {             return iField.add(localInstant, value);             }          private long add(long localInstant, int value) {             return iField.add(localInstant, value);             }          private long add(long localInstant, int value) {             return iField.add(localInstant, value);             }          private long add(long localInstant, int value) {             return iField.add(localInstant, value);             }          private long add(long localInstant, int value) {             return iField.add(localInstant, value);             }          private long add(long localInstant, int value) {             return iField.add(localInstant, value);             }          private long add(long localInstant, int value) {             return iField.add(localInstant, value);             }          private long add(long localInstant, int value) {             return iField.add(localInstant, value);             }          private long add(long localInstant, int value) {             return iField.add(localInstant, value);             }          private long add(long localInstant, int value) {             return iField.add(localInstant, value);             }          private long add(long localInstant, int value) {             return iField.add(localInstant, value);             }          private long add(long localInstant, int value) {             return iField.add
private static Number createNumber(String str) throws NumberFormatException {             if (decPos > -1) {                 if (expPos > -1) {                     if (expPos < decPos) {                         throw new NumberFormatException(str + " is not a valid number.");                   }                   dec = str.substring(decPos + 1, expPos);             }             return new Number(dec);             } else {                 return null;             }           } else {                 return null;             }           } else {                 return null;             }           } else {                 return null;             }           } else {                 return null;             }           } else {                 return null;             }           } else {                 return null;             }           } else {                 return null;             }           } else {                 return null;             }           } else {                 return null;             }           } else {                 return null;             }           } else {                 return null;             }           } else {           return null;             }           } else {           return null;             }           } else {           return null;             }           } else {           return null;             }           } else {           return null;             }           } else {           return null;             }           } else {           return null;             }           } else {           return null;             }           } else {           return null;             }           } else {           return null;             }           } else {           return null;             }           } else {           return null;             }           }
!="#$%&'()*+,-./             public DefaultIntervalCategoryDataset(Comparable[] seriesKeys,             int[] categoryKeys)             {             this.seriesKeys = seriesKeys;             this.categoryKeys = categoryKeys;             }             public int[] getSeriesKeys()             {             return this.seriesKeys;             }             public int[] getCategoryKeys()             {             return this.categoryKeys;             }             public void setSeriesKeys(int[] seriesKeys)             {             this.seriesKeys = seriesKeys;             }             public void setCategoryKeys(int[] categoryKeys)             {             this.categoryKeys = categoryKeys;             }             public void removeSeriesKey(int seriesKey)             {             this.seriesKeys.removeElement(seriesKey);             }             public void removeCategoryKey(int categoryKey)             {             this.categoryKeys.removeElement(categoryKey);             }             public void addSeriesKey(int seriesKey)             {             this.seriesKeys.addElement(seriesKey);             }             public void removeSeriesKey(int seriesKey)             {             this.seriesKeys.removeElement(seriesKey);             }             public void addCategoryKey(int categoryKey)             {             this.categoryKeys.addElement(categoryKey);             }             public void removeCategoryKey(int categoryKey)             {             this.categoryKeys.removeElement(categoryKey);             }             public void addCategoryKey(int categoryKey, int oldCategoryKey)             {             this.categoryKeys.addElement(oldCategoryKey);             }             public void removeCategoryKey(int oldCategoryKey, int newCategoryKey)             {             this.categoryKeys.removeElement(newCategoryKey);             }             public void addCategoryKey(int newCategoryKey, int oldSeriesKey)             {             this.seriesKeys.addElement(oldSeriesKey);             }             public void removeSeriesKey(int oldSeriesKey, int newSeriesKey)             {             this.seriesKeys.removeElement(newSeriesKey);             }             public void addCategoryKey(int newCategoryKey, int oldCategoryKey)             {             this.categoryKeys.addElement(oldCategoryKey);             }             public void removeCategoryKey(int oldCategoryKey, int newCategoryKey)             {             this.categoryKeys.removeElement(newCategoryKey);             }             public
private boolean isInlinableObject(List<Reference> refs) {             if (refs == null) {               return false;             }             if (refs.size()!= 1) {               return false;             }             if (refs.get(0)!= null) {               return false;             }             return true;           } else {             if (refs == null) {               return false;             }             if (refs.size() > 1) {               return false;             }             if (refs.get(0)!= null) {               return false;             }             return true;           } else {             if (refs == null) {               return false;             }             return true;           }
private static boolean isAssignable(Type type, ParameterizedType toParameterized, Map<TypeVariable<?>, Type> typeVarAssigns) {             Type toTypeArg = typeVarAssigns.get(toTypeArg);             Type fromTypeArg = fromTypeVarAssigns.get(fromTypeArg);             if (toTypeArg!= null && fromTypeArg!= null) {                 if (!type.equals(fromTypeArg)) {                     return false;                 }                 }                 return true;             }
private static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) {             if (hoursOffset < -23 || hoursOffset > 23) {                 throw new IllegalArgumentException("Hours out of range: " + hoursOffset);             }             if (minutesOffset < 0 || minutesOffset > 59) {                 throw new IllegalArgumentException("Minutes out of range: " + minutesOffset);             }             int offset = 0;             try {               int hoursInMinutes = hoursOffset * 60;               if (hoursInMinutes < 0) {                 minutesOffset = hoursInMinutes - minutesOffset;               } else {                 minutesOffset = hoursInMinutes + minutesOffset;               }             return DateTimeZone.forOffsetHoursMinutes(hoursOffset, minutesOffset);           } catch (NumberFormatException e) {             return DateTimeZone.forOffsetHoursMinutes(hoursOffset, minutesOffset);           } catch (IllegalArgumentException e) {             return DateTimeZone.forOffsetHoursMinutes(hoursOffset, minutesOffset);           } catch (IllegalAccessException e) {             return DateTimeZone.forOffsetHoursMinutes(hoursOffset, minutesOffset);           } catch (InvocationTargetException e) {             return DateTimeZone.forOffsetHoursMinutes(hoursOffset, minutesOffset);           } finally {             if (offset!= 0) {               try {                 value.setOffset(offset);               } catch (IllegalAccessException e1) {             }             if (e1!= null) {             throw e1;           }             return value;           }
private void computeGeometricalProperties() {          if (v.length == 0) {              final BSPTree<Euclidean2D> tree = getTree(true);             if ((Boolean) tree.getAttribute()) {                  setSize(Double.NEGATIVE_INFINITY);                  setBarycenter(Vector2D.NaN);             }             else {                  setSize(Double.POSITIVE_INFINITY);                  setBarycenter(Vector2D.NaN);             }           }           else {           if (v.length!= 0) {               final BSPTree<Euclidean2D> tree = getTree(false);               if ((Boolean) tree.getAttribute()) {               setSize(Double.NEGATIVE_INFINITY);               setBarycenter(Vector2D.NaN);           }           else {           if (v.length!= 0) {               final BSPTree<Euclidean2D> tree = getTree(true);               if ((Boolean) tree.getAttribute()) {               setSize(Double.POSITIVE_INFINITY);               setBarycenter(Vector2D.NaN);           }           else {           if (v.length!= 0) {               final BSPTree<Euclidean2D> tree = getTree(false);               if ((Boolean) tree.getAttribute()) {               setSize(Double.NEGATIVE_INFINITY);               setBarycenter(Vector2D.NaN);           }           else {           if (v.length!= 0) {               final BSPTree<Euclidean2D> tree = getTree(true);               if ((Boolean) tree.getAttribute()) {               setSize(Double.POSITIVE_INFINITY);               setBarycenter(Vector2D.NaN);           }           else {           if (v.length!= 0) {               final BSPTree<Euclidean2D> tree = getTree(false);               if ((Boolean) tree.getAttribute()) {               setSize(Double.NEGATIVE_INFINITY);               setBarycenter(Vector2D.NaN);           }           else {           if (v.length!= 0) {               final BSPTree<Euclidean2D> tree = getTree(true);               if ((Boolean) tree.getAttribute()) {               setSize(Double.POSITIVE_INFINITY);               setBarycenter(Vector2D.NaN);           }           else {           if (v.length!= 0) {               final BSPTree<E
private static synchronized String getConvertedId(String id) {              map = new HashMap<String, String>();              map.put("GMT", "UTC");              map.put("MIT", "Pacific/Apia");              map.put("HST", "Pacific/Honolulu");              map.put("AST", "America/Anchorage");             return id;             }
private static boolean isJSIdentifier(String s) {        int length = s.length();        if (length == 0 ||           !Character.isJavaIdentifierStart(s.charAt(0))) {          return false;        }        for (int i = 1; i < length; i++) {         if (             !Character.isJavaIdentifierPart(s.charAt(i))) {          return false;          } Conditional expression expansion, Method call addition,  proxieried private static boolean isJSIdentifier(String s) {        int length = s.length();        if (length == 0 ||           !Character.isJavaIdentifierStart(s.charAt(0))) {          return false;        }        for (int i = 1; i < length; i++) {         if (             !Character.isJavaIdentifierPart(s.charAt(i))) {          return false;          } Conditional expression expansion, Method call addition,  proxieried private static boolean isJSIdentifier(String s) {        int length = s.length();        if (length == 0 ||           !Character.isJavaIdentifierStart(s.charAt(0))) {          return false;        }        for (int i = 1; i < length; i++) {         if (             !Character.isJavaIdentifierPart(s.charAt(i))) {          return false;          } Conditional expression expansion, Method call addition,  proxieried private static boolean isJSIdentifier(String s) {        int length = s.length();        if (length == 0 ||           !Character.isJavaIdentifierStart(s.charAt(0))) {          return false;        }        for (int i = 1; i < length; i++) {         if (             !Character.isJavaIdentifierPart(s.charAt(i))) {          return false;          } Conditional expression expansion, Method call addition,  proxieried private static boolean isJSIdentifier(String s) {        int length = s.length();        if (length == 0 ||           !Character.isJavaIdentifierStart(s.charAt(0))) {          return false;        }        for (int i = 1; i < length; i++) {         if (             !Character.isJavaIdentifierPart(s.charAt(i))) {          return false;          } Conditional expression expansion, Method call addition,  proxieried private static boolean isJS
private PointVectorValuePair doOptimize() {             if (checker!= null) {                         if (checker.converged(iter, previous, current)) {                              setCost(currentCost);                              return current;                          }             }             return null;           }
private boolean isInlinableObject(List<Reference> refs) {            boolean ret = false;            for (Reference ref : refs) {                Node name = ref.getNode();                Node parent = ref.getParent();                if (name!= null && parent!= null) {                    if (name.getParent() == parent) {                        ret = true;                        break;                    }                }                if (parent!= null) {                    if (parent.getParent() == this) {                        ret = true;                        break;                    }                }                if (name!= null) {                    if (name.getParent() == null) {                        ret = true;                        break;                    }                if (name!= null) {                    if (name.getParent() == null) {                        ret = true;                        break;                    }                }                if (name!= null) {                    if (name.getParent() == null) {                        ret = true;                        break;                    }                if (name!= null) {                    if (name.getParent() == null) {                        ret = true;                        break;                    }                if (name!= null) {                    if (name.getParent() == null) {                        ret = true;                        break;                    }                if (name!= null) {                    if (name.getParent() == null) {                        ret = true;                        break;                    }                if (name!= null) {                    if (name.getParent() == null) {                        ret = true;                        break;                    }                if (name!= null) {                    if (name.getParent() == null) {                        ret = true;                        break;                    }                if (name!= null) {                    if (name.getParent() == null) {                        ret = true;                        break;                    }                if (name!= null) {                    if (name.getParent() == null) {                        ret = true;                        break;                    }                if (name!= null) {                    if (name.getParent() == null) {                        ret = true;                        break;                    }                if (name!= null) {                    if (name.getParent() == null) {                        ret = true;                        break;                    }                if (name!= null) {                    if (name.getParent() == null) {                        ret = true;                        break;                    }                if (
void tryMinimizeExits(Node n, int exitType, String labelName) {             if (NodeUtil.hasFinally(n))             {                 Node finallyBlock = n.getLastChild();                 tryMinimizeExits(finallyBlock, exitType, labelName);             }             NodeUtil.removeChildFromParent(n, parent);           } else {             if (parent!= null)             {               parent.removeChildFromParent(this);             }           }
!"#$%&'()*+,-./ public void setMinuteOfHour(final int minuteOfHour) {       * @throws IllegalArgumentException if the value is invalid       */       public void addMinutes(final int minutes) {              setMillis(getChronology().minutes().add(getMillis(), minutes));      } Conditional (if) branch addition, ProvisionedProduct!"#$%&'()*+,-./ public void setMinuteOfHour(final int minuteOfHour) {       * @throws IllegalArgumentException if the value is invalid       */       public void addMinutes(final int minutes) {              setMillis(getChronology().minutes().add(getMillis(), minutes));      } Conditional (if) branch addition, ProvisionedProduct!"#$%&'()*+,-./ public void setMinuteOfHour(final int minuteOfHour) {       * @throws IllegalArgumentException if the value is invalid       */       public void addMinutes(final int minutes) {              setMillis(getChronology().minutes().add(getMillis(), minutes));      } Conditional (if) branch addition, ProvisionedProduct!"#$%&'()*+,-./ public void setMinuteOfHour(final int minuteOfHour) {       * @throws IllegalArgumentException if the value is invalid       */       public void addMinutes(final int minutes) {              setMillis(getChronology().minutes().add(getMillis(), minutes));      } Conditional (if) branch addition, ProvisionedProduct!"#$%&'()*+,-./ public void setMinuteOfHour(final int minuteOfHour) {       * @throws IllegalArgumentException if the value is invalid       */       public void addMinutes(final int minutes) {              setMillis(getChronology().minutes().add(getMillis(), minutes));      } Conditional (if) branch addition, ProvisionedProduct!"#$%&'()*+,-./ public void setMinuteOfHour(final int minuteOfHour) {       * @throws IllegalArgumentException if the value is invalid       */       public void addMinutes(final int minutes) {              setMillis(getChronology().minutes().add(getMillis(), minutes));      } Conditional (if) branch addition, ProvisionedProduct!"#$%&'()*+,-./ public void setMinuteOfHour(final int minuteOfHour) {
private boolean injectMockCandidatesOnFields(Set<Object> mocks, Object instance, boolean injectionOccurred, List<Field> orderedInstanceFields) {          for (Iterator<Field> it = orderedInstanceFields.iterator(); it.hasNext(); ) {              Field field = it.next();             Object injected = mockCandidateFilter.filterCandidate(mocks, field, instance).thenInject();              if (injected!= null) {                  injectionOccurred |= true;                  mocks.remove(injected); Conditional (if) branch addition, Conditional (if-else) branches addition, Loop addition, Method call addition, Method call parameter addition, Method call replacement, Method definition addition, Parameter addition in method definition, Object instantiation addition, Return statement addition, Return expression modification, ProvisionedProduct private boolean injectMockCandidates(Class<?> awaitingInjectionClazz, Set<Object      private boolean injectMockCandidatesOnFields(Set<Object> mocks, Object instance, boolean injectionOccurred, List<Field> orderedInstanceFields) {          for (Iterator<Field> it = orderedInstanceFields.iterator(); it.hasNext(); ) {              Field field = it.next();             Object injected = mockCandidateFilter.filterCandidate(mocks, field, instance).thenInject();              if (injected!= null) {                  injectionOccurred |= true;                  mocks.remove(injected); Conditional (if) branch addition, Conditional (if-else) branches addition, Loop addition, Method call addition, Method call parameter addition, Method call replacement, Method definition addition, Parameter addition in method definition, Object instantiation addition, Return statement addition, Return expression modification, ProvisionedProduct private boolean injectMockCandidates(Class<?> awaitingInjectionClazz, Set<Object      private boolean injectMockCandidatesOnFields(Set<Object> mocks, Object instance, boolean injectionOccurred, List<Field> orderedInstanceFields) {          for (Iterator<Field> it = orderedInstanceFields.iterator(); it.hasNext(); ) {              Field field = it.next();             Object injected = mockCandidateFilter.filterCandidate(mocks, field, instance).thenInject();              if (injected!= null) {                  injectionOccurred |= true;                  mocks.remove(injected); Conditional (if) branch addition, Conditional (if-else) branches addition, Loop addition, Method call addition, Method call parameter addition, Method call replacement, Method definition addition, Parameter addition in method definition, Object instantiation addition, Return statement addition,
private void initiateMockName(Class classToMock) {             if (extraInterfaces!= null) {               java.util.Arrays.asList(extraInterfaces).remove(java.io.Serializable.class);             }             if (classToMock!= null) {               java.lang.Class.forName(classToMock.getName(), true, this);             }           } else {             if (extraInterfaces!= null) {               java.util.Arrays.asList(extraInterfaces).remove(java.io.Serializable.class);             }             if (classToMock!= null) {               java.lang.Class.forName(classToMock.getName(), false, this);             }           } else {             if (extraInterfaces!= null) {               java.util.Arrays.asList(extraInterfaces).remove(java.io.Serializable.class);             }             if (classToMock!= null) {               java.lang.Class.forName(classToMock.getName(), true, this);             }           } else {             if (extraInterfaces!= null) {               java.util.Arrays.asList(extraInterfaces).remove(java.io.Serializable.class);             }             if (classToMock!= null) {               java.lang.Class.forName(classToMock.getName(), false, this);             }           } else {             if (extraInterfaces!= null) {               java.util.Arrays.asList(extraInterfaces).remove(java.io.Serializable.class);             }           } else {             if (extraInterfaces!= null) {               java.util.Arrays.asList(extraInterfaces).remove(java.lang.Object.class);             }           }
private UnivariatePointValuePair doOptimize() {                  if (checker!= null) {                      if (checker.converged(iter, previous, current)) {                         return current;                      }                  } Method call addition, Return expression modification,
private long getUnitMillis() {             if (durationField.isSupported())             return durationField.getUnitMillis();             return 0;           }             return 0;           }
!"#$%&'()*+,-./  public Vector2D intersection(final SubLine subLine, final boolean includeEndPoin          Vector2D v2D = line1.intersection(line2), final Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D)));             return new Vector2D(loc1.getX(), loc1.getY());           } else {             return line1;           }           } else {             return line2;           }           } else {             return line1;           }           } else {             return line2;           }           } else {             return line1;           }           } else {             return line1;           }           } else {             return line1;           }           } else {             return line1;           }           } else {             return line1;           }           } else {             return line1;           }           } else {             return line1;           }           } else {             return line1;           }           } else {             return line1;           }           } else {             return line1;           }           } else {             return line1;           }           } else {             return line1;           }           } else {             return line1;           }           }
private boolean canInline(          ) {             return false;           }             return true;           }             return false;           }             return true;           }             return false;           }             return true;           }             return false;           }             return true;           }             return false;           }             return true;           }             return false;           }             return true;           }             return true;           }             return true;           }             return true;           }             return true;           }             return true;           }             return true;           }             return true;           }             return true;           }             return true;           }             return true;           }             return true;           }             return true;           }             return true;           }             return true;           }             return true;           }             return true;           }             return true;           }             return true;           }             return true;           }             return true;           }             return true;           }             return true;           }             return true;           }             return true;           }             return true;           }             return true;           }             return true;           }             return true;           }             return true;           }             return true;           }             return true;           }             return true;           }             return true;           }             return true;           }             return true;           }             return true;           }             return true;           }             return true;           }             return true;           }             return true;           }             return true;           }             return true;           }             return true;           }             return true;           }             return true;           }             return true;           }             return true;           }             return true;           }             return true;           }             return true;           }             return true;           }             return true;           }             return true;           }             return true;           }             return true;           }             return true;           }             return true;           }             return true;           }             return true;           }             return true;           }             return true;           }             return true;           }             return true;           }             return true;           }             return true;           }             return true;           }             return true;           }             return true;           }             return true;           }             return true;           }             return true;           }             return true;
private boolean setPrototype(PrototypeObjectType prototype) {      return false;      }     boolean replacedPrototype = prototype!= null;      this.prototype = prototype;      this.prototypeSlot = new SimpleSlot("prototype", prototype, true);      this.prototype.setOwnerFunction(this);      if (isConstructor() || isInterface()) {        FunctionType superClass = getSuperClassConstructor();        if (superClass!= null) {          if (replacedPrototype) {            this.prototypeSlot.setParent(superClass);            return true;          }          else {            return false;          }        }        else {          if (replacedPrototype) {            this.prototypeSlot.setParent(this);            return true;          }        }        else {          if (replacedPrototype) {            this.prototypeSlot.setParent(this);            return true;          }        }        else {          if (replacedPrototype) {            this.prototypeSlot.setParent(this);            return true;          }        }        else {          if (replacedPrototype) {            this.prototypeSlot.setParent(this);            return true;          }        }        else {          if (replacedPrototype) {            this.prototypeSlot.setParent(this);            return true;          }        }        else {          if (replacedPrototype) {            this.prototypeSlot.setParent(this);            return true;          }        }        else {          if (replacedPrototype) {            this.prototypeSlot.setParent(this);            return true;          }        }        else {          if (replacedPrototype) {            this.prototypeSlot.setParent(this);            return true;          }        }        else {          if (replacedPrototype) {            this.prototypeSlot.setParent(this);            return true;          }        }        else {          if (replacedPrototype) {            this.prototypeSlot.setParent(this);            return true;          }        }        else {          if (replacedPrototype) {            this.prototypeSlot.setParent(this);            return true;          }        }        else {          if (replacedPrototype) {            this.prototypeSlot.setParent(this);            return true;          }        }        else {          if (replacedPrototype) {            this.prototypeSlot.setParent(this);            return true;
private static Node tryCatch(Node tryBody, Node catchNode) {      Preconditions.checkState(tryBody.isBlock());      Preconditions.checkState(catchNode.isCatch());     Node catchBody = block(catchNode).copyInformationFrom(catchNode);      return new Node(Token.TRY, tryBody, catchBody);    } Assignment expression modification, Method call parameter value modification, Method call replacement, Method definition addition, Object instantiation addition, Return statement addition, CUMENTS private static Node tryCatch(Node tryBody, Node catchNode) {      Preconditions.checkState(tryBody.isBlock());      Preconditions.checkState(catchNode.isCatch());     Node catchBody = block(catchNode).copyInformationFrom(catchNode);      return new Node(Token.TRY, tryBody, catchBody);    } Assignment expression modification, Method call parameter value modification, Method call replacement, Method definition addition, Object instantiation addition, Return statement addition, CUMENTS private static Node tryCatch(Node tryBody, Node catchNode) {      Preconditions.checkState(tryBody.isBlock());      Preconditions.checkState(catchNode.isCatch());     Node catchBody = block(catchNode).copyInformationFrom(catchNode);      return new Node(Token.TRY, tryBody, catchBody);    } Assignment expression modification, Method call parameter value modification, Method call replacement, Method definition addition, Object instantiation addition, Return statement addition, CUMENTS private static Node tryCatch(Node tryBody, Node catchNode) {      Preconditions.checkState(tryBody.isBlock());      Preconditions.checkState(catchNode.isCatch());     Node catchBody = block(catchNode).copyInformationFrom(catchNode);      return new Node(Token.TRY, tryBody, catchBody);    } Assignment expression modification, Method call parameter value modification, Method call replacement, Method definition addition, Object instantiation addition, Return statement addition, CUMENTS private static Node tryCatch(Node tryBody, Node catchNode) {      Preconditions.checkState(tryBody.isBlock());      Preconditions.checkState(catchNode.isCatch());     Node catchBody = block(catchNode).copyInformationFrom(catchNode);      return new Node(Token.TRY, tryBody, catchBody);    } Assignment expression modification, Method call parameter value modification, Method call replacement, Method definition addition, Object instantiation addition, Return statement addition, CUMENTS
private double[] decode(final double[] x) {             if (x == null) {             return null;           }             if (x.length == 0) {             return null;           }             if (x.length == 1) {             return x[0];           }             if (x.length == 2) {             return null;           }             if (x.length == 3) {             return null;           }             if (x.length == 4) {             return null;           }             if (x.length == 5) {             return null;           }             if (x.length == 6) {             return null;           }             if (x.length == 7) {             return null;           }             if (x.length == 8) {             return null;           }             if (x.length == 9) {             return null;           }             if (x.length == 10) {             return null;           }             if (x.length == 11) {             return null;           }             if (x.length == 12) {             return null;           }             if (x.length == 13) {             return null;           }             if (x.length == 14) {             return null;           }             if (x.length == 15) {             return null;           }             if (x.length == 16) {             return null;           }             if (x.length == 17) {             return null;           }             if (x.length == 18) {             return null;           }             if (x.length == 19) {             return null;           }             if (x.length == 20) {             return null;           }             if (x.length == 21) {             return null;           }             if (x.length == 22) {             return null;           }             if (x.length == 23) {             return null;           }             if (x.length == 24) {             return null;           }             if (x.length == 25) {             return null;           }             if (x.length == 26) {             return null;           }             if (x.length == 27) {             return null;           }             if (x.length == 28) {             return null;           }             if (x.length == 29) {             return null;           }             if (
private volatile int iPeriod; private static final long serialVersionUID = 9386874258972L; private volatile int iPeriod; private volatile int iPeriod; private volatile int iPeriod; private volatile int iPeriod; private volatile int iPeriod; private volatile int iPeriod; private volatile int iPeriod; private volatile int iPeriod; private volatile int iPeriod; private volatile int iPeriod; private volatile int iPeriod; private volatile int iPeriod; private volatile int iPeriod; private volatile int iPeriod; private volatile int iPeriod; private volatile int iPeriod; private volatile int iPeriod; private volatile int iPeriod; private volatile int iPeriod; private volatile int iPeriod; private volatile int iPeriod; private volatile int iPeriod; private volatile int iPeriod; private volatile int iPeriod; private volatile int iPeriod; private volatile int iPeriod; private volatile int iPeriod; private volatile int iPeriod; private volatile int iPeriod; private volatile int iPeriod; private volatile int iPeriod; private volatile int iPeriod; private volatile int iPeriod; private volatile int iPeriod; private volatile int iPeriod; private volatile int iPeriod; private volatile int iPeriod; private volatile int iPeriod; private volatile int iPeriod; private volatile int iPeriod; private volatile int iPeriod; private volatile int iPeriod; private volatile int iPeriod; private volatile int iPeriod; private volatile int iPeriod; private volatile int iPeriod; private volatile int iPeriod; private volatile int iPeriod; private volatile int iPeriod; private volatile int iPeriod; private volatile int iPeriod; private volatile int iPeriod; private volatile int iPeriod; private volatile int iPeriod; private volatile int iPeriod; private volatile int iPeriod; private volatile int iPeriod; private volatile int iPeriod; private volatile int iPeriod; private volatile int iPeriod; private volatile int iPeriod; private volatile int iPeriod; private volatile int iPeriod; private volatile int iPeriod; private volatile int iPeriod; private volatile int iPeriod; private volatile int iPeriod; private volatile int iPeriod; private volatile int iPeriod; private volatile int iPeriod; private volatile int iPeriod; private volatile int iPeriod; private volatile int iPeriod; private volatile int iPeriod; private volatile int iPeriod; private volatile int iPeriod; private volatile int iPeriod; private volatile int iPeriod; private volatile int iPeriod; private volatile int iPeriod; private volatile int iPeriod; private volatile int
private static void escapeJavaStyleString(Writer out, String str, boolean replace) throws IOException {             if (replace) {               out.append("\"").append(str).append("\"");             }             else {               out.append(str).append("\"");             }           } else {               if (replace) {               out.append("\"").append(str).append("\"");             }           } else {               if (replace) {               out.append("\"").append(str).append("\"");             }           } else {               if (replace) {               out.append("\"").append(str).append("\"");             }           } else {               if (replace) {               out.append("\"").append(str).append("\"");             }           } else {               if (replace) {               out.append("\"").append(str).append("\"");             }           } else {               if (replace) {               out.append("\"").append(str).append("\"");             }           } else {               if (replace) {               out.append("\"").append(str).append("\"");             }           } else {               if (replace) {               out.append("\"").append(str).append("\"");             }           } else {               if (replace) {               out.append("\"").append(str).append("\"");             }           } else {               if (replace) {               out.append("\"").append(str).append("\"");             }           } else {               if (replace) {               out.append("\"").append(str).append("\"");             }           } else {               if (replace) {               out.append("\"").append(str).append("\"");             }           } else {               if (replace) {               out.append("\"").append(str).append("\"");             }           } else {               if (replace) {               out.append("\"").append(str).append("\"");             }           } else {               if (replace) {               out.append("\"").append(str).append("\"");             }           } else {               if (replace) {               out.append("\"").append(str).append("\"");             }           } else {               if (replace) {               out.append("\"").append(
!="#$%&'()*+,-./  void addExpr(Node n, Node p, Context context) {           if (n!= null) {               if (p!= null) {                   if (parent!= null) {                   parent.replaceChild(parent, n);               }               else {                   parent = n;               }           }           if (p!= null) {               if (parent!= null) {                   parent.removeChild(parent);               }           if (parent!= null) {               parent = null;           }           if (parent!= null) {           parent = null;           }           if (parent!= null) {           parent = null;           }           if (parent!= null) {           parent = null;           }           if (parent!= null) {           parent = null;           }           if (parent!= null) {           parent = null;           }           if (parent!= null) {           parent = null;           }           if (parent!= null) {           parent = null;           }           if (parent!= null) {           parent = null;           }           if (parent!= null) {           parent = null;           }           if (parent!= null) {           parent = null;           }           if (parent!= null) {           parent = null;           }           if (parent!= null) {           parent = null;           }           if (parent!= null) {           parent = null;           }           if (parent!= null) {           parent = null;           }           if (parent!= null) {           parent = null;           }           if (parent!= null) {           parent = null;           }           if (parent!= null) {           parent = null;           }           if (parent!= null) {           parent = null;           }           if (parent!= null) {           parent = null;           }           if (parent!= null) {           parent = null;           }           if (parent!= null) {           parent = null;           }           if (parent!= null) {           parent = null;           }           if (parent!= null) {           parent = null;           }           if (parent!= null) {           parent = null;           }           if (parent!= null) {           parent = null;           }           if (parent!= null) {           parent = null;           }
private static double sinh(double x) {       * @return {@code true} if the values are equal.       */       public static boolean equals(double x, double y) {         return (Double.isNaN(x) && Double.isNaN(y)) || x == y;       }      /** Method call addition, Method call removal, Return expression modification, ProvisionedProducted private static double cosh(double x) {       * @return {@code true} if the values are equal.       */       public static boolean equals(double x, double y) {         return (Double.isNaN(x) && Double.isNaN(y)) || x == y;       }      /** Method call addition, Method call removal, Return expression modification, ProvisionedProducted private static double sinh(double x) {       * @return {@code true} if the values are equal.       */       public static boolean equals(double x, double y) {         return (Double.isNaN(x) && Double.isNaN(y)) || x == y;       }      /** Method call addition, Method call removal, Return expression modification, ProvisionedProducted private static double cosh(double x) {       * @return {@code true} if the values are equal.       */       public static boolean equals(double x, double y) {         return (Double.isNaN(x) && Double.isNaN(y)) || x == y;       }      /** Method call addition, Method call removal, Return expression modification, ProvisionedProducted private static double sinh(double x) {       * @return {@code true} if the values are equal.       */       public static boolean equals(double x, double y) {         return (Double.isNaN(x) && Double.isNaN(y)) || x == y;       }      /** Method call addition, Method call removal, Return expression modification, ProvisionedProducted private static double cosh(double x) {       * @return {@code true} if the values are equal.       */       public static boolean equals(double x, double y) {         return (Double.isNaN(x) && Double.isNaN(y)) || x == y;       }      /** Method call addition, Method call removal, Return expression modification, ProvisionedProducted private static double sinh(double x) {       * @return {@code true}
private void noMoreInteractionsWantedInOrder(Invocation undesired) {          throw new VerificationInOrderFailure(join(                  "No interactions wanted here:",                  new LocationImpl(),                 "But found this interaction on mock '" + undesired.getMock() + "':" + undesired.getLocation()          ));      }             public void noMoreInteractionsWantedInOrder(Invocation undesired) {          throw new VerificationInOrderFailure(join(                  "No interactions wanted here:",                  new LocationImpl(),                 "But found this interaction on mock '" + undesired.getMock() + "':" + undesired.getLocation()          ));      }             public void noMoreInteractionsWantedInOrder(Invocation undesired) {          throw new VerificationInOrderFailure(join(                  "No interactions wanted here:",                  new LocationImpl(),                 "But found this interaction on mock '" + undesired.getMock() + "':" + undesired.getLocation()          ));      }             public void noMoreInteractionsWantedInOrder(Invocation undesired) {          throw new VerificationInOrderFailure(join(                  "No interactions wanted here:",                  new LocationImpl(),                 "But found this interaction on mock '" + undesired.getMock() + "':" + undesired.getLocation()          ));      }             public void noMoreInteractionsWantedInOrder(Invocation undesired) {          throw new VerificationInOrderFailure(join(                  "No interactions wanted here:",                  new LocationImpl(),                 "But found this interaction on mock '" + undesired.getMock() + "':" + undesired.getLocation()          ));      }             public void noMoreInteractionsWantedInOrder(Invocation undesired) {          throw new VerificationInOrderFailure(join(                  "No interactions wanted here:",                  new LocationImpl(),                 "But found this interaction on mock '" + undesired.getMock() + "':" + undesired.getLocation()          ));      }             public void noMoreInteractionsWantedInOrder(Invocation undesired) {          throw new VerificationInOrderFailure(join(                  "No interactions wanted here:",                  new LocationImpl(),                 "But found this interaction on mock '" + undesired.getMock() + "':" + undesired.getLocation()          ));      }             public void noMoreInteractions
private EqualsBuilder append(Object lhs, Object rhs) {          if (!lhsClass.isArray()) {                  isEquals = lhs.equals(rhs);          } else if (lhs!= rhs) {              this.setEquals(false); Assignment addition, Conditional (if-else) branches addition, Method call addition, Privileged private EqualsBuilder append(Object lhs, Object rhs) {          if (!lhsClass.isArray()) {                  isEquals = lhs.equals(rhs);          } else {              this.setEquals(true); Assignment addition, Conditional (if-else) branches addition, Method call addition, Privileged private EqualsBuilder append(Object lhs, Object rhs) {          if (!lhsClass.isArray()) {                  isEquals = lhs.equals(rhs);          } else {              this.setEquals(false); Assignment addition, Conditional (if-else) branches addition, Method call addition, Privileged private EqualsBuilder append(Object lhs, Object rhs) {          if (!lhsClass.isArray()) {                  isEquals = lhs.equals(rhs);          } else {              this.setEquals(true); Assignment addition, Conditional (if-else) branches addition, Method call addition, Privileged private EqualsBuilder append(Object lhs, Object rhs) {          if (!lhsClass.isArray()) {                  isEquals = lhs.equals(rhs);          } else {              this.setEquals(false); Assignment addition, Conditional (if-else) branches addition, Method call addition, Privileged private EqualsBuilder append(Object lhs, Object rhs) {          if (!lhsClass.isArray()) {                  isEquals = lhs.equals(rhs);          } else {              this.setEquals(true); Assignment addition, Conditional (if-else) branches addition, Method call addition, Privileged private EqualsBuilder append(Object lhs, Object rhs) {          if (!lhsClass.isArray()) {                  isEquals = lhs.equals(rhs);          } else {              this.setEquals(false); Assignment addition, Conditional (if-else) branches addition, Method call addition, Privileged private EqualsBuilder append(Object lhs, Object rhs) {          if (!lhsClass.isArray()) {                  isEquals = lhs.equals(rhs);          } else {              this.setEquals(true); Assignment addition
void apply() {        this.nameNode = nameNode;        this.isPropertyAssign = isPropertyAssign;       this.maybeAliased =!assignNode.getParent().isExprResult();        this.mayHaveSecondarySideEffects =            maybeAliased ||            NodeUtil.mayHaveSideEffects(assignNode.getFirstChild());        this.nameNode = null;        this.isPropertyAssign = null;       this.maybeAliased = null;        this.mayHaveSecondarySideEffects = null;        this.nameNode = null;        this.isPropertyAssign = null;       this.maybeAliased = null;        this.mayHaveSecondarySideEffects = null;        this.nameNode = null;        this.nameNode = null;        this.nameNode = null;        this.nameNode = null;        this.nameNode = null;        this.nameNode = null;        this.nameNode = null;        this.nameNode = null;        this.nameNode = null;        this.nameNode = null;        this.nameNode = null;        this.nameNode = null;        this.nameNode = null;        this.nameNode = null;        this.nameNode = null;        this.nameNode = null;        this.nameNode = null;        this.nameNode = null;        this.nameNode = null;        this.nameNode = null;        this.nameNode = null;        this.nameNode = null;        this.nameNode = null;        this.nameNode = null;        this.nameNode = null;        this.nameNode = null;        this.nameNode = null;        this.nameNode = null;        this.nameNode = null;        this.nameNode = null;        this.nameNode = null;        this.nameNode = null;        this.nameNode = null;        this.nameNode = null;        this.nameNode = null;        this.nameNode = null;        this.nameNode = null;        this.nameNode = null;        this.nameNode = null;        this.nameNode = null;        this.nameNode = null;        this.nameNode = null;        this.nameNode = null;        this.nameNode = null;        this.nameNode = null;        this.nameNode
!"#$%&'()*+,-./ public void setMinuteOfDay(final int minuteOfDay) {       * @throws IllegalArgumentException if the value is invalid       */       public void addMinutes(final int minutes) {              setMillis(getChronology().minutes().add(getMillis(), minutes));      } Conditional (if) branch addition, ResolverRule!"#$%&'()*+,-./ public void setSecondOfDay(final int secondOfDay) {       * @throws IllegalArgumentException if the value is invalid       */       public void addSeconds(final int seconds) {              setMillis(getChronology().seconds().add(getMillis(), seconds));      } Conditional (if) branch addition, ResolverRule!"#$%&'()*+,-./ public void setNanos(final long nanos) {       * @throws IllegalArgumentException if the value is invalid       */       public void addNanos(final long nanos) {              setMillis(getChronology().nanos().add(getMillis(), nanos));      } Conditional (if) branch addition, ResolverRule!"#$%&'()*+,-./ public void setNanos(final long nanos) {       * @throws IllegalArgumentException if the value is invalid       */       public void setNanos(final long nanos) {              setMillis(getChronology().nanos().add(getMillis(), nanos));      } Conditional (if) branch addition, ResolverRule!"#$%&'()*+,-./ public void setNanos(final long nanos) {       * @throws IllegalArgumentException if the value is invalid       */       public void setNanos(final long nanos) {              setMillis(getChronology().nanos().add(getMillis(), nanos));      } Conditional (if) branch addition, ResolverRule!"#$%&'()*+,-./ public void setNanos(final long nanos) {       * @throws IllegalArgumentException if the value is invalid       */       public void setNanos(final long nanos) {              setMillis(getChronology().nanos().add(getMillis(), nanos));      } Conditional (if) branch addition, ResolverRule!"#$%&'()*+,-./ public void setNanos(final long nanos) {       * @throws IllegalArgumentException if the value is invalid       */       public void setNanos(final long
void maybeDeclareQualifiedName(NodeTraversal t, JSDocInfo info,             boolean inferred) {             if (inferred) {                 if (rhsValue!= null) {                   scope.removeChild(rhsValue);               }               if (qName!= null) {                   scope.removeChild(qName);               }           } else {             if (rhsValue!= null) {                   scope.removeChild(rhsValue);               }               if (qName!= null) {                   scope.removeChild(qName);               }           } else {             if (rhsValue!= null) {                   scope.removeChild(rhsValue);               }               if (qName!= null) {                   scope.removeChild(qName);               }           } else {             if (rhsValue!= null) {                   scope.removeChild(rhsValue);               }               if (qName!= null) {                   scope.removeChild(qName);               }           } else {             if (rhsValue!= null) {                   scope.removeChild(rhsValue);               }               if (qName!= null) {                   scope.removeChild(qName);               }           } else {             if (rhsValue!= null) {                   scope.removeChild(rhsValue);               }               if (qName!= null) {                   scope.removeChild(qName);               }           }
