 }   return esPhase; }   return esPhase; }   return esPhase; }   return esPhase; }   return esPhase; }   return esPhase; }   return esPhase; }   return esPhase; }   return esPhase; }   return esPhase; }   return esPhase; }   return esPhase; }   return esPhase; }   return esPhase; }   return esPhase; }   return esPhase; }   return esPhase; }   return esPhase; }   return esPhase; }   return esPhase; }   return esPhase; }   return esPhase; }   return esPhase; }   return esPhase; }   return esPhase; }   return esPhase; }   return esPhase; }   return esPhase; }   return esPhase; }   return esPhase; }   return esPhase; }   return esPhase; }   return esPhase; }   return esPhase; }   return esPhase; }   return esPhase; }   return esPhase; }   return esPhase; }   return esPhase; }   return esPhase; }   return esPhase; }   return esPhase; }   return esPhase; }   return esPhase; }   return esPhase; }   return esPhase; }   return esPhase; }   return esPhase; }   return esPhase; }   return esPhase; }   return esPhase; }   return esPhase; }   return esPhase; }   return esPhase; }   return esPhase; }   return esPhase; }   return esPhase; }   return esPhase; }   return esPhase; }   return esPhase; }   return esPhase; }   return esPhase; }   return esPhase; }   return esPhase; }   return esPhase; }   return esPhase; }   return esPhase; }   return esPhase; }   return esPhase; }   return esPhase; }   return esPhase; }   return esPhase; }   return esPhase
<?php /**  * Zend Framework  *  * LICENSE  *  * This source file is subject to the new BSD license that is bundled  * with this package in the file LICENSE.txt.  * It is also available through the world-wide-web at this URL:  * http://framework.zend.com/license/new-bsd  * If you did not receive a copy of the license and are unable to  * obtain it through the world-wide-web, please send an email  * to license@zend.com so we can send you a copy immediately.  *  * @category   Zend  * @package    Zend_Service  * @subpackage DeveloperGarden  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  * @version    $Id$  */  /**  * @see Zend_Service_DeveloperGarden_Exception  */ // require_once 'Zend/Service/DeveloperGarden/Exception.php';  /**  * @category   Zend  * @package    Zend_Service  * @subpackage DeveloperGarden  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  */ class Zend_Service_DeveloperGarden_Exception extends Zend_Service_DeveloperGarden_Exception { } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */  package org.apache.druid.indexing.common;  import com.fasterxml.jackson.annotation.JsonCreator; import com.fasterxml.jackson.annotation.JsonProperty; import com.fasterxml.jackson.annotation.JsonTypeInfo; import com.fasterxml.jackson.annotation.JsonTypeInfo.As; import com.fasterxml.jackson.annotation.JsonTypeInfo.Id; import com.fasterxml.jackson.annotation.JsonTypeName; import com.fasterxml.jackson.databind.DeserializationFeature; import com.fasterxml.jackson.databind.JsonDeserializer; import com.fasterxml.jackson.databind.ObjectMapper; import com.fasterxml.jackson.databind.ObjectReader; import com.fasterxml.jackson.databind.ObjectWriter; import com.fasterxml.jackson.databind.SerializationFeature; import com.fasterxml.jackson.databind.annotation.JsonDeserialize; import com.fasterxml.jackson.databind.annotation.JsonSerialize; import com.fasterxml.jackson.databind.module.SimpleModule; import com.fasterxml.jackson.databind.module.SimpleModule.
      /**      * @param {string} name      * @param {function} callback      */     this.addStep = function(name, callback) {         stepsArray.push({             name: name,             callback: callback         });     };      /**      * @param {string} name      * @param {function} callback      */     this.removeStep = function(name, callback) {         stepsArray.splice(stepsArray.indexOf(name), 1);     };      /**      * @param {string} name      * @param {function} callback      */     this.setStep = function(name, callback) {         stepsArray.push({             name: name,             callback: callback         });     };      /**      * @param {string} name      * @param {function} callback      */     this.removeStep = function(name, callback) {         stepsArray.splice(stepsArray.indexOf(name), 1);     };      /**      * @param {string} name      * @param {function} callback      */     this.reset = function(name, callback) {         stepsArray.push({             name: name,             callback: callback         });     };      /**      * @param {string} name      * @param {function} callback      */     this.resetStep = function(name, callback) {         stepsArray.splice(stepsArray.indexOf(name), 1);     };      /**      * @param {string} name      * @param {function} callback      */     this.resetAll = function(name, callback) {         stepsArray.push({             name: name,             callback: callback         });     };      /**      * @param {string} name      * @param {function} callback      */     this.resetAllStep = function(name, callback) {         stepsArray.splice(stepsArray.indexOf(name), 1);     };      /**      * @param {string} name      * @param
<?php  /*  * This file is part of the Symfony package.  *  * (c) Fabien Potencier <fabien@symfony.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace Symfony\Bundle\FrameworkBundle\DependencyInjection;  use Symfony\Component\DependencyInjection\ContainerBuilder; use Symfony\Component\Config\FileLocator; use Symfony\Component\HttpKernel\DependencyInjection\Extension; use Symfony\Component\DependencyInjection\Loader;  /**  * This is the class that loads and manages your bundle configuration  *  * To learn more see {@link http://symfony.com/doc/current/cookbook/bundles/extension.html}  */ class SymfonyFrameworkExtension extends Extension {     /**      * {@inheritdoc}      */     public function load(array $configs, ContainerBuilder $container)     {         $configuration = new Configuration();         $config = $this->processConfiguration($configuration, $configs);          $loader = new Loader\YamlFileLoader($container, new FileLocator(__DIR__.'/../Resources/config'));         $loader->load('services.yml');     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name')             ->add('description')         ;     }      /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product';     } } 
<?php  /*  * This file is part of the Symfony package.  *  * (c) Fabien Potencier <fabien@symfony.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace Symfony\Component\Form\Extension\Core\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface; use Symfony\Component\Validator\Constraints as Assert; use Symfony\Component\Validator\Constraints\NotBlank; use Symfony\Component\Validator\Constraints\Length; use Symfony\Component\Validator\Constraints\Regex; use Symfony\Component\Validator\Exception\InvalidArgumentException; use Symfony\Component\Validator\Exception\UnexpectedTypeException; use Symfony\Component\Validator\Validator; use Symfony\Component\Validator\ValidatorInterface; use Symfony\Component\Validator\ValidatorFactory; use Symfony\Component\Validator\ValidatorFactoryInterface; use Symfony\Component\Validator\Constraint; use Symfony\Component\Validator\ConstraintValidator; use Symfony\Component\Validator\ConstraintValidatorInterface; use Symfony\Component\Validator\Exception\UnexpectedTypeException; use Symfony\Component\Validator\Exception\UnexpectedValueException; use Symfony\Component\Validator\ValidatorFactoryInterface; use Symfony\Component\Validator\ValidatorInterface; use Symfony\Component\Validator\Exception\UnexpectedValueException; use Symfony\Component\Validator\ValidatorFactoryInterface; use Symfony\Component\Validator\ValidatorInterface; use Symfony\Component\Validator\ValidatorFactoryInterface; use Symfony\Component\Validator\ValidatorInterface; use Symfony\Component\Validator\ValidatorFactoryInterface; use Symfony\Component\Validator\ValidatorInterface; use Symfony\Component\Validator\ValidatorFactoryInterface; use Symfony\Component\Validator\ValidatorInterface; use Symfony\Component\Validator\ValidatorFactoryInterface; use Symfony\Component\Validator\ValidatorInterface; use Symfony\Component\Validator\ValidatorFactoryInterface; use Symfony\Component\Validator\ValidatorInterface; use Symfony\Component\Validator\ValidatorFactoryInterface; use Symfony\Component\Validator\ValidatorInterface; use Symfony\Component\Validator\ValidatorInterface; use Symfony\
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'required' => false,                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'required' => false,                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name')             ->add('description')             ->add('price')         ;     }      /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product';     } } 
<?php /**  * Zend Framework  *  * LICENSE  *  * This source file is subject to the new BSD license that is bundled  * with this package in the file LICENSE.txt.  * It is also available through the world-wide-web at this URL:  * http://framework.zend.com/license/new-bsd  * If you did not receive a copy of the license and are unable to  * obtain it through the world-wide-web, please send an email  * to license@zend.com so we can send you a copy immediately.  *  * @category   Zend  * @package    Zend_Service  * @subpackage DeveloperGarden  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  * @version    $Id$  */  /**  * @see Zend_Service_DeveloperGarden_Exception  */ // require_once 'Zend/Service/DeveloperGarden/Exception.php';  /**  * @category   Zend  * @package    Zend_Service  * @subpackage DeveloperGarden  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  */ class Zend_Service_DeveloperGarden_Exception extends Zend_Service_DeveloperGarden_Exception { } 
     };      gamejs.time.fpsCallback = function(tick, this, interval) {         var timer = gamejs.time.timer;          if (!timer) {             timer = new gamejs.time.Timer(interval);         }          timer.start();     };      gamejs.time.timer = function(interval) {         var timer = gamejs.time.timer;          if (!timer) {             timer = new gamejs.time.Timer(interval);         }          timer.start();     };      gamejs.time.fps = function(callback) {         var timer = gamejs.time.timer;          if (!timer) {             timer = new gamejs.time.Timer(callback);         }          timer.start();     };      gamejs.time.fpsCallback = function(callback, interval) {         var timer = gamejs.time.timer;          if (!timer) {             timer = new gamejs.time.Timer(callback, interval);         }          timer.start();     };      gamejs.time.fpsCallback = function(callback, interval) {         var timer = gamejs.time.timer;          if (!timer) {             timer = new gamejs.time.Timer(callback, interval);         }          timer.start();     };      gamejs.time.fpsCallback = function(callback, interval) {         var timer = gamejs.time.timer;          if (!timer) {             timer = new gamejs.time.Timer(callback, interval);         }          timer.start();     };      gamejs.time.fpsCallback = function(callback, interval) {         var timer = gamejs.time.timer;          if (!timer) {             timer = new gamejs.time.Timer(callback, interval);         }          timer.start();     };      gamejs.time.fpsCallback = function(callback, interval) {         var timer = gamejs.time.timer;         
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name'                 )             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description'                 )             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
  console.log("onRendered", this);     let updateValue2 = function(elem, value2) {     console.log("onRendered", this);     let updateValue3 = function(elem, value3) {     console.log("onRendered", this);     let updateValue4 = function(elem, value4) {     console.log("onRendered", this);     let updateValue5 = function(elem, value5) {     console.log("onRendered", this);     let updateValue6 = function(elem, value6) {     console.log("onRendered", this);     let updateValue7 = function(elem, value7) {     console.log("onRendered", this);     let updateValue8 = function(elem, value8) {     console.log("onRendered", this);     let updateValue9 = function(elem, value9) {     console.log("onRendered", this);     let updateValue10 = function(elem, value10) {     console.log("onRendered", this);     let updateValue11 = function(elem, value11) {     console.log("onRendered", this);     let updateValue12 = function(elem, value12) {     console.log("onRendered", this);     let updateValue13 = function(elem, value13) {     console.log("onRendered", this);     let updateValue14 = function(elem, value14) {     console.log("onRendered", this);     let updateValue15 = function(elem, value15) {     console.log("onRendered", this);     let updateValue16 = function(elem, value16) {     console.log("onRendered", this);     let updateValue17 = function(elem, value17) {     console.log("onRendered", this);     let updateValue18 = function(elem, value18) {     console.log("onRendered", this);     let updateValue19 = function(elem, value19) {     console.log("onRendered", this);     let updateValue20 = function(elem, value20) {     console.log("onRendered", this);     let updateValue21 = function(elem, value21) {     console.log("onRendered", this);    
import classNames from 'classnames'; import classNamesFrom from 'classnames-from'; import classNamesTo from 'classnames-to'; import classNamesFromFrom from 'classnames-from-from'; import classNamesToFrom from 'classnames-to-from'; import classNamesFromTo from 'classnames-from-to'; import classNamesToTo from 'classnames-to-to'; import classNamesFromToFrom from 'classnames-from-to-from'; import classNamesToToFrom from 'classnames-to-to-from'; import classNamesFromToTo from 'classnames-from-to-to'; import classNamesToToFrom from 'classnames-to-to-from'; import classNamesFromToTo from 'classnames-from-to-to-from'; import classNamesToToFrom from 'classnames-to-to-from'; import classNamesFromToTo from 'classnames-from-to-to-from'; import classNamesToToFrom from 'classnames-to-to-from'; import classNamesFromToTo from 'classnames-from-to-to-from'; import classNamesToToFrom from 'classnames-to-to-from'; import classNamesFromToTo from 'classnames-from-to-to-from'; import classNamesToToFrom from 'classnames-to-to-from'; import classNamesFromToTo from 'classnames-from-to-to-from'; import classNamesToToFrom from 'classnames-to-to-from'; import classNamesFromToTo from 'classnames-from-to-to-from'; import classNamesToToFrom from 'classnames-to-to-from'; import classNamesFromToTo from 'classnames-from-to-to-from'; import classNamesToToFrom from 'classnames-to-to-from'; import classNamesFromToTo from 'classnames-from-to-to-from'; import classNamesToToFrom from 'classnames-to-to-from'; import classNamesFromToTo from 'classnames-from-to-to-from'; import classNamesToToFrom from 'classnames-to-to-from'; import classNamesFromToTo from 'classnames-from-to-to-from'; import classNamesToToFrom from 'classnames-to-to-
     if (callbackName && angular.isFunction(originalCallback)) {         originalCallback.apply(null, arguments);       }     if (callbackName && angular.isFunction(originalCallback)) {         originalCallback.apply(null, arguments);       }     if (callbackName && angular.isFunction(originalCallback)) {         originalCallback.apply(null, arguments);       }     if (callbackName && angular.isFunction(originalCallback)) {         originalCallback.apply(null, arguments);       }     if (callbackName && angular.isFunction(originalCallback)) {         originalCallback.apply(null, arguments);       }     if (callbackName && angular.isFunction(originalCallback)) {         originalCallback.apply(null, arguments);       }     if (callbackName && angular.isFunction(originalCallback)) {         originalCallback.apply(null, arguments);       }     if (callbackName && angular.isFunction(originalCallback)) {         originalCallback.apply(null, arguments);       }     if (callbackName && angular.isFunction(originalCallback)) {         originalCallback.apply(null, arguments);       }     if (callbackName && angular.isFunction(originalCallback)) {         originalCallback.apply(null, arguments);       }     if (callbackName && angular.isFunction(originalCallback)) {         originalCallback.apply(null, arguments);       }     if (callbackName && angular.isFunction(originalCallback)) {         originalCallback.apply(null, arguments);       }     if (callbackName && angular.isFunction(originalCallback)) {         originalCallback.apply(null, arguments);       }     if (callbackName && angular.isFunction(originalCallback)) {         originalCallback.apply(null, arguments);       }     if (callbackName && angular.isFunction(originalCallback)) {         originalCallback.apply(null, arguments);       }     if (callbackName && angular.isFunction(originalCallback)) {         originalCallback.apply(null, arguments);       }     if (callbackName && angular.isFunction(originalCallback)) {         originalCallback.apply(null, arguments);       }     if (callbackName && angular.isFunction(originalCallback)) {         originalCallback.apply(null, arguments);       }     if (callbackName &&
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializer; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializerProvider; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.
        $scope.parentList = $filter(childSelect.parentFilter[0]).apply(null, [parents].concat(childSelect.parentFilter.slice(1)));       }       if ($scope.parentList.length) {         $scope.parentList = $filter(childSelect.parentFilter[0]).apply(null, [parents].concat(childSelect.parentFilter.slice(1)));       }       if ($scope.parentList.length) {         $scope.parentList = $filter(childSelect.parentFilter[0]).apply(null, [parents].concat(childSelect.parentFilter.slice(1)));       }       if ($scope.parentList.length) {         $scope.parentList = $filter(childSelect.parentFilter[0]).apply(null, [parents].concat(childSelect.parentFilter.slice(1)));       }       if ($scope.parentList.length) {         $scope.parentList = $filter(childSelect.parentFilter[0]).apply(null, [parents].concat(childSelect.parentFilter.slice(1)));       }       if ($scope.parentList.length) {         $scope.parentList = $filter(childSelect.parentFilter[0]).apply(null, [parents].concat(childSelect.parentFilter.slice(1)));       }       if ($scope.parentList.length) {         $scope.parentList = $filter(childSelect.parentFilter[0]).apply(null, [parents].concat(childSelect.parentFilter.slice(1)));       }       if ($scope.parentList.length) {         $scope.parentList = $filter(childSelect.parentFilter[0]).apply(null, [parents].concat(childSelect.parentFilter.slice(1)));       }       if ($scope.parentList.length) {         $scope.parentList = $filter(childSelect.parentFilter[0]).apply(null, [parents].concat(childSelect.parentFilter.slice(1)));       }       if ($scope.parentList.length) {         $scope.parentList = $filter(childSelect.parentFilter[0]).apply(null, [parents].concat(childSelect.parentFilter.
 stage.all(function() {   if (app.build) build(); });  stage.all(function() {   if (app.build) build(); });  stage.all(function() {   if (app.build) build(); });  stage.all(function() {   if (app.build) build(); });  stage.all(function() {   if (app.build) build(); });  stage.all(function() {   if (app.build) build(); });  stage.all(function() {   if (app.build) build(); });  stage.all(function() {   if (app.build) build(); });  stage.all(function() {   if (app.build) build(); });  stage.all(function() {   if (app.build) build(); });  stage.all(function() {   if (app.build) build(); });  stage.all(function() {   if (app.build) build(); });  stage.all(function() {   if (app.build) build(); });  stage.all(function() {   if (app.build) build(); });  stage.all(function() {   if (app.build) build(); });  stage.all(function() {   if (app.build) build(); });  stage.all(function() {   if (app.build) build(); });  stage.all(function() {   if (app.build) build(); });  stage.all(function() {   if (app.build) build(); });  stage.all(function() {   if (app.build) build(); });  stage.all(function() {   if (app.build) build(); });  stage.all(function() {   if (app.build) build(); });  stage.all(function() {   if (app.build) build(); });  stage.all(function() {   if (app.build) build(); });  stage.all(function()
/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */ package org.apache.hadoop.hbase.regionserver;  import static org.junit.Assert.assertEquals; import static org.junit.Assert.assertFalse; import static org.junit.Assert.assertNotNull; import static org.junit.Assert.assertNull; import static org.junit.Assert.assertTrue;  import java.io.IOException; import java.util.ArrayList; import java.util.List;  import org.apache.commons.logging.Log; import org.apache.commons.logging.LogFactory; import org.apache.hadoop.conf.Configuration; import org.apache.hadoop.fs.FileSystem; import org.apache.hadoop.fs.Path; import org.apache.hadoop.hbase.HBaseTestingUtility; import org.apache.hadoop.hbase.HTableDescriptor; import org.apache.hadoop.hbase.TableName; import org.apache.hadoop.hbase.client.Admin; import org.apache.hadoop.hbase.client.Put; import org.apache.hadoop.hbase.client.Result; import org.apache.hadoop.hbase.client.ResultScanner; import org.apache.hadoop.hbase.client.Scan; import org.apache.h
<?php  /*  * This file is part of the Symfony package.  *  * (c) Fabien Potencier <fabien@symfony.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace Symfony\Bundle\FrameworkBundle\DependencyInjection;  use Symfony\Component\DependencyInjection\ContainerBuilder; use Symfony\Component\Config\FileLocator; use Symfony\Component\HttpKernel\DependencyInjection\Extension; use Symfony\Component\DependencyInjection\Loader;  /**  * This is the class that loads and manages your bundle configuration  *  * To learn more see {@link http://symfony.com/doc/current/cookbook/bundles/extension.html}  */ class SymfonyFrameworkExtension extends Extension {     /**      * {@inheritDoc}      */     public function load(array $configs, ContainerBuilder $container)     {         $configuration = new Configuration();         $config = $this->processConfiguration($configuration, $configs);          $loader = new Loader\YamlFileLoader($container, new FileLocator(__DIR__.'/../Resources/config'));         $loader->load('services.yml');     } } 
// Copyright (c) 2012 The Chromium Authors. All rights reserved. // Use of this source code is governed by a BSD-style license that can be // found in the LICENSE file.  #ifndef CHROME_BROWSER_UI_WEBUI_CHROMEOS_LOGIN_SCREEN_H_ #define CHROME_BROWSER_UI_WEBUI_CHROMEOS_LOGIN_SCREEN_H_  #include <string>  #include "base/basictypes.h" #include "base/compiler_specific.h" #include "base/memory/scoped_ptr.h" #include "base/memory/weak_ptr.h" #include "base/memory/weak_ptr_factory.h" #include "base/memory/weak_ptr_set.h" #include "base/time/time.h" #include "chrome/browser/chromeos/login/user_manager.h" #include "chrome/browser/chromeos/login/user_manager_factory.h" #include "chrome/browser/profiles/profile.h" #include "content/public/browser/notification_observer.h" #include "content/public/browser/notification_registrar.h" #include "content/public/browser/notification_registrar_observer.h" #include "content/public/browser/notification_source.h" #include "content/public/browser/notification_types.h" #include "content/public/browser/render_view_host.h" #include "content/public/browser/render_widget_host.h" #include "content/public/browser/web_contents.h" #include "content/public/browser/web_contents_observer.h" #include "content/public/browser/web_ui.h" #include "content/public/browser/web_ui_data_source.h" #include "grit/generated_resources.h" #include "ui/base/l10n/l10n_util.h" #include "ui/base/resource/resource_bundle.h" 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.functions.IFunctionDescriptorProvider; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.data.accessors.ITupleReference; import org.apache.hyracks.dataflow.common.data
<?php  /*  * This file is part of the Symfony package.  *  * (c) Fabien Potencier <fabien@symfony.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace Symfony\Component\DependencyInjection\Compiler;  use Symfony\Component\DependencyInjection\ContainerBuilder; use Symfony\Component\DependencyInjection\Definition; use Symfony\Component\DependencyInjection\Reference; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\RuntimeException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\RuntimeException; use Symfony\Component\DependencyInjection\ParameterBag\ParameterBag; use Symfony\Component\DependencyInjection\ParameterBag\ParameterBagInterface; use Symfony\Component\DependencyInjection\Reference\ParameterReference; use Symfony\Component\DependencyInjection\Reference\ParameterReferenceInterface; use Symfony\Component\DependencyInjection\Reference\Reference; use Symfony\Component\DependencyInjection\Reference\ReferenceInterface; use Symfony\Component\DependencyInjection\ParameterBag\ParameterBagInterface; use Symfony\Component\DependencyInjection\ParameterBag\ParameterBag; use Symfony\Component\DependencyInjection\ParameterBag\ParameterBagInterface; use Symfony\Component\DependencyInjection\ParameterBag\ParameterBagInterface; use Symfony\Component\DependencyInjection\ParameterBag\ParameterBagInterface; use Symfony\Component\DependencyInjection\ParameterBag\ParameterBagInterface; use Symfony\Component\DependencyInjection\ParameterBag\ParameterBag; use Symfony\Component\DependencyInjection\ParameterBag\ParameterBagInterface; use Symfony\Component\DependencyInjection\ParameterBag\ParameterBagInterface; use Symfony\Component\DependencyInjection\ParameterBag\ParameterBagInterface; use Symfony\Component\DependencyInjection\ParameterBag\ParameterBagInterface; use Symfony\Component\DependencyInjection\ParameterBag\ParameterBagInterface; use Symfony\Component\DependencyInjection\ParameterBag\ParameterBagInterface; use Symfony\Component\DependencyInjection\ParameterBag\ParameterBagInterface; use Symfony\Component\DependencyInjection\ParameterBag\ParameterBagInterface; use Symfony\Component\DependencyInjection\ParameterBag\ParameterBagInterface;
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */ package org.apache.beam.runners.core;  import static org.junit.Assert.assertEquals; import static org.junit.Assert.assertFalse; import static org.junit.Assert.assertNotNull; import static org.junit.Assert.assertNull; import static org.junit.Assert.assertTrue; import static org.junit.Assert.fail;  import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Iterables; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import com.google.common.util.concurrent.Futures; import com.google.common.util.concurrent.ListenableFuture; import com.google.common.util.concurrent.ListeningExecutorService; import com.google.common.util.concurrent.MoreExecutors; import com.google.common.util.concurrent.ThreadFactoryBuilder; import com.google.common.util.concurrent.ThreadFactoryProvider; import com.google.common.util.concurrent.TimeUnit; import com.google.common.util.concurrent.
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
 (function (angular) {     'use strict';      angular         .module('myApp')         .controller('MainCtrl', MainCtrl);      MainCtrl.$inject = ['$scope', '$http', '$location'];      function MainCtrl($scope, $http, $location) {         var vm = this;          vm.login = login;         vm.logout = logout;          function login() {             $http({                 method: 'POST',                 url: '/login',                 data: {                     username: $scope.username,                     password: $scope.password                 }             }).success(function (data) {                 $location.path('/');             }).error(function (data) {                 console.log(data);             });         }          function logout() {             $http({                 method: 'POST',                 url: '/logout',                 data: {                     username: $scope.username,                     password: $scope.password                 }             }).success(function (data) {                 $location.path('/');             }).error(function (data) {                 console.log(data);             });         }     } })(angular)); 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name')             ->add('description')         ;     }      /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product';     } } 
.js');  describe('lib.js', function () {    describe('parse.js', function () {      describe('parse.js', function () {        it('should parse a string', function () {         expect(parse('abc')).toEqual('abc');         expect(parse('abc')).toEqual('abc');         expect(parse('abc')).toEqual('abc');         expect(parse('abc')).toEqual('abc');         expect(parse('abc')).toEqual('abc');         expect(parse('abc')).toEqual('abc');         expect(parse('abc')).toEqual('abc');         expect(parse('abc')).toEqual('abc');         expect(parse('abc')).toEqual('abc');         expect(parse('abc')).toEqual('abc');         expect(parse('abc')).toEqual('abc');         expect(parse('abc')).toEqual('abc');         expect(parse('abc')).toEqual('abc');         expect(parse('abc')).toEqual('abc');         expect(parse('abc')).toEqual('abc');         expect(parse('abc')).toEqual('abc');         expect(parse('abc')).toEqual('abc');         expect(parse('abc')).toEqual('abc');         expect(parse('abc')).toEqual('abc');         expect(parse('abc')).toEqual('abc');         expect(parse('abc')).toEqual('abc');         expect(parse('abc')).toEqual('abc');         expect(parse('abc')).toEqual('abc');         expect(parse('abc')).toEqual('abc');         expect(parse('abc')).toEqual('abc');         expect(parse('abc')).toEqual('abc');         expect(parse('abc')).toEqual('abc');         expect(parse('abc')).toEqual('abc');         expect(parse('abc')).toEqual('abc');         expect(parse('abc')).toEqual('abc');         expect(parse('abc')).toEqual('abc');         expect(parse('abc')).toEqual('abc');         expect(parse('abc')).toEqual('
  var _ = function () {             debugger;  var _ = function () {             debugger;  var _ = function () {             debugger;  var _ = function () {             debugger;  var _ = function () {             debugger;  var _ = function () {             debugger;  var _ = function () {             debugger;  var _ = function () {             debugger;  var _ = function () {             debugger;  var _ = function () {             debugger;  var _ = function () {             debugger;  var _ = function () {             debugger;  var _ = function () {             debugger;  var _ = function () {             debugger;  var _ = function () {             debugger;  var _ = function () {             debugger;  var _ = function () {             debugger;  var _ = function () {             debugger;  var _ = function () {             debugger;  var _ = function () {             debugger;  var _ = function () {             debugger;  var _ = function () {             debugger;  var _ = function () {             debugger;  var _ = function () {             debugger;  var _ = function () {             debugger;  var _ = function () {             debugger;  var _ = function () {             debugger;  var _ = function () {             debugger;  var _ = function () {             debugger;  var _ = function () {             debugger;  var _ = function () {             debugger;  var _ = function () {             debugger;  var _ = function () {             debugger;  var _ = function () {             debugger;  var _ = function () {             debugger;  var _ = function () {             debugger;  var _ = function () {             debugger;  var _ = function () {             debugger;  var _ = function () {             debugger;  var _ = function () {             debugger;  var _ = function () {             debugger;  var _ = function () {             debugger;  var _ = function () {             debugger;  var _ = function () {             debugger;  var _ = function () {             debugger;  var _ = function () {             debugger;  var _
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.hyracks.algebricks.core.algebra.operators.logical;  import org.apache.hyracks.algebricks.core.algebra.base.ILogicalExpression; import org.apache.hyracks.algebricks.core.algebra.base.ILogicalOperator; import org.apache.hyracks.algebricks.core.algebra.base.ILogicalOperatorDescriptor; import org.apache.hyracks.algebricks.core.algebra.base.ILogicalOperatorDescriptorFactory; import org.apache.hyracks.algebricks.core.algebra.base.LogicalOperatorDescriptor; import org.apache.hyracks.algebricks.core.algebra.base.LogicalOperatorDescriptorFactory; import org.apache.hyracks.algebricks.core.algebra.base.LogicalPlan; import org.apache.hyracks.algebricks.core.algebra.base.LogicalPlanVisitor; import org.apache.hyracks.algebricks.core.algebra.base.LogicalPlanVisitorFactory; import org.apache.hyracks.algebricks.core.algebra.expressions.IExpressionEvaluator; import org.apache.hyracks.algebricks.core
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.functions.IFunctionDescriptorProvider; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.data.accessors.ITupleReference; import org.apache.hyracks.dataflow.common.data
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_form_order';     } } 
<?php  /*  * This file is part of the Symfony package.  *  * (c) Fabien Potencier <fabien@symfony.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace Symfony\Bundle\FrameworkBundle\DependencyInjection;  use Symfony\Component\DependencyInjection\ContainerBuilder; use Symfony\Component\Config\FileLocator; use Symfony\Component\HttpKernel\DependencyInjection\Extension; use Symfony\Component\DependencyInjection\Loader;  /**  * This is the class that loads and manages your bundle configuration  *  * To learn more see {@link http://symfony.com/doc/current/cookbook/bundles/extension.html}  */ class SymfonyFrameworkExtension extends Extension {     /**      * {@inheritdoc}      */     public function load(array $configs, ContainerBuilder $container)     {         $configuration = new Configuration();         $config = $this->processConfiguration($configuration, $configs);          $loader = new Loader\YamlFileLoader($container, new FileLocator(__DIR__.'/../Resources/config'));         $loader->load('services.yml');     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */ package org.apache.beam.runners.core;  import static org.junit.Assert.assertEquals; import static org.junit.Assert.assertFalse; import static org.junit.Assert.assertNotNull; import static org.junit.Assert.assertNull; import static org.junit.Assert.assertTrue; import static org.junit.Assert.fail;  import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Iterables; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import com.google.common.util.concurrent.Futures; import com.google.common.util.concurrent.ListenableFuture; import com.google.common.util.concurrent.MoreExecutors; import com.google.common.util.concurrent.ThreadFactoryBuilder; import com.google.common.util.concurrent.ThreadFactory; import com.google.common.util.concurrent.TimeUnit; import com.google.common.util.concurrent.TimeoutException; import com.google.common.util.concurrent.TimeoutException.
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', [                 'label' => 'sylius.form.product.name',                 'required' => false,             ])             ->add('description', 'textarea', [                 'label' => 'sylius.form.product.description',                 'required' => false,             ])         ;     }      /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults([             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ]);     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */ package org.apache.beam.runners.core;  import static org.junit.Assert.assertEquals; import static org.junit.Assert.assertFalse; import static org.junit.Assert.assertNotNull; import static org.junit.Assert.assertNull; import static org.junit.Assert.assertTrue; import static org.junit.Assert.fail;  import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Iterables; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import com.google.common.util.concurrent.Futures; import com.google.common.util.concurrent.ListenableFuture; import com.google.common.util.concurrent.ListeningExecutorService; import com.google.common.util.concurrent.MoreExecutors; import com.google.common.util.concurrent.ThreadFactoryBuilder; import com.google.common.util.concurrent.ThreadFactory; import com.google.common.util.concurrent.TimeUnit; import com.google.common.util.concurrent.TimeoutException
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
[ configLocation ] = configFile;  var config = require( configLocation );  var patternLibrary = require( './generators/pattern-library/example/pattern-library.js' );  var pattern = require( './generators/pattern-library/example/pattern.js' );  var patterns = require( './generators/pattern-library/example/patterns.js' );  var patternLibrary = require( './generators/pattern-library/example/pattern-library.js' );  var patterns = require( './generators/pattern-library/example/patterns.js' );  var patterns = require( './generators/pattern-library/example/patterns.js' );  var patterns = require( './generators/pattern-library/example/patterns.js' );  var patterns = require( './generators/pattern-library/example/patterns.js' );  var patterns = require( './generators/pattern-library/example/patterns.js' );  var patterns = require( './generators/pattern-library/example/patterns.js' );  var patterns = require( './generators/pattern-library/example/patterns.js' );  var patterns = require( './generators/pattern-library/example/patterns.js' );  var patterns = require( './generators/pattern-library/example/patterns.js' );  var patterns = require( './generators/pattern-library/example/patterns.js' );  var patterns = require( './generators/pattern-library/example/patterns.js' );  var patterns = require( './generators/pattern-library/example/patterns.js' );  var patterns = require( './generators/pattern-library/example/patterns.js' );  var patterns = require( './generators/pattern-library/example/patterns.js' );  var patterns = require( './generators/pattern-library/example/patterns.js' );  var patterns = require( './generators/pattern-library/example/patterns.js' );  var patterns = require( './generators/pattern-library/example/patterns.js' );  var patterns = require( './generators/pattern-library/example/patterns.js' );  var patterns = require( './generators/pattern-library/example/patterns.js' );  var patterns =
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.product.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.product.name',                 ),             ))             ->add('price', 'text', array(                 'label' => 'sylius.form.product.price',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.product.price',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
<?php  /*  * This file is part of the Symfony package.  *  * (c) Fabien Potencier <fabien@symfony.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace Symfony\Bundle\FrameworkBundle\DependencyInjection;  use Symfony\Component\DependencyInjection\ContainerBuilder; use Symfony\Component\Config\FileLocator; use Symfony\Component\HttpKernel\DependencyInjection\Extension; use Symfony\Component\DependencyInjection\Loader;  /**  * This is the class that loads and manages your bundle configuration  *  * To learn more see {@link http://symfony.com/doc/current/cookbook/bundles/extension.html}  */ class SymfonyFrameworkExtension extends Extension {     /**      * {@inheritDoc}      */     public function load(array $configs, ContainerBuilder $container)     {         $configuration = new Configuration();         $config = $this->processConfiguration($configuration, $configs);          $loader = new Loader\YamlFileLoader($container, new FileLocator(__DIR__.'/../Resources/config'));         $loader->load('services.yml');     } } 
<?php /**  * Zend Framework  *  * LICENSE  *  * This source file is subject to the new BSD license that is bundled  * with this package in the file LICENSE.txt.  * It is also available through the world-wide-web at this URL:  * http://framework.zend.com/license/new-bsd  * If you did not receive a copy of the license and are unable to  * obtain it through the world-wide-web, please send an email  * to license@zend.com so we can send you a copy immediately.  *  * @category   Zend  * @package    Zend_Service  * @subpackage DeveloperGarden  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  * @version    $Id$  */  /**  * @see Zend_Service_DeveloperGarden_Exception  */ require_once 'Zend/Service/DeveloperGarden/Exception.php';  /**  * @category   Zend  * @package    Zend_Service  * @subpackage DeveloperGarden  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  */ class Zend_Service_DeveloperGarden_Exception extends Zend_Service_DeveloperGarden_Exception { } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control'                 )             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control'                 )             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */ package org.apache.beam.runners.core;  import static com.google.common.base.Preconditions.checkArgument; import static com.google.common.base.Preconditions.checkNotNull; import static com.google.common.base.Preconditions.checkState; import static java.util.Objects.requireNonNull;  import com.google.common.annotations.VisibleForTesting; import com.google.common.base.Preconditions; import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Iterables; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import com.google.common.util.concurrent.Futures; import com.google.common.util.concurrent.ListenableFuture; import com.google.common.util.concurrent.ListeningExecutorService; import com.google.common.util.concurrent.MoreExecutors; import com.google.common.util.concurrent.ThreadFactoryBuilder; import com.google.common.util.concurrent.TimeUnit; import com.google.common.util.concurrent.TimeoutException; import com
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */  package org.apache.ignite.internal.processors.cache;  import java.util.ArrayList; import java.util.Collection; import java.util.Collections; import java.util.HashMap; import java.util.HashSet; import java.util.Iterator; import java.util.List; import java.util.Map; import java.util.Set; import java.util.concurrent.ConcurrentHashMap; import java.util.concurrent.ConcurrentMap; import java.util.concurrent.atomic.AtomicBoolean; import java.util.concurrent.atomic.AtomicInteger; import java.util.concurrent.atomic.AtomicLong; import java.util.concurrent.atomic.AtomicReference; import java.util.concurrent.atomic.AtomicReferenceArray; import java.util.concurrent.atomic.AtomicLongArray; import org.apache.ignite.IgniteCheckedException; import org.apache.ignite.IgniteException; import org.apache.ignite.configuration.CacheConfiguration; import org.apache.ignite.configuration.IgniteConfiguration; import org.apache.ignite.internal.IgniteEx; import org.apache.ignite.internal.util.typedef.F; import org.apache.ignite.internal.util.typedef.G; 
<?php /**  * Zend Framework  *  * LICENSE  *  * This source file is subject to the new BSD license that is bundled  * with this package in the file LICENSE.txt.  * It is also available through the world-wide-web at this URL:  * http://framework.zend.com/license/new-bsd  * If you did not receive a copy of the license and are unable to  * obtain it through the world-wide-web, please send an email  * to license@zend.com so we can send you a copy immediately.  *  * @category   Zend  * @package    Zend_Service  * @subpackage DeveloperGarden  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  * @version    $Id$  */  /**  * @see Zend_Service_DeveloperGarden_Exception  */ require_once 'Zend/Service/DeveloperGarden/Exception.php';  /**  * @category   Zend  * @package    Zend_Service  * @subpackage DeveloperGarden  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  */ class Zend_Service_DeveloperGarden_Exception extends Zend_Service_DeveloperGarden_Exception { } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.product.name',                 'required' => false,             ))             ->add('price', 'number', array(                 'label' => 'sylius.form.product.price',                 'required' => false,             ))         ;     }      /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of the Symfony package.  *  * (c) Fabien Potencier <fabien@symfony.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace Symfony\Component\Form\Extension\Core\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\Form\FormEvent; use Symfony\Component\Form\FormEvents; use Symfony\Component\Form\FormInterface; use Symfony\Component\Form\FormView; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Fabien Potencier <fabien@symfony.com>  */ class TextType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('text', 'text')             ->add('submit', 'submit')         ;     }      /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Symfony\Component\Form\Extension\Core\Type\TextType'         ));     }      /**      * @return string      */     public function getName()     {         return 'symfony_form_extension_core_type_text';     } } 
// Copyright (c) 2012 The Chromium Authors. All rights reserved. // Use of this source code is governed by a BSD-style license that can be // found in the LICENSE file.  #include "base/bind.h" #include "base/bind_helpers.h" #include "base/command_line.h" #include "base/files/file_path.h" #include "base/files/file_util.h" #include "base/logging.h" #include "base/memory/scoped_ptr.h" #include "base/memory/weak_ptr.h" #include "base/message_loop/message_loop.h" #include "base/prefs/pref_service.h" #include "base/prefs/pref_service_syncable.h" #include "base/prefs/scoped_user_pref_update.h" #include "base/strings/string_number_conversions.h" #include "base/strings/string_util.h" #include "base/strings/stringprintf.h" #include "base/strings/utf_string_conversions.h" #include "base/threading/thread.h" #include "base/threading/thread_restrictions.h" #include "base/time/time.h" #include "base/values.h" #include "content/public/browser/browser_thread.h" #include "content/public/browser/notification_service.h" #include "content/public/browser/notification_types.h" #include "content/public/browser/render_frame_host.h" #include "content/public/browser/render_process_host.h" #include "content/public/browser/render_view_host.h" #include "content/public/browser/render_widget_host.h" #include "content/public/browser/web_contents.h" #include "content/public/browser/web_contents_observer.h" #include "content/public/common/content_switches.h" #include "content/public/common/
 		return this._createMesh(ctor, defaults, arguments); 	},  	_createMesh: function(ctor, defaults, arguments) { 		if (arguments.length === 0) { 			return this._createMesh; 		} 		if (arguments.length === 1) { 			return this._createMesh; 		} 		if (arguments.length === 2) { 			return this._createMesh; 		} 		if (arguments.length === 3) { 			return this._createMesh; 		} 		if (arguments.length === 4) { 			return this._createMesh; 		} 		if (arguments.length === 5) { 			return this._createMesh; 		} 		if (arguments.length === 6) { 			return this._createMesh; 		} 		if (arguments.length === 7) { 			return this._createMesh; 		} 		if (arguments.length === 8) { 			return this._createMesh; 		} 		if (arguments.length === 9) { 			return this._createMesh; 		} 		if (arguments.length === 10) { 			return this._createMesh; 		} 		if (arguments.length === 11) { 			return this._createMesh; 		} 		if (arguments.length === 12) { 			return this._createMesh; 		} 		if (arguments.length === 13) { 			return this._createMesh; 		} 		if (arguments.length === 14) { 			return this._createMesh; 		} 		if (arguments.length === 15) { 			return this._createMesh; 		} 		if (arguments.length === 16) { 			return this._createMesh; 		} 		if (arguments.length === 17) { 			return this._createMesh; 		} 		if (arguments.length === 18) { 			return this._createMesh; 		} 
<?php  /*  * This file is part of the Symfony package.  *  * (c) Fabien Potencier <fabien@symfony.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace Symfony\Component\DependencyInjection\Compiler;  use Symfony\Component\DependencyInjection\ContainerBuilder; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\RuntimeException; use Symfony\Component\DependencyInjection\ParameterBag\ParameterBag; use Symfony\Component\DependencyInjection\Reference; use Symfony\Component\DependencyInjection\ReferenceCollection; use Symfony\Component\DependencyInjection\ParameterBag\ParameterBagInterface; use Symfony\Component\DependencyInjection\ReferenceInterface; use Symfony\Component\DependencyInjection\ReferenceService; use Symfony\Component\DependencyInjection\ReferenceServiceFactory; use Symfony\Component\DependencyInjection\ReferenceServiceFactoryInterface; use Symfony\Component\DependencyInjection\ReferenceServiceReference; use Symfony\Component\DependencyInjection\ReferenceServiceReferenceInterface; use Symfony\Component\DependencyInjection\ParameterBag\ParameterBagInterface; use Symfony\Component\DependencyInjection\ReferenceServiceReferenceFactory; use Symfony\Component\DependencyInjection\ReferenceServiceReferenceFactoryInterface; use Symfony\Component\DependencyInjection\ReferenceServiceReferenceFactoryInterface; use Symfony\Component\DependencyInjection\ReferenceServiceReferenceFactoryInterface; use Symfony\Component\DependencyInjection\ReferenceServiceReferenceFactoryInterface; use Symfony\Component\DependencyInjection\ReferenceServiceReferenceFactoryInterface; use Symfony\Component\DependencyInjection\ReferenceServiceReferenceFactoryInterface; use Symfony\Component\DependencyInjection\ReferenceServiceReferenceFactoryInterface; use Symfony\Component\DependencyInjection\ReferenceServiceReferenceFactoryInterface; use Symfony\Component\DependencyInjection\ReferenceServiceReferenceFactoryInterface; use Symfony\Component\DependencyInjection\ReferenceServiceReferenceFactoryInterface; use Symfony\Component\DependencyInjection\ReferenceServiceReferenceFactoryInterface; use Symfony\Component\DependencyInjection\ReferenceServiceReferenceFactoryInterface; use Symfony\Component\DependencyInjection\ReferenceServiceReferenceFactoryInterface; use Symfony\Component\DependencyInjection\ReferenceServiceReferenceFactoryInterface; use Symfony\Component\DependencyInjection\ReferenceServiceReferenceFactoryInterface; use
// Copyright (c) Microsoft Corporation. All rights reserved. // Licensed under the MIT License. See License.txt in the project root for // license information. // // Code generated by Microsoft (R) AutoRest Code Generator. // Changes may cause incorrect behavior and will be lost if the code is // regenerated.  namespace Microsoft.Azure.Management.RecoveryServices.Backup.Models {     using Microsoft.Rest;     using Newtonsoft.Json;     using System.Collections;     using System.Collections.Generic;     using System.Linq;     using System.Net;     using System.Net.Http;     using System.Threading;     using System.Threading.Tasks;     using Microsoft.Rest.Serialization;     using Microsoft.Rest.Azure;     using Models;     using Newtonsoft.Json;     using System.Collections;     using System.Collections.Generic;     using System.Collections.ObjectModel;     using System.Linq;     using System.Net.Http;     using System.Net.Http.Headers;     using Microsoft.Rest.Azure;     using Models;     using Newtonsoft.Json;     using System.Collections;     using System.Collections.ObjectModel;     using System.Net.Http;     using System.Net.Http.Headers;     using System.Net.Http.Headers.Accept;     using System.Net.Http.Headers.Authorization;     using System.Net.Http.Headers.Content;     using System.Net.Http.Headers.Content-Type;     using System.Net.Http.Headers.Accept-Encoding;     using System.Net.Http.Headers.Content-Disposition;     using System.Net.Http.Headers.Content-Location;     using System.Net.Http.Headers.Cache;     using System.Net.Http.Headers.Cache-Control;     using System.Net.Http.Headers.Content-Type;     using System.Net.Http.Headers.Pragma;     using System.Net.Http.Headers.ETag;     using System.Net.Http.Headers.Pragma;     using System.Net.Http.Headers.
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.functions.IFunctionDescriptorProvider; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.data.accessors.ITupleReference; import org.apache.hyracks.dataflow.common.data
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', [                 'label' => 'sylius.form.product.name',                 'required' => false,             ])             ->add('description', 'textarea', [                 'label' => 'sylius.form.product.description',                 'required' => false,             ])         ;     }      /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults([             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ]);     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
// Copyright (c) Microsoft Corporation. All rights reserved. // Licensed under the MIT License.  // <auto-generated/>  #nullable disable  using System; using System.Threading; using System.Threading.Tasks; using Azure; using Azure.Core; using Azure.Core.Pipeline; using Azure.ResourceManager.Compute; using Azure.ResourceManager.Compute.Models; using Azure.ResourceManager.Resources; using Azure.ResourceManager.Resources.Models; using Azure.ResourceManager.Resources.Models; using Azure.ResourceManager.Resources.Models; using Azure.ResourceManager.Resources.Models; using Azure.ResourceManager.Resources.Models; using Azure.ResourceManager.Resources.Models; using Azure.ResourceManager.Resources.Models; using Azure.ResourceManager.Resources.Models; using Azure.ResourceManager.Resources.Models; using Azure.ResourceManager.Resources.Models; using Azure.ResourceManager.Resources.Models; using Azure.ResourceManager.Resources.Models; using Azure.ResourceManager.Resources.Models; using Azure.ResourceManager.Resources.Models; using Azure.ResourceManager.Resources.Models; using Azure.ResourceManager.Resources.Models; using Azure.ResourceManager.Resources.Models; using Azure.ResourceManager.Resources.Models; using Azure.ResourceManager.Resources.Models; using Azure.ResourceManager.Resources.Models; using Azure.ResourceManager.Resources.Models; using Azure.ResourceManager.Resources.Models; using Azure.ResourceManager.Resources.Models; using Azure.ResourceManager.Resources.Models; using Azure.ResourceManager.Resources.Models; using Azure.ResourceManager.Resources.Models; using Azure.ResourceManager.Resources.Models; using Azure.ResourceManager.Resources.Models; using Azure.ResourceManager.Resources.Models; using Azure.ResourceManager.Resources.Models; using Azure.ResourceManager.Resources.Models; using Azure.ResourceManager.Resources.Models; using Azure.ResourceManager.Resources.Models; using Azure.ResourceManager.Resources.Models; using Azure.ResourceManager.Resources.Models; using Azure.ResourceManager.Resources.Models; using Azure.ResourceManager.Resources.
 console.log("debug: system reset");    systemReset(); console.log("debug: system reset");    systemReset(); console.log("debug: system reset");    systemReset(); console.log("debug: system reset");    systemReset(); console.log("debug: system reset");    systemReset(); console.log("debug: system reset");    systemReset(); console.log("debug: system reset");    systemReset(); console.log("debug: system reset");    systemReset(); console.log("debug: system reset");    systemReset(); console.log("debug: system reset");    systemReset(); console.log("debug: system reset");    systemReset(); console.log("debug: system reset");    systemReset(); console.log("debug: system reset");    systemReset(); console.log("debug: system reset");    systemReset(); console.log("debug: system reset");    systemReset(); console.log("debug: system reset");    systemReset(); console.log("debug: system reset");    systemReset(); console.log("debug: system reset");    systemReset(); console.log("debug: system reset");    systemReset(); console.log("debug: system reset");    systemReset(); console.log("debug: system reset");    systemReset(); console.log("debug: system reset");    systemReset(); console.log("debug: system reset");    systemReset(); console.log("debug: system reset");    systemReset(); console.log("debug: system reset");    systemReset(); console.log("debug: system reset");    systemReset(); console.log("debug: system reset");    systemReset(); console.log("debug: system reset");    systemReset(); console.log("debug: system reset");    systemReset(); console.log("debug: system reset");    systemReset(); console.log("debug: system reset");    systemReset(); console.log("debug: system reset");    systemReset(); console.log("debug: system reset");    systemReset(); console.log("debug: system reset");    systemReset(); console.log("debug: system reset");    systemReset(); console.log("debug: system reset");    systemReset(); console.log("debug
﻿using System; using System.Collections.Generic; using System.Linq; using System.Text; using System.Threading.Tasks; using System.Windows; using System.Windows.Controls; using System.Windows.Data; using System.Windows.Documents; using System.Windows.Input; using System.Windows.Media; using System.Windows.Media.Imaging; using System.Windows.Navigation; using System.Windows.Shapes; using System.Windows.Shapes.Primitives; using System.Windows.Shell; using System.Windows.Data; using System.Windows.Documents; using System.Windows.Ink; using System.Windows.Input; using System.Windows.Media; using System.Windows.Media.Imaging; using System.Windows.Shapes.Primitives; using System.Windows.Shapes.DataAnnotations; using System.Windows.Documents; using System.Windows.Media.Imaging; using System.Windows.Navigation; using System.Windows.Shapes.ShapesCommon; using System.Windows.Shell.Interop; using System.Windows.Data; using System.Windows; using System.Windows.Documents; using System.Windows.Ink; using System.Windows.Input; using System.Windows.Media; using System.Windows.Media.Imaging; using System.Windows.Navigation.Primitives; using System.Windows.Shapes; using System.Windows.Shapes.Common; using System.Windows.Data; using System.Windows.Shapes.DataAnnotations; using System.Windows.Documents; using System.Windows.Input; using System.Windows.Media; using System.Windows.Media.Imaging; using System.Windows.Navigation.Primitives; using System.Windows.Shapes.DataContext; using System.Windows.Shapes; using System.Windows.Shapes.ShapesCommon; using System.Windows.Data; using System.Windows.Shapes; using System.Windows.Shapes.ShapesShapes; using System.Windows.Shell.Interop; using System.Windows.Data; using System.Windows; using System.Windows.Documents; using System.Windows.Input; using System.Windows.Media;
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */ package org.apache.beam.runners.core;  import static org.junit.Assert.assertEquals; import static org.junit.Assert.assertFalse; import static org.junit.Assert.assertNotNull; import static org.junit.Assert.assertNull; import static org.junit.Assert.assertTrue; import static org.junit.Assert.fail;  import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Iterables; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import com.google.common.util.concurrent.Futures; import com.google.common.util.concurrent.ListenableFuture; import com.google.common.util.concurrent.ListeningExecutorService; import com.google.common.util.concurrent.MoreExecutors; import com.google.common.util.concurrent.ThreadFactoryBuilder; import com.google.common.util.concurrent.ThreadFactoryProvider; import com.google.common.util.concurrent.TimeUnit; import com.google.common.util.concurrent.

<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.product.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.product.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.product.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.product.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
     const debug = Debug('addUser');      if (!body) {         return res.status(400).send({             message: 'No body provided'         });     }      if (!body.username) {         return res.status(400).send({             message: 'Username is required'         });     }      if (!body.email) {         return res.status(400).send({             message: 'Email is required'         });     }      if (!body.password) {         return res.status(400).send({             message: 'Password is required'         });     }      if (!body.password_confirmation) {         return res.status(400).send({             message: 'Password confirmation is required'         });     }      if (!body.password_reset_token) {         return res.status(400).send({             message: 'Password reset token is required'         });     }      if (!body.password_reset_token_expires) {         return res.status(400).send({             message: 'Password reset token expires is required'         });     }      if (!body.password_reset_token_expires_in) {         return res.status(400).send({             message: 'Password reset token expires in is required'         });     }      if (!body.password_reset_token_type) {         return res.status(400).send({             message: 'Password reset token type is required'         });     }      if (!body.password_reset_token_value) {         return res.status(400).send({             message: 'Password reset token value is required'         });     }      if (!body.password_reset_token_expires) {         return res.status(400).send({             message: 'Password reset token expires is required'         });     }      if (!body.password_reset_token_expires_in) {         return res.status(400).send({             message: 'Password reset token expires in is required'         });     }  
(function() {     $timeout(function() {       $timeout(function() {         $timeout(function() {           $timeout(function() {             $timeout(function() {               $timeout(function() {                 $timeout(function() {                   $timeout(function() {                     $timeout(function() {                       $timeout(function() {                         $timeout(function() {                           $timeout(function() {                             $timeout(function() {                               $timeout(function() {                                 $timeout(function() {                                   $timeout(function() {                                   $timeout(function() {                                   $timeout(function() {                                   $timeout(function() {                                   $timeout(function() {                                   $timeout(function() {                                   $timeout(function() {                                   $timeout(function() {                                   $timeout(function() {                                   $timeout(function() {                                   $timeout(function() {                                   $timeout(function() {                                   $timeout(function() {                                   $timeout(function() {                                   $timeout(function() {                                   $timeout(function() {                                   $timeout(function() {                                   $timeout(function() {                                   $timeout(function() {                                   $timeout(function() {                                   $timeout(function() {                                   $timeout(function() {                                   $timeout(function() {                                   $timeout(function() {                                   $timeout(function() {                                   $timeout(function() {                                   $timeout(function() {                                   $timeout(function() {                                   $timeout(function() {                                   $timeout(function() {                                   $timeout(function() {                                   $timeout(function() {                                   $timeout(function() {                                   $timeout(function() {                                   $timeout(function() {                                   $timeout(function() {                                   $timeout(function() {                                   $timeout(function() {                                   $timeout(function() {                                   $timeout(function() {                                   $timeout(function() {                                   $timeout(function() {                                   $timeout(function() {                                   $timeout(function() {                                   $timeout(function() {                                   $timeout(function() {                                   $timeout(function() {                                   $timeout(function() {                                   $
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */ package org.apache.beam.runners.core;  import static org.junit.Assert.assertEquals; import static org.junit.Assert.assertFalse; import static org.junit.Assert.assertNotNull; import static org.junit.Assert.assertNull; import static org.junit.Assert.assertTrue; import static org.junit.Assert.fail; import static org.mockito.Mockito.mock; import static org.mockito.Mockito.verify; import static org.mockito.Mockito.when;  import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Iterables; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import com.google.common.util.concurrent.Futures; import com.google.common.util.concurrent.ListenableFuture; import com.google.common.util.concurrent.SettableFuture; import com.google.common.util.concurrent.ThreadFactoryBuilder; import com.google.common.util.concurrent.ThreadFactoryProvider; import com.google.
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.product.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.product.name',                 ),             ))             ->add('price', 'number', array(                 'label' => 'sylius.form.product.price',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.product.price',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */ package org.apache.beam.runners.core;  import static org.junit.Assert.assertEquals; import static org.junit.Assert.assertFalse; import static org.junit.Assert.assertNotNull; import static org.junit.Assert.assertNull; import static org.junit.Assert.assertSame; import static org.junit.Assert.assertTrue; import static org.junit.Assert.fail;  import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Iterables; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import com.google.common.util.concurrent.Futures; import com.google.common.util.concurrent.ListenableFuture; import com.google.common.util.concurrent.ListeningExecutorService; import com.google.common.util.concurrent.MoreExecutors; import com.google.common.util.concurrent.ThreadFactoryBuilder; import com.google.common.util.concurrent.TimeUnit; import com.google.common.util.concurrent.TimeoutException; import
  const group   = file.openGroup('pmc/refinement');    it("should be compression filter info ", function*() {     const group   = file.openGroup('pmc/refinement');      it("should be compression filter info ", function*() {       const group   = file.openGroup('pmc/refinement');        it("should be compression filter info ", function*() {         const group   = file.openGroup('pmc/refinement');          it("should be compression filter info ", function*() {           const group   = file.openGroup('pmc/refinement');            it("should be compression filter info ", function*() {             const group   = file.openGroup('pmc/refinement');              it("should be compression filter info ", function*() {               const group   = file.openGroup('pmc/refinement');                it("should be compression filter info ", function*() {                 const group   = file.openGroup('pmc/refinement');                  it("should be compression filter info ", function*() {                   const group   = file.openGroup('pmc/refinement');                    it("should be compression filter info ", function*() {                     const group   = file.openGroup('pmc/refinement');                      it("should be compression filter info ", function*() {                       const group   = file.openGroup('pmc/refinement');                        it("should be compression filter info ", function*() {                         const group   = file.openGroup('pmc/refinement');                          it("should be compression filter info ", function*() {                           const group   = file.openGroup('pmc/refinement');                            it("should be compression filter info ", function*() {                             const group   = file.openGroup('pmc/refinement');                              it("should be compression filter info ", function*() {                               const group   = file.openGroup('pmc/refinement');                                it("should be compression filter info ", function*() {                                 const group   = file.openGroup('pmc/refinement
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
// Copyright (c) 2012 The Chromium Authors. All rights reserved. // Use of this source code is governed by a BSD-style license that can be // found in the LICENSE file.  #ifndef CHROME_BROWSER_UI_WEBUI_CHROMEOS_LOGIN_SCREEN_H_ #define CHROME_BROWSER_UI_WEBUI_CHROMEOS_LOGIN_SCREEN_H_  #include <string>  #include "base/basictypes.h" #include "base/compiler_specific.h" #include "base/memory/scoped_ptr.h" #include "base/memory/weak_ptr.h" #include "base/observer_list.h" #include "base/time/time.h" #include "chrome/browser/profiles/profile.h" #include "chrome/browser/ui/browser.h" #include "chrome/browser/ui/browser_finder.h" #include "chrome/browser/ui/browser_list.h" #include "chrome/browser/ui/browser_window.h" #include "chrome/browser/ui/tabs/tab_strip_model.h" #include "chrome/common/chrome_notification_types.h" #include "chrome/common/url_constants.h" #include "content/public/browser/notification_observer.h" #include "content/public/browser/notification_registrar.h" #include "content/public/browser/notification_source.h" #include "content/public/browser/web_contents.h" #include "content/public/browser/web_contents_observer.h" #include "content/public/browser/web_ui.h" #include "content/public/browser/web_ui_data_source.h" #include "grit/generated_resources.h" #include "grit/theme_resources.h" #include "ui/base/l10n/l10n_util.h" #include "ui/base/resource/resource_bundle.h" #include "
<?php  /*  * This file is part of the Symfony package.  *  * (c) Fabien Potencier <fabien@symfony.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace Symfony\Component\Form\Extension\Core\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface; use Symfony\Component\Validator\Constraints\NotBlank; use Symfony\Component\Validator\Constraints\Length; use Symfony\Component\Validator\Constraints\Email; use Symfony\Component\Validator\Constraints\Regex; use Symfony\Component\Validator\Constraints\NotBlank; use Symfony\Component\Validator\Constraints\Length; use Symfony\Component\Validator\Constraints\EmailType; use Symfony\Component\Validator\Constraints\RegexType; use Symfony\Component\Validator\Exception\UnexpectedTypeException; use Symfony\Component\Validator\Validator; use Symfony\Component\Validator\ValidatorInterface;  /**  * @author Fabien Potencier <fabien@symfony.com>  */ class EmailType extends AbstractType {     /**      * {@inheritdoc}      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('subject', 'text', array(                 'label' => 'subject',                 'required' => false,             ))             ->add('message', 'textarea', array(                 'label' => 'message',                 'required' => false,             ))         ;     }      /**      * {@inheritdoc}      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Symfony\Component\Form\Extension\Core\Type\EmailType'         ));     }      /**      * {@inheritdoc}      */     public function getName()     {         return 'symfony_form_email';     } } 

<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'required' => false,             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'required' => false,             ))         ;     }      /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
     if (e.error) {         console.log(e.error);     } else {         console.log(e.result);     } });  db.on('error', function(e) {     console.log(e.error); });  db.on('open', function(e) {     console.log(e.result); });  db.on('close', function(e) {     console.log(e.result); });  db.on('open', function(e) {     console.log(e.result); });  db.on('close', function(e) {     console.log(e.result); });  db.on('open', function(e) {     console.log(e.result); });  db.on('open', function(e) {     console.log(e.result); });  db.on('open', function(e) {     console.log(e.result); });  db.on('open', function(e) {     console.log(e.result); });  db.on('open', function(e) {     console.log(e.result); });  db.on('open', function(e) {     console.log(e.result); });  db.on('open', function(e) {     console.log(e.result); });  db.on('open', function(e) {     console.log(e.result); });  db.on('open', function(e) {     console.log(e.result); });  db.on('open', function(e) {     console.log(e.result); });  db.on('open', function(e) {     console.log(e.result); });  db.on('open', function(e) {     console.log(e.result); });  db.on('open', function(e) {     console.log(e.result); });  db.on('open', function(e) {     console.log(e.result
     that.setValid( $( this ), 'required' );                         if ( typeof validCons !== 'undefined' && validCons === true ) {         that.setValid( $( this ), 'email' );                         if ( typeof validCons !== 'undefined' && validCons === true ) {             that.setValid( $( this ), 'email' );                         if ( typeof validCons !== 'undefined' && validCons === true ) {                 that.setValid( $( this ), 'email' );                         if ( typeof validCons !== 'undefined' && validCons === true ) {                     that.setValid( $( this ), 'email' );                         if ( typeof validCons !== 'undefined' && validCons === true ) {                         that.setValid( $( this ), 'email' );                         if ( typeof validCons !== 'undefined' && validCons === true ) {                             that.setValid( $( this ), 'email' );                         if ( typeof validCons !== 'undefined' && validCons === true ) {                                 that.setValid( $( this ), 'email' );                         if ( typeof validCons !== 'undefined' && validCons === true ) {                                     that.setValid( $( this ), 'email' );                         if ( typeof validCons !== 'undefined' && validCons === true ) {                                         that.setValid( $( this ), 'email' );                         if ( typeof validCons !== 'undefined' && validCons === true ) {                                             that.setValid( $( this ), 'email' );                         if ( typeof validCons !== 'undefined' && validCons === true ) {                                                 that.setValid( $( this ), 'email' );                         if ( typeof validCons !== 'undefined' && validCons === true ) {                                                     that.setValid( $( this ), 'email' );                         if ( typeof validCons !== 'undefined' && validCons === true ) {                                                         that.setValid( $( this ), 'email' );                         if ( typeof validCons !== 'undefined' && validCons === true ) {                                                             that.setValid( $( this ), 'email' );                         if ( typeof validCons !== 'undefined' && validCons === true ) {                                                                 that.setValid( $( this ), 'email' );                         if ( typeof validCons !== '
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.product.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.product.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.product.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.product.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of the Symfony package.  *  * (c) Fabien Potencier <fabien@symfony.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace Symfony\Component\Form\Extension\Core\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface; use Symfony\Component\Validator\Constraints as Assert; use Symfony\Component\Validator\Constraints\NotBlank; use Symfony\Component\Validator\Constraints\Length; use Symfony\Component\Validator\Constraints\Regex; use Symfony\Component\Validator\Exception\InvalidArgumentException; use Symfony\Component\Validator\Exception\UnexpectedTypeException; use Symfony\Component\Validator\Validator; use Symfony\Component\Validator\ValidatorInterface; use Symfony\Component\Validator\ValidatorFactory; use Symfony\Component\Validator\ValidatorFactoryInterface; use Symfony\Component\Validator\ValidatorFactoryInterface\ValidatorFactoryInterface; use Symfony\Component\Validator\ValidatorInterface; use Symfony\Component\Validator\ValidatorFactoryInterface\ValidatorFactoryInterface; use Symfony\Component\Validator\ValidatorInterface; use Symfony\Component\Validator\ValidatorFactoryInterface\ValidatorFactoryInterface; use Symfony\Component\Validator\ValidatorInterface; use Symfony\Component\Validator\ValidatorFactoryInterface\ValidatorFactoryInterface; use Symfony\Component\Validator\ValidatorInterface; use Symfony\Component\Validator\ValidatorFactoryInterface\ValidatorFactoryInterface; use Symfony\Component\Validator\ValidatorInterface; use Symfony\Component\Validator\ValidatorFactoryInterface\ValidatorFactoryInterface; use Symfony\Component\Validator\ValidatorInterface; use Symfony\Component\Validator\ValidatorFactoryInterface\ValidatorFactoryInterface; use Symfony\Component\Validator\ValidatorInterface; use Symfony\Component\Validator\ValidatorFactoryInterface\ValidatorFactoryInterface; use Symfony\Component\Validator\ValidatorInterface; use Symfony\Component\Validator\ValidatorInterface; use Symfony\Component\Validator\ValidatorInterface; use Symfony\Component\Validator\ValidatorInterface; use Symfony\Component\Validator\ValidatorInterface; use Symfony\Component\Validator\ValidatorInterface;
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
 function screen() { 	var screen = { 		width: window.innerWidth, 		height: window.innerHeight, 		left: 0, 		top: 0, 		width: window.innerWidth, 		height: window.innerHeight, 		left: 0, 		top: 0, 		width: window.innerWidth, 		height: window.innerHeight, 		left: 0, 		top: 0, 		width: window.innerWidth, 		height: window.innerHeight, 		left: 0, 		top: 0, 		width: window.innerWidth, 		height: window.innerHeight, 		left: 0, 		top: 0, 		width: window.innerWidth, 		height: window.innerHeight, 		left: 0, 		top: 0, 		width: window.innerWidth, 		height: window.innerHeight, 		left: 0, 		top: 0, 		width: window.innerWidth, 		height: window.innerHeight, 		left: 0, 		top: 0, 		width: window.innerWidth, 		height: window.innerHeight, 		left: 0, 		top: 0, 		width: window.innerWidth, 		height: window.innerHeight, 		left: 0, 		top: 0, 		width: window.innerWidth, 		height: window.innerHeight, 		left: 0, 		top: 0, 		width: window.innerWidth, 		height: window.innerHeight, 		left: 0, 		top: 0, 		width: window.innerWidth, 		height: window.innerHeight, 		left: 0, 		top: 0, 		width: window.innerWidth, 		height: window.innerHeight, 		left: 0, 		top: 0, 		width: window.innerWidth, 		height: window.innerHeight, 		left
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
 sheets.Sheet2 = opts;  sheets.Sheet3 = opts;  sheets.Sheet4 = opts;  sheets.Sheet5 = opts;  sheets.Sheet6 = opts;  sheets.Sheet7 = opts;  sheets.Sheet8 = opts;  sheets.Sheet9 = opts;  sheets.Sheet10 = opts;  sheets.Sheet11 = opts;  sheets.Sheet12 = opts;  sheets.Sheet13 = opts;  sheets.Sheet14 = opts;  sheets.Sheet15 = opts;  sheets.Sheet16 = opts;  sheets.Sheet17 = opts;  sheets.Sheet18 = opts;  sheets.Sheet19 = opts;  sheets.Sheet20 = opts;  sheets.Sheet21 = opts;  sheets.Sheet22 = opts;  sheets.Sheet23 = opts;  sheets.Sheet24 = opts;  sheets.Sheet25 = opts;  sheets.Sheet26 = opts;  sheets.Sheet27 = opts;  sheets.Sheet28 = opts;  sheets.Sheet29 = opts;  sheets.Sheet30 = opts;  sheets.Sheet31 = opts;  sheets.Sheet32 = opts;  sheets.Sheet33 = opts;  sheets.Sheet34 = opts;  sheets.Sheet35 = opts;  sheets.Sheet36 = opts;  sheets.Sheet37 = opts;  sheets.Sheet38 = opts;  sheets.Sheet39 = opts;  sheets.Sheet40 = opts;  sheets.Sheet41 = opts;  sheets.Sheet42 = opts;  sheets.Sheet43 = opts;  sheets.Sheet44 = opts;  sheets.Sheet45 = opts;  sheets.Sheet46 = opts;  sheets.Sheet47 = opts;  sheets.Sheet48 = opts;  sheets.Sheet49 = opts;  sheets.Sheet50 = opts;  sheets.Sheet51 = opts;  sheets.Sheet52 = opts;  
/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */  package org.apache.ignite.internal.processors.cache;  import org.apache.ignite.IgniteCheckedException; import org.apache.ignite.IgniteException; import org.apache.ignite.cache.CacheAtomicityMode; import org.apache.ignite.cache.CacheMode; import org.apache.ignite.cache.CacheWriteSynchronizationMode; import org.apache.ignite.configuration.CacheConfiguration; import org.apache.ignite.configuration.IgniteConfiguration; import org.apache.ignite.internal.IgniteEx; import org.apache.ignite.internal.util.typedef.F; import org.apache.ignite.internal.util.typedef.internal.S; import org.apache.ignite.internal.util.typedef.internal.U; import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi; import org.apache.ignite.spi.discovery.tcp.ipfinder.TcpDiscoveryIpFinder; import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder; import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest; import org.apache.ignite.testframework.junits.common.GridCommonTest; import org.
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name')             ->add('description')         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product';     } } 
 balances.totalBalanceSatoshis.should.equal(50 * 1e8) balances.totalBalanceSatoshis.should.equal(50 * 1e8) balances.totalBalanceSatoshis.should.equal(50 * 1e8) balances.totalBalanceSatoshis.should.equal(50 * 1e8) balances.totalBalanceSatoshis.should.equal(50 * 1e8) balances.totalBalanceSatoshis.should.equal(50 * 1e8) balances.totalBalanceSatoshis.should.equal(50 * 1e8) balances.totalBalanceSatoshis.should.equal(50 * 1e8) balances.totalBalanceSatoshis.should.equal(50 * 1e8) balances.totalBalanceSatoshis.should.equal(50 * 1e8) balances.totalBalanceSatoshis.should.equal(50 * 1e8) balances.totalBalanceSatoshis.should.equal(50 * 1e8) balances.totalBalanceSatoshis.should.equal(50 * 1e8) balances.totalBalanceSatoshis.should.equal(50 * 1e8) balances.totalBalanceSatoshis.should.equal(50 * 1e8) balances.totalBalanceSatoshis.should.equal(50 * 1e8) balances.totalBalanceSatoshis.should.equal(50 * 1e8) balances.totalBalanceSatoshis.should.equal(50 * 1e8) balances.totalBalanceSatoshis.should.equal(50 * 1e8) balances.totalBalanceSatoshis.should.equal(50 * 1e8) balances.totalBalanceSatoshis.should.equal(50 * 1e8) balances.totalBalanceSatoshis.should.equal(50 * 1e8) balances.totalBalanceSatoshis.should.equal(50 * 1e8) balances.totalBalanceSatoshis.should.equal(50 * 1e8) balances.totalBalanceSatoshis.should.equal(50 * 1e8) balances.totalBalanceSatoshis.should
<?php /**  * Zend Framework  *  * LICENSE  *  * This source file is subject to the new BSD license that is bundled  * with this package in the file LICENSE.txt.  * It is also available through the world-wide-web at this URL:  * http://framework.zend.com/license/new-bsd  * If you did not receive a copy of the license and are unable to  * obtain it through the world-wide-web, please send an email  * to license@zend.com so we can send you a copy immediately.  *  * @category   Zend  * @package    Zend_Service  * @subpackage DeveloperGarden  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  * @version    $Id$  */  /**  * @see Zend_Service_DeveloperGarden_Exception  */ // require_once 'Zend/Service/DeveloperGarden/Exception.php';  /**  * @category   Zend  * @package    Zend_Service  * @subpackage DeveloperGarden  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  */ class Zend_Service_DeveloperGarden_Exception extends Zend_Service_DeveloperGarden_Exception { } 
<?php  /*  * This file is part of the Symfony package.  *  * (c) Fabien Potencier <fabien@symfony.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace Symfony\Component\Form\Extension\Core\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Fabien Potencier <fabien@symfony.com>  */ class TextType extends AbstractType {     /**      * {@inheritdoc}      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('text', 'text')         ;     }      /**      * {@inheritdoc}      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Symfony\Component\Form\Extension\Core\Type\TextType'         ));     }      /**      * {@inheritdoc}      */     public function getName()     {         return 'form_text';     } } 
this.init = function( elems ) {         this.length = elems.length; }; this.init = function( elems ) {         this.length = 0; }; this.init = function( elems ) {         this.length = 0; }; this.init = function( elems ) {         this.length = 0; }; this.init = function( elems ) {         this.length = 0; }; this.init = function( elems ) {         this.length = 0; }; this.init = function( elems ) {         this.length = 0; }; this.init = function( elems ) {         this.length = 0; }; this.init = function( elems ) {         this.length = 0; }; this.init = function( elems ) {         this.length = 0; }; this.init = function( elems ) {         this.length = 0; }; this.init = function( elems ) {         this.length = 0; }; this.init = function( elems ) {         this.length = 0; }; this.init = function( elems ) {         this.length = 0; }; this.init = function( elems ) {         this.length = 0; }; this.init = function( elems ) {         this.length = 0; }; this.init = function( elems ) {         this.length = 0; }; this.init = function( elems ) {         this.length = 0; }; this.init = function( elems ) {         this.length = 0; }; this.init = function( elems ) {         this.length = 0; }; this.init = function( elems ) {         this.length = 0; }; this.init = function( elems ) {         this.length = 0; }; this.init = function( elems ) {         this.length = 0; }; this.init = function( elems ) {         this.length = 0; }; this.init = function( elems ) {         this.length = 0; }; this.init = function( elems ) {         this.length = 0; }; this.init = function( elems ) {         this.length =
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
<?php /**  * Zend Framework  *  * LICENSE  *  * This source file is subject to the new BSD license that is bundled  * with this package in the file LICENSE.txt.  * It is also available through the world-wide-web at this URL:  * http://framework.zend.com/license/new-bsd  * If you did not receive a copy of the license and are unable to  * obtain it through the world-wide-web, please send an email  * to license@zend.com so we can send you a copy immediately.  *  * @category   Zend  * @package    Zend_Service  * @subpackage DeveloperGarden  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  * @version    $Id$  */  /**  * @see Zend_Service_DeveloperGarden_Exception  */ require_once 'Zend/Service/DeveloperGarden/Exception.php';  /**  * @category   Zend  * @package    Zend_Service  * @subpackage DeveloperGarden  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  */ class Zend_Service_DeveloperGarden_Exception extends Zend_Service_DeveloperGarden_Exception { } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control'                 )             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control'                 )             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */ package org.apache.beam.runners.core;  import static com.google.common.base.Preconditions.checkArgument; import static com.google.common.base.Preconditions.checkNotNull; import static com.google.common.base.Preconditions.checkState; import static java.util.Objects.requireNonNull;  import com.google.common.base.Preconditions; import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Iterables; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import com.google.common.util.concurrent.Futures; import com.google.common.util.concurrent.ListenableFuture; import com.google.common.util.concurrent.ListeningExecutorService; import com.google.common.util.concurrent.MoreExecutors; import com.google.common.util.concurrent.ThreadFactoryBuilder; import com.google.common.util.concurrent.ThreadFactory; import com.google.common.util.concurrent.TimeUnit; import com.google.common.util.concurrent.TimeoutException;
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */  package org.apache.druid.query.aggregation;  import com.fasterxml.jackson.annotation.JsonCreator; import com.fasterxml.jackson.annotation.JsonProperty; import com.fasterxml.jackson.annotation.JsonTypeInfo; import com.fasterxml.jackson.annotation.JsonTypeInfo.As; import com.fasterxml.jackson.annotation.JsonTypeInfo.Id; import com.fasterxml.jackson.annotation.JsonTypeInfo.IsArray; import com.fasterxml.jackson.annotation.JsonTypeInfo.IsCollection; import com.fasterxml.jackson.annotation.JsonTypeInfo.IsObject; import com.fasterxml.jackson.annotation.JsonTypeInfo.IsString; import com.fasterxml.jackson.annotation.JsonTypeInfo.IsType; import com.fasterxml.jackson.annotation.JsonTypeName; import com.google.common.base.Preconditions; import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Iterables; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */ package org.apache.beam.runners.core;  import static org.junit.Assert.assertEquals; import static org.junit.Assert.assertFalse; import static org.junit.Assert.assertNotNull; import static org.junit.Assert.assertNull; import static org.junit.Assert.assertTrue; import static org.junit.Assert.fail;  import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Iterables; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import com.google.common.util.concurrent.Futures; import com.google.common.util.concurrent.ListenableFuture; import com.google.common.util.concurrent.ListeningExecutorService; import com.google.common.util.concurrent.MoreExecutors; import com.google.common.util.concurrent.ThreadFactoryBuilder; import com.google.common.util.concurrent.ThreadFactory; import com.google.common.util.concurrent.TimeUnit; import com.google.common.util.concurrent.TimeoutException
en Sie auf Felder, um sie hier hinzuzufügen', CLICK_FIELDS_FOOTER: 'Klicken Sie auf Felder, um sie hier hinzuzufügen', CLICK_FIELDS_FOOTER: 'Klicken Sie auf Felder, um sie hier hinzuzufügen', CLICK_FIELDS_FOOTER: 'Klicken Sie auf Felder, um sie hier hinzuzufügen', CLICK_FIELDS_FOOTER: 'Klicken Sie auf Felder, um sie hier hinzuzufügen', CLICK_FIELDS_FOOTER: 'Klicken Sie auf Felder, um sie hier hinzuzufügen', CLICK_FIELDS_FOOTER: 'Klicken Sie auf Felder, um sie hier hinzuzufügen', CLICK_FIELDS_FOOTER: 'Klicken Sie auf Felder, um sie hier hinzuzufügen', CLICK_FIELDS_FOOTER: 'Klicken Sie auf Felder, um sie hier hinzuzufügen', CLICK_FIELDS_FOOTER: 'Klicken Sie auf Felder, um sie hier hinzuzufügen', CLICK_FIELDS_FOOTER: 'Klicken Sie auf Felder, um sie hier hinzuzufügen', CLICK_FIELDS_FOOTER: 'Klicken Sie auf Felder, um sie hier hinzuzufügen', CLICK_FIELDS_FOOTER: 'Klicken Sie auf Felder, um sie hier hinzuzufügen', CLICK_FIELDS_FOOTER: 'Klicken Sie auf Felder, um sie hier hinzuzufügen', CLICK_FIELDS_FO
// Copyright (c) 2012 The Chromium Authors. All rights reserved. // Use of this source code is governed by a BSD-style license that can be // found in the LICENSE file.  #include "base/bind.h" #include "base/command_line.h" #include "base/files/file_path.h" #include "base/files/file_util.h" #include "base/files/scoped_temp_dir.h" #include "base/logging.h" #include "base/memory/scoped_ptr.h" #include "base/memory/scoped_vector.h" #include "base/memory/weak_ptr.h" #include "base/message_loop/message_loop.h" #include "base/prefs/pref_service.h" #include "base/prefs/pref_service_syncable.h" #include "base/prefs/pref_service_syncable.h" #include "base/prefs/scoped_user_pref_update.h" #include "base/strings/string_number_conversions.h" #include "base/strings/string_util.h" #include "base/strings/stringprintf.h" #include "base/strings/utf_string_conversions.h" #include "base/threading/thread_restrictions.h" #include "base/threading/thread_task_runner_handle.h" #include "base/values.h" #include "chrome/browser/profiles/profile.h" #include "chrome/browser/ui/browser.h" #include "chrome/browser/ui/browser_finder.h" #include "chrome/browser/ui/browser_list.h" #include "chrome/browser/ui/browser_window.h" #include "chrome/browser/ui/tabs/tab_strip_model.h" #include "chrome/browser/ui/tabs/tab_strip_model_observer.h" #include "chrome/browser/ui/views/tabs/tab_strip_view.h" #include
