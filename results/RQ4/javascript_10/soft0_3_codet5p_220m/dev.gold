});           break;       }
return false;       }
paths = utils.populate(paths);   var pending = paths.length;
{             if (error)                 return;
const { PureComponent } = require('react'); const { Text, Button, View } = require('react-native'); const { Navigation } = require('react-native-navigation');
if (!((observerCallbackInterface_ != null) && observerCallbackInterface_)) {               throw new Error("Missing callback interface namespace input parameter..");             }
for(i in items) {                 if (items[i]===this) {
describe('___ (covered by ___)', function() {
var self=this;
} else if (e.name === 'SourceUnavailableError') {                  callback(that, 'conflict', undefined, e);             } else if (e.name === 'SecurityError' && e.message === 'The operation is insecure.') {
offset = parseInt(el.getAttribute('offset'), 10) / 100;         colorStops[offset] = getColorStopFromStyle(el) || el.getAttribute('stop-color');
if (num < countofClusters) vol.fetchFromFAT(num, function (e, status) {                 if (e) cb(e);
values.listenerValue = boExpression;   }   else if(typeof boDelegate !== 'undefined') {     listenerType = 'delegateExpression';
if (this.options.accept.call(this.element,(draggable.currentItem || draggable.element))) {    if(this.options.hoverClass) this.element.addClass(this.options.hoverClass);    this._trigger('over', event, this.ui(draggable));
throw "unrecognized self.mode_loginWith"           }
err, process.pid);     return;    }
instance._syncIconUI();    },
if(typeof key != 'string') {   throw new Error('Key must be a string for function contains(key)');  }
} else if (!opts.remove && !isOnDisk) {       throw new Error("error: " + pathFromRoot +                       ": does not exist and --remove not passed\n");     }
, driverBlock = require("../../helpers/driverblock.js")   , it = driverBlock.it;
var srcRetinaFiles;     var srcRetinaFilter = data.srcRetinaFilter;
} else if (test.pending) {       el = fragment('<li class="test pass pending"><h2>%e</h2></li>', test.title);     } else {
textXPosition = x;    else if (textAlign == "right")     textXPosition = x + w - totalWidth;
const map = require('lodash/map');
$actionsViewEl.hide();                     this._$actionsContainer.hide();                 },             });
Theme.configure({   appTitle: "Checklist Manifesto",   background: {
let incentiveLayer = contracts[0]     let tbFileSystem = contracts[1]     let tru = contracts[2]
EntityScreenContext = connect(mapStateToProps, {})(EntityScreenContext); export default (EntityScreenContext);
import { ButtonLink } from 'App/Components/Routes';
});     } else {
require.register("views/popups/alert", function(exports, require, module) { var AlertView, app, viewstack, _ref,
} else {         log.debug('Name not transformed for File "' + preMapped + '"')       }
define('mods/b/h',function(require,exports,module){     module.exports = function(){
var Uni = require('./unicode')
const { httpGet } = require('./actions') function * singleLine (id) {   yield httpGet(`http: }
pkg = new PackageName('custom:dep@a%2Fb', true);     assert.equal(pkg.version, 'a/b');
type: 'object'     , required: true     }
if (calculation.upcomingTransactions < 0) {                          }
} else {       startOrder = -1;       angular.forEach(t.items, function (evt, order) {
client.stats( 'reset', function( err ) {
}         that.telInput.off("keypress" + that.ns);       });
case "filter":                 var activeFilters = [];                 if (e.target.dataset.value == "ALL") {
jBone.fn.html = function(value) {     var result = [];
this._activeRoute = currentPage;
storiesOf('Radio Button', module)
this.refreshInterval = 3000;   this.setRefreshInterval = function(interval) {
if (!childObject[childAssociationName]) {               throw new Error(childAssociationName + " association does not exist.");             }
onInsert(range) {
$(this).callRemote();          e.preventDefault();      });
this.zeroSlopeAtEnd  = true;   } AnimationAction.prototype = {
Sammy.addLogger(function() {                });
handleModel: function(model, relation)   {
shell.rm('-rf', 'app/containers'); shell.mv('internals/templates/containers', 'app');
for (j = 0; j < 1; j += 0.1) {             first = true;             for (i = 0; i < 1; i += 0.1) {                                     p = calculate(i, j, n, m, k);
if (status.nModified < 1) {                     return [];                 }
const onSuccess = () => {       if (/^\/[^/]+\/search\         that.props.parentComponent.props.relay.forceFetch();
} else {       for (var att in change.doc._attachments) {         if (change.doc._attachments.hasOwnProperty(att)) {           change.doc._attachments[att].stub = true;         }
$scope.apps = res;   });
var err = errRef.deref(); var domain = err('domain')   , userInfo = err('userInfo')
if (metaHeaderDataSet.elements.x00020010 === undefined) {       throw new Error('dicomParser.parseDicom: missing required meta header attribute 0002,0010');     }
return alert('still no tabCapture stream');              }
returnOb.x = expressionStr;         }
enyo.ready = function (fn, context) {   if (ready) {
} else if (c == '-') {       tonnetz.setDensity(tonnetz.density + 2);     }
return Promise.resolve(resolver).then((options) => {
return this; } $.extend(Voila.prototype, {
var args= "";   for(i=0;i<argument_pairs.length;i++) {
import React from "react"; import Logo from "../Logo";
if (vm.colorScale.name=="Quantile"){                             scale.domain(Object.keys(data).map(function(key){return data[key]},{data:data})).range(values);
this._fragment.d(detach !== false);     this._fragment = null;
viewdata['title'] = 'rulee viewData';         setTimeout(function() {
return;   }   this.options = $.extend({}, $.fn.checkboxpicker.defaults, options, this.$element.data());
TSWorker.console.error("Error during processing message " + methodName);                 respond({ id: msg.id, error: error });             }
totaln  = delt.width * delt.height,          pix  = totaln * 4;
document.querySelector(".notification").classList.add("welcome");     }
import * as R from 'ramda'; import classNames from 'classnames';
var ModuleList = require("modal/modules"), modules, previews;          modules  = new ModuleList(planner.list.modules);     previews = new ModuleList(planner.list.previews);
let fValue = bn2.leq(bn1) && bn1.lt(bn3);       this.stack.pop();       this.stack.pop();       this.stack.pop();
console.log(xclap._tasks._namespaces.join("\n"));     return exit(0);   }
var val = prop.factory.call(this, prop);
_updateEvents(events) {     events = typeof events === "string" ? JSON.parse(events) : events;     return events;
var ctx = Display.context.backgroundCam;    ctx.drawImage(camCache,0,0);
case FCP:       observeEvents({ type: FCP, buffered: true }, (paintEvents, fcpObserver) => {         const fcp = computeFcp(paintEvents)
priorityManager.addTrack(track, null, null, true)         }       })
init: function(data) {
if(message.data.payload.newName == null)   {     messageLogger.warn("Droped message, suggestUserName Message has no newName!");     return;   }
animateOrphans(removedSprites, transition, duration) {     this._newOrphanTransitions.push({ removedSprites, transition, duration });
const redisCodeKey = config.systemConfig.db.redis.namespace.concat('-', authCodeNamespace).concat(':', code.id);   return db.hmset(redisCodeKey, code); };
sortByExpectedValue: 'sortByExpectedValue',     sortBySetItem: 'sortBySetItem'
node.done = done;             for (var client in clients) {                 if (clients.hasOwnProperty("client")) {                     clients[client].client.destroy();                 }
$(this).css('height', 'auto');                 $(this).attr('height', '');             }         });
var j, jLen;     var letterValue;
format = format.replace(/\s?zh/, '')
vertices: json.meshes[mesh_i].vertices,         indices: [].concat(...json.meshes[mesh_i].faces),         normals: json.meshes[mesh_i].normals
var   gulp = require('gulp')   , ghPages = require('gulp-gh-pages')
return new LatLng(a, b, c);  }
while ( (char = chars[++k]) ) {           this.command( char.charCodeAt(0) );
if (~specialNumbers.indexOf(i)) {     return i
{                     xtype: 'tbspacer',
typeof define === 'function' && define.amd ? define(factory) :  factory(); }(function () { 'use strict';  var foo = { value: 1 };
ipcMain.on("fetch-categories", (evt, blogName) => {   storage.get("auth", (error, auth) => {
if (hostname === 'activate-error-in-prep-req-func-throw') {                                 throw new Error('Testing error 1');                             }
},     updateNodeBounds(element, newBounds) {       const { x, y, width, height } = this.node.diagram.bounds;       if (
to: {           'left': HELIX_WIDTH         },         position: interpolator,
function drawPath(node) {   if (node.buffer) drawPolygon.call(node, node.buffer)   setStroke(d3.rgb(node.attr.stroke))   var path = node.path
}   return props.breakpoints && props.breakpoints.includes(props[propName]) ?      null : new Error('expected a valid breakpoint') }
UniqueRestrictedTextField = Class.extend('UniqueFormField'); UniqueRestrictedTextField.applyTo('input.UniqueRestrictedTextField');
performance.mark("dispatch-start");                         if (this.options.logDispatchedActions) {                             this.logger[getLogType(this.options, "dispatchedActions", LogLevel.info)]("Dispatching: " + reducer.name);                         }
if (transaction) {                 transaction.updateModel(properties);
});   }).controller('awsDisableAsgStageCtrl', function($scope, accountService, stageConstants) {     let stage = $scope.stage;
renderParallaxForeground(){   const { user } = this.props;   return (
'use strict';
for (const code in countries) {     if ({}.hasOwnProperty.call(countries, code)) {       let names = countries[code];
let bundleName = shortName.replace(/[ .]/g, '').toLowerCase();     if (conditionValueOrVariationObject) {
var key = load.key;   var registrationPair = load.defined;   if (!registrationPair)
return provideHooks({       fetchData(...args) {         return callback(...args);       },
var N2 = Math.floor(N / 2);         for (var k = N2; k >= 1; --k){             jss.sink(a, k, N, compare);         }
Application.prototype._addWindow = function(w) {     if ( !(w instanceof OSjs.Core.Window) ) { throw new Error('Application::_addWindow() expects Window'); }     console.info('OSjs::Core::Application::_addWindow()');
const jsonBody = this.buildJsonBody();         if(this.props.id) {
$constructor : function () {             typeUtils = ariaUtilsType;             fireDomEvent = this;
ready: function() {     }
var tileName = SmartTile.selectTileName(currDepth, midLon, midLat, undefined);    var geographicExtent = new GeographicExtent();
}     AnonymousObservable.prototype._subscribe = function (o) {       var ado = new AutoDetachObserver(o), state = [ado, this];       if (currentThreadScheduler.scheduleRequired()) {
return;         }         if (!app.request || !app.isAdminAuthorized || !app.config || !app.isAdminAuthorized(app.request, app.config)) {             var adminAuthorization = require('basic-auth');
const id = module.libIdent({             context: compiler.options.context           });
_.each(_.flatten([modelAttr]), function(attr) {       observeModelEvent(model, 'change:' + attr, config, visibleCb);     });     visibleCb();
toggleInformation: function() {             document.body.classList.toggle('photo-info-visible');             settings.display_height = getDisplayHeight();
export default function* user() {   yield all([
var ColorScaleModel = linearscalemodel.LinearScaleModel.extend({                    set_init_state: function() {
sup.apply(this, arguments);     scope.onpopstate = enyo.bind(this, function(inEvent) {this.popStateHandler();});     if (enyo.LunaService) {
this.$store.dispatch('hide_loading');       });
var content = internal.read(mainfile);             var mypaths;
workingSlats = msg.value;                     break;                 default:             }
var addr = rightfns(table.data[i]);      if (!ux[addr]) {       ux[addr] = {num: 0};      }      ux[addr].num++;
import AutoEnterProgramButton from "../buttons/AutoEnterProgramButton";  import IdHolder from "../modules/IdHolder";
module.exports = function afterHooks () {   this.After(function (scenario, callback) {     var running = this.child != null && typeof this.child.kill === 'function'
return rotation.reset(self.selected);       case LOCATION_POP_ACTION: {         const newState = util.fromQueryString(action.payload.search);         const extent = lodashGet(action, 'payload.query.map.extent');
else {         throw new Error('unretain_array: unsupported refarg type');     } }
}()); run(function () {
for (var i = 0; i < minItems; i += 1) {             textToInsert += "<li>" + friendlyLink(value[i]) + "<\/li>";         }
var patterns=_.map(terms, function(term) {           return new RegExp(term.toLowerCase());         });         results = _.filter(results, function(rawdoc) {
if (!(rawKey instanceof ArrayBuffer)) {         log = "CryptoAdapter cannot import key of wrong type (" + typeof rawKey + "), rejecting";
, indentation = ctx.indentation       , indentFirstLine = ctx.indentFirstLine;   return array$concat$$([],
if(!Array.isArray(b) || b.length == 0) {    throw new Error("buckets must be an array of bucket limits");   }
}  }, tx); };
if (!nodes || !NumberUtils.isUint16(nodes.length)             || nodes.some(it => !(it instanceof AccountsTreeNode) || !it.isTerminal())) throw new Error('Malformed nodes');
function cb1(validators) {     return validators.every(cb2, this); }
var level = 0;         for (var i = 0; i < tokens.length; i++) {             var token = tokens[i];
this.i = 0; }
calculateDimensions();             scrollBarElm.style.height = data.height + "px";
return res;     } }
return gRex; })();
function importGroup(svg) {
}       var propObj = outObj.defProp(prop, originNode);       propObj.origin = file.name;       type.propagate(propObj);     }
states: "",
if (value.isDuplex) {         component.bind('onchange', (function(event, node) {           return value.call(this, node.value);         }), 'before');
DELETE_HISTORY_FAILURE,   MARK_HISTORY_FOR_DELETION } from '../constants/ActionTypes'
const [projectResponses, setProjectResponses] = useState({});   const api = useAPI();
}   return Buffer.from(out.join('')); }
}    this.current_data = [];   } else {
vm.isSignedIn = false;     }   };
, _               = require('./util/_')   , filter          = require('./util/filter')   , Popup           = require('./Popup.jsx')
this.toggleSaveSelected();         },
if (format.charAt(0) === "#") {     if (format.length === 4) {       r = format.charAt(1); r += r;
if (isWorkerAvailable && this.worker) {
} from "material-ui/Table"; import ServiceReplicaStatus from "../ServiceReplicaStatus";
function(upOrDown) {   var hasAltGrState = this.stateManager_.hasState(StateType.ALTGR);   var hasShiftState = this.stateManager_.hasState(StateType.SHIFT);
var name = (             path instanceof Array ?  this._name(path) : path         );
}; var incrementSquare = function(x) {   return add(square(x), 1); };
} else {         throw new Error("vec type must be bool, int, or float");     }
if (!sprite) {         sprite = Sprite.sizedEndingAt(this._ownElement());         this.sprite = sprite;
$scope.submit = function() {                                       var user = {
}); }; module.exports = AInPHasADistinctStyle;
nodemon = require('gulp-nodemon'),   watch = require('gulp-watch'),
return $compile(html)(scope);   };
var _ = require('lodash');
try {
callback(...args);     }
this.w.forEachWindow((w) => {       if(w != wnd && (w.isModal() || this.w.getTopmostWindow() == w)){         do_exit = true;
routes = require('./lib/utils/routes'); var r = require('./routes'),
function  _getScrap(scrapName, tests) {                 var tempScrap,                     indexTests = 0, size,                     scrap;
cleanWork(function(){     console.log("");     callback();    });
$("#member_search_dialog").dialog("close");             onSuccess(oMemberSearch.getFocusData());         });
}; autorepair.detect = {}; autorepair.detect.editors = function(q, lng) {
slidesToScroll: 1,       slideWidth: 1,
dataset = flatten(dataset);     return dataset;
optimist.showHelp();   }
return function(selection) {         var example = 'https:         var modalSelection = uiModal(selection);
} else {         throw new Error(`Tried to add an item ${ constructor.name } already in the inventory!`);       }
for (const slot in slotsObj) {     if (slotsObj.hasOwnProperty(slot)) {       const ele = {         "name": `${slot}`,
throw 'Error: failed to add item of unknown type to world';                              }
var newURL = this._workspace.urlForPath(this._fileSystem.path(), filePath);             var extension = this._extensionForPath(validNewName);             var newOriginURL = this._fileSystemURL + filePath
if (element._prototypeEventID) return element._prototypeEventID[0];     return element._prototypeEventID = [++_getEventID.id];   }
};     this.component = this.renderComponent();   });
if (mask & GL_DEPTH_BUFFER_BIT) {   buffer = state.depth_buffer;   clear = state.clear_depth;   for (i = 0, l = buffer.length; i < l; i ++) {    buffer[i] = clear[0];
}   global.ng.common.locales['ar-ps'] = [     'ar-PS',
function foreach(dtype, f){  for(var x in dtype){   if(dtype.hasOwnProperty(x)){    f(x, dtype[x]);   }
} else {     throw new Error('Unsupported input ' + typeof input);   }
Button.variant.QUIET;          this.classList.remove(...ALL_VARIANT_CLASSES);          if (this._variant !== variant.DEFAULT) {
return {       parentData : this.modelFor('events.view.edit'),       sponsors   : this.getSponsors()
switch (provider) {         case 'github': {           const attrs = {provider};           let caId, user;
}   this._super( key, value );   switch ( key ) {
var oNewValue = '';       for (var i = 1; i < arguments.length - 2; i++) {         if (typeof arguments[i] == "undefined" || arguments[i] === ""){
describe('newRequest', () => {     it('should call the smartContractProxy.newRequest function with correct parameters', done => {         const smartContractProxy = {
let options;       [keyPath, options, callback] = args       scopeDescriptor = options.scope
return '';   }   return value.filter(function(item){
}   else for (i = 0; i < length; i += 4){    current = keyToChannel(data[index++]);
constructor(cell) {     super(cell);     this.items = [...cell.before, cell, ...cell.after];
)       if (needUpdate) {         if (switcher.sync) {
it('patching with readOnly field id should fail', (done) => {       api.patch(`${path}/${i}`)
} require('./methods/normalize')(Term); require('./methods/isA')(Term); require('./methods/out')(Term); require('./methods/tag')(Term); require('./methods/case')(Term);
+', displayPath: '+this.displayPath       +', shapes: [ '+this.shapes + ']'       + StringApp.superClass_.toString.call(this); };
return fn.apply(this, args.concat([].slice.call(arguments)));         };
var serialOrdered = require('../serialOrdered.js');
return 'none';         } else {
call.sendError(new Error('Deadline exceeded'), Status.DEADLINE_EXCEEDED);   call.emit('cancelled', 'deadline'); }
System.register([], function (exports) {  'use strict';
referencePropertyName;   if (context.referencePropertyName) {     referencePropertyName = context.referencePropertyName;
sendDrawRequest : function(config) {         var startRequest = this.instance.sandbox.getRequestBuilder('Parcel.StartDrawingRequest')(config);
beforeEach(function () {       this.dataviewModel.filter.setRange(1, 2);     });
local.render();         });         componentLocal.set(this, local);       });
var cE = this.convertor(T, cD);         var result = new Z.Coordinate(cE.x.toFixed(2), cE.y.toFixed(2));         return result;     },
let repr = '{';   for (let key in item) {    if (item.hasOwnProperty(key)) {     repr += `${key}: ${stringRepresentationForJsx(item[key])}, `;    }
if (this._inChangeGroup) {             throw new Error("TextView._beginChangeGroup() called while" +                 " already in a change group");         }
controller.on('settingschange', function(e) {   ext.trigger('settingschange', e);   });
start();    }
defaultValue : 9600,       onChange : setBaud     });
function run(opts, cb) {   var parallel = false     , pipeline = this.pipeline.slice(0)
this.dialogService = fdsDialogService; }
console.log('dosomething! ...maybe - to fix size')
({  0:  function(module, exports, __webpack_require__) {
, query = ctx.query || {}     , errors = {};   if(!item) return done('You must include an object when saving or updating.');
var info = generateInfoObject("", "ClearTripleStoreCommand");    info['tripleStoreUrl'] = $('#txtModel_URL').html();
git = require('../utils/git-request'),
, test({code: "var bar = proxyquire('./bar');"})     , test({code: "var bar = require('./ba' + 'r');"})     , test({code: "var zero = require(0);"})
this.tokens = {};     }
console.log(ex);   }
var connect = require('../');
} else if (sets[set_index].length === 0) {             print("No more rules");             return;
if (_.isUndefined(opts.array)) {         throw new Error("opts.array must be defined");     }
M.eC = eC;                         ;             ;                         ;
if (!needsRefresh && suffixStripped) {      for (i = 0, l = opts.suffix.length; i < l; i++) {       buffer.push(opts.suffix.charAt(i));
'.\n');   return (statements_op == '') ?             '' :
for (var key in changes) {           if (changes.hasOwnProperty(key)) {             message += ' ';             layer = changes[key];
ChainDB.prototype.saveBlock = function saveBlock(block, batch, connect, callback) {   if (this.options.spv)
GridStore.exist(db, 'foobar2', function(err, result) {           console.log("File 'foobar2' exists: " + result);         });
const h = mori.mutable.thaw(mori.hashMap());         for (let i = 0, len = keys.length; i < len; ++i)             mori.mutable.assoc(h, keys[i], i);
var match = navigator.userAgent.match(/Android (\d+)\./i);   if (match && match[1]) { return match[1]; } };
else{                     startdate = dateFormat(Date.now(), 'yyyy-mm-dd HH:MM:ss');                     enddate = dateFormat(Date.now() + current_subscription[0].duration*86400000, 'yyyy-mm-dd HH:MM:ss');                 }
if (typeof params.region === "string") {     AWS.config.update({ region: params.region });
var xhr = new XMLHttpRequest();
if (arguments.length < 2 || not(L)) { return L; }     var args = [apply(R, [])].concat([].slice.call(arguments, 2));     return and.apply(null, args);
newActive.find('input:visible:first').focus();       }
function checkRsa(algo, len, exponent) {   if (subtle === undefined || !subtle.generateKey || !subtle.sign || !subtle.verify || !subtle.exportKey) {     {       debug('subtle crypto not supported');
jquery: 'jQuery',     Vue: 'Vue'   },
if (props.best_parent_unit === null)     throw Error("best parent is null");    console.log("unit "+unit+", best parent "+props.best_parent_unit+", wlevel "+props.witnessed_level);
}).on("submit", function (e) {             if (e.isDefaultPrevented()) {
var tok;       while((tok = readToken())) {
if (!(1 === context.parseStack.length)) {       throw (new Error(("unclosed node: " + prettify(context.parseStack[0], false))))     }
process: function(mt, sgf, idGen) {   }
topic.then(function(res){       });
} else {   throw new Error("Invalid options provided");  }
editSessionName(session, newName) {     localStorage[LOCALSTORAGE_PREFIX + newName] =       localStorage[LOCALSTORAGE_PREFIX + session]     this.deleteSession(session)
if (!args) {         throw new HypergridError('Expected function keyword with formal parameter list.');     }
require("./form");
buildTemplate.call(this);       return this.createInstance(object, actionCallback, updateCallback, bindings, bindingInterface);     },
{  constructor(name, sendUpdates = true){   super();   Object.assign(this, {name, sendUpdates});
socket.on('err', (error) => {         smalltalk.alert(this._TITLE, error);     });
tagName = this.tagName,             $this = jQuery(this),    type = $this.attr('type'),    nestingParts;
{         console.error("Can't route the message:" + JSON.stringify(message));       }
HasManySingleLinked.prototype.injectGetter = function(options) {     var where = {}     options = options || {}     where[this.__factory.identifier] = this.instance.id
if (!request.url)   throw new Error("no url on request");
player = TestHelpers.makePlayer({     tracks: tracks,
let promise;         if (type === 'message') {
if (typeof Buffer !== 'undefined' && libOrBuf instanceof Buffer) {                 try {
var Z;  (function (Z) {      var Y = 12;  })(Z || (Z = {}));
WebViewUtils.receiveAction(data.name, data.payload); }
var $ctrl = this;
var params_list = [];         for (var key in params) {           if (params.hasOwnProperty(key)) {                         params_list.push(key + "=" + params[key]);           }
retval = rules[aDef.type](form[aDef.el], aDef.args);
var blinnRow = new UIRow();  var blinn = new UICheckbox( parameters.blinn ).onChange( update );  blinnRow.add( new UIText( 'Blinn-scaled' ).setWidth( '90px' ) );  blinnRow.add( blinn );
method = args.shift();     return new Enumerable.Enumerator(this, method, args);   }
rows.push(header);         _.keys(section).sort().forEach(function(key) {             function td(content) {
if (isSelected) {                     toggle(false, shape.classed(CLASS.SELECTED, false), d, i);                 }
if (enable === true || enable === path) {            }
};     return build.call(this, [...(this._styles || []), codes], this._empty, model);    };
if(deviceIndex >= data[roomIndex].devices.length)   throwError(errorCodes.codes.DATABASE_NO_DEVICE_AT_INDEX); }
module.exports = function ($elem, fn, frequency) {   frequency = frequency || 500;   var currentHeight = $elem.height();
var strCurrentTab = window.location.hostname;                  if (arrBlacklistedDomains.includes(strCurrentTab)) {                      document.body.innerHTML = "";
} else if (Array.isArray(rules)) {         for (let i = 0; i < rules.length; i++) {             result = {
if (!entries)             throw new Error('storeEntries disabled');     }
Realm.clearTestState();                  var promise;
formUrl: 'https:
res.render(template + ".tmpl", {         articles  : articles       , keyword   : keyword
centerCoords() {     const s = this.starChart;     const upperY = s.height - (s.yAxis.range[0].y - s.corners[0].y);     const lowerY = s.corners[3].y - s.yAxis.range[1].y;     return {
function inlineDocument($, css, options) {   var rules = utils.parseCSS(css);   var editedElements = [];   rules.forEach(handleRule);
}         fs.rmdirSync(dirPath);     }
keys = Object.keys(MESSAGES);     for (index = 0; index < keys.length; index++) {       key = keys[index];
}   });   $(document).keyup(function(e) {
that.saveKeyFromCore("pre_" + filename);             },
tooltipType: 'qtip',                       tooltip: printMapTooltipString[lang],                       id: 'PrintMap'                     }
});  }( window.db , window.describe , window.it , window.expect , window.beforeEach , window.afterEach , window.jQuery ));
var i = 0;     while (i < xAxis.length) {
if ( this.boundingBox === null ) {    this.boundingBox = new Box3();   }
function returnFoundModels( err, _models ) {                     var models = [];                                          _models = _models instanceof Array ? _models : [ _models ];
storage.setItem('records', JSON.stringify(localRecords));     callback(localRecords)
if (maySeq && prevBody.length===4) {             seqBody = uni1+LongSpec.int2uni(int2-this.prevCollapsed-1);         }
Object.keys(protocol.types).forEach(function(k) {     var v = protocol.types[k];
if ($A.util.isArray(facetValueConfig)) {         for (var i = 0; i < facetValueConfig.length; i++) {             var facetItem = facetValueConfig[i];
var volumeOuter = $("#volume-outer");     var adjustVolume = function(x, y) {         var volumePossible = volumeOuter.height();
onError : function(t) {       console.warn("Error loading texture: " + imageURL + " | " + t);      }
} else if (!this.isConnect) {       throw new Error('User is\'t connections.')     }
}                 var props = getProperties(trigger);                 if (isEmpty(props.url)) {
var mongoConfig = appEnv.getServiceCreds('MongoInstance'); environment.mongo = {
define(     function(require) {         var glyfAdjust = require('ttf/util/glyfAdjust');
,'issues/map'          ,'issues/map-combo-conflict'
var b = this;     do {
browsers: [       'PhantomJS',       'Chrome',       'Firefox',       'IE'     ],
constructor(options) {     super();     this.apiToken = process.env.ENVAPI_ACCESS_TOKEN;
self.emit('data', chunk);                        });
function update(TableName, { key, expressions }) {   return Promise.resolve().then(() => {     let params = Object.assign({ TableName, Key: key }, compileIfSet(expressions));
var KEY_OPTION = Symbol("option");
return this.getSubscription('newPendingTransactions', null, null, null, callback);         case 'logs':
var ReactCSSTransitionGroup = require('react/lib/ReactCSSTransitionGroup');
return () => {         scrollableEl.removeEventListener('scroll', handleScrollOrResize);         window.removeEventListener('resize', handleScrollOrResize);       };
peer.on("disconnect", function (data) {    console.log("disconnected from:", peer.address().address);    host.stop();   });
$scope.login = function() {             if ($scope.running_login || $scope.running_create) {
};   GroupElement.prototype.setProperty = function (sName, oValue) {    Element.prototype.setProperty.call(this, sName, oValue, true);    var oGroup = this.getParent();
handleKeyPress: function(event) {         var input = this.refs.input.getDOMNode();         var text = input.value;
case 'location':    event.reply('That\'s a good location!');    break;   case 'sticker':
logging.error(new errors.GhostError({                             message: `AMP HTML couldn't get parsed: ${err.src}`,                             code: 'AMP_PARSER_ERROR',                             err: err,
import Ember from 'ember';
var self, library, __private = {};
expect(handlers.ViberHandler).toBeDefined(); });
zlib = require('zlib') module.exports = blip = {}
App.on('record', co.wrap(function *() {     App.activity.record(arguments)   }))
import React, {useEffect, useState} from 'react'; import {Col, Container, Modal, Row, Spinner} from "reactstrap"; import * as ReactDOM from "react-dom";
getInvites() {         return this.shard.client.getGuildInvites.apply(this.shard.client, this.id);     }
{institutionId: this.details.id, userId: parseInt(this.userId)})             .then(angular.bind(this, function successCallback() {                 alert("Membership requested for user " + this.userId + ".");
(context)["module"] = module;   (context)["require"] = require;   return (function() {
_escape = function (s) {   return s.replace(/'/g, "''"); };
}         const accessToken = await refreshToken();         this._handleNewConnProm(window.createHassConnection(null, accessToken));
try {       this._super(...arguments);     } catch (e) { }   },
angular.module("leaflet-directive").directive('legend', function ($http, $log, $parse, $rootScope) {     return {
this.trigger('g:demoted');         }).fail((err) => {             this.trigger('g:error', err);
request = new Request(tmpUrl);                                 url = request.url;
if (model.prototype.connection != this){       Model = function Model (){         model.apply(this, arguments);
'use strict'; var assert = require('yeoman-generator').assert   , helpers = require('yeoman-generator').test   , path = require('path'); describe('module generator', function () {
export function getUserInfo() {   return Promise.resolve({})
if(cdsStart > exonEnds)  {   return smallBox( (exonStarts - origin), width, multiplyingFactor, strand);  }
if (!ipRangeCheck(ip, config.get('githubIpRange'))) {         throw new ApiError('IP does not match GitHub whitelist.');       }
var currWin = ko.windowManager.getMainWindow();         view = currWin.ko.views.manager.getViewForURI(uri);         if (view) {
if(items.random){    this.generateRandomColor(items);    }   this.checkValues();
res.locals.template = `full.${this.templateType}`;             next();
const d = util.castDate(propertyValue).getTime();                 return (d - min.getTime()) / (max.getTime() - min.getTime());             default:
html += 'My restaurants <b class="caret"></b></a>\n';         html += '<ul class ="dropdown-menu" ' +           'aria-labelledby="myRestaurantsButtonLink" role="menu">';
.description('show iexec account status')   .action(() => account.show().catch(handleError('account'))); cli.parse(process.argv);
},       cpu: health.cpu(),       ram: {
if (!(k in defaults)) {      throw new Error('Property "' + k + '" is not defined. You should define it first with `define` method of current module');     }
}                     break;                 case "generate":                     if (value=="true" || value=="false")
_.forEach(this.methods, function(key) {             this[key] = this[key].bind(this);         }.bind(this));     };
row.classList.add('filter');       } else if (row.classList) {         row.classList.remove('filter');
if (!(this instanceof ThingShadowsClient))    {
_parseEventList(eventList) {                 return Object.keys(eventList).map((name) => this._addEvent(eventList[name]));             }
messages = _.map(messages, function(message) {       return {
for (let i = 0; i < number; i++) {         arr.push(this.make.apply(this, [name, ...args]));       }
key = "ZTILE";         return parseInt(arguments[0]);       },
} Object.assign(Doc.prototype, methods.match) Object.assign(Doc.prototype, methods.selections) Object.assign(Doc.prototype, methods.misc)
cell.focus_cell();                 }                 return false;
, pricer = require(rootPrefix + '/lib/contract_interact/pricer')   , pricerOstUsd = new pricer(constants.pricerOstUsdAddress)
onComponentDidMount() {                   mountedCalled++;
that._working = false;         });     }
ProgressActions.updateProgress(progress.id, progress.current);       $(self.refs.tipCurrent.getDOMNode()).hide();     });
var Provider = require('../provider'); module.exports = Provider.extend({
$("#nav_menu").css("display", "inline");             $("#nav_menu").css("top", $(this).offset().top + $(this).height() + 5);             $("#nav_menu").css("left", $(this).offset().left );         }
jetpack.existsAsync('text.txt')          .then(function (existsAsync) {              expect(existsAsync).toBe('file');              done();
var buffer = attributeBufferInfo.buffer;                             var size = attributeBufferInfo.size;
it("should test if links and karyo are defined when they are returned from their functions", function(){     });
_updateWrapAround() {     this._wrapAround = this.loop && this._lastViewIndex > 0;
if (nodeItem[0] === 'atruler' || nodeItem[0] === 'ruleset') {                     value = (i < 2 && isFirst ? '' : '\n') + new Array(level + 1).join(this._value);                     isFirst = false;
import * as React from 'react'; import stock3 from './images/stock3.jpg';
const path = "/" + dataset.address.replace(".","/",-1);     return dispatch(push(path));
function element(name, prototype) {     if (typeof name !== 'string') {       var script = prototype || document._currentScript;       prototype = name;
var feature = layer.feature(i);                 for (key in mapping.sort) {                     if (mapping.sort[key] === true ||
}; this.coGroup = function(grid, app, job, node) {  Transform.call(this, grid, app, job, node);
var mathRe = constructMathRe(); var onlySymbols = new RC("^[\\s" + REEscape(mathSymbols) + "]*$"); var onlyNumbers = new RC(/^[\s\d]*$/);
if (~validKeys.indexOf(match[1])) {         return true;
if (selectedOptionsArray.includes(activeOptionIndex)) {         const index = selectedOptionsArray.indexOf(activeOptionIndex);
var frameTags = ["frame","iframe"];             for (var f = 0; f < frameTags.length; ++f) {                 var frames = doc.getElementsByTagName(frameTags[f]);                 for (var i = 0, nframes = frames.length; i < nframes; ++i) {
let drag = d3.drag()       .subject(() => {         return {x: legendG.attr('kis:kis:tx'), y: legendG.attr('kis:kis:ty')};
'posts.new': function(post){     const isValid = Posts.simpleSchema().namedContext("posts.new").validate(post);
{ dynamicPathIsActive: function () {       if ( this.props.params[ this.props.routeParam ] ) {
var prompt = require('prompt-lite');
function getWorklogObjects(key, worklogs){         return new Promise((resolve) => {
function onAcceptEditor() {   Enigmail.edit.onSave(); }
RTCPeerConnection = function(pcConfig, pcConstraints) {
content: contentAndMetadata,                     config: configEntry,                   };
let Buttons = ({ dismiss, expanded, resize, cycle, autocrop }) => (   <div className="Buttons">
filter = filter.reduce(function (arr, el) {          if (el !== '!html') {
return {         elementId: (ref.$text === undefined) ? ref : ref.$text,         sortOrder: (ref.$ === undefined) ? undefined : ref.$.sort_order
pParams.endListener = Util.retExec(process.exit);                                  send(pParams);                 break;         }
, routes_admin = require('../routes/admin/index.js')     , routes_jobs = require('../routes/jobs/index.js')     , api = require('../routes/api')
case cwc.ui.MessageType.ERROR:       this.log_.error(prefix, message);       break;     default:
import { createActionCreators } from 'utils/redux';
var contains = function (array, match){    for(var i=0; i < array.length; i++){
return this.writeInt16(n);   }
Cypress.Commands.add('testManifest200s', service => {   cy.testResponseCodeAndType(     `/${service}/articles/manifest.json`,     200,
track.nbNalu = 0;     if(navigator.userAgent.toLowerCase().indexOf("chrome") > -1) {
var bounds = this.getAbsBounds();    for(orientation in this._icons) {     if(!YAHOO.lang.hasOwnProperty(this._icons, orientation)) continue;          var left, top, margin;
let response = yield siadCall('/renter/contracts')   if (!response.contracts) {    return
return tab;   }
goog.require('goog.math');
$scope.$on('timelionPlotHover', function (angularEvent, flotEvent, pos) {           if (!$scope.plot) return;
import playerAttack from './utils/playerAttack' import mapTransition from './utils/mapTransition' let cursors   , playerObject
var IPv4Regex = new RegExp(     '^([0-9]{1,3}\\.){3}[0-9]{1,3}(\/([0-9]|[1-2][0-9]|3[0-2]))?$'   );
var frameTags = ["frame","iframe"];             for (var f = 0; f < frameTags.length; ++f) {                 var frames = doc.getElementsByTagName(frameTags[f]);                 for (var i = 0, nframes = frames.length; i < nframes; ++i) {
var UTIL = require('./ender.util'); module.exports = {
return plugins;
beforeEach(() => {             this.reporter = new global.SpecReporter({
throw err; };
>     {children}    </IconButton>
} finally {             if (_didIteratorError5) {               throw _iteratorError5;             }
import GlobalContext from '../../contexts/GlobalContext'; import './index.scss';
context.sched(startTime, function(t0) {     _this._state = STATE_RUNNING;     emit(_this, t0, false);   });
var serverMetaInfo = function (sdkContext) {   var info = {
$(this).dialog("close");     };
$(".line_selected").removeClass("line_selected");                            $(this).addClass("line_selected");
return str;     }
type     = field.resolvedType instanceof Enum ? "uint32" : field.type,                 wireType = types.basic[type],                 prop     = safeProp(field.name);             gen
this.fields = []; }
} module.exports = StartCommand;
import {Reducer, IReducer} from './reducer.decorator'; import {State} from './state.decorator';
suiteNesting === 1 && setupHooks();
return ' el' + textSuffix + '.match(new RegExp("^"+' + val + textSuffix + ')) ';                 case 'end':
myOpenIssues: function(projectKey, callback) {     spinner.start();
level.live = false;                     break;                 case 'DIS':                     cc++;
var finishedLoading = function finishedLoading() {                 saveCardCache();
case 'logs':             return this.getLogsSubscription(parameter, callback);         case 'syncing':
res.then(function() {     _this.saving = false;
describe('built-in apps', function () {   this.timeout(MOCHA_TIMEOUT);      let driver;
define(["css!dijit/claro/claro.css","css!dojo/dojo.css"], function (ss1, ss2) {  return 1; });
expect(this.searchResults.hits[1].id).toEqual('3');       expect(this.searchResults.hits[2].id).toEqual('4');       expect(this.searchResults.hits[3].id).toEqual('1');     });
$scope.lang = "pl";     $scope.RDocumentation = RDocumentation; }
value = def_item.v;             }             value = parseInt(value);             if (!isNaN(value)) {
getBusinessObject = require('bpmn-js/lib/util/ModelUtil').getBusinessObject,   cmdHelper = require('../../../helper/CmdHelper'); module.exports = function(group) {
for (key in this.directoryElements) {         this.directoryElements[key].removeClass('hide')
_getContext: function() {     return this.parent._getContext();   }
var Static = exports.Static = function(app, options) {     var options = options || {};
if (!!~ansiCodes.indexOf(seq)) {          ansiCodes.pop()         return '</span>'       }
$('a[action="sync-fountain"]').click(function() {                  if (this.isSyncEnabled) {                      this.dispatch('disableSync');                  }
}, function (err) {             throw new Error(`初始化管理员账号 "${yapi.WEBCONFIG.adminAccount}" 失败, ${err.message}`);          });
Object.defineProperty(String.prototype, "hash", {
isValid: computed('errors.length', function () {     if (this.get('errors.length') > 0) {
answer_groups: function(answerGroups) {         var contentIds = new Set();         answerGroups.forEach(function(answerGroup) {
const nodeColor = colorScale(getColor(node));           yOffset[offset] += height;
describe('95.binding_functionBindInout.js', function() {   var connection = null;
if ($target) {           var event = e.originalEvent,             touches = event.touches,
}         var url = lessfly_api +"/pods/"+ lessSession.Get("podid") +"/fs/get";         url += "?access_token="+ lessCookie.Get("access_token");
ListDESDLEspBindings: function (params) {             return ESPRequest.send("WsESDLConfig", "ListDESDLEspBindings", params);
var items = data[KCK.MST.SLOTITEM];     for (i in items) {       info = items[i];       var item = this.parseSlotItem(info);
return autocomplete.words(DRAIN_TYPES.map((type) => type.id)); }
import { storiesOf } from '@storybook/react' import { Engine, Scene } from '../../../dist/react-babylonjs.es5' import { Vector3 } from '@babylonjs/core/Maths/math' import '../../style.css'
if(geo && geo.features && geo.features.length>0) {    _.each(geo.features, function(feature) {
];     default:
var _ = require('lodash'),     util = require('./util');
function getToggleClickHandler(tab) {   console.debug('TabRegistry', 'activeTab', this.activeTab);   if (this.activeTab) {
}, 0);         },         '-': function(...args) {             return args.reduce(function(a, b) {                 return a - b;
renderCallback: function() {        }
.append('li')                 .attr('style', function(d,i) {                     var top = (groupHeight + barGap) * i;
if(sheet.drawings){     if(that.debug){      console.log("\n\r########  Drawings found ########\n\r")
, ReplaceTransitionGroup  = require('./ReplaceTransitionGroup.jsx')   , $  =  require('../util/dom')   , _ = require('lodash');
isFocused () {     if (this.mergedMarker || !this.patternRenderData) {
<label className="table-checkbox-label">        <input id={'checkbox-' + i} value={i} onChange={self.handleChange} checked={checked} type="checkbox" name="customers" className="table-checkbox" />       </label>
return this.updateAABBPoint(collider);         }
this._eachPainter(function(painter) {
, HOVER_KEY = -1   , NO_HOVER  = -1;
_.each(sel.getRanges(), function(range) {       if (range.isEnclosed() || range.isFull()) {
} else if (out && model._boxed) {         out = type && !noClone ? clone(out) : out;     } else if (!out && model._materialized) {
else if ( !aliases && ( child = readElseIf( parser, tag ) ) ) {    if ( section.n === SECTION_UNLESS ) {
name: exchangeName,         opts: { durable: true, type: 'fanout'}     };
if (e.keyCode === 69 && (e.metaKey || e.ctrlKey)) {       Expose.toggle();
self._data = this._data;    if ( ! Array.isArray(value) || ! value || ! Array.isArray(value.x)) return;
if (!option) {         throw new Error(`an option with data-hook ${hook} was not found`);       }
if (context.flags.window.match(/[A-Za-z]{3,10} \d\d?:[03]0/) == null) {         cli.exit(1, 'Maintenance windows must be "Day HH:MM", where MM is 00 or 30.')       }
import {     pagination as PaginationActions } from "../../actions";
const React = require('react') const App = require('./app')
return {         x: round(x / pointersLength),         y: round(y / pointersLength)     };
this.buffer.write(dataType, 8 + filenameBytes, 'ascii')   blob.copy(this.buffer, 12 + filenameBytes) } Entry.prototype.length = function () {
var       reflect = function (node) { return Array           .from (node.attributes)
}         $("#status-table").append(statusTable);
if (!before) firstCircle = circle;   }
RANDO.CameraContainer.prototype._buildAttachedLight = function () {         var scene = this._scene;         this._camLight = new BABYLON.HemisphericLight("Camera Light", new BABYLON.Vector3(0,1000,0), scene)
$('#dvs-admin-modal').html('').addClass('dvs-hidden');         $('#dvs-admin-blocker').addClass('dvs-hidden');     }
this._timer = setInterval(function () {                 if (that.smoothContent) {                     var contentHeight = that.$content.outerHeight() || 0;
if (this.model.chartViewModel == null && typeof this.model.sql !== "undefined") {                 this.advancedMode = true;
const optionLabelPath = this.get( 'optionLabelPath' );                     const select2 = input.data( 'select2' ).opts;
}   }, this)
if (err) return callback(err);             that._gridCache[id] = buffer;
goToWorksheet: function(){         window.open('/worksheets/' + this.props.item.state.interpreted.uuid);     },     render: function() {
'cd' in this.console
