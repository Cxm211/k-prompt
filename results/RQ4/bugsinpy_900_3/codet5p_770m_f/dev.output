class WebSocketHandler(tornado.web.RequestHandler):          if not self._on_close_called:              self._on_close_called = True              self.on_close()     def set_nodelay(self, x: bool) -> None:         self.stream.set_nodelay(x)      def send_error(self, *args, **kwargs):          if self.stream is None:
class CategoricalIndex(Index, accessor.PandasDelegate):      @Appender(_index_shared_docs["_convert_scalar_indexer"])      def _convert_scalar_indexer(self, key, kind=None):         if self.categories._defer_to_indexing or kind is None:             return self.categories._convert_scalar_indexer(key, kind=kind)          return super()._convert_scalar_indexer(key, kind=kind)      @Appender(_index_shared_docs["_convert_list_indexer"])
def match_filter_func(filter_str):  def parse_dfxp_time_expr(time_expr):      if not time_expr:         return 0.0      mobj = re.match(r'^(?P<time_offset>\d+(?:\.\d+)?)s?$', time_expr)      if mobj:
def js_to_json(code):              ([{,]\s*)              ("[^"]*"|\'[^\']*\'|[a-z0-9A-Z]+)              (:\s*)             ([0-9.]+|true|false|"[^"]*"|\'[^\']*\'|\[|\{)          res = re.sub(r',(\s*\])', lambda m: m.group(1), res)      return res
class FastAPI(Starlette):          response_model_by_alias: bool = True,          response_model_skip_defaults: bool = None,          response_model_exclude_unset: bool = False,         response_model_exclude_defaults: bool = False,         response_model_exclude_none: bool = False,          include_in_schema: bool = True,          response_class: Type[Response] = None,          name: str = None,
def uppercase_escape(s):      return re.sub(          r'\\U([0-9a-fA-F]{8})',          lambda m: compat_chr(int(m.group(1), base=16)), s)
def array_equivalent(left, right, strict_nan=False):                  if not isinstance(right_value, float) or not np.isnan(right_value):                      return False              else:                 if left_value != right_value:                      return False          return True
def _isna_old(obj):      elif isinstance(obj, type):          return False      elif isinstance(obj, (ABCSeries, np.ndarray, ABCIndexClass, ABCExtensionArray)):         return _isna_ndarraylike_old(obj, old=False)      elif isinstance(obj, ABCDataFrame):          return obj.isna()      elif isinstance(obj, list):         return _isna_ndarraylike_old(np.asarray(obj, dtype=object), old=False)      elif hasattr(obj, "__array__"):         return _isna_ndarraylike_old(np.asarray(obj), old=False)      else:          return False
def fit_generator(model,              if val_gen and workers > 0:                  val_data = validation_data                 if is_sequence(val_data):                      val_enqueuer = OrderedEnqueuer(                          val_data,                          use_multiprocessing=use_multiprocessing)
class PagedList(object):  def uppercase_escape(s):      return re.sub(          r'\\U[0-9a-fA-F]{8}',         lambda m: m.group(0).decode('unicode_escape'), s)  try:      struct.pack(u'!I', 0)
def predict_generator(model, generator,              enqueuer.start(workers=workers, max_queue_size=max_queue_size)              output_generator = enqueuer.get()          else:             if use_sequence_api:                  output_generator = iter_sequence_infinite(generator)              else:                  output_generator = generator
class DictParameter(Parameter):      tags, that are dynamically constructed outside Luigi), or you have a complex parameter containing logically related      values (like a database connection config).     JSON encoder for :py:class:`~DictParameter`, which makes :py:class:`~_FrozenOrderedDict` JSON serializable.          Ensure that dictionary parameter is converted to a _FrozenOrderedDict so it can be hashed.
class Sequential(Model):                                               use_multiprocessing=use_multiprocessing)      @interfaces.legacy_generator_methods_support     def predict_generator(self, generator, steps=None,                            max_queue_size=10, workers=1,                            use_multiprocessing=False, verbose=0):
def dispatch_to_series(left, right, func, str_rep=None, axis=None):          assert right.index.equals(left.columns)         def column_op(a, b):             return {i: func(a.iloc[:, i], b.iloc[i]) for i in range(len(a.columns))}      elif isinstance(right, ABCSeries): assert right.index.equals(left.index)
class HTTP1Connection(httputil.HTTPConnection):              return connection_header != "close"          elif ("Content-Length" in headers                or headers.get("Transfer-Encoding", "").lower() == "chunked"               or start_line.method in ("HEAD", "GET")):              return connection_header == "keep-alive"          return False
patterns = (          '^lua: {file}:{line}:',          '^{file} \(line {line}\):',          'at {file} line {line}',      )
class Series(base.IndexOpsMixin, generic.NDFrame):                  indexer = self.index.get_indexer_for(key)                  return self.iloc[indexer]              else:                 return self._get_values(key, fill_value=0)          if isinstance(key, (list, tuple)):
fig, ax = plt.subplots(2, 1)  pcm = ax[0].pcolormesh(X, Y, Z,                         norm=colors.SymLogNorm(linthresh=0.03, linscale=0.03,                                               vmin=-1.0, vmax=1.0, base=10),                         cmap='RdBu_r')  fig.colorbar(pcm, ax=ax[0], extend='both')
def na_value_for_dtype(dtype, compat: bool = True):      if is_extension_array_dtype(dtype):          return dtype.na_value     if (         is_datetime64_dtype(dtype)         or is_datetime64tz_dtype(dtype)         or is_timedelta64_dtype(dtype)         or is_period_dtype(dtype)     ):          return NaT      elif is_float_dtype(dtype):          return np.nan
class LSTMCell(Layer):                  inputs_f = inputs                  inputs_c = inputs                  inputs_o = inputs              if 0 < self.recurrent_dropout < 1.:                  h_tm1_i = h_tm1 * rec_dp_mask[0]
def conv_input_length(output_length, filter_size, padding, stride):      return (output_length - 1) * stride - 2 * pad + filter_size def deconv_length(dim_size, stride_size, kernel_size, padding, output_padding):
def standardize_weights(y,      Everything gets normalized to a single sample-wise (or timestep-wise)         weight array.          y: Numpy array of model targets to be weighted.
import re  from .common import InfoExtractor  from ..utils import (     fix_xml_ampersands,     strip_jsonp,     fix_xml_ampersands,  )
class SimpleRNNCell(Layer):          self.dropout = min(1., max(0., dropout))          self.recurrent_dropout = min(1., max(0., recurrent_dropout))          self.state_size = self.units         self.output_size = self.units          self._dropout_mask = None          self._recurrent_dropout_mask = None
TEST_MODULES = [      'tornado.test.curl_httpclient_test',      'tornado.test.escape_test',      'tornado.test.gen_test',      'tornado.test.httpclient_test',      'tornado.test.httpserver_test',      'tornado.test.httputil_test',
class MultiIndex(Index):                      indexer = self._get_level_indexer(key, level=level)                      new_index = maybe_mi_droplevels(indexer, [0], drop_level)                      return indexer, new_index             except (TypeError, ValueError):                  pass              if not any(isinstance(k, slice) for k in key):
class Fish(Generic):      def info(self):         proc = Popen(['fish', '-c', 'echo $FISH_VERSION'],                       stdout=PIPE, stderr=DEVNULL)         version = proc.stdout.read().decode('utf-8').strip()          return u'Fish Shell {}'.format(version)      def put_to_history(self, command):
def check_required_arguments(argument_spec, module_parameters):              missing.append(k)      if missing:         msg = "missing required arguments: %s" % ", ".join(missing)          raise TypeError(to_native(msg))      return missing
import time  import traceback  import math from tornado.concurrent import TracebackFuture, is_future, chain_future  from tornado.log import app_log, gen_log  from tornado.platform.auto import set_close_exec, Waker  from tornado import stack_context
class BlockManager(PandasObject):                          convert=convert,                          regex=regex,                      )                     if m.any():                          new_rb = _extend_blocks(result, new_rb)                      else:                          new_rb.append(b)
class LinuxHardware(Hardware):          pool = ThreadPool(processes=min(len(mtab_entries), cpu_count()))          maxtime = globals().get('GATHER_TIMEOUT') or timeout.DEFAULT_GATHER_TIMEOUT          for fields in mtab_entries:              device, mount, fstype, options = fields[0], fields[1], fields[2], fields[3]
default: :rc:`scatter.edgecolors`          collection = mcoll.PathCollection(                  (path,), scales,                 facecolors=colors,                 edgecolors=edgecolors,                  linewidths=linewidths,                  offsets=offsets,                  transOffset=kwargs.pop('transform', self.transData),
class MailSender(object):              msg = MIMEMultipart()          else:              msg = MIMENonMultipart(*mimetype.split('/', 1))          msg['From'] = self.mailfrom          msg['To'] = COMMASPACE.join(to)          msg['Date'] = formatdate(localtime=True)
class APIRoute(routing.Route):          self.response_model_exclude = response_model_exclude          self.response_model_by_alias = response_model_by_alias          self.response_model_exclude_unset = response_model_exclude_unset         self.response_model_exclude_defaults = response_model_exclude_defaults         self.response_model_exclude_none = response_model_exclude_none          self.include_in_schema = include_in_schema          self.response_class = response_class
class RetcodesTest(LuigiTestCase):          with mock.patch('luigi.scheduler.Scheduler.add_task', new_func):              self.run_and_expect('RequiringTask', 0)              self.run_and_expect('RequiringTask --retcode-not-run 5', 5)         self.run_and_expect('RequiringTask', 0)          with mock.patch('luigi.scheduler.Scheduler.add_task', new_func):              self.run_and_expect('RequiringTask', 0)              self.run_and_expect('RequiringTask --retcode-not-run 5', 5)
fig, ax = plt.subplots(2, 1)  pcm = ax[0].pcolormesh(X, Y, Z,                         norm=colors.SymLogNorm(linthresh=0.03, linscale=0.03,                                               vmin=-1.0, vmax=1.0, base=10),                         cmap='RdBu_r')  fig.colorbar(pcm, ax=ax[0], extend='both')
single_quoted = (  tabsize = 8  class TokenError(Exception): pass  class StopTokenizing(Exception): pass
default: :rc:`scatter.edgecolors`              - 'none': No patch boundary will be drawn.              - A color or sequence of colors.             For non-filled markers, the *edgecolors* kwarg is ignored and             forced to 'face' internally.          plotnonfinite : bool, default: False              Set to plot points with nonfinite *c*, in conjunction with
setup(              "options_test.cfg",              "static/robots.txt",              "static/dir/index.html",              "templates/utf8.html",             "test.crt",              "test.key",
def unescapeHTML(s):      assert type(s) == compat_str      return re.sub(         r'&([^;]+;)', lambda m: _htmlentity_transform(m.group(1)), s)  def get_subprocess_encoding():
from pandas.core.dtypes.common import (      is_list_like,      is_object_dtype,      is_scalar,  ) from pandas.core.dtypes.dtypes import register_extension_dtype  from pandas.core.dtypes.missing import isna
def generate_trailers_to_omit(line: Line, line_length: int) -> Iterator[Set[Leaf  def get_future_imports(node: Node) -> Set[str]:     imports = set()      for child in node.children:          if child.type != syms.simple_stmt:              break
class TimedeltaIndex(                      result._set_freq("infer")              return result     def _fast_union(self, other):          if len(other) == 0:              return self.view(type(self))
class Language(object):              kwargs = component_cfg.get(name, {})              kwargs.setdefault("batch_size", batch_size)              if not hasattr(pipe, "pipe"):                 docs = _pipe(pipe, docs, kwargs)              else:                  docs = pipe.pipe(docs, **kwargs)          for doc, gold in zip(docs, golds):
import logging  from six.moves.urllib.parse import urljoin  from scrapy.http import HtmlResponse  from scrapy.utils.response import get_meta_refresh from scrapy.utils.python import to_native_str, to_unicode  from scrapy.exceptions import IgnoreRequest, NotConfigured from scrapy.utils.python import to_bytes  logger = logging.getLogger(__name__)
import threading  import time  import traceback  import math import weakref from tornado.concurrent import Future, is_future, chain_future, future_set_exc_info, future_add_done_callback  from tornado.log import app_log, gen_log
def is_string_dtype(arr_or_dtype) -> bool:     is_excluded_checks = (is_period_dtype, is_interval_dtype, is_categorical_dtype)          return any(is_excluded(dtype) for is_excluded in is_excluded_checks)      return _is_dtype(arr_or_dtype, condition)
def count_leading_spaces(s):  def process_list_block(docstring, starting_point, section_end,                         leading_spaces, marker):      ending_point = docstring.find('\n\n', starting_point)     block = docstring[starting_point:(None if ending_point == -1 else                                       ending_point - 1)]     docstring_slice = docstring[starting_point:section_end].replace(block, marker)      docstring = (docstring[:starting_point]
def jsonable_encoder(              )          return jsonable_encoder(              obj_dict,             exclude_defaults=exclude_defaults,              custom_encoder=encoder,              sqlalchemy_safe=sqlalchemy_safe,          )
def match(command):  @git_support  def get_new_command(command):      push_upstream = command.stderr.split('\n')[-3].strip().partition('git ')[2]     return replace_argument(command.script, 'push', push_upstream)
def assert_series_equal(          Compare datetime-like which is comparable ignoring dtype.     check_category_order : bool, default True          Whether to compare internal Categorical exactly.      obj : str, default 'Series'          Specify object name being compared, internally used to show appropriate          assertion message.
from scrapy.utils.ftp import ftp_makedirs_cwd  from scrapy.exceptions import NotConfigured  from scrapy.utils.misc import load_object  from scrapy.utils.python import get_func_args from scrapy.utils.log import failure_to_exc_info  logger = logging.getLogger(__name__)
class Function(object):                                  feed_symbols,                                  symbol_vals,                                  session)         fetched = self._callable_fn(*array_vals)          return fetched[:len(self.outputs)]      def _legacy_call(self, inputs):
class DataFrame(NDFrame):              other = other._convert(datetime=True, timedelta=True)              if not self.columns.equals(combined_columns):                  self = self.reindex(columns=combined_columns)          from pandas.core.reshape.concat import concat
def srt_subtitles_timecode(seconds):  def dfxp2srt(dfxp_data):      LEGACY_NAMESPACES = ( ('http: 'http: 'http: 'http:          ]), ('http: 'http: 'http:          ]),      )
def split_line(      If `py36` is True, splitting may generate syntax that is only compatible      with Python 3.6 and later.     if isinstance(line, UnformattedLines) or line.is_comment:          yield line          return
def format_stdin_to_stdout(      `line_length`, `fast`, `is_pyi`, and `force_py36` arguments are passed to      :func:`format_file_contents`.     src = io.TextIOWrapper(             sys.stdin.read(),             encoding=encoding,             newline=newline,             write_through=True,         )      dst = src      try:          dst = format_file_contents(src, line_length=line_length, fast=fast, mode=mode)
def test_check_mutually_exclusive_none():  def test_check_mutually_exclusive_no_params(mutually_exclusive_terms):      with pytest.raises(TypeError) as te:          check_mutually_exclusive(mutually_exclusive_terms, None)     assert "TypeError: 'NoneType' object is not iterable" in to_native(te.error)
class NDFrame(PandasObject, SelectionMixin, indexing.IndexingMixin):              return self         arr = operator.inv(com.values_from_object(self))         return self.__array_wrap__(arr)      def __nonzero__(self):          raise ValueError(
from .generic import Generic  class Bash(Generic):      def app_alias(self, fuck):         alias = "TF_ALIAS={0}" \                 " alias {0}='PYTHONIOENCODING=utf-8" \                 " TF_CMD=$(TF_SHELL_ALIASES=$(alias) thefuck $(fc -ln -1)) && " \                  " eval $TF_CMD".format(fuck)          if settings.alter_history:
class scheduler(Config):      visualization_graph = parameter.Parameter(default="svg", config_path=dict(section='scheduler', name='visualization-graph'))  def fix_time(x):
def whitespace(leaf: Leaf) -> str:          ):              return NO     elif prev is None:         return NO      elif prev.type in OPENING_BRACKETS:          return NO
def _unstack_multiple(data, clocs, fill_value=None):              result = data              for i in range(len(clocs)):                  val = clocs[i]                 result = result.unstack(val, fill_value=fill_value)                  clocs = [v if i > v else v - 1 for v in clocs]              return result
class CollectionRequirement:                  requirement = req                  op = operator.eq                 if parent and version == '*' and requirement != '*':                     break                 elif requirement == '*' or version == '*':                     continue              if not op(LooseVersion(version), LooseVersion(requirement)):                  break
class APIRouter(routing.Router):              response_model_exclude_unset=bool(                  response_model_exclude_unset or response_model_skip_defaults              ),             response_model_exclude_defaults=response_model_exclude_defaults,             response_model_exclude_none=response_model_exclude_none,              include_in_schema=include_in_schema,              response_class=response_class or self.default_response_class,              name=name,
def _get_collection_info(dep_map, existing_collections, collection, requirement,      existing = [c for c in existing_collections if to_text(c) == to_text(collection_info)]      if existing and not collection_info.force:         if not existing[0].has_requirement(to_text(collection_info), requirement):             existing[0].add_requirement(to_text(collection_info), requirement)          collection_info = existing[0]      dep_map[to_text(collection_info)] = collection_info
class Model(Container):                  enqueuer.start(workers=workers, max_queue_size=max_queue_size)                  output_generator = enqueuer.get()              else:                 if is_sequence:                     output_generator = iter(generator)                 else:                     output_generator = generator              callback_model.stop_training = False
def in_top_k(predictions, targets, k):  def conv2d_transpose(x, kernel, output_shape, strides=(1, 1),                      padding='valid', data_format=None, dilation_rate=(1, 1)):      data_format = normalize_data_format(data_format)      x = _preprocess_conv2d_input(x, data_format)
from pandas.core.dtypes.generic import ABCSeries  from pandas.core.dtypes.missing import isna from pandas._typing import Dtype  from pandas.core.arrays.interval import IntervalArray, _interval_shared_docs  import pandas.core.common as com  import pandas.core.indexes.base as ibase
class Scraper(object):                      spider=spider, exception=output.value)              else:                  logger.error('Error processing %(item)s', {'item': item},                              exc_info=failure_to_exc_info(output),                              extra={'spider': spider})          else:              logkws = self.logformatter.scraped(output, response, spider)              logger.log(*logformatter_adapter(logkws), extra={'spider': spider})
def test_resample_categorical_data_with_timedeltaindex():          index=pd.to_timedelta([0, 10], unit="s"),      )      expected = expected.reindex(["Group_obj", "Group"], axis=1)     expected["Group"] = expected["Group_obj"].astype("category")      tm.assert_frame_equal(result, expected)
def _unstack_multiple(data, clocs, fill_value=None):      index = data.index      clocs = [index._get_level_number(i) for i in clocs]      rlocs = [i for i in range(index.nlevels) if i not in clocs] def _unstack_single(data, clocs, fill_value=None):      index = data.index      clocs = [index._get_level_number(i) for i in clocs]     rlocs = [i for i in range(index.nlevels) if i not in clocs] def _unstack_multiple(data, clocs, fill_value=None):      index = data.index      clocs = [index._get_level_number(i) for i in clocs]      rlocs = [i for i in range(index.nlevels) if i not in clocs] def _unstack_single(data, clocs, fill_value=None):     rlocs = [i for i in range(index.nlevels) if i not in clocs] def _unstack_multiple(data, clocs, fill_value=None):      index = data.index      clocs = [index._get_level_number(i) for i in clocs]      rlocs = [i for i in range(index.nlevels) if i not in clocs]
def _isna_old(obj):      elif hasattr(obj, "__array__"):          return _isna_ndarraylike_old(np.asarray(obj), old=True)      else:         return obj is None  _isna = _isna_new
class S3CopyToTable(rdbms.CopyToTable):          if '.' in self.table:              query = ("select 1 as table_exists "                       "from information_schema.tables "                      "where table_schema = %s and table_name = %s limit 1")          else:              query = ("select 1 as table_exists "                       "from pg_table_def "                      "where tablename = %s limit 1")          cursor = connection.cursor()          try:              cursor.execute(query, tuple(self.table.split('.')))
def get_request_handler(                  exclude=response_model_exclude,                  by_alias=response_model_by_alias,                  exclude_unset=response_model_exclude_unset,                  is_coroutine=is_coroutine,                 exclude_defaults=response_model_exclude_defaults,                 exclude_none=response_model_exclude_none,              )              response = response_class(
except ImportError:      from ordereddict import OrderedDict  from luigi import six from luigi.utils import Sequence  class TaskClassException(Exception):
class _AxesBase(martist.Artist):              if right is None:                  right = old_right         if self.get_xscale() == 'log':              if left <= 0:                  cbook._warn_external(                      'Attempted to set non-positive left xlim on a '
def lib2to3_parse(src_txt: str) -> Node:      grammar = pygram.python_grammar_no_print_statement      if src_txt[-1] != "\n":         nl = "\r\n" if "\r\n" in src_txt[:1024] else "\n"         src_txt += nl      for grammar in GRAMMARS:          drv = driver.Driver(grammar, pytree.convert)          try:
class Tracer:          self._write(s)      def __enter__(self):          calling_frame = inspect.currentframe().f_back          if not self._is_internal_frame(calling_frame):              calling_frame.f_trace = self.trace              self.target_frames.add(calling_frame)         stack = self.thread_local.__dict__.setdefault('original_trace_functions', [])         stack.append(sys.gettrace())          sys.settrace(self.trace)      def __exit__(self, exc_type, exc_value, exc_traceback):          stack = self.thread_local.original_trace_functions          sys.settrace(stack.pop())          calling_frame = inspect.currentframe().f_back
class TestBackend(object):          else:              assert_list_pairwise(v_list, shape=False, allclose=False, itself=True)      def test_print_tensor(self):          check_single_tensor_operation('print_tensor', (), WITH_NP)          check_single_tensor_operation('print_tensor', (2,), WITH_NP)         check_single_tensor_operation('print_tensor', (4, 3), WITH_NP)         check_single_tensor_operation('print_tensor', (1, 2, 3), WITH_NP)      def test_elementwise_operations(self):          check_single_tensor_operation('max', (4, 2), WITH_NP)
default: 'top'          from .tight_layout import (              get_renderer, get_subplotspec_list, get_tight_layout_figure)          subplotspec_list = get_subplotspec_list(self.axes)          if None in subplotspec_list:
class OffsiteMiddleware(object):          if not allowed_domains: return re.compile('') url_pattern = re.compile("^https?:          for domain in allowed_domains:             if url_pattern.match(domain):                  message = ("allowed_domains accepts only domains, not URLs. "                             "Ignoring URL entry %s in allowed_domains." % domain)                  warnings.warn(message, URLWarning)          regex = r'^(.*\.)?(%s)$' % '|'.join(domains)          return re.compile(regex)
Wild         185.0          numeric_df = self._get_numeric_data()          cols = numeric_df.columns          idx = cols.copy()         mat = numeric_df.astype(K.floatx())          if method == "pearson":             correl = libalgos.nancorr(mat, minp=min_periods)          elif method == "spearman":             correl = libalgos.nancorr_spearman(mat, minp=min_periods)          elif method == "kendall" or callable(method):              if min_periods is None:                  min_periods = 1             mat = ensure_float64(mat).T              corrf = nanops.get_corr_func(method)              K = len(cols)              correl = np.empty((K, K), dtype=float)
class ColorbarBase(_ColorbarMappableDummy):      def set_label(self, label, **kw):         self._label = str(label)          self._labelkw = kw          self._set_label()
class Tracer:          self.target_codes = set()          self.target_frames = set()          self.thread_local = threading.local()     def add_target_code(self, code):         self.target_codes.add(code)      def add_target_frame(self, frame):         self.target_frames.add(frame)      def __call__(self, function):          self.target_codes.add(function.__code__)          @functools.wraps(function)
class Categorical(ExtensionArray, PandasObject):              if dtype == self.dtype:                  return self              return self._set_dtype(dtype)         if is_extension_array_dtype(dtype) and is_integer_dtype(dtype) and self.isna().any():              msg = "Cannot convert float NaN to integer"              raise ValueError(msg)
class FeedExporter(object):          d.addCallback(lambda _: logger.info(logfmt % "Stored", log_args,                                              exc_info=failure_to_exc_info(f),                                              extra={'spider': spider}))          d.addErrback(lambda f: logger.error(logfmt % "Error storing", log_args,                                             exc_info=failure_to_exc_info(f),                                             extra={'spider': spider}))          return d      def item_scraped(self, item, spider):
class Conv2DTranspose(Conv2D):          out_height = conv_utils.deconv_length(height,                                                stride_h, kernel_h,                                                self.padding,                                               out_pad_h)          out_width = conv_utils.deconv_length(width,                                               stride_w, kernel_w,                                               self.padding,                                              out_pad_w)          if self.data_format == 'channels_first':              output_shape = (batch_size, self.filters, out_height, out_width)          else:
class BaseGrouper:              if mask.any():                  result = result.astype("float64")                  result[mask] = np.nan          if kind == "aggregate" and self._filter_empty_groups and not counts.all():              assert result.ndim != 2
class APIRouter(routing.Router):          response_model_by_alias: bool = True,          response_model_skip_defaults: bool = None,          response_model_exclude_unset: bool = False,         response_model_exclude_defaults: bool = False,         response_model_exclude_none: bool = False,          include_in_schema: bool = True,          response_class: Type[Response] = None,          name: str = None,
class YoutubeDL(object):                          FORMAT_RE.format(numeric_field),                          r'%({0})s'.format(numeric_field), outtmpl)             filename = expand_path(outtmpl % template_dict)
class GalaxyCLI(CLI):          obj_name = context.CLIARGS['{0}_name'.format(galaxy_type)]          inject_data = dict(             description='your description',             ansible_plugin_list_dir=get_versioned_doclink('plugins/plugins.html'),          )          if galaxy_type == 'role':
class PeriodIndex(DatetimeIndexOpsMixin, Int64Index):      @cache_readonly      def _engine(self):         period = weakref.ref(self)          return self._engine_type(period, len(self))      @doc(Index.__contains__)
class Task(object):          params_str = {}          params = dict(self.get_params())          for param_name, param_value in six.iteritems(self.param_kwargs):             if params[param_name] is not None:                 params_str[param_name] = params[param_name].serialize(param_value, task_name=self.task_name)          return params_str
class BusinessHourMixin(BusinessMixin):              if bd != 0:                 skip_bd = BusinessDay(n=bd)                  if not self.next_bday.is_on_offset(other):                      prev_open = self._prev_opening_time(other)
class TestInsertIndexCoercion(CoercionBase):          )         msg = "cannot insert TimedeltaArray with incompatible label"          with pytest.raises(TypeError, match=msg):              obj.insert(1, pd.Timestamp("2012-01-01"))         msg = "cannot insert TimedeltaArray with incompatible label"          with pytest.raises(TypeError, match=msg):              obj.insert(1, 1)
class Model(Container):              validation_steps: Only relevant if `validation_data`                  is a generator. Total number of steps (batches of samples)                  to yield from `generator` before stopping.                 Optional for `Sequence`: if unspecified, will use                 the `len(generator)` as a number of steps.              class_weight: Dictionary mapping class indices to a weight                  for the class.              max_queue_size: Integer. Maximum size for the generator queue.
def write_flv_header(stream, metadata):      stream.write(b'\x12')     stream.write(pack('!L', len(metadata)))      stream.write(b'\x00\x00\x00\x00\x00\x00\x00\x00')      stream.write(metadata)
def update_add(x, increment):          The variable `x` updated.     op = tf_state_ops.assign_add(x, increment)     with tf.control_dependencies([op]):         return tf.identity(x)  @symbolic
class Conv2DTranspose(Conv2D):              output_shape,              self.strides,              padding=self.padding,             dilation=self.dilation_rate,             data_format=self.data_format)          if self.use_bias:              outputs = K.bias_add(
