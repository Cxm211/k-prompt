* @see <a href="http:      */      public ResponseList<DirectMessage> getDirectMessages() throws TwitterException {         return DirectMessage.createDirectMessageList(get(getBaseURL() + "direct_messages.json", true));      }      /**
private static final String MOVE_COST_KEY = "hbase.master.balancer.stochastic.moveCost";      private static final String MAX_MOVES_PERCENT_KEY =          "hbase.master.balancer.stochastic.maxMovePercent";     private static final float DEFAULT_MOVE_COST = 100;      private static final int DEFAULT_MAX_MOVES = 600;      private static final float DEFAULT_MAX_MOVE_PERCENT = 0.25f;
* Optimizes unused function arguments, unused return values, and inlines     * constant parameters. Also runs RemoveUnusedVars.     */   final PassFactory optimizeCallsAndRemoveUnusedVars =        new PassFactory("optimizeCalls_and_removeUnusedVars", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
final PassFactory extractPrototypeMemberDeclarations =        new PassFactory("extractPrototypeMemberDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
return this.ssl;    }   public Integer getAutoCommitInterval() {     return this.autoCommitInterval;    }   public void setAutoCommitInterval(Integer autoCommitInterval) {     this.autoCommitInterval = autoCommitInterval;    }
* @should return all global properties in the database    */   @Authorized(PrivilegeConstants.GET_GLOBAL_PROPERTIES)  public List<GlobalProperty> getAllGlobalProperties();   /**    * Save the given list of global properties to the database.
s = target;    }   return failOrAccept(prevAccept, input, reach, t);    }   protected int failOrAccept(ExecState prevAccept, CharStream input, int reach, int t);    }   protected int failOrAccept(ExecState prevAccept, CharStream input, int reach, int t);    }   protected int failOrAccept(ExecState prevAccept, CharStream input, int reach, int t);    }   protected int failOrAccept(ExecState prevAccept, CharStream input, int reach, int t);    }   protected int failOrAccept(ExecState prevAccept, CharStream input, int reach, int t);    }   protected int failOrAccept(ExecState prevAccept, CharStream input, int reach, int t);    }   protected int failOrAccept(ExecState prevAccept, CharStream input, int reach, int t);    }   protected int failOrAccept(ExecState prevAccept, CharStream input, int reach, int t);    }   protected int failOrAccept(ExecState prevAccept, CharStream input, int reach, int t);    }   protected int failOrAccept(ExecState prevAccept, CharStream input, int reach, int t);    }   protected int failOrAccept(ExecState prevAccept, CharStream input, int reach, int t);    }   protected int failOrAccept(ExecState prevAccept, CharStream input, int reach, int t);    }   protected int failOrAccept(ExecState prevAccept, CharStream input, int reach, int t);    }   protected int failOrAccept(ExecState prevAccept, CharStream input, int reach, int t);    }   protected int failOrAccept(ExecState prevAccept, CharStream input, int reach, int t);    }   protected int failOrAccept(ExecState prevAccept, CharStream input, int reach, int t);    }   protected int failOrAccept(ExecState prevAccept, CharStream input, int reach, int t);    }   protected int failOrAccept(ExecState prevAccept, CharStream input, int reach, int t);    }   protected int failOrAccept(ExecState prevAccept, CharStream input, int reach, int t);    }   protected int failOrAccept(ExecState prevAccept, CharStream input, int reach, int t);    }   protected int failOrAccept(
checks.add(dartSuperAccessorsPass);      }     if (options.needsTranspilationFrom(ES7)) {        TranspilationPasses.addEs2017Passes(checks);        checks.add(setFeatureSet(ES7));      }     if (options.needsTranspilationFrom(ES6) && !options.skipTranspilationAndCrash) {        checks.add(es6ExternsCheck);        TranspilationPasses.addEs6EarlyPasses(checks);      }
};       final PassFactory instrumentFunctions =        new PassFactory("instrumentFunctions", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
private int pressedButton = -1;    private int button;    private boolean pressed, over, cancelled;   private float visualPressedTime;    private long tapCountInterval = (long)(0.4f * 1000000000l);    private int tapCount;    private long lastTapTime;
* @param hostName   the name of the host.       */      @LogMessage(level = Level.WARN)     @Message(id = 10803, value = "Caught exception awaiting final response from server %s on host %s")      void caughtExceptionAwaitingFinalResponse(@Cause Throwable cause, String serverName, String hostName);      /**
}      @Override     public List<Edge> getSelectedUnderlyingEdges() {          List<Edge> selected = new ArrayList<>();         for (Iterator<EdgeModel> itr = octree.getEdgeIterator(); itr.hasNext();) {              EdgeModel edgeModel = itr.next();
}   @Test  void userConfigurationBeans() {    this.contextRunner      .withUserConfiguration(LiquibaseUserConfiguration.class, EmbeddedDataSourceConfiguration.class)      .run((context) -> {
@Message(id = 14238, value = "More than one timer found in database with id %s")      RuntimeException moreThanOneTimerFoundWithId(String id);     @Message(id = 14238, value = "The timer service has been disabled. Please add a <timer-service> entry into the ejb section of the server configuration to enable it.")      String timerServiceIsNotActive();     @Message(id = 14239, value = "This EJB does not have any timeout methods")      String ejbHasNoTimerMethods();  }
* @should exclude not allowed locales    * @should cache results for a user    */  public List<Locale> getSearchLocales();   /**    * Used by Spring to set the http client for accessing the openmrs implementation service
List<ZWaveDbConfigurationParameter> configList = database.getProductConfigParameters();     if(configList.size() == 0) {       break;      }
org.gephi.graph.api.TextData sourceEdgeTextData = sourceEdgeData.getTextData();          String label = sourceEdgeData.getLabel();         if (sourceEdgeTextData != null && sourceEdgeTextData.getText() != null && !sourceEdgeTextData.getText().isEmpty() && sourceEdgeTextData.isVisible()) {              label = sourceEdgeTextData.getText();          } else if (sourceEdgeTextData != null && !sourceEdgeTextData.isVisible()) {              label = null;
};       final PassFactory exportTestFunctions =        new PassFactory("exportTestFunctions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
eq((byte) 0),                  eq(new GeneralDataCoding(                          false,                         false,                          MessageClass.CLASS1,                          Alphabet.ALPHA_DEFAULT)),                  eq((byte) 0),
String uri = getScpUri() + "?username=admin&password=admin&knownHostsFile=" + getKnownHostsFile();          template.sendBodyAndHeader(uri, "Bye World", Exchange.FILE_NAME, "mysub/bye.txt");          Thread.sleep(500);          File file = new File(getScpPath() + "/mysub/bye.txt");          assertFileExists(file.getAbsolutePath());
new JedisClusterCommand<Integer>(connectionHandler, maxRedirections) {        @Override        public Integer execute(Jedis connection) {         connection.subscribe(jedisPubSub, patterns);          return 0;        }      }.runWithAnyNode();
* @return the number of blocks     */    public int getNumberOfBlocks() {     Preconditions.checkNotNull(mBlockIdsOnTiers);      int numberOfBlocks = 0;     for (List<Long> blockIds : mBlockIdsOnTiers.values()) {
}          }          if (isStatisticsEnabled()) {             statistics.addGetTimeNanos(System.nanoTime() - start);          }          CacheEntryProcessorEntry entry = new CacheEntryProcessorEntry(key, record, this, now);          final Object process = entryProcessor.process(entry, arguments);
*       * @return the message.       */     @Message(id = 10865, value = "Invalid content declaration")      String invalidContentDeclaration();      /**
invocation.nodeEngine, invocation.serviceName, isStillRunningOperation,                      invocation.getTarget(), 0, 0, IS_EXECUTING_CALL_TIMEOUT, callback, true);             invocation.logger.warning("Asking if operation execution has been started: " + invocation);              inv.invoke();          }      }
float b = Float.parseFloat(reader.getAttributeValue(null, "b"));                      float alpha = Float.parseFloat(reader.getAttributeValue(null, "a"));                      if(r < 0 || g < 0 || b < 0){                          r = g = b = 0;                         alpha = 1;                      }                      edge.setR(r);
@SuppressWarnings("unchecked")    @Override   public V value(Object node) {      Object value = adjacentNodeValues.get(node);      if (value == PRED) {        return null;
public interface AtomixMapEndpointBuilder              extends                  AtomixMapEndpointConsumerBuilder, AtomixMapEndpointProducerBuilder {          default AdvancedAtomixMapEndpointBuilder advanced() {
public interface JmsEndpointBuilder              extends                  JmsEndpointConsumerBuilder, JmsEndpointProducerBuilder {          default AdvancedJmsEndpointBuilder advanced() {
};       final PassFactory ignoreCajaProperties =        new PassFactory("ignoreCajaProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
protected void handleQOffer(String[] args) {          long timeout = 0;          if (args.length > 2) {             timeout = Long.parseLong(args[2]);          }          try {              boolean offered = getQueue().offer(args[1], timeout, TimeUnit.SECONDS);
private String port = "5000";    @Override    protected void applyToCrshShellConfig(Properties config) {     if (this.enabled) {     config.put("crash.telnet.port", this.port);     }    }
* @throws IOException Thrown, if the de-serialization encountered an I/O related error. Typically raised by the    *                     input view, which may have an underlying I/O channel from which it reads.    */  public abstract void deserialize(T target, DataInputView source) throws IOException;   /**    * Copies exactly one record from the source input view to the target output view. Whether this operation
protected void handleQOffer(String[] args) {          long timeout = 0;          if (args.length > 2) {             timeout = Long.parseLong(args[2]);          }          try {              boolean offered = getQueue().offer(args[1], timeout, TimeUnit.SECONDS);
@Override      public KeyColumnValueStore openDatabase(final String name) throws StorageException {         if (!stores.contains(name)) {              stores.putIfAbsent(name,new InMemoryKeyColumnValueStore(name));          }          KeyColumnValueStore store = stores.get(name);
failureCause.compareAndSet(null, toFailure(throwable));          boolean failed = queryState.setIf(FAILED, currentState -> !currentState.isDone());          if (failed) {             log.warn(throwable, "Query %s failed", queryId);          }          else {              log.debug(throwable, "Failure after query %s finished", queryId);
assertEquals(1, taskService.createTaskQuery()                      .or()                      .taskInvolvedUser("involvedUser")                      .taskInvolvedGroups(groups)                      .endOr()                      .count());
public interface CordaEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedCordaEndpointProducerBuilder advanced() {
assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())          .isEqualTo(new TypeToken<List<String>>() {}.getType());      Type mBodyGeneric = new TypeToken<Maybe<List<String>>>() {}.getType();     assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())          .isEqualTo(new TypeToken<List<String>>() {}.getType());      Type fBodyGeneric = new TypeToken<Flowable<List<String>>>() {}.getType();     assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())          .isEqualTo(new TypeToken<List<String>>() {}.getType());      Type oResponseClass = new TypeToken<Observable<Response<String>>>() {}.getType();
}    public void glUniform3fv (int location, int count, FloatBuffer v) {    GL20.glUniform3fv(location, v);    }    public void glUniform3fv (int location, int count, float[] v, int offset) {    GL20.glUniform3fv(location, toFloatBuffer(v, offset, count * 3));    }    public void glUniform3i (int location, int x, int y, int z) {
while (line != null && line.trim().length() > 0) {                          int p = line.indexOf(':');                          if (p >= 0)                             headers.put(line.substring(0, p).trim().toLowerCase(), line.substring(p + 1).trim());                          line = in.readLine();                      }                  }
*       * @return Type of exception       */     public Class<? extends T> exceptionClass() {          return this.exceptionClass;      }
* @param ast DetailAST node.       * @return Column number if non-comment node exists, -1 otherwise.       */     private int findColumnNo(DetailAST ast) {          int resultNo = -1;          DetailAST node = ast;          while (node != null) {
Node node1 = Node.newString(Token.NAME, "f");      node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));      Node node2 = Node.newString(Token.NAME, "f");     assertFalse(node1.isEquivalentToTyped(node2));    }    public void testVarArgs1() {
*  * @see NormalizableKey    */  public synchronized void putNormalizedKey(T record, byte[] target, int offset, int numBytes);   /**    * Writes the record in such a fashion that all keys are normalizing and at the beginning of the serialized data.
* @param hostName the name of the host.       */      @LogMessage(level = Level.WARN)     @Message(id = 10804, value = "Interrupted awaiting final response from host %s")      void interruptedAwaitingFinalResponse(String hostName);      /**
return style;    }   public void setText (String text) {     if (text == null) throw new IllegalArgumentException("text cannot be null.");     if (text.equals(this.text)) return;     this.text = text;
}           StaticDirectory<IHelloService> dic = new StaticDirectory<IHelloService>(durl, invokers, null);          dic.buildRouterChain(invokers);           AbstractClusterInvoker<IHelloService> cluster = new AbstractClusterInvoker(dic) {               @Override               protected Result doInvoke(Invocation invocation, List invokers, LoadBalance loadbalance) {
for (int i = 0; i < 10; i++) {                   sendDecrease(bulb, 27, bridgeId);                   try {                      Thread.sleep(100);                   } catch (InterruptedException e) {                   }               }
String uri = getScpUri() + "?username=admin&password=admin&knownHostsFile=" + getKnownHostsFile();          template.sendBodyAndHeader(uri, "Bye World", Exchange.FILE_NAME, "mysub/bye.txt");          Thread.sleep(200);          File file = new File(getScpPath() + "/mysub/bye.txt");          assertFileExists(file.getAbsolutePath());
final String name = def.getName();                      if (name != null && name.equals(propertyName)) {                          final AnnotatedMember propMember = def.getPrimaryMember();                         final JavaType propType = propMember.getType(beanDesc.bindingsForBeanType());                          if (PrimitiveType.fromType(propType) != null) {                              return PrimitiveType.createProperty(propType);                          } else {
* @since Twitter4J 2.0.1       */      public ResponseList<Status> getFavorites(int page) throws TwitterException {         return Status.createStatuseList(get(getBaseURL() + "favorites.json", "page", String.valueOf(page), true));      }      /**
}           }          for (int i = 0; i < 1000 * 1; ++i) {               Connection conn = dataSource.getConnection();              PreparedStatement stmt = conn.prepareStatement("SELECT " + i);               stmt.execute();
};       final HotSwapPassFactory checkProvides =        new HotSwapPassFactory("checkProvides", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
*  * @see java.lang.Object    */  public abstract int hash(T record);   /**    * Sets the given element as the comparison reference for future calls to
public interface LinkedInEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedLinkedInEndpointProducerBuilder advanced() {
};       final PassFactory inlineVariables =        new PassFactory("inlineVariables", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
final PassFactory specializeInitialModule =        new PassFactory("specializeInitialModule", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory peepholeOptimizations =        new PassFactory("peepholeOptimizations", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return the message.       */     @Message(id = 10850, value = "No handler for operation %s at address %s")      String noHandlerForOperation(String operationName, PathAddress address);      /**
};       final PassFactory rewriteFunctionExpressions =        new PassFactory("rewriteFunctionExpressions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
return defineClass(classDefinition, PagesHashStrategy.class, callSiteBinder.getBindings(), getClass().getClassLoader());     }     private void generateConstructor(ClassDefinition classDefinition,              List<Integer> joinChannels,              FieldDefinition sizeField,              List<FieldDefinition> channelFields,
* @return property value in the type of the default value    * @since 1.7    */  public <T> T getGlobalPropertyValue(String propertyName, T defaultValue) throws APIException {    return (T) getGlobalPropertyValue(propertyName, defaultValue);   }    * @param aClass class of object getting length for
};       final PassFactory convertToDottedProperties =        new PassFactory("convertToDottedProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*         thrown if the given vertex cannot be connected to <code>vertex</code> in the requested manner    */   public void connectTo(final AbstractJobVertex vertex) throws JobGraphDefinitionException {   this.connectTo(vertex, null, null, -1, -1, DistributionPattern.BIPARTITE, false);   }   /**
*       * @return the message.       */     @Message(id = 10869, value = "Unknown %s %s")      String unknown(String name, String value);      /**
public interface EjbEndpointBuilder extends EndpointProducerBuilder {          default AdvancedEjbEndpointBuilder advanced() {              return (AdvancedEjbEndpointBuilder) this;          }
, (args = args.rest()).first()        , args.rest());     case 10:     return doInvoke(args.first()        , (args = args.rest()).first()        , (args = args.rest()).first()        , (args = args.rest()).first()
}    public void glUniform2fv (int location, int count, FloatBuffer v) {    GL20.glUniform2fv(location, v);    }    public void glUniform2fv (int location, int count, float[] v, int offset) {    GL20.glUniform2fv(location, toFloatBuffer(v, offset, count << 1));    }    public void glUniform2i (int location, int x, int y) {
}        else if(String.class.equals(cls)) {          if(json != null && json.startsWith("\"") && json.endsWith("\"") && json.length() > 1)           return json.substring(1, json.length() - 2);          else            return json;        }
}       final PassFactory renameVars =        new PassFactory("renameVars", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
* @see <a href="http:       */      public ResponseList<Status> getRetweets(long statusId) throws TwitterException {         return Status.createStatuseList(get(getBaseURL()                  + "statuses/retweets/" + statusId + ".json", true));      }
boolean generic() default false;     boolean injvm() default false;      boolean check() default true;
public static Date getDate(String name, String format) throws TwitterException {          SimpleDateFormat sdf = formatMap.get().get(format);          if (null == sdf) {             sdf = new SimpleDateFormat(format);              sdf.setTimeZone(TimeZone.getTimeZone("GMT"));              formatMap.get().put(format, sdf);          }
try {        mFileSystemMaster.createFile(new AlluxioURI("alluxio:/a/f"), CreateFileOptions.defaults());       Assert.fail();      } catch (FileAlreadyExistsException e) {      }    }
public void testMultipleActionsPredicatesOptions_2() throws Exception {    mkdir(tmpdir);   StringBuilder grammarBuilder = new StringBuilder(238);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s @after {print($ctx.toStringTree(recog=self))} : e ;\n");    grammarBuilder.append("e : a=e op=('*'|'/') b=e  {}{True}?\n");
template.sendBodyAndHeader("file:          MockEndpoint mock = getMockEndpoint("mock:result2");         mock.expectedBodiesReceived("Hello World 2");          assertMockEndpointsSatisfied();          oneExchangeDone.matchesMockWaitTime();
public interface ServerEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedServerEndpointProducerBuilder advanced() {
* @see <a href="http:       */      public ResponseList<Status> getRetweetsOfMe(Paging paging) throws TwitterException {         return Status.createStatuseList(get(getBaseURL() + "statuses/retweets_of_me.json",                  null, paging.asPostParameterList(), true));      }
* @since 4.5   */  public class BlockJUnit4ClassRunner extends ParentRunner<FrameworkMethod> {     private ConcurrentHashMap<FrameworkMethod, Description> fMethodDescriptions = new ConcurrentHashMap<FrameworkMethod, Description>();      /**       * Creates a BlockJUnit4ClassRunner to run {@code klass}       *
}      private void initDic() {         dic.buildRouterChain(invokers);      }      @Test()
*       * @return the message.       */     @Message(id = 10856, value = "Invalid url stream.")      String invalidUrlStream();      /**
HostAndPort host = HostAndPort.fromString(server);          try {             return new URI("http", null, host.getHostText(), host.getPortOrDefault(80), null, null, null);          }          catch (URISyntaxException e) {              throw new IllegalArgumentException(e);
public void testMultipleAlternativesWithCommonLabel_2() throws Exception {    mkdir(tmpdir);   StringBuilder grammarBuilder = new StringBuilder(561);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s : e {print($e.v)};\n");    grammarBuilder.append("e returns [int v]\n");
final PassFactory minimizeExitPoints =        new PassFactory("minimizeExitPoints", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*      * @param queueName Name of the job queue.      */   @InterfaceAudience.Private   public void setQueueName(String queueName) {      super.setQueueName(queueName);    }
private static final PartitionsSpec DEFAULT_PARTITIONS_SPEC = HashedPartitionsSpec.makeDefaultHashedPartitionsSpec();    private static final Map<DateTime, List<HadoopyShardSpec>> DEFAULT_SHARD_SPECS = ImmutableMap.of();    private static final IndexSpec DEFAULT_INDEX_SPEC = new IndexSpec();   private static final int DEFAULT_ROW_FLUSH_BOUNDARY = 80000;    private static final boolean DEFAULT_USE_COMBINER = false;    private static final Boolean DEFAULT_BUILD_V9_DIRECTLY = Boolean.FALSE;    private static final int DEFAULT_NUM_BACKGROUND_PERSIST_THREADS = 0;
* Validates Username and Password then saved sercurityToken to a variable    */   private void login() throws InvalidLoginException, IOException {   logger.trace("attempting to login");    String url = String      .format("%s/api/user/validate?appId=%s&SecurityToken=null&username=%s&password=%s",        WEBSITE, enc(appId), enc(userName), enc(password));
}    public void glUniform3fv (int location, int count, FloatBuffer v) {    GL20.glUniform3fv(location, v);    }    public void glUniform3fv (int location, int count, float[] v, int offset) {    GL20.glUniform3fv(location, toFloatBuffer(v, offset, count * 3));    }    public void glUniform3i (int location, int x, int y, int z) {
);         MaterializedResult expected = MaterializedResult.resultBuilder(taskContext.getSession(), concat(probeTypes, buildPages.getTypes()))                  .row("a", "a")                  .row("a", "a")                  .row("b", "b")
}    public void glGetBufferParameteriv (int target, int pname, IntBuffer params) {    GL15.glGetBufferParameteriv(target, pname, params);    }    public int glGetError () {
AbstractAioChannel ch = null;          try {              ch = findChannelForNewObject(command);          } catch (Exception e) {          }
}          }          if (simple.getFromReceivedDate() != null) {             String s = simple.getFromReceivedDate();              if (s.startsWith("now")) {                  long offset = extractOffset(s, typeConverter);                  builder = builder.and(new NowSearchTerm(SearchTermBuilder.Comparison.GE.asNum(), false, offset));
public interface GoogleMailStreamEndpointBuilder              extends                  EndpointConsumerBuilder {          default AdvancedGoogleMailStreamEndpointBuilder advanced() {
* Some simple, local collapses (e.g., {@code var x; var y;} becomes     * {@code var x,y;}.     */   final PassFactory exploitAssign =        new PassFactory("expointAssign", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return the message.       */     @Message(id = 10861, value = "Cannot remove deployment %s from the domain as it is still used by server groups %s")      String cannotRemoveDeploymentInUse(String name, List<String> groups);      /**
if (offset < 0) {              offset = 0;          }         if (offset >= 0) {              update = Util.getWriteAttributeOperation(address, SOCKET_BINDING_PORT_OFFSET, offset);          }          updates.add(update);
*       * @return the message.       */     @Message(id = 10858, value = "No deployment content with hash %s is available in the deployment content repository.")      String noDeploymentContentWithHash(String hash);      /**
private void handleAtomicNumberSet(String[] args) {          long v = 0;          if (args.length > 1) {             v = Long.parseLong(args[1]);          }          getAtomicNumber().set(v);          println(getAtomicNumber().get());
*      * @param queueName Name of the job queue.      */   @InterfaceAudience.Private   public void setQueueName(String queueName) {      super.setQueueName(queueName);    }
