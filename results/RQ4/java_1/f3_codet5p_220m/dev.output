/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */  package org.apache.ignite.internal.processors.cache;  import org.apache.ignite.IgniteCheckedException; import org.apache.ignite.IgniteException; import org.apache.ignite.IgniteLogger; import org.apache.ignite.configuration.CacheConfiguration; import org.apache.ignite.configuration.IgniteConfiguration; import org.apache.ignite.internal.util.typedef.F; import org.apache.ignite.internal.util.typedef.internal.S; import org.apache.ignite.internal.util.typedef.internal.U; import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi; import org.apache.ignite.spi.discovery.tcp.ipfinder.TcpDiscoveryIpFinder; import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder; import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest; import org.apache.ignite.testframework.junits.common.GridCommonTest; import org.jetbrains.annotations.Nullable;  import static org.apache.ignite.cache.CacheAtomicityMode.ATOMIC; import static org.apache.ignite.cache.CacheMode.PARTITIONED
 ) ; } }  public static class TYPE_1 { }  public static class TYPE_2 { }  public static class TYPE_3 { }  public static class TYPE_4 { }  public static class TYPE_5 { }  public static class TYPE_6 { }  public static class TYPE_7 { }  public static class TYPE_8 { }  public static class TYPE_9 { }  public static class TYPE_10 { }  public static class TYPE_11 { }  public static class TYPE_12 { }  public static class TYPE_13 { }  public static class TYPE_14 { }  public static class TYPE_15 { }  public static class TYPE_16 { }  public static class TYPE_17 { }  public static class TYPE_18 { }  public static class TYPE_19 { }  public static class TYPE_20 { }  public static class TYPE_21 { }  public static class TYPE_22 { }  public static class TYPE_23 { }  public static class TYPE_24 { }  public static class TYPE_25 { }  public static class TYPE_26 { }  public static class TYPE_27 { }  public static class TYPE_28 { }  public static class TYPE_29 { }  public static class TYPE_30 { }  public static class TYPE_31 { }  public static class TYPE_32 { }  public static class TYPE_33 { }  public static class TYPE_34 { }  public static class TYPE_35 { }  public static class TYPE_36 { }  public static class TYPE_37 { }  public static class TYPE_38 { }  public static class TYPE_39 { }  public static class TYPE_40 { }  public static class TYPE_41 { }  public static class TYPE_42 { }  public static class TYPE_43 { }  public static class TYPE_44 { }  public static class TYPE_45 { }  public static class TYPE_46 { }  public static class TYPE_47 { }  public static class TYPE_48 { }  public static class TYPE_49 { }  public static class TYPE_50 { }  public static class TYPE_
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.data
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.functions.IFunctionDescriptorProvider; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.data.accessors.ITupleReference; import org.apache.hyracks.dataflow.common.data
.String VAR_4 = ( STRING_1 + VAR_1 ) + STRING_2 ; java.lang.String VAR_5 = ( STRING_1 + VAR_1 ) + STRING_2 ; java.lang.String VAR_6 = ( STRING_1 + VAR_1 ) + STRING_2 ; java.lang.String VAR_7 = ( STRING_1 + VAR_1 ) + STRING_2 ; java.lang.String VAR_8 = ( STRING_1 + VAR_1 ) + STRING_2 ; java.lang.String VAR_9 = ( STRING_1 + VAR_1 ) + STRING_2 ; java.lang.String VAR_10 = ( STRING_1 + VAR_1 ) + STRING_2 ; java.lang.String VAR_11 = ( STRING_1 + VAR_1 ) + STRING_2 ; java.lang.String VAR_12 = ( STRING_1 + VAR_1 ) + STRING_2 ; java.lang.String VAR_13 = ( STRING_1 + VAR_1 ) + STRING_2 ; java.lang.String VAR_14 = ( STRING_1 + VAR_1 ) + STRING_2 ; java.lang.String VAR_15 = ( STRING_1 + VAR_1 ) + STRING_2 ; java.lang.String VAR_16 = ( STRING_1 + VAR_1 ) + STRING_2 ; java.lang.String VAR_17 = ( STRING_1 + VAR_1 ) + STRING_2 ; java.lang.String VAR_18 = ( STRING_1 + VAR_1 ) + STRING_2 ; java.lang.String VAR_19 = ( STRING_1 + VAR_1 ) + STRING_2 ; java.lang.String VAR_20 = ( STRING_1 + VAR_1 ) + STRING_2 ; java.lang.String VAR_21 = ( STRING_1 + VAR_1 ) + STRING_2 ; java.lang.String VAR_22 = ( STRING_1 + VAR_1 ) + STRING_2 ; java.lang.String VAR_23 = ( STRING_1 + VAR_1 ) + STRING_2 ; java.lang.String VAR_24 = ( STRING_1 + VAR_1 ) + STRING_2 ; java.lang.String VAR_25 = ( STRING_1 + VAR_1 ) + STRING_2 ; java.lang.String VAR_26
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.functions.IFunctionDescriptorProvider; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.data.accessors.ITupleReference; import org.apache.hyracks.dataflow.common.data
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.functions.IFunctionDescriptorProvider; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.ITupleReference; import org.apache.hyracks.dataflow.common.data.accessors.ITupleReferenceFactory; import org.apache.hyracks.dataflow.common.data
 METHOD_5 ( 2 ) ) ; VAR_4 . add ( VAR_3 . METHOD_5 ( 3 ) ) ; VAR_4 . add ( VAR_3 . METHOD_5 ( 4 ) ) ; VAR_4 . add ( VAR_3 . METHOD_5 ( 5 ) ) ; VAR_4 . add ( VAR_3 . METHOD_5 ( 6 ) ) ; VAR_4 . add ( VAR_3 . METHOD_5 ( 7 ) ) ; VAR_4 . add ( VAR_3 . METHOD_5 ( 8 ) ) ; VAR_4 . add ( VAR_3 . METHOD_5 ( 9 ) ) ; VAR_4 . add ( VAR_3 . METHOD_5 ( 10 ) ) ; VAR_4 . add ( VAR_3 . METHOD_5 ( 11 ) ) ; VAR_4 . add ( VAR_3 . METHOD_5 ( 12 ) ) ; VAR_4 . add ( VAR_3 . METHOD_5 ( 13 ) ) ; VAR_4 . add ( VAR_3 . METHOD_5 ( 14 ) ) ; VAR_4 . add ( VAR_3 . METHOD_5 ( 15 ) ) ; VAR_4 . add ( VAR_3 . METHOD_5 ( 16 ) ) ; VAR_4 . add ( VAR_3 . METHOD_5 ( 17 ) ) ; VAR_4 . add ( VAR_3 . METHOD_5 ( 18 ) ) ; VAR_4 . add ( VAR_3 . METHOD_5 ( 19 ) ) ; VAR_4 . add ( VAR_3 . METHOD_5 ( 20 ) ) ; VAR_4 . add ( VAR_3 . METHOD_5 ( 21 ) ) ; VAR_4 . add ( VAR_3 . METHOD_5 ( 22 ) ) ; VAR_4 . add ( VAR_3 . METHOD_5 ( 23 ) ) ; VAR_4 . add ( VAR_3 . METHOD_5 ( 24 ) ) ; VAR_4 . add ( VAR_3 . METHOD_5 ( 25 ) ) ; VAR_4 . add ( VAR_3 . METHOD_5 ( 26 ) ) ; VAR_4 . add ( VAR_3 . METHOD_5 ( 27 ) ) ; VAR_4 . add ( VAR_3 . METHOD_5 ( 28 ) ) ; VAR_4 . add ( VAR_3 . METHOD_5 ( 29 ) ) ; VAR_4 . add ( VAR_3 . METHOD_5 ( 30 ) )
, VAR_6 . getString ( STRING_1 ) ) ; TYPE_1 VAR_8 = new TYPE_1 ( VAR_5, VAR_6 . getString ( STRING_1 ) ) ; TYPE_1 VAR_9 = new TYPE_1 ( VAR_5, VAR_6 . getString ( STRING_1 ) ) ; TYPE_1 VAR_10 = new TYPE_1 ( VAR_5, VAR_6 . getString ( STRING_1 ) ) ; TYPE_1 VAR_11 = new TYPE_1 ( VAR_5, VAR_6 . getString ( STRING_1 ) ) ; TYPE_1 VAR_12 = new TYPE_1 ( VAR_5, VAR_6 . getString ( STRING_1 ) ) ; TYPE_1 VAR_13 = new TYPE_1 ( VAR_5, VAR_6 . getString ( STRING_1 ) ) ; TYPE_1 VAR_14 = new TYPE_1 ( VAR_5, VAR_6 . getString ( STRING_1 ) ) ; TYPE_1 VAR_15 = new TYPE_1 ( VAR_5, VAR_6 . getString ( STRING_1 ) ) ; TYPE_1 VAR_16 = new TYPE_1 ( VAR_5, VAR_6 . getString ( STRING_1 ) ) ; TYPE_1 VAR_17 = new TYPE_1 ( VAR_5, VAR_6 . getString ( STRING_1 ) ) ; TYPE_1 VAR_18 = new TYPE_1 ( VAR_5, VAR_6 . getString ( STRING_1 ) ) ; TYPE_1 VAR_19 = new TYPE_1 ( VAR_5, VAR_6 . getString ( STRING_1 ) ) ; TYPE_1 VAR_20 = new TYPE_1 ( VAR_5, VAR_6 . getString ( STRING_1 ) ) ; TYPE_1 VAR_21 = new TYPE_1 ( VAR_5, VAR_6 . getString ( STRING_1 ) ) ; TYPE_1 VAR_22 = new TYPE_1 ( VAR_5, VAR_6 . getString ( STRING_1 ) ) ; TYPE_1 VAR_23 = new TYPE_1 ( VAR_5, VAR_6 . getString ( STRING_1 ) ) ; TYPE_1 VAR_24 = new TYPE_1 ( VAR_5, VAR_6 . getString ( STRING_1 ) ) ; TYPE_1 VAR_25 = new TYPE_1 ( VAR_5, VAR_6 . getString (
/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */  package org.apache.ignite.internal.processors.cache;  import org.apache.ignite.*; import org.apache.ignite.cache.*; import org.apache.ignite.configuration.*; import org.apache.ignite.internal.*; import org.apache.ignite.internal.processors.cache.distributed.*; import org.apache.ignite.internal.processors.cache.distributed.dht.*; import org.apache.ignite.internal.util.*; import org.apache.ignite.internal.util.typedef.*; import org.apache.ignite.internal.util.typedef.internal.*; import org.apache.ignite.internal.util.typedef.internal.S; import org.apache.ignite.lang.*; import org.apache.ignite.spi.discovery.tcp.*; import org.apache.ignite.spi.discovery.tcp.ipfinder.*; import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.*; import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.vm.*; import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.vm.vm.*; import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.vm
/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */  package org.apache.ignite.internal.processors.cache;  import org.apache.ignite.IgniteCheckedException; import org.apache.ignite.IgniteException; import org.apache.ignite.IgniteLogger; import org.apache.ignite.IgniteSpiException; import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi; import org.apache.ignite.spi.discovery.tcp.ipfinder.TcpDiscoveryIpFinder; import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder; import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.VmIpFinder; import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest; import org.apache.ignite.testframework.junits.common.GridCommonTest; import org.jetbrains.annotations.Nullable;  import static org.apache.ignite.cache.CacheAtomicityMode.ATOMIC; import static org.apache.ignite.cache.CacheMode.PARTITIONED; import static org.apache.ignite.cache.CacheWriteSynchronizationMode.FULL_SYNC; import static org.apache.ignite.cache.CacheWriteSynchronizationMode.SYNC; import static org.apache.ign
 METHOD_1 ( VAR_1 , VAR_2 ) ; } }  private void METHOD_2 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { try { VAR_2 . METHOD_2 ( VAR_2 ) ; } catch ( java.lang.Throwable t ) { TYPE_3 . METHOD_2 ( t , VAR_1 , VAR_2 ) ; synchronized ( this ) { try { METHOD_3 ( VAR_1 ) ; } catch ( java.lang.Exception VAR_3 ) { TYPE_3 . METHOD_4 ( VAR_3 ) ; } METHOD_5 ( VAR_2 ) ; } } finally { VAR_2 . METHOD_2 ( VAR_2 ) ; } }  private void METHOD_3 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { try { VAR_2 . METHOD_3 ( VAR_2 ) ; } catch ( java.lang.Throwable t ) { TYPE_3 . METHOD_2 ( t , VAR_1 , VAR_2 ) ; synchronized ( this ) { try { METHOD_3 ( VAR_1 ) ; } catch ( java.lang.Exception VAR_3 ) { TYPE_3 . METHOD_4 ( VAR_3 ) ; } METHOD_5 ( VAR_2 ) ; } } finally { VAR_2 . METHOD_3 ( VAR_2 ) ; } }  private void METHOD_4 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { try { VAR_2 . METHOD_4 ( VAR_2 ) ; } catch ( java.lang.Throwable t ) { TYPE_3 . METHOD_2 ( t , VAR_1 , VAR_2 ) ; synchronized ( this ) { try { METHOD_3 ( VAR_1 ) ; } catch ( java.lang.Exception VAR_3 ) { TYPE_3 . METHOD_4 ( VAR_3 ) ; } METHOD_5 ( VAR_2 ) ; } } finally { VAR_2 . METHOD_4 ( VAR_2 ) ; } }  private void METHOD_5 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { try { VAR_2 . METHOD_5 ( VAR_2 ) ; } catch ( java.lang.Throwable t ) { TYPE_3 . METHOD_2 ( t , VAR_1 , VAR_2 ) ; synchronized ( this ) { try { METHOD_3 (
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.functions.IFunctionDescriptorProvider; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.data.accessors.ITupleReference; import org.apache.hyracks.dataflow.common.data
/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */  package org.apache.ignite.internal.processors.cache;  import org.apache.ignite.IgniteCheckedException; import org.apache.ignite.IgniteException; import org.apache.ignite.IgniteLogger; import org.apache.ignite.configuration.CacheConfiguration; import org.apache.ignite.configuration.IgniteConfiguration; import org.apache.ignite.internal.IgniteEx; import org.apache.ignite.internal.util.typedef.F; import org.apache.ignite.internal.util.typedef.internal.S; import org.apache.ignite.internal.util.typedef.internal.U; import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi; import org.apache.ignite.spi.discovery.tcp.ipfinder.TcpDiscoveryIpFinder; import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder; import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest; import org.apache.ignite.testframework.junits.common.GridCommonTest; import org.apache.ignite.testframework.junits.common.GridCommonTestUtils; import org.apache.ignite.testframework.junits
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.functions.IFunctionDescriptorProvider; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.data.accessors.ITupleReference; import org.apache.hyracks.dataflow.common.data
/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */  package org.apache.ignite.internal.processors.cache;  import org.apache.ignite.IgniteCheckedException; import org.apache.ignite.IgniteException; import org.apache.ignite.IgniteLogger; import org.apache.ignite.configuration.CacheConfiguration; import org.apache.ignite.configuration.IgniteConfiguration; import org.apache.ignite.internal.IgniteEx; import org.apache.ignite.internal.util.typedef.F; import org.apache.ignite.internal.util.typedef.internal.S; import org.apache.ignite.internal.util.typedef.internal.U; import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi; import org.apache.ignite.spi.discovery.tcp.ipfinder.TcpDiscoveryIpFinder; import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder; import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest; import org.apache.ignite.testframework.junits.common.GridCommonTest; import org.apache.ignite.testframework.junits.common.GridCommonTestUtils; import org.apache.ignite.testframework.junits
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */ package org.apache.beam.runners.direct;  import static org.junit.Assert.assertEquals; import static org.junit.Assert.assertFalse; import static org.junit.Assert.assertNotNull; import static org.junit.Assert.assertNull; import static org.junit.Assert.assertTrue; import static org.junit.Assert.fail;  import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Iterables; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import com.google.common.util.concurrent.Futures; import com.google.common.util.concurrent.ListenableFuture; import com.google.common.util.concurrent.MoreExecutors; import com.google.common.util.concurrent.ThreadFactoryBuilder; import org.apache.beam.sdk.coders.Coder; import org.apache.beam.sdk.coders.CoderException; import org.apache.beam.sdk.coders.StringUtf8Coder; import org.apache.beam.sdk.
/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */  package org.apache.ignite.internal.processors.cache;  import org.apache.ignite.IgniteCheckedException; import org.apache.ignite.IgniteException; import org.apache.ignite.configuration.CacheConfiguration; import org.apache.ignite.configuration.IgniteConfiguration; import org.apache.ignite.internal.util.typedef.F; import org.apache.ignite.internal.util.typedef.internal.S; import org.apache.ignite.internal.util.typedef.internal.U; import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi; import org.apache.ignite.spi.discovery.tcp.ipfinder.TcpDiscoveryIpFinder; import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder; import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest; import org.apache.ignite.testframework.junits.common.GridCommonTest; import org.jetbrains.annotations.Nullable;  import static org.apache.ignite.cache.CacheAtomicityMode.ATOMIC; import static org.apache.ignite.cache.CacheMode.PARTITIONED; import static org.apache.ignite.cache.Cache
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
() ; } }  public void METHOD_2 ( TYPE_2 VAR_2 ) { java.lang.String VAR_3 = VAR_4 . getText ( ) ; boolean VAR_4 = VAR_5 . METHOD_2 ( ) ; if ( ( VAR_3 . contains ( STRING_1 ) ) && ( VAR_3 . contains ( STRING_2 ) ) ) { c . METHOD_2 ( VAR_3 , VAR_6 . METHOD_2 ( ) , VAR_4 , VAR_3 , fail , VAR_7 ) ; } else { fail . setText ( STRING_3 ) ; new TYPE_2() ; } }  public void METHOD_3 ( TYPE_3 VAR_3 ) { java.lang.String VAR_4 = VAR_5 . getText ( ) ; boolean VAR_5 = VAR_6 . METHOD_2 ( ) ; if ( ( VAR_4 . contains ( STRING_1 ) ) && ( VAR_4 . contains ( STRING_2 ) ) ) { c . METHOD_3 ( VAR_4 , VAR_5 , VAR_3 , fail , VAR_7 ) ; } else { fail . setText ( STRING_3 ) ; new TYPE_3() ; } }  public void METHOD_4 ( TYPE_4 VAR_4 ) { java.lang.String VAR_5 = VAR_6 . getText ( ) ; boolean VAR_6 = VAR_7 . METHOD_2 ( ) ; if ( ( VAR_5 . contains ( STRING_1 ) ) && ( VAR_5 . contains ( STRING_2 ) ) ) { c . METHOD_4 ( VAR_5 , VAR_6 , VAR_3 , fail , VAR_7 ) ; } else { fail . setText ( STRING_3 ) ; new TYPE_4() ; } }  public void METHOD_5 ( TYPE_5 VAR_5 ) { java.lang.String VAR_6 = VAR_7 . getText ( ) ; boolean VAR_7 = VAR_8 . METHOD_2 ( ) ; if ( ( VAR_6 . contains ( STRING_1 ) ) && ( VAR_6 . contains ( STRING_2 ) ) ) { c . METHOD_5 ( VAR_6 , VAR_3 , fail , VAR_7 ) ; } else { fail . setText ( STRING_3 ) ; new TYPE_5() ; } }  public void METHOD_6 ( TYPE_6 VAR_
 METHOD_5 ( ) ; VAR_2 . METHOD_5 ( ) ; VAR_2 . METHOD_5 ( ) ; VAR_2 . METHOD_5 ( ) ; VAR_2 . METHOD_5 ( ) ; VAR_2 . METHOD_5 ( ) ; VAR_2 . METHOD_5 ( ) ; VAR_2 . METHOD_5 ( ) ; VAR_2 . METHOD_5 ( ) ; VAR_2 . METHOD_5 ( ) ; VAR_2 . METHOD_5 ( ) ; VAR_2 . METHOD_5 ( ) ; VAR_2 . METHOD_5 ( ) ; VAR_2 . METHOD_5 ( ) ; VAR_2 . METHOD_5 ( ) ; VAR_2 . METHOD_5 ( ) ; VAR_2 . METHOD_5 ( ) ; VAR_2 . METHOD_5 ( ) ; VAR_2 . METHOD_5 ( ) ; VAR_2 . METHOD_5 ( ) ; VAR_2 . METHOD_5 ( ) ; VAR_2 . METHOD_5 ( ) ; VAR_2 . METHOD_5 ( ) ; VAR_2 . METHOD_5 ( ) ; VAR_2 . METHOD_5 ( ) ; VAR_2 . METHOD_5 ( ) ; VAR_2 . METHOD_5 ( ) ; VAR_2 . METHOD_5 ( ) ; VAR_2 . METHOD_5 ( ) ; VAR_2 . METHOD_5 ( ) ; VAR_2 . METHOD_5 ( ) ; VAR_2 . METHOD_5 ( ) ; VAR_2 . METHOD_5 ( ) ; VAR_2 . METHOD_5 ( ) ; VAR_2 . METHOD_5 ( ) ; VAR_2 . METHOD_5 ( ) ; VAR_2 . METHOD_5 ( ) ; VAR_2 . METHOD_5 ( ) ; VAR_2 . METHOD_5 ( ) ; VAR_2 . METHOD_5 ( ) ; VAR_2 . METHOD_5 ( ) ; VAR_2 . METHOD_5 ( ) ; VAR_2 . METHOD_5 ( ) ; VAR_2 . METHOD_5 ( ) ; VAR_2 . METHOD_5 ( ) ; VAR_2 . METHOD_5 ( ) ; VAR_2 . METHOD_5 ( ) ; VAR_2 . METHOD_5 ( ) ; VAR_2 . METHOD_5 ( ) ; VAR_2 . METHOD_5 ( ) ; VAR_2 . METHOD_5 ( ) ; VAR_2 . METHOD
/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */  package org.apache.ignite.internal.processors.cache;  import org.apache.ignite.*; import org.apache.ignite.configuration.*; import org.apache.ignite.internal.*; import org.apache.ignite.internal.util.*; import org.apache.ignite.internal.util.typedef.*; import org.apache.ignite.internal.util.typedef.internal.*; import org.apache.ignite.internal.util.typedef.internal.S; import org.apache.ignite.internal.util.typedef.internal.U; import org.apache.ignite.lang.*; import org.apache.ignite.spi.discovery.tcp.*; import org.apache.ignite.spi.discovery.tcp.ipfinder.*; import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.*; import org.apache.ignite.testframework.*; import org.apache.ignite.testframework.junits.common.*;  import java.util.*; import java.util.concurrent.*; import java.util.concurrent.atomic.*;  import static org.apache.ignite.cache.CacheAtomicityMode.*; import static org.apache.ignite.cache.CacheMode.*; import static org.apache
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.functions.IFunctionDescriptorProvider; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.data.accessors.ITupleReference; import org.apache.hyracks.dataflow.common.data
/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */  package org.apache.ignite.internal.processors.cache;  import java.util.ArrayList; import java.util.Collection; import java.util.Collections; import java.util.List; import org.apache.ignite.IgniteCheckedException; import org.apache.ignite.IgniteException; import org.apache.ignite.IgniteLogger; import org.apache.ignite.IgniteSpiException; import org.apache.ignite.configuration.CacheConfiguration; import org.apache.ignite.configuration.IgniteConfiguration; import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi; import org.apache.ignite.spi.discovery.tcp.ipfinder.TcpDiscoveryIpFinder; import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder; import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.VmIpFinder; import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest; import org.apache.ignite.testframework.junits.common.GridCommonTest; import org.apache.ignite.testframework.junits.common.GridCommonTestUtils; import org.apache.ignite.testframework.junits.common.
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
( VAR_1 , VAR_2 , VAR_3 ) ; } else { throw new TYPE_2( VAR_1 , VAR_2 , VAR_3 ) ; } }  private void METHOD_2 ( java.lang.String VAR_1 , java.lang.String VAR_2 , TYPE_2 VAR_3 ) { java.lang.String VAR_4 = VAR_3 . METHOD_2 ( ) ; if ( METHOD_3 ( VAR_2 , VAR_4 ) ) { METHOD_4 ( VAR_1 , VAR_2 , VAR_4 ) ; } else if ( ( METHOD_5 ( VAR_2 ) ) && ( ( VAR_5 . get ( VAR_2 ) . size ( ) ) > 1 ) ) { throw new TYPE_2( VAR_1 , VAR_2 , VAR_4 ) ; } else { throw new TYPE_2( VAR_1 , VAR_2 , VAR_4 ) ; } }  private void METHOD_3 ( java.lang.String VAR_1 , java.lang.String VAR_2 , TYPE_2 VAR_3 ) { TYPE_2 VAR_4 = VAR_3 . METHOD_2 ( ) ; if ( METHOD_3 ( VAR_2 , VAR_4 ) ) { METHOD_4 ( VAR_1 , VAR_2 , VAR_4 ) ; } else if ( ( METHOD_5 ( VAR_2 ) ) && ( ( VAR_5 . get ( VAR_2 ) . size ( ) ) > 1 ) ) { throw new TYPE_2( VAR_1 , VAR_2 , VAR_4 ) ; } else { throw new TYPE_2( VAR_1 , VAR_2 , VAR_4 ) ; } }  private void METHOD_4 ( java.lang.String VAR_1 , java.lang.String VAR_2 , TYPE_2 VAR_3 ) { TYPE_2 VAR_4 = VAR_3 . METHOD_2 ( ) ; if ( METHOD_3 ( VAR_2 , VAR_4 ) ) { METHOD_4 ( VAR_1 , VAR_2 , VAR_4 ) ; } else if ( ( METHOD_5 ( VAR_2 ) ) && ( ( VAR_5 . get ( VAR_2 ) . size ( ) ) > 1 ) ) { throw new TYPE_2( VAR_1 , VAR_2 , VAR_4 ) ; } else {
/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */  package org.apache.ignite.internal.processors.cache;  import org.apache.ignite.*; import org.apache.ignite.cache.*; import org.apache.ignite.configuration.*; import org.apache.ignite.internal.*; import org.apache.ignite.internal.util.*; import org.apache.ignite.internal.util.typedef.*; import org.apache.ignite.internal.util.typedef.internal.*; import org.apache.ignite.internal.util.typedef.internal.S; import org.apache.ignite.internal.util.typedef.internal.U; import org.apache.ignite.lang.*; import org.apache.ignite.spi.discovery.tcp.*; import org.apache.ignite.spi.discovery.tcp.ipfinder.*; import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.*; import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.vm.*; import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.vm.vm.*; import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.vm.vm.*; import org.apache.ignite.spi.discovery.tcp.ipfinder
 ) ; } catch ( java.lang.Exception e ) { java.lang.System.out.println ( STRING_2 ) ; VAR_3 = VAR_4 . METHOD_3 ( ) ; TYPE_2 . METHOD_4 ( VAR_3 ) ; } } }  public static void METHOD_2 ( java.util.Map < java.lang.Integer , java.lang.String > VAR_1 , TYPE_2 VAR_2 ) { int VAR_3 = 0 ; java.lang.System.out.println ( STRING_1 ) ; while ( VAR_3 != ( - 1 ) ) { TYPE_2 . METHOD_2 ( VAR_1 ) ; try { java.lang.System.out.println ( STRING_2 ) ; VAR_3 = VAR_4 . METHOD_3 ( ) ; TYPE_2 . METHOD_4 ( VAR_3 ) ; } catch ( java.lang.Exception e ) { java.lang.System.out.println ( STRING_2 ) ; VAR_3 = VAR_4 . METHOD_3 ( ) ; TYPE_2 . METHOD_4 ( VAR_3 ) ; } } }  public static void METHOD_3 ( java.util.Map < java.lang.Integer , java.lang.String > VAR_1 , TYPE_3 VAR_2 ) { int VAR_3 = 0 ; java.lang.System.out.println ( STRING_1 ) ; while ( VAR_3 != ( - 1 ) ) { TYPE_2 . METHOD_2 ( VAR_1 ) ; try { java.lang.System.out.println ( STRING_2 ) ; VAR_3 = VAR_4 . METHOD_3 ( ) ; TYPE_2 . METHOD_4 ( VAR_3 ) ; } catch ( java.lang.Exception e ) { java.lang.System.out.println ( STRING_2 ) ; VAR_3 = VAR_4 . METHOD_3 ( ) ; TYPE_2 . METHOD_4 ( VAR_3 ) ; } } }  public static void METHOD_4 ( java.util.Map < java.lang.Integer , java.lang.String > VAR_1 , TYPE_4 VAR_2 ) { int VAR_3 = 0 ; java.lang.System.out.println ( STRING_1 ) ; while ( VAR_3 != ( - 1 ) ) { TYPE_2 . METHOD_2 (
/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */  package org.apache.ignite.internal.processors.cache;  import org.apache.ignite.IgniteCheckedException; import org.apache.ignite.IgniteException; import org.apache.ignite.IgniteLogger; import org.apache.ignite.IgniteSpiException; import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi; import org.apache.ignite.spi.discovery.tcp.ipfinder.TcpDiscoveryIpFinder; import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder; import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest; import org.apache.ignite.testframework.junits.common.GridCommonTest; import org.jetbrains.annotations.Nullable;  import static org.apache.ignite.cache.CacheAtomicityMode.ATOMIC; import static org.apache.ignite.cache.CacheMode.PARTITIONED; import static org.apache.ignite.cache.CacheMode.REPLICATED; import static org.apache.ignite.cache.CacheWriteSynchronizationMode.FULL_SYNC; import static org.apache.ignite.cache.CacheWriteSynchronizationMode.SYNC; import static org.apache.ignite.cache.Cache
(new Pair<Integer,Integer>(height, helper)); } else { steps.add(new Pair<Integer,Integer>(height, 0)); } return steps; }  public static List<Pair<Integer,Integer>> hanoi2(int height, int start, int end) { ArrayList<Pair<Integer,Integer>> steps = new ArrayList<Pair<Integer,Integer>>(); if (height > 0) { PriorityQueue<Integer> crap_set = new PriorityQueue<Integer>(); crap_set.add(1); crap_set.add(2); crap_set.add(3); crap_set.remove(start); crap_set.remove(end); int helper = crap_set.poll(); steps.add(new Pair<Integer,Integer>(height, helper)); } else { steps.add(new Pair<Integer,Integer>(height, 0)); } return steps; }  public static List<Pair<Integer,Integer>> hanoi3(int height, int start, int end) { ArrayList<Pair<Integer,Integer>> steps = new ArrayList<Pair<Integer,Integer>>(); if (height > 0) { PriorityQueue<Integer> crap_set = new PriorityQueue<Integer>(); crap_set.add(1); crap_set.add(2); crap_set.add(3); crap_set.remove(start); crap_set.remove(end); int helper = crap_set.poll(); steps.add(new Pair<Integer,Integer>(height, helper)); } else { steps.add(new Pair<Integer,Integer>(height, 0)); } return steps; }  public static List<Pair<Integer,Integer>> hanoi4(int height, int start, int end) { ArrayList<Pair<Integer,Integer>> steps = new ArrayList<Pair<Integer,Integer>>(); if (height > 0) { PriorityQueue<Integer> crap_set = new PriorityQueue<Integer>(); crap_set.add(1); crap_set.add(2); crap_set.add(3); crap_set.remove(start); crap_set.remove(end); int helper = crap_set.poll(); steps.add(new Pair<Integer,Integer>(height, helper));
 0 ) , VAR_1 . y ) ) ) ; VAR_2 = TYPE_1 . METHOD_3 ( VAR_2 , TYPE_1 . METHOD_2 ( new TYPE_2 ( 1 , 0 , 0 ) , VAR_1 . z ) ) ) ; VAR_2 = TYPE_1 . METHOD_3 ( VAR_2 , TYPE_1 . METHOD_2 ( new TYPE_2 ( 0 , 1 , 0 ) , VAR_1 . w ) ) ; VAR_2 = TYPE_1 . METHOD_3 ( VAR_2 , TYPE_1 . METHOD_2 ( new TYPE_2 ( 1 , 0 , 0 ) , VAR_1 . y ) ) ) ; VAR_2 = TYPE_1 . METHOD_3 ( VAR_2 , TYPE_1 . METHOD_2 ( new TYPE_2 ( 0 , 1 , 0 ) , VAR_1 . z ) ) ; VAR_2 = TYPE_1 . METHOD_3 ( VAR_2 , TYPE_1 . METHOD_2 ( new TYPE_2 ( 1 , 0 , 0 ) , VAR_1 . w ) ) ; VAR_2 = TYPE_1 . METHOD_3 ( VAR_2 , TYPE_1 . METHOD_2 ( new TYPE_2 ( 0 , 1 , 0 ) , VAR_1 . y ) ) ) ; VAR_2 = TYPE_1 . METHOD_3 ( VAR_2 , TYPE_1 . METHOD_2 ( new TYPE_2 ( 1 , 0 , 0 ) , VAR_1 . z ) ) ; VAR_2 = TYPE_1 . METHOD_3 ( VAR_2 , TYPE_1 . METHOD_2 ( new TYPE_2 ( 0 , 1 , 0 ) , VAR_1 . w ) ) ; VAR_2 = TYPE_1 . METHOD_3 ( VAR_2 , TYPE_1 . METHOD_2 ( new TYPE_2 ( 1 , 0 , 0 ) , VAR_1 . y ) ) ; VAR_2 = TYPE_1 . METHOD_3 ( VAR_2 , TYPE_1 . METHOD_2 ( new TYPE_2 ( 0 , 1 , 0 ) , VAR_1 . z ) ) ; VAR_2 = TYPE_1 . METHOD_3 ( VAR_2 , TYPE_1 . METHOD_2 ( new TYPE_2 ( 1 , 0 , 0 ) , VAR_1 . w ) ) ; VAR_2 = TYPE_1 . METHOD_3 (
/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */  package org.apache.ignite.internal.processors.cache;  import org.apache.ignite.IgniteCheckedException; import org.apache.ignite.IgniteException; import org.apache.ignite.IgniteLogger; import org.apache.ignite.configuration.CacheConfiguration; import org.apache.ignite.configuration.IgniteConfiguration; import org.apache.ignite.internal.IgniteEx; import org.apache.ignite.internal.util.typedef.F; import org.apache.ignite.internal.util.typedef.internal.S; import org.apache.ignite.internal.util.typedef.internal.U; import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi; import org.apache.ignite.spi.discovery.tcp.ipfinder.TcpDiscoveryIpFinder; import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder; import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest; import org.apache.ignite.testframework.junits.common.GridCommonTest; import org.apache.ignite.testframework.junits.common.GridCommonTestUtils; import org.apache.ignite.testframework.junits
/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */  package org.apache.ignite.internal.processors.cache;  import org.apache.ignite.IgniteCheckedException; import org.apache.ignite.IgniteException; import org.apache.ignite.IgniteLogger; import org.apache.ignite.IgniteSpiException; import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi; import org.apache.ignite.spi.discovery.tcp.ipfinder.TcpDiscoveryIpFinder; import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder; import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.VmIpFinder; import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest; import org.apache.ignite.testframework.junits.common.GridCommonTest; import org.jetbrains.annotations.Nullable;  import static org.apache.ignite.cache.CacheAtomicityMode.ATOMIC; import static org.apache.ignite.cache.CacheMode.PARTITIONED; import static org.apache.ignite.cache.CacheWriteSynchronizationMode.FULL_SYNC; import static org.apache.ignite.cache.CacheWriteSynchronizationMode.SYNC; import static org.apache.ign
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */  package org.apache.druid.query.aggregation;  import com.fasterxml.jackson.annotation.JsonCreator; import com.fasterxml.jackson.annotation.JsonProperty; import com.fasterxml.jackson.annotation.JsonTypeInfo; import com.fasterxml.jackson.annotation.JsonTypeInfo.Id; import com.fasterxml.jackson.annotation.JsonTypeInfo.As; import com.fasterxml.jackson.annotation.JsonTypeName; import com.google.common.base.Preconditions; import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Iterables; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import org.apache.druid.java.util.common.ISE; import org.apache.druid.java.util.common.StringUtils; import org.apache.druid.java.util.common.logger.Logger; import org.apache.druid.java.util.common.logger.LoggerFactory; import org.apache.druid.java.util.common
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */  package org.apache.druid.query.aggregation;  import com.fasterxml.jackson.annotation.JsonCreator; import com.fasterxml.jackson.annotation.JsonProperty; import com.fasterxml.jackson.annotation.JsonTypeInfo; import com.fasterxml.jackson.annotation.JsonTypeInfo.As; import com.fasterxml.jackson.annotation.JsonTypeInfo.Id; import com.fasterxml.jackson.annotation.JsonTypeName; import com.google.common.base.Preconditions; import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Iterables; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import org.apache.druid.java.util.common.ISE; import org.apache.druid.java.util.common.logger.Logger; import org.apache.druid.java.util.common.logger.LoggerFactory; import org.apache.druid.java.util.common.util.concurrent.ThreadFactoryBuilder; import org.apache.druid
/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */  package org.apache.ignite.internal.processors.cache;  import org.apache.ignite.*; import org.apache.ignite.cache.*; import org.apache.ignite.configuration.*; import org.apache.ignite.internal.*; import org.apache.ignite.internal.util.*; import org.apache.ignite.internal.util.typedef.*; import org.apache.ignite.internal.util.typedef.internal.*; import org.apache.ignite.internal.util.typedef.internal.S; import org.apache.ignite.internal.util.typedef.internal.U; import org.apache.ignite.lang.*; import org.apache.ignite.spi.discovery.tcp.*; import org.apache.ignite.spi.discovery.tcp.ipfinder.*; import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.*; import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.vm.*; import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.vm.vm.*; import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.vm.vm.*; import org.apache.ignite.spi.discovery.tcp.ipfinder
/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */  package org.apache.ignite.internal.processors.cache;  import org.apache.ignite.IgniteCheckedException; import org.apache.ignite.IgniteException; import org.apache.ignite.IgniteLogger; import org.apache.ignite.configuration.CacheConfiguration; import org.apache.ignite.configuration.IgniteConfiguration; import org.apache.ignite.internal.IgniteEx; import org.apache.ignite.internal.util.typedef.F; import org.apache.ignite.internal.util.typedef.internal.S; import org.apache.ignite.internal.util.typedef.internal.U; import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi; import org.apache.ignite.spi.discovery.tcp.ipfinder.TcpDiscoveryIpFinder; import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder; import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest; import org.apache.ignite.testframework.junits.common.GridCommonTest; import org.apache.ignite.testframework.junits.common.GridCommonTestUtils; import org.apache.ignite.testframework.junits
 METHOD_2 ( java.lang.String.format ( STRING_2 , METHOD_3 ( ) ) ) ; if ( VAR_3 . METHOD_4 ( ) ) { TYPE_1 VAR_4 = METHOD_3 ( ) ; TYPE_2 . METHOD_5 ( ) . METHOD_6 ( VAR_4 ) ; } java.lang.Thread . METHOD_7 ( ) . METHOD_8 ( ) ; } catch ( java.lang.Throwable VAR_6 ) { VAR_2 . METHOD_2 ( java.lang.String.format ( STRING_3 , VAR_6 ) ) ; if ( VAR_6 . METHOD_4 ( ) ) { TYPE_1 VAR_6 = METHOD_6 ( ) ; TYPE_2 . METHOD_5 ( ) . METHOD_6 ( VAR_6 ) ; } java.lang.Thread . METHOD_7 ( ) . METHOD_8 ( ) ; } catch ( java.lang.Throwable VAR_7 ) { VAR_2 . METHOD_2 ( java.lang.String.format ( STRING_4 , VAR_7 ) ) ; if ( VAR_7 . METHOD_4 ( ) ) { TYPE_1 VAR_7 = METHOD_7 ( ) ; TYPE_2 . METHOD_5 ( ) . METHOD_6 ( VAR_7 ) ; } java.lang.Thread . METHOD_7 ( ) . METHOD_8 ( ) ; } catch ( java.lang.Throwable VAR_8 ) { VAR_2 . METHOD_2 ( java.lang.String.format ( STRING_5 , VAR_8 ) ) ; if ( VAR_8 . METHOD_4 ( ) ) { TYPE_1 VAR_8 = METHOD_8 ( ) ; TYPE_2 . METHOD_5 ( ) . METHOD_6 ( VAR_8 ) ; } java.lang.Thread . METHOD_7 ( ) . METHOD_8 ( ) ; } catch ( java.lang.Throwable VAR_9 ) { VAR_2 . METHOD_2 ( java.lang.String.format ( STRING_6 , VAR_9 ) ) ; if ( VAR_9 . METHOD_4 ( ) ) { TYPE_1 VAR_9 = METHOD_9 ( ) ; TYPE_2 . METHOD_5 ( ) . METHOD_6 ( VAR_9 ) ; } java.lang.Thread . METHOD_7 ( ) . METHOD_8 ( ) ; } catch ( java.lang.Throwable VAR_10
/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */ package org.apache.hadoop.hbase.regionserver;  import static org.junit.Assert.assertEquals; import static org.junit.Assert.assertFalse; import static org.junit.Assert.assertNotNull; import static org.junit.Assert.assertNull; import static org.junit.Assert.assertTrue;  import java.io.IOException; import java.util.ArrayList; import java.util.List;  import org.apache.commons.logging.Log; import org.apache.commons.logging.LogFactory; import org.apache.hadoop.conf.Configuration; import org.apache.hadoop.hbase.HBaseClassTestRule; import org.apache.hadoop.hbase.HBaseTestingUtility; import org.apache.hadoop.hbase.HConstants; import org.apache.hadoop.hbase.HRegionInfo; import org.apache.hadoop.hbase.HTableDescriptor; import org.apache.hadoop.hbase.TableName; import org.apache.hadoop.hbase.client.Connection; import org.apache.hadoop.hbase.client.ConnectionFactory; import org.apache.hadoop.hbase.client.Result; import org.apache.hadoop.hbase.client.ResultScanner;
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.functions.IFunctionDescriptorProvider; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.data.accessors.ITupleReference; import org.apache.hyracks.dataflow.common.data
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
 );          put( TYPES, new RelationshipTypeCaster(), RelationshipType.class );          put( TYPES, new RelationshipTypeCaster(), RelationshipType.class );          put( TYPES, new RelationshipTypeCaster(), RelationshipType.class );          put( TYPES, new RelationshipTypeCaster(), RelationshipType.class );          put( TYPES, new RelationshipTypeCaster(), RelationshipType.class );          put( TYPES, new RelationshipTypeCaster(), RelationshipType.class );          put( TYPES, new RelationshipTypeCaster(), RelationshipType.class );          put( TYPES, new RelationshipTypeCaster(), RelationshipType.class );          put( TYPES, new RelationshipTypeCaster(), RelationshipType.class );          put( TYPES, new RelationshipTypeCaster(), RelationshipType.class );          put( TYPES, new RelationshipTypeCaster(), RelationshipType.class );          put( TYPES, new RelationshipTypeCaster(), RelationshipType.class );          put( TYPES, new RelationshipTypeCaster(), RelationshipType.class );          put( TYPES, new RelationshipTypeCaster(), RelationshipType.class );          put( TYPES, new RelationshipTypeCaster(), RelationshipType.class );          put( TYPES, new RelationshipTypeCaster(), RelationshipType.class );          put( TYPES, new RelationshipTypeCaster(), RelationshipType.class );          put( TYPES, new RelationshipTypeCaster(), RelationshipType.class );          put( TYPES, new RelationshipTypeCaster(), RelationshipType.class );          put( TYPES, new RelationshipTypeCaster(), RelationshipType.class );          put( TYPES, new RelationshipTypeCaster(), RelationshipType.class );          put( TYPES, new RelationshipTypeCaster(), RelationshipType.class );          put( TYPES, new RelationshipTypeCaster(), RelationshipType.class );          put( TYPES, new RelationshipTypeCaster(), RelationshipType.class );          put( TYPES, new RelationshipTypeCaster(), RelationshipType.class );          put( TYPES, new RelationshipTypeCaster(), RelationshipType.class );          put( TYPES, new RelationshipTypeCaster(), RelationshipType.class );          put( TYPES, new RelationshipTypeCaster(), RelationshipType.class );          put( TYPES, new RelationshipTypeCaster(), RelationshipType.class );          put( TYPES, new RelationshipTypeCaster(), RelationshipType.class );
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
_2 ( VAR_3 , VAR_4 , VAR_5 ) ; METHOD_3 ( VAR_1 , VAR_3 ) ; METHOD_4 ( VAR_3 , VAR_4 , VAR_2 ) ; out = METHOD_5 ( VAR_4 , VAR_5 , VAR_2 ) ; TYPE_2 . METHOD_2 ( VAR_3 , VAR_4 , VAR_5 ) ; METHOD_3 ( VAR_1 , VAR_3 ) ; METHOD_4 ( VAR_3 , VAR_4 , VAR_2 ) ; out = METHOD_5 ( VAR_4 , VAR_5 , VAR_2 ) ; TYPE_2 . METHOD_2 ( VAR_3 , VAR_4 , VAR_5 ) ; METHOD_3 ( VAR_1 , VAR_3 ) ; METHOD_4 ( VAR_3 , VAR_4 , VAR_2 ) ; out = METHOD_5 ( VAR_4 , VAR_5 , VAR_2 ) ; TYPE_2 . METHOD_2 ( VAR_3 , VAR_4 , VAR_5 ) ; METHOD_3 ( VAR_1 , VAR_3 ) ; METHOD_4 ( VAR_3 , VAR_4 , VAR_2 ) ; out = METHOD_5 ( VAR_4 , VAR_5 , VAR_2 ) ; TYPE_2 . METHOD_2 ( VAR_3 , VAR_4 , VAR_5 ) ; METHOD_3 ( VAR_1 , VAR_3 ) ; METHOD_4 ( VAR_3 , VAR_4 , VAR_2 ) ; out = METHOD_5 ( VAR_4 , VAR_5 , VAR_2 ) ; TYPE_2 . METHOD_2 ( VAR_3 , VAR_4 , VAR_5 ) ; METHOD_3 ( VAR_1 , VAR_3 ) ; METHOD_4 ( VAR_3 , VAR_4 , VAR_2 ) ; out = METHOD_5 ( VAR_4 , VAR_5 , VAR_2 ) ; TYPE_2 . METHOD_2 ( VAR_3 , VAR_4 , VAR_5 ) ; METHOD_3 ( VAR_1 , VAR_3 ) ; METHOD_4 ( VAR_3 , VAR_4 , VAR_2 ) ; out = METHOD_5 ( VAR_4 , VAR_5 , VAR_2 ) ; TYPE_2 . METHOD_2 ( VAR_3 , VAR_4 , VAR_5 ) ; METHOD_3 ( VAR
  * <p/>  * <p/>  * <p/>  * <p/>  * <p/>  * <p/>  * <p/>  * <p/>  * <p/>  * <p/>  * <p/>  * <p/>  * <p/>  * <p/>  * <p/>  * <p/>  * <p/>  * <p/>  * <p/>  * <p/>  * <p/>  * <p/>  * <p/>  * <p/>  * <p/>  * <p/>  * <p/>  * <p/>  * <p/>  * <p/>  * <p/>  * <p/>  * <p/>  * <p/>  * <p/>  * <p/>  * <p/>  * <p/>  * <p/>  * <p/>  * <p/>  * <p/>  * <p/>  * <p/>  * <p/>  * <p/>  * <p/>  * <p/>  * <p/>  * <p/>  * <p/>  * <p/>  * <p/>  * <p/>  * <p/>  * <p/>  * <p/>  * <p/>  * <p/>  * <p/>  * <p/>  * <p/>  * <p/>  * <p/>  * <p/>  * <p/>  * <p/>  * <p/>  * <p/>  * <p/>  * <p/>  * <p/>  * <p/>  * <p/>  * <p/>  * <p/>  * <p/>  * <p/>  * <p/>  * <p/>  * <p/>  * <p/>  * <p/>  * <p/>  * <p/>  * <p/>  * <p/>  * <p/>  * <p/>  * <p/>  * <p/>  * <p/>  * <p/>  * <p/>  * <p/>  * <p/>  * <p/>  * <p/>  * <p/>  * <p/>  * <p/>  * <p/> 
/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */  package org.apache.ignite.internal.processors.cache.distributed.dht;  import org.apache.ignite.IgniteCheckedException; import org.apache.ignite.IgniteException; import org.apache.ignite.IgniteLogger; import org.apache.ignite.configuration.CacheConfiguration; import org.apache.ignite.configuration.IgniteConfiguration; import org.apache.ignite.internal.IgniteEx; import org.apache.ignite.internal.processors.cache.GridCacheContext; import org.apache.ignite.internal.processors.cache.GridCacheSharedContext; import org.apache.ignite.internal.util.typedef.F; import org.apache.ignite.internal.util.typedef.internal.S; import org.apache.ignite.internal.util.typedef.internal.U; import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi; import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder; import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest; import org.apache.ignite.testframework.junits.common.GridCommonTest; import org.apache.ignite.testframework.junits
_3 . METHOD_2 ( buffer ) ; VAR_2 = VAR_1 . METHOD_3 ( buffer ) ; try { if ( VAR_2 == 0 ) { buffer . add ( VAR_1 . METHOD_4 ( ) ) ; VAR_2 += VAR_1 . METHOD_3 ( buffer ) ; ++ VAR_2 ; } } catch ( TYPE_4 VAR_4 ) { throw TYPE_3 . METHOD_2 ( buffer ) ; } return VAR_2 ; }  public static < TYPE_2 > int METHOD_2 ( TYPE_2 < TYPE_2 > VAR_1 , java.util.Collection < ? super TYPE_2 > buffer ) { TYPE_3 . METHOD_2 ( buffer ) ; int VAR_2 = VAR_1 . METHOD_3 ( buffer ) ; try { if ( VAR_2 == 0 ) { buffer . add ( VAR_1 . METHOD_4 ( ) ) ; VAR_2 += VAR_1 . METHOD_3 ( buffer ) ; ++ VAR_2 ; } } catch ( TYPE_4 VAR_3 ) { throw TYPE_3 . METHOD_2 ( buffer ) ; } return VAR_2 ; }  public static < TYPE_2 > int METHOD_3 ( TYPE_2 < TYPE_2 > VAR_1 , java.util.Collection < ? super TYPE_2 > buffer ) { TYPE_3 . METHOD_2 ( buffer ) ; int VAR_2 = VAR_1 . METHOD_3 ( buffer ) ; try { if ( VAR_2 == 0 ) { buffer . add ( VAR_1 . METHOD_4 ( ) ) ; VAR_2 += VAR_1 . METHOD_3 ( buffer ) ; ++ VAR_2 ; } } catch ( TYPE_4 VAR_3 ) { throw TYPE_3 . METHOD_2 ( buffer ) ; } return VAR_2 ; }  public static < TYPE_2 > int METHOD_4 ( TYPE_2 < TYPE_2 > VAR_1 , java.util.Collection < ? super TYPE_2 > buffer ) { TYPE_3 . METHOD_2 ( buffer ) ; int VAR_2 = VAR_1 . METHOD_3 ( buffer ) ; try { if ( VAR_2 == 0 ) { buffer . add ( VAR_1 . METHOD_4 ( ) ) ; VAR_2 += VAR_1 . METHOD_3 ( buffer ) ; ++ VAR_2 ; } } catch ( TYPE
 METHOD_1 ( ) ) ; TYPE_4 . METHOD_3 ( ) . METHOD_4 ( STRING_1 ) ; TYPE_4 . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) ; TYPE_4 . METHOD_3 ( ) . METHOD_4 ( STRING_1 ) ; TYPE_4 . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) ; TYPE_4 . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) ; TYPE_4 . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) ; TYPE_4 . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) ; TYPE_4 . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) ; TYPE_4 . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) ; TYPE_4 . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) ; TYPE_4 . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) ; TYPE_4 . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) ; TYPE_4 . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) ; TYPE_4 . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) ; TYPE_4 . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) ; TYPE_4 . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) ; TYPE_4 . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) ; TYPE_4 . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) ; TYPE_4 . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) ; TYPE_4 . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) ; TYPE_4 . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) ; TYPE_4 . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) ; TYPE_4 . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) ; TYPE_4 . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) ; TYPE_4 . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) ; TYPE_4 . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) ; TYPE_4 . METHOD_3 ( ) .
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.functions.IFunctionDescriptorProvider; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.data.accessors.ITupleReference; import org.apache.hyracks.dataflow.common.data
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */ package org.apache.beam.runners.core;  import static org.junit.Assert.assertEquals; import static org.junit.Assert.assertFalse; import static org.junit.Assert.assertNotNull; import static org.junit.Assert.assertNull; import static org.junit.Assert.assertTrue; import static org.junit.Assert.fail;  import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Iterables; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import com.google.common.util.concurrent.Futures; import com.google.common.util.concurrent.ListenableFuture; import com.google.common.util.concurrent.ListeningExecutorService; import com.google.common.util.concurrent.MoreExecutors; import com.google.common.util.concurrent.ThreadFactoryBuilder; import com.google.common.util.concurrent.ThreadFactoryProvider; import com.google.common.util.concurrent.TimeUnit; import com.google.common.util.concurrent.
/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */  package org.apache.ignite.internal.processors.cache.distributed.dht;  import org.apache.ignite.IgniteCheckedException; import org.apache.ignite.IgniteException; import org.apache.ignite.internal.processors.cache.CacheAtomicityMode; import org.apache.ignite.internal.processors.cache.CacheMode; import org.apache.ignite.internal.processors.cache.CacheWriteSynchronizationMode; import org.apache.ignite.internal.util.typedef.internal.S; import org.apache.ignite.internal.util.typedef.internal.U; import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi; import org.apache.ignite.spi.discovery.tcp.ipfinder.TcpDiscoveryIpFinder; import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder; import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest; import org.apache.ignite.testframework.junits.common.GridCommonTest;  import static org.apache.ignite.cache.CacheAtomicityMode.TRANSACTIONAL; import static org.apache.ignite.cache.CacheMode.PARTITIONED; import static org.apache.ignite.
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */  package org.apache.ignite.internal.processors.cache.distributed.dht;  import org.apache.ignite.IgniteCheckedException; import org.apache.ignite.IgniteException; import org.apache.ignite.IgniteLogger; import org.apache.ignite.configuration.CacheConfiguration; import org.apache.ignite.configuration.IgniteConfiguration; import org.apache.ignite.internal.IgniteEx; import org.apache.ignite.internal.processors.cache.CacheAtomicityMode; import org.apache.ignite.internal.processors.cache.CacheMode; import org.apache.ignite.internal.processors.cache.CacheWriteSynchronizationMode; import org.apache.ignite.internal.util.typedef.F; import org.apache.ignite.internal.util.typedef.internal.S; import org.apache.ignite.internal.util.typedef.internal.U; import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi; import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder; import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest; import org.apache.ignite.testframework.junits.common
/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */  package org.apache.ignite.internal.processors.cache;  import org.apache.ignite.IgniteCheckedException; import org.apache.ignite.IgniteException; import org.apache.ignite.configuration.CacheConfiguration; import org.apache.ignite.configuration.IgniteConfiguration; import org.apache.ignite.internal.util.typedef.F; import org.apache.ignite.internal.util.typedef.internal.S; import org.apache.ignite.internal.util.typedef.internal.U; import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi; import org.apache.ignite.spi.discovery.tcp.ipfinder.TcpDiscoveryIpFinder; import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder; import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest; import org.apache.ignite.testframework.junits.common.GridCommonTest; import org.jetbrains.annotations.Nullable;  import static org.apache.ignite.cache.CacheAtomicityMode.ATOMIC; import static org.apache.ignite.cache.CacheMode.PARTITIONED; import static org.apache.ignite.cache.Cache
 ) . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 ) ) ; } } return ( false ) ; }  private java.lang.Boolean METHOD_2 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { java.util.Collection < TYPE_4 > VAR_4 = this . VAR_5 . METHOD_2 ( VAR_3 ) ; for ( TYPE_4 VAR_6 : VAR_4 ) { java.util.Collection < TYPE_5 > VAR_7 = VAR_6 . METHOD_3 ( ) ; for ( TYPE_5 VAR_8 : VAR_7 ) { return ( VAR_8 . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 ) ) ; } } return ( false ) ; }  private java.lang.Boolean METHOD_3 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { java.util.Collection < TYPE_4 > VAR_4 = this . VAR_5 . METHOD_2 ( VAR_3 ) ; for ( TYPE_4 VAR_6 : VAR_4 ) { java.util.Collection < TYPE_5 > VAR_7 = VAR_6 . METHOD_3 ( ) ; for ( TYPE_5 VAR_8 : VAR_7 ) { return ( VAR_8 . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 ) ) ; } } return ( false ) ; }  private java.lang.Boolean METHOD_4 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { java.util.Collection < TYPE_5 > VAR_5 = this . VAR_5 . METHOD_2 ( VAR_3 ) ; for ( TYPE_5 VAR_6 : VAR_5 ) { java.util.Collection < TYPE_5 > VAR_7 = VAR_6 . METHOD_3 ( ) ; for ( TYPE_5 VAR_8 : VAR_7 ) { return ( VAR_8 . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ) ; } } return ( false ) ; }  private java.lang.Boolean METHOD_5 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_
_3.add ( VAR_5 ) ; } } } return VAR_3 ; }  public java.util.List < TYPE_1 > METHOD_2 ( TYPE_2 VAR_1 , boolean VAR_2 ) { java.util.List < TYPE_1 > VAR_3 = new java.util.ArrayList < TYPE_1 > ( ) ; java.lang.String [ ] VAR_4 = VAR_1 . METHOD_2 ( ) ; for ( java.lang.String t : VAR_4 ) { TYPE_1 VAR_5 = METHOD_3 ( t ) ; if ( VAR_2 ) { if ( VAR_5 . METHOD_4 ( ) ) { VAR_3.add ( VAR_5 ) ; } } } return VAR_3 ; }  public java.util.List < TYPE_1 > METHOD_3 ( TYPE_2 VAR_1 , boolean VAR_2 ) { java.util.List < TYPE_1 > VAR_3 = new java.util.ArrayList < TYPE_1 > ( ) ; java.lang.String [ ] VAR_4 = VAR_1 . METHOD_2 ( ) ; for ( java.lang.String t : VAR_4 ) { TYPE_1 VAR_6 = METHOD_3 ( t ) ; if ( VAR_2 ) { if ( VAR_6 . METHOD_4 ( ) ) { VAR_3.add ( VAR_6 ) ; } } } return VAR_3 ; }  public java.util.List < TYPE_1 > METHOD_4 ( TYPE_2 VAR_1 , boolean VAR_2 ) { java.util.List < TYPE_1 > VAR_3 = new java.util.ArrayList < TYPE_1 > ( ) ; java.lang.String [ ] VAR_4 = VAR_1 . METHOD_2 ( ) ; for ( java.lang.String t : VAR_4 ) { TYPE_1 VAR_7 = METHOD_3 ( t ) ; if ( VAR_2 ) { if ( VAR_7 . METHOD_4 ( ) ) { VAR_3.add ( VAR_7 ) ; } } } return VAR_3 ; }  public java.util.List < TYPE_1 > METHOD_5 ( TYPE_2 VAR_1 , boolean VAR_2 ) { java.util.List < TYPE_1 > VAR_3 = new java.util.ArrayList <
/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */  package org.apache.ignite.internal.processors.cache.distributed.dht;  import org.apache.ignite.*; import org.apache.ignite.internal.processors.cache.*; import org.apache.ignite.internal.util.*; import org.apache.ignite.internal.util.typedef.*; import org.apache.ignite.lang.*; import org.apache.ignite.spi.discovery.tcp.*; import org.apache.ignite.spi.discovery.tcp.ipfinder.*; import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.*; import org.apache.ignite.testframework.*; import org.apache.ignite.testframework.junits.common.*;  import static org.apache.ignite.cache.CacheAtomicityMode.*; import static org.apache.ignite.cache.CacheMode.*; import static org.apache.ignite.cache.CacheWriteSynchronizationMode.*; import static org.apache.ignite.cache.CacheWriteSynchronizationMode.PARTITIONED; import static org.apache.ignite.cache.CacheWriteSynchronizationMode.REPEATABLE_READ; import static org.apache.ignite.cache.CacheWriteSynchronizationMode.SYNC; import static org.apache.ignite.cache.CacheWriteSynchronizationMode
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.functions.IFunctionDescriptorProvider; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import
/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */  package org.apache.ignite.internal.processors.cache;  import org.apache.ignite.IgniteCheckedException; import org.apache.ignite.IgniteException; import org.apache.ignite.IgniteLogger; import org.apache.ignite.IgniteSpiException; import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi; import org.apache.ignite.spi.discovery.tcp.ipfinder.TcpDiscoveryIpFinder; import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder; import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest; import org.apache.ignite.testframework.junits.common.GridCommonTest; import org.jetbrains.annotations.Nullable;  import static org.apache.ignite.cache.CacheAtomicityMode.ATOMIC; import static org.apache.ignite.cache.CacheMode.PARTITIONED; import static org.apache.ignite.cache.CacheMode.REPLICATED; import static org.apache.ignite.cache.CacheWriteSynchronizationMode.FULL_SYNC; import static org.apache.ignite.cache.CacheWriteSynchronizationMode.SYNC; import static org.apache.ignite.cache.Cache
/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */  package org.apache.ignite.internal.processors.cache;  import org.apache.ignite.IgniteCheckedException; import org.apache.ignite.IgniteException; import org.apache.ignite.IgniteLogger; import org.apache.ignite.IgniteSpiException; import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi; import org.apache.ignite.spi.discovery.tcp.ipfinder.TcpDiscoveryIpFinder; import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder; import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest; import org.apache.ignite.testframework.junits.common.GridCommonTest; import org.jetbrains.annotations.Nullable;  import static org.apache.ignite.cache.CacheAtomicityMode.ATOMIC; import static org.apache.ignite.cache.CacheMode.PARTITIONED; import static org.apache.ignite.cache.CacheMode.REPLICATED; import static org.apache.ignite.cache.CacheWriteSynchronizationMode.FULL_SYNC; import static org.apache.ignite.cache.CacheWriteSynchronizationMode.SYNC; import static org.apache.ignite.cache.Cache
/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */ package org.apache.hadoop.hbase.regionserver;  import static org.junit.Assert.assertEquals; import static org.junit.Assert.assertFalse; import static org.junit.Assert.assertNotNull; import static org.junit.Assert.assertNull; import static org.junit.Assert.assertTrue;  import java.io.IOException; import java.util.ArrayList; import java.util.List;  import org.apache.commons.logging.Log; import org.apache.commons.logging.LogFactory; import org.apache.hadoop.conf.Configuration; import org.apache.hadoop.hbase.HBaseClassTestRule; import org.apache.hadoop.hbase.HBaseTestingUtility; import org.apache.hadoop.hbase.TableName; import org.apache.hadoop.hbase.client.Connection; import org.apache.hadoop.hbase.client.ConnectionFactory; import org.apache.hadoop.hbase.client.Put; import org.apache.hadoop.hbase.client.Result; import org.apache.hadoop.hbase.client.ResultScanner; import org.apache.hadoop.hbase.client.Scan; import org.apache.hadoop.hbase.client.Table
3 ) { METHOD_7 ( new android.content.Intent ( VAR_4 this , VAR_5 class ) ) ; } } ) . METHOD_8 ( VAR_7 , new TYPE_2 ( ) { public void METHOD_5 ( TYPE_3 VAR_2 , int VAR_3 ) { METHOD_8 ( new android.content.Intent ( VAR_4 this , VAR_5 class ) ) ; } } } ) . METHOD_9 ( VAR_8 , new TYPE_2 ( ) { public void METHOD_5 ( TYPE_3 VAR_2 , int VAR_3 ) { METHOD_9 ( new android.content.Intent ( VAR_4 this , VAR_5 class ) ) ; } } } ) . METHOD_10 ( VAR_9 , new TYPE_2 ( ) { public void METHOD_5 ( TYPE_3 VAR_2 , int VAR_3 ) { METHOD_10 ( new android.content.Intent ( VAR_4 this , VAR_5 class ) ) ; } } } ) . METHOD_11 ( VAR_10 , new TYPE_2 ( ) { public void METHOD_5 ( TYPE_3 VAR_2 , int VAR_3 ) { METHOD_11 ( new android.content.Intent ( VAR_4 this , VAR_5 class ) ) ; } } } ) . METHOD_12 ( VAR_11 , new TYPE_2 ( ) { public void METHOD_5 ( TYPE_3 VAR_2 , int VAR_3 ) { METHOD_12 ( new android.content.Intent ( VAR_4 this , VAR_5 class ) ) ; } } } ) . METHOD_13 ( VAR_12 , new TYPE_2 ( ) { public void METHOD_5 ( TYPE_3 VAR_2 , int VAR_3 ) { METHOD_13 ( new android.content.Intent ( VAR_4 this , VAR_5 class ) ) ; } } } ) . METHOD_14 ( VAR_13 , new TYPE_2 ( ) { public void METHOD_5 ( TYPE_3 VAR_2 , int VAR_3 ) { METHOD_14 ( new android.content.Intent ( VAR_4 this , VAR_5 class ) ) ; } } } ) . METHOD_15 ( VAR_14 , new TYPE_2 ( ) { public void METHOD_5 ( TYPE_3 VAR_2 , int VAR_3 ) { METHOD_15 ( new android.content.Intent ( VAR_
/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */  package org.apache.ignite.internal.processors.cache;  import org.apache.ignite.IgniteCheckedException; import org.apache.ignite.IgniteException; import org.apache.ignite.configuration.CacheConfiguration; import org.apache.ignite.configuration.IgniteConfiguration; import org.apache.ignite.internal.util.typedef.F; import org.apache.ignite.internal.util.typedef.internal.S; import org.apache.ignite.internal.util.typedef.internal.U; import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi; import org.apache.ignite.spi.discovery.tcp.ipfinder.TcpDiscoveryIpFinder; import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder; import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest; import org.apache.ignite.testframework.junits.common.GridCommonTest; import org.jetbrains.annotations.Nullable;  import static org.apache.ignite.cache.CacheAtomicityMode.ATOMIC; import static org.apache.ignite.cache.CacheMode.PARTITIONED; import static org.apache.ignite.cache.Cache
/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */  package org.apache.ignite.internal.processors.cache;  import org.apache.ignite.IgniteCheckedException; import org.apache.ignite.IgniteException; import org.apache.ignite.IgniteLogger; import org.apache.ignite.IgniteSpiException; import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi; import org.apache.ignite.spi.discovery.tcp.ipfinder.TcpDiscoveryIpFinder; import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder; import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest; import org.apache.ignite.testframework.junits.common.GridCommonTest; import org.jetbrains.annotations.Nullable;  import static org.apache.ignite.cache.CacheAtomicityMode.ATOMIC; import static org.apache.ignite.cache.CacheMode.PARTITIONED; import static org.apache.ignite.cache.CacheMode.REPLICATED; import static org.apache.ignite.cache.CacheWriteSynchronizationMode.FULL_SYNC; import static org.apache.ignite.cache.CacheWriteSynchronizationMode.SYNC; import static org.apache.ignite.cache.Cache
/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */  package org.apache.ignite.internal.processors.cache;  import org.apache.ignite.IgniteCheckedException; import org.apache.ignite.IgniteException; import org.apache.ignite.IgniteLogger; import org.apache.ignite.configuration.CacheConfiguration; import org.apache.ignite.configuration.IgniteConfiguration; import org.apache.ignite.internal.IgniteEx; import org.apache.ignite.internal.util.typedef.F; import org.apache.ignite.internal.util.typedef.internal.S; import org.apache.ignite.internal.util.typedef.internal.U; import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi; import org.apache.ignite.spi.discovery.tcp.ipfinder.TcpDiscoveryIpFinder; import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder; import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest; import org.apache.ignite.testframework.junits.common.GridCommonTest; import org.apache.ignite.testframework.junits.common.GridCommonTestUtils; import org.apache.ignite.testframework.junits
/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */  package org.apache.ignite.internal.processors.cache;  import org.apache.ignite.IgniteCheckedException; import org.apache.ignite.IgniteException; import org.apache.ignite.configuration.CacheConfiguration; import org.apache.ignite.configuration.IgniteConfiguration; import org.apache.ignite.internal.util.typedef.F; import org.apache.ignite.internal.util.typedef.internal.S; import org.apache.ignite.internal.util.typedef.internal.U; import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi; import org.apache.ignite.spi.discovery.tcp.ipfinder.TcpDiscoveryIpFinder; import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder; import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest; import org.apache.ignite.testframework.junits.common.GridCommonTest; import org.jetbrains.annotations.Nullable;  import static org.apache.ignite.cache.CacheAtomicityMode.ATOMIC; import static org.apache.ignite.cache.CacheMode.PARTITIONED; import static org.apache.ignite.cache.Cache
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
 new TYPE_3 ( ) { public void METHOD_7 ( android.view.View VAR_6 ) { TYPE_4 . METHOD_8 ( new TYPE_3 ( ) { public void METHOD_7 ( android.view.View VAR_6 ) { TYPE_4 . METHOD_8 ( new TYPE_3 ( ) { public void METHOD_7 ( android.view.View VAR_6 ) { TYPE_4 . METHOD_8 ( new TYPE_3 ( ) { public void METHOD_7 ( android.view.View VAR_6 ) { TYPE_4 . METHOD_8 ( new TYPE_3 ( ) { public void METHOD_7 ( android.view.View VAR_6 ) { TYPE_4 . METHOD_8 ( new TYPE_3 ( ) { public void METHOD_7 ( android.view.View VAR_6 ) { TYPE_4 . METHOD_8 ( new TYPE_3 ( ) { public void METHOD_7 ( android.view.View VAR_6 ) { TYPE_4 . METHOD_8 ( new TYPE_3 ( ) { public void METHOD_7 ( android.view.View VAR_6 ) { TYPE_4 . METHOD_8 ( new TYPE_3 ( ) { public void METHOD_7 ( android.view.View VAR_6 ) { TYPE_4 . METHOD_8 ( new TYPE_3 ( ) { public void METHOD_7 ( android.view.View VAR_6 ) { TYPE_4 . METHOD_8 ( new TYPE_3 ( ) { public void METHOD_7 ( android.view.View VAR_6 ) { TYPE_4 . METHOD_8 ( new TYPE_3 ( ) { public void METHOD_7 ( android.view.View VAR_6 ) { TYPE_4 . METHOD_8 ( new TYPE_3 ( ) { public void METHOD_7 ( android.view.View VAR_6 ) { TYPE_4 . METHOD_8 ( new TYPE_3 ( ) { public void METHOD_7 ( android.view.View VAR_6 ) { TYPE_4 . METHOD_8 ( new TYPE_3 ( ) { public void METHOD_7 ( android.view.View VAR_6 ) { TYPE_4 . METHOD_8 ( new TYPE_3 ( ) { public void METHOD_7 ( android.view.View VAR_6 ) { TYPE_4 . METHOD_8 ( new TYPE_3 ( ) { public void METHOD_7 ( android.
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.     */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.functions.IFunctionDescriptorProvider; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryService; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryServiceFactory; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */  package org.apache.druid.query.aggregation;  import com.fasterxml.jackson.annotation.JsonCreator; import com.fasterxml.jackson.annotation.JsonProperty; import com.fasterxml.jackson.annotation.JsonTypeInfo; import com.fasterxml.jackson.annotation.JsonTypeInfo.Id; import com.fasterxml.jackson.annotation.JsonTypeName; import com.google.common.base.Preconditions; import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Iterables; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import org.apache.druid.java.util.common.ISE; import org.apache.druid.java.util.common.logger.Logger; import org.apache.druid.java.util.common.logger.LoggerFactory; import org.apache.druid.query.Query; import org.apache.druid.query.QueryRunner; import org.apache.druid.query.QueryRunnerFactory; import org.apache.druid
_1 ( ) ; }  private void METHOD_2 ( ) { VAR_2 = new TYPE_1 ( new TYPE_2 ( TYPE_3 . METHOD_2 ( 1 ) , ( VAR_2 ) - > { for ( TYPE_4 VAR_3 : VAR_4 ) { if ( VAR_3 . METHOD_3 ( ) ) { VAR_3 . METHOD_4 ( this ) ; } } METHOD_5 ( ) ; view . METHOD_6 ( VAR_4 ) ; METHOD_7 ( ) ; view . METHOD_8 ( VAR_5 , this ) ; } ) ) ; VAR_1 . METHOD_2 ( ) ; }  private void METHOD_3 ( ) { VAR_3 = new TYPE_1 ( new TYPE_2 ( TYPE_3 . METHOD_2 ( 1 ) , ( VAR_2 ) - > { for ( TYPE_4 VAR_3 : VAR_4 ) { if ( VAR_3 . METHOD_3 ( ) ) { VAR_3 . METHOD_4 ( this ) ; } } METHOD_5 ( ) ; view . METHOD_6 ( VAR_4 ) ; METHOD_7 ( ) ; view . METHOD_8 ( VAR_5 , this ) ; } ) ) ; VAR_1 . METHOD_3 ( ) ; }  private void METHOD_4 ( ) { VAR_4 = new TYPE_1 ( new TYPE_2 ( TYPE_3 . METHOD_2 ( 1 ) , ( VAR_2 ) - > { for ( TYPE_4 VAR_3 : VAR_4 ) { if ( VAR_3 . METHOD_3 ( ) ) { VAR_3 . METHOD_4 ( this ) ; } } METHOD_5 ( ) ; view . METHOD_6 ( VAR_4 ) ; METHOD_7 ( ) ; view . METHOD_8 ( VAR_5 , this ) ; } ) ) ; VAR_1 . METHOD_4 ( ) ; }  private void METHOD_5 ( ) { VAR_5 = new TYPE_1 ( new TYPE_2 ( TYPE_3 . METHOD_2 ( 1 ) , ( VAR_2 ) - > { for ( TYPE_4 VAR_3 : VAR_4 ) { if ( VAR_3 . METHOD_3 ( ) ) { VAR_3 . METHOD_4 ( this ) ; } } METHOD_5 ( ) ; view . METHOD_6 ( VAR_4 ) ; METHOD_7
/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */  package org.apache.ignite.internal.processors.cache;  import org.apache.ignite.IgniteCheckedException; import org.apache.ignite.IgniteException; import org.apache.ignite.cache.CacheAtomicityMode; import org.apache.ignite.cache.CacheMode; import org.apache.ignite.cache.CacheWriteSynchronizationMode; import org.apache.ignite.configuration.CacheConfiguration; import org.apache.ignite.configuration.IgniteConfiguration; import org.apache.ignite.internal.IgniteEx; import org.apache.ignite.internal.util.typedef.F; import org.apache.ignite.internal.util.typedef.internal.S; import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi; import org.apache.ignite.spi.discovery.tcp.ipfinder.TcpDiscoveryIpFinder; import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder; import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest; import org.apache.ignite.testframework.junits.common.GridCommonTest; import org.jetbrains.annotations.Nullable;  import static org.apache.ignite.
_1 ) ; } }  protected void METHOD_2 ( TYPE_2 VAR_2 ) { java.lang.String str = STRING_2 ; try { METHOD_2 ( VAR_2 , STRING_2 ) ; do { str = METHOD_3 ( VAR_2 ) ; if ( ! ( str . toLowerCase ( ) . equals ( STRING_3 ) ) ) { VAR_2 . METHOD_4 ( str ) ; } } while ( ! ( str . toLowerCase ( ) . equals ( STRING_3 ) ) ) ; } catch ( java.io.IOException VAR_3 ) { VAR_2 . METHOD_5 ( str ) ; } }  protected void METHOD_3 ( TYPE_3 VAR_3 ) { java.lang.String str = STRING_3 ; try { METHOD_3 ( VAR_3 , STRING_3 ) ; do { str = METHOD_4 ( VAR_3 ) ; if ( ! ( str . toLowerCase ( ) . equals ( STRING_4 ) ) ) { VAR_2 . METHOD_4 ( str ) ; } } while ( ! ( str . toLowerCase ( ) . equals ( STRING_4 ) ) ) ; } catch ( java.io.IOException VAR_4 ) { VAR_2 . METHOD_5 ( str ) ; } }  protected void METHOD_4 ( TYPE_4 VAR_4 ) { java.lang.String str = STRING_4 ; try { METHOD_4 ( VAR_4 , STRING_4 ) ; do { str = METHOD_5 ( VAR_4 ) ; if ( ! ( str . toLowerCase ( ) . equals ( STRING_5 ) ) ) { VAR_2 . METHOD_4 ( str ) ; } } while ( ! ( str . toLowerCase ( ) . equals ( STRING_5 ) ) ) ; } catch ( java.io.IOException VAR_5 ) { VAR_2 . METHOD_5 ( str ) ; } }  protected void METHOD_5 ( TYPE_5 VAR_5 ) { java.lang.String str = STRING_5 ; try { METHOD_5 ( VAR_5 , STRING_5 ) ; do { str = METHOD_6 ( VAR_5 ) ; if ( ! ( str . toLowerCase ( ) . equals ( STRING_6 ) ) ) { VAR_2 . METHOD_4 ( str ) ; } } while ( ! ( str . toLowerCase ( ) . equals ( STRING_6 ) ) ) ; } catch (
/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */  package org.apache.ignite.internal.processors.cache;  import org.apache.ignite.IgniteCheckedException; import org.apache.ignite.IgniteException; import org.apache.ignite.IgniteLogger; import org.apache.ignite.IgniteSpiException; import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi; import org.apache.ignite.spi.discovery.tcp.ipfinder.TcpDiscoveryIpFinder; import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder; import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest; import org.apache.ignite.testframework.junits.common.GridCommonTest; import org.jetbrains.annotations.Nullable;  import static org.apache.ignite.cache.CacheAtomicityMode.ATOMIC; import static org.apache.ignite.cache.CacheMode.PARTITIONED; import static org.apache.ignite.cache.CacheMode.REPLICATED; import static org.apache.ignite.cache.CacheWriteSynchronizationMode.FULL_SYNC; import static org.apache.ignite.cache.CacheWriteSynchronizationMode.SYNC; import static org.apache.ignite.cache.Cache
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */  package org.apache.druid.query.aggregation;  import com.fasterxml.jackson.annotation.JsonCreator; import com.fasterxml.jackson.annotation.JsonProperty; import com.fasterxml.jackson.annotation.JsonTypeInfo; import com.fasterxml.jackson.annotation.JsonTypeInfo.Id; import com.fasterxml.jackson.annotation.JsonTypeName; import com.google.common.base.Preconditions; import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Iterables; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import org.apache.druid.java.util.common.ISE; import org.apache.druid.java.util.common.StringUtils; import org.apache.druid.java.util.common.logger.Logger; import org.apache.druid.java.util.common.logger.LoggerFactory; import org.apache.druid.java.util.common.guava.Sequence; import org.apache.druid.java.util
/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */  package org.apache.ignite.internal.processors.cache;  import org.apache.ignite.IgniteCheckedException; import org.apache.ignite.IgniteException; import org.apache.ignite.IgniteLogger; import org.apache.ignite.IgniteSpiException; import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi; import org.apache.ignite.spi.discovery.tcp.ipfinder.TcpDiscoveryIpFinder; import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder; import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest; import org.apache.ignite.testframework.junits.common.GridCommonTest; import org.jetbrains.annotations.Nullable;  import static org.apache.ignite.cache.CacheAtomicityMode.ATOMIC; import static org.apache.ignite.cache.CacheMode.PARTITIONED; import static org.apache.ignite.cache.CacheMode.REPLICATED; import static org.apache.ignite.cache.CacheWriteSynchronizationMode.FULL_SYNC; import static org.apache.ignite.cache.CacheWriteSynchronizationMode.SYNC; import static org.apache.ignite.cache.Cache
_1 ( VAR_1 , VAR_2 ) ) ; } public java.lang.String METHOD_2 ( TYPE_1 VAR_1 , TYPE_2 result , TYPE_3 VAR_2 ) throws java.io.IOException { TYPE_2 ( VAR_1 , VAR_2 ) ; if ( result . METHOD_3 ( ) ) { return STRING_2 ; } VAR_3 . METHOD_2 ( VAR_1 ) ; TYPE_1 VAR_4 = ( ( ( TYPE_1 ) ( TYPE_4 .getContext ( ) . METHOD_4 ( ) . METHOD_5 ( ) ) ) ) ; return STRING_2 + ( VAR_4 . METHOD_2 ( VAR_1 ) ) ; } public java.lang.String METHOD_3 ( TYPE_1 VAR_1 , TYPE_2 result , TYPE_3 VAR_2 ) throws java.io.IOException { TYPE_3 ( VAR_1 , VAR_2 ) ; if ( result . METHOD_3 ( ) ) { return STRING_3 ; } VAR_3 . METHOD_3 ( VAR_1 ) ; TYPE_1 VAR_5 = ( ( ( TYPE_1 ) ( TYPE_5 .getContext ( ) . METHOD_4 ( ) . METHOD_5 ( ) ) ) ) ; return STRING_3 + ( VAR_5 . METHOD_3 ( VAR_1 ) ) ; } public java.lang.String METHOD_4 ( TYPE_1 VAR_1 , TYPE_2 result , TYPE_3 VAR_2 ) throws java.io.IOException { TYPE_4 ( VAR_1 , VAR_2 ) ; if ( result . METHOD_3 ( ) ) { return STRING_4 ; } VAR_3 . METHOD_4 ( VAR_1 ) ; TYPE_1 VAR_6 = ( ( ( TYPE_1 ) ( TYPE_6 .getContext ( ) . METHOD_4 ( ) . METHOD_5 ( ) ) ) ) ; return STRING_4 + ( VAR_6 . METHOD_4 ( VAR_1 ) ) ; } public java.lang.String METHOD_5 ( TYPE_1 VAR_1 , TYPE_2 result , TYPE_3 VAR_2 ) throws java.io.IOException { TYPE_5 ( VAR_1 , VAR_2 ) ; if ( result . METHOD_3 ( ) ) { return STRING_5 ; } VAR_3 . METHOD_5 ( VAR_1 ) ;
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
rofit).responseType())          .isEqualTo(String.class);      Type mResultClass = new TypeToken<Maybe<Result<String>>>() {}.getType();     assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())          .isEqualTo(String.class);      Type fResultClass = new TypeToken<Flowable<Result<String>>>() {}.getType();     assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())          .isEqualTo(String.class);      assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())          .isEqualTo(String.class);      assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())          .isEqualTo(String.class);      assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())          .isEqualTo(String.class);      assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())          .isEqualTo(String.class);      assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())          .isEqualTo(String.class);      assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())          .isEqualTo(String.class);      assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())          .isEqualTo(String.class);      assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())          .isEqualTo(String.class);      assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())          .isEqualTo(String.class);      assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())          .isEqualTo(String.class);      assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())          .isEqualTo(String.class);      assertThat(factory.get(sResultClass,
/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */  package org.apache.ignite.internal.processors.cache;  import org.apache.ignite.*; import org.apache.ignite.cache.*; import org.apache.ignite.configuration.*; import org.apache.ignite.internal.*; import org.apache.ignite.internal.util.*; import org.apache.ignite.internal.util.typedef.*; import org.apache.ignite.internal.util.typedef.internal.*; import org.apache.ignite.internal.util.typedef.internal.S; import org.apache.ignite.internal.util.typedef.internal.U; import org.apache.ignite.lang.*; import org.apache.ignite.spi.discovery.tcp.*; import org.apache.ignite.spi.discovery.tcp.ipfinder.*; import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.*; import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.vm.*; import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.vm.vm.*; import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.vm.*; import org.apache.ignite.spi.discovery.tcp.ipfinder.vm
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */  package org.apache.ignite.internal.processors.cache;  import org.apache.ignite.IgniteCheckedException; import org.apache.ignite.IgniteException; import org.apache.ignite.IgniteLogger; import org.apache.ignite.configuration.CacheConfiguration; import org.apache.ignite.configuration.IgniteConfiguration; import org.apache.ignite.internal.IgniteEx; import org.apache.ignite.internal.util.typedef.F; import org.apache.ignite.internal.util.typedef.internal.S; import org.apache.ignite.internal.util.typedef.internal.U; import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi; import org.apache.ignite.spi.discovery.tcp.ipfinder.TcpDiscoveryIpFinder; import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder; import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest; import org.apache.ignite.testframework.junits.common.GridCommonTest; import org.apache.ignite.testframework.junits.common.GridCommonTestUtils; import org.apache.ignite.testframework.junits
/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */  package org.apache.ignite.internal.processors.cache;  import org.apache.ignite.IgniteCheckedException; import org.apache.ignite.IgniteException; import org.apache.ignite.IgniteLogger; import org.apache.ignite.IgniteSpiException; import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi; import org.apache.ignite.spi.discovery.tcp.ipfinder.TcpDiscoveryIpFinder; import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder; import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.VmIpFinder; import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest; import org.apache.ignite.testframework.junits.common.GridCommonTest; import org.junit.Test;  import static org.apache.ignite.cache.CacheAtomicityMode.TRANSACTIONAL; import static org.apache.ignite.cache.CacheMode.PARTITIONED; import static org.apache.ignite.cache.CacheWriteSynchronizationMode.FULL_SYNC; import static org.apache.ignite.cache.CacheWriteSynchronizationMode.SYNC; import static org.apache.ignite.cache.
 } } }  public void METHOD_2 ( ) { TYPE_1 . i ( VAR_2 , STRING_2 ) ; byte [ ] buffer = new byte [ INT_2 ] ; int VAR_3 ; while ( true ) { try { VAR_3 = VAR_3 . METHOD_2 ( buffer ) ; VAR_4 . METHOD_3 ( VAR_5 , VAR_2 , ( - 1 ) , buffer ) . METHOD_4 ( ) ; } catch ( java.io.IOException VAR_7 ) { TYPE_1 . METHOD_5 ( VAR_1 , STRING_2 , VAR_7 ) ; } } catch ( java.io.IOException VAR_8 ) { TYPE_1 . METHOD_5 ( VAR_1 , STRING_2 , VAR_8 ) ; } } }  public void METHOD_3 ( ) { TYPE_1 . i ( VAR_3 , STRING_3 ) ; byte [ ] buffer = new byte [ INT_3 ] ; int VAR_4 ; while ( true ) { try { VAR_4 = VAR_4 . METHOD_3 ( buffer ) ; VAR_5 . METHOD_3 ( VAR_6 , VAR_2 , ( - 1 ) , buffer ) . METHOD_4 ( ) ; } catch ( java.io.IOException VAR_9 ) { TYPE_1 . METHOD_5 ( VAR_1 , STRING_3 , VAR_9 ) ; } } catch ( java.io.IOException VAR_10 ) { TYPE_1 . METHOD_5 ( VAR_1 , STRING_3 , VAR_10 ) ; } } }  public void METHOD_4 ( ) { TYPE_1 . i ( VAR_4 , STRING_4 ) ; byte [ ] buffer = new byte [ INT_4 ] ; int VAR_5 ; while ( true ) { try { VAR_5 = VAR_5 . METHOD_4 ( buffer ) ; VAR_6 . METHOD_3 ( VAR_7 , VAR_2 , ( - 1 ) , buffer ) . METHOD_4 ( ) ; } catch ( java.io.IOException VAR_11 ) { TYPE_1 . METHOD_5 ( VAR_1 , STRING_4 , VAR_11 ) ; } } catch ( java.io.IOException VAR_12 ) { TYPE_1 . METHOD_5 ( VAR_1 , STRING_4 , VAR_12 ) ; } } }  public void METHOD_5
/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */  package org.apache.ignite.internal.processors.cache;  import org.apache.ignite.IgniteCheckedException; import org.apache.ignite.IgniteException; import org.apache.ignite.IgniteLogger; import org.apache.ignite.configuration.CacheConfiguration; import org.apache.ignite.configuration.IgniteConfiguration; import org.apache.ignite.internal.util.typedef.F; import org.apache.ignite.internal.util.typedef.internal.S; import org.apache.ignite.internal.util.typedef.internal.U; import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi; import org.apache.ignite.spi.discovery.tcp.ipfinder.TcpDiscoveryIpFinder; import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder; import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest; import org.apache.ignite.testframework.junits.common.GridCommonTest; import org.jetbrains.annotations.Nullable;  import static org.apache.ignite.cache.CacheAtomicityMode.ATOMIC; import static org.apache.ignite.cache.CacheMode.PARTITIONED
/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */  package org.apache.ignite.internal.processors.cache;  import org.apache.ignite.IgniteCheckedException; import org.apache.ignite.IgniteException; import org.apache.ignite.configuration.CacheConfiguration; import org.apache.ignite.configuration.IgniteConfiguration; import org.apache.ignite.internal.IgniteEx; import org.apache.ignite.internal.util.typedef.F; import org.apache.ignite.internal.util.typedef.internal.S; import org.apache.ignite.internal.util.typedef.internal.U; import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi; import org.apache.ignite.spi.discovery.tcp.ipfinder.TcpDiscoveryIpFinder; import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder; import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest; import org.apache.ignite.testframework.junits.common.GridCommonTest; import org.jetbrains.annotations.Nullable;  import static org.apache.ignite.cache.CacheMode.PARTITIONED; import static org.apache.ignite.cache.CacheWriteSynchronizationMode.
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */  package org.apache.ignite.internal.processors.cache.distributed.dht;  import org.apache.ignite.IgniteCheckedException; import org.apache.ignite.IgniteException; import org.apache.ignite.IgniteLogger; import org.apache.ignite.configuration.CacheConfiguration; import org.apache.ignite.configuration.IgniteConfiguration; import org.apache.ignite.internal.IgniteEx; import org.apache.ignite.internal.processors.cache.GridCacheContext; import org.apache.ignite.internal.processors.cache.GridCacheSharedContext; import org.apache.ignite.internal.util.typedef.F; import org.apache.ignite.internal.util.typedef.internal.S; import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi; import org.apache.ignite.spi.discovery.tcp.ipfinder.TcpDiscoveryIpFinder; import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder; import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest; import org.apache.ignite.testframework.junits.common.GridCommonTest; import org.apache.ignite.testframework
/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */  package org.apache.ignite.internal.processors.cache;  import org.apache.ignite.IgniteCheckedException; import org.apache.ignite.IgniteException; import org.apache.ignite.IgniteLogger; import org.apache.ignite.IgniteSpiException; import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi; import org.apache.ignite.spi.discovery.tcp.ipfinder.TcpDiscoveryIpFinder; import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder; import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.VmIpFinder; import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest; import org.apache.ignite.testframework.junits.common.GridCommonTest; import org.jetbrains.annotations.Nullable;  import static org.apache.ignite.cache.CacheAtomicityMode.TRANSACTIONAL; import static org.apache.ignite.cache.CacheMode.PARTITIONED; import static org.apache.ignite.cache.CacheMode.REPLICATED; import static org.apache.ignite.cache.CacheWriteSynchronizationMode.FULL_SYNC; import static org.apache.ign
/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */ package org.apache.hadoop.hbase.regionserver;  import static org.junit.Assert.assertEquals; import static org.junit.Assert.assertFalse; import static org.junit.Assert.assertNotNull; import static org.junit.Assert.assertNull; import static org.junit.Assert.assertTrue;  import java.io.IOException; import java.util.ArrayList; import java.util.List;  import org.apache.commons.logging.Log; import org.apache.commons.logging.LogFactory; import org.apache.hadoop.conf.Configuration; import org.apache.hadoop.fs.FileSystem; import org.apache.hadoop.fs.Path; import org.apache.hadoop.hbase.HBaseClassTestRule; import org.apache.hadoop.hbase.HBaseTestingUtility; import org.apache.hadoop.hbase.HConstants; import org.apache.hadoop.hbase.HRegionInfo; import org.apache.hadoop.hbase.HTableDescriptor; import org.apache.hadoop.hbase.TableName; import org.apache.hadoop.hbase.testclassification.SmallTests; import org.apache.hadoop.hbase.util.Bytes; import org.apache
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */  package org.apache.ignite.internal.processors.cache;  import org.apache.ignite.IgniteCheckedException; import org.apache.ignite.IgniteException; import org.apache.ignite.configuration.CacheConfiguration; import org.apache.ignite.configuration.IgniteConfiguration; import org.apache.ignite.internal.util.typedef.F; import org.apache.ignite.internal.util.typedef.internal.S; import org.apache.ignite.internal.util.typedef.internal.U; import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi; import org.apache.ignite.spi.discovery.tcp.ipfinder.TcpDiscoveryIpFinder; import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder; import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest; import org.apache.ignite.testframework.junits.common.GridCommonTest; import org.jetbrains.annotations.Nullable;  import static org.apache.ignite.cache.CacheAtomicityMode.ATOMIC; import static org.apache.ignite.cache.CacheMode.PARTITIONED; import static org.apache.ignite.cache.Cache
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */ package org.apache.beam.runners.core;  import static org.junit.Assert.assertEquals; import static org.junit.Assert.assertFalse; import static org.junit.Assert.assertNotNull; import static org.junit.Assert.assertNull; import static org.junit.Assert.assertTrue; import static org.junit.Assert.fail;  import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Iterables; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import com.google.common.util.concurrent.Futures; import com.google.common.util.concurrent.ListenableFuture; import com.google.common.util.concurrent.ListeningExecutorService; import com.google.common.util.concurrent.MoreExecutors; import com.google.common.util.concurrent.ThreadFactoryBuilder; import com.google.common.util.concurrent.TimeUnit; import com.google.common.util.concurrent.TimeoutException; import com.google.common.util.concurrent.TimeoutException.
