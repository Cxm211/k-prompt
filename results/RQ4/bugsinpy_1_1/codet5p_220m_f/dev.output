 default: 'bottom'          from .tight_layout import (              get_renderer, get_subplotspec_list, get_tight_layout_figure)          subplotspec_list = get_subplotspec_list(self.axes)          if None in subplotspec_list:  default: 'left'          from .tight_layout import (              get_renderer, get_subplotspec_list, get_tight_layout_figure)          subplotspec_list = get_subplotspec_list(self.axes)          if None in subplotspec_list:  default: 'right'          from .tight_layout import (              get_renderer, get_subplotspec_list, get_tight_layout_figure)          subplotspec_list = get_subplotspec_list(self.axes)          if None in subplotspec_list:  default: 'bottom'          from .tight_layout import (              get_renderer, get_subplotspec_list, get_tight_layout_figure)          subplotspec_list = get_subplotspec_list(self.axes)          if None in subplotspec_list:  default: 'left'          from .tight_layout import (              get_renderer, get_subplotspec_list, get_tight_layout_figure)          subplotspec_list = get_subplotspec_list(self.axes)          if None in subplotspec_list:  default: 'top'          from .tight_layout import (              get_renderer, get_subplotspec_list, get_tight_layout_figure)          subplotspec_list = get_subplotspec_list(self.axes)          if None in subplotspec_list:  default: 'bottom'          from .tight_layout import (              get_renderer, get_subplotspec_list, get_tight_layout_figure)          subplotspec_list = get_subplotspec_list(self.axes)          if None in subplotspec_list:  default: 'left'          from .tight_layout import (              get_renderer, get_subplotspec_list, get_tight_layout_figure)          subplotspec_list = get_subplotspec_list(self.axes)          if None in subplotspec_list:  default: 'right'         
 def update_sub(x, increment):     return tf_state_ops.assign_sub(x, increment)  @symbolic  def update_mul(x, increment):     return tf_state_ops.assign_mul(x, increment)  @symbolic  def update_div(x, increment):     return tf_state_ops.assign_div(x, increment)  @symbolic  def update_mod(x, increment):     return tf_state_ops.assign_mod(x, increment)  @symbolic  def update_mul_add(x, increment):     return tf_state_ops.assign_mul_add(x, increment)  @symbolic  def update_mul_sub(x, increment):     return tf_state_ops.assign_mul_sub(x, increment)  @symbolic  def update_mul_mul(x, increment):     return tf_state_ops.assign_mul_mul(x, increment)  @symbolic  def update_div_add(x, increment):     return tf_state_ops.assign_div_add(x, increment)  @symbolic  def update_div_sub(x, increment):     return tf_state_ops.assign_div_sub(x, increment)  @symbolic  def update_mod_add(x, increment):     return tf_state_ops.assign_mod_add(x, increment)  @symbolic  def update_mod_sub(x, increment):     return tf_state_ops.assign_mod_sub(x, increment)  @symbolic  def update_mod_mul(x, increment):     return tf_state_ops.assign_mod_mul(x, increment)  @symbolic  def update_mod_mul_add(x, increment):     return tf_state_ops.assign_mod_mul_add(x, increment)  @symbolic  def update_mod_mul_sub(x, increment):     return tf_state_ops.assign_mod_mul_sub(x, increment)  @symbolic  def update_mod_mul_mul(x, increment): 
 from pandas.core.dtypes.dtypes import is_array_like from pandas.core.dtypes.dtypes import is_dict_like from pandas.core.dtypes.dtypes import is_list_like from pandas.core.dtypes.dtypes import is_object_dtype from pandas.core.dtypes.dtypes import is_scalar from pandas.core.dtypes.dtypes import is_list_like from pandas.core.dtypes.dtypes import is_dict_like from pandas.core.dtypes.dtypes import is_list_like from pandas.core.dtypes.dtypes import is_object_dtype from pandas.core.dtypes.dtypes import is_scalar from pandas.core.dtypes.dtypes import is_list_like from pandas.core.dtypes.dtypes import is_list_like from pandas.core.dtypes.dtypes import is_list_like from pandas.core.dtypes.dtypes import is_object_dtype from pandas.core.dtypes.dtypes import is_scalar from pandas.core.dtypes.dtypes import is_list_like from pandas.core.dtypes.dtypes import is_list_like from pandas.core.dtypes.dtypes import is_object_dtype from pandas.core.dtypes.dtypes import is_scalar from pandas.core.dtypes.dtypes import is_list_like from pandas.core.dtypes.dtypes import is_list_like from pandas.core.dtypes.dtypes import is_object_dtype from pandas.core.dtypes.dtypes import is_scalar from pandas.core.dtypes.dtypes import is_list_like from pandas.core.dtypes.dtypes import is_list_like from pandas.core.dtypes.dtypes import is_object_dtype from pandas.core.dtypes.dtypes import is_scalar from pandas.core.dtypes.dtypes import is_list_like from pandas.core.dtypes.dtypes import is_list_like from pandas.core.dtypes.dtypes import is_object_dtype from pandas.core.dtypes.dtypes import is
 if is_sequence:                  output_generator = iter_sequence_infinite(generator)              else:                  output_generator = iter_sequence_infinite(generator)     return output_generator  def iter_sequence_infinite(generator):     while True:         yield generator  def iter_sequence_infinite(generator):     while True:         yield generator  def iter_sequence_infinite(generator):     while True:         yield generator  def iter_sequence_infinite(generator):     while True:         yield generator  def iter_sequence_infinite(generator):     while True:         yield generator  def iter_sequence_infinite(generator):     while True:         yield generator  def iter_sequence_infinite(generator):     while True:         yield generator  def iter_sequence_infinite(generator):     while True:         yield generator  def iter_sequence_infinite(generator):     while True:         yield generator  def iter_sequence_infinite(generator):     while True:         yield generator  def iter_sequence_infinite(generator):     while True:         yield generator  def iter_sequence_infinite(generator):     while True:         yield generator  def iter_sequence_infinite(generator):     while True:         yield generator  def iter_sequence_infinite(generator):     while True:         yield generator  def iter_sequence_infinite(generator):     while True:         yield generator  def iter_sequence_infinite(generator):     while True:         yield generator  def iter_sequence_infinite(generator):     while True:         yield generator  def iter_sequence_infinite(generator):     while True:         yield generator  def iter_sequence_infinite(generator):     while True:         yield generator  def iter_sequence_infinite(generator):     while True:         yield generator  def iter_sequence_infinite(generator):     while True:         yield generator  def iter_sequence_infinite(generator):     while True:         yield generator  def iter_sequence_
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializer; import org.apache.hyracks.api.dataflow.value.ISerializerSerializer; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.data
  class Grouper(BaseGrouper):     def __init__(self, mask=None, kind="aggregate"):         BaseGrouper.__init__(self, mask, kind)         self._filter_empty_groups = False      def _filter_empty_groups(self):         if not self._filter_empty_groups:             self._filter_empty_groups = True         return self._filter_empty_groups      def _filter_empty_groups(self):         if not self._filter_empty_groups:             self._filter_empty_groups = False         return self._filter_empty_groups      def _filter_empty_groups(self):         if not self._filter_empty_groups:             self._filter_empty_groups = True         return self._filter_empty_groups      def _filter_empty_groups(self):         if not self._filter_empty_groups:             self._filter_empty_groups = True         return self._filter_empty_groups      def _filter_empty_groups(self):         if not self._filter_empty_groups:             self._filter_empty_groups = True         return self._filter_empty_groups      def _filter_empty_groups(self):         if not self._filter_empty_groups:             self._filter_empty_groups = True         return self._filter_empty_groups      def _filter_empty_groups(self):         if not self._filter_empty_groups:             self._filter_empty_groups = True         return self._filter_empty_groups      def _filter_empty_groups(self):         if not self._filter_empty_groups:             self._filter_empty_groups = True         return self._filter_empty_groups      def _filter_empty_groups(self):         if not self._filter_empty_groups:             self._filter_empty_groups = True         return self._filter_empty_groups      def _filter_empty_groups(self):         if not self._filter_empty_groups:             self._filter_empty_groups = True         return self._filter_
  def js_from_json(code):              ([{,]\s*)              ("[^"]*"|\'[^\']*\'|[a-z0-9A-Z]+)              (:\s*)             ([0-9A-Z]+|true|false|"[^"]*"|\'[^\']*\'|\[|\{       res = re.sub(r',(\s*\])', lambda m: m.group(1), code)      return res  def js_to_js(code):              ([{,]\s*)              ("[^"]*"|\'[^\']*\'|[a-z0-9A-Z]+)              (:\s*)             ([0-9A-Z]+|true|false|"[^"]*"|\'[^\']*\'|\[|\{       res = re.sub(r',(\s*\])', lambda m: m.group(1), code)      return res  def js_from_js(code):              ([{,]\s*)              ("[^"]*"|\'[^\']*\'|[a-z0-9A-Z]+)              (:\s*)             ([0-9A-Z]+|true|false|"[^"]*"|\'[^\']*\'|\[|\{       res = re.sub(r',(\s*\])', lambda m: m.group(1), code)      return res  def js_from_js(code):              ([{,]\s*)              ("[^"]*"|\'[^\']*\'|[a-z0-9A-Z]+)              (:\s*)             ([0-9A-Z]+|true|false|"[^"]*"|\'[^\']*\'|\[|\{       res = re.sub(r',(\s*\])', lambda m: m.group(1), code)      return res  def js_from_js(code):              ([{,]\s*)              ("[^"]*"|\'[^\']*\'|[a-z0-9A-Z]+)              (:\s*)             ([0-9A-Z]+|true|false|"[^"]*"|\'[^\']*\'|\[|\{       res = re.sub(r',(\s*\])', lambda m: m.group(1), code
/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */ package org.apache.camel.component.file;  import org.apache.camel.ContextTestSupport; import org.apache.camel.Exchange; import org.apache.camel.Processor; import org.apache.camel.builder.RouteBuilder; import org.apache.camel.component.mock.MockEndpoint; import org.junit.jupiter.api.Test;  import static org.junit.jupiter.api.Assertions.assertEquals; import static org.junit.jupiter.api.Assertions.assertFalse; import static org.junit.jupiter.api.Assertions.assertNotNull; import static org.junit.jupiter.api.Assertions.assertNull; import static org.junit.jupiter.api.Assertions.assertTrue; import static org.mockito.ArgumentMatchers.any; import static org.mockito.ArgumentMatchers.anyString; import static org.mockito.ArgumentMatchers.eq; import static org.mockito.Mockito.mock; import static org.mockito.Mockito.times; import static org.mockito.Mockito.verify; import static org.mockito.Mockito.verifyNoMoreInteractions; import static org.mockito.Mockito.when;  /**  * @version   */ public class File
 class HTTP2Connection(httputil.HTTPConnection):     def __init__(self, start_line):         httputil.HTTPConnection.__init__(self)         self.start_line = start_line         self.connection_header = "close"      def do_GET(self):         self.send_response(200)         self.end_headers()      def do_HEAD(self):         self.send_response(200)         self.end_headers()      def do_POST(self):         self.send_response(200)         self.end_headers()      def do_PUT(self):         self.send_response(200)         self.end_headers()      def do_PATCH(self):         self.send_response(200)         self.end_headers()      def do_DELETE(self):         self.send_response(200)         self.end_headers()      def do_OPTIONS(self):         self.send_response(200)         self.end_headers()      def do_HEAD(self):         self.send_response(200)         self.end_headers()      def do_OPTIONS(self):         self.send_response(200)         self.end_headers()      def do_HEAD(self):         self.send_response(200)         self.end_headers()      def do_OPTIONS(self):         self.send_response(200)         self.end_headers()      def do_HEAD(self):         self.send_response(200)         self.end_headers()      def do_OPTIONS(self):         self.send_response(200)         self.end_headers()      def do_HEAD(self):         self.send_response(200)         self.end_headers()      def do_OPTIONS(self):         self.send_response(200)         self.end_headers()      def do_HEAD(self):         self.send_response(200)         self.end_headers() 
// Copyright (c) 2012 The Chromium Authors. All rights reserved. // Use of this source code is governed by a BSD-style license that can be // found in the LICENSE file.  #ifndef CHROME_BROWSER_UI_VIEWS_TAB_CONTENTS_TAB_CONTENTS_VIEW_H_ #define CHROME_BROWSER_UI_VIEWS_TAB_CONTENTS_TAB_CONTENTS_VIEW_H_  #include "base/memory/scoped_ptr.h" #include "content/public/browser/web_contents_observer.h" #include "content/public/browser/web_contents_observer_observer.h" #include "content/public/browser/web_contents_user_data.h" #include "content/public/browser/web_contents_user_data_manager.h" #include "content/public/browser/web_contents_view.h" #include "content/public/browser/web_contents_view_delegate.h" #include "content/public/browser/web_contents_user_data.h" #include "content/public/browser/web_contents_user_data_manager.h" #include "content/public/browser/web_contents_view_observer.h" #include "content/public/browser/web_contents_user_data.h" #include "content/public/browser/web_contents_user_data_manager.h" #include "content/public/browser/web_contents_user_data_manager_observer.h" #include "content/public/browser/web_contents_user_data_manager.h" #include "content/public/browser/web_contents_user_data_manager.h" #include "content/public/browser/web_contents_user_data_manager_observer.h" #include "content/public/browser/web_contents_user_data_manager.h" #include "content/public/browser/web_contents_user_data_manager.h" #include "content/public/browser/web_contents_user_data_manager_observer.h" #
 import threading.event  import event  from tornado.concurrent import Thread  from tornado.log import app_log  from tornado.log import gen_log  from tornado.httpserver import HTTPServer  from tornado.ioloop import IOLoop  from tornado.options import options  from tornado.options import parse_options  from tornado.options import parse_args  from tornado.options import parse_kwargs  from tornado.options import parse_url  from tornado.options import parse_query  from tornado.options import parse_header  from tornado.options import parse_body  from tornado.options import parse_url_query  from tornado.options import parse_query_string  from tornado.options import parse_header_string  from tornado.options import parse_query  from tornado.options import parse_query_string  from tornado.options import parse_header  from tornado.options import parse_query  from tornado.options import parse_query_string  from tornado.options import parse_header  from tornado.options import parse_query  from tornado.options import parse_header  from tornado.options import parse_query  from tornado.options import parse_header  from tornado.options import parse_query  from tornado.options import parse_header  from tornado.options import parse_header  from tornado.options import parse_header  from tornado.options import parse_header  from tornado.options import parse_header  from tornado.options import parse_header  from tornado.options import parse_header  from tornado.options import parse_header  from tornado.options import parse_header  from tornado.options import parse_header  from tornado.options import parse_header  from tornado.options import parse_header  from tornado.options import parse_header  from tornado.options import parse_header  from tornado.options import parse_header  from tornado.options import parse_header  from tornado.options import parse_header  from tornado.options import parse_header  from tornado.options import parse_header  from tornado.options import parse_header  from tornado.options import parse_header  from tornado.options import parse_header  from tornado.options import parse_header  from tornado.options import parse_header  from tornado.options import parse_header  from tornado.options import parse_header  from tornado.options import parse_header  from tornado.options import parse_header
import tornado.concurrent  from tornado.concurrent.async import AsyncFuture  from tornado.log import app_log  from tornado.log import gen_log  from tornado.platform.auto import set_close_exec  from tornado import stack_context  from tornado.options import parse_options  from tornado.options import parse_args  from tornado.options import parse_kwargs  from tornado.options import parse_bool  from tornado.options import parse_int  from tornado.options import parse_float  from tornado.options import parse_str  from tornado.options import parse_bool  from tornado.options import parse_int  from tornado.options import parse_float  from tornado.options import parse_str  from tornado.options import parse_bool  from tornado.options import parse_int  from tornado.options import parse_float  from tornado.options import parse_str  from tornado.options import parse_bool  from tornado.options import parse_str  from tornado.options import parse_bool  from tornado.options import parse_str  from tornado.options import parse_bool  from tornado.options import parse_bool  from tornado.options import parse_bool  from tornado.options import parse_bool  from tornado.options import parse_bool  from tornado.options import parse_bool  from tornado.options import parse_bool  from tornado.options import parse_bool  from tornado.options import parse_bool  from tornado.options import parse_bool  from tornado.options import parse_bool  from tornado.options import parse_bool  from tornado.options import parse_bool  from tornado.options import parse_bool  from tornado.options import parse_bool  from tornado.options import parse_bool  from tornado.options import parse_bool  from tornado.options import parse_bool  from tornado.options import parse_bool  from tornado.options import parse_bool  from tornado.options import parse_bool  from tornado.options import parse_bool  from tornado.options import parse_bool  from tornado.options import parse_bool  from tornado.options import parse_bool  from tornado.options import parse_bool  from tornado.options import parse_bool  from tornado.options import parse_bool  from tornado.options import parse_bool  from tornado.options import parse_bool  from tornado.options import parse_bool  from tornado.options import parse
// Copyright (c) 2012 The Chromium Authors. All rights reserved. // Use of this source code is governed by a BSD-style license that can be // found in the LICENSE file.  #ifndef CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_CH
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
(line: Line, line_length: int) -> Iterator[Set[Leaf  def get_future_imports(node: Node) -> Set[str]]]:     imports = set()      for child in node.children:         if child.type != syms.simple_stmt:              break         imports.add(child.text)     return imports  def generate_trailers_to_omit(line: Line, line_length: int) -> Iterator[Set[Leaf  def get_future_imports(node: Node) -> Set[str]]]:     imports = set()      for child in node.children:         if child.type != syms.simple_stmt:              break         imports.add(child.text)     return imports  def generate_trailers_to_omit(line: Line, line_length: int) -> Iterator[Set[Leaf  def get_future_imports(node: Node) -> Set[str]]]:     imports = set()      for child in node.children:         if child.type != syms.simple_stmt:              break         imports.add(child.text)     return imports  def generate_trailers_to_omit(line: Line, line_length: int) -> Iterator[Set[Leaf  def get_future_imports(node: Node) -> Set[str]]]:     imports = set()      for child in node.children:         if child.type != syms.simple_stmt:              break         imports.add(child.text)     return imports  def generate_trailers_to_omit(line: Line, line_length: int) -> Iterator[Set[Leaf  def get_future_imports(node: Node) -> Set[str]]]:     imports = set()      for child in node.children:         if child.type != syms.simple_stmt:              break         imports.add(child.text)     return imports  def generate_trailers_to_omit(line: Line, line_length: int) -> Iterator[Set[Leaf  def get_future_imports(node: Node) -> Set[str]]]:     imports = set()      for child in node.children:         if child.type != syms.simple_stmt
/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */  package org.apache.ignite.internal.processors.cache;  import java.util.ArrayList; import java.util.Collection; import java.util.Collections; import java.util.HashMap; import java.util.HashSet; import java.util.Iterator; import java.util.List; import java.util.Map; import java.util.Set; import java.util.concurrent.ConcurrentHashMap; import java.util.concurrent.ConcurrentMap; import java.util.concurrent.atomic.AtomicBoolean; import java.util.concurrent.atomic.AtomicInteger; import java.util.concurrent.atomic.AtomicLong; import java.util.concurrent.atomic.AtomicReference; import java.util.concurrent.locks.Lock; import java.util.concurrent.locks.ReentrantLock; import java.util.concurrent.locks.ReentrantLockFactory; import java.util.concurrent.locks.ReentrantReadWriteLock; import org.apache.ignite.IgniteCheckedException; import org.apache.ignite.IgniteException; import org.apache.ignite.IgniteLogger; import org.apache.ignite.configuration.CacheConfiguration; import org.apache.ignite.configuration.IgniteConfiguration; import org.apache
<?php  /*  * This file is part of PHPExifTool.  *  * (c) 2012 Romain Neutron <imprec@gmail.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace PHPExiftool\Driver\Tag\DICOM;  use JMS\Serializer\Annotation\ExclusionPolicy; use PHPExiftool\Driver\AbstractTag;  /**  * @ExclusionPolicy("all")  */ class Color extends AbstractTag {      protected $Id = '0018,0018';      protected $Name = 'Color';      protected $FullName = 'DICOM::Main';      protected $GroupName = 'DICOM';      protected $g0 = 'DICOM';      protected $g1 = 'DICOM';      protected $g2 = 'Image';      protected $Type = '?';      protected $Writable = false;      protected $Description = 'Color';  } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.product.name',                 'attr' => array(                     'class' => 'form-control',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.product.description',                 'attr' => array(                     'class' => 'form-control',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
 def _stack_multiple(data, clocs, fill_value=None):              result = data               for i in range(len(clocs)):                  val = clocs[i]                 result = result.stack(val)                  clocs = [v if i > v else v - 1 for v in clocs]              result = _unstack_multiple(result, clocs, fill_value)              return result  def _stack_multiple(data, clocs, fill_value=None):              result = data               for i in range(len(clocs)):                  val = clocs[i]                 result = result.stack(val)                  clocs = [v if i > v else v - 1 for v in clocs]              result = _stack_multiple(result, clocs, fill_value)              return result  def _stack_multiple(data, clocs, fill_value=None):              result = data               for i in range(len(clocs)):                  val = clocs[i]                 result = result.stack(val)                  clocs = [v if i > v else v - 1 for v in clocs]              result = _stack_multiple(result, clocs, fill_value)              return result  def _stack_multiple(data, clocs, fill_value=None):              result = data               for i in range(len(clocs)):                  val = clocs[i]                 result = result.stack(val)                  clocs = [v if i > v else v - 1 for v in clocs]              result = _stack_multiple(result, clocs, fill_value)              return result  def _stack_multiple(data, clocs, fill_value=None):              result = data               for i in range(len(clocs)):                  val = clocs[i]                 result = result.stack(val)                  clocs = [v if i > v else v - 1 for v in clocs]              result = _stack_multiple(result, clocs, fill_value)              return result  def _stack_multiple(data, clocs, fill_value=None):              result = data               for i in range(len(clocs)):                  val = clocs[i]                 result
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */ package org.apache.beam.runners.direct;  import static org.junit.Assert.assertEquals; import static org.junit.Assert.assertFalse; import static org.junit.Assert.assertTrue; import static org.mockito.Mockito.mock; import static org.mockito.Mockito.verify; import static org.mockito.Mockito.when; import static org.mockito.MockitoAnnotations.initMocks;  import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Iterables; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import org.apache.beam.sdk.coders.Coder; import org.apache.beam.sdk.coders.CoderException; import org.apache.beam.sdk.coders.StringUtf8Coder; import org.apache.beam.sdk.options.PipelineOptions; import org.apache.beam.sdk.options.PipelineOptionsFactory; import org.apache.beam.sdk.testing.PAssert; import org.apache.beam.sdk.testing
﻿using System.Reflection; using System.Runtime.CompilerServices; using System.Runtime.InteropServices;  // General Information about an assembly is controlled through the following  // set of attributes. Change these attribute values to modify the information // associated with an assembly. [assembly: AssemblyTitle("01.SumOfNumbers")] [assembly: AssemblyDescription("")] [assembly: AssemblyConfiguration("")] [assembly: AssemblyCompany("")] [assembly: AssemblyProduct("01.SumOfNumbers")] [assembly: AssemblyCopyright("Copyright ©  2015")] [assembly: AssemblyTrademark("")] [assembly: AssemblyCulture("")]  // Setting ComVisible to false makes the types in this assembly not visible  // to COM components.  If you need to access a type in this assembly from  // COM, set the ComVisible attribute to true on that type. [assembly: ComVisible(false)]  // The following GUID is for the ID of the typelib if this project is exposed to COM [assembly: Guid("8e8e8e8e-8e8e-4e8e-8e8e-8e8e8e8e8e")]  // Version information for an assembly consists of the following four values: // //      Major Version //      Minor Version  //      Build Number //      Revision // // You can specify all the values or you can default the Build and Revision Numbers  // by using the '*' as shown below: // [assembly: AssemblyVersion("1.0.*")] [assembly: AssemblyVersion("1.0.0.0")] [assembly: AssemblyFileVersion("1.0.0.0")] 
[param_name]      def get_params(self):         params_str = {}         for param_name, param_value in six.iteritems(self.param_kwargs):             if param_name.significant:                 params_str[param_name] = param_value.serialize(param_value)          return params_str[param_name]         return params_str      def serialize(self, param_value):         if param_value.significant:             return param_value.serialize(param_value)         else:             return param_value.serialize(param_value)      def get_params_str(self):         params_str = {}         for param_name, param_value in six.iteritems(self.param_kwargs):             if param_name.significant:                 params_str[param_name] = param_value.serialize(param_value)          return params_str[param_name]         return params_str      def get_params_dict(self):         params_dict = {}         for param_name, param_value in six.iteritems(self.param_kwargs):             if param_name.significant:                 params_dict[param_name] = param_value.serialize(param_value)          return params_dict[param_name]         return params_dict      def get_params_dict_str(self):         params_dict_str = {}         for param_name, param_value in six.iteritems(self.param_kwargs):             if param_name.significant:                 params_dict_str[param_name] = param_value.serialize(param_value)          return params_dict_str[param_name]         return params_dict_str      def get_params_dict_dict_str(self):         params_dict_dict_str = {}         for param_name, param_value in six.iteritems(self.param_kwargs):             if param_name.significant:                 params_dict_dict_str[param_name] = param_value.serialize(param_value)          return params_dict_dict_str[param_name] 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */ package org.apache.beam.runners.core;  import com.google.common.base.Joiner; import com.google.common.base.Preconditions; import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.ImmutableSortedMap; import com.google.common.collect.ImmutableSortedSet; import com.google.common.collect.ImmutableSortedSet; import com.google.common.collect.Iterables; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Ordering; import com.google.common.collect.Sets; import com.google.common.collect.TreeMap; import com.google.common.collect.TreeSet; import java.util.ArrayList; import java.util.List; import java.util.Map; import java.util.Optional; import java.util.Set; import java.util.function.Function; import org.apache.beam.sdk.options.PipelineOptions; import org.apache.beam.sdk.options.PipelineOptionsFactory; import org.apache.beam.sdk.options.PipelineOptionsFactory; import org
  def check_optional_arguments(argument_spec, module_parameters):          missing.append(k)          if missing:         msg = "missing optional arguments: %s" % ", ".join(missing)          raise TypeError(to_native(msg))          return missing  def to_native(value):     if isinstance(value, str):         return str(value)     elif isinstance(value, int):         return int(value)     elif isinstance(value, long):         return long(value)     elif isinstance(value, float):         return float(value)     elif isinstance(value, bool):         return bool(value)     elif isinstance(value, list):         return list(value)     elif isinstance(value, tuple):         return tuple(value)     elif isinstance(value, dict):         return dict(value)     elif isinstance(value, list):         return list(value)     elif isinstance(value, list):         return list(value)     elif isinstance(value, list):         return list(value)     elif isinstance(value, list):         return list(value)     elif isinstance(value, list):         return list(value)     elif isinstance(value, list):         return list(value)     elif isinstance(value, list):         return list(value)     elif isinstance(value, list):         return list(value)     elif isinstance(value, list):         return list(value)     elif isinstance(value, list):         return list(value)     elif isinstance(value, list):         return list(value)     elif isinstance(value, list):         return list(value)     elif isinstance(value, list):         return list(value)     elif isinstance(value, list):         return list(value)     elif isinstance(value, list):         return list(value)     elif isinstance(value, list):         return list(value)     elif isinstance(value, list):         return list(value)     elif isinstance(value, list):         return list(value)     elif isinstance(value, list):         return list(value)     elif isinstance(value, list):        
, collection_info, requirement):     dep_map[to_text(collection)] = collection_info     dep_map[to_text(requirement)] = requirement     dep_map[to_text(collection_info)] = collection_info     dep_map[to_text(requirement)] = requirement     dep_map[to_text(collection_info)] = collection_info     dep_map[to_text(collection_info)] = collection_info     dep_map[to_text(collection_info)] = collection_info     dep_map[to_text(collection_info)] = collection_info     dep_map[to_text(collection_info)] = collection_info     dep_map[to_text(collection_info)] = collection_info     dep_map[to_text(collection_info)] = collection_info     dep_map[to_text(collection_info)] = collection_info     dep_map[to_text(collection_info)] = collection_info     dep_map[to_text(collection_info)] = collection_info     dep_map[to_text(collection_info)] = collection_info     dep_map[to_text(collection_info)] = collection_info     dep_map[to_text(collection_info)] = collection_info     dep_map[to_text(collection_info)] = collection_info     dep_map[to_text(collection_info)] = collection_info     dep_map[to_text(collection_info)] = collection_info     dep_map[to_text(collection_info)] = collection_info     dep_map[to_text(collection_info)] = collection_info     dep_map[to_text(collection_info)] = collection_info     dep_map[to_text(collection_info)] = collection_info     dep_map[to_text(collection_info)] = collection_info     dep_map[to_text(collection_info)] = collection_info     dep_map[to_text(collection_info)] = collection_info     dep_map[to_text(collection_info)] = collection_info     dep_map[to_text(
 from pandas.core.dtypes.series import ABCSeries  from pandas.core.dtypes.missing import isna  from pandas._typing import AnyArrayLike  from pandas.core.arrays.interval import IntervalArray, _interval_shared_docs  import pandas.core.common as com  import pandas.core.indexes.base as ibase  from pandas._typing import AnyArrayLike  from pandas._typing import AnyArrayLike  from pandas._typing import AnyArrayLike  from pandas._typing import AnyArrayLike  from pandas._typing import AnyArrayLike  from pandas._typing import AnyArrayLike  from pandas._typing import AnyArrayLike  from pandas._typing import AnyArrayLike  from pandas._typing import AnyArrayLike  from pandas._typing import AnyArrayLike  from pandas._typing import AnyArrayLike  from pandas._typing import AnyArrayLike  from pandas._typing import AnyArrayLike  from pandas._typing import AnyArrayLike  from pandas._typing import AnyArrayLike  from pandas._typing import AnyArrayLike  from pandas._typing import AnyArrayLike  from pandas._typing import AnyArrayLike  from pandas._typing import AnyArrayLike  from pandas._typing import AnyArrayLike  from pandas._typing import AnyArrayLike  from pandas._typing import AnyArrayLike  from pandas._typing import AnyArrayLike  from pandas._typing import AnyArrayLike  from pandas._typing import AnyArrayLike  from pandas._typing import AnyArrayLike  from pandas._typing import AnyArrayLike  from pandas._typing import AnyArrayLike  from pandas._typing import AnyArrayLike  from pandas._typing import AnyArrayLike  from pandas._typing import AnyArrayLike  from pandas._typing import AnyArrayLike  from pandas._typing import AnyArrayLike  from pandas._typing import AnyArrayLike  from pandas._typing import AnyArrayLike  from pandas._typing import AnyArrayLike  from pandas._typing import AnyArrayLike  from pandas._typing import AnyArrayLike  from pandas._typing import AnyArrayLike  from pandas._typing import AnyArrayLike  from pandas._typing import AnyArrayLike  from pandas._typing import AnyArrayLike  from pandas._typing import AnyArrayLike  from pandas._typ
﻿using System; using System.Collections.Generic; using System.Linq; using System.Text; using System.Threading.Tasks; using System.Windows; using System.Windows.Controls; using System.Windows.Data; using System.Windows.Documents; using System.Windows.Input; using System.Windows.Media; using System.Windows.Media.Imaging; using System.Windows.Navigation; using System.Windows.Shapes; using System.Windows.Shapes.Primitives; using System.Windows.Shapes.DataAnnotations; using System.Windows.Shapes.DataAnnotations.Schema; using System.Windows.Shapes.Resources; using System.Windows.Shapes.Designer; using System.Windows.Shapes.Designer.Controls; using System.Windows.Shapes.Designer.Controls.Primitives; using System.Windows.Shapes.DataBindings; using System.Windows.Shapes.Designer.Controls.Primitives; using System.Windows.Shapes.DataBindings.Primitives; using System.Windows.Shapes.DataBindings.Primitives; using System.Windows.Shapes.DataBindings.Primitives; using System.Windows.Shapes.DataBindings.Primitives; using System.Windows.Shapes.DataBindings.Primitives; using System.Windows.Shapes; using System.Windows.Shapes.DataBindings.Primitives; using System.Windows.Shapes.DataBindings.Primitives; using System.Windows.Shapes.DataBindings.Primitives; using System.Windows.Shapes.DataBindings.Primitives; using System.Windows.Shapes.DataBindings.Primitives; using System.Windows.Shapes.DataBindings.Primitives; using System.Windows.Shapes.DataBindings.Primitives; using System.Windows.Shapes.DataBindings.Primitives; using System.Windows.Shapes.DataBindings.Primitives; using System.Windows.Shapes; using System.Windows.Shapes.DataBindings.Primitives; using System.Windows.Shapes.DataBindings.Primitives; using System.Windows.Shapes.DataBindings.Primitives; using System.Windows.Shapes.DataBindings.Primitives; using System.Windows.Shapes.DataBindings.Primitives; using System.Windows.
// Copyright (c) 2012 The Chromium Authors. All rights reserved. // Use of this source code is governed by a BSD-style license that can be // found in the LICENSE file.  #ifndef CHROME_BROWSER_UI_VIEWS_TAB_CONTENTS_TAB_CONTENTS_VIEW_H_ #define CHROME_BROWSER_UI_VIEWS_TAB_CONTENTS_TAB_CONTENTS_VIEW_H_  #include "base/basictypes.h" #include "base/memory/scoped_ptr.h" #include "base/memory/weak_ptr.h" #include "chrome/browser/ui/views/tab_contents/tab_contents_view.h" #include "content/public/browser/notification_observer.h" #include "content/public/browser/notification_registrar.h" #include "content/public/browser/notification_registrar.h" #include "content/public/browser/notification_registrar.h" #include "content/public/browser/notification_registrar.h" #include "content/public/browser/notification_registrar.h" #include "content/public/browser/notification_registrar.h" #include "content/public/browser/notification_registrar.h" #include "content/public/browser/notification_registrar.h" #include "content/public/browser/notification_registrar.h" #include "content/public/browser/notification_registrar.h" #include "content/public/browser/notification_registrar.h" #include "content/public/browser/notification_registrar.h" #include "content/public/browser/notification_registrar.h" #include "content/public/browser/notification_registrar.h" #include "content/public/browser/notification_registrar.h" #include "content/public/browser/notification_registrar.h" #include "content/public/browser/notification_registrar.h" #include "content/public/browser/notification
/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */  package org.apache.ignite.internal.processors.cache;  import org.apache.ignite.IgniteCheckedException; import org.apache.ignite.IgniteException; import org.apache.ignite.cache.CacheAtomicityMode; import org.apache.ignite.cache.CacheMode; import org.apache.ignite.cache.CacheWriteSynchronizationMode; import org.apache.ignite.configuration.CacheConfiguration; import org.apache.ignite.configuration.IgniteConfiguration; import org.apache.ignite.internal.IgniteEx; import org.apache.ignite.internal.util.typedef.F; import org.apache.ignite.internal.util.typedef.internal.S; import org.apache.ignite.internal.util.typedef.internal.U; import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi; import org.apache.ignite.spi.discovery.tcp.ipfinder.TcpDiscoveryIpFinder; import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder; import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest; import org.apache.ignite.testframework.junits.common.GridCommonTest; import org.
// Copyright (c) 2012 The Chromium Authors. All rights reserved. // Use of this source code is governed by a BSD-style license that can be // found in the LICENSE file.  #ifndef CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_H_ #define CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_H_  #include <string>  #include "base/macros.h" #include "base/memory/scoped_ptr.h" #include "base/memory/scoped_vector.h" #include "base/memory/weak_ptr.h" #include "content/public/browser/browser_thread.h" #include "content/public/browser/notification_observer.h" #include "content/public/browser/notification_registrar.h" #include "content/public/browser/notification_service.h" #include "content/public/browser/notification_source.h" #include "content/public/browser/notification_types.h" #include "content/public/browser/notification_registrar.h" #include "content/public/browser/web_contents.h" #include "content/public/browser/web_contents_observer.h" #include "content/public/browser/web_contents_user_data.h" #include "content/public/browser/web_ui_data_source.h" #include "content/public/browser/web_ui_data_source_delegate.h" #include "content/public/browser/web_ui_data_source_impl.h" #include "content/public/browser/web_ui_data_source_delegate.h" #include "content/public/browser/web_ui_data_source_impl.h" #include "content/public/browser/web_ui_data_source_view.h" #include "content/public/browser/web_ui_data_source_view_delegate.h" #include "content/public/browser/web_
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.product.name',                 'attr' => array(                     'class' => 'form-control',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.product.description',                 'attr' => array(                     'class' => 'form-control',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
 class TokenError(Exception): pass class StopTokenizing(Exception): pass class TokenError(Exception): pass class StopTokenizing(Exception): pass class TokenError(Exception): pass class TokenError(Exception): pass class TokenError(Exception): pass class TokenError(Exception): pass class TokenError(Exception): pass class TokenError(Exception): pass class TokenError(Exception): pass class TokenError(Exception): pass class TokenError(Exception): pass class TokenError(Exception): pass class TokenError(Exception): pass class TokenError(Exception): pass class TokenError(Exception): pass class TokenError(Exception): pass class TokenError(Exception): pass class TokenError(Exception): pass class TokenError(Exception): pass class TokenError(Exception): pass class TokenError(Exception): pass class TokenError(Exception): pass class TokenError(Exception): pass class TokenError(Exception): pass class TokenError(Exception): pass class TokenError(Exception): pass class TokenError(Exception): pass class TokenError(Exception): pass class TokenError(Exception): pass class TokenError(Exception): pass class TokenError(Exception): pass class TokenError(Exception): pass class TokenError(Exception): pass class TokenError(Exception): pass class TokenError(Exception): pass class TokenError(Exception): pass class TokenError(Exception): pass class TokenError(Exception): pass class TokenError(Exception): pass class TokenError(Exception): pass class TokenError(Exception): pass class TokenError(Exception): pass class TokenError(Exception): pass class TokenError(Exception): pass class TokenError(Exception): pass class TokenError(Exception): pass class TokenError(Exception): pass class TokenError(Exception): pass class TokenError(Exception): pass class TokenError(Exception): pass class TokenError(Exception): pass class TokenError(Exception): pass class TokenError(Exception): pass class TokenError(Exception): pass class TokenError(Exception): pass class TokenError(Exception): pass class TokenError(Exception): pass class TokenError(Exception): pass class TokenError(Exception): pass class TokenError(Exception): pass class TokenError(Exception): pass class TokenError(
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.functions.IFunctionDescriptorProvider; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import
// Copyright (c) 2012 The Chromium Authors. All rights reserved. // Use of this source code is governed by a BSD-style license that can be // found in the LICENSE file.  #ifndef CHROME_BROWSER_UI_VIEWS_TABS_TAB_MANAGER_H_ #define CHROME_BROWSER_UI_VIEWS_TABS_TAB_MANAGER_H_  #include "base/basictypes.h" #include "base/memory/scoped_ptr.h" #include "base/memory/weak_ptr.h" #include "content/public/browser/browser_thread.h" #include "content/public/browser/notification_observer.h" #include "content/public/browser/notification_registrar.h" #include "content/public/browser/notification_service.h" #include "content/public/browser/web_contents_observer.h" #include "content/public/browser/web_contents_user_data.h" #include "content/public/browser/web_contents_user_data_manager.h" #include "content/public/browser/web_contents_user_data_manager_delegate.h" #include "content/public/browser/web_contents_user_data_manager_factory.h" #include "content/public/browser/web_contents_view.h" #include "content/public/browser/web_contents_view_delegate.h" #include "content/public/browser/web_contents_user_data_manager.h" #include "content/public/browser/web_contents_user_data_manager_observer.h" #include "content/public/browser/web_contents_user_data_manager_factory.h" #include "content/public/browser/web_contents_view_delegate.h" #include "content/public/browser/web_contents_user_data_manager.h" #include "content/public/browser/web_contents_user_data_manager_observer.h" #include "content/public/browser/web_contents_user_data_manager_
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.functions.IFunctionDescriptorProvider; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import
/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */  package org.apache.ignite.internal.processors.cache;  import java.util.ArrayList; import java.util.Collection; import java.util.Collections; import java.util.List; import org.apache.ignite.IgniteCheckedException; import org.apache.ignite.IgniteException; import org.apache.ignite.configuration.CacheConfiguration; import org.apache.ignite.configuration.IgniteConfiguration; import org.apache.ignite.internal.util.typedef.F; import org.apache.ignite.internal.util.typedef.internal.S; import org.apache.ignite.internal.util.typedef.internal.U; import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi; import org.apache.ignite.spi.discovery.tcp.ipfinder.TcpDiscoveryIpFinder; import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder; import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest; import org.apache.ignite.testframework.junits.common.GridCommonTest; import org.jetbrains.annotations.Nullable;  import static org.apache.ignite.cache.CacheMode.PARTITIONED; 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */  package org.apache.druid.query.aggregation;  import com.fasterxml.jackson.annotation.JsonCreator; import com.fasterxml.jackson.annotation.JsonProperty; import com.fasterxml.jackson.annotation.JsonTypeInfo; import com.fasterxml.jackson.annotation.JsonTypeInfo.Id; import com.fasterxml.jackson.annotation.JsonTypeInfo.As; import com.fasterxml.jackson.annotation.JsonTypeName; import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Iterables; import com.google.common.collect.Lists; import org.apache.druid.java.util.common.ISE; import org.apache.druid.java.util.common.logger.Logger; import org.apache.druid.java.util.common.logger.LoggerFactory; import org.apache.druid.java.util.common.time.Duration; import org.apache.druid.java.util.common.time.Time; import org.apache.druid.java.util.common.logger.LoggerFactory; import org.apache.druid.java.
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */ package org.apache.beam.runners.core;  import static org.hamcrest.Matchers.is; import static org.hamcrest.Matchers.notNullValue; import static org.hamcrest.Matchers.nullValue; import static org.junit.Assert.assertThat; import static org.mockito.Mockito.mock; import static org.mockito.Mockito.when; import static org.mockito.Mockito.verify; import static org.mockito.Mockito.verifyNoMoreInteractions; import static org.mockito.Mockito.when;  import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.ImmutableSortedMap; import com.google.common.collect.ImmutableSortedSet; import com.google.common.collect.ImmutableSortedSet.Builder; import com.google.common.collect.ImmutableSortedSet.Builder; import com.google.common.collect.Iterables; import com.google.common.collect.Lists; import com.google.common.collect.Multimap; import com.google.common.collect.Multimap.Builder; import com.google.common.collect.Multimap.Builder; import com.google
// Copyright (c) 2012 The Chromium Authors. All rights reserved. // Use of this source code is governed by a BSD-style license that can be // found in the LICENSE file.  #ifndef CHROME_BROWSER_CHROMEOS_LOGIN_SCREEN_H_ #define CHROME_BROWSER_CHROMEOS_LOGIN_SCREEN_H_  #include <string> #include <vector>  #include "base/basictypes.h" #include "base/compiler_specific.h" #include "base/memory/ref_counted.h" #include "base/memory/scoped_ptr.h" #include "base/memory/scoped_vector.h" #include "base/memory/weak_ptr.h" #include "base/memory/weak_ptr_factory.h" #include "base/memory/weak_ptr_set.h" #include "base/time/time.h" #include "chrome/browser/chromeos/login/user_manager.h" #include "chrome/browser/chromeos/login/user_manager_factory.h" #include "chrome/browser/profiles/profile.h" #include "content/public/browser/notification_observer.h" #include "content/public/browser/notification_registrar.h" #include "content/public/browser/notification_registrar_observer.h" #include "content/public/browser/render_view_host.h" #include "content/public/browser/render_view_host_observer.h" #include "content/public/browser/render_widget_host.h" #include "content/public/browser/web_contents.h" #include "content/public/browser/web_contents_observer.h" #include "content/public/browser/web_ui.h" #include "content/public/browser/web_ui_data_source.h" #include "content/public/browser/web_ui_message_handler.h" #include "content/public/browser/web_ui_source.h" 
            return mobj.group(1)         else:             return filter_str      def parse_dfxp_date_expr(date_expr):         if not date_expr:         return 0.0         mobj = re.match(r'^(?P<date_offset>\d+(?:\.\d+)?)s?$', date_expr)         if mobj:             return mobj.group(1)         else:             return filter_str      def parse_dfxp_time_expr(time_expr):         if not time_expr:         return 0.0         mobj = re.match(r'^(?P<time_offset>\d+(?:\.\d+)?)s?$', time_expr)         if mobj:             return mobj.group(1)         else:             return filter_str      def parse_dfxp_date_time_expr(date_time_expr):         if not date_time_expr:         return 0.0         mobj = re.match(r'^(?P<date_offset>\d+(?:\.\d+)?)s?$', date_time_expr)         if mobj:             return mobj.group(1)         else:             return filter_str      def parse_dfxp_time_expr(time_expr):         if not time_expr:         return 0.0         mobj = re.match(r'^(?P<time_offset>\d+(?:\.\d+)?)s?$', time_expr)         if mobj:             return mobj.group(1)         else:             return filter_str      def parse_dfxp_time_expr(time_expr):         if not time_expr:         return 0.0         mobj = re.match(r'^(?P<time_offset>\d+(?:\.\d+)?)s?$', time_expr)         if mobj:             return mobj.group(1)         else:             return filter_str      def parse_dfxp_time_expr(time_expr):         if not time_expr:         return 0.0         mobj = re.match(
// Copyright (c) 2012 The Chromium Authors. All rights reserved. // Use of this source code is governed by a BSD-style license that can be // found in the LICENSE file.  #ifndef CHROME_BROWSER_EXTENSIONS_API_EXTENSION_API_H_ #define CHROME_BROWSER_EXTENSIONS_API_EXTENSION_API_H_  #include <string> #include <vector>  #include "base/basictypes.h" #include "base/compiler_specific.h" #include "base/memory/ref_counted.h" #include "base/memory/scoped_ptr.h" #include "base/memory/weak_ptr.h" #include "base/memory/weak_ptr_factory.h" #include "base/memory/weak_ptr_set.h" #include "base/memory/weak_string.h" #include "base/memory/weak_vector.h" #include "base/memory/weak_vector_fast.h" #include "base/prefs/pref_service.h" #include "base/prefs/pref_service_syncable.h" #include "base/prefs/pref_service_syncable.h" #include "base/prefs/pref_service_syncable_observer.h" #include "base/prefs/scoped_user_pref_update.h" #include "base/prefs/scoped_user_pref_update_observer.h" #include "base/strings/string16.h" #include "base/strings/string_piece.h" #include "base/strings/string_util.h" #include "base/strings/stringprintf.h" #include "base/strings/utf_string_conversions.h" #include "chrome/browser/extensions/api/extension_api.h" #include "chrome/browser/extensions/api/extension_api_observer.h" #include "chrome/browser/profiles/profile.h" #include "content/public/browser/notification_observer.h" #include "content/public
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */ package org.apache.beam.runners.core;  import static org.junit.Assert.assertEquals; import static org.junit.Assert.assertFalse; import static org.junit.Assert.assertNotNull; import static org.junit.Assert.assertNull; import static org.junit.Assert.assertTrue;  import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Iterables; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import org.apache.beam.sdk.coders.Coder; import org.apache.beam.sdk.coders.CoderException; import org.apache.beam.sdk.coders.StringUtf8Coder; import org.apache.beam.sdk.options.PipelineOptions; import org.apache.beam.sdk.options.PipelineOptionsFactory; import org.apache.beam.sdk.testing.TestPipeline; import org.apache.beam.sdk.testing.TestPipelineFactory; import org.apache.beam.sdk.transforms.DoFn; import org.apache.beam.sdk
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializer; import org.apache.hyracks.api.dataflow.value.ISerializerSerializer; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.data
/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */  package org.apache.ignite.internal.processors.cache;  import org.apache.ignite.IgniteCheckedException; import org.apache.ignite.IgniteException; import org.apache.ignite.IgniteLogger; import org.apache.ignite.IgniteSpiException; import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi; import org.apache.ignite.spi.discovery.tcp.ipfinder.TcpDiscoveryIpFinder; import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder; import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest; import org.apache.ignite.testframework.junits.common.GridCommonTest; import org.junit.Test;  import static org.apache.ignite.cache.CacheAtomicityMode.TRANSACTIONAL; import static org.apache.ignite.cache.CacheMode.PARTITIONED; import static org.apache.ignite.cache.CacheWriteSynchronizationMode.FULL_SYNC; import static org.apache.ignite.cache.CacheWriteSynchronizationMode.REPEATABLE_READ; import static org.apache.ignite.cache.CacheWriteSynchronizationMode.SYNC; import static org.apache.ignite.cache.Cache
﻿using System; using System.Collections.Generic; using System.Linq; using System.Text; using System.Threading.Tasks; using System.Windows; using System.Windows.Controls; using System.Windows.Data; using System.Windows.Documents; using System.Windows.Input; using System.Windows.Media; using System.Windows.Media.Imaging; using System.Windows.Navigation; using System.Windows.Shapes; using System.Windows.Shapes.Drawing; using System.Windows.Shell; using System.Windows.Shapes.Primitives; using System.Windows.Data; using System.Windows.Documents; using System.Windows.Input; using System.Windows.Media; using System.Windows.Media.Imaging; using System.Windows.Shapes; using System.Windows.Shapes.Drawing2D; using System.Windows.Shapes.Primitives; using System.Windows.Documents; using System.Windows.Input; using System.Windows.Media.Imaging; using System.Windows.Navigation; using System.Windows.Shapes.Primitives; using System.Windows.Shapes.Primitives; using System.Windows.Shapes.Primitives; using System.Windows.Shapes.Primitives; using System.Windows.Shapes.Primitives; using System.Windows.Shapes.Primitives; using System.Windows.Shapes.Primitives; using System.Windows.Shapes.Primitives; using System.Windows.Shapes.Primitives; using System.Windows.Shapes.Primitives; using System.Windows.Shapes.Primitives; using System.Windows.Shapes.Primitives; using System.Windows.Shapes.Primitives; using System.Windows.Shapes.Primitives; using System.Windows.Shapes.Primitives; using System.Windows.Shapes.Primitives; using System.Windows.Shapes.Primitives; using System.Windows.Shapes.Primitives; using System.Windows.Shapes.Primitives; using System.Windows.Shapes.Primitives; using System.Windows.Shapes.Primitives; using System.Windows.Shapes.Primitives; using System.Windows.Shapes.Primitives; using System.Windows.Shapes.Pr
/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */  package org.apache.ignite.internal.processors.cache;  import org.apache.ignite.IgniteCheckedException; import org.apache.ignite.IgniteException; import org.apache.ignite.configuration.CacheConfiguration; import org.apache.ignite.configuration.IgniteConfiguration; import org.apache.ignite.internal.IgniteEx; import org.apache.ignite.internal.processors.cache.distributed.dht.*; import org.apache.ignite.internal.util.typedef.F; import org.apache.ignite.internal.util.typedef.internal.S; import org.apache.ignite.internal.util.typedef.internal.U; import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi; import org.apache.ignite.spi.discovery.tcp.ipfinder.TcpDiscoveryIpFinder; import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder; import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest; import org.apache.ignite.testframework.junits.common.GridCommonTest; import org.jetbrains.annotations.Nullable;  import static org.apache.ignite.internal.processors.
      elif leaf.type in OPENING_BRACKETS:          return NO       elif leaf.type in CLOSE_BRACKETS:          return NO       elif leaf.type in OPENING_BRACKETS:          return NO       elif leaf.type in CLOSE_BRACKETS:          return NO       elif leaf.type in OPENING_BRACKETS:          return NO       elif leaf.type in OPENING_BRACKETS:          return NO       elif leaf.type in OPENING_BRACKETS:          return NO       elif leaf.type in OPENING_BRACKETS:          return NO       elif leaf.type in OPENING_BRACKETS:          return NO       elif leaf.type in OPENING_BRACKETS:          return NO       elif leaf.type in OPENING_BRACKETS:          return NO       elif leaf.type in OPENING_BRACKETS:          return NO       elif leaf.type in OPENING_BRACKETS:          return NO       elif leaf.type in OPENING_BRACKETS:          return NO       elif leaf.type in OPENING_BRACKETS:          return NO       elif leaf.type in OPENING_BRACKETS:          return NO       elif leaf.type in OPENING_BRACKETS:          return NO       elif leaf.type in OPENING_BRACKETS:          return NO       elif leaf.type in OPENING_BRACKETS:          return NO       elif leaf.type in OPENING_BRACKETS:          return NO       elif leaf.type in OPENING_BRACKETS:          return NO       elif leaf.type in OPENING_BRACKETS:          return NO       elif leaf.type in OPENING_BRACKETS:          return NO       elif leaf.type in OPENING_BRACKETS:          return NO       elif leaf.type in OPENING_BRACKETS:          return NO       elif leaf.type in OPENING_BRACKETS:          return NO       elif leaf.type in OPENING_BRACKETS:          return NO       elif leaf.type in OPENING_BRACKETS:          return NO       elif leaf.type in OPENING_BRACKETS:          return NO       elif leaf.type in OPENING_BRACKETS:          return NO       elif leaf.type in OPENING_BRACKETS:          return NO       elif leaf.type in OPENING_BRACKETS:          return NO      
_class  class APIResponse(routing.Response):     def __init__(self, response_class=None):         self.response_class = response_class      def get(self):         return self.response_class      def post(self):         return self.response_class      def put(self):         return self.response_class      def delete(self):         return self.response_class      def head(self):         return self.response_class      def options(self):         return self.response_class      def head_options(self):         return self.response_class      def options_options(self):         return self.response_class      def post_options(self):         return self.response_class      def put_options(self):         return self.response_class      def delete_options(self):         return self.response_class      def head_options_options(self):         return self.response_class      def options_options_options(self):         return self.response_class      def post_options_options(self):         return self.response_class      def put_options_options(self):         return self.response_class      def delete_options_options(self):         return self.response_class      def head_options_options_options(self):         return self.response_class      def options_options_options_options(self):         return self.response_class      def post_options_options_options(self):         return self.response_class      def put_options_options_options(self):         return self.response_class      def delete_options_options_options(self):         return self.response_class      def head_options_options_options(self):         return self.response_class      def options_options_options_options(self):         return self.response_class      def post_options_options_options(self):         return self.response_class      def put_options_options_options
  class RNNCell(Layer):     def __init__(self):         super(RNNCell, self).__init__()         self.dropout = min(1., max(0., dropout))         self.recurrent_dropout = min(1., max(0., recurrent_dropout))         self.state_size = self.units         self._dropout_mask = None         self._recurrent_dropout_mask = None      def forward(self, x):         x = self.dropout(x)         x = self.recurrent_dropout(x)         x = self.state_size(x)         return x      def backward(self, x):         x = self.dropout(x)         x = self.recurrent_dropout(x)         x = self.state_size(x)         return x      def get_dropout_mask(self):         return self._dropout_mask      def set_dropout_mask(self, mask):         self._dropout_mask = mask      def get_recurrent_dropout_mask(self):         return self._recurrent_dropout_mask      def set_recurrent_dropout_mask(self, mask):         self._recurrent_dropout_mask = mask      def get_state_size(self):         return self._state_size      def set_state_size(self, size):         self._state_size = size      def get_units(self):         return self._units      def set_units(self, units):         self._units = units      def get_dropout_mask(self):         return self._dropout_mask      def set_dropout_mask(self, mask):         self._dropout_mask = mask      def get_recurrent_dropout_mask(self):         return self._recurrent_dropout_mask      def set_recurrent_dropout_mask(self, mask):         self._recurrent_dropout_mask = mask      def get_state_size(self):         return self._state_size      def set_state_size(self, size):         self
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializer; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializerProvider; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.data.accessors.ITupleReference; import org.apache.hyracks
(na_value_for_dtype(dtype, compat=False))   def is_extension_array_dtype(dtype):     if isinstance(dtype, np.dtype):         return True     elif isinstance(dtype, np.dtype.dtype):         return True     elif isinstance(dtype, np.dtype.dtype):         return True     elif isinstance(dtype, np.dtype.dtype):         return True     elif isinstance(dtype, np.dtype.dtype):         return True     elif isinstance(dtype, np.dtype.dtype):         return True     elif isinstance(dtype, np.dtype.dtype):         return True     elif isinstance(dtype, np.dtype.dtype):         return True     elif isinstance(dtype, np.dtype.dtype):         return True     elif isinstance(dtype, np.dtype.dtype):         return True     elif isinstance(dtype, np.dtype.dtype):         return True     elif isinstance(dtype, np.dtype.dtype):         return True     elif isinstance(dtype, np.dtype.dtype):         return True     elif isinstance(dtype, np.dtype.dtype):         return True     elif isinstance(dtype, np.dtype.dtype):         return True     elif isinstance(dtype, np.dtype.dtype):         return True     elif isinstance(dtype, np.dtype.dtype):         return True     elif isinstance(dtype, np.dtype.dtype):         return True     elif isinstance(dtype, np.dtype.dtype):         return True     elif isinstance(dtype, np.dtype.dtype):         return True     elif isinstance(dtype, np.dtype.dtype):         return True     elif isinstance(dtype, np.dtype.dtype):         return True     elif isinstance(dtype, np.dtype.dtype):         return True     elif isinstance(dtype, np.dtype.dtype):         return True     elif isinstance(dtype, np.dtype.dtype):         return True     elif isinstance(dtype, np.dtype.dtype):         return True     elif isinstance(dtype, np.dtype.dtype):         return True     elif isinstance(dtype, np.dtype.dtype):         return True     elif isinstance(dtype, np
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.functions.IFunctionDescriptorProvider; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.data.accessors.ITupleReference; import org.apache.hyracks.dataflow.common.data
// Copyright (c) 2012 The Chromium Authors. All rights reserved. // Use of this source code is governed by a BSD-style license that can be // found in the LICENSE file.  #ifndef CHROME_BROWSER_UI_WEBUI_CHROMEOS_LOGIN_USER_MANAGER_H_ #define CHROME_BROWSER_UI_WEBUI_CHROMEOS_LOGIN_USER_MANAGER_H_  #include <string> #include <vector>  #include "base/basictypes.h" #include "base/compiler_specific.h" #include "base/memory/scoped_ptr.h" #include "base/memory/weak_ptr.h" #include "base/memory/weak_ptr_factory.h" #include "base/memory/weak_vector.h" #include "base/memory/weak_set.h" #include "base/memory/weak_string.h" #include "chrome/browser/chromeos/login/user_manager.h" #include "chrome/browser/chromeos/login/user_manager_factory.h" #include "chrome/browser/profiles/profile.h" #include "content/public/browser/notification_observer.h" #include "content/public/browser/notification_registrar.h" #include "content/public/browser/notification_registrar_observer.h" #include "content/public/browser/notification_registrar_observer.h" #include "content/public/browser/notification_registrar.h" #include "content/public/browser/notification_registrar.h" #include "content/public/browser/notification_registrar.h" #include "content/public/browser/notification_registrar.h" #include "content/public/browser/notification_registrar.h" #include "content/public/browser/notification_registrar.h" #include "content/public/browser/notification_registrar.h" #include "content/public/browser/notification_registrar.h"
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
_xml_all_ampersand = re.compile(     re.compile(         re.compile(             re.compile(                 re.compile(                     re.compile(                         re.compile(                             re.compile(                                 re.compile(                                     re.compile(                                         re.compile(                                             re.compile(                                                 re.compile(                                                     re.compile(                                                         re.compile(                                                             re.compile(                                                                 re.compile(                                                                 re.compile(                                                                 re.compile(                                                                 re.compile(                                                                 re.compile(                                                                 re.compile(                                                                 re.compile(                                                                 re.compile(                                                                 re.compile(                                                                 re.compile(                                                                 re.compile(                                                                 re.compile(                                                                 re.compile(                                                                 re.compile(                                                                 re.compile(                                                                 re.compile(                                                                 re.compile(                                                                 re.compile(                                                                 re.compile(                                                                 re.compile(                                                                 re.compile(                                                                 re.compile(                                                                 re.compile(                                                                 re.compile(                                                                 re.compile(                                                                 re.compile(                                                                 re.compile(                                                                 re.compile(                                                                 re.compile(                                                                 re.compile(                                                                 re.compile(                                                                 re.compile(                                                                 re.compile(                                                                 re.compile(                                                                 re.compile(                                                                 re.compile(                                                                 re.compile(                                                                 re.compile(                                                                 re.compile(                                                                 re.compile(                                                                 re.compile(                                                                 re.compile(                                                                 re.compile(                                                                 re.compile(                                                                 re.compile(                                                                 re.compile(                                                                 re.compile(                                                                 re.compile(                                                                 re.compile(                                                                 re.compile(                                                                 re.compile(                                                                 re.compile(                                                                 re.compile(                                                                 re.compile(                                                                 re.compile(                                                                 re.compile(                                                                 re.compile(                                 
﻿using System; using System.Collections.Generic; using System.Linq; using System.Text; using System.Threading.Tasks; using System.Windows; using System.Windows.Controls; using System.Windows.Data; using System.Windows.Documents; using System.Windows.Input; using System.Windows.Media; using System.Windows.Media.Imaging; using System.Windows.Navigation; using System.Windows.Shapes; using System.Windows.Shapes.Primitives; using System.Windows.Shell; using System.Windows.Data; using System.Windows.Documents; using System.Windows.Input; using System.Windows.Media; using System.Windows.Media.Effects; using System.Windows.Media.Imaging; using System.Windows.Media.Media3D; using System.Windows.Media.TextFormatting; using System.Windows.Navigation; using System.Windows.Shapes; using System.Windows.Shapes.Primitives; using System.Windows.Shapes.DataAnnotations; using System.Windows.Documents; using System.Windows.Media; using System.Windows.Media.Effects; using System.Windows.Media.Media3D; using System.Windows.Media.Animation; using System.Windows.Media.Imaging; using System.Windows.Media.Media3D.Effects; using System.Windows.Media.Media3D.Media3DResources; using System.Windows.Media.Animation; using System.Windows.Media.Imaging; using System.Windows.Media.Media3D.Media3DRuntime; using System.Windows.Media.Animation.Effects; using System.Windows.Media.Media3D.Media3DResources; using System.Windows.Media.Animation.Media3DRuntime; using System.Windows.Media.Animation.Media3DRuntime.Effects; using System.Windows.Media.Animation.Media3DRuntime.Media3DRuntimeEffects; using System.Windows.Media.Animation.Media3DRuntime.Media3DRuntimeEffects; using System.Windows.Media.Animation.Media3DRuntime.Media3DRuntimeEffects; using System.Windows.Media.Animation.Media3DRuntime.
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
 y: Numpy array of model targets to be weighted.     """     y = np.array(y)     y = np.array(y)     y = np.array(y)     y = np.array(y)     y = np.array(y)     y = np.array(y)     y = np.array(y)     y = np.array(y)     y = np.array(y)     y = np.array(y)     y = np.array(y)     y = np.array(y)     y = np.array(y)     y = np.array(y)     y = np.array(y)     y = np.array(y)     y = np.array(y)     y = np.array(y)     y = np.array(y)     y = np.array(y)     y = np.array(y)     y = np.array(y)     y = np.array(y)     y = np.array(y)     y = np.array(y)     y = np.array(y)     y = np.array(y)     y = np.array(y)     y = np.array(y)     y = np.array(y)     y = np.array(y)     y = np.array(y)     y = np.array(y)     y = np.array(y)     y = np.array(y)     y = np.array(y)     y = np.array(y)     y = np.array(y)     y = np.array(y)     y = np.array(y)     y = np.array(y)     y = np.array(y)     y = np.array(y)     y = np.array(y)     y = np.array(y)     y = np.array(y)     y = np.array(y)     y = np.array(y)     y = np.array(y)     y = np.
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.data.
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import java.util.ArrayList; import java.util.List;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.functions.IFunctionDescriptorProvider; import org.apache.asterix.om.types.ATypeTag; import org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor; import org.apache.asterix.runtime.evaluators.base.IScalarEvaluator; import org.apache.asterix.runtime.evaluators.base.IScalarEvaluatorFactory; import org.apache.asterix.runtime.evaluators.base.IScalarEvaluatorFactoryProvider; import org.apache.asterix.runtime.evaluators.base.IEvaluatorFactory; import org.apache.asterix.runtime.evaluators.base.IScalarEvaluatorFactoryProvider; import org.apache.asterix.runtime.evaluators.base.IEvaluatorFactoryService; import org.apache.asterix.runtime.evaluators.base.IScalarEvaluatorFactoryServiceFactory; import org.apache.asterix.runtime.evaluators.
def srt_subtitles_timecode(seconds):     def dfxp2srt(dfxp_data):         LEGACY_NAMESPACES = ( ('http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http: 'http:
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.data.accessors.ITupleReference; import org.apache.hyracks
 class CallbackModel(Container):     def __init__(self):         Container.__init__(self)         enqueuer.start(workers=workers, max_queue_size=max_queue_size)         output_generator = enqueuer.get()              else:             output_generator = generator         callback_model.stop_training = False         callback_model.output_generator = output_generator      def run(self):         output_generator.run()      def stop_training(self):         callback_model.stop_training = True      def output_generator(self):         output_generator.output()      def run(self):         output_generator.run()      def stop_training(self):         callback_model.stop_training = False      def output_generator(self):         output_generator.output()      def run(self):         output_generator.run()      def stop_training(self):         callback_model.stop_training = True      def output_generator(self):         output_generator.output()      def run(self):         output_generator.run()      def stop_training(self):         callback_model.stop_training = True      def output_generator(self):         output_generator.output()      def run(self):         output_generator.run()      def stop_training(self):         callback_model.stop_training = True      def output_generator(self):         output_generator.output()      def run(self):         output_generator.run()      def stop_training(self):         callback_model.stop_training = True      def output_generator(self):         output_generator.output()      def run(self):         output_generator.run()      def stop_training(self):         callback_model.stop_training = True      def output_generator(self):         output_generator.output()      def run(self):         output_generator.run()      def stop_training(self):         callback_model
 import logging import os import subprocess import sys import time import traceback  import luigi import luigi.utils  logger = logging.getLogger(__name__) logger.setLevel(logging.DEBUG) logger.addHandler(logging.StreamHandler()) logger.setLevel(logging.INFO) logger.addHandler(logging.DEBUG) logger.addHandler(logging.INFO) logger.addHandler(logging.DEBUG) logger.addHandler(logging.INFO) logger.addHandler(logging.DEBUG) logger.addHandler(logging.INFO) logger.addHandler(logging.DEBUG) logger.addHandler(logging.INFO) logger.addHandler(logging.DEBUG) logger.addHandler(logging.INFO) logger.addHandler(logging.DEBUG) logger.addHandler(logging.INFO) logger.addHandler(logging.DEBUG) logger.addHandler(logging.INFO) logger.addHandler(logging.DEBUG) logger.addHandler(logging.INFO) logger.addHandler(logging.DEBUG) logger.addHandler(logging.INFO) logger.addHandler(logging.DEBUG) logger.addHandler(logging.INFO) logger.addHandler(logging.DEBUG) logger.addHandler(logging.INFO) logger.addHandler(logging.DEBUG) logger.addHandler(logging.INFO) logger.addHandler(logging.DEBUG) logger.addHandler(logging.INFO) logger.addHandler(logging.DEBUG) logger.addHandler(logging.INFO) logger.addHandler(logging.DEBUG) logger.addHandler(logging.INFO) logger.addHandler(logging.DEBUG) logger.addHandler(logging.INFO) logger.addHandler(logging.DEBUG) logger.addHandler(logging.INFO) logger.addHandler(logging.DEBUG) logger.addHandler(logging.INFO) logger.addHandler(logging.DEBUG) logger.addHandler(logging.INFO) logger.addHandler(logging.DEBUG) logger.addHandler(logging.INFO) logger.addHandler(logging.DEBUG) logger.addHandler(logging.INFO) logger.addHandler(logging.DEBUG) logger.addHandler(
 the *edgecolors* kwarg.              - A color or sequence of colors. default: :rc:`scatter.edgecolors`              - 'none': No patch boundary will be drawn.              - A color or sequence of colors.             For non-filled markers, the *edgecolors* kwarg is ignored and             forced to 'face' internally.          facecolor : color, default: :rc:`scatter.edgecolors`              - A color or sequence of colors.             For non-filled markers, the *edgecolors* kwarg is ignored and             forced to 'face' internally. default: :rc:`scatter.edgecolors`              - 'none': No patch boundary will be drawn.              - A color or sequence of colors.             For non-filled markers, the *edgecolors* kwarg is ignored and             forced to 'face' internally. default: :rc:`scatter.edgecolors`              - 'none': No patch boundary will be drawn.              - A color or sequence of colors.             For non-filled markers, the *edgecolors* kwarg is ignored and             forced to 'face' internally. default: :rc:`scatter.edgecolors`              - 'none': No patch boundary will be drawn.              - A color or sequence of colors.             For non-filled markers, the *edgecolors* kwarg is ignored and             forced to 'face' internally. default: :rc:`scatter.edgecolors`              - 'none': No patch boundary will be drawn.              - A color or sequence of colors.             For non-filled markers, the *edgecolors* kwarg is ignored and             forced to 'face' internally. default: :rc:`scatter.edgecolors`              - 'none': No patch boundary will be drawn.              - A color or sequence of colors.             For non-filled markers, the *edgecolors* kwarg is ignored and             forced to 'face' internally. default: :rc:`scatter.edgecolors`              - 'none': No patch boundary will be drawn.              - A color or sequence of colors.             For non-filled markers, the *edgecolors* kwarg is ignored and             forced to 'face' internally. default: :rc:`scatter.edgecolors`              - 'none': No patch
/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */  package org.apache.ignite.internal.processors.cache;  import org.apache.ignite.IgniteCheckedException; import org.apache.ignite.IgniteException; import org.apache.ignite.configuration.CacheConfiguration; import org.apache.ignite.configuration.IgniteConfiguration; import org.apache.ignite.internal.util.typedef.F; import org.apache.ignite.internal.util.typedef.internal.S; import org.apache.ignite.internal.util.typedef.internal.U; import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi; import org.apache.ignite.spi.discovery.tcp.ipfinder.TcpDiscoveryIpFinder; import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder; import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest; import org.apache.ignite.testframework.junits.common.GridCommonTest; import org.jetbrains.annotations.Nullable;  import static org.apache.ignite.cache.CacheAtomicityMode.ATOMIC; import static org.apache.ignite.cache.CacheMode.PARTITIONED; import static org.apache.ignite.cache.Cache
  def _isna_ndarraylike_old(obj):     if hasattr(obj, "__array__"):         return _isna_ndarraylike_old(np.asarray(obj))     else:         return obj is None  _isna = _isna_ndarraylike_old  def _isna_ndarraylike_new(obj):     if hasattr(obj, "__array__"):         return _isna_ndarraylike_new(np.asarray(obj))     else:         return obj is None  _isna = _isna_ndarraylike_new  def _isna_ndarraylike_ndarraylike_old(obj):     if hasattr(obj, "__array__"):         return _isna_ndarraylike_ndarraylike_old(np.asarray(obj))     else:         return obj is None  _isna = _isna_ndarraylike_ndarraylike_old  def _isna_ndarraylike_ndarraylike_new(obj):     if hasattr(obj, "__array__"):         return _isna_ndarraylike_ndarraylike_new(np.asarray(obj))     else:         return obj is None  _isna = _isna_ndarraylike_ndarraylike_new  def _isna_ndarraylike_ndarraylike_ndarraylike_old(obj):     if hasattr(obj, "__array__"):         return _isna_ndarraylike_ndarraylike_ndarraylike_old(np.asarray(obj))     else:         return obj is None  _isna = _isna_ndarraylike_ndarraylike_ndarraylike_ndarraylike_ndarraylike_ndarraylike_ndarraylike_ndarraylike_ndarraylike_ndarraylike_ndarraylike_ndarraylike_ndarraylike_ndarraylike_ndarraylike_ndarraylike_ndarraylike_ndarraylike_ndarraylike_ndarraylike_ndarraylike_ndarraylike_ndarraylike_ndarraylike_ndarraylike_ndarraylike_ndarraylike_ndarraylike_ndarraylike_ndarraylike_ndarraylike_ndarraylike_ndarraylike_ndarraylike_ndarraylike_ndarraylike_ndarraylike_ndarraylike_ndarraylike_ndarraylike_ndarraylike_ndarraylike_ndarraylike_ndarraylike_ndarraylike_ndarraylike_ndarraylike_ndarraylike_ndarraylike_ndarraylike_
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
// Copyright (c) 2012 The Chromium Authors. All rights reserved. // Use of this source code is governed by a BSD-style license that can be // found in the LICENSE file.  #ifndef CHROME_BROWSER_EXTENSIONS_API_EXTENSION_API_H_ #define CHROME_BROWSER_EXTENSIONS_API_EXTENSION_API_H_  #include <string> #include <vector>  #include "base/basictypes.h" #include "base/compiler_specific.h" #include "base/memory/ref_counted.h" #include "base/memory/scoped_ptr.h" #include "base/memory/weak_ptr.h" #include "base/memory/weak_ptr_factory.h" #include "base/memory/weak_ptr_set.h" #include "base/memory/weak_vector.h" #include "base/prefs/pref_service.h" #include "base/prefs/pref_service_syncable.h" #include "base/prefs/pref_service_syncable.h" #include "base/prefs/scoped_user_pref_update.h" #include "base/strings/string16.h" #include "base/strings/string_piece.h" #include "base/strings/string_util.h" #include "base/strings/stringprintf.h" #include "base/strings/utf_string_conversions.h" #include "chrome/browser/extensions/api/extension_api.h" #include "chrome/browser/extensions/api/extension_api_observer.h" #include "chrome/browser/profiles/profile.h" #include "content/public/browser/notification_observer.h" #include "content/public/browser/notification_registrar.h" #include "content/public/browser/notification_registrar_observer.h" #include "content/public/browser/notification_service.h" #include "content/public/browser/notification_source.h" #include "content/public/
              self._on_close_called = False              self.on_close()      def on_close(self):          if self.stream is not None:             self.stream.close()             self.stream = None             self._on_close_called = False  class WebSocketHandler2(tornado.web.RequestHandler):     def send_error(self, *args, **kwargs):          if self.stream is None:              self._on_close_called = True              self.on_close()      def on_close(self):          if self.stream is not None:             self.stream.close()             self.stream = None             self._on_close_called = False  class WebSocketHandler3(tornado.web.RequestHandler):     def send_error(self, *args, **kwargs):          if self.stream is None:              self._on_close_called = True              self.on_close()      def on_close(self):          if self.stream is not None:             self.stream.close()             self.stream = None             self._on_close_called = False  class WebSocketHandler4(tornado.web.RequestHandler):     def send_error(self, *args, **kwargs):          if self.stream is None:              self._on_close_called = True              self.on_close()      def on_close(self):          if self.stream is not None:             self.stream.close()             self.stream = None             self._on_close_called = False  class WebSocketHandler5(tornado.web.RequestHandler):     def send_error(self, *args, **kwargs):          if self.stream is None:              self._on_close_called = True              self.on_close()      def on_close(self):          if self.stream is not None:             self.stream.close()             self.stream = None             self._on_close_called = False  class WebSocketHandler6(tornado.web.RequestHandler):     def send_error(self, *args, **kwargs):          if self.stream is None:              self._on_close_called = True              self.on_close()      def on_close(self):         
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.functions.IFunctionDescriptorProvider; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.data.accessors.ITupleReference; import org.apache.hyracks.dataflow.common.data
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.functions.IFunctionDescriptorProvider; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.data.accessors.ITupleReference; import org.apache.hyracks.dataflow.common.data
          if not self._is_internal_frame(calling_frame):              calling_frame.f_trace = self.trace              self.target_frames.add(calling_frame)         stack = self.thread_local.__dict__.setdefault('original_trace_functions', [])          stack.append(sys.gettrace())          stack.append(sys.settrace(self.trace))          sys.settrace(stack.pop())          calling_frame = inspect.currentframe().f_back          if not self._is_internal_frame(calling_frame):              calling_frame.f_trace = self.trace              self.target_frames.add(calling_frame)         stack = self.thread_local.__dict__.setdefault('original_trace_functions', [])          stack.append(sys.gettrace())          stack.append(sys.settrace(self.trace))          sys.settrace(stack.pop())          calling_frame = inspect.currentframe().f_back          if not self._is_internal_frame(calling_frame):              calling_frame.f_trace = self.trace              self.target_frames.add(calling_frame)         stack = self.thread_local.__dict__.setdefault('original_trace_functions', [])          stack.append(sys.gettrace())          stack.append(sys.settrace(self.trace))          sys.settrace(stack.pop())          calling_frame = inspect.currentframe().f_back          if not self._is_internal_frame(calling_frame):              calling_frame.f_trace = self.trace              self.target_frames.add(calling_frame)         stack = self.thread_local.__dict__.setdefault('original_trace_functions', [])          stack.append(sys.gettrace())          stack.append(sys.settrace(self.trace))          sys.settrace(stack.pop())          calling_frame = inspect.currentframe().f_back          if not self._is_internal_frame(calling_frame):              calling_frame.f_trace = self.trace              self.target_frames.add(calling_frame)         stack = self.thread_local.__dict__.setdefault('original_trace_functions', [])          stack.append(sys.gettrace())          stack.
  def _isna_ndarraylike_old(obj):     if isinstance(obj, ABCSeries):          return False      elif isinstance(obj, ABCDataFrame):          return obj.isna()      elif isinstance(obj, list):         return _isna_ndarraylike_old(np.asarray(obj, dtype=object))      elif hasattr(obj, "__array__"):         return _isna_ndarraylike_old(np.asarray(obj))      else:          return False  def _isna_ndarraylike_new(obj):     if isinstance(obj, ABCSeries):          return False      elif isinstance(obj, ABCDataFrame):          return obj.isna()      elif isinstance(obj, list):         return _isna_ndarraylike_new(np.asarray(obj, dtype=object))      elif hasattr(obj, "__array__"):         return _isna_ndarraylike_new(np.asarray(obj))      else:          return False  def _isna_ndarraylike_new(obj):     if isinstance(obj, ABCSeries):          return False      elif isinstance(obj, ABCDataFrame):          return obj.isna()      elif isinstance(obj, list):         return _isna_ndarraylike_new(np.asarray(obj, dtype=object))      elif hasattr(obj, "__array__"):         return _isna_ndarraylike_new(np.asarray(obj))      else:          return False  def _isna_arraylike_old(obj):     if isinstance(obj, ABCSeries):          return False      elif isinstance(obj, ABCDataFrame):          return obj.isna()      elif isinstance(obj, list):         return _isna_arraylike_old(np.asarray(obj, dtype=object))      elif hasattr(obj, "__array__"):         return _isna_arraylike_old(np.asarray(obj))      else:          return False  def _isna_arraylike_new(obj):     if isinstance(obj, ABCSeries):          return False      elif isinstance(obj, ABCDataFrame):          return obj.isna()      elif isinstance(obj, list):         return _isna_arraylike_new(np.asarray(obj, dtype=object))      elif hasattr(obj, "__array__"):
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.functions.IFunctionDescriptorProvider; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import
 from pandas.core.reshape.concat import concat from pandas.core.reshape.concat import concatenate from pandas.core.reshape.concat import concatenate from pandas.core.reshape.concat import concatenate from pandas.core.reshape.concat import concatenate from pandas.core.reshape.concat import concatenate from pandas.core.reshape.concat import concatenate from pandas.core.reshape.concat import concatenate from pandas.core.reshape.concat import concatenate from pandas.core.reshape.concat import concatenate from pandas.core.reshape.concat import concatenate from pandas.core.reshape.concat import concatenate from pandas.core.reshape.concat import concatenate from pandas.core.reshape.concat import concatenate from pandas.core.reshape.concat import concatenate from pandas.core.reshape.concat import concatenate from pandas.core.reshape.concat import concatenate from pandas.core.reshape.concat import concatenate from pandas.core.reshape.concat import concatenate from pandas.core.reshape.concat import concatenate from pandas.core.reshape.concat import concatenate from pandas.core.reshape.concat import concatenate from pandas.core.reshape.concat import concatenate from pandas.core.reshape.concat import concatenate from pandas.core.reshape.concat import concatenate from pandas.core.reshape.concat import concatenate from pandas.core.reshape.concat import concatenate from pandas.core.reshape.concat import concatenate from pandas.core.reshape.concat import concatenate from pandas.core.reshape.concat import concatenate from pandas.core.reshape.concat import concatenate from pandas.core.reshape.concat import concatenate from pandas.core.reshape.concat import concatenate from pandas.core.reshape.concat import concatenate from pandas.core.reshape.concat import concatenate from pandas.core.reshape.concat import concatenate from pandas.core.reshape.concat import concatenate from pandas.core.reshape.concat import concatenate from pandas.core.reshape.concat import concatenate from pandas.core.reshape.concat import concatenate from pandas.core.reshape.concat import concatenate from pandas.core.reshape.concat import concatenate from pandas.core.resh
// Copyright (c) 2012 The Chromium Authors. All rights reserved. // Use of this source code is governed by a BSD-style license that can be // found in the LICENSE file.  #ifndef CHROME_BROWSER_UI_WEBUI_CHROME_BROWSER_FEED_EXPERTER_H_ #define CHROME_BROWSER_UI_WEBUI_CHROME_BROWSER_FEED_EXPERTER_H_  #include <string> #include <vector>  #include "base/memory/scoped_ptr.h" #include "base/memory/scoped_vector.h" #include "base/memory/weak_ptr.h" #include "chrome/browser/profiles/profile.h" #include "content/public/browser/notification_observer.h" #include "content/public/browser/notification_registrar.h" #include "content/public/browser/notification_registrar.h" #include "content/public/browser/notification_service.h" #include "content/public/browser/notification_source.h" #include "content/public/browser/notification_types.h" #include "content/public/browser/notification_registrar.h" #include "content/public/browser/notification_source.h" #include "content/public/browser/web_contents.h" #include "content/public/browser/web_contents_observer.h" #include "content/public/browser/web_contents_user_data.h" #include "content/public/browser/web_ui_data_source.h" #include "content/public/browser/web_ui_data_source_observer.h" #include "content/public/browser/web_ui_data_source_factory.h" #include "content/public/browser/web_ui_data_source.h" #include "content/public/browser/web_ui_data_source_factory.h" #include "content/public/browser/web_ui_message_handler.h" #include "content/public/browser/web_
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializer; import org.apache.hyracks.api.dataflow.value.ISerializerSerializer; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.functions.IFunctionDescriptorProvider; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.data.accessors.ITupleReference; import org.apache.hyracks.dataflow.common.data
<?php  /*  * This file is part of the Symfony package.  *  * (c) Fabien Potencier <fabien@symfony.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace Symfony\Bundle\FrameworkBundle\Command;  use Symfony\Component\Console\Input\InputInterface; use Symfony\Component\Console\Output\OutputInterface; use Symfony\Component\Console\Input\InputOption; use Symfony\Component\Console\Input\InputOptionInterface; use Symfony\Component\Console\Input\InputInterface; use Symfony\Component\Console\Input\InputOptionInterface; use Symfony\Component\Console\Input\InputOption; use Symfony\Component\Console\Input\InputOptionInterface; use Symfony\Component\Console\Input\InputOptionInterface; use Symfony\Component\Console\Input\InputOptionInterface; use Symfony\Component\Console\Input\InputOptionInterface; use Symfony\Component\Console\Input\InputOptionInterface; use Symfony\Component\Console\Input\InputOptionInterface; use Symfony\Component\Console\Input\InputOptionInterface; use Symfony\Component\Console\Input\InputOptionInterface; use Symfony\Component\Console\Input\InputOptionInterface; use Symfony\Component\Console\Input\InputOptionInterface; use Symfony\Component\Console\Input\InputOptionInterface; use Symfony\Component\Console\Input\InputOptionInterface; use Symfony\Component\Console\Input\InputOptionInterface; use Symfony\Component\Console\Input\InputOptionInterface; use Symfony\Component\Console\Input\InputOptionInterface; use Symfony\Component\Console\Input\InputOptionInterface; use Symfony\Component\Console\Input\InputOptionInterface; use Symfony\Component\Console\Input\InputOptionInterface; use Symfony\Component\Console\Input\InputOptionInterface; use Symfony\Component\Console\Input\InputOptionInterface; use Symfony\Component\Console\Input\InputOptionInterface; use Symfony\Component\Console\Input\InputOptionInterface; use Symfony\Component\Console\Input\InputOptionInterface; use Symfony\Component\Console\Input\InputOption
/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */  package org.apache.ignite.internal.processors.cache;  import org.apache.ignite.IgniteCheckedException; import org.apache.ignite.IgniteException; import org.apache.ignite.configuration.CacheConfiguration; import org.apache.ignite.configuration.IgniteConfiguration; import org.apache.ignite.internal.IgniteEx; import org.apache.ignite.internal.processors.cache.distributed.dht.*; import org.apache.ignite.internal.util.typedef.F; import org.apache.ignite.internal.util.typedef.internal.S; import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi; import org.apache.ignite.spi.discovery.tcp.ipfinder.TcpDiscoveryIpFinder; import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder; import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest; import org.apache.ignite.testframework.junits.common.GridCommonTest; import org.jetbrains.annotations.Nullable;  import static org.apache.ignite.cache.CacheMode.PARTITIONED; import static org.apache.ignite.cache.CacheWriteSynchronization
/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */  package org.apache.ignite.internal.processors.cache;  import org.apache.ignite.IgniteCheckedException; import org.apache.ignite.IgniteException; import org.apache.ignite.cache.CacheAtomicityMode; import org.apache.ignite.cache.CacheMode; import org.apache.ignite.cache.CacheWriteSynchronizationMode; import org.apache.ignite.configuration.CacheConfiguration; import org.apache.ignite.configuration.IgniteConfiguration; import org.apache.ignite.internal.IgniteEx; import org.apache.ignite.internal.processors.affinity.AffinityTopologyVersion; import org.apache.ignite.internal.util.typedef.G; import org.apache.ignite.internal.util.typedef.internal.S; import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi; import org.apache.ignite.spi.discovery.tcp.ipfinder.TcpDiscoveryIpFinder; import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder; import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest; import org.apache.ignite.testframework.junits.common.GridCommonTest; import org.
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.product.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.product.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.product.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.product.description',                 ),             ))         ;     }      /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
                     break                 elif requirement == '*':                     continue              if not op(LooseVersion(version), LooseVersion(requirement)):                  break                 else:                     continue              if not op(LooseVersion(version), LooseVersion(requirement)):                  break                 else:                     continue              if not op(LooseVersion(version), LooseVersion(requirement)):                  break                 else:                     continue              if not op(LooseVersion(version), LooseVersion(requirement)):                  break                 else:                     continue              if not op(LooseVersion(version), LooseVersion(requirement)):                  break                 else:                     continue              if not op(LooseVersion(version), LooseVersion(requirement)):                  break                 else:                     continue              if not op(LooseVersion(version), LooseVersion(requirement)):                  break                 else:                     continue              if not op(LooseVersion(version), LooseVersion(requirement)):                  break                 else:                     continue              if not op(LooseVersion(version), LooseVersion(requirement)):                  break                 else:                     continue              if not op(LooseVersion(version), LooseVersion(requirement)):                  break                 else:                     continue              if not op(LooseVersion(version), LooseVersion(requirement)):                  break                 else:                     continue              if not op(LooseVersion(version), LooseVersion(requirement)):                  break                 else:                     continue              if not op(LooseVersion(version), LooseVersion(requirement)):                  break                 else:                     continue              if not op(LooseVersion(version), LooseVersion(requirement)):                  break                 else:                     continue              if not op(LooseVersion(version), LooseVersion(requirement)):                  break                 else:                     continue              if not op(LooseVersion(version), LooseVersion(requirement)):                  break                 else:                     continue              if not op(LooseVersion(version), LooseVersion(requirement)):                  break                 else:                     continue              if not op(LooseVersion(version), LooseVersion(requirement)):                  break                 else:                     continue              if not op(LooseVersion(version), LooseVersion(requirement)):                  break                 else:                     continue              if not op(LooseVersion(version), LooseVersion(requirement)):                  break                 else:                     continue             
  def __init__(self):     self.consumed = 0     self.consumed = 0     self.consumed = 0     self.consumed = 0     self.consumed = 0     self.consumed = 0     self.consumed = 0     self.consumed = 0     self.consumed = 0     self.consumed = 0     self.consumed = 0     self.consumed = 0     self.consumed = 0     self.consumed = 0     self.consumed = 0     self.consumed = 0     self.consumed = 0     self.consumed = 0     self.consumed = 0     self.consumed = 0     self.consumed = 0     self.consumed = 0     self.consumed = 0     self.consumed = 0     self.consumed = 0     self.consumed = 0     self.consumed = 0     self.consumed = 0     self.consumed = 0     self.consumed = 0     self.consumed = 0     self.consumed = 0     self.consumed = 0     self.consumed = 0     self.consumed = 0     self.consumed = 0     self.consumed = 0     self.consumed = 0     self.consumed = 0     self.consumed = 0     self.consumed = 0     self.consumed = 0     self.consumed = 0     self.consumed = 0     self.consumed = 0     self.consumed = 0     self.consumed = 0     self.consumed = 0     self.consumed = 0     self.consumed = 0     self.consumed = 0     self.consumed = 0     self.consumed = 0     self.consumed = 0     self.consumed = 0     self.consumed = 0     self.consumed = 0     self.consumed = 0     self.consumed = 0     self.consumed = 0     self.consumed = 0     self.consumed = 0     self.consumed = 0     self.consumed = 0     self.consumed = 0     self.consumed = 0     self.consumed = 0     self.consumed = 0     self.consumed = 0     self.consumed = 0     self.consumed = 0     self.consumed =
) -> UnformattedLines:     lines = []     for line in split_line():         lines.append(line)     return UnformattedLines(lines)  class UnformattedLines:     def __init__(self, lines):         self.lines = lines      def __iter__(self):         return iter(self.lines)      def __len__(self):         return len(self.lines)      def __iter__(self):         return iter(self.lines)      def __iter__(self):         return iter(self.lines)      def __iter__(self):         return iter(self.lines)      def __iter__(self):         return iter(self.lines)      def __iter__(self):         return iter(self.lines)      def __iter__(self):         return iter(self.lines)      def __iter__(self):         return iter(self.lines)      def __iter__(self):         return iter(self.lines)      def __iter__(self):         return iter(self.lines)      def __iter__(self):         return iter(self.lines)      def __iter__(self):         return iter(self.lines)      def __iter__(self):         return iter(self.lines)      def __iter__(self):         return iter(self.lines)      def __iter__(self):         return iter(self.lines)      def __iter__(self):         return iter(self.lines)      def __iter__(self):         return iter(self.lines)      def __iter__(self):         return iter(self.lines)      def __iter__(self):         return iter(self.lines)      def __iter__(self):         return iter(self.lines)      def __iter__(self):         return iter(self.lines)      def __iter__(self):         return iter(self.lines)      def __iter__(self):        
/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */  package org.apache.ignite.internal.processors.cache.distributed.dht;  import org.apache.ignite.IgniteCheckedException; import org.apache.ignite.IgniteException; import org.apache.ignite.configuration.CacheConfiguration; import org.apache.ignite.configuration.IgniteConfiguration; import org.apache.ignite.internal.IgniteEx; import org.apache.ignite.internal.processors.cache.GridCacheContext; import org.apache.ignite.internal.processors.cache.GridCacheSharedContext; import org.apache.ignite.internal.util.typedef.F; import org.apache.ignite.internal.util.typedef.internal.S; import org.apache.ignite.internal.util.typedef.internal.U; import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi; import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder; import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest; import org.apache.ignite.testframework.junits.common.GridCommonTest; import org.jetbrains.annotations.Nullable;  import static org.apache.ignite.internal.processors.
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */ package org.apache.beam.runners.core;  import static org.junit.Assert.assertEquals; import static org.junit.Assert.assertFalse; import static org.junit.Assert.assertNotNull; import static org.junit.Assert.assertNull; import static org.junit.Assert.assertTrue; import static org.junit.Assert.fail;  import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Iterables; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import com.google.common.util.concurrent.Futures; import com.google.common.util.concurrent.ListenableFuture; import com.google.common.util.concurrent.MoreExecutors; import com.google.common.util.concurrent.ThreadFactoryBuilder; import com.google.common.util.concurrent.TimeUnit; import com.google.common.util.concurrent.TimeoutException; import com.google.common.util.concurrent.atomic.AtomicInteger; import com.google.common.util.concurrent.
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.functions.IFunctionDescriptorProvider; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.data.accessors.ITupleReference; import org.apache.hyracks.dataflow.common.data
<?php  /*  * This file is part of PHPExifTool.  *  * (c) 2012 Romain Neutron <imprec@gmail.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace PHPExiftool\Driver\Tag\DICOM;  use JMS\Serializer\Annotation\ExclusionPolicy; use PHPExiftool\Driver\AbstractTag;  /**  * @ExclusionPolicy("all")  */ class Color extends AbstractTag {      protected $Id = '0010,0011';      protected $Name = 'Color';      protected $FullName = 'DICOM::Main';      protected $GroupName = 'DICOM';      protected $g0 = 'DICOM';      protected $g1 = 'DICOM';      protected $g2 = 'Image';      protected $Type = '?';      protected $Writable = false;      protected $Description = 'Color';  } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
﻿using System.Reflection; using System.Runtime.CompilerServices; using System.Runtime.InteropServices;  // General Information about an assembly is controlled through the following  // set of attributes. Change these attribute values to modify the information // associated with an assembly. [assembly: AssemblyTitle("CSharp.Core")] [assembly: AssemblyDescription("")] [assembly: AssemblyConfiguration("")] [assembly: AssemblyCompany("")] [assembly: AssemblyProduct("CSharp.Core")] [assembly: AssemblyCopyright("Copyright ©  2015")] [assembly: AssemblyTrademark("")] [assembly: AssemblyCulture("")]  // Setting ComVisible to false makes the types in this assembly not visible  // to COM components.  If you need to access a type in this assembly from  // COM, set the ComVisible attribute to true on that type. [assembly: ComVisible(false)]  // The following GUID is for the ID of the typelib if this project is exposed to COM [assembly: Guid("e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7
  obj_name = context.CLIARGS['{0}_name'.format(galaxy_type)]          inject_data = dict(             description='your description',              ansible_plugin_list_dir=get_versioned_doclink('plugins/plugins.html'),          )          if galaxy_type == 'role':     obj_name = context.CLIARGS['{0}_name'.format(galaxy_type)]          inject_data = dict(             description='your description',              ansible_plugin_list_dir=get_versioned_doclink('plugins/plugins.html'),          )          if galaxy_type == 'role':     obj_name = context.CLIARGS['{0}_name'.format(galaxy_type)]          inject_data = dict(             description='your description',              ansible_plugin_list_dir=get_versioned_doclink('plugins/plugins.html'),          )          if galaxy_type == 'role':     obj_name = context.CLIARGS['{0}_name'.format(galaxy_type)]          inject_data = dict(             description='your description',              ansible_plugin_list_dir=get_versioned_doclink('plugins/plugins.html'),          )          if galaxy_type == 'role':     obj_name = context.CLIARGS['{0}_name'.format(galaxy_type)]          inject_data = dict(             description='your description',              ansible_plugin_list_dir=get_versioned_doclink('plugins/plugins.html'),          )          if galaxy_type == 'role':     obj_name = context.CLIARGS['{0}_name'.format(galaxy_type)]          inject_data = dict(             description='your description',              ansible_plugin_list_dir=get_versioned_doclink('plugins/plugins.html'),          )          if galaxy_type == 'role':     obj_name = context.CLIARGS['{0}_name'.format(galaxy_type)]          inject_data = dict(             description='your description',              ansible_plugin_list_dir=get_versioned_doclink('plugins/plugins.html'),          )          if galaxy_type == 'role':     obj_name = context.
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */  package org.apache.hyracks.algebricks.core.algebra.operators;  import org.apache.hyracks.algebricks.core.algebra.operators.base.ILogicalOperator; import org.apache.hyracks.algebricks.core.algebra.operators.base.IOperatorDescriptor; import org.apache.hyracks.algebricks.core.algebra.operators.base.IOperatorDescriptorFactory; import org.apache.hyracks.algebricks.core.algebra.operators.base.ILogicalOperatorDescriptorFactory; import org.apache.hyracks.algebricks.core.algebra.operators.base.ILogicalOperatorDescriptorFactoryFactory; import org.apache.hyracks.algebricks.core.algebra.operators.base.ILogicalOperatorDescriptorFactoryFactoryFactory; import org.apache.hyracks.algebricks.core.algebra.operators.base.ILogicalOperatorDescriptorFactoryFactoryFactory; import org.apache.hyracks.algebricks.core.algebra.operators.base.ILogicalOperatorDescriptorFactoryFactoryFactory; import org.apache.hyracks.algebricks.core.algebra.operators.base.ILogicalOperatorDescriptorFactoryFactoryFactory; import org.apache.hy
                      return indexer, new_index      def _get_level_indexer(self, key, level=None):         if level is None:             level = self._get_level()         return self._get_level_indexer(key, level=level)      def _get_level(self, key, level=None):         if level is None:             level = self._get_level()         return self._get_level(key, level=level)      def _get_level(self, key, level=None):         if level is None:             level = self._get_level()         return self._get_level(key, level=level)      def _get_level(self, key, level=None):         if level is None:             level = self._get_level()         return self._get_level(key, level=level)      def _get_level(self, key, level=None):         if level is None:             level = self._get_level()         return self._get_level(key, level=level)      def _get_level(self, key, level=None):         if level is None:             level = self._get_level()         return self._get_level(key, level=level)      def _get_level(self, key, level=None):         if level is None:             level = self._get_level()         return self._get_level(key, level=level)      def _get_level(self, key, level=None):         if level is None:             level = self._get_level()         return self._get_level(key, level=level)      def _get_level(self, key, level=None):         if level is None:             level = self._get_level()         return self._get_level(key, level=level)      def _get_level(self, key, level=None):         if level is None:             level = self._get_level()         return self._get_level(key, level=level)      def _get_level(self
#!/usr/bin/env python # -*- coding: utf-8 -*-  from __future__ import unicode_literals  from django.db import models, migrations   class Migration(migrations.Migration):      dependencies = [     ]      operations = [         migrations.CreateModel(             name='Category',             fields=[                 ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),                 ('name', models.CharField(max_length=255)),             ],         ),         migrations.CreateModel(             name='CategoryCategory',             fields=[                 ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),                 ('name', models.CharField(max_length=255)),             ],         ),         migrations.CreateModel(             name='CategoryCategoryCategory',             fields=[                 ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),                 ('name', models.CharField(max_length=255)),             ],         ),         migrations.CreateModel(             name='Category',             fields=[                 ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),                 ('name', models.CharField(max_length=255)),             ],         ),         migrations.CreateModel(             name='CategoryCategory',             fields=[                 ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),                 ('name', models.CharField(max_length=255)),             ],         ),         migrations.CreateModel(             name='CategoryCategory',             fields=[                 ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),                 ('name', models.CharField(max_
