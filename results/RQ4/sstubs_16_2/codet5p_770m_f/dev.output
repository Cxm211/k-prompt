}      public Predicate createPredicate(RouteContext routeContext) {         ExpressionType predicateType = getCompletePredicate();          if (predicateType != null && predicate == null) {              predicate = predicateType.createPredicate(routeContext);          }
ground.createFixture( groundBox, 1 );     groundBox.dispose();     for( int i = 0; i < 20; i++ )     {         boxes.add(createBox( ));     }
public void operationComplete(Future<AddAddEnvelope<DnsResponse, InetSocketAddress>> future) {                  queriesInProgress.remove(future);                 if (promise.isDone()) {                      return;                  }
@Configuration   @ConditionalOnBean(Client.class)  @ConditionalOnEnablednHealthIndicator("elasticsearch")  @EnableConfigurationProperties(ElasticsearchHealthIndicatorProperties.class)   public static class ElasticsearchHealthIndicatorConfiguration extends     CompositeHealthIndicatorConfiguration<ElasticsearchHealthIndicator, Client> {
context.setSubsystemXmlMapping(SUBSYSTEM_NAME, Namespace.SECURITY_1_0.getUriString(), SecuritySubsystemParser::new);          context.setSubsystemXmlMapping(SUBSYSTEM_NAME, Namespace.SECURITY_1_1.getUriString(), SecuritySubsystemParser::new);          context.setSubsystemXmlMapping(SUBSYSTEM_NAME, Namespace.SECURITY_1_2.getUriString(), SecuritySubsystemParser::new);         context.setSubsystemXmlMapping(SUBSYSTEM_NAME, Namespace.SECURITY_3_0.getUriString(), SecuritySubsystemParser_3_0::new);      }  } \No newline at end of file
private final PassFactory removeUnreachableCode =        new PassFactory("removeUnreachableCode", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       private final PassFactory checkRegExp =        new PassFactory("checkRegExp", true) {      @Override      protected CompilerPass createInternal(final final Compiler compiler) {
}    };   final PassFactory nameMappedAnonymousFunctions =        new PassFactory("nameAnonymousFunctions", true) {      @Override      protected CompilerPass createInternal(final final Compiler compiler) {
@Deployment(resources = { "org/activiti/engine/test/api/oneTaskProcess.bpmn20.xml" })    public void testQueryStartedAfter() throws Exception {      Calendar calendar = new GregorianCalendar();     calendar.set(Calendar.YEAR, 2200);      calendar.set(Calendar.MONTH, 8);      calendar.set(Calendar.DAY_OF_MONTH, 30);      calendar.set(Calendar.HOUR_OF_DAY, 12);
};       private final PassFactory closureOptimizePrimitives =        new PassFactory("closureOptimizePrimitives", true) {      @Override      protected CompilerPass createInternal(final final Compiler compiler) {
}      }      long takenTimeMs = System.currentTimeMillis() - startTimeMs;     double result = FILES_BYTES * 1000L / takenTimeMs / 1024 / 1024;      LOG.info(result + " Mb/sec. " + RESULT_PREFIX + "Entire " + (write ? "Write " : "Read ")          + " Took " + takenTimeMs + " ms. Current system Time: " + System.currentTimeMillis());    }
*/   @Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)  public SortedMap<String, String> getSystemVariables() throws APIException;   /**    * Get a map of all the System Information. Java, user, time, runtime properties, etc.
(file.isDirectory() && file.getName().startsWith( "branched-" ) ) )              {                  File dest = new File( oldDir, file.getName() );                  if ( !file.renameTo( dest ) )
if (mod.getModuleActivator() != null)       mod.getModuleActivator().willStop();     } catch (Throwable t) {      log.warn("Unable to call module's Activator.willStop() method", t);     }
rng.nextBytes(bytes);      ByteBuffer littleEndian = ByteBuffer.wrap(bytes).order(ByteOrder.LITTLE_ENDIAN);      ByteBuffer bigEndian = ByteBuffer.wrap(bytes).order(ByteOrder.BIG_ENDIAN);     assertEquals(hashFunction.hashBytes(littleEndian), hashFunction.hashBytes(littleEndian));      assertEquals(ByteOrder.LITTLE_ENDIAN, littleEndian.order());     assertEquals(ByteOrder.BIG_ENDIAN, littleEndian.order());    }    static void assertHasherByteBufferPreservesByteOrder(HashFunction hashFunction) {
* @return nullToZero       */      private static Long nullToZero(Long value) {         return Objects.isNull(value) ? value : 0;    }      /**
}));      }     protected <T> Function<String, Optional<T>> createRemoteInterfaceProvider(Class<T> interfaceClass) {          return (nodeId) -> {              try {                  final Node targetNode = nodeService.byNodeId(nodeId);
private final PassFactory extractPrototypeMemberDeclarations =        new PassFactory("extractPrototypeMemberDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}   @Test  public void testHealth() throws Exception { String url = "http:    System.out.println(url);    ResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);
public interface TwitterStreamingEndpointBuilder              extends                  EndpointConsumerBuilder {          default AdvancedTwitterStreamingEndpointBuilder advanced() {
public interface AdvancedAtomixSetEndpointBuilder              extends                  AdvancedAtomixSetEndpointConsumerBuilder, AdvancedAtomixSetEndpointProducerBuilder {          default AtomixSetEndpointBuilder basic() {
}    public void glTexParameteriv (int target, int pname, IntBuffer params) {    GL11.glTexParameter(target, pname, params);    }    public void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, IntBuffer data) {    GL11.glTexSubImage(target, level, xoffset, yoffset, width, height, format, type, data);    }    public void glTexParameteri (int target, int pname, IntBuffer params) {    GL11.glTexParameter(target, pname, params);    }    public void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, IntBuffer data) {    GL11.glTexSubImage(target, level, xoffset, yoffset, width, height, format, type, data);    }    public void glTexParameteri (int target, int pname, IntBuffer params) {    GL11.glTexParameter(target, pname, params);    }    public void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, IntBuffer data) {    GL11.glTexSubImage(target, level, xoffset, yoffset, width, height, format, type, data);    }    public void glTexParameteri (int target, int pname, IntBuffer params) {    GL11.glTexParameter(target, pname, params);    }    public void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, IntBuffer data) {    GL11.glTexSubImage(target, level, xoffset, yoffset, width, height, format, type, data);    }    public void glTexParameteri (int target, int pname, IntBuffer params) {    GL11.glTexParameter(target, pname, params);    }    public void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, IntBuffer data) {    GL11.gl
* @param importGroup           *        import group.           */         public void setImportGroup(String importGroup) {              this.importGroup = importGroup;          }
@Parameter(value = "default_message_output_class")      private String defaultMessageOutputClass = "";     @Parameter(value = "collector_expiration_threshold", validator = PositiveIntegerValidator.class)      private Duration collectorExpirationThreshold = Duration.days(14);     @Parameter(value = "collector_inactive_threshold", validator = PositiveIntegerValidator.class)      private Duration collectorInactiveThreshold = Duration.minutes(1);      @Parameter(value = "dashboard_widget_default_cache_time", validator = PositiveDurationValidator.class)
private final PersistenceProvider persistenceProvider;      private final PersistenceUnitMetadata pu;     private EntityManagerFactory entityManagerFactory;      public PersistenceUnitService(final PersistenceUnitMetadata pu, final PersistenceProviderAdaptor persistenceProviderAdaptor, final PersistenceProvider persistenceProvider) {          this.pu = pu;
};       private final PassFactory closureCheckGetCssName =        new PassFactory("checkMissingGetCssName", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}   }   public void addBlock(int fileId, int blockIndex, long blockLength) {      if (INACTIVE) {        return;      }
* Rewrite instance methods as static methods, to make them easier     * to inline.     */   private final PassFactory devirtualizePrototypeMethods =        new PassFactory("devirtualizePrototypeMethods", true) {      protected CompilerPass createInternal(AbstractCompiler compiler) {
}    public void glGetBufferParameteriv (int target, int pname, IntBuffer params) {    GL15.glGetBufferParameter(target, pname, params);    }    public int glGetError () {
*       * @return the message.       */     @Message(id = 10863, value = "%s is not a valid URL -- %s")      String invalidUrl(String url, String message);      /**
}    public void glGetTexParameterfv (int target, int pname, FloatBuffer params) {    GL11.glGetTexParameter(target, pname, params);    }    public void glGetTexParameteriv (int target, int pname, IntBuffer params) {    GL11.glGetTexParameter(target, pname, params);    }    public int glGetUniformLocation (int program, String name) {
}      static long combineToLong(int x, int y) {         return ((long) x << 32) | ((long) y & 0xFFFFFFFL);      }      static int extractInt(long value, boolean lowerBits) {         return ((int) value << 32) | ((int) y & 0xFFFFFFFL);      }      static long combineToLong(int x, int y) {         return ((long) x << 32) | ((long) y & 0xFFFFFFFL);      }      static int extractInt(long value, boolean lowerBits) {         return ((int) value << 32) | ((int) y & 0xFFFFFFFL);      }      static long combineToLong(int x, int y) {         return ((long) x << 32) | ((long) y & 0xFFFFFFFL);      }      static int extractInt(long value, boolean lowerBits) {         return ((int) value << 32) | ((int) y & 0xFFFFFFFL);      }      static long combineToLong(int x, int y) {         return ((long) x << 32) | ((long) y & 0xFFFFFFFL);      }      static int extractInt(long value, boolean lowerBits) {         return ((int) value << 32) | ((int) y & 0xFFFFFFFL);      }      static long combineToLong(int x, int y) {         return ((long) x << 32) | ((long) y & 0xFFFFFFFL);      }      static int extractInt(long value, boolean lowerBits) {         return ((int) value << 32) | ((int) y & 0xFFFFFFFL);      }      static long combineToLong(int x, int y) {         return ((long) x << 32) | ((long) y & 0xFFFFFFFL);      }      static int extractInt(long value, boolean lowerBits) {         return ((int) value << 32) | ((int) y & 0xFFFFFFFL);      }      static long combineToLong(int x, int y) {         return ((long) x << 32) | ((long) y & 0xFFFFFFFL);      }      static int extractInt(long value, boolean lowerBits) {         return ((int) value << 32) | ((int) y & 0xFFFFFFFL);      }      static long combineToLong(int x, int y)
* This call is only made by the IO thread.         */      private void unschedule() {         if (dirtyOutputBuffer()) {              registerOp(SelectionKey.SelectionKey.WRITE);
}       private class GlobalTypeResolver implements HotHotCompilerPass {      private final AbstractCompiler compiler;      GlobalTypeResolver(AbstractCompiler compiler) {
public int read(String table, String key, Set<String> fields,              HashMap<String, ByteIterator> result) {          if (fields == null) {             StringByteIteartor.putAllAsByteIterators(result, jedis.hgetAll(key));          }          else {              String[] fieldArray = (String[])fields.toArray(new String[fields.size()]);
}          if (result && isStatisticsEnabled()) {              statistics.increaseCacheRemovals(1);             statistics.addRemoveTimeNano(System.nanoTime() - start);              if (hitCount == 1) {                  statistics.increaseCacheHits(hitCount);              } else {
Node node1 = Node.newString(Token.NAME, "f");      node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));      Node node2 = Node.newString(Token.NAME, "f");     assertFalse(node1.checkTreeTypeAwareEqualsSilent(node2));    }    public void testVarArgs1() {
}       private final HotSwapPassFactory checkControlStructures =        new HotSwapPassFactory("checkControlStructures", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
});          assertThat(args.didExit(), is(false));         assertThat(args.getSource().next().getFile(), is("/home/source"));          assertThat(args.getTargetDirectory(), is(theFile("/home/target")));          assertThat(args.getTargetPackage(), is(nullValue()));          assertThat(args.isGenerateBuilders(), is(false));
}    };   final PassFactory nameMappedAnonymousFunctions =        new PassFactory("nameAnonymousFunctions", true) {      @Override      protected CompilerPass createInternal(final final Compiler compiler) {
};       private final HotSwapPassFactory checkTypes =        new HotSwapPassFactory("checkTypes", false) {      @Override
*/   @Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)  public SortedMap<String, String> getSystemVariables() throws APIException;   /**    * Get a map of all the System Information. Java, user, time, runtime properties, etc.
public interface CMISEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedCMISEndpointProducerBuilder advanced() {
* Alias string literals with global variables, to avoid creating lots of     * transient objects.     */   private final PassFactory aliasStrings =        new PassFactory("aliasStrings", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       private final PassFactory denormalize =        new PassFactory("denormalize", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
taskManagerQueryServiceGatewaysFuture.whenCompleteAsync(       (Collection<Tuple2<ResourceID, String>> queryServiceGateways, Throwable throwable) -> {        if (throwable != null) {        LOG.warn("Requesting TaskManager's path for query services failed.", throwable);        } else {         List<String> taskManagersToRetain = queryServiceGateways          .stream()
*       * @return the message.       */     @Message(id = 10841, value = "Exception getting result from server %s: %s")      String exceptionAwaitingResultFromServer(ServerIdentity server, String message);      /**
final PaginatedList<TestDTO> page3 = dbService.findPaginatedWithQueryFilterAndSort(DBQuery.empty(), filter, DBSort.asc("title"), 3, 2);          assertThat(page3.pagination().getCount()).isEqualTo(1);         assertThat(page3.pagination().getGlobalTotal()).isEqualTo(7);          assertThat(page3.delegate())                  .extracting("title")                  .containsExactly("hello6");
public interface SoroushBotEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedSoroushBotEndpointProducerBuilder advanced() {
* @since Twitter4J 2.0.1       */      public ResponseList<Status> getFavorites(int page) throws TwitterException {         return Status.constructStatuses(get(getBaseURL() + "favorites.json", "page", Integer.valueOf(page), true));      }      /**
} else if (e instanceof TimeoutException) {      logger.debug("[{}]: Websocket timeout error", connection.getHost());     } else {     logger.error("[{}]: Websocket error: {}", connection.getHost(), e.getMessage());     }    }
*       * @return the message.       */     @Message(id = 10861, value = "Operation targets host %s but that host is not registered")      String invalidOperationTargetHost(String name);      /**
}    };   final PassFactory operaCompoundAssignFix =        new PassFactory("operaCompoundAssignFix", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
+ ") match admins<-[:PART_OF*0..]-group<-[:MEMBER_OF]-user return user.name, group.name";          gen.get().addSnippet( "query-get-admins", createCypherSnippet( query ) );          String result = engine.execute( query )                 .toString();          assertTrue( result.contains("Engin"));          gen.get().addSnippet( "o-query-get-admins", createQueryResultSnippet( result ) );
}   public void glPolygonOffset (float factor, float units) {   GL.glPolygonOffsetEXT(factor, units);   }   public void glReadPixels (int x, int y, int width, int height, int format, int type, Buffer pixels) {
}   @ImportAutoConfiguration(classes = ThymeleafAutoConfiguration.class)  @UnrelatedOne   static class ImportAutoConfigurationWithItemsTwo {   }
}   public SortedMap<String, Histogram> getHistograms(MetricFilter filter) {   return adaptMetrics(Histogram.class, reg.getCounters(transformFilter(filter)));   }   public SortedMap<String, Meter> getMeters() {
* @param timestamp the timestamp of the file       */      void put(String fileName, long timestamp) {         details.put(fileName, Long.toString(timestamp));      }      /**
};       private final PassFactory inlineFunctions =        new PassFactory("inlineFunctions", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return an {@link IllegalStateException} for the error.       */     @Message(id = 10871, value = "Unknown server %s")      IllegalStateException unknownServer(ServerIdentity server);      /**
LsCommand.STATE_FILE_IN_MEMORY, testUser, testUser, files[2].getPermission(),          files[2].isFolder());      expected +=         getLsResultStr("/testRoot/testDir", files[3].getCreationTimeMs(), 0, LsCommand.STATE_FOLDER,              testUser, testUser, files[3].getPermission(), files[3].isFolder());      expected += getLsResultStr("/testRoot/testDir/testFileB", files[4].getCreationTimeMs(), 20,          LsCommand.STATE_FILE_IN_MEMORY, testUser, testUser, files[4].getPermission(),
String trustStore = getProperty(properties, "trustStore", keyStore);          String trustStorePassword = getProperty(properties, "trustStorePassword", keyStorePassword);         String keyManagerAlgorithm = properties.getProperty("keyManagerAlgorithm", TrustManagerFactory.getDefaultAlgorithm());          String trustManagerAlgorithm = properties.getProperty("trustManagerAlgorithm", TrustManagerFactory.getDefaultAlgorithm());          String protocol = properties.getProperty("protocol", "TLS");
String other = null;      if (args.length > 1)        other = (String) args[1];       recursivelyHandle(SaveHandler.class, (OpenmrsObject) mainArgument, other);
assertInvalidFunction("ARRAY_DISTINCT(ARRAY [])", FUNCTION_NOT_FOUND);      }     @Test void testDistinct()              throws Exception      {          assertFunction("ARRAY_DISTINCT(ARRAY [])", new ArrayType(UNKNOWN), ImmutableList.of());      }     @Test void testDistinct()              throws Exception      {          assertInvalidFunction("ARRAY_DISTINCT(ARRAY [])", FUNCTION_NOT_FOUND);      }     @Test void testDistinct()              throws Exception      {          assertFunction("ARRAY_DISTINCT(ARRAY [])", new ArrayType(UNKNOWN), ImmutableList.of());      }     @Test void testDistinct()              throws Exception      {          assertInvalidFunction("ARRAY_DISTINCT(ARRAY [])", FUNCTION_NOT_FOUND);      }     @Test void testDistinct()              throws Exception      {          assertInvalidFunction("ARRAY_DISTINCT(ARRAY [])", FUNCTION_NOT_FOUND);      }     @Test void testDistinct()              throws Exception      {          assertInvalidFunction("ARRAY_DISTINCT(ARRAY [])", FUNCTION_NOT_FOUND);      }     @Test void testDistinct()              throws Exception      {          assertInvalidFunction("ARRAY_DISTINCT(ARRAY [])", FUNCTION_NOT_FOUND);      }     @Test void testDistinct()              throws Exception      {          assertInvalidFunction("ARRAY_DISTINCT(ARRAY [])", FUNCTION_NOT_FOUND);      }     @Test void testDistinct()              throws Exception      {          assertInvalidFunction("ARRAY_DISTINCT(ARRAY [])", FUNCTION_NOT_FOUND);      }     @Test void testDistinct()              throws Exception      {          assertInvalidFunction("ARRAY_DISTINCT(ARRAY [])", FUNCTION_NOT_FOUND);      }     @Test void testDistinct()              throws Exception      {          assertInvalidFunction("ARRAY_DISTINCT(ARRAY [])", FUNCTION_NOT_FOUND);      }     @Test void testDistinct()              throws Exception      {          assertInvalidFunction("ARRAY_DISTINCT(ARRAY [])", FUNCTION_NOT_FOUND);      }     @Test void testDistinct()              throws Exception      {          assertInvalidFunction("ARRAY_DISTINCT(ARRAY [])", FUNCTION_NOT_FOUND);      }     @Test void testDistinct()              throws Exception      {          assertInvalidFunction("ARRAY_DISTINCT(ARRAY [])", FUNCTION_NOT_FOUND);      }     @Test void testDistinct()              throws
}    public Texture (FileHandle file, Format format, boolean useMipMaps) {    if (file.name().contains(".etc1")) {      create(new ETC1TextureData(file, useMipMaps));    } else {      create(new FileTextureData(file, null, format, useMipMaps));    }
return secret;    }   String getPercentEncodedKey() {      return percentEncodedKey;    }
}    public boolean mouseMoved (int screenX, int screenY) {    InputProcessor[] items = processors.begin();     try {      for (int i = 0, n = processors.size; i < n; i++)      if (items[i].mouseMoved(screenX, screenY)) return true; } finally {      processors.end();     }
* @author Stephane Nicoll   * @author Dominic Gunn   * @author András Deák   */  public class LiquibautAutoTests {
log.debug("Current thread: " + Thread.currentThread());      log.debug("Creating the encounter object");     }    Context.getEncounterService().createEncounter(encounter);
};       private final PassFactory ignoreCajaProperties =        new PassFactory("ignoreCajaProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public interface DirectVmEndpointBuilder              extends                  DirectVmEndpointConsumerBuilder, DirectVmEndpointProducerBuilder {          default AdvancedDirectVmEndpointBuilder advanced() {
public void testBeanRecipientListParallelTimeout() throws Exception {          MockEndpoint mock = getMockEndpoint("mock:result");      mock.expectedBodiesReceived("BC");          template.sendBody("direct:start", "Hello");
};       private final PassFactory objectPropertyStringPreprocess =        new PassFactory("ObjectPropertyStringPreprocess", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       private final PassFactory objectPropertyStringPreprocess =        new PassFactory("ObjectPropertyStringPreprocess", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public interface CouchbaseEndpointBuilder              extends                  CouchbaseEndpointConsumerBuilder, CouchbaseEndpointProducerBuilder {          default AdvancedCouchbaseEndpointBuilder advanced() {
*       * @return the error message       */     @Message(id = 10836, value = SERVER_GROUP + " expects one and only one child: %s")      String serverGroupExpectsSingleChild(String rolloutPlan);      /**
grantGlobal(TEST_UTIL, toGroupEntry(GROUP_READ), Permission.Action.READ);      grantGlobal(TEST_UTIL, toGroupEntry(GROUP_WRITE), Permission.Action.WRITE);     assertEquals(5, AccessControlLists.getTablePermissions(conf, TEST_TABLE).size());      try {       assertEquals(5, AccessControlClient.getUserPermissions(systemUserConnection,            TEST_TABLE.toString()).size());      } catch (Throwable e) {        LOG.error("error during call of AccessControlClient.getUserPermissions. ", e);
ModelNode oldResponse = response;                  try {                      flags = EnumSet.noneOf(Flag.class);                     response = step.response;                      ModelNode newOperation = operation = step.operation;                      modelAddress = PathAddress.pathAddress(newOperation.get(ADDRESS));                      step.handler.execute(this, newOperation);
* Process smart name processing - removes unused classes and does referencing     * starting with minimum set of names.     */   final PassFactory smartNamePass =        new PassFactory("smartNamePass", true) {      protected CompilerPass createInternal(final final Compiler compiler) {
* @see <a href="http:       */      public PagableResponseList<twitter4j.List> getUserLists(String user, long cursor) throws TwitterException {         return twitter4j.List.constructListOfLists(get(getApiBaseURL() + V1 +                  user + "/lists.json?cursor=" + cursor, true));      }
this.source = checkNotNull(source, "source");      this.classMatcher = checkNotNull(classMatcher, "classMatcher");     this.methodMatcher = checkNotNull(methodMatcher, "methodMatcher");     this.interceptors = ImmutableList.of(interceptors);    }    public Object getSource() {
return Sets.newHashSet();      }     public int total() {          try {             return Cache.getOrElse(TOTAL_CNT_CACHE_KEY, new Callable<Integer>() {                  @Override                 public Integer call() throws Exception {                      MessageCountResponse response = api.get(MessageCountResponse.class);                      return response.events;                  }
}    public void glUniform3fv (int location, int count, FloatBuffer v) {    GL20.glUniform3(location, v);    }    public void glUniform3fv (int location, int count, float[] v, int offset) {    GL20.glUniform3(location, toFloatBuffer(v, offset, count * 3));    }    public void glUniform3i (int location, int x, int y, int z) {
private boolean isMissing(Map<String, Object> arguments,     OperationParameter parameter) {    if (!parameter.isMandatory()) {    return true;    }    return arguments.get(parameter.getName()) == null;   }
if (isPutSucceed) {                  statistics.increaseCachePuts(1);                  statistics.addPutTimeNano(System.nanoTime() - start);              }              if (getValue) {                  if (oldValueNull) {
"1: " + getCheckMessage(MSG_KEY_MISMATCH),          }         verify(checkConfig, getPath("InputPackageDeclarationDiffDirectoryAtParent.java"), expected);      }      @Test
};       private final PassFactory inlineVariables =        new PassFactory("inlineVariables", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* @param hostName   the name of the host.       */      @LogMessage(level = Level.WARN)     @Message(id = 10880, value = "Interrupted awaiting final response from server %s on host %s")      void interruptedAwaitingFinalResponse(String serverName, String hostName);      /**
}          doRemoveRecord(key, source);          if (isEventsEnabled()) {             publishEvent(createCacheExpiredEvent(key, toEventData(record), CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,                                                   origin, IGNORE_COMPLETION));          }          return null;
};       private final HotSwapPassFactory checkAccessControls =        new HotSwapPassFactory("checkAccessControls", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
status = ufs.getStatus(ufsUri);                } catch (Exception e) {                  throw new IOException(String.format("Cannot sync UFS directory %s: %s.", ufsUri,                     e.getMessage()), e);                }                if (status.isDirectory()) {                  throw new InvalidPathException(String.format(status.isFile() ? "Cannot sync UFS directory %s: %s." : ufsUri,                     status.isFile() ? "Cannot sync UFS directory %s: %s." : ufsUri,                     status.isDirectory() ? "Cannot sync UFS directory %s: %s." : ufsUri,                     status.isFile() ? "Cannot sync UFS directory %s: %s." : ufsUri,                     status.isDirectory() ? "Cannot sync UFS directory %s: %s." : ufsUri,                     status.isFile() ? "Cannot sync UFS directory %s: %s." : ufsUri,                     status.isDirectory() ? "Cannot sync UFS directory %s: %s." : ufsUri,                     status.isFile() ? "Cannot sync UFS directory %s: %s." : ufsUri,                     status.isDirectory() ? "Cannot sync UFS directory %s: %s." : ufsUri,                     status.isFile() ? "Cannot sync UFS directory %s: %s." : ufsUri,                     status.isDirectory() ? "Cannot sync UFS directory %s: %s." : ufsUri,                     status.isFile() ? "Cannot sync UFS directory %s: %s." : ufsUri,                     status.isDirectory() ? "Cannot sync UFS directory %s: %s." : ufsUri,                     status.isFile() ? "Cannot sync UFS directory %s: %s." : ufsUri,                     status.isDirectory() ? "Cannot sync UFS directory %s: %s." : ufsUri,                     status.isFile() ? "Cannot sync UFS directory %s: %s." : ufsUri,                     status.isDirectory() ? "Cannot sync UFS directory %s: %s." : ufsUri,                     status.isFile() ? "Cannot sync UFS directory %s: %s." : ufsUri,                     status.is
};       private final PassFactory checkStrictMode =        new PassFactory("checkStrictMode", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}      public List<BacklogTracerEventMessage> dumpAllTracedMessages() {         List<BacklogTracerEventMessage> answer = new ArrayList<>();          answer.addAll(queue);          if (isRemoveOnDump()) {              queue.clear();
};       private final PassFactory aliasKeywords =        new PassFactory("aliasKeywords", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
newConfig.setEvictionPolicy(mapConfig.getEvictionPolicy());          newConfig.setEvictionPercentage(mapConfig.getEvictionPercentage());          newConfig.setReadBackupData(mapConfig.isReadBackupData());         newConfig.setBackupCount(mapConfig.getTotalBackupCount());          newConfig.setAsyncBackupCount(mapConfig.getAsyncBackupCount());          newConfig.setMaxSizeConfig(mapConfig.getMaxSizeConfig());          service.getContainer(mapName).setMapConfig(newConfig.getAsReadOnly());
};       private final PassFactory inlineSimpleMethods =        new PassFactory("inlineSimpleMethods", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
});          assertThat(args.didExit(), is(false));         assertThat(args.getSource().next().getFile(), is("/home/source"));          assertThat(args.getTargetDirectory(), is(theFile("/home/target")));          assertThat(args.getTargetPackage(), is("mypackage"));          assertThat(args.isGenerateBuilders(), is(true));
public interface AdvancedLdapEndpointBuilder              extends                  EndpointProducerBuilder {          default LdapEndpointBuilder basic() {
*       * @return the error message       */     @Message(id = 10836, value = SERVER_GROUP + " expects one and only one child: %s")      String serverGroupExpectsSingleChild(String rolloutPlan);      /**
case MotionEvent.ACTION_DOWN:      case MotionEvent.ACTION_POINTER_DOWN:  realPointerIndex = input.getFreePointerIndex();     if (realPointerIndex > AndroidInput.NUM_TOUCHES) break;       input.realId[realPointerIndex] = pointerId;       x = (int) event.getX(pointerIndex);       y = (int) event.getY(pointerIndex);
