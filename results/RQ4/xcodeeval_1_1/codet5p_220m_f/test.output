<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of PHPExifTool.  *  * (c) 2012 Romain Neutron <imprec@gmail.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace PHPExiftool\Driver\Tag\DICOM;  use JMS\Serializer\Annotation\ExclusionPolicy; use PHPExiftool\Driver\AbstractTag;  /**  * @ExclusionPolicy("all")  */ class Color extends AbstractTag {      protected $Id = '0018,0018';      protected $Name = 'Color';      protected $FullName = 'DICOM::Main';      protected $GroupName = 'DICOM';      protected $g0 = 'DICOM';      protected $g1 = 'DICOM';      protected $g2 = 'Image';      protected $Type = '?';      protected $Writable = false;      protected $Description = 'Color';  } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializer; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializerProvider; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.
<?php /**  * Zend Framework  *  * LICENSE  *  * This source file is subject to the new BSD license that is bundled  * with this package in the file LICENSE.txt.  * It is also available through the world-wide-web at this URL:  * http://framework.zend.com/license/new-bsd  * If you did not receive a copy of the license and are unable to  * obtain it through the world-wide-web, please send an email  * to license@zend.com so we can send you a copy immediately.  *  * @category   Zend  * @package    Zend_Service  * @subpackage DeveloperGarden  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  * @version    $Id$  */  /**  * @see Zend_Service_DeveloperGarden_Exception  */ require_once 'Zend/Service/DeveloperGarden/Exception.php';  /**  * @category   Zend  * @package    Zend_Service  * @subpackage DeveloperGarden  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  */ class Zend_Service_DeveloperGarden_Exception extends Zend_Service_DeveloperGarden_Exception { } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.product.name',                 'attr' => array(                     'class' => 'form-control',                 ),             ))             ->add('price', 'number', array(                 'label' => 'sylius.form.product.price',                 'attr' => array(                     'class' => 'form-control',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
﻿// Copyright (c) Microsoft Corporation. All rights reserved. // Licensed under the MIT License. See License.txt in the project root for license information. // // Copyright (c) Microsoft Corporation. All rights reserved. // Licensed under the MIT License. See License.txt in the project root for license information. // // Copyright (c) Microsoft Corporation. All rights reserved. // Licensed under the MIT License. See License.txt in the project root for license information. // // Copyright (c) Microsoft Corporation. All rights reserved. // Licensed under the MIT License. See License.txt in the project root for license information. // // Copyright (c) Microsoft Corporation. All rights reserved. // Licensed under the MIT License. See License.txt in the project root for license information. // // Copyright (c) Microsoft Corporation. All rights reserved. // Licensed under the MIT License. See License.txt in the project root for license information. // // Copyright (c) Microsoft Corporation. All rights reserved. // Licensed under the MIT License. See License.txt in the project root for license information. // // Copyright (c) Microsoft Corporation. All rights reserved. // Licensed under the MIT License. See License.txt in the project root for license information. // // Copyright (c) Microsoft Corporation. All rights reserved. // Licensed under the MIT License. See License.txt in the project root for license information. // // Copyright (c) Microsoft Corporation. All rights reserved. // Licensed under the MIT License. See License.txt in the project root for license information. // // Copyright (c) Microsoft Corporation. All rights reserved. // Licensed under the MIT License. See License.txt in the project root for license information. // // Copyright (c) Microsoft Corporation. All rights reserved. // Licensed under the MIT License. See License.txt in the project root for license information. // // Copyright (c) Microsoft Corporation. All rights reserved. // Licensed under the MIT License. See License.txt in the project root for license information. //
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializer; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializerProvider; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */ package org.apache.beam.runners.core;  import static org.junit.Assert.assertEquals; import static org.junit.Assert.assertFalse; import static org.junit.Assert.assertNotNull; import static org.junit.Assert.assertNull; import static org.junit.Assert.assertTrue; import static org.junit.Assert.fail;  import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Iterables; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import com.google.common.util.concurrent.Futures; import com.google.common.util.concurrent.ListenableFuture; import com.google.common.util.concurrent.ListeningExecutorService; import com.google.common.util.concurrent.MoreExecutors; import com.google.common.util.concurrent.ThreadFactoryBuilder; import com.google.common.util.concurrent.TimeUnit; import com.google.common.util.concurrent.TimeoutException; import com.google.common.util.concurrent.TimeoutException.
<?php  /*  * This file is part of PHPExifTool.  *  * (c) 2012 Romain Neutron <imprec@gmail.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace PHPExiftool\Driver\Tag\DICOM;  use JMS\Serializer\Annotation\ExclusionPolicy; use PHPExiftool\Driver\AbstractTag;  /**  * @ExclusionPolicy("all")  */ class ImageWidth extends AbstractTag {      protected $Id = '0018,0018';      protected $Name = 'ImageWidth';      protected $FullName = 'DICOM::Main';      protected $GroupName = 'DICOM';      protected $g0 = 'DICOM';      protected $g1 = 'DICOM';      protected $g2 = 'Image';      protected $Type = '?';      protected $Writable = false;      protected $Description = 'Image Width';  } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializer; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializerProvider; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.data
<?php  /*  * This file is part of PHPExifTool.  *  * (c) 2012 Romain Neutron <imprec@gmail.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace PHPExiftool\Driver\Tag\DICOM;  use JMS\Serializer\Annotation\ExclusionPolicy; use PHPExiftool\Driver\AbstractTag;  /**  * @ExclusionPolicy("all")  */ class Speed extends AbstractTag {      protected $Id = '0018,0018';      protected $Name = 'Speed';      protected $FullName = 'DICOM::Main';      protected $GroupName = 'DICOM';      protected $g0 = 'DICOM';      protected $g1 = 'DICOM';      protected $g2 = 'Image';      protected $Type = '?';      protected $Writable = false;      protected $Description = 'Speed';  } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */  package org.apache.druid.query.aggregation;  import com.fasterxml.jackson.annotation.JsonCreator; import com.fasterxml.jackson.annotation.JsonProperty; import com.fasterxml.jackson.annotation.JsonTypeInfo; import com.fasterxml.jackson.annotation.JsonTypeInfo.As; import com.fasterxml.jackson.annotation.JsonTypeInfo.Id; import com.fasterxml.jackson.annotation.JsonTypeName; import com.google.common.base.Preconditions; import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Iterables; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import org.apache.druid.java.util.common.ISE; import org.apache.druid.java.util.common.logger.Logger; import org.apache.druid.java.util.common.logger.LoggerFactory; import org.apache.druid.java.util.common.guava.Sequence; import org.apache.druid.java.util
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
﻿using System; using System.Collections.Generic; using System.Linq; using System.Text; using System.Threading.Tasks; using System.Windows; using System.Windows.Controls; using System.Windows.Data; using System.Windows.Documents; using System.Windows.Input; using System.Windows.Media; using System.Windows.Media.Imaging; using System.Windows.Navigation; using System.Windows.Shapes; using System.Windows.Shell; using System.IO; using System.Xml; using System.Xml.Linq; using System.Collections; using System.Collections.Generic; using System.Collections.ObjectModel; using System.Collections.Specialized; using System.ComponentModel; using System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema; using System.ComponentModel.DataAnnotations.Properties; using System.Data; using System.Data.Entity; using System.Data.Entity.Infrastructure; using System.Data.Entity.ModelConfiguration; using System.Data.Entity.Migrations; using System.Data.Entity.Migrations.Infrastructure; using System.Linq.Expressions; using System.Linq.Expressions.Linq; using System.Web; using System.Web.Mvc; using System.Web.Routing; using Microsoft.AspNet.Identity; using Microsoft.AspNet.Identity.EntityFramework; using Microsoft.AspNet.Identity.Owin; using Microsoft.Owin; using Microsoft.Owin.Security; using Microsoft.Owin.Security.Cookies; using Microsoft.Owin.Security.Google; using Microsoft.Owin.Security.Facebook; using Microsoft.Owin.Security.Facebook.OAuth; using Microsoft.Owin.Security.Google.OAuth; using Microsoft.Owin.Security.Facebook.OAuth.Providers; using Microsoft.Owin.Security.OAuth.Providers.OAuth; using Microsoft.Owin.Security.OAuth.Provider; using Microsoft.Owin.Security.Twitter; using Microsoft.Owin.Security.Twitter.OAuth; using Microsoft.Owin.Security.
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.product.name',                 'required' => false,                 'attr' => array(                     'class' => 'form-control',                 ),             ))             ->add('price', 'text', array(                 'label' => 'sylius.form.product.price',                 'required' => false,                 'attr' => array(                     'class' => 'form-control',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */  package org.apache.druid.query.aggregation;  import com.fasterxml.jackson.annotation.JsonCreator; import com.fasterxml.jackson.annotation.JsonProperty; import com.fasterxml.jackson.annotation.JsonTypeInfo; import com.fasterxml.jackson.annotation.JsonTypeInfo.As; import com.fasterxml.jackson.annotation.JsonTypeInfo.Id; import com.fasterxml.jackson.annotation.JsonTypeName; import com.google.common.base.Preconditions; import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Iterables; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import org.apache.druid.java.util.common.ISE; import org.apache.druid.java.util.common.logger.Logger; import org.apache.druid.java.util.common.logger.LoggerFactory; import org.apache.druid.java.util.common.guava.Sequence; import org.apache.druid.java.util
<?php  /*  * This file is part of PHPExifTool.  *  * (c) 2012 Romain Neutron <imprec@gmail.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace PHPExiftool\Driver\Tag\DICOM;  use JMS\Serializer\Annotation\ExclusionPolicy; use PHPExiftool\Driver\AbstractTag;  /**  * @ExclusionPolicy("all")  */ class Color extends AbstractTag {      protected $Id = '0018,0018';      protected $Name = 'Color';      protected $FullName = 'DICOM::Main';      protected $GroupName = 'DICOM';      protected $g0 = 'DICOM';      protected $g1 = 'DICOM';      protected $g2 = 'Image';      protected $Type = '?';      protected $Writable = false;      protected $Description = 'Color';  } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializer; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializer; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.data.accessors.ITupleReference; import org.apache.hyrack
<?php  /*  * This file is part of PHPExifTool.  *  * (c) 2012 Romain Neutron <imprec@gmail.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace PHPExiftool\Driver\Tag\DICOM;  use JMS\Serializer\Annotation\ExclusionPolicy; use PHPExiftool\Driver\AbstractTag;  /**  * @ExclusionPolicy("all")  */ class Color extends AbstractTag {      protected $Id = '0018,0018';      protected $Name = 'Color';      protected $FullName = 'DICOM::Main';      protected $GroupName = 'DICOM';      protected $g0 = 'DICOM';      protected $g1 = 'DICOM';      protected $g2 = 'Image';      protected $Type = '?';      protected $Writable = false;      protected $Description = 'Color';  } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.product.name',                 'attr' => array(                     'class' => 'form-control',                 ),             ))             ->add('price', 'number', array(                 'label' => 'sylius.form.product.price',                 'attr' => array(                     'class' => 'form-control',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */ package org.apache.beam.runners.core;  import static org.junit.Assert.assertEquals; import static org.junit.Assert.assertFalse; import static org.junit.Assert.assertNotNull; import static org.junit.Assert.assertNull; import static org.junit.Assert.assertTrue; import static org.junit.Assert.fail;  import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Iterables; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import com.google.common.util.concurrent.Futures; import com.google.common.util.concurrent.ListenableFuture; import com.google.common.util.concurrent.ListeningExecutorService; import com.google.common.util.concurrent.MoreExecutors; import com.google.common.util.concurrent.ThreadFactoryBuilder; import com.google.common.util.concurrent.ThreadFactory; import com.google.common.util.concurrent.TimeUnit; import com.google.common.util.concurrent.TimeoutException
<?php  /*  * This file is part of PHPExifTool.  *  * (c) 2012 Romain Neutron <imprec@gmail.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace PHPExiftool\Driver\Tag\DICOM;  use JMS\Serializer\Annotation\ExclusionPolicy; use PHPExiftool\Driver\AbstractTag;  /**  * @ExclusionPolicy("all")  */ class Color extends AbstractTag {      protected $Id = '0018,0018';      protected $Name = 'Color';      protected $FullName = 'DICOM::Main';      protected $GroupName = 'DICOM';      protected $g0 = 'DICOM';      protected $g1 = 'DICOM';      protected $g2 = 'Image';      protected $Type = '?';      protected $Writable = false;      protected $Description = 'Color';  } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.functions.IFunctionDescriptorProvider; import org.apache.asterix.om.types.ATypeTag; import org.apache.asterix.om.types.BuiltinType; import org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor; import org.apache.asterix.runtime.evaluators.base.IScalarEvaluator; import org.apache.asterix.runtime.evaluators.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.algebricks.runtime.
<?php  /*  * This file is part of the Symfony package.  *  * (c) Fabien Potencier <fabien@symfony.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace Symfony\Component\Form\Extension\Core\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface; use Symfony\Component\Validator\Constraints\NotBlank; use Symfony\Component\Validator\Constraints\Email; use Symfony\Component\Validator\Constraints\Length; use Symfony\Component\Validator\Constraints\Regex; use Symfony\Component\Validator\Constraints\NotBlank; use Symfony\Component\Validator\Constraint; use Symfony\Component\Validator\ConstraintValidator; use Symfony\Component\Validator\Exception\UnexpectedTypeException; use Symfony\Component\Validator\Validator; use Symfony\Component\Validator\ValidatorInterface;  /**  * @author Fabien Potencier <fabien@symfony.com>  */ class EmailType extends AbstractType {     /**      * {@inheritdoc}      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('subject', 'text', array(                 'label' => 'subject',                 'required' => false,             ))             ->add('message', 'textarea', array(                 'label' => 'message',                 'required' => false,             ))         ;     }      /**      * {@inheritdoc}      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Symfony\Component\Form\Extension\Core\Type\EmailType'         ));     }      /**      * {@inheritdoc}      */     public function getName()     {         return 'symfony_form_email';     }      /**      * {@inheritdoc}      */     public function getBlockPrefix()     {         return 'sym
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */  package org.apache.druid.query.aggregation;  import com.fasterxml.jackson.annotation.JsonCreator; import com.fasterxml.jackson.annotation.JsonProperty; import com.fasterxml.jackson.annotation.JsonTypeInfo; import com.fasterxml.jackson.annotation.JsonTypeInfo.As; import com.fasterxml.jackson.annotation.JsonTypeInfo.Id; import com.fasterxml.jackson.annotation.JsonTypeName; import com.google.common.base.Preconditions; import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Iterables; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import org.apache.druid.java.util.common.ISE; import org.apache.druid.java.util.common.logger.Logger; import org.apache.druid.java.util.common.logger.LoggerFactory; import org.apache.druid.java.util.common.util.concurrent.FutureCallback; import org.apache.druid.
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.product.name',                 'attr' => array(                     'class' => 'form-control',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.product.description',                 'attr' => array(                     'class' => 'form-control',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
<?php /**  * Zend Framework  *  * LICENSE  *  * This source file is subject to the new BSD license that is bundled  * with this package in the file LICENSE.txt.  * It is also available through the world-wide-web at this URL:  * http://framework.zend.com/license/new-bsd  * If you did not receive a copy of the license and are unable to  * obtain it through the world-wide-web, please send an email  * to license@zend.com so we can send you a copy immediately.  *  * @category   Zend  * @package    Zend_Service  * @subpackage DeveloperGarden  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  * @version    $Id$  */  /**  * @see Zend_Service_DeveloperGarden_Exception  */ require_once 'Zend/Service/DeveloperGarden/Exception.php';  /**  * @category   Zend  * @package    Zend_Service  * @subpackage DeveloperGarden  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  */ class Zend_Service_DeveloperGarden_Exception extends Zend_Service_DeveloperGarden_Exception { } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.product.name',                 'required' => false,             ))             ->add('price', 'number', array(                 'label' => 'sylius.form.product.price',                 'required' => false,             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
<?php  /*  * This file is part of PHPExifTool.  *  * (c) 2012 Romain Neutron <imprec@gmail.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace PHPExiftool\Driver\Tag\DICOM;  use JMS\Serializer\Annotation\ExclusionPolicy; use PHPExiftool\Driver\AbstractTag;  /**  * @ExclusionPolicy("all")  */ class Color extends AbstractTag {      protected $Id = '0018,0018';      protected $Name = 'Color';      protected $FullName = 'DICOM::Main';      protected $GroupName = 'DICOM';      protected $g0 = 'DICOM';      protected $g1 = 'DICOM';      protected $g2 = 'Image';      protected $Type = '?';      protected $Writable = false;      protected $Description = 'Color';  } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.product.name',                 'required' => false,             ))             ->add('price', 'number', array(                 'label' => 'sylius.form.product.price',                 'required' => false,             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'required' => false,             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'required' => false,             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.data.accessors.
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.data
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of PHPExifTool.  *  * (c) 2012 Romain Neutron <imprec@gmail.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace PHPExiftool\Driver\Tag\DICOM;  use JMS\Serializer\Annotation\ExclusionPolicy; use PHPExiftool\Driver\AbstractTag;  /**  * @ExclusionPolicy("all")  */ class Color extends AbstractTag {      protected $Id = '0018,0018';      protected $Name = 'Color';      protected $FullName = 'DICOM::Main';      protected $GroupName = 'DICOM';      protected $g0 = 'DICOM';      protected $g1 = 'DICOM';      protected $g2 = 'Image';      protected $Type = '?';      protected $Writable = false;      protected $Description = 'Color';  } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
<?php /**  * Zend Framework  *  * LICENSE  *  * This source file is subject to the new BSD license that is bundled  * with this package in the file LICENSE.txt.  * It is also available through the world-wide-web at this URL:  * http://framework.zend.com/license/new-bsd  * If you did not receive a copy of the license and are unable to  * obtain it through the world-wide-web, please send an email  * to license@zend.com so we can send you a copy immediately.  *  * @category   Zend  * @package    Zend_Service  * @subpackage DeveloperGarden  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  * @version    $Id$  */  /**  * @see Zend_Service_DeveloperGarden_Exception  */ require_once 'Zend/Service/DeveloperGarden/Exception.php';  /**  * @category   Zend  * @package    Zend_Service  * @subpackage DeveloperGarden  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  */ class Zend_Service_DeveloperGarden_Exception extends Zend_Service_DeveloperGarden_Exception { } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.product.name',                 'attr' => array(                     'class' => 'form-control',                 ),             ))             ->add('price', 'number', array(                 'label' => 'sylius.form.product.price',                 'attr' => array(                     'class' => 'form-control',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */  package org.apache.druid.query.aggregation;  import com.fasterxml.jackson.annotation.JsonCreator; import com.fasterxml.jackson.annotation.JsonProperty; import com.fasterxml.jackson.annotation.JsonTypeInfo; import com.fasterxml.jackson.annotation.JsonTypeInfo.As; import com.fasterxml.jackson.annotation.JsonTypeInfo.Id; import com.fasterxml.jackson.annotation.JsonTypeName; import com.google.common.base.Preconditions; import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import org.apache.druid.java.util.common.ISE; import org.apache.druid.java.util.common.logger.Logger; import org.apache.druid.java.util.common.logger.LoggerFactory; import org.apache.druid.java.util.common.guava.Sequence; import org.apache.druid.java.util.common.guava.Sequences; import org.apache
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.product.name',                 'required' => false,                 'attr' => array(                     'class' => 'form-control',                 ),             ))             ->add('price', 'text', array(                 'label' => 'sylius.form.product.price',                 'required' => false,                 'attr' => array(                     'class' => 'form-control',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.data
<?php  /*  * This file is part of PHPExifTool.  *  * (c) 2012 Romain Neutron <imprec@gmail.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace PHPExiftool\Driver\Tag\DICOM;  use JMS\Serializer\Annotation\ExclusionPolicy; use PHPExiftool\Driver\AbstractTag;  /**  * @ExclusionPolicy("all")  */ class Color extends AbstractTag {      protected $Id = '0018,0018';      protected $Name = 'Color';      protected $FullName = 'DICOM::Main';      protected $GroupName = 'DICOM';      protected $g0 = 'DICOM';      protected $g1 = 'DICOM';      protected $g2 = 'Image';      protected $Type = '?';      protected $Writable = false;      protected $Description = 'Color';  } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
<?php  /*  * This file is part of PHPExifTool.  *  * (c) 2012 Romain Neutron <imprec@gmail.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace PHPExiftool\Driver\Tag\DICOM;  use JMS\Serializer\Annotation\ExclusionPolicy; use PHPExiftool\Driver\AbstractTag;  /**  * @ExclusionPolicy("all")  */ class Color extends AbstractTag {      protected $Id = '0018,0018';      protected $Name = 'Color';      protected $FullName = 'DICOM::Main';      protected $GroupName = 'DICOM';      protected $g0 = 'DICOM';      protected $g1 = 'DICOM';      protected $g2 = 'Image';      protected $Type = '?';      protected $Writable = false;      protected $Description = 'Color';  } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.product.name',                 'attr' => array(                     'class' => 'form-control',                 ),             ))             ->add('price', 'number', array(                 'label' => 'sylius.form.product.price',                 'attr' => array(                     'class' => 'form-control',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'required' => false,             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'required' => false,             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of PHPExifTool.  *  * (c) 2012 Romain Neutron <imprec@gmail.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace PHPExiftool\Driver\Tag\DICOM;  use JMS\Serializer\Annotation\ExclusionPolicy; use PHPExiftool\Driver\AbstractTag;  /**  * @ExclusionPolicy("all")  */ class Color extends AbstractTag {      protected $Id = '0018,0018';      protected $Name = 'Color';      protected $FullName = 'DICOM::Main';      protected $GroupName = 'DICOM';      protected $g0 = 'DICOM';      protected $g1 = 'DICOM';      protected $g2 = 'Image';      protected $Type = '?';      protected $Writable = false;      protected $Description = 'Color';  } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */  package org.apache.druid.query.aggregation;  import com.fasterxml.jackson.annotation.JsonCreator; import com.fasterxml.jackson.annotation.JsonProperty; import com.fasterxml.jackson.annotation.JsonTypeInfo; import com.fasterxml.jackson.annotation.JsonTypeInfo.As; import com.fasterxml.jackson.annotation.JsonTypeInfo.Id; import com.fasterxml.jackson.annotation.JsonTypeName; import com.google.common.base.Preconditions; import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Iterables; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import org.apache.druid.java.util.common.ISE; import org.apache.druid.java.util.common.logger.Logger; import org.apache.druid.java.util.common.logger.LoggerFactory; import org.apache.druid.java.util.common.util.concurrent.ThreadFactoryBuilder; import org.apache.druid
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializer; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializerProvider; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'required' => false,             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'required' => false,             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of PHPExifTool.  *  * (c) 2012 Romain Neutron <imprec@gmail.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace PHPExiftool\Driver\Tag\DICOM;  use JMS\Serializer\Annotation\ExclusionPolicy; use PHPExiftool\Driver\AbstractTag;  /**  * @ExclusionPolicy("all")  */ class Color extends AbstractTag {      protected $Id = '0018,0018';      protected $Name = 'Color';      protected $FullName = 'DICOM::Main';      protected $GroupName = 'DICOM';      protected $g0 = 'DICOM';      protected $g1 = 'DICOM';      protected $g2 = 'Image';      protected $Type = '?';      protected $Writable = false;      protected $Description = 'Color';  } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.product.name',                 'required' => false,                 'attr' => array(                     'class' => 'form-control',                 ),             ))             ->add('price', 'text', array(                 'label' => 'sylius.form.product.price',                 'required' => false,                 'attr' => array(                     'class' => 'form-control',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'required' => false,             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'required' => false,             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
<?php  /*  * This file is part of PHPExifTool.  *  * (c) 2012 Romain Neutron <imprec@gmail.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace PHPExiftool\Driver\Tag\DICOM;  use JMS\Serializer\Annotation\ExclusionPolicy; use PHPExiftool\Driver\AbstractTag;  /**  * @ExclusionPolicy("all")  */ class Color extends AbstractTag {      protected $Id = '0018,0018';      protected $Name = 'Color';      protected $FullName = 'DICOM::Main';      protected $GroupName = 'DICOM';      protected $g0 = 'DICOM';      protected $g1 = 'DICOM';      protected $g2 = 'Image';      protected $Type = '?';      protected $Writable = false;      protected $Description = 'Color';  } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializer; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializerProvider; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.product.name',                 'attr' => array(                     'class' => 'form-control'                 )             ))             ->add('price', 'number', array(                 'label' => 'sylius.form.product.price',                 'attr' => array(                     'class' => 'form-control'                 )             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.data
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializer; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializerProvider; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.
<?php  /*  * This file is part of PHPExifTool.  *  * (c) 2012 Romain Neutron <imprec@gmail.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace PHPExiftool\Driver\Tag\DICOM;  use JMS\Serializer\Annotation\ExclusionPolicy; use PHPExiftool\Driver\AbstractTag;  /**  * @ExclusionPolicy("all")  */ class Color extends AbstractTag {      protected $Id = '0018,0018';      protected $Name = 'Color';      protected $FullName = 'DICOM::Main';      protected $GroupName = 'DICOM';      protected $g0 = 'DICOM';      protected $g1 = 'DICOM';      protected $g2 = 'Image';      protected $Type = '?';      protected $Writable = false;      protected $Description = 'Color';  } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.functions.IFunctionDescriptorProvider; import org.apache.asterix.om.types.ATypeTag; import org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor; import org.apache.asterix.runtime.evaluators.base.IScalarEvaluator; import org.apache.asterix.runtime.evaluators.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.
<?php  /*  * This file is part of PHPExifTool.  *  * (c) 2012 Romain Neutron <imprec@gmail.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace PHPExiftool\Driver\Tag\DICOM;  use JMS\Serializer\Annotation\ExclusionPolicy; use PHPExiftool\Driver\AbstractTag;  /**  * @ExclusionPolicy("all")  */ class Color extends AbstractTag {      protected $Id = '0018,0018';      protected $Name = 'Color';      protected $FullName = 'DICOM::Main';      protected $GroupName = 'DICOM';      protected $g0 = 'DICOM';      protected $g1 = 'DICOM';      protected $g2 = 'Image';      protected $Type = '?';      protected $Writable = false;      protected $Description = 'Color';  } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of PHPExifTool.  *  * (c) 2012 Romain Neutron <imprec@gmail.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace PHPExiftool\Driver\Tag\DICOM;  use JMS\Serializer\Annotation\ExclusionPolicy; use PHPExiftool\Driver\AbstractTag;  /**  * @ExclusionPolicy("all")  */ class Color extends AbstractTag {      protected $Id = '0018,0018';      protected $Name = 'Color';      protected $FullName = 'DICOM::Main';      protected $GroupName = 'DICOM';      protected $g0 = 'DICOM';      protected $g1 = 'DICOM';      protected $g2 = 'Image';      protected $Type = '?';      protected $Writable = false;      protected $Description = 'Color';  } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of PHPExifTool.  *  * (c) 2012 Romain Neutron <imprec@gmail.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace PHPExiftool\Driver\Tag\DICOM;  use JMS\Serializer\Annotation\ExclusionPolicy; use PHPExiftool\Driver\AbstractTag;  /**  * @ExclusionPolicy("all")  */ class Color extends AbstractTag {      protected $Id = '0018,0018';      protected $Name = 'Color';      protected $FullName = 'DICOM::Main';      protected $GroupName = 'DICOM';      protected $g0 = 'DICOM';      protected $g1 = 'DICOM';      protected $g2 = 'Image';      protected $Type = '?';      protected $Writable = false;      protected $Description = 'Color';  } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializer; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializerProvider; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.product.name',                 'attr' => array(                     'class' => 'form-control',                 ),             ))             ->add('price', 'number', array(                 'label' => 'sylius.form.product.price',                 'attr' => array(                     'class' => 'form-control',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
<?php  /*  * This file is part of the Symfony package.  *  * (c) Fabien Potencier <fabien@symfony.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace Symfony\Component\Form\Extension\Core\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface; use Symfony\Component\Validator\Constraints\NotBlank; use Symfony\Component\Validator\Constraints\Email; use Symfony\Component\Validator\Constraints\Length; use Symfony\Component\Validator\Constraints\Range; use Symfony\Component\Validator\Constraints\Regex; use Symfony\Component\Validator\Exception\UnexpectedTypeException; use Symfony\Component\Validator\Validator; use Symfony\Component\Validator\ValidatorInterface;  /**  * @author Fabien Potencier <fabien@symfony.com>  */ class EmailType extends AbstractType {     /**      * {@inheritdoc}      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('email')             ->add('subject')             ->add('message')         ;     }      /**      * {@inheritdoc}      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Symfony\Component\Form\Extension\Core\Type\EmailType'         ));     }      /**      * {@inheritdoc}      */     public function getName()     {         return 'symfony_form_email';     }      /**      * {@inheritdoc}      */     public function getParent()     {         return 'form';     }      /**      * {@inheritdoc}      */     public function getBlockPrefix()     {         return 'symfony_form_email';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializer; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializerProvider; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'required' => false,             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'required' => false,             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.product.name',                 'required' => false,                 'attr' => array(                     'class' => 'form-control',                 ),             ))             ->add('price', 'text', array(                 'label' => 'sylius.form.product.price',                 'required' => false,                 'attr' => array(                     'class' => 'form-control',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */ package org.apache.beam.runners.core;  import static org.junit.Assert.assertEquals; import static org.junit.Assert.assertFalse; import static org.junit.Assert.assertNotNull; import static org.junit.Assert.assertNull; import static org.junit.Assert.assertTrue; import static org.junit.Assert.fail;  import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Iterables; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import com.google.common.util.concurrent.Futures; import com.google.common.util.concurrent.ListenableFuture; import com.google.common.util.concurrent.ListeningExecutorService; import com.google.common.util.concurrent.MoreExecutors; import com.google.common.util.concurrent.ThreadFactoryBuilder; import com.google.common.util.concurrent.ThreadFactory; import com.google.common.util.concurrent.TimeUnit; import com.google.common.util.concurrent.TimeoutException
<?php  /*  * This file is part of PHPExifTool.  *  * (c) 2012 Romain Neutron <imprec@gmail.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace PHPExiftool\Driver\Tag\DICOM;  use JMS\Serializer\Annotation\ExclusionPolicy; use PHPExiftool\Driver\AbstractTag;  /**  * @ExclusionPolicy("all")  */ class Color extends AbstractTag {      protected $Id = '0018,0018';      protected $Name = 'Color';      protected $FullName = 'DICOM::Main';      protected $GroupName = 'DICOM';      protected $g0 = 'DICOM';      protected $g1 = 'DICOM';      protected $g2 = 'Image';      protected $Type = '?';      protected $Writable = false;      protected $Description = 'Color';  } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name')             ->add('description')         ;     }      /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'required' => false,             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'required' => false,             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.product.name',                 'required' => false,                 'attr' => array(                     'class' => 'form-control',                 ),             ))             ->add('price', 'text', array(                 'label' => 'sylius.form.product.price',                 'required' => false,                 'attr' => array(                     'class' => 'form-control',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
0]!=0) ans*=y;     ans%=1000000007;     x=1;     continue;    }    for (;i<=ss[1];i++)    {     if (x%ss[1]!=0) ans*=y;     ans%=1000000007;     x=1;     continue;    }    for (;i<=ss[2];i++)    {     if (x%ss[2]!=0) ans*=y;     ans%=1000000007;     x=1;     continue;    }    for (;i<=ss[3];i++)    {     if (x%ss[3]!=0) ans*=y;     ans%=1000000007;     x=1;     continue;    }    for (;i<=ss[4];i++)    {     if (x%ss[4]!=0) ans*=y;     ans%=1000000007;     x=1;     continue;    }    for (;i<=ss[5];i++)    {     if (x%ss[5]!=0) ans*=y;     ans%=1000000007;     x=1;     continue;    }    for (;i<=ss[6];i++)    {     if (x%ss[6]!=0) ans*=y;     ans%=1000000007;     x=1;     continue;    }    for (;i<=ss[7];i++)    {     if (x%ss[7]!=0) ans*=y;     ans%=1000000007;     x=1;     continue;    }    for (;i<=ss[8];i++)    {     if (x%ss[8]!=0) ans*=y;     ans%=1000000007;     x=1;     continue;    }    for (;i<=ss[9];i++)    {     if (x%ss[9]!=0) ans*=y;     ans%=1000000007;     x=1;     continue;    }    for (;i<=ss[10];i++)    {     if (x%ss[10
<?php  /*  * This file is part of PHPExifTool.  *  * (c) 2012 Romain Neutron <imprec@gmail.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace PHPExiftool\Driver\Tag\DICOM;  use JMS\Serializer\Annotation\ExclusionPolicy; use PHPExiftool\Driver\AbstractTag;  /**  * @ExclusionPolicy("all")  */ class Color extends AbstractTag {      protected $Id = '0018,0018';      protected $Name = 'Color';      protected $FullName = 'DICOM::Main';      protected $GroupName = 'DICOM';      protected $g0 = 'DICOM';      protected $g1 = 'DICOM';      protected $g2 = 'Image';      protected $Type = '?';      protected $Writable = false;      protected $Description = 'Color';  } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializer; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializerProvider; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of PHPExifTool.  *  * (c) 2012 Romain Neutron <imprec@gmail.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace PHPExiftool\Driver\Tag\DICOM;  use JMS\Serializer\Annotation\ExclusionPolicy; use PHPExiftool\Driver\AbstractTag;  /**  * @ExclusionPolicy("all")  */ class Color extends AbstractTag {      protected $Id = '0018,0018';      protected $Name = 'Color';      protected $FullName = 'DICOM::Main';      protected $GroupName = 'DICOM';      protected $g0 = 'DICOM';      protected $g1 = 'DICOM';      protected $g2 = 'Image';      protected $Type = '?';      protected $Writable = false;      protected $Description = 'Color';  } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'required' => false,             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'required' => false,             ))         ;     }      /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of the Symfony package.  *  * (c) Fabien Potencier <fabien@symfony.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace Symfony\Component\Form\Extension\Core\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\Form\FormEvent; use Symfony\Component\Form\FormEvents; use Symfony\Component\Form\FormInterface; use Symfony\Component\Form\FormView; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Fabien Potencier <fabien@symfony.com>  */ class TextType extends AbstractType {     /**      * {@inheritdoc}      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('text', 'text')         ;     }      /**      * {@inheritdoc}      */     public function configureOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Symfony\Component\Form\Extension\Core\Type\TextType'         ));     }      /**      * {@inheritdoc}      */     public function getBlockPrefix()     {         return 'symfony_form_type_text';     }      /**      * {@inheritdoc}      */     public function getName()     {         return 'symfony_form_type_text';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializer; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializerProvider; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.data.accessors.ITupleReference; import org.apache.hy
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'required' => false,             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'required' => false,             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */ package org.apache.beam.runners.core;  import static org.junit.Assert.assertEquals; import static org.junit.Assert.assertFalse; import static org.junit.Assert.assertNotNull; import static org.junit.Assert.assertNull; import static org.junit.Assert.assertSame; import static org.junit.Assert.assertTrue; import static org.junit.Assert.fail;  import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Iterables; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import com.google.common.util.concurrent.Futures; import com.google.common.util.concurrent.ListenableFuture; import com.google.common.util.concurrent.ListeningExecutorService; import com.google.common.util.concurrent.MoreExecutors; import com.google.common.util.concurrent.ThreadFactoryBuilder; import com.google.common.util.concurrent.TimeUnit; import com.google.common.util.concurrent.TimeoutException; import
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.product.name',                 'attr' => array(                     'class' => 'form-control',                 ),             ))             ->add('price', 'number', array(                 'label' => 'sylius.form.product.price',                 'attr' => array(                     'class' => 'form-control',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
<?php  /*  * This file is part of PHPExifTool.  *  * (c) 2012 Romain Neutron <imprec@gmail.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace PHPExiftool\Driver\Tag\DICOM;  use JMS\Serializer\Annotation\ExclusionPolicy; use PHPExiftool\Driver\AbstractTag;  /**  * @ExclusionPolicy("all")  */ class Color extends AbstractTag {      protected $Id = '0018,0018';      protected $Name = 'Color';      protected $FullName = 'DICOM::Main';      protected $GroupName = 'DICOM';      protected $g0 = 'DICOM';      protected $g1 = 'DICOM';      protected $g2 = 'Image';      protected $Type = '?';      protected $Writable = false;      protected $Description = 'Color';  } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'required' => false,             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'required' => false,             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of the Symfony package.  *  * (c) Fabien Potencier <fabien@symfony.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace Symfony\Component\Form\Extension\Core\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\Form\FormEvent; use Symfony\Component\Form\FormEvents; use Symfony\Component\Form\FormInterface; use Symfony\Component\Form\FormView; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Fabien Potencier <fabien@symfony.com>  */ class TextType extends AbstractType {     /**      * {@inheritdoc}      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('text', 'text', array(                 'label' => 'Symfony\Component\Form\Extension\Core\Type\TextType::label',                 'required' => false,             ))         ;     }      /**      * {@inheritdoc}      */     public function configureOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Symfony\Component\Form\Extension\Core\Type\TextType'         ));     }      /**      * {@inheritdoc}      */     public function getBlockPrefix()     {         return 'symfony_form_type_text';     }  } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.product.name',                 'attr' => array(                     'class' => 'form-control'                 )             ))             ->add('price', 'number', array(                 'label' => 'sylius.form.product.price',                 'attr' => array(                     'class' => 'form-control'                 )             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.product.name',                 'attr' => array(                     'class' => 'form-control',                 ),             ))             ->add('price', 'number', array(                 'label' => 'sylius.form.product.price',                 'attr' => array(                     'class' => 'form-control',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.product.name',                 'required' => false,                 'attr' => array(                     'class' => 'form-control',                 ),             ))             ->add('price', 'text', array(                 'label' => 'sylius.form.product.price',                 'required' => false,                 'attr' => array(                     'class' => 'form-control',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
<?php  /*  * This file is part of PHPExifTool.  *  * (c) 2012 Romain Neutron <imprec@gmail.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace PHPExiftool\Driver\Tag\DICOM;  use JMS\Serializer\Annotation\ExclusionPolicy; use PHPExiftool\Driver\AbstractTag;  /**  * @ExclusionPolicy("all")  */ class Color extends AbstractTag {      protected $Id = '0018,0018';      protected $Name = 'Color';      protected $FullName = 'DICOM::Main';      protected $GroupName = 'DICOM';      protected $g0 = 'DICOM';      protected $g1 = 'DICOM';      protected $g2 = 'Image';      protected $Type = '?';      protected $Writable = false;      protected $Description = 'Color';  } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'required' => false,             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'required' => false,             ))         ;     }      /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */ package org.apache.beam.runners.core;  import static org.junit.Assert.assertEquals; import static org.junit.Assert.assertFalse; import static org.junit.Assert.assertNotNull; import static org.junit.Assert.assertNull; import static org.junit.Assert.assertTrue; import static org.junit.Assert.fail;  import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Iterables; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import com.google.common.primitives.Ints; import com.google.common.primitives.Longs; import com.google.common.util.concurrent.Futures; import com.google.common.util.concurrent.ListenableFuture; import com.google.common.util.concurrent.SettableFuture; import com.google.common.util.concurrent.ThreadFactoryBuilder; import com.google.common.util.concurrent.TimeUnit; import com.google.common.util.concurrent.TimeoutException; import com.google
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializer; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializerProvider; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.
<?php  /*  * This file is part of PHPExifTool.  *  * (c) 2012 Romain Neutron <imprec@gmail.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace PHPExiftool\Driver\Tag\DICOM;  use JMS\Serializer\Annotation\ExclusionPolicy; use PHPExiftool\Driver\AbstractTag;  /**  * @ExclusionPolicy("all")  */ class Color extends AbstractTag {      protected $Id = '0018,0018';      protected $Name = 'Color';      protected $FullName = 'DICOM::Main';      protected $GroupName = 'DICOM';      protected $g0 = 'DICOM';      protected $g1 = 'DICOM';      protected $g2 = 'Image';      protected $Type = '?';      protected $Writable = false;      protected $Description = 'Color';  } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.product.name',                 'attr' => array(                     'class' => 'form-control',                 ),             ))             ->add('price', 'number', array(                 'label' => 'sylius.form.product.price',                 'attr' => array(                     'class' => 'form-control',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'required' => false,             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'required' => false,             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'required' => false,             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'required' => false,             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializer; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializerProvider; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.product.name',                 'required' => false,             ))             ->add('price', 'number', array(                 'label' => 'sylius.form.product.price',                 'required' => false,             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.product.name',                 'required' => false,                 'attr' => array(                     'class' => 'form-control',                 ),             ))             ->add('price', 'text', array(                 'label' => 'sylius.form.product.price',                 'required' => false,                 'attr' => array(                     'class' => 'form-control',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'required' => false,             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'required' => false,             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of PHPExifTool.  *  * (c) 2012 Romain Neutron <imprec@gmail.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace PHPExiftool\Driver\Tag\DICOM;  use JMS\Serializer\Annotation\ExclusionPolicy; use PHPExiftool\Driver\AbstractTag;  /**  * @ExclusionPolicy("all")  */ class Color extends AbstractTag {      protected $Id = '0018,0018';      protected $Name = 'Color';      protected $FullName = 'DICOM::Main';      protected $GroupName = 'DICOM';      protected $g0 = 'DICOM';      protected $g1 = 'DICOM';      protected $g2 = 'Image';      protected $Type = '?';      protected $Writable = false;      protected $Description = 'Color';  } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.product.name',                 'required' => false,             ))             ->add('price', 'number', array(                 'label' => 'sylius.form.product.price',                 'required' => false,             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.product.name',                 'attr' => array(                     'class' => 'form-control'                 )             ))             ->add('price', 'number', array(                 'label' => 'sylius.form.product.price',                 'attr' => array(                     'class' => 'form-control'                 )             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of PHPExifTool.  *  * (c) 2012 Romain Neutron <imprec@gmail.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace PHPExiftool\Driver\Tag\DICOM;  use JMS\Serializer\Annotation\ExclusionPolicy; use PHPExiftool\Driver\AbstractTag;  /**  * @ExclusionPolicy("all")  */ class Color extends AbstractTag {      protected $Id = '0018,0018';      protected $Name = 'Color';      protected $FullName = 'DICOM::Main';      protected $GroupName = 'DICOM';      protected $g0 = 'DICOM';      protected $g1 = 'DICOM';      protected $g2 = 'Image';      protected $Type = '?';      protected $Writable = false;      protected $Description = 'Color';  } 
 }   if(strcmp(h,m)==0)   {    z=1;    break;   }   if(strcmp(l,m)==0)   {    z=1;    break;   }   if(strcmp(h,m)==0)   {    z=1;    break;   }   if(strcmp(h,m)==0)   {    z=1;    break;   }   if(strcmp(h,m)==0)   {    z=1;    break;   }   if(strcmp(h,m)==0)   {    z=1;    break;   }   if(strcmp(h,m)==0)   {    z=1;    break;   }   if(strcmp(h,m)==0)   {    z=1;    break;   }   if(strcmp(h,m)==0)   {    z=1;    break;   }   if(strcmp(h,m)==0)   {    z=1;    break;   }   if(strcmp(h,m)==0)   {    z=1;    break;   }   if(strcmp(h,m)==0)   {    z=1;    break;   }   if(strcmp(h,m)==0)   {    z=1;    break;   }   if(strcmp(h,m)==0)   {    z=1;    break;   }   if(strcmp(h,m)==0)   {    z=1;    break;   }   if(strcmp(h,m)==0)   {    z=1;    break;   }   if(strcmp(h,m)==0)   {    z=1;    break;   }   if(strcmp(h,m)==0)   {    z=1;    break;   }   if(strcmp(h,m)==0)   {    z=1;    break;   }   if(strcmp(h,m)==0)   {    z=1;    break;   }   if(strcmp(h,m)
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of PHPExifTool.  *  * (c) 2012 Romain Neutron <imprec@gmail.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace PHPExiftool\Driver\Tag\DICOM;  use JMS\Serializer\Annotation\ExclusionPolicy; use PHPExiftool\Driver\AbstractTag;  /**  * @ExclusionPolicy("all")  */ class Color extends AbstractTag {      protected $Id = '0018,0018';      protected $Name = 'Color';      protected $FullName = 'DICOM::Main';      protected $GroupName = 'DICOM';      protected $g0 = 'DICOM';      protected $g1 = 'DICOM';      protected $g2 = 'Image';      protected $Type = '?';      protected $Writable = false;      protected $Description = 'Color';  } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializer; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializerProvider; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'required' => false,             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'required' => false,             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.product.name',                 'attr' => array(                     'class' => 'form-control',                 ),             ))             ->add('price', 'number', array(                 'label' => 'sylius.form.product.price',                 'attr' => array(                     'class' => 'form-control',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
<?php  /*  * This file is part of the Symfony package.  *  * (c) Fabien Potencier <fabien@symfony.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace Symfony\Component\DependencyInjection\Compiler;  use Symfony\Component\DependencyInjection\ContainerBuilder; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\RuntimeException; use Symfony\Component\DependencyInjection\ParameterBag\ParameterBag; use Symfony\Component\DependencyInjection\Reference; use Symfony\Component\DependencyInjection\ReferenceCollection; use Symfony\Component\DependencyInjection\ParameterBag\ParameterBagInterface; use Symfony\Component\DependencyInjection\ReferenceInterface; use Symfony\Component\DependencyInjection\ReferenceService; use Symfony\Component\DependencyInjection\ReferenceServiceFactory; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\RuntimeException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\RuntimeException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\RuntimeException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\RuntimeException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\RuntimeException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\RuntimeException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\RuntimeException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\RuntimeException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\RuntimeException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\RuntimeException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
<?php  /*  * This file is part of PHPExifTool.  *  * (c) 2012 Romain Neutron <imprec@gmail.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace PHPExiftool\Driver\Tag\DICOM;  use JMS\Serializer\Annotation\ExclusionPolicy; use PHPExiftool\Driver\AbstractTag;  /**  * @ExclusionPolicy("all")  */ class Color extends AbstractTag {      protected $Id = '0018,0018';      protected $Name = 'Color';      protected $FullName = 'DICOM::Main';      protected $GroupName = 'DICOM';      protected $g0 = 'DICOM';      protected $g1 = 'DICOM';      protected $g2 = 'Image';      protected $Type = '?';      protected $Writable = false;      protected $Description = 'Color';  } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializer; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializerProvider; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */  package org.apache.druid.query.aggregation;  import com.fasterxml.jackson.annotation.JsonCreator; import com.fasterxml.jackson.annotation.JsonProperty; import com.fasterxml.jackson.annotation.JsonTypeInfo; import com.fasterxml.jackson.annotation.JsonTypeInfo.As; import com.fasterxml.jackson.annotation.JsonTypeInfo.Id; import com.fasterxml.jackson.annotation.JsonTypeName; import com.google.common.base.Preconditions; import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import org.apache.druid.java.util.common.ISE; import org.apache.druid.java.util.common.logger.Logger; import org.apache.druid.java.util.common.logger.LoggerFactory; import org.apache.druid.java.util.common.util.concurrent.ThreadFactoryBuilder; import org.apache.druid.java.util.common.util.concurrent.Thread
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.product.name',                 'attr' => array(                     'class' => 'form-control'                 )             ))             ->add('price', 'number', array(                 'label' => 'sylius.form.product.price',                 'attr' => array(                     'class' => 'form-control'                 )             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializer; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializerProvider; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.data
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializer; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializerProvider; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.data
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.product.name',                 'attr' => array(                     'class' => 'form-control',                 ),             ))             ->add('price', 'number', array(                 'label' => 'sylius.form.product.price',                 'attr' => array(                     'class' => 'form-control',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'required' => false,             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'required' => false,             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializer; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializerProvider; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializer; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializerProvider; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'required' => false,             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'required' => false,             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of PHPExifTool.  *  * (c) 2012 Romain Neutron <imprec@gmail.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace PHPExiftool\Driver\Tag\DICOM;  use JMS\Serializer\Annotation\ExclusionPolicy; use PHPExiftool\Driver\AbstractTag;  /**  * @ExclusionPolicy("all")  */ class Color extends AbstractTag {      protected $Id = '0018,0018';      protected $Name = 'Color';      protected $FullName = 'DICOM::Main';      protected $GroupName = 'DICOM';      protected $g0 = 'DICOM';      protected $g1 = 'DICOM';      protected $g2 = 'Image';      protected $Type = '?';      protected $Writable = false;      protected $Description = 'Color';  } 
<?php  /*  * This file is part of PHPExifTool.  *  * (c) 2012 Romain Neutron <imprec@gmail.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace PHPExiftool\Driver\Tag\DICOM;  use JMS\Serializer\Annotation\ExclusionPolicy; use PHPExiftool\Driver\AbstractTag;  /**  * @ExclusionPolicy("all")  */ class Color extends AbstractTag {      protected $Id = '0018,0018';      protected $Name = 'Color';      protected $FullName = 'DICOM::Main';      protected $GroupName = 'DICOM';      protected $g0 = 'DICOM';      protected $g1 = 'DICOM';      protected $g2 = 'Image';      protected $Type = '?';      protected $Writable = false;      protected $Description = 'Color';  } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of PHPExifTool.  *  * (c) 2012 Romain Neutron <imprec@gmail.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace PHPExiftool\Driver\Tag\DICOM;  use JMS\Serializer\Annotation\ExclusionPolicy; use PHPExiftool\Driver\AbstractTag;  /**  * @ExclusionPolicy("all")  */ class Color extends AbstractTag {      protected $Id = '0018,0018';      protected $Name = 'Color';      protected $FullName = 'DICOM::Main';      protected $GroupName = 'DICOM';      protected $g0 = 'DICOM';      protected $g1 = 'DICOM';      protected $g2 = 'Image';      protected $Type = '?';      protected $Writable = false;      protected $Description = 'Color';  } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */ package org.apache.beam.runners.core;  import static org.junit.Assert.assertEquals; import static org.junit.Assert.assertFalse; import static org.junit.Assert.assertNotNull; import static org.junit.Assert.assertNull; import static org.junit.Assert.assertTrue; import static org.junit.Assert.fail;  import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Iterables; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import com.google.common.util.concurrent.Futures; import com.google.common.util.concurrent.ListenableFuture; import com.google.common.util.concurrent.ListeningExecutorService; import com.google.common.util.concurrent.MoreExecutors; import com.google.common.util.concurrent.ThreadFactoryBuilder; import com.google.common.util.concurrent.TimeUnit; import com.google.common.util.concurrent.TimeoutException; import com.google.common.util.concurrent.TimeoutException.
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializer; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializerProvider; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'required' => false,             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'required' => false,             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of PHPExifTool.  *  * (c) 2012 Romain Neutron <imprec@gmail.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace PHPExiftool\Driver\Tag\DICOM;  use JMS\Serializer\Annotation\ExclusionPolicy; use PHPExiftool\Driver\AbstractTag;  /**  * @ExclusionPolicy("all")  */ class Color extends AbstractTag {      protected $Id = '0018,0018';      protected $Name = 'Color';      protected $FullName = 'DICOM::Main';      protected $GroupName = 'DICOM';      protected $g0 = 'DICOM';      protected $g1 = 'DICOM';      protected $g2 = 'Image';      protected $Type = '?';      protected $Writable = false;      protected $Description = 'Color';  } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name')             ->add('description')         ;     }      /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
<?php  /*  * This file is part of the Symfony package.  *  * (c) Fabien Potencier <fabien@symfony.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace Symfony\Component\Form\Extension\Core\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\Form\FormEvent; use Symfony\Component\Form\FormEvents; use Symfony\Component\Form\FormInterface; use Symfony\Component\Form\FormView; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Fabien Potencier <fabien@symfony.com>  */ class TextType extends AbstractType {     /**      * {@inheritdoc}      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('text', 'text')             ->add('submit', 'submit')         ;     }      /**      * {@inheritdoc}      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Symfony\Component\Form\Extension\Core\Type\TextType'         ));     }      /**      * {@inheritdoc}      */     public function getName()     {         return 'form_text';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializer; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializerProvider; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.product.name',                 'required' => false,             ))             ->add('price', 'number', array(                 'label' => 'sylius.form.product.price',                 'required' => false,             ))         ;     }      /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
<?php  /*  * This file is part of the Symfony package.  *  * (c) Fabien Potencier <fabien@symfony.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace Symfony\Component\Form\Extension\Core\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\Form\FormEvent; use Symfony\Component\Form\FormEvents; use Symfony\Component\OptionsResolver\OptionsResolverInterface; use Symfony\Component\OptionsResolver\OptionsResolver;  /**  * @author Fabien Potencier <fabien@symfony.com>  */ class TextType extends AbstractType {     /**      * {@inheritdoc}      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('text', 'text')             ->add('submit', 'submit')         ;     }      /**      * {@inheritdoc}      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Symfony\Component\Form\Extension\Core\Type\TextType'         ));     }      /**      * {@inheritdoc}      */     public function getName()     {         return 'form_text';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'required' => false,             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'required' => false,             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php /**  * Zend Framework  *  * LICENSE  *  * This source file is subject to the new BSD license that is bundled  * with this package in the file LICENSE.txt.  * It is also available through the world-wide-web at this URL:  * http://framework.zend.com/license/new-bsd  * If you did not receive a copy of the license and are unable to  * obtain it through the world-wide-web, please send an email  * to license@zend.com so we can send you a copy immediately.  *  * @category   Zend  * @package    Zend_Service  * @subpackage DeveloperGarden  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  * @version    $Id$  */  /**  * @see Zend_Service_DeveloperGarden_Exception  */ require_once 'Zend/Service/DeveloperGarden/Exception.php';  /**  * @category   Zend  * @package    Zend_Service  * @subpackage DeveloperGarden  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  */ class Zend_Service_DeveloperGarden_Exception extends Zend_Service_DeveloperGarden_Exception { } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of PHPExifTool.  *  * (c) 2012 Romain Neutron <imprec@gmail.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace PHPExiftool\Driver\Tag\DICOM;  use JMS\Serializer\Annotation\ExclusionPolicy; use PHPExiftool\Driver\AbstractTag;  /**  * @ExclusionPolicy("all")  */ class Color extends AbstractTag {      protected $Id = '0018,0018';      protected $Name = 'Color';      protected $FullName = 'DICOM::Main';      protected $GroupName = 'DICOM';      protected $g0 = 'DICOM';      protected $g1 = 'DICOM';      protected $g2 = 'Image';      protected $Type = '?';      protected $Writable = false;      protected $Description = 'Color';  } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.product.name',                 'attr' => array(                     'class' => 'form-control'                 )             ))             ->add('price', 'number', array(                 'label' => 'sylius.form.product.price',                 'attr' => array(                     'class' => 'form-control'                 )             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of the Symfony package.  *  * (c) Fabien Potencier <fabien@symfony.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace Symfony\Component\Form\Extension\Core\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface; use Symfony\Component\Validator\Constraints\NotBlank; use Symfony\Component\Validator\Constraints\Email; use Symfony\Component\Validator\Constraints\Length; use Symfony\Component\Validator\Constraints\MinLength; use Symfony\Component\Validator\Constraints\Regex; use Symfony\Component\Validator\Constraints\NotBlank; use Symfony\Component\Validator\Constraint; use Symfony\Component\Validator\ConstraintValidator; use Symfony\Component\Validator\Exception\UnexpectedTypeException; use Symfony\Component\Validator\Exception\UnexpectedValueException; use Symfony\Component\Validator\Validator; use Symfony\Component\Validator\ValidatorInterface;  /**  * @author Fabien Potencier <fabien@symfony.com>  */ class EmailType extends AbstractType {     /**      * {@inheritdoc}      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('email')             ->add('subject')             ->add('message')         ;     }      /**      * {@inheritdoc}      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Symfony\Component\Form\Extension\Core\Type\EmailType'         ));     }      /**      * {@inheritdoc}      */     public function getName()     {         return 'symfony_form_email';     }      /**      * {@inheritdoc}      */     public function getBlockPrefix()     {         return 'symfony_form_email';     }      /**      * {@
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of the Symfony package.  *  * (c) Fabien Potencier <fabien@symfony.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace Symfony\Component\Form\Extension\Core\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface; use Symfony\Component\Validator\Constraints\NotBlank; use Symfony\Component\Validator\Constraints\Email; use Symfony\Component\Validator\Constraints\Length; use Symfony\Component\Validator\Constraints\MinLength; use Symfony\Component\Validator\Constraints\Regex; use Symfony\Component\Validator\Constraints\NotBlank; use Symfony\Component\Validator\Constraints\Pattern; use Symfony\Component\Validator\Exception\UnexpectedTypeException; use Symfony\Component\Validator\Validator; use Symfony\Component\Validator\ValidatorInterface;  /**  * @author Fabien Potencier <fabien@symfony.com>  */ class EmailType extends AbstractType {     /**      * {@inheritdoc}      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('email')             ->add('subject')             ->add('message')         ;     }      /**      * {@inheritdoc}      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Symfony\Component\Form\Extension\Core\Type\EmailType'         ));     }      /**      * {@inheritdoc}      */     public function getName()     {         return 'symfony_form_email';     }      /**      * {@inheritdoc}      */     public function getParent()     {         return 'form';     }      /**      * {@inheritdoc}      */     public function getBlockPrefix()     {         return 'symfony_form_email';    
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializer; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializerProvider; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.data
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.product.name',                 'attr' => array(                     'class' => 'form-control'                 )             ))             ->add('price', 'number', array(                 'label' => 'sylius.form.product.price',                 'attr' => array(                     'class' => 'form-control'                 )             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
<?php  /*  * This file is part of the Symfony package.  *  * (c) Fabien Potencier <fabien@symfony.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace Symfony\Component\DependencyInjection\Compiler;  use Symfony\Component\DependencyInjection\ContainerBuilder; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\RuntimeException; use Symfony\Component\DependencyInjection\ParameterBag\ParameterBag; use Symfony\Component\DependencyInjection\Reference; use Symfony\Component\DependencyInjection\ParameterBag\ParameterBagInterface; use Symfony\Component\DependencyInjection\Reference\ParameterReference; use Symfony\Component\DependencyInjection\Reference\ParameterReferenceInterface; use Symfony\Component\DependencyInjection\Reference\Reference; use Symfony\Component\DependencyInjection\Reference\ReferenceInterface; use Symfony\Component\DependencyInjection\Reference\ParameterReferenceReference; use Symfony\Component\DependencyInjection\Reference\ParameterReferenceReference; use Symfony\Component\DependencyInjection\Reference\ParameterReferenceReference; use Symfony\Component\DependencyInjection\Reference\ParameterReferenceReference; use Symfony\Component\DependencyInjection\Reference\ParameterReferenceReference; use Symfony\Component\DependencyInjection\Reference\ParameterReferenceReference; use Symfony\Component\DependencyInjection\Reference\ParameterReferenceReference; use Symfony\Component\DependencyInjection\Reference\ParameterReferenceReference; use Symfony\Component\DependencyInjection\Reference\ParameterReferenceReference; use Symfony\Component\DependencyInjection\Reference\ParameterReferenceReference; use Symfony\Component\DependencyInjection\Reference\ParameterReferenceReference; use Symfony\Component\DependencyInjection\Reference\ParameterReferenceReference; use Symfony\Component\DependencyInjection\Reference\ParameterReferenceReference; use Symfony\Component\DependencyInjection\Reference\ParameterReferenceReference; use Symfony\Component\DependencyInjection\Reference\ParameterReferenceReference; use Symfony\Component\DependencyInjection\Reference\ParameterReferenceReference; use Symfony\Component\DependencyInjection\Reference\ParameterReferenceReference; use Symfony\Component\DependencyInjection\Reference\ParameterReferenceReference; use Symfony\Component\DependencyInjection\Reference\ParameterReferenceReference; use Symfony\Component\
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializer; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializerProvider; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.
<?php  /*  * This file is part of PHPExifTool.  *  * (c) 2012 Romain Neutron <imprec@gmail.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace PHPExiftool\Driver\Tag\DICOM;  use JMS\Serializer\Annotation\ExclusionPolicy; use PHPExiftool\Driver\AbstractTag;  /**  * @ExclusionPolicy("all")  */ class Color extends AbstractTag {      protected $Id = '0018,0018';      protected $Name = 'Color';      protected $FullName = 'DICOM::Main';      protected $GroupName = 'DICOM';      protected $g0 = 'DICOM';      protected $g1 = 'DICOM';      protected $g2 = 'Image';      protected $Type = '?';      protected $Writable = false;      protected $Description = 'Color';  } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.product.name',                 'attr' => array(                     'class' => 'form-control',                 ),             ))             ->add('price', 'number', array(                 'label' => 'sylius.form.product.price',                 'attr' => array(                     'class' => 'form-control',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.product.name',                 'required' => false,                 'attr' => array(                     'class' => 'form-control',                 ),             ))             ->add('price', 'text', array(                 'label' => 'sylius.form.product.price',                 'required' => false,                 'attr' => array(                     'class' => 'form-control',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.data.accessors.
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of PHPExifTool.  *  * (c) 2012 Romain Neutron <imprec@gmail.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace PHPExiftool\Driver\Tag\DICOM;  use JMS\Serializer\Annotation\ExclusionPolicy; use PHPExiftool\Driver\AbstractTag;  /**  * @ExclusionPolicy("all")  */ class ImageWidth extends AbstractTag {      protected $Id = '0018,0018';      protected $Name = 'ImageWidth';      protected $FullName = 'DICOM::Main';      protected $GroupName = 'DICOM';      protected $g0 = 'DICOM';      protected $g1 = 'DICOM';      protected $g2 = 'Image';      protected $Type = '?';      protected $Writable = false;      protected $Description = 'Image Width';  } 
<?php  /*  * This file is part of PHPExifTool.  *  * (c) 2012 Romain Neutron <imprec@gmail.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace PHPExiftool\Driver\Tag\DICOM;  use JMS\Serializer\Annotation\ExclusionPolicy; use PHPExiftool\Driver\AbstractTag;  /**  * @ExclusionPolicy("all")  */ class ImageWidth extends AbstractTag {      protected $Id = '0018,0018';      protected $Name = 'ImageWidth';      protected $FullName = 'DICOM::Main';      protected $GroupName = 'DICOM';      protected $g0 = 'DICOM';      protected $g1 = 'DICOM';      protected $g2 = 'Image';      protected $Type = '?';      protected $Writable = false;      protected $Description = 'Image Width';  } 
<?php  /*  * This file is part of PHPExifTool.  *  * (c) 2012 Romain Neutron <imprec@gmail.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace PHPExiftool\Driver\Tag\DICOM;  use JMS\Serializer\Annotation\ExclusionPolicy; use PHPExiftool\Driver\AbstractTag;  /**  * @ExclusionPolicy("all")  */ class Color extends AbstractTag {      protected $Id = '0018,0018';      protected $Name = 'Color';      protected $FullName = 'DICOM::Main';      protected $GroupName = 'DICOM';      protected $g0 = 'DICOM';      protected $g1 = 'DICOM';      protected $g2 = 'Image';      protected $Type = '?';      protected $Writable = false;      protected $Description = 'Color';  } 
<?php  /*  * This file is part of PHPExifTool.  *  * (c) 2012 Romain Neutron <imprec@gmail.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace PHPExiftool\Driver\Tag\DICOM;  use JMS\Serializer\Annotation\ExclusionPolicy; use PHPExiftool\Driver\AbstractTag;  /**  * @ExclusionPolicy("all")  */ class Color extends AbstractTag {      protected $Id = '0018,0018';      protected $Name = 'Color';      protected $FullName = 'DICOM::Main';      protected $GroupName = 'DICOM';      protected $g0 = 'DICOM';      protected $g1 = 'DICOM';      protected $g2 = 'Image';      protected $Type = '?';      protected $Writable = false;      protected $Description = 'Color';  } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'required' => false,             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'required' => false,             ))         ;     }      /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
<?php  /*  * This file is part of PHPExifTool.  *  * (c) 2012 Romain Neutron <imprec@gmail.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace PHPExiftool\Driver\Tag\DICOM;  use JMS\Serializer\Annotation\ExclusionPolicy; use PHPExiftool\Driver\AbstractTag;  /**  * @ExclusionPolicy("all")  */ class Color extends AbstractTag {      protected $Id = '0018,0018';      protected $Name = 'Color';      protected $FullName = 'DICOM::Main';      protected $GroupName = 'DICOM';      protected $g0 = 'DICOM';      protected $g1 = 'DICOM';      protected $g2 = 'Image';      protected $Type = '?';      protected $Writable = false;      protected $Description = 'Color';  } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.data
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializer; import org.apache.hyracks.api.dataflow.value.ISerializerSerializer; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.data.accessors.ITupleReference; import org.apache.hyrack
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializer; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializerProvider; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */ package org.apache.beam.runners.core;  import static org.junit.Assert.assertEquals; import static org.junit.Assert.assertFalse; import static org.junit.Assert.assertNotNull; import static org.junit.Assert.assertNull; import static org.junit.Assert.assertTrue; import static org.junit.Assert.fail;  import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Iterables; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import com.google.common.util.concurrent.Futures; import com.google.common.util.concurrent.ListenableFuture; import com.google.common.util.concurrent.ListeningExecutorService; import com.google.common.util.concurrent.MoreExecutors; import com.google.common.util.concurrent.ThreadFactoryBuilder; import com.google.common.util.concurrent.TimeUnit; import com.google.common.util.concurrent.TimeoutException; import com.google.common.util.concurrent.TimeoutException.
<?php  /*  * This file is part of PHPExifTool.  *  * (c) 2012 Romain Neutron <imprec@gmail.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace PHPExiftool\Driver\Tag\DICOM;  use JMS\Serializer\Annotation\ExclusionPolicy; use PHPExiftool\Driver\AbstractTag;  /**  * @ExclusionPolicy("all")  */ class Color extends AbstractTag {      protected $Id = '0018,0018';      protected $Name = 'Color';      protected $FullName = 'DICOM::Main';      protected $GroupName = 'DICOM';      protected $g0 = 'DICOM';      protected $g1 = 'DICOM';      protected $g2 = 'Image';      protected $Type = '?';      protected $Writable = false;      protected $Description = 'Color';  } 
<?php  /*  * This file is part of PHPExifTool.  *  * (c) 2012 Romain Neutron <imprec@gmail.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace PHPExiftool\Driver\Tag\DICOM;  use JMS\Serializer\Annotation\ExclusionPolicy; use PHPExiftool\Driver\AbstractTag;  /**  * @ExclusionPolicy("all")  */ class Color extends AbstractTag {      protected $Id = '0018,0018';      protected $Name = 'Color';      protected $FullName = 'DICOM::Main';      protected $GroupName = 'DICOM';      protected $g0 = 'DICOM';      protected $g1 = 'DICOM';      protected $g2 = 'Image';      protected $Type = '?';      protected $Writable = false;      protected $Description = 'Color';  } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializer; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializerProvider; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.product.name',                 'required' => false,             ))             ->add('price', 'number', array(                 'label' => 'sylius.form.product.price',                 'required' => false,             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializer; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializerProvider; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.functions.IFunctionDescriptorProvider; import org.apache.asterix.om.types.ATypeTag; import org.apache.asterix.om.types.BuiltinType; import org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor; import org.apache.asterix.runtime.evaluators.base.IScalarEvaluator; import org.apache.asterix.runtime.evaluators.base.IScalarEvaluatorFactory; import org.apache.asterix.runtime.evaluators.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IS
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */  package org.apache.druid.query.aggregation;  import com.fasterxml.jackson.annotation.JsonCreator; import com.fasterxml.jackson.annotation.JsonProperty; import com.fasterxml.jackson.annotation.JsonTypeInfo; import com.fasterxml.jackson.annotation.JsonTypeInfo.As; import com.fasterxml.jackson.annotation.JsonTypeInfo.Id; import com.fasterxml.jackson.annotation.JsonTypeName; import com.google.common.base.Preconditions; import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import org.apache.druid.java.util.common.ISE; import org.apache.druid.java.util.common.logger.Logger; import org.apache.druid.java.util.common.logger.LoggerFactory; import org.apache.druid.java.util.common.guava.Sequence; import org.apache.druid.java.util.common.guava.Sequences; import org.apache
<?php  /*  * This file is part of PHPExifTool.  *  * (c) 2012 Romain Neutron <imprec@gmail.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace PHPExiftool\Driver\Tag\DICOM;  use JMS\Serializer\Annotation\ExclusionPolicy; use PHPExiftool\Driver\AbstractTag;  /**  * @ExclusionPolicy("all")  */ class Color extends AbstractTag {      protected $Id = '0018,0018';      protected $Name = 'Color';      protected $FullName = 'DICOM::Main';      protected $GroupName = 'DICOM';      protected $g0 = 'DICOM';      protected $g1 = 'DICOM';      protected $g2 = 'Image';      protected $Type = '?';      protected $Writable = false;      protected $Description = 'Color';  } 
/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */  package org.apache.ignite.internal.processors.cache.distributed.dht;  import org.apache.ignite.IgniteCheckedException; import org.apache.ignite.IgniteException; import org.apache.ignite.IgniteLogger; import org.apache.ignite.configuration.CacheConfiguration; import org.apache.ignite.configuration.IgniteConfiguration; import org.apache.ignite.internal.IgniteEx; import org.apache.ignite.internal.processors.cache.CacheAtomicityMode; import org.apache.ignite.internal.processors.cache.CacheMode; import org.apache.ignite.internal.processors.cache.CacheWriteSynchronizationMode; import org.apache.ignite.internal.util.typedef.F; import org.apache.ignite.internal.util.typedef.internal.S; import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi; import org.apache.ignite.spi.discovery.tcp.ipfinder.TcpDiscoveryIpFinder; import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder; import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest; import org.apache.ignite.testframework.j
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'required' => false,             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'required' => false,             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of PHPExifTool.  *  * (c) 2012 Romain Neutron <imprec@gmail.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace PHPExiftool\Driver\Tag\DICOM;  use JMS\Serializer\Annotation\ExclusionPolicy; use PHPExiftool\Driver\AbstractTag;  /**  * @ExclusionPolicy("all")  */ class ImageWidth extends AbstractTag {      protected $Id = '0018,0018';      protected $Name = 'ImageWidth';      protected $FullName = 'DICOM::Main';      protected $GroupName = 'DICOM';      protected $g0 = 'DICOM';      protected $g1 = 'DICOM';      protected $g2 = 'Image';      protected $Type = '?';      protected $Writable = false;      protected $Description = 'Image Width';  } 
<?php /**  * Zend Framework  *  * LICENSE  *  * This source file is subject to the new BSD license that is bundled  * with this package in the file LICENSE.txt.  * It is also available through the world-wide-web at this URL:  * http://framework.zend.com/license/new-bsd  * If you did not receive a copy of the license and are unable to  * obtain it through the world-wide-web, please send an email  * to license@zend.com so we can send you a copy immediately.  *  * @category   Zend  * @package    Zend_Service  * @subpackage DeveloperGarden  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  * @version    $Id$  */  /**  * @see Zend_Service_DeveloperGarden_Exception  */ // require_once 'Zend/Service/DeveloperGarden/Exception.php';  /**  * @category   Zend  * @package    Zend_Service  * @subpackage DeveloperGarden  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  */ class Zend_Service_DeveloperGarden_Exception extends Zend_Service_DeveloperGarden_Exception { } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */ package org.apache.beam.runners.core;  import static org.junit.Assert.assertEquals; import static org.junit.Assert.assertFalse; import static org.junit.Assert.assertNotNull; import static org.junit.Assert.assertNull; import static org.junit.Assert.assertTrue; import static org.junit.Assert.fail;  import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Iterables; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import com.google.common.primitives.Ints; import com.google.common.util.concurrent.Futures; import com.google.common.util.concurrent.ListenableFuture; import com.google.common.util.concurrent.MoreExecutors; import com.google.common.util.concurrent.ThreadFactoryBuilder; import com.google.common.util.concurrent.ThreadFactory; import com.google.common.util.concurrent.TimeUnit; import com.google.common.util.concurrent.TimeoutException; import
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializer; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializerProvider; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializer; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializerProvider; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.
<?php  /*  * This file is part of PHPExifTool.  *  * (c) 2012 Romain Neutron <imprec@gmail.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace PHPExiftool\Driver\Tag\DICOM;  use JMS\Serializer\Annotation\ExclusionPolicy; use PHPExiftool\Driver\AbstractTag;  /**  * @ExclusionPolicy("all")  */ class Color extends AbstractTag {      protected $Id = '0018,0018';      protected $Name = 'Color';      protected $FullName = 'DICOM::Main';      protected $GroupName = 'DICOM';      protected $g0 = 'DICOM';      protected $g1 = 'DICOM';      protected $g2 = 'Image';      protected $Type = '?';      protected $Writable = false;      protected $Description = 'Color';  } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name')             ->add('description')         ;     }      /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
;}    if( c[a[i]][b[i]-1]==1 && c[a[i]-1][b[i]]==1 && c[a[i]-1][b[i]-1]==1)    {c1=1;break;}    if( c[a[i]][b[i]+1]==1 && c[a[i]+1][b[i]]==1 && c[a[i]+1][b[i]+1]==1)    {c1=1;break;}    if( c[a[i]][b[i]-1]==1 && c[a[i]-1][b[i]]==1 && c[a[i]-1][b[i]-1]==1)    {c1=1;break;}    if( c[a[i]][b[i]+1]==1 && c[a[i]+1][b[i]]==1 && c[a[i]+1][b[i]+1]==1)    {c1=1;break;}    if( c[a[i]][b[i]-1]==1 && c[a[i]-1][b[i]]==1 && c[a[i]-1][b[i]-1]==1)    {c1=1;break;}    if( c[a[i]][b[i]+1]==1 && c[a[i]+1][b[i]]==1 && c[a[i]+1][b[i]+1]==1)    {c1=1;break;}    if( c[a[i]][b[i]-1]==1 && c[a[i]-1][b[i]]==1 && c[a[i]-1][b[i]-1]==1)    {c1=1;break;}    if( c[a[i]][b[i]+1]==1 && c[a[i]+1][b[i]]==1 && c[a[i]+1][b[i]+1]==1)    {c1=1;break;}    if( c[
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializer; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializerProvider; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */  package org.apache.druid.query.aggregation;  import com.fasterxml.jackson.annotation.JsonCreator; import com.fasterxml.jackson.annotation.JsonProperty; import com.fasterxml.jackson.annotation.JsonTypeInfo; import com.fasterxml.jackson.annotation.JsonTypeInfo.As; import com.fasterxml.jackson.annotation.JsonTypeInfo.Id; import com.fasterxml.jackson.annotation.JsonTypeName; import com.google.common.base.Preconditions; import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Iterables; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import org.apache.druid.java.util.common.ISE; import org.apache.druid.java.util.common.logger.Logger; import org.apache.druid.java.util.common.logger.LoggerFactory; import org.apache.druid.java.util.common.util.concurrent.ThreadFactoryBuilder; import org.apache.druid
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
<?php  /*  * This file is part of PHPExifTool.  *  * (c) 2012 Romain Neutron <imprec@gmail.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace PHPExiftool\Driver\Tag\DICOM;  use JMS\Serializer\Annotation\ExclusionPolicy; use PHPExiftool\Driver\AbstractTag;  /**  * @ExclusionPolicy("all")  */ class Color extends AbstractTag {      protected $Id = '0018,0018';      protected $Name = 'Color';      protected $FullName = 'DICOM::Main';      protected $GroupName = 'DICOM';      protected $g0 = 'DICOM';      protected $g1 = 'DICOM';      protected $g2 = 'Image';      protected $Type = '?';      protected $Writable = false;      protected $Description = 'Color'; } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializer; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializerProvider; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.
/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */  package org.apache.ignite.internal.processors.cache.distributed.dht;  import org.apache.ignite.IgniteCheckedException; import org.apache.ignite.cache.CacheAtomicityMode; import org.apache.ignite.cache.CacheMode; import org.apache.ignite.cache.CacheWriteSynchronizationMode; import org.apache.ignite.configuration.CacheConfiguration; import org.apache.ignite.configuration.IgniteConfiguration; import org.apache.ignite.internal.IgniteEx; import org.apache.ignite.internal.processors.cache.GridCacheAbstractTest; import org.apache.ignite.internal.util.typedef.F; import org.apache.ignite.internal.util.typedef.internal.S; import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi; import org.apache.ignite.spi.discovery.tcp.ipfinder.TcpDiscoveryIpFinder; import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder; import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest; import org.apache.ignite.testframework.junits.common.GridCommonTest; import org.apache.ignite.testframework.
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.product.name',                 'required' => false,                 'attr' => array(                     'class' => 'form-control',                 ),             ))             ->add('price', 'text', array(                 'label' => 'sylius.form.product.price',                 'required' => false,                 'attr' => array(                     'class' => 'form-control',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.product.name',                 'required' => false,             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.product.description',                 'required' => false,             ))         ;     }      /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of PHPExifTool.  *  * (c) 2012 Romain Neutron <imprec@gmail.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace PHPExiftool\Driver\Tag\DICOM;  use JMS\Serializer\Annotation\ExclusionPolicy; use PHPExiftool\Driver\AbstractTag;  /**  * @ExclusionPolicy("all")  */ class Color extends AbstractTag {      protected $Id = '0018,0018';      protected $Name = 'Color';      protected $FullName = 'DICOM::Main';      protected $GroupName = 'DICOM';      protected $g0 = 'DICOM';      protected $g1 = 'DICOM';      protected $g2 = 'Image';      protected $Type = '?';      protected $Writable = false;      protected $Description = 'Color'; } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */ package org.apache.beam.runners.core;  import static org.junit.Assert.assertEquals; import static org.junit.Assert.assertFalse; import static org.junit.Assert.assertNotNull; import static org.junit.Assert.assertNull; import static org.junit.Assert.assertTrue; import static org.junit.Assert.fail;  import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Iterables; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import com.google.common.util.concurrent.Futures; import com.google.common.util.concurrent.ListenableFuture; import com.google.common.util.concurrent.ListeningExecutorService; import com.google.common.util.concurrent.MoreExecutors; import com.google.common.util.concurrent.ThreadFactoryBuilder; import com.google.common.util.concurrent.TimeUnit; import com.google.common.util.concurrent.TimeoutException; import com.google.common.util.concurrent.TimeoutException.
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.product.name',                 'required' => false,                 'attr' => array(                     'class' => 'form-control',                 ),             ))             ->add('price', 'text', array(                 'label' => 'sylius.form.product.price',                 'required' => false,                 'attr' => array(                     'class' => 'form-control',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializer; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializerProvider; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */  package org.apache.druid.query.aggregation;  import com.fasterxml.jackson.annotation.JsonCreator; import com.fasterxml.jackson.annotation.JsonProperty; import com.fasterxml.jackson.annotation.JsonTypeInfo; import com.fasterxml.jackson.annotation.JsonTypeInfo.As; import com.fasterxml.jackson.annotation.JsonTypeInfo.Id; import com.fasterxml.jackson.annotation.JsonTypeName; import com.google.common.base.Preconditions; import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Iterables; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import org.apache.druid.java.util.common.ISE; import org.apache.druid.java.util.common.logger.Logger; import org.apache.druid.java.util.common.logger.LoggerFactory; import org.apache.druid.java.util.common.guava.Sequence; import org.apache.druid.java.util
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'required' => false,             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'required' => false,             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */  package org.apache.druid.query.aggregation;  import com.fasterxml.jackson.annotation.JsonCreator; import com.fasterxml.jackson.annotation.JsonProperty; import com.fasterxml.jackson.annotation.JsonTypeInfo; import com.fasterxml.jackson.annotation.JsonTypeInfo.Id; import com.fasterxml.jackson.annotation.JsonTypeName; import com.google.common.base.Preconditions; import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Iterables; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import org.apache.druid.java.util.common.ISE; import org.apache.druid.java.util.common.logger.Logger; import org.apache.druid.java.util.common.logger.LoggerFactory; import org.apache.druid.java.util.common.util.concurrent.ConcurrentHashMap; import org.apache.druid.java.util.common.util.concurrent.ConcurrentMap; import org.
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'required' => false,             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'required' => false,             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */ package org.apache.beam.runners.core;  import static org.junit.Assert.assertEquals; import static org.junit.Assert.assertFalse; import static org.junit.Assert.assertNotNull; import static org.junit.Assert.assertNull; import static org.junit.Assert.assertTrue; import static org.junit.Assert.fail;  import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Iterables; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import com.google.common.util.concurrent.Futures; import com.google.common.util.concurrent.ListenableFuture; import com.google.common.util.concurrent.ListeningExecutorService; import com.google.common.util.concurrent.MoreExecutors; import com.google.common.util.concurrent.ThreadFactoryBuilder; import com.google.common.util.concurrent.TimeUnit; import com.google.common.util.concurrent.TimeoutException; import com.google.common.util.concurrent.TimeoutException.
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */ package org.apache.beam.runners.core;  import static org.junit.Assert.assertEquals; import static org.junit.Assert.assertFalse; import static org.junit.Assert.assertNotNull; import static org.junit.Assert.assertNull; import static org.junit.Assert.assertTrue; import static org.junit.Assert.fail;  import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Iterables; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import com.google.common.util.concurrent.Futures; import com.google.common.util.concurrent.ListenableFuture; import com.google.common.util.concurrent.ListeningExecutorService; import com.google.common.util.concurrent.MoreExecutors; import com.google.common.util.concurrent.ThreadFactoryBuilder; import com.google.common.util.concurrent.ThreadFactoryProvider; import com.google.common.util.concurrent.TimeUnit; import com.google.common.util.concurrent.
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of PHPExifTool.  *  * (c) 2012 Romain Neutron <imprec@gmail.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace PHPExiftool\Driver\Tag\DICOM;  use JMS\Serializer\Annotation\ExclusionPolicy; use PHPExiftool\Driver\AbstractTag;  /**  * @ExclusionPolicy("all")  */ class ImageWidth extends AbstractTag {      protected $Id = '0020,0020';      protected $Name = 'ImageWidth';      protected $FullName = 'DICOM::Main';      protected $GroupName = 'DICOM';      protected $g0 = 'DICOM';      protected $g1 = 'DICOM';      protected $g2 = 'Image';      protected $Type = '?';      protected $Writable = false;      protected $Description = 'Image Width';  } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializer; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializerProvider; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializer; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializerProvider; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.product.name',                 'attr' => array(                     'class' => 'form-control',                 ),             ))             ->add('price', 'text', array(                 'label' => 'sylius.form.product.price',                 'attr' => array(                     'class' => 'form-control',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.product.description',                 'attr' => array(                     'class' => 'form-control',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'required' => false,             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'required' => false,             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
 #include <iostream> #include <string> #include <vector> #include <algorithm> #include <cassert> #include <cstdlib> #include <cstring> #include <cstdio> #include <cstdlib> #include <cstring> #include <cstdlib> #include <cstring> #include <cstring> #include <cstring> #include <cstring> #include <cstring> #include <cstring> #include <cstring> #include <cstring> #include <cstring> #include <cstring> #include <cstring> #include <cstring> #include <cstring> #include <cstring> #include <cstring> #include <cstring> #include <cstring> #include <cstring> #include <cstring> #include <cstring> #include <cstring> #include <cstring> #include <cstring> #include <cstring> #include <cstring> #include <cstring> #include <cstring> #include <cstring> #include <cstring> #include <cstring> #include <cstring> #include <cstring> #include <cstring> #include <cstring> #include <cstring> #include <cstring> #include <cstring> #include <cstring> #include <cstring> #include <cstring> #include <cstring> #include <cstring> #include <cstring> #include <cstring> #include <cstring> #include <cstring> #include <cstring> #include <cstring> #include <cstring> #include <cstring> #include <cstring> #include <cstring> #include <cstring> #include <cstring> #include <cstring> #include <cstring> #include <cstring> #include <cstring> #include <cstring> #include <cstring> #include <cstring> #include <c
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of PHPExifTool.  *  * (c) 2012 Romain Neutron <imprec@gmail.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace PHPExiftool\Driver\Tag\DICOM;  use JMS\Serializer\Annotation\ExclusionPolicy; use PHPExiftool\Driver\AbstractTag;  /**  * @ExclusionPolicy("all")  */ class Color extends AbstractTag {      protected $Id = '0018,0018';      protected $Name = 'Color';      protected $FullName = 'DICOM::Main';      protected $GroupName = 'DICOM';      protected $g0 = 'DICOM';      protected $g1 = 'DICOM';      protected $g2 = 'Image';      protected $Type = '?';      protected $Writable = false;      protected $Description = 'Color';  } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.functions.IFunctionDescriptorProvider; import org.apache.asterix.om.types.ATypeTag; import org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor; import org.apache.asterix.runtime.evaluators.base.IScalarEvaluator; import org.apache.asterix.runtime.evaluators.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.
<?php  /*  * This file is part of PHPExifTool.  *  * (c) 2012 Romain Neutron <imprec@gmail.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace PHPExiftool\Driver\Tag\DICOM;  use JMS\Serializer\Annotation\ExclusionPolicy; use PHPExiftool\Driver\AbstractTag;  /**  * @ExclusionPolicy("all")  */ class Color extends AbstractTag {      protected $Id = '0018,0018';      protected $Name = 'Color';      protected $FullName = 'DICOM::Main';      protected $GroupName = 'DICOM';      protected $g0 = 'DICOM';      protected $g1 = 'DICOM';      protected $g2 = 'Image';      protected $Type = '?';      protected $Writable = false;      protected $Description = 'Color';  } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializer; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializerProvider; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.
<?php  /*  * This file is part of PHPExifTool.  *  * (c) 2012 Romain Neutron <imprec@gmail.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace PHPExiftool\Driver\Tag\DICOM;  use JMS\Serializer\Annotation\ExclusionPolicy; use PHPExiftool\Driver\AbstractTag;  /**  * @ExclusionPolicy("all")  */ class Color extends AbstractTag {      protected $Id = '0018,0018';      protected $Name = 'Color';      protected $FullName = 'DICOM::Main';      protected $GroupName = 'DICOM';      protected $g0 = 'DICOM';      protected $g1 = 'DICOM';      protected $g2 = 'Image';      protected $Type = '?';      protected $Writable = false;      protected $Description = 'Color';  } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializer; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializerProvider; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.data.accessors.ITupleReference; import org.apache.hy
<?php /**  * Zend Framework  *  * LICENSE  *  * This source file is subject to the new BSD license that is bundled  * with this package in the file LICENSE.txt.  * It is also available through the world-wide-web at this URL:  * http://framework.zend.com/license/new-bsd  * If you did not receive a copy of the license and are unable to  * obtain it through the world-wide-web, please send an email  * to license@zend.com so we can send you a copy immediately.  *  * @category   Zend  * @package    Zend_Service  * @subpackage DeveloperGarden  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  * @version    $Id$  */  /**  * @see Zend_Service_DeveloperGarden_Exception  */ require_once 'Zend/Service/DeveloperGarden/Exception.php';  /**  * @category   Zend  * @package    Zend_Service  * @subpackage DeveloperGarden  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  */ class Zend_Service_DeveloperGarden_Exception extends Zend_Service_DeveloperGarden_Exception { } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of PHPExifTool.  *  * (c) 2012 Romain Neutron <imprec@gmail.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace PHPExiftool\Driver\Tag\DICOM;  use JMS\Serializer\Annotation\ExclusionPolicy; use PHPExiftool\Driver\AbstractTag;  /**  * @ExclusionPolicy("all")  */ class Color extends AbstractTag {      protected $Id = '0018,0018';      protected $Name = 'Color';      protected $FullName = 'DICOM::Main';      protected $GroupName = 'DICOM';      protected $g0 = 'DICOM';      protected $g1 = 'DICOM';      protected $g2 = 'Image';      protected $Type = '?';      protected $Writable = false;      protected $Description = 'Color';  } 
<?php  /*  * This file is part of PHPExifTool.  *  * (c) 2012 Romain Neutron <imprec@gmail.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace PHPExiftool\Driver\Tag\DICOM;  use JMS\Serializer\Annotation\ExclusionPolicy; use PHPExiftool\Driver\AbstractTag;  /**  * @ExclusionPolicy("all")  */ class Color extends AbstractTag {      protected $Id = '0018,0018';      protected $Name = 'Color';      protected $FullName = 'DICOM::Main';      protected $GroupName = 'DICOM';      protected $g0 = 'DICOM';      protected $g1 = 'DICOM';      protected $g2 = 'Image';      protected $Type = '?';      protected $Writable = false;      protected $Description = 'Color';  } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php /**  * Zend Framework  *  * LICENSE  *  * This source file is subject to the new BSD license that is bundled  * with this package in the file LICENSE.txt.  * It is also available through the world-wide-web at this URL:  * http://framework.zend.com/license/new-bsd  * If you did not receive a copy of the license and are unable to  * obtain it through the world-wide-web, please send an email  * to license@zend.com so we can send you a copy immediately.  *  * @category   Zend  * @package    Zend_Service  * @subpackage DeveloperGarden  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  * @version    $Id$  */  /**  * @see Zend_Service_DeveloperGarden_Exception  */ require_once 'Zend/Service/DeveloperGarden/Exception.php';  /**  * @category   Zend  * @package    Zend_Service  * @subpackage DeveloperGarden  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  */ class Zend_Service_DeveloperGarden_Exception extends Zend_Service_DeveloperGarden_Exception { } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of PHPExifTool.  *  * (c) 2012 Romain Neutron <imprec@gmail.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace PHPExiftool\Driver\Tag\DICOM;  use JMS\Serializer\Annotation\ExclusionPolicy; use PHPExiftool\Driver\AbstractTag;  /**  * @ExclusionPolicy("all")  */ class Color extends AbstractTag {      protected $Id = '0018,0018';      protected $Name = 'Color';      protected $FullName = 'DICOM::Main';      protected $GroupName = 'DICOM';      protected $g0 = 'DICOM';      protected $g1 = 'DICOM';      protected $g2 = 'Image';      protected $Type = '?';      protected $Writable = false;      protected $Description = 'Color';  } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializer; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializerProvider; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.
<?php  /*  * This file is part of PHPExifTool.  *  * (c) 2012 Romain Neutron <imprec@gmail.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace PHPExiftool\Driver\Tag\DICOM;  use JMS\Serializer\Annotation\ExclusionPolicy; use PHPExiftool\Driver\AbstractTag;  /**  * @ExclusionPolicy("all")  */ class Color extends AbstractTag {      protected $Id = '0018,0018';      protected $Name = 'Color';      protected $FullName = 'DICOM::Main';      protected $GroupName = 'DICOM';      protected $g0 = 'DICOM';      protected $g1 = 'DICOM';      protected $g2 = 'Image';      protected $Type = '?';      protected $Writable = false;      protected $Description = 'Color';  } 
<?php  /*  * This file is part of PHPExifTool.  *  * (c) 2012 Romain Neutron <imprec@gmail.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace PHPExiftool\Driver\Tag\DICOM;  use JMS\Serializer\Annotation\ExclusionPolicy; use PHPExiftool\Driver\AbstractTag;  /**  * @ExclusionPolicy("all")  */ class Color extends AbstractTag {      protected $Id = '0018,0018';      protected $Name = 'Color';      protected $FullName = 'DICOM::Main';      protected $GroupName = 'DICOM';      protected $g0 = 'DICOM';      protected $g1 = 'DICOM';      protected $g2 = 'Image';      protected $Type = '?';      protected $Writable = false;      protected $Description = 'Color';  } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.product.name',                 'required' => false,                 'attr' => array(                     'class' => 'form-control',                 ),             ))             ->add('price', 'text', array(                 'label' => 'sylius.form.product.price',                 'required' => false,                 'attr' => array(                     'class' => 'form-control',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.product.name',                 'attr' => array(                     'class' => 'form-control',                 ),             ))             ->add('price', 'number', array(                 'label' => 'sylius.form.product.price',                 'attr' => array(                     'class' => 'form-control',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
n",x+1);    a[x]=y;    update(x);    int r=gr(x);    for (j=x-1;j>=gl(x);j--)     if (j+a[j]<=x){      wei[j] = 1;      next[j] = j + a[j];      if (next[next[j]]<=r){       wei[j] = wei[next[j]] + 1;       next[j] = next[next[j]];      }     }   }  return 0; } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.functions.IFunctionDescriptorProvider; import org.apache.asterix.om.types.ATypeTag; import org.apache.asterix.om.types.BuiltinType; import org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor; import org.apache.asterix.runtime.evaluators.base.IScalarEvaluator; import org.apache.asterix.runtime.evaluators.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.algebricks.runtime.
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'required' => false,             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'required' => false,             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
<?php  /*  * This file is part of PHPExifTool.  *  * (c) 2012 Romain Neutron <imprec@gmail.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace PHPExiftool\Driver\Tag\DICOM;  use JMS\Serializer\Annotation\ExclusionPolicy; use PHPExiftool\Driver\AbstractTag;  /**  * @ExclusionPolicy("all")  */ class ImageWidth extends AbstractTag {      protected $Id = '0018,0018';      protected $Name = 'ImageWidth';      protected $FullName = 'DICOM::Main';      protected $GroupName = 'DICOM';      protected $g0 = 'DICOM';      protected $g1 = 'DICOM';      protected $g2 = 'Image';      protected $Type = '?';      protected $Writable = false;      protected $Description = 'Image Width';  } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */  package org.apache.druid.query.aggregation;  import com.fasterxml.jackson.annotation.JsonCreator; import com.fasterxml.jackson.annotation.JsonProperty; import com.fasterxml.jackson.annotation.JsonTypeInfo; import com.fasterxml.jackson.annotation.JsonTypeInfo.Id; import com.fasterxml.jackson.annotation.JsonTypeName; import com.google.common.base.Preconditions; import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Iterables; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import org.apache.druid.java.util.common.ISE; import org.apache.druid.java.util.common.logger.Logger; import org.apache.druid.java.util.common.logger.LoggerFactory; import org.apache.druid.java.util.common.guava.Sequence; import org.apache.druid.java.util.common.guava.Sequences; import org.apache.druid.java
<?php  /*  * This file is part of PHPExifTool.  *  * (c) 2012 Romain Neutron <imprec@gmail.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace PHPExiftool\Driver\Tag\DICOM;  use JMS\Serializer\Annotation\ExclusionPolicy; use PHPExiftool\Driver\AbstractTag;  /**  * @ExclusionPolicy("all")  */ class Color extends AbstractTag {      protected $Id = '0018,0018';      protected $Name = 'Color';      protected $FullName = 'DICOM::Main';      protected $GroupName = 'DICOM';      protected $g0 = 'DICOM';      protected $g1 = 'DICOM';      protected $g2 = 'Image';      protected $Type = '?';      protected $Writable = false;      protected $Description = 'Color';  } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializer; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializerProvider; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.data.accessors.ITupleReference; import org.apache.hyracks
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializer; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializerProvider; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.
<?php  /*  * This file is part of PHPExifTool.  *  * (c) 2012 Romain Neutron <imprec@gmail.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace PHPExiftool\Driver\Tag\DICOM;  use JMS\Serializer\Annotation\ExclusionPolicy; use PHPExiftool\Driver\AbstractTag;  /**  * @ExclusionPolicy("all")  */ class Color extends AbstractTag {      protected $Id = '0018,0018';      protected $Name = 'Color';      protected $FullName = 'DICOM::Main';      protected $GroupName = 'DICOM';      protected $g0 = 'DICOM';      protected $g1 = 'DICOM';      protected $g2 = 'Image';      protected $Type = '?';      protected $Writable = false;      protected $Description = 'Color';  } 
<?php  /*  * This file is part of the Symfony package.  *  * (c) Fabien Potencier <fabien@symfony.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace Symfony\Component\Form\Extension\Core\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface; use Symfony\Component\Validator\Constraints\NotBlank; use Symfony\Component\Validator\Constraints\Email; use Symfony\Component\Validator\Constraints\Length; use Symfony\Component\Validator\Constraints\Regex; use Symfony\Component\Validator\Constraints\NotBlank; use Symfony\Component\Validator\Constraints\RegexType; use Symfony\Component\Validator\Exception\UnexpectedTypeException; use Symfony\Component\Validator\Validator; use Symfony\Component\Validator\ValidatorInterface;  /**  * @author Fabien Potencier <fabien@symfony.com>  */ class EmailType extends AbstractType {     /**      * {@inheritdoc}      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('subject', 'text', array(                 'label' => 'subject',                 'required' => false,             ))             ->add('message', 'textarea', array(                 'label' => 'message',                 'required' => false,             ))         ;     }      /**      * {@inheritdoc}      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Symfony\Component\Form\Extension\Core\Type\EmailType'         ));     }      /**      * {@inheritdoc}      */     public function getName()     {         return 'symfony_form_email';     }      /**      * {@inheritdoc}      */     public function getBlockPrefix()     {         return 'symfony_form_email';    
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializer; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializerProvider; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
<?php  /*  * This file is part of PHPExifTool.  *  * (c) 2012 Romain Neutron <imprec@gmail.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace PHPExiftool\Driver\Tag\DICOM;  use JMS\Serializer\Annotation\ExclusionPolicy; use PHPExiftool\Driver\AbstractTag;  /**  * @ExclusionPolicy("all")  */ class Color extends AbstractTag {      protected $Id = '0018,0018';      protected $Name = 'Color';      protected $FullName = 'DICOM::Main';      protected $GroupName = 'DICOM';      protected $g0 = 'DICOM';      protected $g1 = 'DICOM';      protected $g2 = 'Image';      protected $Type = '?';      protected $Writable = false;      protected $Description = 'Color';  } 
<?php  /*  * This file is part of the Symfony package.  *  * (c) Fabien Potencier <fabien@symfony.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace Symfony\Component\Form\Extension\Core\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface; use Symfony\Component\Validator\Constraints\NotBlank; use Symfony\Component\Validator\Constraints\Email; use Symfony\Component\Validator\Constraints\Length; use Symfony\Component\Validator\Constraints\NotBlank; use Symfony\Component\Validator\Constraints\MinLength; use Symfony\Component\Validator\Constraints\Pattern; use Symfony\Component\Validator\Constraints\Regex; use Symfony\Component\Validator\Exception\InvalidArgumentException; use Symfony\Component\Validator\Exception\UnexpectedTypeException; use Symfony\Component\Validator\Validator; use Symfony\Component\Validator\ValidatorInterface; use Symfony\Component\Validator\ValidatorFactory; use Symfony\Component\Validator\ValidatorFactoryInterface; use Symfony\Component\Validator\ValidatorFactoryInterface\ValidatorFactoryInterface; use Symfony\Component\Validator\ValidatorFactoryInterface\ValidatorFactoryInterface; use Symfony\Component\Validator\ValidatorInterface; use Symfony\Component\Validator\ValidatorFactoryInterface\ValidatorFactoryInterface; use Symfony\Component\Validator\ValidatorFactoryInterface\ValidatorFactoryInterface; use Symfony\Component\Validator\ValidatorInterface; use Symfony\Component\Validator\ValidatorFactoryInterface\ValidatorFactoryInterface; use Symfony\Component\Validator\ValidatorFactoryInterface\ValidatorFactoryInterface; use Symfony\Component\Validator\ValidatorInterface; use Symfony\Component\Validator\ValidatorFactoryInterface\ValidatorFactoryInterface; use Symfony\Component\Validator\ValidatorInterface; use Symfony\Component\Validator\ValidatorFactoryInterface\ValidatorFactoryInterface; use Symfony\Component\Validator\ValidatorInterface; use Symfony\Component\Validator\ValidatorFactoryInterface\ValidatorFactoryInterface; use Symfony\Component\Validator\ValidatorInterface; use Symfony\Component\Validator\ValidatorFactoryInterface\ValidatorFactoryInterface; use Symfony\Component\Validator
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializer; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializerProvider; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializer; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializerProvider; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.product.name',                 'required' => false,             ))             ->add('price', 'number', array(                 'label' => 'sylius.form.product.price',                 'required' => false,             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */  package org.apache.druid.query.aggregation;  import com.fasterxml.jackson.annotation.JsonCreator; import com.fasterxml.jackson.annotation.JsonProperty; import com.fasterxml.jackson.annotation.JsonTypeInfo; import com.fasterxml.jackson.annotation.JsonTypeInfo.As; import com.fasterxml.jackson.annotation.JsonTypeInfo.Id; import com.fasterxml.jackson.annotation.JsonTypeName; import com.google.common.base.Preconditions; import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Iterables; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import org.apache.druid.java.util.common.ISE; import org.apache.druid.java.util.common.logger.Logger; import org.apache.druid.java.util.common.logger.LoggerFactory; import org.apache.druid.java.util.common.util.concurrent.ThreadFactoryBuilder; import org.apache.druid
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of PHPExifTool.  *  * (c) 2012 Romain Neutron <imprec@gmail.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace PHPExiftool\Driver\Tag\DICOM;  use JMS\Serializer\Annotation\ExclusionPolicy; use PHPExiftool\Driver\AbstractTag;  /**  * @ExclusionPolicy("all")  */ class Color extends AbstractTag {      protected $Id = '0018,0018';      protected $Name = 'Color';      protected $FullName = 'DICOM::Main';      protected $GroupName = 'DICOM';      protected $g0 = 'DICOM';      protected $g1 = 'DICOM';      protected $g2 = 'Image';      protected $Type = '?';      protected $Writable = false;      protected $Description = 'Color';  } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.product.name',                 'required' => false,                 'attr' => array(                     'class' => 'form-control',                 ),             ))             ->add('price', 'text', array(                 'label' => 'sylius.form.product.price',                 'required' => false,                 'attr' => array(                     'class' => 'form-control',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
<?php  /*  * This file is part of the Symfony package.  *  * (c) Fabien Potencier <fabien@symfony.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace Symfony\Component\Form\Extension\Core\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\Form\FormEvent; use Symfony\Component\Form\FormEvents; use Symfony\Component\Form\FormInterface; use Symfony\Component\Form\FormView; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Fabien Potencier <fabien@symfony.com>  */ class TextType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('text', 'text')             ->add('submit', 'submit')         ;     }      /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Symfony\Component\Form\Extension\Core\Type\TextType'         ));     }      /**      * @return string      */     public function getName()     {         return 'Symfony\Component\Form\Extension\Core\Type\TextType';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.functions.IFunctionDescriptorProvider; import org.apache.asterix.om.types.ATypeTag; import org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor; import org.apache.asterix.runtime.evaluators.base.IScalarEvaluator; import org.apache.asterix.runtime.evaluators.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.product.name',                 'required' => false,             ))             ->add('price', 'number', array(                 'label' => 'sylius.form.product.price',                 'required' => false,             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of PHPExifTool.  *  * (c) 2012 Romain Neutron <imprec@gmail.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace PHPExiftool\Driver\Tag\DICOM;  use JMS\Serializer\Annotation\ExclusionPolicy; use PHPExiftool\Driver\AbstractTag;  /**  * @ExclusionPolicy("all")  */ class Color extends AbstractTag {      protected $Id = '0018,0018';      protected $Name = 'Color';      protected $FullName = 'DICOM::Main';      protected $GroupName = 'DICOM';      protected $g0 = 'DICOM';      protected $g1 = 'DICOM';      protected $g2 = 'Image';      protected $Type = '?';      protected $Writable = false;      protected $Description = 'Color';  } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializer; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializerProvider; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializer; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializerProvider; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializer; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializerProvider; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of PHPExifTool.  *  * (c) 2012 Romain Neutron <imprec@gmail.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace PHPExiftool\Driver\Tag\DICOM;  use JMS\Serializer\Annotation\ExclusionPolicy; use PHPExiftool\Driver\AbstractTag;  /**  * @ExclusionPolicy("all")  */ class Color extends AbstractTag {      protected $Id = '0018,0018';      protected $Name = 'Color';      protected $FullName = 'DICOM::Main';      protected $GroupName = 'DICOM';      protected $g0 = 'DICOM';      protected $g1 = 'DICOM';      protected $g2 = 'Image';      protected $Type = '?';      protected $Writable = false;      protected $Description = 'Color';  } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
<?php  /*  * This file is part of the Symfony package.  *  * (c) Fabien Potencier <fabien@symfony.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace Symfony\Component\Form\Extension\Core\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface; use Symfony\Component\Validator\Constraints\NotBlank; use Symfony\Component\Validator\Constraints\Email; use Symfony\Component\Validator\Constraints\Length; use Symfony\Component\Validator\Constraints\MinLength; use Symfony\Component\Validator\Constraints\Regex; use Symfony\Component\Validator\Constraints\NotBlank; use Symfony\Component\Validator\Constraint; use Symfony\Component\Validator\ConstraintValidator; use Symfony\Component\Validator\Exception\UnexpectedTypeException; use Symfony\Component\Validator\Validator;  /**  * @author Fabien Potencier <fabien@symfony.com>  */ class EmailType extends AbstractType {     /**      * {@inheritdoc}      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('subject', 'text', array(                 'label' => 'subject',                 'required' => false,             ))             ->add('message', 'textarea', array(                 'label' => 'message',                 'required' => false,             ))         ;     }      /**      * {@inheritdoc}      */     public function configureOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Symfony\Component\Form\Extension\Core\Data\Email'         ));     }      /**      * {@inheritdoc}      */     public function getBlockPrefix()     {         return 'symfony_form_email';     }      /**      * {@inheritdoc}      */     public function getName()     {         return 'sym
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'required' => false,             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'required' => false,             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of the Symfony package.  *  * (c) Fabien Potencier <fabien@symfony.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace Symfony\Component\Form\Extension\Core\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface; use Symfony\Component\Validator\Constraints\NotBlank; use Symfony\Component\Validator\Constraints\Email; use Symfony\Component\Validator\Constraints\Length; use Symfony\Component\Validator\Constraints\MinLength; use Symfony\Component\Validator\Constraints\Regex; use Symfony\Component\Validator\Constraints\NotBlank; use Symfony\Component\Validator\Constraints\Length; use Symfony\Component\Validator\Constraints\MinLength; use Symfony\Component\Validator\Constraints\Pattern; use Symfony\Component\Validator\Constraints\Regex; use Symfony\Component\Validator\Exception\UnexpectedTypeException; use Symfony\Component\Validator\Validator; use Symfony\Component\Validator\ValidatorInterface;  /**  * @author Fabien Potencier <fabien@symfony.com>  */ class EmailType extends AbstractType {     /**      * {@inheritdoc}      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('subject', 'text', array(                 'label' => 'subject',                 'required' => false,             ))             ->add('message', 'textarea', array(                 'label' => 'message',                 'required' => false,             ))         ;     }      /**      * {@inheritdoc}      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Symfony\Component\Form\Extension\Core\Type\EmailType'         ));     }      /**      * {@inheritdoc}      */     public function getName()     { 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializer; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializerProvider; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.product.name',                 'required' => false,                 'attr' => array(                     'class' => 'form-control',                 ),             ))             ->add('price', 'text', array(                 'label' => 'sylius.form.product.price',                 'required' => false,                 'attr' => array(                     'class' => 'form-control',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.product.name',                 'required' => false,             ))             ->add('price', 'number', array(                 'label' => 'sylius.form.product.price',                 'required' => false,             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializer; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializerProvider; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.product.name',                 'required' => false,                 'attr' => array(                     'class' => 'form-control',                 ),             ))             ->add('price', 'text', array(                 'label' => 'sylius.form.product.price',                 'required' => false,                 'attr' => array(                     'class' => 'form-control',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
<?php  /*  * This file is part of PHPExifTool.  *  * (c) 2012 Romain Neutron <imprec@gmail.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace PHPExiftool\Driver\Tag\DICOM;  use JMS\Serializer\Annotation\ExclusionPolicy; use PHPExiftool\Driver\AbstractTag;  /**  * @ExclusionPolicy("all")  */ class Color extends AbstractTag {      protected $Id = '0018,0018';      protected $Name = 'Color';      protected $FullName = 'DICOM::Main';      protected $GroupName = 'DICOM';      protected $g0 = 'DICOM';      protected $g1 = 'DICOM';      protected $g2 = 'Image';      protected $Type = '?';      protected $Writable = false;      protected $Description = 'Color';  } 
//imrat_68  #include<stdlib.h>  int main(void)  {      int t;      scanf("%d",&t);      while(t--){      char s[4];      scanf("%s",s);      for(int i=0;i<4;i++)          s[i]=tolower(s[i]);      int a;      a=strcmp(s,"yes");      if(a==0) printf("YES\n");      else printf("NO\n");      return 0;  }} //imrat_69  #include<stdio.h>  int main(void)  {      int t;      scanf("%d",&t);      while(t--){      char s[4];      scanf("%s",s);      for(int i=0;i<4;i++)          s[i]=tolower(s[i]);      int a;      a=strcmp(s,"yes");      if(a==0) printf("YES\n");      else printf("NO\n");      return 0;  }} //imrat_70  #include<stdlib.h>  int main(void)  {      int t;      scanf("%d",&t);      while(t--){      char s[4];      scanf("%s",s);      for(int i=0;i<4;i++)          s[i]=tolower(s[i]);      int a;      a=strcmp(s,"yes");      if(a==0) printf("YES\n");      else printf("NO\n");      return 0;  }} //imrat_71  #include<stdio.h>  int main(void)  {      int t;      scanf("%d",&t);      while(t--){      char s[4];      scanf("%s",s);      for(int i=0;i<4;i++)          s[i]=tolower(s[i]);      int a;      a=strcmp(s,"yes");      if(a==0) printf("YES\n");      else printf("NO\n");      return 0;  }} //imrat_72  #include<stdlib.h>  int main(
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.product.name',                 'attr' => array(                     'class' => 'form-control'                 )             ))             ->add('price', 'number', array(                 'label' => 'sylius.form.product.price',                 'attr' => array(                     'class' => 'form-control'                 )             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
<?php  /*  * This file is part of PHPExifTool.  *  * (c) 2012 Romain Neutron <imprec@gmail.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace PHPExiftool\Driver\Tag\DICOM;  use JMS\Serializer\Annotation\ExclusionPolicy; use PHPExiftool\Driver\AbstractTag;  /**  * @ExclusionPolicy("all")  */ class Color extends AbstractTag {      protected $Id = '0018,0018';      protected $Name = 'Color';      protected $FullName = 'DICOM::Main';      protected $GroupName = 'DICOM';      protected $g0 = 'DICOM';      protected $g1 = 'DICOM';      protected $g2 = 'Image';      protected $Type = '?';      protected $Writable = false;      protected $Description = 'Color';  } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.product.name',                 'required' => false,             ))             ->add('price', 'number', array(                 'label' => 'sylius.form.product.price',                 'required' => false,             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.product.name',                 'required' => false,                 'attr' => array(                     'class' => 'form-control',                 ),             ))             ->add('price', 'text', array(                 'label' => 'sylius.form.product.price',                 'required' => false,                 'attr' => array(                     'class' => 'form-control',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
<?php  /*  * This file is part of PHPExifTool.  *  * (c) 2012 Romain Neutron <imprec@gmail.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace PHPExiftool\Driver\Tag\DICOM;  use JMS\Serializer\Annotation\ExclusionPolicy; use PHPExiftool\Driver\AbstractTag;  /**  * @ExclusionPolicy("all")  */ class Color extends AbstractTag {      protected $Id = '0018,0018';      protected $Name = 'Color';      protected $FullName = 'DICOM::Main';      protected $GroupName = 'DICOM';      protected $g0 = 'DICOM';      protected $g1 = 'DICOM';      protected $g2 = 'Image';      protected $Type = '?';      protected $Writable = false;      protected $Description = 'Color';  } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.product.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.product.name',                 ),             ))             ->add('price', 'text', array(                 'label' => 'sylius.form.product.price',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.product.price',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
<?php  /*  * This file is part of PHPExifTool.  *  * (c) 2012 Romain Neutron <imprec@gmail.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace PHPExiftool\Driver\Tag\DICOM;  use JMS\Serializer\Annotation\ExclusionPolicy; use PHPExiftool\Driver\AbstractTag;  /**  * @ExclusionPolicy("all")  */ class Color extends AbstractTag {      protected $Id = '0018,0018';      protected $Name = 'Color';      protected $FullName = 'DICOM::Main';      protected $GroupName = 'DICOM';      protected $g0 = 'DICOM';      protected $g1 = 'DICOM';      protected $g2 = 'Image';      protected $Type = '?';      protected $Writable = false;      protected $Description = 'Color';  } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializer; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializerProvider; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.
<?php  /*  * This file is part of PHPExifTool.  *  * (c) 2012 Romain Neutron <imprec@gmail.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace PHPExiftool\Driver\Tag\DICOM;  use JMS\Serializer\Annotation\ExclusionPolicy; use PHPExiftool\Driver\AbstractTag;  /**  * @ExclusionPolicy("all")  */ class Color extends AbstractTag {      protected $Id = '0018,0018';      protected $Name = 'Color';      protected $FullName = 'DICOM::Main';      protected $GroupName = 'DICOM';      protected $g0 = 'DICOM';      protected $g1 = 'DICOM';      protected $g2 = 'Image';      protected $Type = '?';      protected $Writable = false;      protected $Description = 'Color';  } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'required' => false,             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'required' => false,             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
<?php /**  * Zend Framework  *  * LICENSE  *  * This source file is subject to the new BSD license that is bundled  * with this package in the file LICENSE.txt.  * It is also available through the world-wide-web at this URL:  * http://framework.zend.com/license/new-bsd  * If you did not receive a copy of the license and are unable to  * obtain it through the world-wide-web, please send an email  * to license@zend.com so we can send you a copy immediately.  *  * @category   Zend  * @package    Zend_Service  * @subpackage DeveloperGarden  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  * @version    $Id$  */  /**  * @see Zend_Service_DeveloperGarden_Exception  */ require_once 'Zend/Service/DeveloperGarden/Exception.php';  /**  * @category   Zend  * @package    Zend_Service  * @subpackage DeveloperGarden  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  */ class Zend_Service_DeveloperGarden_Exception_Service extends Zend_Service_DeveloperGarden_Exception { } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.functions.IFunctionDescriptorProvider; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.data.accessors.ITupleReference; import org.apache.hyracks.dataflow.common.data
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializer; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializerProvider; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializer; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializerProvider; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.
<?php  /*  * This file is part of PHPExifTool.  *  * (c) 2012 Romain Neutron <imprec@gmail.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace PHPExiftool\Driver\Tag\DICOM;  use JMS\Serializer\Annotation\ExclusionPolicy; use PHPExiftool\Driver\AbstractTag;  /**  * @ExclusionPolicy("all")  */ class ImageWidth extends AbstractTag {      protected $Id = '0018,0018';      protected $Name = 'ImageWidth';      protected $FullName = 'DICOM::Main';      protected $GroupName = 'DICOM';      protected $g0 = 'DICOM';      protected $g1 = 'DICOM';      protected $g2 = 'Image';      protected $Type = '?';      protected $Writable = false;      protected $Description = 'Image Width';  } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'required' => false,             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'required' => false,             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializer; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializerProvider; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.
<?php  /*  * This file is part of PHPExifTool.  *  * (c) 2012 Romain Neutron <imprec@gmail.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace PHPExiftool\Driver\Tag\DICOM;  use JMS\Serializer\Annotation\ExclusionPolicy; use PHPExiftool\Driver\AbstractTag;  /**  * @ExclusionPolicy("all")  */ class Color extends AbstractTag {      protected $Id = '0018,0018';      protected $Name = 'Color';      protected $FullName = 'DICOM::Main';      protected $GroupName = 'DICOM';      protected $g0 = 'DICOM';      protected $g1 = 'DICOM';      protected $g2 = 'Image';      protected $Type = '?';      protected $Writable = false;      protected $Description = 'Color';  } 
<?php  /*  * This file is part of PHPExifTool.  *  * (c) 2012 Romain Neutron <imprec@gmail.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace PHPExiftool\Driver\Tag\DICOM;  use JMS\Serializer\Annotation\ExclusionPolicy; use PHPExiftool\Driver\AbstractTag;  /**  * @ExclusionPolicy("all")  */ class Color extends AbstractTag {      protected $Id = '0018,0018';      protected $Name = 'Color';      protected $FullName = 'DICOM::Main';      protected $GroupName = 'DICOM';      protected $g0 = 'DICOM';      protected $g1 = 'DICOM';      protected $g2 = 'Image';      protected $Type = '?';      protected $Writable = false;      protected $Description = 'Color';  } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.product.name',                 'attr' => array(                     'class' => 'form-control',                 ),             ))             ->add('price', 'number', array(                 'label' => 'sylius.form.product.price',                 'attr' => array(                     'class' => 'form-control',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of the Symfony package.  *  * (c) Fabien Potencier <fabien@symfony.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace Symfony\Component\DependencyInjection\Compiler;  use Symfony\Component\DependencyInjection\ContainerBuilder; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\RuntimeException; use Symfony\Component\DependencyInjection\ParameterBag\ParameterBag; use Symfony\Component\DependencyInjection\Reference; use Symfony\Component\DependencyInjection\ParameterBag\ParameterBagInterface; use Symfony\Component\DependencyInjection\Reference\ParameterReference; use Symfony\Component\DependencyInjection\Reference\ParameterReferenceInterface; use Symfony\Component\DependencyInjection\Reference\ParameterReferenceReference; use Symfony\Component\DependencyInjection\Reference\ParameterReferenceReference; use Symfony\Component\DependencyInjection\Reference\ParameterReferenceReference; use Symfony\Component\DependencyInjection\Reference\ParameterReferenceReference; use Symfony\Component\DependencyInjection\Reference\ParameterReferenceReference; use Symfony\Component\DependencyInjection\Reference\ParameterReferenceReference; use Symfony\Component\DependencyInjection\Reference\ParameterReferenceReference; use Symfony\Component\DependencyInjection\Reference\ParameterReferenceReference; use Symfony\Component\DependencyInjection\Reference\ParameterReferenceReference; use Symfony\Component\DependencyInjection\Reference\ParameterReferenceReference; use Symfony\Component\DependencyInjection\Reference\ParameterReferenceReference; use Symfony\Component\DependencyInjection\Reference\ParameterReferenceReference; use Symfony\Component\DependencyInjection\Reference\ParameterReferenceReference; use Symfony\Component\DependencyInjection\Reference\ParameterReferenceReference; use Symfony\Component\DependencyInjection\Reference\ParameterReferenceReference; use Symfony\Component\DependencyInjection\Reference\ParameterReferenceReference; use Symfony\Component\DependencyInjection\Reference\ParameterReferenceReference; use Symfony\Component\DependencyInjection\Reference\ParameterReferenceReference; use Symfony\Component\DependencyInjection\Reference\ParameterReferenceReference; use Symfony\Component\DependencyInjection\Reference\ParameterReferenceReference; use Symfony\Component\DependencyInjection\Reference\ParameterReferenceReference; use Symfony
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.product.name',                 'required' => false,             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.product.description',                 'required' => false,             ))         ;     }      /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
<?php  /*  * This file is part of PHPExifTool.  *  * (c) 2012 Romain Neutron <imprec@gmail.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace PHPExiftool\Driver\Tag\DICOM;  use JMS\Serializer\Annotation\ExclusionPolicy; use PHPExiftool\Driver\AbstractTag;  /**  * @ExclusionPolicy("all")  */ class Color extends AbstractTag {      protected $Id = '0018,0018';      protected $Name = 'Color';      protected $FullName = 'DICOM::Main';      protected $GroupName = 'DICOM';      protected $g0 = 'DICOM';      protected $g1 = 'DICOM';      protected $g2 = 'Image';      protected $Type = '?';      protected $Writable = false;      protected $Description = 'Color'; } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */  package org.apache.druid.query.aggregation;  import com.fasterxml.jackson.annotation.JsonCreator; import com.fasterxml.jackson.annotation.JsonProperty; import com.fasterxml.jackson.annotation.JsonTypeInfo; import com.fasterxml.jackson.annotation.JsonTypeInfo.Id; import com.fasterxml.jackson.annotation.JsonTypeName; import com.google.common.base.Preconditions; import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Iterables; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import org.apache.druid.java.util.common.ISE; import org.apache.druid.java.util.common.logger.Logger; import org.apache.druid.java.util.common.logger.LoggerFactory; import org.apache.druid.java.util.common.util.concurrent.FutureCallback; import org.apache.druid.java.util.common.util.concurrent.Futures; import org.apache
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'required' => false,             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'required' => false,             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializer; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializerProvider; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.product.name',                 'required' => false,             ))             ->add('price', 'number', array(                 'label' => 'sylius.form.product.price',                 'required' => false,             ))         ;     }      /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */  package org.apache.druid.segment;  import com.fasterxml.jackson.annotation.JsonCreator; import com.fasterxml.jackson.annotation.JsonProperty; import com.fasterxml.jackson.annotation.JsonTypeInfo; import com.fasterxml.jackson.annotation.JsonTypeInfo.Id; import com.fasterxml.jackson.annotation.JsonTypeInfo.As; import com.fasterxml.jackson.annotation.JsonTypeName; import com.google.common.base.Preconditions; import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Iterables; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import org.apache.druid.java.util.common.ISE; import org.apache.druid.java.util.common.logger.Logger; import org.apache.druid.java.util.common.logger.LoggerFactory; import org.apache.druid.java.util.common.logger.Loggers; import org.apache.druid.java.util.common
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
<?php  /*  * This file is part of PHPExifTool.  *  * (c) 2012 Romain Neutron <imprec@gmail.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace PHPExiftool\Driver\Tag\DICOM;  use JMS\Serializer\Annotation\ExclusionPolicy; use PHPExiftool\Driver\AbstractTag;  /**  * @ExclusionPolicy("all")  */ class Color extends AbstractTag {      protected $Id = '0018,0018';      protected $Name = 'Color';      protected $FullName = 'DICOM::Main';      protected $GroupName = 'DICOM';      protected $g0 = 'DICOM';      protected $g1 = 'DICOM';      protected $g2 = 'Image';      protected $Type = '?';      protected $Writable = false;      protected $Description = 'Color';  } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.product.name',                 'required' => false,             ))             ->add('price', 'number', array(                 'label' => 'sylius.form.product.price',                 'required' => false,             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */  package org.apache.druid.segment;  import com.fasterxml.jackson.annotation.JsonCreator; import com.fasterxml.jackson.annotation.JsonProperty; import com.fasterxml.jackson.annotation.JsonTypeInfo; import com.fasterxml.jackson.annotation.JsonTypeInfo.Id; import com.fasterxml.jackson.annotation.JsonTypeInfo.As; import com.fasterxml.jackson.annotation.JsonTypeName; import com.google.common.base.Preconditions; import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Iterables; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import org.apache.druid.java.util.common.StringUtils; import org.apache.druid.java.util.common.logger.Logger; import org.apache.druid.java.util.common.logger.LoggerFactory; import org.apache.druid.java.util.common.guava.Sequence; import org.apache.druid.java.util.common
<?php  /*  * This file is part of PHPExifTool.  *  * (c) 2012 Romain Neutron <imprec@gmail.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace PHPExiftool\Driver\Tag\DICOM;  use JMS\Serializer\Annotation\ExclusionPolicy; use PHPExiftool\Driver\AbstractTag;  /**  * @ExclusionPolicy("all")  */ class Color extends AbstractTag {      protected $Id = '0018,0018';      protected $Name = 'Color';      protected $FullName = 'DICOM::Main';      protected $GroupName = 'DICOM';      protected $g0 = 'DICOM';      protected $g1 = 'DICOM';      protected $g2 = 'Image';      protected $Type = '?';      protected $Writable = false;      protected $Description = 'Color';  } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializer; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializerProvider; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'required' => false,             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'required' => false,             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */  package org.apache.druid.query.aggregation;  import com.fasterxml.jackson.annotation.JsonCreator; import com.fasterxml.jackson.annotation.JsonProperty; import com.fasterxml.jackson.annotation.JsonTypeInfo; import com.fasterxml.jackson.annotation.JsonTypeInfo.As; import com.fasterxml.jackson.annotation.JsonTypeInfo.Id; import com.fasterxml.jackson.annotation.JsonTypeName; import com.google.common.base.Preconditions; import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import org.apache.druid.java.util.common.ISE; import org.apache.druid.java.util.common.logger.Logger; import org.apache.druid.java.util.common.logger.LoggerFactory; import org.apache.druid.java.util.common.util.concurrent.ThreadFactoryBuilder; import org.apache.druid.java.util.common.util.concurrent.Thread
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.product.name',                 'required' => false,             ))             ->add('price', 'number', array(                 'label' => 'sylius.form.product.price',                 'required' => false,             ))         ;     }      /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.product.name',                 'attr' => array(                     'class' => 'form-control',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.product.description',                 'attr' => array(                     'class' => 'form-control',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.product.name',                 'required' => false,             ))             ->add('price', 'number', array(                 'label' => 'sylius.form.product.price',                 'required' => false,             ))         ;     }      /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
<?php  /*  * This file is part of the Symfony package.  *  * (c) Fabien Potencier <fabien@symfony.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace Symfony\Component\DependencyInjection\Compiler;  use Symfony\Component\DependencyInjection\ContainerBuilder; use Symfony\Component\DependencyInjection\Definition; use Symfony\Component\DependencyInjection\Reference; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\RuntimeException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\RuntimeException; use Symfony\Component\DependencyInjection\ParameterBag\ParameterBag; use Symfony\Component\DependencyInjection\ParameterBag\ParameterBagInterface; use Symfony\Component\DependencyInjection\ParameterBag\ParameterBagReference; use Symfony\Component\DependencyInjection\ParameterBag\ParameterBagReferenceInterface; use Symfony\Component\DependencyInjection\Reference\ParameterReference; use Symfony\Component\DependencyInjection\Reference\ParameterReferenceInterface; use Symfony\Component\DependencyInjection\Reference\ParameterReferenceReference; use Symfony\Component\DependencyInjection\Reference\ParameterReferenceReference; use Symfony\Component\DependencyInjection\Reference\ParameterReferenceReference; use Symfony\Component\DependencyInjection\Reference\ParameterReferenceReference; use Symfony\Component\DependencyInjection\Reference\ParameterReferenceReference; use Symfony\Component\DependencyInjection\Reference\ParameterReferenceReference; use Symfony\Component\DependencyInjection\Reference\ParameterReferenceReference; use Symfony\Component\DependencyInjection\Reference\ParameterReferenceReference; use Symfony\Component\DependencyInjection\Reference\ParameterReferenceReference; use Symfony\Component\DependencyInjection\Reference\ParameterReferenceReference; use Symfony\Component\DependencyInjection\Reference\ParameterReferenceReference; use Symfony\Component\DependencyInjection\Reference\ParameterReferenceReference; use Symfony\Component\DependencyInjection\Reference\ParameterReferenceReference; use Symfony\Component\DependencyInjection\Reference\ParameterReferenceReference; use Symfony\Component\DependencyInjection\Reference\ParameterReferenceReference; use Symfony\Component\DependencyInjection\Reference\ParameterReferenceReference; use Symfony\Component\DependencyInjection
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of PHPExifTool.  *  * (c) 2012 Romain Neutron <imprec@gmail.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace PHPExiftool\Driver\Tag\DICOM;  use JMS\Serializer\Annotation\ExclusionPolicy; use PHPExiftool\Driver\AbstractTag;  /**  * @ExclusionPolicy("all")  */ class Color extends AbstractTag {      protected $Id = '0018,0018';      protected $Name = 'Color';      protected $FullName = 'DICOM::Main';      protected $GroupName = 'DICOM';      protected $g0 = 'DICOM';      protected $g1 = 'DICOM';      protected $g2 = 'Image';      protected $Type = '?';      protected $Writable = false;      protected $Description = 'Color';  } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializer; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializerProvider; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.functions.IFunctionDescriptorProvider; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializer; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializerProvider; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.product.name',                 'required' => false,                 'attr' => array(                     'class' => 'form-control',                 ),             ))             ->add('price', 'text', array(                 'label' => 'sylius.form.product.price',                 'required' => false,                 'attr' => array(                     'class' => 'form-control',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
