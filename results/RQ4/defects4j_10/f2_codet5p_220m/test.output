private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,      do {          case STAR:            if (ignoreStar) {            } else {              switch (token) {          case STAR:            if (ignoreStar) {            } else {              switch (token) {          case STAR:            if (ignoreStar) {            } else {              switch (token) {          case STAR:            if (ignoreStar) {            } else {              switch (token) {          case STAR:            if (ignoreStar) {            } else {              switch (token) {          case STAR:            if (ignoreStar) {            } else {              switch (token) {          case STAR:            if (ignoreStar) {            } else {              switch (token) {          case STAR:            if (ignoreStar) {            } else {              switch (token) {          case STAR:            if (ignoreStar) {            } else {              switch (token) {          case STAR:            if (ignoreStar) {            } else {              switch (token) {          case STAR:            if (ignoreStar) {            } else {              switch (token) {          case STAR:            if (ignoreStar) {            } else {              switch (token) {          case STAR:            if (ignoreStar) {            } else {              switch (token) {          case STAR:            if (ignoreStar) {            } else {              switch (token) {          case STAR:            if (ignoreStar) {            } else {              switch (token) {          case STAR:            if (ignoreStar) {            } else {              switch (token) {          case STAR:            if (ignoreStar) {            } else {              switch (token) {          case STAR:            if (ignoreStar) {            } else {              switch (token) {          case STAR:            if (ignoreStar) {            } else {              switch (token) {          case STAR:            if (ignoreStar) {            } else {              switch (token) {          case STAR:            if (ignoreStar) {            } else {              switch (token) {          case STAR:            if (ignoreStar) {            } else {              switch (token) {          case STAR:            if (ignoreStar) {            } else {              switch (token) {          case STAR:            if (ignore
public boolean isNoObjectType() {    }    public final boolean isEmptyType() {     return isNoType() || isNoObjectType();    }    public boolean isNumberObjectType() {    }    public final boolean isNumberResolvedType() {     return isNumberObjectType() || isNumberResolvedType();    }    public boolean isNumberResolvedType() {    }    public final boolean isNumberResolvedType() {     return isNumberResolvedType() || isNumberResolvedType();    }    public boolean isNumberResolvedType() {    }    public final boolean isNumberResolvedType() {     return isNumberResolvedType() || isNumberResolvedType();    }    public boolean isNumberResolvedType() {    }    public final boolean isNumberResolvedType() {     return isNumberResolvedType() || isNumberResolvedType();    }    public boolean isNumberResolvedType() {    }    public final boolean isNumberResolvedType() {     return isNumberResolvedType() || isNumberResolvedType();    }    public boolean isNumberResolvedType() {    }    public final boolean isNumberResolvedType() {     return isNumberResolvedType() || isNumberResolvedType();    }    public boolean isNumberResolvedType() {    }    public final boolean isNumberResolvedType() {     return isNumberResolvedType() || isNumberResolvedType();    }    public boolean isNumberResolvedType() {    }    public final boolean isNumberResolvedType() {     return isNumberResolvedType() || isNumberResolvedType();    }    public boolean isNumberResolvedType() {    }    public final boolean isNumberResolvedType() {     return isNumberResolvedType() || isNumberResolvedType();    }    public boolean isNumberResolvedType() {    }    public final boolean isNumberResolvedType() {     return isNumberResolvedType() || isNumberResolvedType();    }    public boolean isNumberResolvedType() {    }    public final boolean isNumberResolvedType() {     return isNumberResolvedType() || isNumberResolvedType();    }    public boolean isNumberResolvedType() {    }    public final boolean isNumberResolvedType() {     return isNumberResolvedType() || isNumberResolvedType();    }    public boolean isNumberResolvedType() {    }    public final boolean isNumberResolvedType() {     return isNumberResolvedType() || isNumberResolvedType();    }    public boolean isNumberResolvedType() {    }    public final boolean isNumberResolvedType() {     return isNumberResolvedType() || isNumberResolvedType();    }    public boolean isNumberResolvedType() {    }    public final boolean isNumberResolvedType() {     return isNumberResolvedType() || isNumberResolvedType();    }    public
public void removeRow(int rowIndex) {       */       public void removeRow(Comparable rowKey) {           int index = getRowIndex(rowKey);           removeRow(index);       } public void removeRow(Comparable rowKey) {       */       public void removeRow(Comparable rowKey) {           int index = getRowIndex(rowKey);           removeRow(index);       } public void removeRow(Comparable rowKey) {       */       public void removeRow(Comparable rowKey) {           int index = getRowIndex(rowKey);           removeRow(index);       } public void removeRow(Comparable rowKey) {       */       public void removeRow(Comparable rowKey) {           int index = getRowIndex(rowKey);           removeRow(index);       } public void removeRow(Comparable rowKey) {       */       public void removeRow(Comparable rowKey) {           int index = getRowIndex(rowKey);           removeRow(index);       } public void removeRow(Comparable rowKey) {       */       public void removeRow(Comparable rowKey) {           int index = getRowIndex(rowKey);           removeRow(index);       } public void removeRow(Comparable rowKey) {       */       public void removeRow(Comparable rowKey) {           int index = getRowIndex(rowKey);           removeRow(index);       } public void removeRow(Comparable rowKey) {       */       public void removeRow(Comparable rowKey) {           int index = getRowIndex(rowKey);           removeRow(index);       } public void removeRow(Comparable rowKey) {       */       public void removeRow(Comparable rowKey) {           int index = getRowIndex(rowKey);           removeRow(index);       } public void removeRow(Comparable rowKey) {       */       public void removeRow(Comparable rowKey) {           int index = getRowIndex(rowKey);           removeRow(index);       } public void removeRow(Comparable rowKey) {       */       public void removeRow(Comparable rowKey) {           int index = getRowIndex(rowKey);           removeRow(index);       } public void removeRow(Comparable rowKey) {       */       public void removeRow(Comparable rowKey) {           int index = getRowIndex(rowKey);           removeRow(index);       } public void removeRow(Comparable
public int getDimension() {              indices[i] = idx;          }         int idx = 1;         while (count < index) {             count += idx;             ++idx;         }         --idx;         indices[last] = idx;          return indices;      }         public int getDimension() {              indices[i] = idx;          }         int idx = 1;         while (count < index) {             count += idx;             ++idx;         }         --idx;         indices[last] = idx;          return indices;      }         public int getDimension() {              indices[i] = idx;          }         int idx = 1;         while (count < index) {             count += idx;             ++idx;         }         --idx;         indices[last] = idx;          return indices;      }         public int getDimension() {              indices[i] = idx;          }         int idx = 1;         while (count < index) {             count += idx;             ++idx;         }         --idx;         indices[last] = idx;          return indices;      }         public int getDimension() {              indices[i] = idx;          }         int idx = 1;         while (count < index) {             count += idx;             ++idx;         }         --idx;         indices[last] = idx;          return indices;      }         public int getDimension() {              indices[i] = idx;          }         int idx = 1;         while (count < index) {             count += idx;             ++idx;         }         --idx;         indices[last] = idx;          return indices;      }         public int getDimension() {              indices[i] = idx;          }         int idx = 1;         while (count < index) {             count += idx;             ++idx;         }         --idx;         indices[last] = idx;          return indices;      }         public int getDimension() {              indices[i] = idx;          }         int idx = 1;         while (count < index) {             count += idx;             ++idx;         }         --idx;         indices[last] = idx;          return indices;      }         public int getDimension() {              indices[i] = idx;          }         int idx = 1;         while (count < index) {             count += idx;             ++idx;
public boolean apply(Node input) {                    case Token.REGEXP:                    case Token.NEW:                      return true;                  }                  return false;
public void exitScope(NodeTraversal t) {          renameNamespaceShadows(t);          aliases.clear();          forbiddenLocals.clear();          transformation = null;
public double integrate(final FirstOrderDifferentialEquations equations,                    loop     = false) { public double integrate(final FirstOrderDifferentialEquations equations,                    loop     = false) { public double integrate(final FirstOrderDifferentialEquations equations,                    loop     = false) { public double integrate(final FirstOrderDifferentialEquations equations,                    loop     = false) { public double integrate(final FirstOrderDifferentialEquations equations,                    loop     = false) { public double integrate(final FirstOrderDifferentialEquations equations,                    loop     = false) { public double integrate(final FirstOrderDifferentialEquations equations,                    loop     = false) { public double integrate(final FirstOrderDifferentialEquations equations,                    loop     = false) { public double integrate(final FirstOrderDifferentialEquations equations,                    loop     = false) { public double integrate(final FirstOrderDifferentialEquations equations,                    loop     = false) { public double integrate(final FirstOrderDifferentialEquations equations,                    loop     = false) { public double integrate(final FirstOrderDifferentialEquations equations,                    loop     = false) { public double integrate(final FirstOrderDifferentialEquations equations,                    loop     = false) { public double integrate(final FirstOrderDifferentialEquations equations,                    loop     = false) { public double integrate(final FirstOrderDifferentialEquations equations,                    loop     = false) { public double integrate(final FirstOrderDifferentialEquations equations,                    loop     = false) { public double integrate(final FirstOrderDifferentialEquations equations,                    loop     = false) { public double integrate(final FirstOrderDifferentialEquations equations,                    loop     = false) { public double integrate(final FirstOrderDifferentialEquations equations,                    loop     = false) { public double integrate(final FirstOrderDifferentialEquations equations,                    loop     = false) { public double integrate(final FirstOrderDifferentialEquations equations,                    loop     = false) { public double integrate(final FirstOrderDifferentialEquations equations,                    loop     = false) { public double integrate(final FirstOrderDifferentialEquations equations,                    loop     = false) { public double integrate(
public int parseInto(ReadWritableInstant instant, String text, int position) {          long instantMillis = instant.getMillis();          Chronology chrono = instant.getChronology();          long instantLocal = instantMillis + chrono.getZone().getOffset();          chrono = selectChronology(chrono);          int defaultYear = chrono.year().get(instantLocal);          DateTimeParserBucket bucket = new DateTimeParserBucket(              instantLocal, chrono, iLocale, iPivotYear, defaultYear);
static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {         return true;        case Token.FUNCTION:        case Token.REGEXP:        case Token.ARRAYLIT:         return true;        case Token.NUMBER:         return true;        case Token.STRING:         return true;        case Token.NUMBER:         return true;        case Token.NUMBER:         return true;        case Token.NUMBER:         return true;        case Token.NUMBER:         return true;        case Token.NUMBER:         return true;        case Token.NUMBER:         return true;        case Token.NUMBER:         return true;        case Token.NUMBER:         return true;        case Token.NUMBER:         return true;        case Token.NUMBER:         return true;        case Token.NUMBER:         return true;        case Token.NUMBER:         return true;        case Token.NUMBER:         return true;        case Token.NUMBER:         return true;        case Token.NUMBER:         return true;        case Token.NUMBER:         return true;        case Token.NUMBER:         return true;        case Token.NUMBER:         return true;        case Token.NUMBER:         return true;        case Token.NUMBER:         return true;        case Token.NUMBER:         return true;        case Token.NUMBER:         return true;        case Token.NUMBER:         return true;        case Token.NUMBER:         return true;        case Token.NUMBER:         return true;        case Token.NUMBER:         return true;        case Token.NUMBER:         return true;        case Token.NUMBER:         return true;        case Token.NUMBER:         return true;        case Token.NUMBER:         return true;        case Token.NUMBER:         return true;        case Token.NUMBER:         return true;        case Token.NUMBER:         return true;        case Token.NUMBER:         return true;        case Token.NUMBER:         return true;        case Token.NUMBER:         return true;        case Token.NUMBER:         return true;        case Token.NUMBER:         return true;        case Token.NUMBER:         return true;        case Token.NUMBER:         return true;        case Token.NUMBER:         return true;        case Token.NUMBER:         return true;        case Token.NUMBER:         return true;        case Token.NUMBER:         return true;        case Token.NUMBER:
private void visitNew(NodeTraversal t, Node n) {      JSType type = getJSType(constructor).restrictByNotNullOrUndefined();      if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {        FunctionType fnType = type.toMaybeFunctionType();       if (fnType != null) {          visitParameterList(t, n, fnType);          ensureTyped(t, n, fnType.getInstanceType());        } else {
public RealMatrix getU()              if (m >= n) {                  final RealMatrix e =                     eigenDecomposition.getV().getSubMatrix(0, p - 1, 0, p - 1);                  final double[][] eData = e.getData();                  final double[][] wData = new double[m][p];                  double[] ei1 = eData[0];                 for (int i = 0; i < p - 1; i++) {                      final double mi = mainBidiagonal[i];                      final double[] ei0 = ei1;                      final RealMatrix u =                     eigenDecomposition.getU().getSubMatrix(0, p - 1, 0, p - 1);                      final double[][] eData = u.getData();                      final double[][] wData = new double[m][p];                      double[] ei1 = eData[0];                 for (int i = 0; i < p - 1; i++) {                      final double mi = mainBidiagonal[i];                      final double[] ei0 = ei1;                      final RealMatrix u =                     eigenDecomposition.getU().getSubMatrix(0, p - 1, 0, p - 1);                      final double[][] eData = u.getData();                      final double[][] wData = new double[m][p];                      double[] ei1 = eData[0];                 for (int i = 0; i < p - 1; i++) {                      final double mi = mainBidiagonal[i];                      final double[] ei0 = ei1;                      final RealMatrix u =                     eigenDecomposition.getU().getSubMatrix(0, p - 1, 0, p - 1);                      final double[][] eData = u.getData();                      final double[][] wData = new double[m][p];                      double[] ei1 = eData[0];                 for (int i = 0; i < p - 1; i++) {                      final double mi = mainBidiagonal[i];                      final double[] ei0 = ei1;                      final RealMatrix u =                     eigenDecomposition.getU().getSubMatrix(0, p - 1, 0, p - 1);                      final double[][] eData = u.getData();                      final double[][] wData = new double[m
protected UnivariatePointValuePair doOptimize() {                      }                  } } } else {                 return                              best(current,previous,                              isMinimize);              ++iter;
private static final long serialVersionUID = -7105341425736035847L;      private MockitoCore mockitoCore = new MockitoCore();      private ReturnsEmptyValues delegate = new ReturnsEmptyValues();       public Object answer(InvocationOnMock invocation) throws Throwable {           GenericMetadataSupport returnTypeGenericMetadata =                   actualParameterizedType(invocation.getMock()).resolveGenericReturnType(invocation.getMethod());           Class<?> rawType = returnTypeGenericMetadata.rawType();           if (!mockitoCore.isTypeMockable(rawType)) {               return delegate.returnValueFor(rawType);
private void interpretAssigns() {                  assign.assignNode.getLastChild(), true)) {                assignedToUnknownValue = true;              }            }           if (assignedToUnknownValue && hasPropertyAssign) {              changes = markReferencedVar(var);              maybeUnreferenced.remove(current);              current--;
private CanInlineResult canInlineReferenceDirectly(      Node block = fnNode.getLastChild();     boolean hasSideEffects = false;     if (block.hasChildren()) {       Preconditions.checkState(block.hasOneChild());       Node stmt = block.getFirstChild();       if (stmt.isReturn()) {         hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild());       }     }      Node cArg = callNode.getFirstChild().getNext(); private CanInlineResult canInlineReferenceDirectly(      Node block = fnNode.getLastChild();     boolean hasSideEffects = false;     if (block.hasChildren()) {       Preconditions.checkState(block.hasOneChild());       Node stmt = block.getFirstChild();       if (stmt.isReturn()) {         hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild());       }     }      Node cArg = callNode.getFirstChild().getNext(); private CanInlineResult canInlineReferenceDirectly(      Node block = fnNode.getLastChild();     boolean hasSideEffects = false;     if (block.hasChildren()) {       Preconditions.checkState(block.hasOneChild());       Node stmt = block.getFirstChild();       if (stmt.isReturn()) {         hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild());       }     }      Node cArg = callNode.getFirstChild().getNext(); private CanInlineResult canInlineReferenceDirectly(      Node block = fnNode.getLastChild();     boolean hasSideEffects = false;     if (block.hasChildren()) {       Preconditions.checkState(block.hasOneChild());       Node stmt = block.getFirstChild();       if (stmt.isReturn()) {         hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild());       }     }      Node cArg = callNode.getFirstChild().getNext(); private CanInlineResult canInlineReferenceDirectly(      Node block = fnNode.getLastChild();     boolean hasSideEffects = false;     if (block.hasChildren()) {       Preconditions.checkState(block.hasOneChild());       Node stmt = block.getFirstChild();       if (stmt.isReturn()) {         hasSideEffects = NodeUtil.mayHaveSideEffects(stmt
private void inlineAliases(GlobalNamespace namespace) {          continue;}       if (name.globalSets == 1 && name.localSets == 1 &&            name.aliasingGets == 0 &&            name.aliasingGets == 0 &&            name.aliasingGets == 0 &&            name.aliasingGets == 0 &&            name.aliasingGets == 0 &&            name.aliasingGets == 0 &&            name.aliasingGets == 0 &&            name.aliasingGets == 0 &&            name.aliasingGets == 0 &&            name.aliasingGets == 0 &&            name.aliasingGets == 0 &&            name.aliasingGets == 0 &&            name.aliasingGets == 0 &&            name.aliasingGets == 0 &&            name.aliasingGets == 0 &&            name.aliasingGets == 0 &&            name.aliasingGets == 0 &&            name.aliasingGets == 0 &&            name.aliasingGets == 0 &&            name.aliasingGets == 0 &&            name.aliasingGets == 0 &&            name.aliasingGets == 0 &&            name.aliasingGets == 0 &&            name.aliasingGets == 0 &&            name.aliasingGets == 0 &&            name.aliasingGets == 0 &&            name.aliasingGets == 0 &&            name.aliasingGets == 0 &&            name.aliasingGets == 0 &&            name.aliasingGets == 0 &&            name.aliasingGets == 0 &&            name.aliasingGets == 0 &&            name.aliasingGets == 0 &&            name.aliasingGets == 0 &&            name.aliasingGets == 0 &&            name.aliasingGets == 0 &&            name.aliasingGets == 0 &&            name.aliasingGets == 0 &&            name.aliasingGets == 0 &&            name.aliasingGets == 0 &&            name.aliasingGets == 0 &&            name.aliasingGets == 0 &&            name.aliasingGets == 0 &&            name.aliasingGets == 0 &&            name.aliasingGets == 0 &&            name.aliasingGets == 0 &&            name.aliasingGets == 0 &&            name.aliasingGets == 0 &&            name.aliasingGets == 0 &&            name.aliasingGets == 0 &&            name.aliasingGets == 0 &&            name.aliasingGets == 0 &&            name.aliasingGets == 0 &&            name
public ElitisticListPopulation(final List<Chromosome> chromosomes,       */public ElitisticListPopulation(final int populationLimit, final double elitismRate) {          super(populationLimit);         this.elitismRate = elitismRate;      }      /** public ElitisticListPopulation(final List<Chromosome> chromosomes,       */public ElitisticListPopulation(final int populationLimit, final double elitismRate) {          super(populationLimit);         this.elitismRate = elitismRate;      }      /** public ElitisticListPopulation(final List<Chromosome> chromosomes,       */public ElitisticListPopulation(final int populationLimit, final double elitismRate) {          super(populationLimit);         this.elitismRate = elitismRate;      }      /** public ElitisticListPopulation(final List<Chromosome> chromosomes,       */public ElitisticListPopulation(final int populationLimit, final double elitismRate) {          super(populationLimit);         this.elitismRate = elitismRate;      }      /** public ElitisticListPopulation(final List<Chromosome> chromosomes,       */public ElitisticListPopulation(final int populationLimit, final double elitismRate) {          super(populationLimit);         this.elitismRate = elitismRate;      }      /** public ElitisticListPopulation(final List<Chromosome> chromosomes,       */public ElitisticListPopulation(final int populationLimit, final double elitismRate) {          super(populationLimit);         this.elitismRate = elitismRate;      }      /** public ElitisticListPopulation(final List<Chromosome> chromosomes,       */public ElitisticListPopulation(final int populationLimit, final double elitismRate) {          super(populationLimit);         this.elitismRate = elitismRate;      }      /** public ElitisticListPopulation(final List<Chromosome> chromosomes,       */public ElitisticListPopulation(final int populationLimit, final double elitismRate) {          super(populationLimit);         this.elitismRate = elitismRate;      }      /** public ElitisticListPopulation
public void setRangeAxes(ValueAxis[] axes) {       * @since 1.0.7        */           public int getRangeAxisIndex(ValueAxis axis) {           int result = this.rangeAxes.indexOf(axis);  if (result < 0) {              Plot parent = getParent();               if (parent != null) {              if (parent.getParent() != null) {              if (parent.getParent().getParent() != null) {              if (parent.getParent().getParent() != null) {              if (parent.getParent().getParent() != null) {              if (parent.getParent().getParent() != null) {              if (parent.getParent().getParent() != null) {              if (parent.getParent().getParent() != null) {              if (parent.getParent().getParent() != null) {              if (parent.getParent().getParent() != null) {              if (parent.getParent().getParent() != null) {              if (parent.getParent().getParent() != null) {              if (parent.getParent().getParent() != null) {              if (parent.getParent().getParent() != null) {              if (parent.getParent().getParent() != null) {              if (parent.getParent().getParent() != null) {              if (parent.getParent().getParent() != null) {              if (parent.getParent().getParent() != null) {              if (parent.getParent().getParent() != null) {              if (parent.getParent().getParent() != null) {              if (parent.getParent().getParent() != null) {              if (parent.getParent().getParent() != null) {              if (parent.getParent().getParent() != null) {              if (parent.getParent().getParent() != null) {              if (parent.getParent().getParent() != null) {              if (parent.getParent().getParent() != null) {              if (parent.getParent().getParent() != null) {              if (parent.getParent().getParent() != null) {              if (parent.getParent().getParent() != null) {              if (parent.getParent().getParent() != null) {              if (parent.getParent
allZeros))) {                      return d;                  } } catch (final NumberFormatException nfe nfe) {          }          try {                  final Number f = createNumber(str);                  if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {                      return f;                  } } catch (final NumberFormatException nfe) {          }          try {                  final Number d = createNumber(str);                  if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {                      return d;                  } } catch (final NumberFormatException nfe) {          }          try {                  final Number f = createNumber(str);                  if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {                      return f;                  } } catch (final NumberFormatException nfe) {          }          try {                  final Number d = createNumber(str);                  if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {                      return d;                  } } catch (final NumberFormatException nfe) {          }          try {                  final Number f = createNumber(str);                  if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {                      return f;                  } } catch (final NumberFormatException nfe) {          }          try {                  final Number d = createNumber(str);                  if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {                      return d;                  } } catch (final NumberFormatException nfe) {          }          try {                  final Number f = createNumber(str);                  if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {                      return f;                  } } catch (final NumberFormatException nfe) {          }          try {                  final Number d = createNumber(str);                  if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {                      return d;                  } } catch (final NumberFormatException nfe) {          }          try {                  final Number f = createNumber(str);                  if (!(f.isInfinite() || (f.floatValue() == 0.0
public void escape(Writer writer, String str) throws IOException {          int len = str.length();          for (int i = 0; i < len; i++) {             char c = str.charAt(i);              String entityName = this.entityName(c);              if (entityName == null) {                 if (c > 0x7F) { writer.write("&                      writer.write(Integer.toString(c, 10));                      writer.write(';');
private void findAliases(NodeTraversal t) {          Node n = v.getNode();          int type = n.getType();          Node parent = n.getParent();         if (parent.isVar()) {           if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {            String name = n.getString();            Var aliasVar = scope.getVar(name);            aliases.put(name, aliasVar);
public BooleanOptionHandler(        @Override public int parseArguments(Parameters params) throws CmdLineException {         String param = params.getParameter(0);          if (param == null) {            setter.addValue(false);
public double solve(final UnivariateRealFunction f,              return solve(f, initial, yInitial, max, yMax, initial);          }          return solve(min, yMin, max, initial);
private Node tryMinimizeIf(Node n) {               !mayEffectMutableState(lhs)) {              n.removeChild(cond);              Node assignName = thenOp.getFirstChild();              if (assignName != null) {              n.removeChild(assignName);              } else {              Node assignName = thenOp.getFirstChild();              if (assignName != null) {              n.removeChild(assignName);              } else {              Node assignName = thenOp.getFirstChild();              if (assignName != null) {              n.removeChild(assignName);              } else {              Node assignName = thenOp.getFirstChild();              if (assignName != null) {              n.removeChild(assignName);              } else {              Node assignName = thenOp.getFirstChild();              if (assignName != null) {              n.removeChild(assignName);              } else {              Node assignName = thenOp.getFirstChild();              if (assignName != null) {              n.removeChild(assignName);              } else {              Node assignName = thenOp.getFirstChild();              if (assignName != null) {              n.removeChild(assignName);              } else {              Node assignName = thenOp.getFirstChild();              if (assignName != null) {              n.removeChild(assignName);              } else {              Node assignName = thenOp.getFirstChild();              if (assignName != null) {              n.removeChild(assignName);              } else {              Node assignName = thenOp.getFirstChild();              if (assignName != null) {              n.removeChild(assignName);              } else {              Node assignName = thenOp.getFirstChild();              if (assignName != null) {              n.removeChild(assignName);              } else {              Node assignName = thenOp.getFirstChild();              if (assignName != null) {              n.removeChild(assignName);              } else {              Node assignName = thenOp.getFirstChild();              if (assignName != null) {              n.removeChild(assignName);              } else {              Node assignName = thenOp.getFirstChild();              if (assignName != null) {              n.removeChild(assignName);              } else {              Node assignName
public static Collection anyCollection() {       * @return <code>null</code>.        */       public static <T> T isA(Class<T> clazz) {          return reportMatcher(new Instance(clazz)).<T>returnNull();       }       /** public static Collection anyCollection() {       * @return <code>null</code>.        */       public static <T> T isA(Class<T> clazz) {          return reportMatcher(new Instance(clazz)).<T>returnNull();       }       /** public static Collection anyCollection() {       * @return <code>null</code>.        */       public static <T> T isA(Class<T> clazz) {          return reportMatcher(new Instance(clazz)).<T>returnNull();       }       /** public static Collection anyCollection() {       * @return <code>null</code>.        */       public static <T> T isA(Class<T> clazz) {          return reportMatcher(new Instance(clazz)).<T>returnNull();       }       /** public static Collection anyCollection() {       * @return <code>null</code>.        */       public static <T> T isA(Class<T> clazz) {          return reportMatcher(new Instance(clazz)).<T>returnNull();       }       /** public static Collection anyCollection() {       * @return <code>null</code>.        */       public static <T> T isA(Class<T> clazz) {          return reportMatcher(new Instance(clazz)).<T>returnNull();       }       /** public static Collection anyCollection() {       * @return <code>null</code>.        */       public static <T> T isA(Class<T> clazz) {          return reportMatcher(new Instance(clazz)).<T>returnNull();       }       /** public static Collection anyCollection() {       * @return <code>null</code>.        */       public static <T> T isA(Class<T> clazz) {          return reportMatcher(new Instance(clazz)).<T>returnNull();       }       /** public static Collection anyCollection() {       * @return <code>null</code>.        */       public static <T> T isA(Class<T> clazz) {          return
public void delete(int start, int end) {       *         subclasses may differ.        */       public Object clone() throws CloneNotSupportedException {          Object clone = createCopy(0, getItemCount());           return clone;       } public void delete(int start, int end) {       *         subclasses may differ.        */       public Object clone() throws CloneNotSupportedException {          Object clone = createCopy(0, getItemCount());           return clone;       } public void delete(int start, int end) {       *         subclasses may differ.        */       public Object clone() throws CloneNotSupportedException {          Object clone = createCopy(0, getItemCount());           return clone;       } public void delete(int start, int end) {       *         subclasses may differ.        */       public Object clone() throws CloneNotSupportedException {          Object clone = createCopy(0, getItemCount());           return clone;       } public void delete(int start, int end) {       *         subclasses may differ.        */       public Object clone() throws CloneNotSupportedException {          Object clone = createCopy(0, getItemCount());           return clone;       } public void delete(int start, int end) {       *         subclasses may differ.        */       public Object clone() throws CloneNotSupportedException {          Object clone = createCopy(0, getItemCount());           return clone;       } public void delete(int start, int end) {       *         subclasses may differ.        */       public Object clone() throws CloneNotSupportedException {          Object clone = createCopy(0, getItemCount());           return clone;       } public void delete(int start, int end) {       *         subclasses may differ.        */       public Object clone() throws CloneNotSupportedException {          Object clone = createCopy(0, getItemCount());           return clone;       } public void delete(int start, int end) {       *         subclasses may differ.        */       public Object clone() throws CloneNotSupportedException {          Object clone = createCopy(0, getItemCount());           return clone;       } public void delete(int start, int end) {       *         subclasses may differ.        */       public Object clone() throws CloneNotSupportedException {          Object clone = createCopy(0, getItemCount());           return clone;       } public void delete(int start, int end) {       *         subclasses may differ.        */       public Object clone() throws CloneNotSupportedException {         
public Fraction divide(final int i) {       * @return the fraction percentage as a <tt>double</tt>.       */      public double percentageValue() {         return multiply(100).doubleValue();      }      /** public Fraction divide(final int i) {       * @return the fraction percentage as a <tt>double</tt>.       */      public double percentageValue() {         return multiply(100).doubleValue();      }      /** public Fraction divide(final int i) {       * @return the fraction percentage as a <tt>double</tt>.       */      public double percentageValue() {         return multiply(100).doubleValue();      }      /** public Fraction divide(final int i) {       * @return the fraction percentage as a <tt>double</tt>.       */      public double percentageValue() {         return multiply(100).doubleValue();      }      /** public Fraction divide(final int i) {       * @return the fraction percentage as a <tt>double</tt>.       */      public double percentageValue() {         return multiply(100).doubleValue();      }      /** public Fraction divide(final int i) {       * @return the fraction percentage as a <tt>double</tt>.       */      public double percentageValue() {         return multiply(100).doubleValue();      }      /** public Fraction divide(final int i) {       * @return the fraction percentage as a <tt>double</tt>.       */      public double percentageValue() {         return multiply(100).doubleValue();      }      /** public Fraction divide(final int i) {       * @return the fraction percentage as a <tt>double</tt>.       */      public double percentageValue() {         return multiply(100).doubleValue();      }      /** public Fraction divide(final int i) {       * @return the fraction percentage as a <tt>double</tt>.       */      public double percentageValue() {         return multiply(100).doubleValue();      }      /** public Fraction divide(final int i) {       * @return the fraction percentage as a <tt>double</tt>.       */      public double percentageValue() {         return multiply(100).doubleValue();      }      /** public Fraction divide(final int i) {       * @return the fraction percentage as a <
public static int safeMultiply(int val1, int val2) {              public static long safeMultiply(long val1, int val2) {          switch (val2) {              case -1:                  return -val1;              case 0:                  return 0L;
public static boolean isEmpty(boolean[] array) {          } else if (element != null) {              type = element.getClass();          } else {             type = Object.class; } @SuppressWarnings("unchecked")          T[] newArray = (T[]) copyArrayGrow1(array, type); return newArray.length == 0;
public TimeSeries createCopy(int start, int end)              throw new IllegalArgumentException("Requires start <= end.");           TimeSeries copy = (TimeSeries) super.clone();           copy.data = new java.util.ArrayList();           if (this.data.size() > 0) {               for (int index = start; index <= end; index++) {               copy.data.add(this.data.get(index));           }
private Node tryFoldComparison(Node n, Node left, Node right) {            && right.getString().equals("undefined"))            || (Token.VOID == right.getType()                && NodeUtil.isLiteralValue(right.getFirstChild(), false)));     int lhType = left.getType();     int rhType = right.getType();      switch (lhType) { case Token.VOID:          if (!NodeUtil.isLiteralValue(left.getFirstChild(), false)) {             return tryFoldComparison(n, left, right);           }           break;       case Token.VOID:      case Token.VOID:      case Token.VOID:      case Token.VOID:      case Token.VOID:      case Token.VOID:      case Token.VOID:      case Token.VOID:      case Token.VOID:      case Token.VOID:      case Token.VOID:      case Token.VOID:      case Token.VOID:      case Token.VOID:      case Token.VOID:      case Token.VOID:      case Token.VOID:      case Token.VOID:      case Token.VOID:      case Token.VOID:      case Token.VOID:      case Token.VOID:      case Token.VOID:      case Token.VOID:      case Token.VOID:      case Token.VOID:      case Token.VOID:      case Token.VOID:      case Token.VOID:      case Token.VOID:      case Token.VOID:      case Token.VOID:      case Token.VOID:      case Token.VOID:      case Token.VOID:      case Token.VOID:      case Token.VOID:      case Token.VOID:      case Token.VOID:      case Token.VOID:      case Token.VOID:      case Token.VOID:      case Token.VOID:      case Token.VOID:      case Token.VOID:      case Token.VOID:      case Token.VOID:      case Token.VOID:      case Token.VOID:      case Token.VOID:      case Token.VOID:      case Token.VOID:      case Token.VOID:      case Token.VOID:
private void unrollBinaryOperator(      Node current = firstNonOperator; do {        current = current.getParent();       cc.listSeparator();        addExpr(current.getFirstChild().getNext(), rightPrecedence, rhsContext);      } while (current != n);    } private void unrollBinaryOperator(      Node current = firstNonOperator; do {        current = current.getParent();       cc.listSeparator();        addExpr(current.getFirstChild().getNext(), rightPrecedence, rhsContext);      } while (current != n);    } private void unrollBinaryOperator(      Node current = firstNonOperator; do {        current = current.getParent();       cc.listSeparator();        addExpr(current.getFirstChild().getNext(), rightPrecedence, rhsContext);      } while (current != n);    } private void unrollBinaryOperator(      Node current = firstNonOperator; do {        current = current.getParent();       cc.listSeparator();        addExpr(current.getFirstChild().getNext(), rightPrecedence, rhsContext);      } while (current != n);    } private void unrollBinaryOperator(      Node current = firstNonOperator; do {        current = current.getParent();       cc.listSeparator();        addExpr(current.getFirstChild().getNext(), rightPrecedence, rhsContext);      } while (current != n);    } private void unrollBinaryOperator(      Node current = firstNonOperator; do {        current = current.getParent();       cc.listSeparator();        addExpr(current.getFirstChild().getNext(), rightPrecedence, rhsContext);      } while (current != n);    } private void unrollBinaryOperator(      Node current = firstNonOperator; do {        current = current.getParent();       cc.listSeparator();        addExpr(current.getFirstChild().getNext(), rightPrecedence, rhsContext);      } while (current != n);    } private void unrollBinaryOperator(      Node current = firstNonOperator; do {        current = current.getParent();       cc.listSeparator();        addExpr(current.getFirstChild().getNext(), rightPrecedence, rhsContext);      } while (current != n);    } private void unrollBinaryOperator(      Node current = firstNonOperator
public long add(long instant, long value) {              } else {                 long localInstant = iZone.convertUTCToLocal(instant);                 localInstant = iField.add(value);                return iZone.convertUTCToUTC(false);              }          }
public long add(long instant, int value) {              } else {                 long localInstant = iZone.convertUTCToLocal(instant);                 localInstant = iField.add(localInstant, value);                return iZone.convertUTCToUTC(false);              }          } public long add(long instant, int value) {              } else {                 long localInstant = iZone.convertUTCToLocal(instant);                 localInstant = iField.add(localInstant, value);                return iZone.convertUTCToUTC(false);              }          } public long add(long instant, int value) {              } else {                 long localInstant = iZone.convertUTCToLocal(instant);                 localInstant = iField.add(localInstant, value);                return iZone.convertUTCToUTC(false);              }          } public long add(long instant, int value) {              } else {                 long localInstant = iZone.convertUTCToLocal(instant);                 localInstant = iField.add(localInstant, value);                return iZone.convertUTCToUTC(false);              }          } public long add(long instant, int value) {              } else {                 long localInstant = iZone.convertUTCToLocal(instant);                 localInstant = iField.add(localInstant, value);                return iZone.convertUTCToUTC(false);              }          } public long add(long instant, int value) {              } else {                 long localInstant = iZone.convertUTCToLocal(instant);                 localInstant = iField.add(localInstant, value);                return iZone.convertUTCToUTC(false);              }          } public long add(long instant, int value) {              } else {                 long localInstant = iZone.convertUTCToLocal(instant);                 localInstant = iField.add(localInstant, value);                return iZone.convertUTCToUTC(false);              }          } public long add(long instant, int value) {              } else {                 long localInstant = iZone.convertUTCToLocal(instant);                 localInstant = iField.add(localInstant, value);                return iZone.convertUTCToUTC(false);              }          } public long add(long instant, int value) {              } else {                 long localInstant = iZone.
public static Number createNumber(String str) throws NumberFormatException {          if (decPos > -1) {              if (expPos > -1) {                 if (expPos < dec) {                      throw new NumberFormatException(str + " is not a valid number.");                  }                  dec = str.substring(decPos + 1);
public DefaultIntervalCategoryDataset(Comparable[] seriesKeys,              }               else {                  this.seriesKeys = null;                  this.categoryKeys = null;               }           } public DefaultIntervalCategoryDataset(Comparable[] seriesKeys,              }               else {                  this.seriesKeys = null;                  this.categoryKeys = null;               }           } public DefaultIntervalCategoryDataset(Comparable[] seriesKeys,              }               else {                  this.seriesKeys = null;                  this.categoryKeys = null;               }           } public DefaultIntervalCategoryDataset(Comparable[] seriesKeys,              }               else {                  this.seriesKeys = null;                  this.categoryKeys = null;               }           } public DefaultIntervalCategoryDataset(Comparable[] seriesKeys,              }               else {                  this.seriesKeys = null;                  this.categoryKeys = null;               }           } public DefaultIntervalCategoryDataset(Comparable[] seriesKeys,              }               else {                  this.seriesKeys = null;                  this.categoryKeys = null;               }           } public DefaultIntervalCategoryDataset(Comparable[] seriesKeys,              }               else {                  this.seriesKeys = null;                  this.categoryKeys = null;               }           } public DefaultIntervalCategoryDataset(Comparable[] seriesKeys,              }               else {                  this.seriesKeys = null;                  this.categoryKeys = null;               }           } public DefaultIntervalCategoryDataset(Comparable[] seriesKeys,              }               else {                  this.seriesKeys = null;                  this.categoryKeys = null;               }           } public DefaultIntervalCategoryDataset(Comparable[] seriesKeys,              }               else {                  this.seriesKeys = null;                  this.categoryKeys = null;               }           } public DefaultIntervalCategoryDataset(Comparable[] seriesKeys,              }               else {                  this.seriesKeys = null;                  this.categoryKeys = null;               }           } public DefaultIntervalCategoryDataset(Comparable[] seriesKeys,              }               else {                  this.seriesKeys = null;                  this.categoryKeys = null;               }           } public DefaultIntervalCategoryDataset(Comparable[] seriesKeys,              }               else {                  this.seriesKeys = null;                  this.categoryKeys = null;               }           } public DefaultIntervalCategoryDataset(Comparable[] seriesKeys,              }               else
private boolean isInlinableObject(List<Reference> refs) {return isInlinableObject(refs.get(0));}private boolean isInlinableObject(List<Reference> refs) {return isInlinableObject(refs.get(1));}private boolean isInlinableObject(List<Reference> refs) {return isInlinableObject(refs.get(2));}private boolean isInlinableObject(List<Reference> refs) {return isInlinableObject(refs.get(3));}private boolean isInlinableObject(List<Reference> refs) {return isInlinableObject(refs.get(4));}private boolean isInlinableObject(List<Reference> refs) {return isInlinableObject(refs.get(5));}private boolean isInlinableObject(List<Reference> refs) {return isInlinableObject(refs.get(6));}private boolean isInlinableObject(List<Reference> refs) {return isInlinableObject(refs.get(7));}private boolean isInlinableObject(List<Reference> refs) {return isInlinableObject(refs.get(8));}private boolean isInlinableObject(List<Reference> refs) {return isInlinableObject(refs.get(9));}private boolean isInlinableObject(List<Reference> refs) {return isInlinableObject(refs.get(10));}private boolean isInlinableObject(List<Reference> refs) {return isInlinableObject(refs.get(11));}private boolean isInlinableObject(List<Reference> refs) {return isInlinableObject(refs.get(12));}private boolean isInlinableObject(List<Reference> refs) {return isInlinableObject(refs.get(13));}private boolean isInlinableObject(List<Reference> refs) {return isInlinableObject(refs.get(14));}private boolean isInlinableObject(List<Reference> refs) {return isInlinableObject(refs.get(15));}private boolean isInlinableObject(List<Reference> refs) {return isInlinableObject(refs.get(16));}private boolean isInlinableObject(List<Reference> refs) {return isInlinableObject(refs.get(17));}private boolean isInlinableObject(List<Reference> refs) {return isInlinableObject(refs.get(
private static boolean isAssignable(Type type, ParameterizedType toParameterized                  toClass, typeVarAssigns);         for (Map.Entry<TypeVariable<?>, Type> entry : toTypeVarAssigns.entrySet()) {             Type toTypeArg = entry.getValue();             Type fromTypeArg = fromTypeVarAssigns.get(entry.get());
public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOff          if (hoursOffset < -23 || hoursOffset > 23) {              throw new IllegalArgumentException("Hours out of range: " + hoursOffset);          }         if (minutesOffset < 0 || minutesOffset > 59) {              throw new IllegalArgumentException("Minutes out of range: " + minutesOffset);          }          int offset = 0; try {              int hoursInMinutes = hoursOffset * 60;              if (hoursInMinutes < 0) {                 minutesOffset = hoursInMinutes - minutesOffset;              } else {                 minutesOffset = hoursInMinutes;              }          } finally {              offset = hoursInMinutes;          }          return DateTimeZone.forOffset(offset);
protected void computeGeometricalProperties() {          if (v.length == 0) {              final BSPTree<Euclidean2D> tree = getTree(false);             if ((Boolean) tree.getAttribute()) {                  setSize(Double.POSITIVE_INFINITY);                  setBarycenter(Vector2D.NaN);
private static synchronized String getConvertedId(String id) {              map = new HashMap<String, String>();              map.put("GMT", "UTC");              map.put("MIT", "Pacific/Apia"); map.put("HST", "Pacific/Honolulu");              map.put("AST", "America/Anchorage");
public static boolean isJSIdentifier(String s) {        int length = s.length();        if (length == 0 ||            !Character.isJavaIdentifierStart(s.charAt(0))) {          return false;          }        for (int i = 1; i < length; i++) {         if (              !Character.isJavaIdentifierPart(s.charAt(i))) {            return false;          }
protected PointVectorValuePair doOptimize() {                      if (checker != null) {                         if (checker.converged(iter, previous, current)) {                              setCost(currentCost);                              return current;                          }
private boolean isVarInlineForbidden(Var var) {       */ private boolean isInlinableObject(List<Reference> refs) {        boolean ret = false; for (Reference ref : refs) {          Node name = ref.getNode();          Node parent = ref.getParent();
void tryMinimizeExits(Node n, int exitType, String labelName) {         * can cause problems if it changes the completion type of the finally block. See ECMA 262 Sections 8.9 & 12.14         */       if (NodeUtil.hasFinally(n)) {         Node finallyBlock = n.getLastChild();         tryMinimizeExits(finallyBlock, exitType, labelName);       }      }
public void setMinuteOfHour(final int minuteOfHour) {       * @throws IllegalArgumentException if the value is invalid       */ public void addMinutes(final int minutes) {              setMillis(getChronology().minutes().add(getMillis().getChronology().minutes().add(getMillis().getChronology().minutes().add(getMillis().getChronology().minutes().add(getMillis().getChronology().minutes().add(getMillis().getChronology().minutes().add(getMillis().getChronology().minutes().add(getMillis().getChronology().minutes().add(getMillis().getChronology().minutes().add(getMillis().getChronology().minutes().add(getMillis().getChronology().minutes().add(getMillis().getChronology().minutes().add(getMillis().getChronology().minutes().add(getMillis().getChronology().minutes().add(getMillis().getChronology().minutes().add(getMillis().getChronology().minutes().add(getMillis().getChronology().minutes().add(getMillis().getChronology().minutes().add(getMillis().getChronology().minutes().add(getMillis().getChronology().minutes().add(getMillis().getChronology().minutes().add(getMillis().getChronology().minutes().add(getMillis().getChronology().minutes().add(getMillis().getChronology().minutes().add(getMillis().getChronology().minutes().add(getMillis().getChronology().minutes().add(getMillis().getChronology().minutes().add(getMillis().getChronology().minutes().add(getMillis().getChronology().minutes().add(getMillis().getChronology().minutes().add(getMillis().getChronology().minutes().add(getMillis().getChronology().minutes().add(getMillis().getChronology().minutes().add(getMillis().getChronology().minutes().add(getMillis().getChronology().minutes().add(getMillis().getChronology().minutes().add(getMillis().getChronology().minutes().add(getMillis().getChronology().minutes().add(getMillis().getChronology().minutes().add(getMillis().getChronology().minutes().add(getMillis().getChronology().minutes().add(getMillis().getChronology().minutes().add(getMillis().getChronology().minutes().add(getMillis().getChronology().minutes().add(getMillis().getChronology().minutes().add(getMillis().getChronology().minutes().add(getMillis().getChronology().minutes().add(getMillis().
private boolean injectMockCandidates(Class<?> awaitingInjectionClazz, Set<Object      private boolean injectMockCandidatesOnFields(Set<Object> mocks, Object instance, boolean injectionOccurred, List<Field> orderedInstanceFields) {          for (Iterator<Field> it = orderedInstanceFields.iterator(); it.hasNext(); ) {              Field field = it.next();             Object injected = mockCandidateFilter.filterCandidate(mocks, field, instance).thenInject();              if (injected != null) {                  injectionOccurred |= true;                  mocks.remove(injected);
public MockSettings defaultAnswer(Answer defaultAnswer) {      }       public boolean isSerializable() {          return extraInterfaces != null && java.util.Arrays.asList(extraInterfaces).contains(java.io.Serializable.class);       }       public void initiateMockName(Class classToMock) {      }       public MockSettings defaultAnswer(Answer defaultAnswer) {      }       public boolean isSerializable() {          return extraInterfaces != null && java.util.Arrays.asList(extraInterfaces).contains(java.io.Serializable.class);       }       public void initiateMockName(Class classToMock) {      }       public MockSettings defaultAnswer(Answer defaultAnswer) {      }       public boolean isSerializable() {          return extraInterfaces != null && java.util.Arrays.asList(extraInterfaces).contains(java.io.Serializable.class);       }       public void initiateMockName(Class classToMock) {      }       public MockSettings defaultAnswer(Answer defaultAnswer) {      }       public boolean isSerializable() {          return extraInterfaces != null && java.util.Arrays.asList(extraInterfaces).contains(java.io.Serializable.class);       }       public void initiateMockName(Class classToMock) {      }       public MockSettings defaultAnswer(Answer defaultAnswer) {      }       public boolean isSerializable() {          return extraInterfaces != null && java.util.Arrays.asList(extraInterfaces).contains(java.io.Serializable.class);       }       public void initiateMockName(Class classToMock) {      }       public MockSettings defaultAnswer(Answer defaultAnswer) {      }       public boolean isSerializable() {          return extraInterfaces != null && java.util.Arrays.asList(extraInterfaces).contains(java.io.Serializable.class);       }       public void initiateMockName(Class classToMock) {      }       public MockSettings defaultAnswer(Answer defaultAnswer) {      }       public boolean isSerializable() {          return extraInterfaces != null && java.util.Arrays.asList(extraInterfaces).contains(java.io.Serializable.class);       }       public void initiateMockName(Class classToMock) {      }       public MockSettings defaultAnswer(Answer defaultAnswer) {      }       public boolean isSerializable() {          return extraInterfaces != null && java.util.Arrays.asList(extraInterfaces).contains(
protected UnivariatePointValuePair doOptimize() {                      if (checker != null) {                      if (checker.conformed(iter, previous, current)) {                         return current;                      }                  } protected UnivariatePointValuePair doOptimize() {                      if (checker != null) {                      if (checker.conformed(iter, previous, current)) {                         return current;                      }                  } protected UnivariatePointValuePair doOptimize() {                      if (checker != null) {                      if (checker.conformed(iter, previous, current)) {                         return current;                      }                  } protected UnivariatePointValuePair doOptimize() {                      if (checker != null) {                      if (checker.conformed(iter, previous, current)) {                         return current;                      }                  } protected UnivariatePointValuePair doOptimize() {                      if (checker != null) {                      if (checker.conformed(iter, previous, current)) {                         return current;                      }                  } protected UnivariatePointValuePair doOptimize() {                      if (checker != null) {                      if (checker.conformed(iter, previous, current)) {                         return current;                      }                  } protected UnivariatePointValuePair doOptimize() {                      if (checker != null) {                      if (checker.conformed(iter, previous, current)) {                         return current;                      }                  } protected UnivariatePointValuePair doOptimize() {                      if (checker != null) {                      if (checker.conformed(iter, previous, current)) {                         return current;                      }                  } protected UnivariatePointValuePair doOptimize() {                      if (checker != null) {                      if (checker.conformed(iter, previous, current)) {                         return current;                      }                  } protected UnivariatePointValuePair doOptimize() {                      if (checker != null) {                      if (checker.conformed(iter, previous, current)) {                         return current;                      }                  } protected UnivariatePointValuePair doOptimize() {                      if (checker != null) {                      if (checker.conformed(iter, previous, current)) {                         return current;                      }                  } protected UnivariatePointValuePair doOptimize() {                      if (checker != null) {                      if (checker.conformed(iter, previous, current)) {                         return current;                      }                  } protected UnivariatePointValuePair do
public long getUnitMillis() {       * @return zero always       */      public int compareTo(DurationField durationField) {         if (durationField.isSupported()) {             return 1;         }          return 0;      }public long getUnitMillis() {       * @return zero always       */      public int compareTo(DurationField durationField) {         if (durationField.isSupported()) {             return 1;         }          return 0;      }public long getUnitMillis() {       * @return zero always       */      public int compareTo(DurationField durationField) {         if (durationField.isSupported()) {             return 1;         }          return 0;      }public long getUnitMillis() {       * @return zero always       */      public int compareTo(DurationField durationField) {         if (durationField.isSupported()) {             return 1;         }          return 0;      }public long getUnitMillis() {       * @return zero always       */      public int compareTo(DurationField durationField) {         if (durationField.isSupported()) {             return 1;         }          return 0;      }public long getUnitMillis() {       * @return zero always       */      public int compareTo(DurationField durationField) {         if (durationField.isSupported()) {             return 1;         }          return 0;      }public long getUnitMillis() {       * @return zero always       */      public int compareTo(DurationField durationField) {         if (durationField.isSupported()) {             return 1;         }          return 0;      }public long getUnitMillis() {       * @return zero always       */      public int compareTo(DurationField durationField) {         if (durationField.isSupported()) {             return 1;         }          return 0;      }public long getUnitMillis() {       * @return zero always       */      public int compareTo(DurationField durationField) {         if (durationField.isSupported()) {             return 1;         }          return 0;      }public long getUnitMillis() {       * @return zero always       */      public int compareTo(DurationField durationField) {         if (durationField.isSupported()) {             return 1;         }          return 0;      }public long getUnitMillis() {       * @return zero always       */      public int compareTo(DurationField durationField) {         if (durationField.isSupported()) {             return 1;        
public Vector2D intersection(final SubLine subLine, final boolean includeEndPoin          Vector2D v2D = line1.intersection(line2);          Location loc1 = getRemainingRegion().checkPoint(line1.toSubLine(v2D)); public Vector2D intersection(final SubLine subLine, final boolean includeEndPoin          Vector2D v2D = line1.intersection(line2);          Location loc1 = getRemainingRegion().checkPoint(line1.toSubLine(v2D)); public Vector2D intersection(final SubLine subLine, final boolean includeEndPoin          Vector2D v2D = line1.intersection(line2);          Location loc1 = getRemainingRegion().checkPoint(line1.toSubLine(v2D)); public Vector2D intersection(final SubLine subLine, final boolean includeEndPoin          Vector2D v2D = line1.intersection(line2);          Location loc1 = getRemainingRegion().checkPoint(line1.toSubLine(v2D)); public Vector2D intersection(final SubLine subLine, final boolean includeEndPoin          Vector2D v2D = line1.intersection(line2);          Location loc1 = getRemainingRegion().checkPoint(line1.toSubLine(v2D)); public Vector2D intersection(final SubLine subLine, final boolean includeEndPoin          Vector2D v2D = line1.intersection(line2);          Location loc1 = getRemainingRegion().checkPoint(line1.toSubLine(v2D)); public Vector2D intersection(final SubLine subLine, final boolean includeEndPoin          Vector2D v2D = line1.intersection(line2);          Location loc1 = getRemainingRegion().checkPoint(line1.toSubLine(v2D)); public Vector2D intersection(final SubLine subLine, final boolean includeEndPoin          Vector2D v2D = line1.intersection(line2);          Location loc1 = getRemainingRegion().checkPoint(line1.toSubLine(v2D)); public Vector2D intersection(final SubLine subLine, final boolean includeEndPoin          Vector2D v2D = line1.intersection(line2);          Location loc1 = getRemainingRegion().checkPoint(
private boolean canInline(          )        { private boolean canInline(          )        { private boolean canInline(          )        { private boolean canInline(          )        { private boolean canInline(          )        { private boolean canInline(          )        { private boolean canInline(          )        { private boolean canInline(          )        { private boolean canInline(          )        { private boolean canInline(          )        { private boolean canInline(          )        { private boolean canInline(          )        { private boolean canInline(          )        { private boolean canInline(          )        { private boolean canInline(          )        { private boolean canInline(          )        { private boolean canInline(          )        { private boolean canInline(          )        { private boolean canInline(          )        { private boolean canInline(          )        { private boolean canInline(          )        { private boolean canInline(          )        { private boolean canInline(          )        { private boolean canInline(          )        { private boolean canInline(          )        { private boolean canInline(          )        { private boolean canInline(          )        { private boolean canInline(          )        { private boolean canInline(          )        { private boolean canInline(          )        { private boolean canInline(          )        { private boolean canInline(          )        { private boolean canInline(          )        { private boolean canInline(          )        { private boolean canInline(          )        { private boolean canInline(          )        { private boolean canInline(          )        { private boolean canInline(          )        { private boolean canInline(          )        { private boolean canInline(          )        { private boolean canInline(          )        { private boolean canInline(          )        { private boolean canInline(          )        { private boolean canInline(          )        { private boolean canInline(          )        { private boolean canInline(          )        { private boolean canInline(          )        { private boolean canInline(          )        { private boolean canInline(          )        { private boolean canInline(          )        { private boolean canInline(          )        { 
public boolean setPrototype(PrototypeObjectType prototype) {        return false;      }     boolean replacedPrototype = prototype != null;      this.prototype = prototype;      this.prototypeSlot = new SimpleSlot("prototype", prototype, true);      this.prototype.setOwnerFunction(this);      if (isConstructor() || isInterface()) {        FunctionType superClass = getSuperClassConstructor();      }
public static Node tryFinally(Node tryBody, Node finallyBody) {    public static Node tryCatch(Node tryBody, Node catchNode) {      Preconditions.checkState(tryBody.isBlock());      Preconditions.checkState(catchNode.isCatch());     Node catchBody = block(catchNode).copyInformationFrom(catchNode);      return new Node(Token.TRY, tryBody, catchBody);    }    public static Node tryFinally(Node tryBody, Node finallyBody) {    public static Node tryCatch(Node tryBody, Node catchNode) {      Preconditions.checkState(tryBody.isBlock());      Preconditions.checkState(catchNode.isCatch());     Node catchBody = block(catchNode).copyInformationFrom(catchNode);      return new Node(Token.TRY, tryBody, catchBody);    }    public static Node tryFinally(Node tryBody, Node finallyBody) {    public static Node tryCatch(Node tryBody, Node catchNode) {      Preconditions.checkState(tryBody.isBlock());      Preconditions.checkState(catchNode.isCatch());     Node catchBody = block(catchNode).copyInformationFrom(catchNode);      return new Node(Token.TRY, tryBody, catchBody);    }    public static Node tryFinally(Node tryBody, Node finallyBody) {    public static Node tryCatch(Node tryBody, Node catchNode) {      Preconditions.checkState(tryBody.isBlock());      Preconditions.checkState(catchNode.isCatch());     Node catchBody = block(catchNode).copyInformationFrom(catchNode);      return new Node(Token.TRY, tryBody, catchBody);    }    public static Node tryFinally(Node tryBody, Node finallyBody) {    public static Node tryCatch(Node tryBody, Node catchNode) {      Preconditions.checkState(tryBody.isBlock());      Preconditions.checkState(catchNode.isCatch());     Node catchBody = block(catchNode).copyInformationFrom(catchNode);      return new Node(Token.TRY, tryBody, catchBody);    }    public static Node tryFinally(Node tryBody, Node finallyBody) {    public static Node tryCatch(Node tryBody, Node catchNode) {      Preconditions.checkState(tryBody.isBlock());      Preconditions.checkState(catchNode.isCatch());     Node catchBody =
public FitnessFunction() {           * @return the original objective variables, possibly repaired.           */ public double[] repairAndDecode(final double[] x) {             return                  decode(x);          }
private static final long serialVersionUID = 9386874258972L; private volatile int iPeriod; private static final long serialVersionUID = 9386874258972L; private volatile int iPeriod; private static final long serialVersionUID = 9386874258972L; private volatile int iPeriod; private static final long serialVersionUID = 9386874258972L; private volatile int iPeriod; private static final long serialVersionUID = 9386874258972L; private volatile int iPeriod; private static final long serialVersionUID = 9386874258972L; private volatile int iPeriod; private static final long serialVersionUID = 9386874258972L; private volatile int iPeriod; private static final long serialVersionUID = 9386874258972L; private volatile int iPeriod; private static final long serialVersionUID = 9386874258972L; private volatile int iPeriod; private static final long serialVersionUID = 9386874258972L; private volatile int iPeriod; private static final long serialVersionUID = 9386874258972L; private volatile int iPeriod; private static final long serialVersionUID = 9386874258972L; private volatile int iPeriod; private static final long serialVersionUID = 9386874258972L; private volatile int iPeriod; private static final long serialVersionUID = 9386874258972L; private volatile int iPeriod; private static final long serialVersionUID = 9386874258972L; private volatile int iPeriod; private static final long serialVersionUID = 9386874258972L; private volatile int iPeriod; private static final long serialVersionUID = 9386874258972L; private volatile int iPeriod; private static final long serialVersionUID = 9386874258972L; private volatile int iPeriod; private static final long serialVersionUID = 9386874258972L; private volatile int iPeriod; private static final long serialVersionUID = 9386874258972L; private volatile int iPeriod; private static final long serialVersionUID = 9386874258972L; private volatile int iPeriod; private static final long serialVersionUID = 9386874258972L; private volatile int iPeriod; private static final long serialVersionUID = 9386874258972L; private volatile int iPeriod; private static final long
public static String escapeJava(String str) {       * @throws IOException if error occurs on underlying Writer       */public static void escapeJava(Writer out) throws IOException {         escapeJavaStyleString(out, str, false);      }      /** public static String escapeJava(String str) {       * @throws IOException if error occurs on underlying Writer       */public static void escapeJava(Writer out) throws IOException {         escapeJavaStyleString(out, str, true);      }      /** public static String escapeJava(String str) {       * @throws IOException if error occurs on underlying Writer       */public static void escapeJava(Writer out) throws IOException {         escapeJavaStyleString(out, str, false);      }      /** public static String escapeJava(String str) {       * @throws IOException if error occurs on underlying Writer       */public static void escapeJava(Writer out) throws IOException {         escapeJavaStyleString(out, str, true);      }      /** public static String escapeJava(String str) {       * @throws IOException if error occurs on underlying Writer       */public static void escapeJava(Writer out) throws IOException {         escapeJavaStyleString(out, str, false);      }      /** public static String escapeJava(String str) {       * @throws IOException if error occurs on underlying Writer       */public static void escapeJava(Writer out) throws IOException {         escapeJavaStyleString(out, str, true);      }      /** public static String escapeJava(String str) {       * @throws IOException if error occurs on underlying Writer       */public static void escapeJava(Writer out) throws IOException {         escapeJavaStyleString(out, str, false);      }      /** public static String escapeJava(String str) {       * @throws IOException if error occurs on underlying Writer       */public static void escapeJava(Writer out) throws IOException {         escapeJavaStyleString(out, str, true);      }      /** public static String escapeJava(String str) {       * @throws IOException if error occurs on underlying Writer       */public static void escapeJava(Writer out) throws IOException {         escapeJavaStyleString(out, str, false);      }      /** public static String escapeJava(String str) {       * @throws IOException if error occurs on underlying Writer       */public static void escapeJava(Writer out) throws IOException {         escapeJavaStyleString(out
void add(Node n, Context context) {          cc.addOp(opstr, true);          addExpr(last, p, rhsContext);        } else {         addExpr(first, p, context);         cc.addOp(opstr, false);         addExpr(last, p + 1, rhsContext);        }        return;      } void add(Node n, Context context) {          cc.addOp(opstr, true);          addExpr(last, p, rhsContext);        } else {         addExpr(first, p, context);         cc.addOp(opstr, false);         addExpr(last, p + 1, rhsContext);        }        return;      } void add(Node n, Context context) {          cc.addOp(opstr, true);          addExpr(last, p, rhsContext);        } else {         addExpr(first, p, context);         cc.addOp(opstr, false);         addExpr(last, p + 1, rhsContext);        }        return;      } void add(Node n, Context context) {          cc.addOp(opstr, true);          addExpr(last, p, rhsContext);        } else {         addExpr(first, p, context);         cc.addOp(opstr, false);         addExpr(last, p + 1, rhsContext);        }        return;      } void add(Node n, Context context) {          cc.addOp(opstr, true);          addExpr(last, p, rhsContext);        } else {         addExpr(first, p, context);         cc.addOp(opstr, false);         addExpr(last, p + 1, rhsContext);        }        return;      } void add(Node n, Context context) {          cc.addOp(opstr, true);          addExpr(last, p, rhsContext);        } else {         addExpr(first, p, context);         cc.addOp(opstr, false);         addExpr(last, p + 1, rhsContext);        }        return;      } void add(Node n, Context context) {          cc.addOp(opstr, true);          addExpr(last, p, rhsContext);        } else {         addExpr(first,
public static double cosh(double x) {       * @return {@code true} if the values are equal.       */      public static boolean equals(double x, double y) {         return (Double.isNaN(x) && Double.isNaN(y) || x == y);      }      /** public static double sinh(double x) {       * @return {@code true} if the values are equal.       */      public static boolean equals(double x, double y) {         return (Double.isNaN(x) && Double.isNaN(y) || x == y);      }      /** public static double sinh(double x) {       * @return {@code true} if the values are equal.       */      public static boolean equals(double x, double y) {         return (Double.isNaN(x) && Double.isNaN(y) || x == y);      }      /** public static double tanh(double x) {       * @return {@code true} if the values are equal.       */      public static boolean equals(double x, double y) {         return (Double.isNaN(x) && Double.isNaN(y) || x == y);      }      /** public static double tanh(double x) {       * @return {@code true} if the values are equal.       */      public static boolean equals(double x, double y) {         return (Double.isNaN(x) && Double.isNaN(y) || x == y);      }      /** public static double atanh(double x) {       * @return {@code true} if the values are equal.       */      public static boolean equals(double x, double y) {         return (Double.isNaN(x) && Double.isNaN(y) || x == y);      }      /** public static double atanh(double x) {       * @return {@code true} if the values are equal.       */      public static boolean equals(double x, double y) {         return (Double.isNaN(x) && Double.isNaN(y) || x == y);      }      /** public static double atanh(double x) {       * @return {@code true} if the values are equal.       */      public static boolean equals(double x, double y) {         return
public void noMoreInteractionsWantedInOrder(Invocation undesired) {          throw new VerificationInOrderFailure(join(                  "No interactions wanted here:",                  new LocationImpl(),                 "But found this interaction on mock '" + undesired.getMock() + "' on mock '" + undesired.getLocation()          ));      }public void noMoreInteractionsWantedInOrder(Invocation undesired) {          throw new VerificationInOrderFailure(join(                  "No interactions wanted here:",                  new LocationImpl(),                 "But found this interaction on mock '" + undesired.getMock() + "' on mock '" + undesired.getLocation()          ));      }public void noMoreInteractionsWantedInOrder(Invocation undesired) {          throw new VerificationInOrderFailure(join(                  "No interactions wanted here:",                  new LocationImpl(),                 "But found this interaction on mock '" + undesired.getMock() + "' on mock '" + undesired.getLocation()          ));      }public void noMoreInteractionsWantedInOrder(Invocation undesired) {          throw new VerificationInOrderFailure(join(                  "No interactions wanted here:",                  new LocationImpl(),                 "But found this interaction on mock '" + undesired.getMock() + "' on mock '" + undesired.getLocation()          ));      }public void noMoreInteractionsWantedInOrder(Invocation undesired) {          throw new VerificationInOrderFailure(join(                  "No interactions wanted here:",                  new LocationImpl(),                 "But found this interaction on mock '" + undesired.getMock() + "' on mock '" + undesired.getLocation()          ));      }public void noMoreInteractionsWantedInOrder(Invocation undesired) {          throw new VerificationInOrderFailure(join(                  "No interactions wanted here:",                  new LocationImpl(),                 "But found this interaction on mock '" + undesired.getMock() + "' on mock '" + undesired.getLocation()          ));      }public void noMoreInteractionsWantedInOrder(Invocation undesired) {          throw new VerificationInOrderFailure(join(                  "No interactions wanted here:",                  new LocationImpl(),                 "But found this interaction on mock '" + undesired.getMock() + "' on mock '" + undesired.getLocation()          ));     
public EqualsBuilder append(Object lhs, Object rhs) {          }          Class lhsClass = lhs.getClass();          if (!lhsClass.isArray()) {                  isEquals = lhs.equals(rhs);          } else if (lhs.getClass() != rhs.getClass()) {              this.set(false);
void apply() {        this.nameNode = nameNode;        this.isPropertyAssign = isPropertyAssign;       this.maybeAliased = !assignNode.getParent().isExprResult();        this.mayHaveSecondarySideEffects =            maybeAliased ||            NodeUtil.maySideEffects(assignNode.getFirstChild());
public void setHourOfDay(final int hourOfDay) {       * @throws IllegalArgumentException if the value is invalid       */ public void addHours(final int hours) {              setMillis(getChronology().hours().add(getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().getMillis().
void maybeDeclareQualifiedName(NodeTraversal t, JSDocInfo info,              || FunctionTypeBuilder.isFunctionTypeDeclaration(info));        }       if (inferred) {         inferred = !(rhsValue != null &&             rhsValue.isFunction &&             (info != null && !scope.isDeclared(qName, false));        }       if (inferred) {         inferred = !(rhsValue != null &&             rhsValue.isFunction &&             (info != null && !scope.isDeclared(qName, false));        }       if (inferred) {         inferred = !(rhsValue != null &&             rhsValue.isFunction &&             (info != null && !scope.isDeclared(qName, false));        }       if (inferred) {         inferred = !(rhsValue != null &&             rhsValue.isFunction &&             (info != null && !scope.isDeclared(qName, false));        }       if (inferred) {         inferred = !(rhsValue != null &&             rhsValue.isFunction &&             (info != null && !scope.isDeclared(qName, false));        }       if (inferred) {         inferred = !(rhsValue != null &&             rhsValue.isFunction &&             (info != null && !scope.isDeclared(qName, false));        }       if (inferred) {         inferred = !(rhsValue != null &&             rhsValue.isFunction &&             (info != null && !scope.isDeclared(qName, false));        }       if (inferred) {         inferred = !(rhsValue != null &&             rhsValue.isFunction &&             (info != null && !scope.isDeclared(qName, false));        }       if (inferred) {         inferred = !(rhsValue != null &&             rhsValue.isFunction &&             (info != null && !scope.isDeclared(qName, false));        }       if (inferred) {         inferred = !(rhsValue != null &&             rhsValue.isFunction &&             (info != null && !scope.isDeclared(qName, false));        }       if (inferred) {         inferred = !(rhsValue != null &&             rhsValue.isFunction &&             (info != null && !scope.isDeclared(qName, false
