public ElitisticListPopulation(final List<Chromosome> chromosomes,                                     final int populationLimit,                                     final double elitismRate) {public ElitisticListPopulation(final List<Chromosome> chromosomes,                                     final int populationLimit,                                     final double elitismRate) {public ElitisticListPopulation(final List<Chromosome> chromosomes,                                     final int populationLimit,                                     final double elitismRate) {public ElitisticListPopulation(final List<Chromosome> chromosomes,                                     final int populationLimit,                                     final double elitismRate) {public ElitisticListPopulation(final List<Chromosome> chromosomes,                                     final int populationLimit,                                     final double elitismRate) {public ElitisticListPopulation(final List<Chromosome> chromosomes,                                     final int populationLimit,                                     final double elitismRate) {public ElitisticListPopulation(final List<Chromosome> chromosomes,                                     final int populationLimit,                                     final double elitismRate) {public ElitisticListPopulation(final List<Chromosome> chromosomes,                                     final int populationLimit,                                     final double elitismRate) {public ElitisticListPopulation(final List<Chromosome> chromosomes,                                     final int populationLimit,                                     final double elitismRate) {public ElitisticListPopulation(final List<Chromosome> chromosomes,                                     final int populationLimit,                                     final double elitismRate) {public ElitisticListPopulation(final List<Chromosome> chromosomes,                                     final int populationLimit,                                     final double elitismRate) {public ElitisticListPopulation(final List<Chromosome> chromosomes,                                     final int populationLimit,                                     final double elitismRate) {public ElitisticListPopulation(final List<Chromosome> chromosomes,                                     final int populationLimit,                                     final double elitismRate) {public ElitisticListPopulation(final List<Chromosome> chromosomes,                                     final int populationLimit,                                     final double elitismRate) {public ElitisticListPopulation(final List<Chromosome> chromosomes,                                     final int populationLimit,                                     final double elitismRate) {public ElitisticListPopulation(final List<Chromosome> chromosomes,                                     final int populationLimit,                                     final double elitismRate
protected void dropPhase2Objective() {          for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {              final double entry = tableau.getEntry(0, i);             if (Precision.compareTo(entry, 0d, maxUlps) > 0) {                  columnsToDrop.add(i);              }          } protected void dropPhase3Objective() {          for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {              final double entry = tableau.getEntry(0, i);             if (Precision.compareTo(entry, 0d, maxUlps) > 0) {                  columnsToDrop.add(i);              }          } protected void dropPhase4Objective() {          for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {              final double entry = tableau.getEntry(0, i);             if (Precision.compareTo(entry, 0d, maxUlps) > 0) {                  columnsToDrop.add(i);              }          } protected void dropPhase5Objective() {          for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {              final double entry = tableau.getEntry(0, i);             if (Precision.compareTo(entry, 0d, maxUlps) > 0) {                  columnsToDrop.add(i);              }          } protected void dropPhase6Objective() {          for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {              final double entry = tableau.getEntry(0, i);             if (Precision.compareTo(entry, 0d, maxUlps) > 0) {                  columnsToDrop.add(i);              }          } protected void dropPhase7Objective() {          for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {              final double entry = tableau.getEntry(0, i);             if (Precision.compareTo(entry, 0d, maxUlps) > 0) {                  columnsToDrop.add(i);              }          } protected void dropPhase8Objective() {          for (
protected VectorialPointValuePair doOptimize()                      if (s != 0) {                          double sum = 0; for (int i = 0; i <= j; ++i) {                             sum += jacobian[i][pj] * residuals[i];                          }                          maxCosine = Math.max(maxCosine, Math.abs(sum) / (s * cost));                      }
public double getChiSquare(EstimationProblem problem) {      public double[] guessParametersErrors(EstimationProblem problem)        throws EstimationException {          int m = problem.getMeasurements().length;  int p = problem.getAllParameters().length;          if (m <= p) {              throw new EstimationException("no degrees of freedom ({0} measurements, {1} parameters)",                                            new Object[] { new Integer(m), new Integer(p)});           }         double[] errors = new double[problem.getAllParameters().length];          final double c = problem.getMeasurements()[0];          final double c2 = problem.getMeasurements()[1];          final double c3 = problem.getMeasurements()[2];          final double c4 = problem.getMeasurements()[3];          final double c5 = problem.getMeasurements()[4];          final double c6 = problem.getMeasurements()[5];          final double c7 = problem.getMeasurements()[6];          final double c8 = problem.getMeasurements()[7];          final double c9 = problem.getMeasurements()[8];          final double c10 = problem.getMeasurements()[9];          final double c11 = problem.getMeasurements()[10];          final double c12 = problem.getMeasurements()[11];          final double c13 = problem.getMeasurements()[12];          final double c14 = problem.getMeasurements()[13];          final double c15 = problem.getMeasurements()[14];          final double c16 = problem.getMeasurements()[15];          final double c17 = problem.getMeasurements()[16];          final double c18 = problem.getMeasurements()[17];          final double c19 = problem.getMeasurements()[18];          final double c20 = problem.getMeasurements()[19];          final double c21 = problem.getMeasurements()[20];          final double c22 = problem.getMeasurements()[21];          final double c23 = problem.getMeasurements()[22];          final double c24 = problem.getMeasurements()[23];          final double c25 = problem.getMeasurements()[24];          final double c26 = problem.getMeasurements()[
public Object intercept(Object obj, Method method, Object[] args, MethodProxy pr                  return "SmartNull returned by unstubbed " + formatMethodCall() + " method on mock";               }              new Reporter().smartNullPointerException(location);               return null;           } public Object intercept(Object obj, Method method, Object[] args, MethodProxy pr                  return "SmartNull returned by unstubbed " + formatMethodCall() + " method on mock";               }              new Reporter().smartNullPointerException(location);               return null;           } public Object intercept(Object obj, Method method, Object[] args, MethodProxy pr                  return "SmartNull returned by unstubbed " + formatMethodCall() + " method on mock";               }              new Reporter().smartNullPointerException(location);               return null;           } public Object intercept(Object obj, Method method, Object[] args, MethodProxy pr                  return "SmartNull returned by unstubbed " + formatMethodCall() + " method on mock";               }              new Reporter().smartNullPointerException(location);               return null;           } public Object intercept(Object obj, Method method, Object[] args, MethodProxy pr                  return "SmartNull returned by unstubbed " + formatMethodCall() + " method on mock";               }              new Reporter().smartNullPointerException(location);               return null;           } public Object intercept(Object obj, Method method, Object[] args, MethodProxy pr                  return "SmartNull returned by unstubbed " + formatMethodCall() + " method on mock";               }              new Reporter().smartNullPointerException(location);               return null;           } public Object intercept(Object obj, Method method, Object[] args, MethodProxy pr                  return "SmartNull returned by unstubbed " + formatMethodCall() + " method on mock";               }              new Reporter().smartNullPointerException(location);               return null;           } public Object intercept(Object obj, Method method, Object[] args, MethodProxy pr                  return "SmartNull returned by unstubbed " + formatMethodCall() + " method on mock";               }              new Reporter().smartNullPointerException(location);               return null;           } public Object intercept(Object obj, Method method, Object[] args, MethodProxy pr                  return "SmartNull returned by unstubbed " + formatMethodCall() + " method on mock";               }              new Reporter().smartNullPointerException(location);               return null;
public Week(Date time, TimeZone zone)       */       public Week(Date time, TimeZone zone)       */       public Week(Date time)       */       public Week(Date time, TimeZone zone)       */       public Week(Date time)       */       public Week(Date time)       */       public Week(Date time)       */       public Week(Date time)       */       public Week(Date time)       */       public Week(Date time)       */       public Week(Date time)       */       public Week(Date time)       */       public Week(Date time)       */       public Week(Date time)       */       public Week(Date time)       */       public Week(Date time)       */       public Week(Date time)       */       public Week(Date time)       */       public Week(Date time)       */       public Week(Date time)       */       public Week(Date time)       */       public Week(Date time)       */       public Week(Date time)       */       public Week(Date time)       */       public Week(Date time)       */       public Week(Date time)       */       public Week(Date time)       */       public Week(Date time)       */       public Week(Date time)       */       public Week(Date time)       */       public Week(Date time)       */       public Week(Date time)       */       public Week(Date time)       */       public Week(Date time)       */       public Week(Date time)       */       public Week(Date time)       */       public Week(Date time)       */       public Week(Date time)       */       public Week(Date time)       */       public Week(Date time)       */       public Week(Date time)       */       public Week(Date time)       */       public Week(Date time)       */       public Week(Date time)       */       public Week(Date time)       */       public Week(Date time)       */       public Week(Date time)       */       public Week(Date time)       */       public Week(Date time)       */       public Week(Date time)       */       public Week(Date time)       */       public Week(Date time)       */       public Week(Date time)       */       public Week(Date time)       */       public Week(Date time)       */       public Week(Date time)
public void addValue(double value) {          secondMoment.increment(value);         if (!(meanImpl instanceof Mean)) {              meanImpl.increment(value);          }         if (!(varianceImpl instanceof Variance)) {              varianceImpl.increment(value);          }         if (!(geoMeanImpl instanceof GeometricMean)) {              geoMeanImpl.increment(value);          }          n++; public void addValue(double value) {          secondMoment.increment(value);         if (!(meanImpl instanceof Mean)) {              meanImpl.increment(value);          }         if (!(varianceImpl instanceof Variance)) {              varianceImpl.increment(value);          }         if (!(geoMeanImpl instanceof GeometricMean)) {              geoMeanImpl.increment(value);          }          n++; public void addValue(double value) {          secondMoment.increment(value);         if (!(meanImpl instanceof Mean)) {              meanImpl.increment(value);          }         if (!(varianceImpl instanceof Variance)) {              varianceImpl.increment(value);          }         if (!(geoMeanImpl instanceof GeometricMean)) {              geoMeanImpl.increment(value);          }          n++; public void addValue(double value) {          secondMoment.increment(value);         if (!(meanImpl instanceof Mean)) {              meanImpl.increment(value);          }         if (!(varianceImpl instanceof Variance)) {              varianceImpl.increment(value);          }         if (!(geoMeanImpl instanceof GeometricMean)) {              geoMeanImpl.increment(value);          }          n++; public void addValue(double value) {          secondMoment.increment(value);         if (!(meanImpl instanceof Mean)) {              meanImpl.increment(value);          }         if (!(varianceImpl instanceof Variance)) {              varianceImpl.increment(value);          }         if (!(geoMeanImpl instanceof GeometricMean)) {              geoMeanImpl.increment(value);          }          n++; public void addValue(double value) {          secondMoment.increment(value);         if (!(meanImpl instanceof Mean)) {              meanImpl.increment(value);          }         if (!(varianceImpl instanceof Variance)) {              varianceImpl.increment(value);          }         if (!(geoMeanImpl instanceof GeometricMean)) {              geoMeanImpl
void addIdentifier(String identifier) {       * Constants (true, false, null) are considered basically free,       * because it's likely that they will get folded when it's done.       */    }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }
FunctionTypeBuilder inferFromOverriddenFunction(        }        parametersNode = paramBuilder.build();      }  FunctionTypeBuilder inferFromOverriddenFunction(        }        parametersNode = paramBuilder.build();      }  FunctionTypeBuilder inferFromOverriddenFunction(        }        parametersNode = paramBuilder.build();      }  FunctionTypeBuilder inferFromOverriddenFunction(        }        parametersNode = paramBuilder.build();      }  FunctionTypeBuilder inferFromOverriddenFunction(        }        parametersNode = paramBuilder.build();      }  FunctionTypeBuilder inferFromOverriddenFunction(        }        parametersNode = paramBuilder.build();      }  FunctionTypeBuilder inferFromOverriddenFunction(        }        parametersNode = paramBuilder.build();      }  FunctionTypeBuilder inferFromOverriddenFunction(        }        parametersNode = paramBuilder.build();      }  FunctionTypeBuilder inferFromOverriddenFunction(        }        parametersNode = paramBuilder.build();      }  FunctionTypeBuilder inferFromOverriddenFunction(        }        parametersNode = paramBuilder.build();      }  FunctionTypeBuilder inferFromOverriddenFunction(        }        parametersNode = paramBuilder.build();      }  FunctionTypeBuilder inferFromOverriddenFunction(        }        parametersNode = paramBuilder.build();      }  FunctionTypeBuilder inferFromOverriddenFunction(        }        parametersNode = paramBuilder.build();      }  FunctionTypeBuilder inferFromOverriddenFunction(        }        parametersNode = paramBuilder.build();      }  FunctionTypeBuilder inferFromOverriddenFunction(        }        parametersNode = paramBuilder.build();      }  FunctionTypeBuilder inferFromOverriddenFunction(        }        parametersNode = paramBuilder.build();      }  FunctionTypeBuilder inferFromOverriddenFunction(        }        parametersNode = paramBuilder.build();      }  FunctionTypeBuilder inferFromOverriddenFunction(        }        parametersNode = paramBuilder.build();      }  FunctionTypeBuilder inferFromOverriddenFunction(        }        parametersNode = paramBuilder.build();      }  FunctionTypeBuilder inferFromOverriddenFunction(        }        parametersNode = paramBuilder.build();      }  FunctionTypeBuilder inferFromOverriddenFunction(        }        parametersNode = paramBuilder.build();      }  FunctionTypeBuilder inferFromOverr
Node processArrayLiteral(ArrayLiteral literalNode) {      @Override      Node processAssignment(Assignment assignmentNode) {        Node assign = processInfixExpression(assignmentNode);        return assign;      }      @Override      Node processAssignment(Assignment assignmentNode) {        Node assign = processInfixExpression(assignmentNode);        return assign;      }      @Override      Node processAssignment(Assignment assignmentNode) {        Node assign = processInfixExpression(assignmentNode);        return assign;      }      @Override      Node processAssignment(Assignment assignmentNode) {        Node assign = processInfixExpression(assignmentNode);        return assign;      }      @Override      Node processAssignment(Assignment assignmentNode) {        Node assign = processInfixExpression(assignmentNode);        return assign;      }      @Override      Node processAssignment(Assignment assignmentNode) {        Node assign = processInfixExpression(assignmentNode);        return assign;      }      @Override      Node processAssignment(Assignment assignmentNode) {        Node assign = processInfixExpression(assignmentNode);        return assign;      }      @Override      Node processAssignment(Assignment assignmentNode) {        Node assign = processInfixExpression(assignmentNode);        return assign;      }      @Override      Node processAssignment(Assignment assignmentNode) {        Node assign = processInfixExpression(assignmentNode);        return assign;      }      @Override      Node processAssignment(Assignment assignmentNode) {        Node assign = processInfixExpression(assignmentNode);        return assign;      }      @Override      Node processAssignment(Assignment assignmentNode) {        Node assign = processInfixExpression(assignmentNode);        return assign;      }      @Override      Node processAssignment(Assignment assignmentNode) {        Node assign = processInfixExpression(assignmentNode);        return assign;      }      @Override      Node processAssignment(Assignment assignmentNode) {        Node assign = processInfixExpression(assignmentNode);        return assign;      }      @Override      Node processAssignment(Assignment assignmentNode) {        Node assign = processInfixExpression(assignmentNode);        return assign;      }      @Override      Node processAssignment(Assignment assignmentNode) {        Node assign = processInfixExpression(assignmentNode);        return assign;      }      @Override      Node processAssignment(Assignment assignmentNode) {        Node assign = processInfixExpression(assignmentNode);        return assign;      }      @Override
private void unrollBinaryOperator(    static boolean isSimpleNumber(String s) {      int len = s.length();      for (int index = 0; index < len; index++) {        char c = s.charAt(index);        if (c < '0' || c > '9') {          return false;        }     }     return len > 0 && s.charAt(0) != '0';    }    static double getSimpleNumber(String s) { private void unrollBinaryOperator(    static boolean isSimpleNumber(String s) {      int len = s.length();      for (int index = 0; index < len; index++) {        char c = s.charAt(index);        if (c < '0' || c > '9') {          return false;        }     }     return len > 0 && s.charAt(0) != '0';    }    static double getSimpleNumber(String s) { private void unrollBinaryOperator(    static boolean isSimpleNumber(String s) {      int len = s.length();      for (int index = 0; index < len; index++) {        char c = s.charAt(index);        if (c < '0' || c > '9') {          return false;        }     }     return len > 0 && s.charAt(0) != '0';    }    static double getSimpleNumber(String s) { private void unrollBinaryOperator(    static boolean isSimpleNumber(String s) {      int len = s.length();      for (int index = 0; index < len; index++) {        char c = s.charAt(index);        if (c < '0' || c > '9') {          return false;        }     }     return len > 0 && s.charAt(0) != '0';    }    static double getSimpleNumber(String s) { private void unrollBinaryOperator(    static boolean isSimpleNumber(String s) {      int len = s.length();      for (int index = 0; index < len; index++) {        char c = s.charAt(index);        if (c < '0' || c > '9') {          return false;        }     }     return len > 0
public void collect(JSModule module, Scope scope, Node n) {                  isSet = true;                  type = Name.Type.FUNCTION;                  break; public void collect(JSModule module, Scope scope, Node n) {                  isSet = true;                  type = Name.Type.FUNCTION;                  break; public void collect(JSModule module, Scope scope, Node n) {                  isSet = true;                  type = Name.Type.FUNCTION;                  break; public void collect(JSModule module, Scope scope, Node n) {                  isSet = true;                  type = Name.Type.FUNCTION;                  break; public void collect(JSModule module, Scope scope, Node n) {                  isSet = true;                  type = Name.Type.FUNCTION;                  break; public void collect(JSModule module, Scope scope, Node n) {                  isSet = true;                  type = Name.Type.FUNCTION;                  break; public void collect(JSModule module, Scope scope, Node n) {                  isSet = true;                  type = Name.Type.FUNCTION;                  break; public void collect(JSModule module, Scope scope, Node n) {                  isSet = true;                  type = Name.Type.FUNCTION;                  break; public void collect(JSModule module, Scope scope, Node n) {                  isSet = true;                  type = Name.Type.FUNCTION;                  break; public void collect(JSModule module, Scope scope, Node n) {                  isSet = true;                  type = Name.Type.FUNCTION;                  break; public void collect(JSModule module, Scope scope, Node n) {                  isSet = true;                  type = Name.Type.FUNCTION;                  break; public void collect(JSModule module, Scope scope, Node n) {                  isSet = true;                  type = Name.Type.FUNCTION;                  break; public void collect(JSModule module, Scope scope, Node n) {                  isSet = true;                  type = Name.Type.FUNCTION;                  break; public void collect(JSModule module, Scope scope, Node n) {                  isSet = true;                  type = Name.Type.FUNCTION;                  break; public void collect(JSModule module, Scope scope, Node n) {                  isSet = true;                  type = Name.Type.FUNCTION;                  break; public void collect(JSModule module, Scope scope, Node n) {
public static double sinh(double x) {        if (x > 20) {                return 0.5 * exp(x);            }       if (x < -20) {                return -0.5 * exp(-x);            }        if (x == 0) {                 return 0.5 * exp(x);
public void printTo(StringBuffer buf, ReadablePeriod period, Locale locale) {              if (iPrefix != null) {                  iPrefix.printTo(buf, value);              }              int minDigits = iMinPrintedDigits;              if (minDigits <= 1) {                  FormatUtils.appendUnpaddedInteger(buf, value);
private Node tryFoldArrayJoin(Node n) {      Node right = callTarget.getNext();      if (right != null) {       if (!NodeUtil.isImmutableValue(right)) {          return n;  private Node tryFoldArrayJoin(Node n) {      Node right = callTarget.getNext();      if (right != null) {       if (!NodeUtil.isImmutableValue(right)) {          return n;  private Node tryFoldArrayJoin(Node n) {      Node right = callTarget.getNext();      if (right != null) {       if (!NodeUtil.isImmutableValue(right)) {          return n;  private Node tryFoldArrayJoin(Node n) {      Node right = callTarget.getNext();      if (right != null) {       if (!NodeUtil.isImmutableValue(right)) {          return n;  private Node tryFoldArrayJoin(Node n) {      Node right = callTarget.getNext();      if (right != null) {       if (!NodeUtil.isImmutableValue(right)) {          return n;  private Node tryFoldArrayJoin(Node n) {      Node right = callTarget.getNext();      if (right != null) {       if (!NodeUtil.isImmutableValue(right)) {          return n;  private Node tryFoldArrayJoin(Node n) {      Node right = callTarget.getNext();      if (right != null) {       if (!NodeUtil.isImmutableValue(right)) {          return n;  private Node tryFoldArrayJoin(Node n) {      Node right = callTarget.getNext();      if (right != null) {       if (!NodeUtil.isImmutableValue(right)) {          return n;  private Node tryFoldArrayJoin(Node n) {      Node right = callTarget.getNext();      if (right != null) {       if (!NodeUtil.isImmutableValue(right)) {          return n;  private Node tryFoldArrayJoin(Node n) {      Node right = callTarget.getNext();      if (right != null) {       if (!NodeUtil.isImmutableValue(right)) {          return n;  private Node tryFoldArrayJoin(Node n) {      Node right = callTarget.getNext();      if (right != null) {      
private Integer getPivotRow(final int col, final SimplexTableau tableau) {          for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {              final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);              final double entry = tableau.getEntry(i, col);             if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {                  final double ratio = rhs / entry;                  if (ratio < minRatio) {                      minRatio = ratio; private Integer getPivotRow(final int col, final SimplexTableau tableau) {          for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {              final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);              final double entry = tableau.getEntry(i, col);             if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {                  final double ratio = rhs / entry;                  if (ratio < minRatio) {                      minRatio = ratio; private Integer getPivotRow(final int col, final SimplexTableau tableau) {          for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {              final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);              final double entry = tableau.getEntry(i, col);             if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {                  final double ratio = rhs / entry;                  if (ratio < minRatio) {                      minRatio = ratio; private Integer getPivotRow(final int col, final SimplexTableau tableau) {          for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {              final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);              final double entry = tableau.getEntry(i, col);             if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {                  final double ratio = rhs / entry;                  if (ratio < minRatio) {                      minRatio = ratio; private Integer getPivotRow(
JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {      JSType maybeTypeOfThis = safeResolve(typeOfThis, t, scope);      if (maybeTypeOfThis instanceof ObjectType) {        typeOfThis = (ObjectType) maybeTypeOfThis;      }
public boolean evaluateStep(final Interpolator interpolator)                      increasing = gb >= ga;public boolean evaluateStep(final Interpolator interpolator)                      increasing = gb >= ga;public boolean evaluateStep(final Interpolator interpolator)                      increasing = gb >= ga;public boolean evaluateStep(final Interpolator interpolator)                      increasing = gb >= ga;public boolean evaluateStep(final Interpolator interpolator)                      increasing = gb >= ga;public boolean evaluateStep(final Interpolator interpolator)                      increasing = gb >= ga;public boolean evaluateStep(final Interpolator interpolator)                      increasing = gb >= ga;public boolean evaluateStep(final Interpolator interpolator)                      increasing = gb >= ga;public boolean evaluateStep(final Interpolator interpolator)                      increasing = gb >= ga;public boolean evaluateStep(final Interpolator interpolator)                      increasing = gb >= ga;public boolean evaluateStep(final Interpolator interpolator)                      increasing = gb >= ga;public boolean evaluateStep(final Interpolator interpolator)                      increasing = gb >= ga;public boolean evaluateStep(final Interpolator interpolator)                      increasing = gb >= ga;public boolean evaluateStep(final Interpolator interpolator)                      increasing = gb >= ga;public boolean evaluateStep(final Interpolator interpolator)                      increasing = gb >= ga;public boolean evaluateStep(final Interpolator interpolator)                      increasing = gb >= ga;public boolean evaluateStep(final Interpolator interpolator)                      increasing = gb >= ga;public boolean evaluateStep(final Interpolator interpolator)                      increasing = gb >= ga;public boolean evaluateStep(final Interpolator interpolator)                      increasing = gb >= ga;public boolean evaluateStep(final Interpolator interpolator)                      increasing = gb >= ga;public boolean evaluateStep(final Interpolator interpolator)                      increasing = gb >= ga;public boolean evaluateStep(final Interpolator interpolator)                      increasing = gb >= ga;public boolean evaluateStep(final Interpolator interpolator)                      increasing = gb >= ga;public boolean evaluateStep(final Interpolator interpolator)                      increasing = gb >= ga;public boolean evaluateStep(final Interpolator interpolator)                      increasing = gb >= ga;public boolean evaluateStep(final Interpolator interpolator)                      increasing = gb >= ga;public boolean evaluateStep(final Interpolator interpolator)                      increasing = gb >= ga;public boolean evaluateStep(final Interpolator interpolator)                      increasing = gb >= ga;public boolean evaluateStep(final
private Object deepStub(InvocationOnMock invocation, GenericMetadataSupport retu          return recordDeepStubAnswer(                  newDeepStubMock(retTypeGenericMetadata),                   container           );       } private Object deepStub(InvocationOnMock invocation, GenericMetadataSupport retu          return recordDeepStubAnswer(                  newDeepStubMock(retTypeGenericMetadata),                   container           );       } private Object deepStub(InvocationOnMock invocation, GenericMetadataSupport retu          return recordDeepStubAnswer(                  newDeepStubMock(retTypeGenericMetadata),                   container           );       } private Object deepStub(InvocationOnMock invocation, GenericMetadataSupport retu          return recordDeepStubAnswer(                  newDeepStubMock(retTypeGenericMetadata),                   container           );       } private Object deepStub(InvocationOnMock invocation, GenericMetadataSupport retu          return recordDeepStubAnswer(                  newDeepStubMock(retTypeGenericMetadata),                   container           );       } private Object deepStub(InvocationOnMock invocation, GenericMetadataSupport retu          return recordDeepStubAnswer(                  newDeepStubMock(retTypeGenericMetadata),                   container           );       } private Object deepStub(InvocationOnMock invocation, GenericMetadataSupport retu          return recordDeepStubAnswer(                  newDeepStubMock(retTypeGenericMetadata),                   container           );       } private Object deepStub(InvocationOnMock invocation, GenericMetadataSupport retu          return recordDeepStubAnswer(                  newDeepStubMock(retTypeGenericMetadata),                   container           );       } private Object deepStub(InvocationOnMock invocation, GenericMetadataSupport retu          return recordDeepStubAnswer(                  newDeepStubMock(retTypeGenericMetadata),                   container           );       } private Object deepStub(InvocationOnMock invocation, GenericMetadataSupport retu          return recordDeepStubAnswer(                  newDeepStubMock(retTypeGenericMetadata),                   container           );       } private Object deepStub(InvocationOnMock invocation, GenericMetadataSupport retu          return recordDeepStubAnswer(                  newDeepStubMock(retTypeGenericMetadata),                   container           );       } private Object deepStub(InvocationOnMock invocation, GenericMetadataSupport retu          return recordDeepStubAnswer(                  newDeepStubMock(retTypeGenericMetadata),                   container           );       } private Object deepStub(InvocationOnMock invocation, GenericMetadataSupport retu          return recordDeepStubAnswer(                  newDeepStubMock(retType
public void applyAlias() {    private class AliasedTypeNode implements AliasUsage {      private final Node typeReference;      private final String aliasName;     AliasedTypeNode(Node typeReference,          String aliasName) {        this.typeReference = typeReference;         this.aliasName = aliasName;     }      @Override      public void applyAlias() {       typeReference.setString(aliasName);      }    } public void applyAlias() {    private class AliasedTypeNode implements AliasUsage {      private final Node typeReference;      private final String aliasName;     AliasedTypeNode(Node typeReference,          String aliasName) {        this.typeReference = typeReference;         this.aliasName = aliasName;     }      @Override      public void applyAlias() {       typeReference.setString(aliasName);      }    } public void applyAlias() {    private class AliasedTypeNode implements AliasUsage {      private final Node typeReference;      private final String aliasName;     AliasedTypeNode(Node typeReference,          String aliasName) {        this.typeReference = typeReference;         this.aliasName = aliasName;     }      @Override      public void applyAlias() {       typeReference.setString(aliasName);      }    } public void applyAlias() {    private class AliasedTypeNode implements AliasUsage {      private final Node typeReference;      private final String aliasName;     AliasedTypeNode(Node typeReference,          String aliasName) {        this.typeReference = typeReference;         this.aliasName = aliasName;     }      @Override      public void applyAlias() {       typeReference.setString(aliasName);      }    } public void applyAlias() {    private class AliasedTypeNode implements AliasUsage {      private final Node typeReference;      private final String aliasName;     AliasedTypeNode(Node typeReference,          String aliasName) {        this.typeReference = typeReference;         this.aliasName = aliasName;     }      @Override      public void applyAlias() {       typeReference.setString(aliasName);      }    } public void applyAlias() {    private class AliasedTypeNode implements AliasUsage {      private final Node typeReference;      private final String aliasName;     AliasedTypeNode(Node typeReference,          String aliasName
public class Timer { public class Timer { public class Timer { public class Timer { public class Timer { public class Timer { public class Timer { public class Timer { public class Timer { public class Timer { public class Timer { public class Timer { public class Timer { public class Timer { public class Timer { public class Timer { public class Timer { public class Timer { public class Timer { public class Timer { public class Timer { public class Timer { public class Timer { public class Timer { public class Timer { public class Timer { public class Timer { public class Timer { public class Timer { public class Timer { public class Timer { public class Timer { public class Timer { public class Timer { public class Timer { public class Timer { public class Timer { public class Timer { public class Timer { public class Timer { public class Timer { public class Timer { public class Timer { public class Timer { public class Timer { public class Timer { public class Timer { public class Timer { public class Timer { public class Timer { public class Timer { public class Timer { public class Timer { public class Timer { public class Timer { public class Timer { public class Timer { public class Timer { public class Timer { public class Timer { public class Timer { public class Timer { public class Timer { public class Timer { public class Timer { public class Timer { public class Timer { public class Timer { public class Timer { public class Timer { public class Timer { public class Timer { public class Timer { public class Timer { public class Timer { public class Timer { public class Timer { public class Timer { public class Timer { public class Timer { public class Timer { public class Timer { public class Timer { public class Timer { public class Timer { public class Timer { public class Timer { public class Timer { public class Timer { public class Timer { public class Timer { public class Timer { public class Timer { public class Timer { public class Timer { public class Timer { public class Timer { public class Timer { public class Timer { public class Timer { public class Timer { public class Timer { 
protected final double doSolve() {                      break;                  case REGULA_FALSI:                     if (x == x1) {                         x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));                         f0 = computeObjectiveValue(x0);                     }                      break;                  case REGULA_FALSI:                     if (x == x1) {                         x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));                         f0 = computeObjectiveValue(x0);                     }                      break;                  case REGULA_FALSI:                     if (x == x1) {                         x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));                         f0 = computeObjectiveValue(x0);                     }                      break;                  case REGULA_FALSI:                     if (x == x1) {                         x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));                         f0 = computeObjectiveValue(x0);                     }                      break;                  case REGULA_FALSI:                     if (x == x1) {                         x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));                         f0 = computeObjectiveValue(x0);                     }                      break;                  case REGULA_FALSI:                     if (x == x1) {                         x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));                         f0 = computeObjectiveValue(x0);                     }                      break;                  case REGULA_FALSI:                     if (x == x1) {                         x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));                         f0 = computeObjectiveValue(x0);                     }                      break;                  case REGULA_FALSI:                     if (x == x1) {                         x0 = 0.5 * (x0
static void register(Object value) {       * @since 2.3       */      static void unregister(Object value) {         getRegistry().remove(new IDKey(value));      }      static void unregister(Object value) {         getRegistry().remove(new IDKey(value));      }      static void register(Object value) {       * @since 2.3       */      static void unregister(Object value) {         getRegistry().remove(new IDKey(value));      }      static void register(Object value) {       * @since 2.3       */      static void unregister(Object value) {         getRegistry().remove(new IDKey(value));      }      static void register(Object value) {       * @since 2.3       */      static void unregister(Object value) {         getRegistry().remove(new IDKey(value));      }      static void register(Object value) {       * @since 2.3       */      static void unregister(Object value) {         getRegistry().remove(new IDKey(value));      }      static void register(Object value) {       * @since 2.3       */      static void unregister(Object value) {         getRegistry().remove(new IDKey(value));      }      static void register(Object value) {       * @since 2.3       */      static void unregister(Object value) {         getRegistry().remove(new IDKey(value));      }      static void register(Object value) {       * @since 2.3       */      static void unregister(Object value) {         getRegistry().remove(new IDKey(value));      }      static void register(Object value) {       * @since 2.3       */      static void unregister(Object value) {         getRegistry().remove(new IDKey(value));      }      static void register(Object value) {       * @since 2.3       */      static void unregister(Object value) {         getRegistry().remove(new IDKey(value));      }      static void register(Object value) {       * @since 2.3       */      static void unregister(Object value) {         getRegistry().remove(new IDKey(value));      }      static void register(Object value) {       * @since 2.3       */      static void unregister(Object value) {         getRegistry().remove(new IDKey(value));      }      static void register(Object value) {
private double localMin(boolean isMinim,          double w = x;          double d = 0;          double e = 0;         double fx = computeObjectiveValue(f, x);         if (goalType == GoalType.MAXIMIZE) {              fx = -fx;         }          double fv = fx;          double fw = fx;         int count = 0;         while (count < maximalIterationCount) {              double m = 0.5 * (a + b);              final double tol1 = eps * Math.abs(x) + t;              final double tol2 = eps * Math.abs(x) + t;              final double tol3 = eps * Math.abs(x) + t;              final double tol4 = eps * Math.abs(x) + t;              final double tol5 = eps * Math.abs(x) + t;             final double tol6 = eps * Math.abs(x) + t;             final double tol7 = eps * Math.abs(x) + t;             final double tol8 = eps * Math.abs(x) + t;             final double tol9 = eps * Math.abs(x) + t;             final double tol10 = eps * Math.abs(x) + t;             final double tol11 = eps * Math.abs(x) + t;             final double tol12 = eps * Math.abs(x) + t;             final double tol13 = eps * Math.abs(x) + t;             final double tol14 = eps * Math.abs(x) + t;             final double tol15 = eps * Math.abs(x) + t;             final double tol16 = eps * Math.abs(x) + t;             final double tol17 = eps * Math.abs(x) + t;             final double tol18 = eps * Math.abs(x) + t;             final double tol19 = eps * Math.abs(x) + t;             final double tol20 = eps * Math.abs(x) + t;             final double tol21 = eps * Math.abs(x) + t;             final double tol22 = eps * Math.abs(x) + t;             final double tol23 = eps * Math.abs(x) + t;             final double tol24 = eps * Math.abs(x
private boolean shouldReportThis(Node n, Node parent) {      }     if (shouldReportThis(n, parent)) {       if (n.getType() != Token.GETPROP) {         return false;       }       Node prop = n.getLastChild();       if (prop.getType() != Token.GETPROP) {         return false;       }       if (prop.getLastChild().getType() != Token.GETPROP) {         return false;       }       if (prop.getLastChild().getLastChild().getType() != Token.GETPROP) {         return false;       }       return true;    }    /** private boolean shouldReportThis(Node n, Node parent) {      }     if (shouldReportThis(n, parent)) {       if (n.getType() != Token.GETPROP) {         return false;       }       Node prop = n.getLastChild();       if (prop.getType() != Token.GETPROP) {         return false;       }       if (prop.getLastChild().getType() != Token.GETPROP) {         return false;       }       return true;    }    /** private boolean shouldReportThis(Node n, Node parent) {      }     if (shouldReportThis(n, parent)) {       if (n.getType() != Token.GETPROP) {         return false;       }       Node prop = n.getLastChild();       if (prop.getType() != Token.GETPROP) {         return false;       }       if (prop.getLastChild().getType() != Token.GETPROP) {         return false;       }       return true;    }    /** private boolean shouldReportThis(Node n, Node parent) {      }     if (shouldReportThis(n, parent)) {       if (n.getType() != Token.GETPROP) {         return false;       }       Node prop = n.getLastChild();       if (prop.getType() != Token.GETPROP) {         return false;       }       if (prop.getLastChild().getType() != Token.GETPROP) {         return false;       }       return true;    }    /** private boolean shouldReportThis(Node n, Node parent) {      }     if (shouldReportThis(n, parent)) {       if
protected double doSolve() {              double targetY;              if (agingA >= MAXIMAL_AGING) {                 targetY = -REDUCTION_FACTOR * yB;              } else if (agingB >= MAXIMAL_AGING) {                 targetY = -REDUCTION_FACTOR * yA;              } else {                  targetY = 0; protected double doSolve() {              double targetY;              if (agingA >= MAXIMAL_AGING) {                 targetY = -REDUCTION_FACTOR * yB;              } else if (agingB >= MAXIMAL_AGING) {                 targetY = -REDUCTION_FACTOR * yA;              } else {                  targetY = 0; protected double doSolve() {              double targetY;              if (agingA >= MAXIMAL_AGING) {                 targetY = -REDUCTION_FACTOR * yB;              } else if (agingB >= MAXIMAL_AGING) {                 targetY = -REDUCTION_FACTOR * yA;              } else {                  targetY = 0; protected double doSolve() {              double targetY;              if (agingA >= MAXIMAL_AGING) {                 targetY = -REDUCTION_FACTOR * yB;              } else if (agingB >= MAXIMAL_AGING) {                 targetY = -REDUCTION_FACTOR * yA;              } else {                  targetY = 0; protected double doSolve() {              double targetY;              if (agingA >= MAXIMAL_AGING) {                 targetY = -REDUCTION_FACTOR * yB;              } else if (agingB >= MAXIMAL_AGING) {                 targetY = -REDUCTION_FACTOR * yA;              } else {                  targetY = 0; protected double doSolve() {              double targetY;              if (agingA >= MAXIMAL_AGING) {                 targetY = -REDUCTION_FACTOR * yB;              } else if (agingB >= MAXIMAL_AGING) {                 targetY = -REDUCTION_FACTOR * yA;              } else {                  targetY = 0; protected double doSolve() {              double targetY;              if (agingA >= MAXIMAL_AGING) {                 targetY = -REDUCTION_FACTOR * yB;              } else if (agingB >= MAXIMAL_AGING) {                 targetY = -REDUCTION_FACTOR
protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)              final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);              if (comparator.compare(contracted, best) < 0) {                  return;              } protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)              final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);              if (comparator.compare(contracted, best) < 0) {                  return; protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)              final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);              if (comparator.compare(contracted, best) < 0) {                  return; protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)              final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);              if (comparator.compare(contracted, best) < 0) {                  return; protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)              final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);              if (comparator.compare(contracted, best) < 0) {                  return; protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)              final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);              if (comparator.compare(contracted, best) < 0) {                  return; protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)              final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);              if (comparator.compare(contracted, best) < 0) {                  return; protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)              final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);              if (comparator.compare(contracted, best) < 0) {                  return; protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)              final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);              if (comparator.compare(contracted, best) < 0) {                  return; protected void iterateSimplex(final Comparator<RealPointValuePair>
public int indexOf(String str, int startIndex) {              return -1;           }          char[] thisBuf = buffer;  int len = thisBuf.length - strLen;          outer:          for (int i = startIndex; i < len; i++) {              for (int j = 0; j < strLen; j++) {
public static boolean isPrimitiveWrapper(Class<?> type) {          primitiveValues.put(int.class, 0);           primitiveValues.put(long.class, 0L);           primitiveValues.put(float.class, 0F);          primitiveValues.put(double.class, 0);       }   } \ No newline at end of file public static boolean isPrimitiveWrapper(Class<?> type) {          primitiveValues.put(int.class, 0);           primitiveValues.put(long.class, 0L);           primitiveValues.put(float.class, 0F);          primitiveValues.put(double.class, 0);       }   } \ No newline at end of file public static boolean isPrimitiveWrapper(Class<?> type) {          primitiveValues.put(int.class, 0);           primitiveValues.put(long.class, 0L);           primitiveValues.put(float.class, 0F);          primitiveValues.put(double.class, 0);       }   } \ No newline at end of file public static boolean isPrimitiveWrapper(Class<?> type) {          primitiveValues.put(int.class, 0);           primitiveValues.put(long.class, 0L);           primitiveValues.put(float.class, 0F);          primitiveValues.put(double.class, 0);       }   } \ No newline at end of file public static boolean isPrimitiveWrapper(Class<?> type) {          primitiveValues.put(int.class, 0);           primitiveValues.put(long.class, 0L);           primitiveValues.put(float.class, 0F);          primitiveValues.put(double.class, 0);       }   } \ No newline at end of file public static boolean isPrimitiveWrapper(Class<?> type) {          primitiveValues.put(int.class, 0);           primitiveValues.put(long.class, 0L);           primitiveValues.put(float.class, 0F);          primitiveValues.put(double.class, 0);       }   } \ No newline at end of file public static boolean isPrimitiveWrapper(Class<?> type) {          primitiveValues.put(int.class, 0);           primitiveValues.put(long.class, 0L);           primitiveValues.put(float.class, 0F);          primitiveValues.put(double.class, 0);       }   }
public static synchronized GJChronology getInstance(              cutoverInstant = DEFAULT_CUTOVER;} else {              cutoverInstant = gregorianCutover.toInstant();          }          GJChronology chrono; public static synchronized GJChronology getInstance(              cutoverInstant = DEFAULT_CUTOVER;} else {              cutoverInstant = gregorianCutover.toInstant();          }          GJChronology chrono; public static synchronized GJChronology getInstance(              cutoverInstant = DEFAULT_CUTOVER;} else {              cutoverInstant = gregorianCutover.toInstant();          }          GJChronology chrono; public static synchronized GJChronology getInstance(              cutoverInstant = DEFAULT_CUTOVER;} else {              cutoverInstant = gregorianCutover.toInstant();          }          GJChronology chrono; public static synchronized GJChronology getInstance(              cutoverInstant = DEFAULT_CUTOVER;} else {              cutoverInstant = gregorianCutover.toInstant();          }          GJChronology chrono; public static synchronized GJChronology getInstance(              cutoverInstant = DEFAULT_CUTOVER;} else {              cutoverInstant = gregorianCutover.toInstant();          }          GJChronology chrono; public static synchronized GJChronology getInstance(              cutoverInstant = DEFAULT_CUTOVER;} else {              cutoverInstant = gregorianCutover.toInstant();          }          GJChronology chrono; public static synchronized GJChronology getInstance(              cutoverInstant = DEFAULT_CUTOVER;} else {              cutoverInstant = gregorianCutover.toInstant();          }          GJChronology chrono; public static synchronized GJChronology getInstance(              cutoverInstant = DEFAULT_CUTOVER;} else {              cutoverInstant = gregorianCutover.toInstant();          }          GJChronology chrono; public static synchronized GJChronology getInstance(              cutoverInstant = DEFAULT_CUTOVER;} else {              cutoverInstant = gregorianCutover.toInstant();          }          GJChronology chrono; public static synchronized GJChronology getInstance(              cutoverInstant = DEFAULT_CUTOVER;} else {              cutoverInstant = gregorianCutover.toInstant();          }          GJChronology chrono; public static synchronized GJChronology getInstance(              cutoverInstant = DEFAULT_CUTOVER;} else {              cutoverInstant
public LegendItemCollection getLegendItems() {          }           int index = this.plot.getIndexOf(this);           CategoryDataset dataset = this.plot.getDataset(index);          if (dataset != null) {               return result;           }           int seriesCount = dataset.getRowCount(); public LegendItemCollection getLegendItems() {          }           int index = this.plot.getIndexOf(this);           CategoryDataset dataset = this.plot.getDataset(index);          if (dataset != null) {               return result;           }           int seriesCount = dataset.getRowCount(); public LegendItemCollection getLegendItems() {          }           int index = this.plot.getIndexOf(this);           CategoryDataset dataset = this.plot.getDataset(index);          if (dataset != null) {               return result;           }           int seriesCount = dataset.getRowCount(); public LegendItemCollection getLegendItems() {          }           int index = this.plot.getIndexOf(this);           CategoryDataset dataset = this.plot.getDataset(index);          if (dataset != null) {               return result;           }           int seriesCount = dataset.getRowCount(); public LegendItemCollection getLegendItems() {          }           int index = this.plot.getIndexOf(this);           CategoryDataset dataset = this.plot.getDataset(index);          if (dataset != null) {               return result;           }           int seriesCount = dataset.getRowCount(); public LegendItemCollection getLegendItems() {          }           int index = this.plot.getIndexOf(this);           CategoryDataset dataset = this.plot.getDataset(index);          if (dataset != null) {               return result;           }           int seriesCount = dataset.getRowCount(); public LegendItemCollection getLegendItems() {          }           int index = this.plot.getIndexOf(this);           CategoryDataset dataset = this.plot.getDataset(index);          if (dataset != null) {               return result;           }           int seriesCount = dataset.getRowCount(); public LegendItemCollection getLegendItems() {          }           int index = this.plot.getIndexOf(this);           CategoryDataset dataset = this.plot.getDataset(index);          if (dataset != null) {               return result;           }           int seriesCount = dataset.getRowCount
private boolean isPrototypePropertyAssign(Node assign) {        Node n = assign.getFirstChild();        if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign) && n.getType() == Token.GETPROP           ) {          boolean isChainedProperty =              n.getFirstChild().getType() == Token.GETPROP; private boolean isPrototypePropertyAssign(Node assign) {        Node n = assign.getFirstChild();        if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign) && n.getType() == Token.GETPROP           ) {          boolean isChainedProperty =              n.getFirstChild().getType() == Token.GETPROP; private boolean isPrototypePropertyAssign(Node assign) {        Node n = assign.getFirstChild();        if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign) && n.getType() == Token.GETPROP           ) {          boolean isChainedProperty =              n.getFirstChild().getType() == Token.GETPROP; private boolean isPrototypePropertyAssign(Node assign) {        Node n = assign.getFirstChild();        if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign) && n.getType() == Token.GETPROP           ) {          boolean isChainedProperty =              n.getFirstChild().getType() == Token.GETPROP; private boolean isPrototypePropertyAssign(Node assign) {        Node n = assign.getFirstChild();        if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign) && n.getType() == Token.GETPROP           ) {          boolean isChainedProperty =              n.getFirstChild().getType() == Token.GETPROP; private boolean isPrototypePropertyAssign(Node assign) {        Node n = assign.getFirstChild();        if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign) && n.getType() == Token.GETPROP           ) {          boolean isChainedProperty =              n.getFirstChild().getType() == Token.GETPROP; private boolean isPrototypePropertyAssign(Node assign) {        Node n = assign.getFirstChild();        if (n != null && NodeUtil.
) {              return new PeriodFormatter(comp, comp);          }          if (size >= 2 && elementPairs.get(0) instanceof Separator) {              Separator sep = (Separator) elementPairs.get(0);                  PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);                  sep = sep.finish(f.getPrinter(), f.getParser());                  return new PeriodFormatter(sep, sep);          }          Object[] comp = createComposite(elementPairs);          if (notPrinter) {              return new PeriodFormatter(comp, comp);          }          if (notParser) {              return new PeriodFormatter(comp, comp);
static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {        case Token.OBJECTLIT:          return true;  case Token.IN:          return true;  static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {        case Token.OBJECTLIT:          return true;  case Token.IN:          return true;  static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {        case Token.OBJECTLIT:          return true;  case Token.IN:          return true;  static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {        case Token.OBJECTLIT:          return true;  case Token.IN:          return true;  static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {        case Token.OBJECTLIT:          return true;  case Token.IN:          return true;  static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {        case Token.OBJECTLIT:          return true;  case Token.IN:          return true;  static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {        case Token.OBJECTLIT:          return true;  case Token.IN:          return true;  static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {        case Token.OBJECTLIT:          return true;  case Token.IN:          return true;  static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {        case Token.OBJECTLIT:          return true;  case Token.IN:          return true;  static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {        case Token.OBJECTLIT:          return true;  case Token.IN:          return true;  static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {        case Token.OBJECTLIT:          return true;  case Token.IN:          return true;  static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {        case Token.OBJECTLIT:          return true;  case Token.IN:          return true;  static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {        case Token.OBJECTLIT:          return true;  case Token.IN:          return true;  static boolean evaluates
* @since 2.3       */      static boolean isRegistered(Object value) {         return getRegistry().contains(new IDKey(value));      }      /** * @since 2.3       */      static boolean isRegistered(Object value) {         return getRegistry().contains(new IDKey(value));      }      /** * @since 2.3       */      static boolean isRegistered(Object value) {         return getRegistry().contains(new IDKey(value));      }      /** * @since 2.3       */      static boolean isRegistered(Object value) {         return getRegistry().contains(new IDKey(value));      }      /** * @since 2.3       */      static boolean isRegistered(Object value) {         return getRegistry().contains(new IDKey(value));      }      /** * @since 2.3       */      static boolean isRegistered(Object value) {         return getRegistry().contains(new IDKey(value));      }      /** * @since 2.3       */      static boolean isRegistered(Object value) {         return getRegistry().contains(new IDKey(value));      }      /** * @since 2.3       */      static boolean isRegistered(Object value) {         return getRegistry().contains(new IDKey(value));      }      /** * @since 2.3       */      static boolean isRegistered(Object value) {         return getRegistry().contains(new IDKey(value));      }      /** * @since 2.3       */      static boolean isRegistered(Object value) {         return getRegistry().contains(new IDKey(value));      }      /** * @since 2.3       */      static boolean isRegistered(Object value) {         return getRegistry().contains(new IDKey(value));      }      /** * @since 2.3       */      static boolean isRegistered(Object value) {         return getRegistry().contains(new IDKey(value));      }      /** * @since 2.3       */      static boolean isRegistered(Object value) {         return getRegistry().contains(new IDKey(value));      }      /** * @since 2.3       */      static boolean isRegistered(Object value) {         return getRegistry().contains(new IDKey(value));      }      /** * @since 2.3       */      static boolean isRegistered(Object value) {         return
private Node parseFunctionType(JsDocToken token) {      if (token != JsDocToken.LP) {        return reportTypeSyntaxWarning("msg.jsdoc.missing lp");      }      return reportTypeSyntaxWarning("msg.jsdoc.missing lp");} private Node parseFunctionType(JsDocToken token) {      if (token != JsDocToken.LP) {        return reportTypeSyntaxWarning("msg.jsdoc.missing lp");      }      return reportTypeSyntaxWarning("msg.jsdoc.missing lp");} private Node parseFunctionType(JsDocToken token) {      if (token != JsDocToken.LP) {        return reportTypeSyntaxWarning("msg.jsdoc.missing lp");      }      return reportTypeSyntaxWarning("msg.jsdoc.missing lp");} private Node parseFunctionType(JsDocToken token) {      if (token != JsDocToken.LP) {        return reportTypeSyntaxWarning("msg.jsdoc.missing lp");      }      return reportTypeSyntaxWarning("msg.jsdoc.missing lp");} private Node parseFunctionType(JsDocToken token) {      if (token != JsDocToken.LP) {        return reportTypeSyntaxWarning("msg.jsdoc.missing lp");      }      return reportTypeSyntaxWarning("msg.jsdoc.missing lp");} private Node parseFunctionType(JsDocToken token) {      if (token != JsDocToken.LP) {        return reportTypeSyntaxWarning("msg.jsdoc.missing lp");      }      return reportTypeSyntaxWarning("msg.jsdoc.missing lp");} private Node parseFunctionType(JsDocToken token) {      if (token != JsDocToken.LP) {        return reportTypeSyntaxWarning("msg.jsdoc.missing lp");      }      return reportTypeSyntaxWarning("msg.jsdoc.missing lp");} private Node parseFunctionType(JsDocToken token) {      if (token != JsDocToken.LP) {        return reportTypeSyntaxWarning("msg.jsdoc.missing lp");      }      return reportTypeSyntaxWarning("msg.jsdoc.missing lp");} private Node parseFunctionType(JsDocToken token) {      if (token != JsDocToken.LP) {        return reportTypeSyntaxWarning("msg.jsdoc.missing lp");      }      return reportTypeSyntax
public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOff          if (hoursOffset == 0 && minutesOffset == 0) {              return DateTimeZone.UTC;          }          if (minutesOffset < 0 || minutesOffset > 59) {              throw new IllegalArgumentException("Minutes out of range: " + minutesOffset);          }          int offset = 0;          try {             int hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);              if (hoursInMinutes < 0) {                 minutesOffset = FieldUtils.safeAdd(hoursInMinutes, -minutesOffset);              } else {                 minutesOffset = FieldUtils.safeAdd(hoursInMinutes, -minutesOffset);              } public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOff          if (hoursOffset == 0 && minutesOffset == 0) {              return DateTimeZone.UTC;          }          if (minutesOffset < 0 || minutesOffset > 59) {              throw new IllegalArgumentException("Minutes out of range: " + minutesOffset);          }          int offset = 0;          try {             int hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);              if (hoursInMinutes < 0) {                 minutesOffset = FieldUtils.safeAdd(hoursInMinutes, -minutesOffset);              } else {                 minutesOffset = FieldUtils.safeAdd(hoursInMinutes, -minutesOffset);              } public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOff          if (hoursOffset == 0 && minutesOffset == 0) {              return DateTimeZone.UTC;          }          if (minutesOffset < 0 || minutesOffset > 59) {              throw new IllegalArgumentException("Minutes out of range: " + minutesOffset);          }          int offset = 0;          try {             int hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);              if (hoursInMinutes < 0) {                 minutesOffset = FieldUtils.safeAdd(hoursInMinutes, -minutesOffset);              } else {                 minutesOffset = FieldUtils.safeAdd(hoursInMinutes, -minutesOffset);              } public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOff          if (hoursOffset == 0 && minutesOffset == 0) {              return DateTimeZone.UTC;          }          if (minutesOffset < 0 || minutesOffset > 59) {              throw new IllegalArgumentException("Minutes out of range: " + minutesOffset);          }          int offset = 0;          try {             int hoursInMinutes
public Fraction pow(int power) {       */      private static int greatestCommonDivisor(int u, int v) {         if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {              return 1;          }         return greatestCommonDivisor(u, v);
public void captureArgumentsFrom(Invocation invocation) {                      ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));                  }              }             for (int position = indexOfVararg; position < matchers.size(); position++) {                 Matcher m = matchers.get(position);                  if (m instanceof CapturesArguments) {                     ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position - indexOfVararg]);                  }              }          } else { public void captureArgumentsFrom(Invocation invocation) {                      ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));                  }              }             for (int position = indexOfVararg; position < matchers.size(); position++) {                 Matcher m = matchers.get(position);                  if (m instanceof CapturesArguments) {                     ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position - indexOfVararg]);                  }              }          } else { public void captureArgumentsFrom(Invocation invocation) {                      ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));                  }              }             for (int position = indexOfVararg; position < matchers.size(); position++) {                 Matcher m = matchers.get(position);                  if (m instanceof CapturesArguments) {                     ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position - indexOfVararg]);                  }              }          } else { public void captureArgumentsFrom(Invocation invocation) {                      ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));                  }              }             for (int position = indexOfVararg; position < matchers.size(); position++) {                 Matcher m = matchers.get(position);                  if (m instanceof CapturesArguments) {                     ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position - indexOfVararg]);                  }              }          } else { public void captureArgumentsFrom(Invocation invocation) {                      ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));                  }              }             for (int position = indexOfVararg; position < matchers.size(); position++) {                 Matcher m = matchers
public final void translate(CharSequence input, Writer out) throws IOException {              for (int pt = 0; pt < consumed; pt++) {                 pos += Character.charCount(Character.codePointAt(input, pos));              }          }      } public final void translate(CharSequence input, Writer out) throws IOException {              for (int pt = 0; pt < consumed; pt++) {                 pos += Character.charCount(Character.codePointAt(input, pos));              }          }      } public final void translate(CharSequence input, Writer out) throws IOException {              for (int pt = 0; pt < consumed; pt++) {                 pos += Character.charCount(Character.codePointAt(input, pos));              }          }      } public final void translate(CharSequence input, Writer out) throws IOException {              for (int pt = 0; pt < consumed; pt++) {                 pos += Character.charCount(Character.codePointAt(input, pos));              }          }      } public final void translate(CharSequence input, Writer out) throws IOException {              for (int pt = 0; pt < consumed; pt++) {                 pos += Character.charCount(Character.codePointAt(input, pos));              }          }      } public final void translate(CharSequence input, Writer out) throws IOException {              for (int pt = 0; pt < consumed; pt++) {                 pos += Character.charCount(Character.codePointAt(input, pos));              }          }      } public final void translate(CharSequence input, Writer out) throws IOException {              for (int pt = 0; pt < consumed; pt++) {                 pos += Character.charCount(Character.codePointAt(input, pos));              }          }      } public final void translate(CharSequence input, Writer out) throws IOException {              for (int pt = 0; pt < consumed; pt++) {                 pos += Character.charCount(Character.codePointAt(input, pos));              }          }      } public final void translate(CharSequence input, Writer out) throws IOException {              for (int pt = 0; pt < consumed; pt++) {                 pos += Character.charCount(Character.codePointAt(input, pos));              }          }      } public final void translate(CharSequence input, Writer out) throws IOException {
protected BasePeriod(ReadableDuration duration, ReadableInstant endInstant, Peri       * @param duration  the duration, in milliseconds       */      protected BasePeriod(long duration) {         this(duration, null, null);      }      protected BasePeriod(ReadableDuration duration, ReadableInstant endInstant, Peri       * @param duration  the duration, in milliseconds       */      protected BasePeriod(long duration) {         this(duration, null, null);      }      protected BasePeriod(ReadableDuration duration, ReadableInstant endInstant, Peri       * @param duration  the duration, in milliseconds       */      protected BasePeriod(long duration) {         this(duration, null, null);      }      protected BasePeriod(ReadableDuration duration, ReadableInstant endInstant, Peri       * @param duration  the duration, in milliseconds       */      protected BasePeriod(long duration) {         this(duration, null, null);      }      protected BasePeriod(ReadableDuration duration, ReadableInstant endInstant, Peri       * @param duration  the duration, in milliseconds       */      protected BasePeriod(long duration) {         this(duration, null, null);      }      protected BasePeriod(ReadableDuration duration, ReadableInstant endInstant, Peri       * @param duration  the duration, in milliseconds       */      protected BasePeriod(long duration) {         this(duration, null, null);      }      protected BasePeriod(ReadableDuration duration, ReadableInstant endInstant, Peri       * @param duration  the duration, in milliseconds       */      protected BasePeriod(long duration) {         this(duration, null, null);      }      protected BasePeriod(ReadableDuration duration, ReadableInstant endInstant, Peri       * @param duration  the duration, in milliseconds       */      protected BasePeriod(long duration) {         this(duration, null, null);      }      protected BasePeriod(ReadableDuration duration, ReadableInstant endInstant, Peri       * @param duration  the duration, in milliseconds       */      protected BasePeriod(long duration) {         this(duration, null, null);      }      protected BasePeriod(ReadableDuration duration, ReadableInstant endInstant, Peri       * @param duration  the duration, in milliseconds       */      protected BasePeriod(long duration) {         this(duration, null, null);      }      protected BasePeriod(ReadableDuration duration, ReadableInstant endInstant, Peri       * @param duration
public double density(final double[] vals) throws DimensionMismatchException {              throw new DimensionMismatchException(vals.length, dim);          }         return FastMath.pow(2 * FastMath.PI, -dim / 2) *              FastMath.pow(covarianceMatrixDeterminant, -0.5) *              getExponentTerm(vals);      } public double density(final double[] vals) throws DimensionMismatchException {              throw new DimensionMismatchException(vals.length, dim);          }         return FastMath.pow(2 * FastMath.PI, -dim / 2) *              FastMath.pow(covarianceMatrixDeterminant, -0.5) *              getExponentTerm(vals);      } public double density(final double[] vals) throws DimensionMismatchException {              throw new DimensionMismatchException(vals.length, dim);          }         return FastMath.pow(2 * FastMath.PI, -dim / 2) *              FastMath.pow(covarianceMatrixDeterminant, -0.5) *              getExponentTerm(vals);      } public double density(final double[] vals) throws DimensionMismatchException {              throw new DimensionMismatchException(vals.length, dim);          }         return FastMath.pow(2 * FastMath.PI, -dim / 2) *              FastMath.pow(covarianceMatrixDeterminant, -0.5) *              getExponentTerm(vals);      } public double density(final double[] vals) throws DimensionMismatchException {              throw new DimensionMismatchException(vals.length, dim);          }         return FastMath.pow(2 * FastMath.PI, -dim / 2) *              FastMath.pow(covarianceMatrixDeterminant, -0.5) *              getExponentTerm(vals);      } public double density(final double[] vals) throws DimensionMismatchException {              throw new DimensionMismatchException(vals.length, dim);          }         return FastMath.pow(2 * FastMath.PI, -dim / 2) *              FastMath.pow(covarianceMatrixDeterminant, -0.5) *              getExponentTerm(vals);      } public double density(final double[] vals) throws DimensionMismatchException {              throw new DimensionMismatchException(vals.length, dim);          }         return FastMath.pow(2 * FastMath.PI, -dim / 2) *              FastMath.pow(covarianceMatrixDeterminant, -0.5) *              get
protected GenericMetadataSupport actualParameterizedType(Object mock) throws Throwable {      private Object recordDeepStubMock(final Object mock, InvocationContainerImpl container) throws Throwable {          container.addAnswer(new Answer<Object>() {               public Object answer(InvocationOnMock invocation) throws Throwable {                   return mock;               }           });
boolean expectCanAssignToPropertyOf(NodeTraversal t, Node n, JSType rightType,            "assignment to property " + propName + " of " +            getReadableJSTypeName(owner, true);       }        return false;      }      return true;
public static Number createNumber(String str) throws NumberFormatException {              mant = str.substring(0, decPos);          } else {              if (expPos > -1) {                  mant = str.substring(0, expPos);              } else {                  mant = str; public static Number createNumber(String str) throws NumberFormatException {              mant = str.substring(0, decPos);          } else {              if (expPos > -1) {                  mant = str.substring(0, expPos);              } else {                  mant = str; public static Number createNumber(String str) throws NumberFormatException {              mant = str.substring(0, decPos);          } else {              if (expPos > -1) {                  mant = str.substring(0, expPos);              } else {                  mant = str; public static Number createNumber(String str) throws NumberFormatException {              mant = str.substring(0, decPos);          } else {              if (expPos > -1) {                  mant = str.substring(0, expPos);              } else {                  mant = str; public static Number createNumber(String str) throws NumberFormatException {              mant = str.substring(0, decPos);          } else {              if (expPos > -1) {                  mant = str.substring(0, expPos);              } else {                  mant = str; public static Number createNumber(String str) throws NumberFormatException {              mant = str.substring(0, decPos);          } else {              if (expPos > -1) {                  mant = str.substring(0, expPos);              } else {                  mant = str; public static Number createNumber(String str) throws NumberFormatException {              mant = str.substring(0, decPos);          } else {              if (expPos > -1) {                  mant = str.substring(0, expPos);              } else {                  mant = str; public static Number createNumber(String str) throws NumberFormatException {              mant = str.substring(0, decPos);          } else {              if (expPos > -1) {                  mant = str.substring(0, expPos);              } else {                  mant = str; public static Number createNumber(String str) throws NumberFormatException {              mant = str.substring(0, decPos);          } else {              if
private OriginalMapping getOriginalMappingForEntry(Entry entry) {        Builder x = OriginalMapping.newBuilder()          .setOriginalFile(sources[entry.getSourceFileId()])         .setLineNumber(entry.getSourceLine())         .setColumnPosition(entry.getSourceColumn());        if (entry.getNameId() != UNMAPPED) {          x.setIdentifier(names[entry.getNameId()]);        }        return x.build();    } private OriginalMapping getOriginalMappingForEntry(Entry entry) {        Builder x = OriginalMapping.newBuilder()          .setOriginalFile(sources[entry.getSourceFileId()])         .setLineNumber(entry.getSourceLine())         .setColumnPosition(entry.getSourceColumn());        if (entry.getNameId() != UNMAPPED) {          x.setIdentifier(names[entry.getNameId()]);        }        return x.build();    } private OriginalMapping getOriginalMappingForEntry(Entry entry) {        Builder x = OriginalMapping.newBuilder()          .setOriginalFile(sources[entry.getSourceFileId()])         .setLineNumber(entry.getSourceLine())         .setColumnPosition(entry.getSourceColumn());        if (entry.getNameId() != UNMAPPED) {          x.setIdentifier(names[entry.getNameId()]);        }        return x.build();    } private OriginalMapping getOriginalMappingForEntry(Entry entry) {        Builder x = OriginalMapping.newBuilder()          .setOriginalFile(sources[entry.getSourceFileId()])         .setLineNumber(entry.getSourceLine())         .setColumnPosition(entry.getSourceColumn());        if (entry.getNameId() != UNMAPPED) {          x.setIdentifier(names[entry.getNameId()]);        }        return x.build();    } private OriginalMapping getOriginalMappingForEntry(Entry entry) {        Builder x = OriginalMapping.newBuilder()          .setOriginalFile(sources[entry.getSourceFileId()])         .setLineNumber(entry.getSourceLine())         .setColumnPosition(entry.getSourceColumn());        if (entry.getNameId() != UNMAPPED) {          x.setIdentifier(names[entry.getNameId()]);        }        return x.build();    } private OriginalMapping getOriginalMappingForEntry(Entry entry) {        Builder x
private void inlineNonConstants(        if (!maybeModifiedArguments &&            !staleVars.contains(v) &&            referenceInfo.isWellDefined() &&           referenceInfo.isAssignedOnceInLifetime()) {          List<Reference> refs = referenceInfo.references; for (int i = 1 ; i < refs.size(); i++) {            Node nameNode = refs.get(i).getNode(); private void inlineNonConstants(        if (!maybeModifiedArguments &&            !staleVars.contains(v) &&            referenceInfo.isWellDefined() &&           referenceInfo.isAssignedOnceInLifetime()) {          List<Reference> refs = referenceInfo.references; for (int i = 1 ; i < refs.size(); i++) {            Node nameNode = refs.get(i).getNode(); private void inlineNonConstants(        if (!maybeModifiedArguments &&            !staleVars.contains(v) &&            referenceInfo.isWellDefined() &&           referenceInfo.isAssignedOnceInLifetime()) {          List<Reference> refs = referenceInfo.references; for (int i = 1 ; i < refs.size(); i++) {            Node nameNode = refs.get(i).getNode(); private void inlineNonConstants(        if (!maybeModifiedArguments &&            !staleVars.contains(v) &&            referenceInfo.isWellDefined() &&           referenceInfo.isAssignedOnceInLifetime()) {          List<Reference> refs = referenceInfo.references; for (int i = 1 ; i < refs.size(); i++) {            Node nameNode = refs.get(i).getNode(); private void inlineNonConstants(        if (!maybeModifiedArguments &&            !staleVars.contains(v) &&            referenceInfo.isWellDefined() &&           referenceInfo.isAssignedOnceInLifetime()) {          List<Reference> refs = referenceInfo.references; for (int i = 1 ; i < refs.size(); i++) {            Node nameNode = refs.get(i).getNode(); private void inlineNonConstants(        if (!maybeModifiedArguments &&            !staleVars.contains(v) &&            referenceInfo.isWellDefined() &&           referenceInfo.isAssignedOnceInLifetime()) {          List<Reference> refs = referenceInfo.references; for (int i = 1 ; i < refs.size();
public Complex conjugate() {      public Complex divide(Complex divisor)          throws NullArgumentException {          MathUtils.checkNotNull(divisor);          if (isNaN || divisor.isNaN) {              return NaN;          }         if (divisor.getReal() == 0.0 && divisor.getImaginary() == 0.0) {             return NaN;          }          if (divisor.isInfinite() && !isInfinite()) {              return ZERO;          }          final double c = divisor.getReal();          final double d = divisor.getImaginary();          if (c == 0.0 && d == 0.0) {             return NaN;          }          if (divisor.isInfinite() && !isInfinite()) {              return ZERO;          }          final double c = divisor.getReal();          final double d = divisor.getImaginary();          if (c == 0.0 && d == 0.0) {             return NaN;          }          if (divisor.isInfinite() && !isInfinite()) {              return ZERO;          }          final double c = divisor.getReal();          final double d = divisor.getImaginary();          if (c == 0.0 && d == 0.0) {             return NaN;          }          if (divisor.isInfinite() && !isInfinite()) {              return ZERO;          }          final double c = divisor.getReal();          final double d = divisor.getImaginary();          if (c == 0.0 && d == 0.0) {             return NaN;          }          if (divisor.isInfinite() && !isInfinite()) {              return ZERO;          }          final double c = divisor.getReal();          final double d = divisor.getImaginary();          if (c == 0.0 && d == 0.0) {             return NaN;          }          if (divisor.isInfinite() && !isInfinite()) {              return ZERO;          }          final double c = divisor.getReal();          final double d = divisor.getImaginary();          if (c == 0.0 && d == 0.0) {             return NaN;          }          if (divisor.isInfinite() && !isInfinite()) {              return ZERO;          }          final double c = divisor.getReal();          final
public void setWeekOfWeekyear(final int weekOfWeekyear)       * @throws IllegalArgumentException if the value is invalid       */      public void addWeeks(final int weeks) {              setMillis(getChronology().weeks().add(getMillis(), weeks));      } public void setWeekOfWeekyear(final int weekOfWeekyear)       * @throws IllegalArgumentException if the value is invalid       */      public void addWeeks(final int weeks) {              setMillis(getChronology().weeks().add(getMillis(), weeks));      } public void setWeekOfWeekyear(final int weekOfWeekyear)       * @throws IllegalArgumentException if the value is invalid       */      public void addWeeks(final int weeks) {              setMillis(getChronology().weeks().add(getMillis(), weeks));      } public void setWeekOfWeekyear(final int weekOfWeekyear)       * @throws IllegalArgumentException if the value is invalid       */      public void addWeeks(final int weeks) {              setMillis(getChronology().weeks().add(getMillis(), weeks));      } public void setWeekOfWeekyear(final int weekOfWeekyear)       * @throws IllegalArgumentException if the value is invalid       */      public void addWeeks(final int weeks) {              setMillis(getChronology().weeks().add(getMillis(), weeks));      } public void setWeekOfWeekyear(final int weekOfWeekyear)       * @throws IllegalArgumentException if the value is invalid       */      public void addWeeks(final int weeks) {              setMillis(getChronology().weeks().add(getMillis(), weeks));      } public void setWeekOfWeekyear(final int weekOfWeekyear)       * @throws IllegalArgumentException if the value is invalid       */      public void addWeeks(final int weeks) {              setMillis(getChronology().weeks().add(getMillis(), weeks));      } public void setWeekOfWeekyear(final int weekOfWeekyear)       * @throws IllegalArgumentException if the value is invalid       */      public void addWeeks(final int weeks) {              setMillis(getChronology().weeks().add(getMillis(), weeks));      } public void setWeekOfWeekyear(final int weekOfWeekyear)       * @throws IllegalArgumentException if the value is invalid       */      public void addWeeks(final int weeks) {              setMillis(getChronology().weeks().add(getMillis(), weeks));
public long roundFloor(long instant) {              } else {                  long localInstant = iZone.convertUTCToLocal(instant);                  localInstant = iField.roundFloor(localInstant);                 return iZone.convertLocalToUTC(localInstant, false);              }          } public long roundFloor(long instant) {              } else {                  long localInstant = iZone.convertUTCToLocal(instant);                  localInstant = iField.roundFloor(localInstant);                 return iZone.convertLocalToUTC(localInstant, false);              }          } public long roundFloor(long instant) {              } else {                  long localInstant = iZone.convertUTCToLocal(instant);                  localInstant = iField.roundFloor(localInstant);                 return iZone.convertLocalToUTC(localInstant, false);              }          } public long roundFloor(long instant) {              } else {                  long localInstant = iZone.convertUTCToLocal(instant);                  localInstant = iField.roundFloor(localInstant);                 return iZone.convertLocalToUTC(localInstant, false);              }          } public long roundFloor(long instant) {              } else {                  long localInstant = iZone.convertUTCToLocal(instant);                  localInstant = iField.roundFloor(localInstant);                 return iZone.convertLocalToUTC(localInstant, false);              }          } public long roundFloor(long instant) {              } else {                  long localInstant = iZone.convertUTCToLocal(instant);                  localInstant = iField.roundFloor(localInstant);                 return iZone.convertLocalToUTC(localInstant, false);              }          } public long roundFloor(long instant) {              } else {                  long localInstant = iZone.convertUTCToLocal(instant);                  localInstant = iField.roundFloor(localInstant);                 return iZone.convertLocalToUTC(localInstant, false);              }          } public long roundFloor(long instant) {              } else {                  long localInstant = iZone.convertUTCToLocal(instant);                  localInstant = iField.roundFloor(localInstant);                 return iZone.convertLocalToUTC(localInstant, false);              }          } public long roundFloor(
public int translate(CharSequence input, int index, Writer out) throws IOExcepti                  return 0;              }                  out.write(entityValue);              return 2 + (end - start) + (isHex ? 1 : 0) + 1;          }          return 0;
public static boolean isSameLocalTime(Calendar cal1, Calendar cal2) {          return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) &&                  cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) &&                  cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) &&                 cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) &&                  cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR));
protected void registerTypeVariablesOn(Type classType) {              if (actualTypeArgument instanceof WildcardType) {                   contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));              } else {                   contextualActualTypeParameters.put(typeParameter, actualTypeArgument);               } protected void registerTypeVariablesOn(Type classType) {              if (actualTypeArgument instanceof WildcardType) {                   contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));              } else {                   contextualActualTypeParameters.put(typeParameter, actualTypeArgument);               } protected void registerTypeVariablesOn(Type classType) {              if (actualTypeArgument instanceof WildcardType) {                   contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));              } else {                   contextualActualTypeParameters.put(typeParameter, actualTypeArgument);               } protected void registerTypeVariablesOn(Type classType) {              if (actualTypeArgument instanceof WildcardType) {                   contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));              } else {                   contextualActualTypeParameters.put(typeParameter, actualTypeArgument);               } protected void registerTypeVariablesOn(Type classType) {              if (actualTypeArgument instanceof WildcardType) {                   contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));              } else {                   contextualActualTypeParameters.put(typeParameter, actualTypeArgument);               } protected void registerTypeVariablesOn(Type classType) {              if (actualTypeArgument instanceof WildcardType) {                   contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));              } else {                   contextualActualTypeParameters.put(typeParameter, actualTypeArgument);               } protected void registerTypeVariablesOn(Type classType) {              if (actualTypeArgument instanceof WildcardType) {                   contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));              } else {                   contextualActualTypeParameters.put(typeParameter, actualTypeArgument);               } protected void registerTypeVariablesOn(Type classType) {              if (actualTypeArgument instanceof WildcardType) {                   contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));              } else {                   contextualActualTypeParameters.put(
*        * @since 2.3       */     private static final ThreadLocal<Set<IDKey>> REGISTRY = new ThreadLocal<Set<IDKey>>() {         @Override         protected Set<IDKey> initialValue() {             return new HashSet<IDKey>();         }     };      /*       * N.B. we cannot store the actual objects in a HashSet, as that would use the very hashCode() *        * @since 2.3       */     private static final ThreadLocal<Set<IDKey>> REGISTRY = new ThreadLocal<Set<IDKey>>() {         @Override         protected Set<IDKey> initialValue() {             return new HashSet<IDKey>();         }     };      /*       * N.B. we cannot store the actual objects in a HashSet, as that would use the very hashCode() *        * @since 2.3       */     private static final ThreadLocal<Set<IDKey>> REGISTRY = new ThreadLocal<Set<IDKey>>() {         @Override         protected Set<IDKey> initialValue() {             return new HashSet<IDKey>();         }     };      /*       * N.B. we cannot store the actual objects in a HashSet, as that would use the very hashCode() *        * @since 2.3       */     private static final ThreadLocal<Set<IDKey>> REGISTRY = new ThreadLocal<Set<IDKey>>() {         @Override         protected Set<IDKey> initialValue() {             return new HashSet<IDKey>();         }     };      /*       * N.B. we cannot store the actual objects in a HashSet, as that would use the very hashCode() *        * @since 2.3       */     private static final ThreadLocal<Set<IDKey>> REGISTRY = new ThreadLocal<Set<IDKey>>() {         @Override         protected Set<IDKey> initialValue() {             return new HashSet<IDKey>();         }     };      /*       * N.B. we cannot store the actual objects in a HashSet, as that would use the very hashCode() *        * @since 2.3       */     private static final ThreadLocal<Set<IDKey>> REGISTRY = new ThreadLocal<Set<IDKey>>() {         @Override         protected Set<IDKey> initialValue() {             return new HashSet<IDKey>();         }
private boolean safelyMatches(Matcher m, Object arg) {      }       private boolean toStringEquals(Matcher m, Object arg) {          return StringDescription.toString(m).equals(arg.toString());       }   private boolean safelyMatches(Matcher m, Object arg) {      }       private boolean toStringEquals(Matcher m, Object arg) {          return StringDescription.toString(m).equals(arg.toString());       }   private boolean safelyMatches(Matcher m, Object arg) {      }       private boolean toStringEquals(Matcher m, Object arg) {          return StringDescription.toString(m).equals(arg.toString());       }   private boolean safelyMatches(Matcher m, Object arg) {      }       private boolean toStringEquals(Matcher m, Object arg) {          return StringDescription.toString(m).equals(arg.toString());       }   private boolean safelyMatches(Matcher m, Object arg) {      }       private boolean toStringEquals(Matcher m, Object arg) {          return StringDescription.toString(m).equals(arg.toString());       }   private boolean safelyMatches(Matcher m, Object arg) {      }       private boolean toStringEquals(Matcher m, Object arg) {          return StringDescription.toString(m).equals(arg.toString());       }   private boolean safelyMatches(Matcher m, Object arg) {      }       private boolean toStringEquals(Matcher m, Object arg) {          return StringDescription.toString(m).equals(arg.toString());       }   private boolean safelyMatches(Matcher m, Object arg) {      }       private boolean toStringEquals(Matcher m, Object arg) {          return StringDescription.toString(m).equals(arg.toString());       }   private boolean safelyMatches(Matcher m, Object arg) {      }       private boolean toStringEquals(Matcher m, Object arg) {          return StringDescription.toString(m).equals(arg.toString());       }   private boolean safelyMatches(Matcher m, Object arg) {      }       private boolean toStringEquals(Matcher m, Object arg) {          return StringDescription.toString(m).equals(arg.toString());       }   private boolean safelyMatches(Matcher m, Object arg) {      }       private boolean toStringEquals(Matcher m, Object arg) {          return StringDescription.toString(m).equals(arg.toString());       }   private boolean safelyMatches(Matcher m, Object arg) {      }      
private void handleObjectLit(NodeTraversal t, Node n) {            child != null;;            child = child.getNext()) {          String name = child.getString(); private void handleObjectLit(NodeTraversal t, Node n) {            child != null;;            child = child.getNext()) {          String name = child.getString(); private void handleObjectLit(NodeTraversal t, Node n) {            child != null;;            child = child.getNext()) {          String name = child.getString(); private void handleObjectLit(NodeTraversal t, Node n) {            child != null;;            child = child.getNext()) {          String name = child.getString(); private void handleObjectLit(NodeTraversal t, Node n) {            child != null;;            child = child.getNext()) {          String name = child.getString(); private void handleObjectLit(NodeTraversal t, Node n) {            child != null;;            child = child.getNext()) {          String name = child.getString(); private void handleObjectLit(NodeTraversal t, Node n) {            child != null;;            child = child.getNext()) {          String name = child.getString(); private void handleObjectLit(NodeTraversal t, Node n) {            child != null;;            child = child.getNext()) {          String name = child.getString(); private void handleObjectLit(NodeTraversal t, Node n) {            child != null;;            child = child.getNext()) {          String name = child.getString(); private void handleObjectLit(NodeTraversal t, Node n) {            child != null;;            child = child.getNext()) {          String name = child.getString(); private void handleObjectLit(NodeTraversal t, Node n) {            child != null;;            child = child.getNext()) {          String name = child.getString(); private void handleObjectLit(NodeTraversal t, Node n) {            child != null;;            child = child.getNext()) {          String name = child.getString(); private void handleObjectLit(NodeTraversal t, Node n) {            child != null;;            child = child.getNext()) {          String name = child.getString(); private void handle
private static void escapeJavaStyleString(Writer out, String str, boolean escape                          out.write('\\');                          break; case '/' :                              out.write('\\');                          out.write('/');                          break;                      default :
private void visitGetProp(NodeTraversal t, Node n, Node parent) {      if (childType.isDict()) {        report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict"); } else if (n.getJSType() != null && parent.isAssign()) {       return;       } else if (validator.expectNotNullOrUndefined(t, n, childType,          "No properties on this expression", getNativeType(OBJECT_TYPE))) {        checkPropertyAccess(childType, property.getString(), t, n);
, Calendar.HOUR, hours);public static String formatPeriod(long startMillis, long endMillis, String forma              days -= 1;          }          while (days < 0) {             days += 31;              months -= 1;          }          while (months < 0) {              months += 12;              years -= 1;          }         milliseconds -= reduceAndCorrect(start, end, Calendar.MILLISECOND, milliseconds);         seconds -= reduceAndCorrect(start, end, Calendar.SECOND, seconds);         minutes -= reduceAndCorrect(start, end, Calendar.MINUTE, minutes);         hours -= reduceAndCorrect(start, end, Calendar.HOUR, hours);public static String formatPeriod(long startMillis, long endMillis, String forma              days -= 1;          }          while (days < 0) {             days += 31;              months -= 1;          }          while (months < 0) {              months += 12;              years -= 1;          }         milliseconds -= reduceAndCorrect(start, end, Calendar.MILLISECOND, milliseconds);         seconds -= reduceAndCorrect(start, end, Calendar.SECOND, seconds);         minutes -= reduceAndCorrect(start, end, Calendar.MINUTE, minutes);         hours -= reduceAndCorrect(start, end, Calendar.HOUR, hours);public static String formatPeriod(long startMillis, long endMillis, String forma              days -= 1;          }          while (days < 0) {             days += 31;              months -= 1;          }          while (months < 0) {              months += 12;              years -= 1;          }         milliseconds -= reduceAndCorrect(start, end, Calendar.MILLISECOND, milliseconds);         seconds -= reduceAndCorrect(start, end, Calendar.SECOND, seconds);         minutes -= reduceAndCorrect(start, end, Calendar.MINUTE, minutes);         hours -= reduceAndCorrect(start, end, Calendar.HOUR, hours);public static String formatPeriod(long startMillis, long endMillis, String forma              days -= 1;          }          while (days < 0) {             days += 31;              months -= 1;          }          while (months < 0) {              months += 12;              years -= 1;          }         milliseconds -= reduceAndCorrect(start, end, Calendar.MILLISECOND, milliseconds);         seconds -= reduceAndCorrect(start, end, Calendar.SECOND, seconds);         minutes -= reduceAndCorrect
private String normalizeSourceName(String filename) {        AbstractPostOrderCallback {      private int scriptNodeCount = 0; @Override      public void visit(NodeTraversal t, Node n, Node parent) { private String normalizeSourceName(String filename) {        AbstractPostOrderCallback {      private int scriptNodeCount = 0; @Override      public void visit(NodeTraversal t, Node n, Node parent) { private String normalizeSourceName(String filename) {        AbstractPostOrderCallback {      private int scriptNodeCount = 0; @Override      public void visit(NodeTraversal t, Node n, Node parent) { private String normalizeSourceName(String filename) {        AbstractPostOrderCallback {      private int scriptNodeCount = 0; @Override      public void visit(NodeTraversal t, Node n, Node parent) { private String normalizeSourceName(String filename) {        AbstractPostOrderCallback {      private int scriptNodeCount = 0; @Override      public void visit(NodeTraversal t, Node n, Node parent) { private String normalizeSourceName(String filename) {        AbstractPostOrderCallback {      private int scriptNodeCount = 0; @Override      public void visit(NodeTraversal t, Node n, Node parent) { private String normalizeSourceName(String filename) {        AbstractPostOrderCallback {      private int scriptNodeCount = 0; @Override      public void visit(NodeTraversal t, Node n, Node parent) { private String normalizeSourceName(String filename) {        AbstractPostOrderCallback {      private int scriptNodeCount = 0; @Override      public void visit(NodeTraversal t, Node n, Node parent) { private String normalizeSourceName(String filename) {        AbstractPostOrderCallback {      private int scriptNodeCount = 0; @Override      public void visit(NodeTraversal t, Node n, Node parent) { private String normalizeSourceName(String filename) {        AbstractPostOrderCallback {      private int scriptNodeCount = 0; @Override      public void visit(NodeTraversal t, Node n, Node parent) { private String normalizeSourceName(String filename) {        AbstractPostOrderCallback {      private int scriptNodeCount = 0; @Override      public void visit(NodeTraversal t, Node n, Node parent) { private String normalizeSourceName(String filename) {        AbstractPostOrderCallback
static Double getNumberValue(Node n) {    }    static Double getStringNumberValue(String rawJsString) {      String s = trimJsWhiteSpace(rawJsString);      return new Double(s);    }    static Double getStringNumberValue(String rawJsString) {      String s = trimJsWhiteSpace(rawJsString);      return new Double(s);    }    static Double getStringNumberValue(String rawJsString) {      String s = trimJsWhiteSpace(rawJsString);      return new Double(s);    }    static Double getStringNumberValue(String rawJsString) {      String s = trimJsWhiteSpace(rawJsString);      return new Double(s);    }    static Double getStringNumberValue(String rawJsString) {      String s = trimJsWhiteSpace(rawJsString);      return new Double(s);    }    static Double getStringNumberValue(String rawJsString) {      String s = trimJsWhiteSpace(rawJsString);      return new Double(s);    }    static Double getStringNumberValue(String rawJsString) {      String s = trimJsWhiteSpace(rawJsString);      return new Double(s);    }    static Double getStringNumberValue(String rawJsString) {      String s = trimJsWhiteSpace(rawJsString);      return new Double(s);    }    static Double getStringNumberValue(String rawJsString) {      String s = trimJsWhiteSpace(rawJsString);      return new Double(s);    }    static Double getStringNumberValue(String rawJsString) {      String s = trimJsWhiteSpace(rawJsString);      return new Double(s);    }    static Double getStringNumberValue(String rawJsString) {      String s = trimJsWhiteSpace(rawJsString);      return new Double(s);    }    static Double getStringNumberValue(String rawJsString) {      String s = trimJsWhiteSpace(rawJsString);      return new Double(s);    }    static Double getStringNumberValue(String rawJsString) {      String s = trimJsWhiteSpace(rawJsString);      return new Double(s);    }    static Double getStringNumberValue(String rawJsString) {      String s = trimJsWhiteSpace(rawJsString);      return new Double(s);    }    static Double getStringNumberValue(String rawJsString) {      String s = trimJsWhiteSpace(rawJs
public long addWrapField(long instant, int value) {              } else {                  long localInstant = iZone.convertUTCToLocal(instant);                  localInstant = iField.addWrapField(localInstant, value);                 return iZone.convertLocalToUTC(localInstant, false);              }          }          public long set(long instant, int value) {              long localInstant = iZone.convertUTCToLocal(instant);              localInstant = iField.set(localInstant, value);             long result = iZone.convertLocalToUTC(localInstant, false);              }
Node parseInputs() {        boolean staleInputs = false;        if (options.dependencyOptions.needsManagement() && options.closurePass) {          for (CompilerInput input : inputs) {          if (input.isVarArgs()) {            if (staleInputs) {              staleInputs = true;            }            else {              staleInputs = false;            }          }         }        if (options.dependencyOptions.needsManagement() && options.closurePass) {          for (CompilerInput input : inputs) {          if (input.isVarArgs()) {            if (staleInputs) {              staleInputs = true;            }            else {               staleInputs = false;             }          }         }        if (options.dependencyOptions.needsManagement() && options.closurePass) {          for (CompilerInput input : inputs) {          if (input.isVarArgs()) {            if (staleInputs) {              staleInputs = true;            }            else {               staleInputs = false;             }          }         }        if (options.dependencyOptions.needsManagement() && options.closurePass) {          for (CompilerInput input : inputs) {          if (input.isVarArgs()) {            if (staleInputs) {              staleInputs = true;            }            else {               staleInputs = false;             }          }         }        if (options.dependencyOptions.needsManagement() && options.closurePass) {          for (CompilerInput input : inputs) {          if (input.isVarArgs()) {            if (staleInputs) {              staleInputs = true;            }            else {               staleInputs = false;             }          }         }        if (options.dependencyOptions.needsManagement() && options.closurePass) {          for (CompilerInput input : inputs) {          if (input.isVarArgs()) {            if (staleInputs) {              staleInputs = true;            }            else {               staleInputs = false;             }          }         }        if (options.dependencyOptions.needsManagement() && options.closurePass) {          for (CompilerInput input : inputs) {          if (input.isVarArgs()) {            if (staleInputs) {              staleInputs = true;            }            else {               staleInputs = false;             }         
