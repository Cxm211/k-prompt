if (!(rawKey instanceof Buffer)) {         log = "CryptoAdapter cannot import key of wrong type (" + typeof rawKey + "), rejecting";
rows.push(header);         for(var key in section) {             function td(content) {
this._activeRoute = currentPage;
if (!request.url)   throw new Error("no url on request");
}; turbo.autorepair.detect = {}; turbo.autorepair.detect.editors = function(q, lng) {
_updateEvents(events) {     var parsedEvents = JSON.parse(events);     return parsedEvents;
return {       parentData : this._super(...arguments),       sponsors   : this.getSponsors()
}; incrementSquare = function(x) {   return add(square(x), 1); };
if (enable === true || enable === path) {       console.log(' '+ chalk.yellow(chalk.underline(path)));     }
socket.disconnect();         }         if (!app.request ||!app.isAdminAuthorized ||!app.config ||!app.isAdminAuthorized(app.request, app.config)) {             var adminAuthorization = require('basic-auth');
if (false) {                 try {
it('patching with readOnly field isDeleted should fail', (done) => {       api.patch(`${path}/${i}`)
let promise;         if (type ==='message') {
var frameTags = ["frame","iframe"];             for (var i = 0, nframes = frames.length; i < nframes; ++i) {
$("#member_search_dialog").dialog("close");             onFailure(oMemberSearch.fnGetData(this));         });
}     return this   }, this)
expect(handlers.ViberHandler).toBeDefined();   expect(handlers.ClassifierHandler).toBeDefined(); });
optimist.showHelp();     process.exit(0);   }
(context)["module"] = module;   (context)["require"] = require;   return (function() {
let drag = d3.behavior.drag()      .origin(() => {         return {x: legendG.attr('kis:kis:tx'), y: legendG.attr('kis:kis:ty')};
import * as R from 'ramda'; import React, {Component} from'react';
if(typeof key!='string') {   throw new Error('Key must be a string for function contains(key)');  }
renderCallback: function() {     game.controls.gravityEnabled = true   }
value = def_item.v;             }             value = parseInt(value);             if (!isNaN(value)) {
var _ = require('lodash'); var Select = require('react-select');
var patterns=_.map(terms, function(term) {           return new RegExp(term.toLowerCase());           });         var results=_.filter(results, function(rawdoc) {
handleLoad: function(model, relation)   {
...state,         logs: [...state.logs ].concat([ action.payload.log ])       }       break;
constructor(cell) {     super();     this.origin = cell;     this.items = [...cell.before, cell,...cell.after];
return str;     }
} else {     input = typeof input ==='string'? input : typeof input === 'number'? input : typeof input === 'boolean'? input : typeof input === 'undefined'? input : typeof input === 'undefined'? input : typeof input === 'undefined'? input : typeof input === 'undefined'? input : typeof input === 'undefined'? input : typeof input === 'undefined'? input : typeof input === 'undefined'? input : typeof input === 'undefined'? input : typeof input === 'undefined'? input : typeof input === 'undefined'? input : typeof input === 'undefined'? input : typeof input === 'undefined'? input : typeof input === 'undefined'? input : typeof input === 'undefined'? input : typeof input === 'undefined'? input : typeof input === 'undefined'? input : typeof input === 'undefined'? input : typeof input === 'undefined'? input : typeof input === 'undefined'? input : typeof input === 'undefined'? input : typeof input === 'undefined'? input : typeof input === 'undefined'? input : typeof input === 'undefined'? input : typeof input === 'undefined'? input : typeof input === 'undefined'? input : typeof input === 'undefined'? input : typeof input === 'undefined'? input : typeof input === 'undefined'? input : typeof input === 'undefined'? input : typeof input === 'undefined'? input : typeof input === 'undefined'? input : typeof input === 'undefined'? input : typeof input === 'undefined'? input : typeof input === 'undefined'? input : typeof input === 'undefined'? input : typeof input === 'undefined'? input : typeof input === 'undefined'? input : typeof input === 'undefined'? input : typeof input === 'undefined'? input : typeof input === 'undefined'? input : typeof input === 'undefined'? input : typeof input === 'undefined'? input : typeof input === 'undefined'? input : typeof input === 'undefined'? input : typeof input === 'undefined'? input : typeof input === 'undefined'? input : typeof input === 'undefined'? input : typeof input === 'undefined'? input : typeof input === 'undefined'? input : typeof input === 'undefined'? input : typeof input === 'undefined'? input : typeof input === 'undefined'? input : typeof input === 'undefined'? input :
import mapTransition from './utils/mapTransition' let cursors  , playerObject
it("should test if links and karyo are defined when they are returned from their functions", function(){   expect(returnKaryo).toBeDefined();   expect(returnLinks).toBeDefined();  });
return;    var ctx = Display.context.backgroundCam;    ctx.drawImage(camCache,0,0);
(function (Z) {      var Y = X.Y;        var Y = 12;  })(Z || (Z = {}));
centerCoords() {     const s = this.starChart;     const upperY = s.height - (s.yAxis.range[0].y - s.corners[0].y)     const lowerY = s.corners[3].y - s.yAxis.range[1].y     return {
var example = 'https:         var modalSelection = uiModal(selection);
type: 'object'    , required: false    , 'default': {}     }
function update(TableName, { key, expressions }) {   return describeDynamoTable(TableName).then((tableDescription) => {     let params = Object.assign({ TableName, Key: key }, compileIfSet(expressions));
let bundleName = shortName.replace(/[ \.]/g, '').toLowerCase();     if (conditionValueOrVariationObject) {
function element(name, prototype) {     if (arguments.length === 1 && typeof arguments[0]!=='string') {       prototype = name;
for (var k in protocol.types) {     var v = protocol.types[k];
case cwc.ui.MessageType.ERROR:       console.error(prefix, message);       break;     default:
key = "ZTILE";         value = this.verifyInteger(key, arguments[0]);         return value;       },
if (!args) {         throw new Error('Expected function keyword with formal parameter list.');     }
if ( this.boundingBox === null ) {    this.boundingBox = new THREE.Box3();   }
process: function(mt, alias, boardRegion) {     return new gpub.spec.Grouping();   }
}   return PropTypes.oneOf(props.breakpoints); }
var key = load.key;   var registrationPair = this._registerCache[key];   if (!registrationPair)
});  })( window.db, window.describe, window.it, window.runs, window.expect, window.waitsFor, window.beforeEach, window.afterEach, window.jQuery );
performance.mark("dispatch-start");                         if (this.options && this.options.logDispatchedActions) {                             this.logger.info("Dispatching: " + reducer.name);                         }
if (!needsRefresh && suffixStripped) {      for (var i = 0, l = opts.suffix.length; i < l; i++) {       buffer.push(opts.suffix.charAt(i));
if (model.prototype.connection!= this){       function Model (){         model.apply(this, arguments);
const redisCodeKey = config.systemConfig.db.redis.namespace.concat('-', authCodeNamespace).concat(':', code.id);   return db.hmset(redisCodeKey, code); };
function(upOrDown) {   var hasAltGrState = this.stateManager_.hasState(       i18n.input.chrome.inputview.StateType.ALTGR);   var hasShiftState = this.stateManager_.hasState(i18n.input.chrome.inputview.       StateType.SHIFT);
calculateDimensions();             var vendor = {                 transform: "-webkit-transform"             };             scrollBarElm.style.height = data.height + "px";
GridStore.exist(db, 'foobar2', function(err, result) {           sys.puts("File 'foobar2' exists: " + result);         });
case FCP:       const fcpObserver = observeEvents({ type: FCP, buffered: true }, paintEvents => {         const fcp = computeFcp(paintEvents)
define(     function(require) {
HasManySingleLinked.prototype.injectGetter = function(options) {     var where = {}, options = options || {}     where[this.__factory.identifier] = this.instance.id
keys = Object.keys(MESSAGES);     for (var index = 0; index < keys.length; index++) {       key = keys[index];
M.eC = eC;                         ;
switch (provider) {         case 'github':           const attrs = { provider };           let caId, user;
return this.getSubscription('newPendingTransactions', null, null, null, callback);         case 'logs':
$scope.login = function() {             if ($scope.running_login || $scope.running_create) {
if (num < countofClusters) vol.fetchFromFAT(num, cb);
onComponentDidMount() {                   mountedCalled++;
var val = prop.factory.call(this, prop);
UniqueRestrictedTextField = Class.extend('UniqueTextField'); UniqueRestrictedTextField.applyTo('input.UniqueRestrictedTextField');
return false;       }
if (props.best_parent_unit === null)     throw new Error("best parent is null");    console.log("unit "+unit+", best parent "+props.best_parent_unit+", wlevel "+props.witnessed_level);
function foreach(dtype, f){  for(var x in dtype){   f(x, dtype[x]);  }  return;
routes = require('./lib/utils/routes'); var r = require('./routes'),
Jack.Static = function(app, options) {     options = options || {};
} else {         vecType = vecType || vecType === void 0? vecType : vecType === void 0? vecType : vecType === void 0? vecType : vecType === void 0? vecType : vecType === void 0? vecType : vecType === void 0? vecType : vecType === void 0? vecType : vecType === void 0? vecType : vecType === void 0? vecType : vecType === void 0? vecType : vecType === void 0? vecType : vecType === void 0? vecType : vecType === void 0? vecType : vecType === void 0? vecType : vecType === void 0? vecType : vecType === void 0? vecType : vecType === void 0? vecType : vecType === void 0? vecType : vecType === void 0? vecType : vecType === void 0? vecType : vecType === void 0? vecType : vecType === void 0? vecType : vecType === void 0? vecType : vecType === void 0? vecType : vecType === void 0? vecType : vecType === void 0? vecType : vecType === void 0? vecType : vecType === void 0? vecType : vecType === void 0? vecType : vecType === void 0? vecType : vecType === void 0? vecType : vecType === void 0? vecType : vecType === void 0? vecType : vecType === void 0? vecType : vecType === void 0? vecType : vecType === void 0? vecType : vecType === void 0? vecType : vecType === void 0? vecType : vecType === void 0? vecType : vecType === void 0? vecType : vecType === void 0? vecType : vecType === void 0? vecType : vecType === void 0? vecType : vecType === void 0? vecType : vecType === void 0? vecType : vecType === void 0? vecType : vecType === void 0? vecType : vecType === void 0? vecType : vecType === void 0? vecType : vecType === void 0? vecType : vecType === void 0? vecType : vecType === void 0? vecType : vecType === void 0? vecType : vecType === void 0? vecType : vecType === void 0? vecType : vecType === void 0
} else if (!this.isConnect) {       throw new Error('User is\'t connections.')     }
}                 case "generate":                     if (value=="true" || value=="false")
if (e.keyCode === 69 && (e.metaKey || e.ctrlKey)) {       Expose.toggle();
} else {         throw new Error(`Tried to add an item ${ constructor.name } already in the inventory!`);       }
let options;       [keyPath, options, callback] = Array.from(arguments)       scopeDescriptor = options.scope
<label className="table-checkbox-label">        <input id={'checkbox-' + i} onChange={self.handleChange.bind(this, i)} checked={checked} type="checkbox" name="customers" className="table-checkbox" />       </label>
import React, {useEffect} from'react'; import {Button, Card, CardBody, CardHeader, Col, Container, Modal, Row, Spinner} from "reactstrap";
this.dialogService = fdsDialogService; }
if (!(k in defaults)) {      throw new Error('Property "' + k + '" is not defined. You should define it first with `define` method of current module');     }
}   return new String(out.join('')); }
} else {         log.debug('Name not transformed for File \"' + preMapped + '\"')       }
var prompt = require('prompt-lite'); var path = require('path'); var prompt = require('prompt');
var content = fs.readFileSync(mainfile);             var paths;
'console' in this && 'cd' in this.console
if (!option) {         throw new Error(`an option with data-hook ${hook} was not found`);       }
var contains = function (array, match){    for(var i=0; i < array.length; i++){
if (selectedOptionsArray.includes(activeOptionIndex)) {         const index = selectedOptionsArray.indexOf(activeOptionIndex);
function getWorklogObjects(key, worklogs, options){         return new Promise((resolve) => {
}()); run(function (override, capture, args) {
{  constructor(name, sendUpdates = true){   super();   Object.assign(this, {name, sendUpdates});
}     function innerSubscribe(observer) {       var ado = new AutoDetachObserver(observer), state = [ado, this];       if (currentThreadScheduler.scheduleRequired()) {
var level = 0;         for (var i = 0; i < tokens.length; i++){             var token = tokens[i];
typeof define === 'function' && define.amd? define(factory) :  (factory()); }(this, (function () { 'use strict';  var foo = { value: 1 };
if (params.region!== false) {     AWS.config.update({ region: params.region });
if(deviceIndex >= data[roomIndex].devices.length)   throw new Error("Device doesn't exist"); }
document.querySelector(".notification").classList.add("welcome");     } else {         document.querySelector(".notification").classList.add('once');     }
import GlobalContext from '../../contexts/GlobalContext'; import config from '../../_config'; import './index.scss';
controller.on('settingschange', function(e) {   ext.trigger('settingschange', {type: e.type, target: this, data: e.data});  });
if (value.isDuplex) {         component.bind('onchange', (function(event) {           return value.call(this.component, this.value);         }), 'before');
} from "material-ui/Table"; import IdField from "../IdField"; import ServiceReplicaStatus from "../ServiceReplicaStatus";
var srcRetinaFiles;     var srcRetinaFilter = data.srcRetinaFilter;
var start = position    , chr = input[position++]    , t
if (arguments.length < 2 || not(L)) { return L; }     var args = [apply(R, [])];     args.push.apply(args, slice(arguments, 2));     return and.apply(null, args);
case 'kill':                 process.exit();         }
animateOrphans: task(function * (removedSprites, transition, duration) {     this._newOrphanTransitions.push({ removedSprites, transition, duration });
if ($target) {           var event = e.originalEvent,             touches = event.touches,
var mongoConfig = appEnv.getServiceCreds('MongoInstance'); environment.mongo = {
_parseEventList(eventList) {                 tsUtils.each(eventList, this._addEvent, this);             }
defaultValue : 9600,              defaultValue : 9600      });
if(cdsStart > exonEnds)  {   return smallBox( (exonStarts - (Math.min.apply(Math, _.pluck(data, 'txStart')))), (exonEnds - exonStarts), multiplyingFactor, strand);  }
_updateWrapAround() {     this._wrapAround = this.loop && this._lastViewIndex > 0;
for (var i = 0; i < minItems; i += 1) {             textToInsert += "<li><a href=\"" + topicTweetsURL(value[i]) + "\">" + abbreviate(value[i]) + "<\/a><\/li>";         }
Application.prototype._addWindow = function(w) {     if (!(w instanceof OSjs.Core.Window) ) { throw new Error('Application::_addWindow() expects Window'); }     console.info('OSjs::Core::Application::_addWindow()');
function _buildAttachedLight () {         this._camLight = new BABYLON.HemisphericLight("Camera Light", new BABYLON.Vector3(0,1000,0), this._scene)
var KEY_OPTION = new Symbol("option");
}  }); };
],                 function returnFoundModels( err, _models ) {                     models = []                      , _models = _models instanceof Array? _models : [ _models ];
window.location = window.location.href;             }         );         $dialog.dialog("close");     };
}).on("submit", function (e) {             if (e.isDefaultPrevented()) {
import { storiesOf } from '@storybook/react' import { Engine, Scene, FreeCamera, HemisphericLight, Sphere, Ground } from 'babylonjs' import '../../style.css'
define('mods/b/h',function(require,exports,module){     module.exports = function(){
goToWorksheet: function(){         window.location.href = window.location.origin + '/worksheets/' + this.props.item.state.interpreted.uuid;     },     render: function() {
$scope.$on('timelionPlotHover', function (angularEvent, flotEvent, pos, time) {           if (!$scope.plot) return;
for(var i in items) {                 if (items[i]===this) {
onError : function(t) {       TextureState.getDefaultTexture().createSimpleClone(rVal);      }
content: contentAndMetadata,                     templateContentType: this.responseParameters.contentType,                     templateName: configEntry.templatePath                   };
totaln  = delt.width * delt.height,     dscl  = 0,     pix  = totaln * 4;
var cE = this.convertor(T, cD);         var T = new Z.Coordinate(cE.x.toFixed(2), cE.y.toFixed(2));         return T;     },
, query = ctx.query || {}    , client = ctx.dpd    , errors = {};   if(!item) return done('You must include an object when saving or updating.');
var ColorScaleModel = linearscalemodel.LinearScaleModel.extend({     initialize: function() {         ColorScaleModel.__super__.initialize.apply(this, arguments);     },     set_init_state: function() {
topic.then(function(res){         console.log(res);       });
}         var url = "http:         url += "?access_token="+ lessCookie.Get("access_token");
jquery: 'jquery',     vue: 'Vue',     vue: 'Vue'   },
if (mask & GL_DEPTH_BUFFER_BIT) {   buffer = cnvgl_state.depth_buffer;   clear = cnvgl_state.clear_depth;   for (var i = 0, l = buffer.length; i < l; i ++) {    buffer[i] = clear[0];
var tailPartial = function(fn) {         var args = [].slice.call(arguments, 1);         return function () {             return fn.apply(this, args);         };
module.exports = function ($elem, fn, frequency) {   var currentHeight = $elem.height();
} else if (Array.isArray(rules)) {         for (const i in rules) {             const result = {
describe('newRequest', () => {     it('should return an object describing the last non published object from smartContractProxy response', function*() {         const smartContractProxy = {
Object.defineProperty(Array.prototype, "binaryIndexOf", {
App.on('record', co.wrap(function *() {     yield App.activity.record.apply(App.activity, arguments)   }))
case 'logs':             return this.getLogsSubscription(parameters, callback);         case'syncing':
that._working = false;         });     }
cell.focus_cell();                 }                 return false;
for (var j = 0; j < 1; j += 0.1) {             for (var i = 0; i < 1; i += 0.1) {                                     var p = calculate(i, j, n, m, k);
this.i = 0; }
return   if(geo && geo.features && geo.features.length>0) {    _.each(geo.features, function(feature) {
if (this._inChangeGroup) {             throw new Error("TextView._beginChangeGroup() called while already in a " +                 "change group");         }
case 'location':    return event.reply('That\'s a good location!');   case'sticker':
}); }; module.exports = AInPHasADistinctStyle;
textXPosition = x;    else if (textAlign == "right")     textXPosition = x + w - totalWidth;
track.nbNalu = 0;     if(window.chrome) {
var serverMetaInfo = function (context) {   var info = {
function run(opts, cb) {   var scope = this    , data = this.data    , parallel = false    , pipeline = this.pipeline.slice(0)
}         statusTable += "</table>";         $("#status-table").html(statusTable).show("blind");
beforeEach(() => {             this.reporter = new global.SpecReporter({                 displayStacktrace: "none"             });         });
const map = require('lodash/map'); const { startTimer, endTimer } = require('./helpers');
Realm.clearTestState();         var promise;
var SvgImporter = this.SvgImporter = {
case "filter":                 let activeFilters = [];                 if (e.target.dataset.value == "ALL") {
var UTIL = require('./ender.util')  , JEESH = require('./ender.jeesh'); module.exports = {
{institutionId: this.details.id, userId: parseInt(this.userId)})            .then(angular.bind(this, function successCallback(response) {                 alert("Membership requested for user " + this.userId + ".");
$('#dvs-admin-modal').html('').addClass('dvs-hidden');          $('#dvs-admin-blocker').addClass('dvs-hidden');     }
const optionLabelPath = this.get( 'optionLabelPath' );                     const select2 = this;
return 'none';         } else if (color.typename === 'SpotColor') {                      } else {
})(window['angular'] || window['angular'] || window['angular'] || window['angular'] || window['angular'] || window['angular'] || window['angular'] || window['angular'] || window['angular'] || window['angular'] || window['angular'] || window['angular'] || window['angular'] || window['angular'] || window['angular'] || window['angular'] || window['angular'] || window['angular'] || window['angular'] || window['angular'] || window['angular'] || window['angular'] || window['angular'] || window['angular'] || window['angular'] || window['angular'] || window['angular'] || window['angular'] || window['angular'] || window['angular'] || window['angular'] || window['angular'] || window['angular'] || window['angular'] || window['angular'] || window['angular'] || window['angular'] || window['angular'] || window['angular'] || window['angular'] || window['angular'] || window['angular'] || window['angular'] || window['angular'] || window['angular'] || window['angular'] || window['angular'] || window['angular'] || window['angular'] || window['angular'] || window['angular'] || window['angular'] || window['angular'] || window['angular'] || window['angular'] || window['angular'] || window['angular'] || window['angular'] || window['angular'] || window['angular'] || window['angular'] || window['angular'] || window['angular'] || window['angular'] || window['angular'] || window['angular'] || window['angular'] || window['angular'] || window['angular'] || window['angular'] || window['angular'] || window['angular'] || window['angular'] || window['angular'] || window['angular'] || window['angular'] || window['angular'] || window['angular'] || window['angular'] || window['angular'] || window['angular'] || window['angular'] || window['angular'] || window['angular'] || window['angular'] || window['angular'] || window['angular'] || window['angular'] || window['angular'] || window['angular'] || window['angular'] || window['angular'] || window['angular'] || window['angular'] || window['angular'] || window['angular'] || window['angular'] || window['angular'] || window['angular'] || window['angular'] || window['angular'] || window['angular
const jsonBody = this.buildJsonBody();         if(this.props.id) {
_getContext: function() {     return this.parent._getContext.apply(this.parent, arguments);   }
$scope.lang = "pl"; }
};     return build.call(this, this._styles? this._styles.concat(codes) : [codes], this._empty, model);    };
const d = util.castDate(propertyValue).getTime();                 const n = (d - min.getTime()) / (max.getTime() - min.getTime());                 properties[name][i] = n;
while ( char = chars[++k] ) {           this.command( char.charCodeAt(0) );
, examine = function (node) { return Array          .from (node.attributes)
var i = 0;     while (i < xAxis.length) {
+', shapes: [ '+this.shapes + ']'         + StringApp.superClass_.toString.call(this);   }; }
rm('-rf', 'app/containers'); mv('internals/templates/containers', 'app');
} else if (sets[set_index].length === 0) {             console.log("No more rules");             return;
for (const slot in slotsObj) {     const ele = {       "name": `${slot}`,       "description": `${slotsObj[slot]["description"] || ''}`
else{                     var startdate = dateFormat(Date.now(), 'yyyy-mm-dd HH:MM:ss');                     var enddate = dateFormat(Date.now() + current_subscription[0].duration*86400000, 'yyyy-mm-dd HH:MM:ss');                 }
workingSlats = msg.value;                 default:             }
Sammy.addLogger(function() {         window.console.log(arguments);       });
function inlineDocument($, css, options) {   var rules = utils.parseCSS(css)    , editedElements = [];   rules.forEach(handleRule);
$('a[action="sync-fountain"]').click(function() {                  if (this.isSyncEnabled) {                      this.fire('disableSync');                  }
([  function(module, exports) {
}   });   $(document).keyup(function(e) {
getBusinessObject = require('bpmn-js/lib/util/ModelUtil').getBusinessObject,   forEach = require('lodash/collection/forEach'); module.exports = function(group) {
module.exports = function*() {   yield all([
const ValidatingCreateMixin = Mixin.create({   create() {     const instance = this._super();
'use strict'; var join = require('path').join  , helpers = require('yeoman-generator').test; describe('module generator', function () {
for (var key in changes) {           message +='';           layer = changes[key];           message += 'Conflicts in \'' + key + '\': ';
for (var key in this.directoryElements) {         if (this.directoryElements.hasOwnProperty(key)) {         this.directoryElements[key].removeClass('hide')
$constructor : function () {             typeUtils = aria.utils.Type;             fireDomEvent = this;
var fValue = bn2.leq(bn1) && bn1.lt(bn3);       this.stack.pop();
slidesToScroll: 1,       slidesToShow: 1,       slideWidth: 1,
}, 0);         },         '-': function() {             return [].reduce.call(arguments, function(a, b) {                 return a - b;
}   $.Widget.prototype._setOption.apply( this, arguments );   switch ( key ) {
var bounds = this.getAbsBounds();    for(orientation in this._icons) {     var left, top, margin;
var Provider = require('../provider')  , extend   = require('extend'); module.exports = Provider.extend({
$("#nav_menu").css("display", "inline");             $("#nav_menu").css("top", $(this).offset().top + $(this).height());             $("#nav_menu").css("left", $(this).offset().left + $(this).width() - 5);         }
function  _getScrap(scrapName, tests) {                 var indexTests,                     tempScrap,                     size,                     scrap;
storage.setItem('records', JSON.stringify(localRecords));     callback(localRecords)
} finally {             if (_didIteratorError7) {               throw _iteratorError7;             }
return this.writeInt16(n);   }
(function () { var a = document.querySelectorAll('[data-toggle="tooltip"]'); var b = document.querySelectorAll('[data-toggle="tooltip"]'); var c = document.querySelectorAll('[data-toggle="tooltip"]'); var d = document.querySelectorAll('[data-toggle="tooltip"]'); var e = document.querySelectorAll('[data-toggle="tooltip"]'); var f = document.querySelectorAll('[data-toggle="tooltip"]'); var g = document.querySelectorAll('[data-toggle="tooltip"]'); var h = document.querySelectorAll('[data-toggle="tooltip"]'); var i = document.querySelectorAll('[data-toggle="tooltip"]'); var j = document.querySelectorAll('[data-toggle="tooltip"]'); var k = document.querySelectorAll('[data-toggle="tooltip"]'); var l = document.querySelectorAll('[data-toggle="tooltip"]'); var m = document.querySelectorAll('[data-toggle="tooltip"]'); var n = document.querySelectorAll('[data-toggle="tooltip"]'); var o = document.querySelectorAll('[data-toggle="tooltip"]'); var p = document.querySelectorAll('[data-toggle="tooltip"]'); var q = document.querySelectorAll('[data-toggle="tooltip"]'); var r = document.querySelectorAll('[data-toggle="tooltip"]'); var s = document.querySelectorAll('[data-toggle="tooltip"]'); var t = document.querySelectorAll('[data-toggle="tooltip"]'); var u = document.querySelectorAll('[data-toggle="tooltip"]'); var v = document.querySelectorAll('[data-toggle="tooltip"]'); var w = document.querySelectorAll('[data-toggle="tooltip"]'); var x = document.querySelectorAll('[data-toggle="tooltip"]'); var y = document.querySelectorAll('[data-toggle="tooltip"]'); var z = document.querySelectorAll('[data-toggle="tooltip"]');
, ReplaceTransitionGroup  = require('./ReplaceTransitionGroup.jsx')  , events  =  require('../util/events')  , _ = require('lodash');
var $ctrl = this;
function getToggleClickHandler(tab) {   if (this.activeTab) {
node.done = done;             for (var client in clients) {                 clients[client].client.destroy();             }             node.status({});
let repr = '{';   for (let key in item) {    repr += `${key}: ${stringRepresentationForJsx(item[key])}, `;   }   repr = repr.slice(0, repr.length - 2);
formUrl: 'https:     formUrl: 'https:
},     updateNodeBounds: debounce(function(element, newBounds) {       const { x, y, width, height } = this.node.diagram.bounds;       if (
var info = new Object();    info["workspaceId"] = $.workspaceGlobalInformation.id;    info["command"] = "ClearTripleStoreCommand";    info['tripleStoreUrl'] = $('#txtModel_URL').html();
this.w.forEachWindow(function (w) {       if(w!= wnd && (w.isModal() || this.w.getTopmostWindow() == w))         do_exit = true;
if (status.nModified < 1) {                     return function * () {                 }
this.saveKeyFromCore("pre_" + filename);             },
$scope.apps = res;     console.log("Apps: ", $scope.apps);   });
for (const code in countries) {     let names = countries[code];
} else {       for (var att in change.doc._attachments) {         if (change.doc._attachments.hasOwnProperty(att)) {         change.doc._attachments[att].stub = true;         }
$(this).callRemote();          return false;          e.preventDefault();      });
var connect = require('../')  , os = require('os')
import {Reducer, setInitialState, IReducer} from './reducer.decorator'; import {State} from './state.decorator';
, HOVER_KEY = -1  , NO_HOVER  = -1  , NONE_SELECTED = -1;
, indentation = ctx.indentation      , indentFirstLine = ctx.indentFirstLine      , extName = env.isProduction? ".min.js" : ".js";   return array$concat$$([],
if (!((observerCallbackInterface_!= null) && observerCallbackInterface_)) {               throw new Error("Missing callback interface namespace input parameter..");             }
this._timer = setInterval(function () {                 if (that.smoothContent) {                     var contentHeight = that.$content.outerHeight() || 0;
, driverBlock = require("../../helpers/driverblock.js")  , it = driverBlock.it  , should = require("should');
local.render();         });       });
)       if (switcher.sync) {
this.fields = []; }
format = format.replace(/\s?\zh/, '');
if (!childObject[childAssociationName]) {               throw new Error(childAssociationName + " association does not exist.");             }
type     = field.resolvedType instanceof Enum? "uint32" : field.type,                 wireType = types.basic[type],                 prop     = util.safeProp(field.name);
filter = filter.reduce(function (arr, el) {     var __NEJS_THIS__ = this;     if (el!== '!html') {
this.trigger('g:demoted');         }, this)).fail(_.bind(function (err) {             this.trigger('g:error', err);
renderParallaxForeground(postInfo){   return (
this.viewData['title'] = 'rulee viewData';         setTimeout(function() {
$(".line_selected").removeClass("line_selected");       index=parseInt($(this).data("index"),10);              $(this).addClass("line_selected");
.append('li')                .attr('style', _.bind(function(d,i) {                     var top = (this.groupHeight + this.barGap) * i;
if (!(1 === context.parseStack.length)) {       throw new Error("unclosed node: " + prettify(context.parseStack[0], false))     }
returnOb.x = expressionStr;         }
import * as React from'react'; import { Box, Letterbox } from 'gestalt'; import stock3 from './images/stock3.jpg';
>     {render({ref: this})}    </IconButton>
ready: function() {       debug('ready');     }
jBone.fn.html = function() {     var value = arguments[0], result;
} else if (e.name === 'SourceUnavailableError') {                  callback(this, 'conflict', undefined, e);             } else if (e.name === 'SecurityError' && e.message === 'The operation is insecure.') {
context.sched(startTime, function(t0) {     this._state = STATE_RUNNING;     emit(this, t0, false);   }, this);
if(message.data.payload.newName == null)   {     throw new Error("suggestUserName Message has no newName!");   }
if (format.charAt(0) == "#") {     r, g, b;     if (format.length == 4) {       r = format.charAt(1); r += r;
editSessionName: function(session, newName) {     localStorage[Constants.LOCALSTORAGE_PREFIX + newName] =       localStorage[Constants.LOCALSTORAGE_PREFIX + session]     this.deleteSession(session)
dataset = flatten(dataset);     return dataset;
}; }; this.coGroup = function(grid, app, job, node) {  Transform.call(this, grid, app, job, node);
});           break;s       }
var _ = require('lodash'),     mongoose = require('mongoose');
const path = "/" + dataset.address.replace(".","/",-1);     return dispatch(push(path));
err, process.pid);     return;    }
suiteNesting === 1 && setupHooks.call(this);
throw "unrecognized self.mode_loginWith"     }
ListDESDLEspBindings: function (params) {             handleAs: "text"             return ESPRequest.send("WsESDLConfig", "ListDESDLEspBindings", params);
const h = mori.mutable.thaw(mori.hashMap());         for (const i = 0, len = keys.length; i < len; ++i)             mori.mutable.assoc(h, keys[i], i);
html += 'My restaurants <b class="caret"></b></a>\n';         html += '<ul class ="dropdown-menu" aria-labelledby="myRestaurantsButtonLink" role="menu">';
this.isFocused = function () {     if (this.mergedMarker ||!this.patternRenderData) {
if (detach!== false) this._fragment.u();     this._fragment.d();     this._fragment = null;
let Buttons = ({ expand, shrink, dismiss, autocrop }) => (   <div className="Buttons">
});   }).controller('awsDisableAsgStageCtrl', function($scope, accountService, stageConstants, appListExtractorService) {     let ctrl = this;     let stage = $scope.stage;
else if ( child = readElseIf( parser, tag ) ) {    if ( section.n === SECTION_UNLESS ) {
if(sheet.drawings){     if(this.debug){      console.log("\n\r########  Drawings found ########\n\r")
var   path = require('path')  , gulpCopy = require('gulp-copy')  , ghPages = require('gulp-gh-pages')
throw err; }
ipcMain.on("fetch-categories", (evt, blogName) => {   storage.get("auth", (error, auth) => {
angular.module("leaflet-directive").directive('maxbounds', function ($http, $log, $parse, $rootScope) {     return {
;require.register("views/popups/alert", function(exports, require, module) { var AlertView, app, viewstack, _ref;
return rotation.reset(self.selected);       case LOCATION_POP_ACTION:         const newState = util.fromQueryString(action.payload.search);         const extent = lodashGet(action, 'payload.query.map.extent');
var params_list = [];         for (var key in params) {           params_list.push(key + "=" + params[key]);         }
if (isSelected) {                     toggle(true, shape.classed(CLASS[_SELECTED], true), d, i);                 }
if (this.model.chartViewModel == null && this.model.sql!== "undefined") {                 this.advancedMode = true;
sup.apply(this, arguments);     if (enyo.LunaService) {
if (!sprite) {         sprite = Sprite.sizedEndingAt(this.element);         this.sprite = sprite;
{         throw new Error("Can't route the message:" + JSON.stringify(message));       }
sortByExpectedValue:'sortByExpectedValue',     sortBySubSetSize:'sortBySubSetSize',     sortBySetItem:'sortBySetItem'
return alert('still no tabCapture stream');     }
vm.isSignedIn = false;     }   }
} Doc = matchMethods(Doc) Doc = addSelections(Doc) Object.assign(Doc.prototype, methods.misc)
if (err) return callback(err);             this._gridCache[id] = buffer;
describe('___ (covered by ___)', function() {   this.timeout(6000);
} else if (out && model._boxed) {         out =!!type? clone(out) : out;     } else if (!out && model._materialized) {
const { PureComponent } = require('react'); const { Text, Button, View, Platform } = require('react-native'); const { Navigation } = require('react-native-navigation');
define(["css!dijit/claro/claro.css","css!dojo/dojo.css"], function (ss1, ss2) {  console.log(arguments); });
, {                     xtype: 'tbspacer',
_.forEach(this.methods, function(key) {             self[key] = self[key].bind(self);         });     };
if (element._prototypeEventID) return element._prototypeEventID[0];     return element._prototypeEventID = [++arguments.callee.id];   }
if(items.random){    this.generateRandomColor(items)    }   this.checkValues();
if(!Array.isArray(b) || b.length == 0) {    throw new Error("buckets must be an array of bucket limits");   }
const [projectResponses, setProjectResponses] = useState({});   const api = useAPI();
socket.on('err', function(error) {         smalltalk.alert(this._TITLE, error);     });
init: function(data) {         BaseGameObject.init.apply(this, arguments);
console.log(ex);    process.exit(-1);   }
tooltipType: 'qtip',                       tooltip: resetSearchFieldTooltipString[lang],                       id: 'EmptySearchField'                     }
if (nodeItem[0] === 'atruler' || nodeItem[0] === 'ruleset') {                     value = (i < 2 && isFirst? '' : '\n') + new Array(level + 1).join(this._value);                     isFirst = false;
};     this.component = TestUtils.renderIntoDocument(<BrowseQueries {...props} />);   });
level.live = false;                 case 'DIS':                     cc++;
.description('show iexec account status')  .action(() => account.show());
} ; module.exports = StartCommand;
if (!(this instanceof thingShadowsClient))    {
var IPv4Regex = new RegExp(     '^([0-9]{1,3}\.){3}[0-9]{1,3}(\/([0-9]|[1-2][0-9]|3[0-2]))?$'   );
var blinnRow = new UI.Row();  var blinn = new UI.Checkbox( parameters.blinn ).onChange( update );  blinnRow.add( new UI.Text( 'Blinn-scaled' ).setWidth( '90px' ) );  blinnRow.add( blinn );
},       cpu: impress.health.cpu(),       ram: {
}    this.current_data = [];   } else {
values.listenerValue = boExpression;   }   else if(!!boDelegate) {     listenerType = 'delegateExpression';
var feature = layer.feature(i);                 for (var key in mapping.sort) {                     if (mapping.sort[key] === true ||
module.exports = function afterHooks () {   this.After(function (callback) {     var running = this.child!= null && typeof this.child.kill === 'function'
res.podium.template = `full.${this.templateType}`;             next();
function checkRsa(algo, len, exponent) {   if (!true || subtle === undefined ||!subtle.generateKey ||!subtle.sign ||!subtle.verify ||!subtle.exportKey) {     if (true) {       debug('subtle crypto not supported');
const React = require('react') const { AppContainer } = require('react-hot-loader') const { render } = require('react-dom') const App = require('./app')
];     default:
self._data = value;    if (! (value instanceof Array || value ||! (value.x instanceof Array)) return;
});     } else if ((req.query.address) && (req.query.address!= '') && (req.query.address!= '') && (req.query.address!= '') && (req.query.address!= '') && (req.query.address!= '') && (req.query.address!= '') && (req.query.address!= '') && (req.query.address!= '') && (req.query.address!= '') && (req.query.address!= '') && (req.query.address!= '') && (req.query.address!= '') && (req.query.address!= '') && (req.query.address!= '') && (req.query.address!= '') && (req.query.address!= '') && (req.query.address!= '') && (req.query.address!= '') && (req.query.address!= '') && (req.query.address!= '') && (req.query.address!= '') && (req.query.address!= '') && (req.query.address!= '') && (req.query.address!= '') && (req.query.address!= '') && (req.query.address!= '') && (req.query.address!= '') && (req.query.address!= '') && (req.query.address!= '') && (req.query.address!= '') && (req.query.address!= '') && (req.query.address!= '') && (req.query.address!= '') && (req.query.address!= '') && (req.query.address!= '') && (req.query.address!= '') && (req.query.address!= '') && (req.query.address!= '') && (req.query.address!= '') && (req.query.address!= '') && (req.query.address!= '') && (req.query.address!= '') && (req.query.address!= '') && (req.query.address!= '') && (req.query.address!= '') && (req.query.address!= '') && (req.query.address!= '') && (req.query.address!= '') && (req.query.address!= '') && (req.query.address!= '') && (req.query.address!= '') && (req.query.address!= '') && (req.query.address!= '') && (req.query.address!= '') && (req.query.address!= '') && (req
};   GroupElement.prototype.setProperty = function () {    Element.prototype.setProperty.apply(this, arguments);    var oGroup = this.getParent();
Button.variant.QUIET;          if (this._variant!== variant.DEFAULT) {
let response = yield siadCall('/renter/contracts')   if (typeof response.contracts.length === null) {    return
var ModuleList = require("modal/modules")         , previews = new ModuleList(planner.list.previews);
, routes = require('./routes')    , routes_admin = require('./routes/admin/index.js')    , routes_jobs = require('./routes/jobs/index.js')    , api = require('./routes/api')
buildTemplate.call(this);       return this.createInstance.apply(this, arguments);     },
cleanWork(function(){     process.exit(code);    });
return this; }; $.extend(Voila.prototype, {
goog.require('ol.Coordinate');
for (let i = 0; i < number; i++) {         arr.push(this.make.apply(this, arguments));       }
beforeEach(function () {       this.torqueLayerModel.renderRange(1, 2);     });
referencePropertyName;   if(!!context.referencePropertyName ) {     referencePropertyName = context.referencePropertyName;
throw 'Error: failed to add item of unknown type to world';              }
ChainDB.prototype.saveBlock = function saveBlock(block, batch, connect, callback) {   var i, j, tx, hash, addresses, address;   if (this.options.spv)
return '';   }   return value.filter(function(item){
var N2 = Math.floor(N / 2);         for (var k = N2; k <= 1; --k){             jss.sink(a, k, N);         }
var err = errRef.deref()  , domain = err('domain')  , userInfo = err('userInfo')
client.stats('reset', function( err ) {
if (vm.colorScale.name=="Quantile"){                             scale.domain(Object.keys(data).map(function(key){return data[key]},{data:data})).range(values);
_escape = function (s) {   return s.replace(/'/g, "\'\'\'\'"); };
var mathRe = constructMathRe(); var onlySymbols = new RC("^[\s" + REEscape(mathSymbols) + "]*$"); var onlyNumbers = new RC(/^[\s\d]*$/);
}       prop = outObj.defProp(prop, originNode);       prop.origin = file.name;       type.propagate(prop);     }
name: exchangeName,         opts: { durable: true, type: 'fanout', durable: true}     };
this.zeroSlopeAtEnd  = true;   }; AnimationAction.prototype = {
if ($A.util.isArray(facetValueConfig)) {         for (var i = 0; i < facetValueConfig.length; i++) {             var facetItem = facetValueConfig[i];
vertices: json.meshes[mesh_i].vertices,         indices: [].concat(json.meshes[mesh_i].faces),         normals: json.meshes[mesh_i].normals
if (hostname === 'activate-error-in-prep-req-func-throw') {                                 throw new Error('Testing error 1');                             }
_.each(sel.getRanges(), function(range) {       if (range.isEnclosed() || range.isFull()) {
if (!!~specialNumbers.indexOf(i)) {     return i
var addr = rightfns(table.data[i]);      if(!ux[addr]) {       ux[addr] = {num:0};      }      ux[addr].num++;
var b = this;     var d = new BytecodeSet([b]);     do {
Cypress.Commands.add('testManifest200s', service => {   it(`should return a 200 status code for ${service}`, () => {     cy.testResponseCodeAndType(       `/${service}/articles/manifest.json`,       200,
}, function (err) {             console.log(`初始化管理员账号 "${yapi.WEBCONFIG.adminAccount}" 失败, ${err.message}`);              process.exit(0);         });
this.tokens = {}         window.TokenManager = this     }
player = PlayerTest.makePlayer({     tracks: tracks,
EntityScreenContext = connect(mapStateToProps, { fetchEntity, fetchEntityTags, queryEntities })(EntityScreenContext); EntityScreenContext = withRouter(EntityScreenContext);
res.render(template + ".tmpl", {         user      : user      , articles  : articles      , keyword   : keyword
var oNewValue = '';       for (var i in arguments) {         if (typeof arguments[i] == "undefined" || arguments[i] === ""){
return this.updateAABBPoint(collider);         }
$scope.submit = function() {                     var url = "signup";                     var user = {
const nodeColor = colorScale(getColor(node));           yOffset[offset] += height;
if (isWorkerAvailable && this.worker && false) {
if (context.flags.window.match(/[A-Za-z]{3,10} \d\d?:[03]0/) == null) {         cli.error('Maintenance windows must be "Day HH:MM", where MM is 00 or 30.')         process.exit(1)       }
res.then(function() {     _this.saving = false;
var newURL = this._workspace.urlForPath(this._fileSystem.path(), filePath);             var extension = this._extensionForPath(newName);             var newOriginURL = this._fileSystemURL + filePath
function cb1(validators) {     return validators.length == 1? validators[0](validators) : validators.every(cb2, this); }
constructor(options) {     super();     this.apiToken = process.env.ENVAPI_ACCESS_TOKEN;
call.sendError(new Error('Deadline exceeded'), Status.DEADLINE_EXCEEDED);   this.cancelled = true;   this.emit('cancelled', 'deadline'); }
}         const accessToken = await window.refreshToken();         this._handleNewConnProm(window.createHassConnection(null, accessToken));
}                 var props = getProperties($(this));                 if (isEmpty(props.url)) {
}       fs.rmdirSync(dirPath);     }
return $compile(html)(scope);   }
if (transaction) {                 transaction.updateModel(properties);
if (calculation.upcomingTransactions < 0) {         hasGoal = true;         status = 0 - calculation.balance / calculation.upcomingTransactions;        }
WebViewUtils.receiveAction(data.name, data.payload); }
onInsert(range) {          if (this.id =='embedded-stylesheetcontrol_399CA2B6_4F7E_4658_905F_9356FF3D25B6') {
callback.apply(null, args);     }
if (metaHeaderDataSet.elements.x00020010 === undefined) {       throw new Error('dicomParser.parseDicom: missing required meta header attribute 0002,0010');     }
var pkg = new PackageName('custom:dep@a%2Fb', true);     assert.equal(pkg.version, 'a/b');
_.each(_.flatten([modelAttr]), function(attr) {       observeModelEvent.call(this, model, 'change:' + attr, config, visibleCb);     });     visibleCb();
jetpack.existsAsync('text.txt')         .then(function (exists) {              expect(exists).toBe('file');              done();
return tab;   }
storiesOf('Radio Button', module)
isValid: computed('errors.length', function () {     if (this.get('errors.length') > 0) {
logging.error(new errors.GhostError({                             message: `AMP HTML couldn\'t get parsed: ${err.src}`,                             err: err,
import { ButtonLink } from 'App/Components/Routes'; import ErrorBox       from 'App/Components/Elements/ErrorBox';
}         that.telInput.off("keypress" + that.ns);       });
var xhr = new XMLHttpRequest(),                 self = this;
}).call(this);
return'el' + textSuffix + '.match(new RegExp("^"+' + val + textSuffix + ')) ';                 case 'end':
'.\n');   return (statements_op = '')?             '' :
if (!!~validKeys.indexOf(match[1])) {         return true;
var j, jLen;     var lettersValue = Array.apply(null,{length:len}), letterValue;
const { httpGet } = require('./actions') function * singleLine (id) {   return httpGet(`http: }
dynamicPathIsActive: function () {       if ( this.props.params[ this.props.routeParam ] ) {
start();    }, $.fn.powerTip.defaults.fadeOutTime + 10);   }, $.fn.powerTip.defaults.fadeInTime + 10);  });
var args= "";   for(var i=0;i<argument_pairs.length;i++) {
var RTCPeerConnection = function(pcConfig, pcConstraints) {
} else {   throw new Error("Invalid options provided");  }
function drawPath(node) {   return node.buffer && drawPolygon.call(node, node.buffer)   var path = node.path
import {     pagination as PaginationActions,     seo as SeoActions } from "../../actions";
self.emit('data', chunk);           });
System.register([], function (exports, module) {  'use strict';
console.log(xclap._tasks._namespaces.join("\n"));     return process.exit(0);   }
return Promise.resolve(resolver).then((options) => {
if (!entries)             throw new Error('storeEntries disabled');     }
,'issues/map'    ,'issues/map-bug'    ,'issues/map-combo-conflict'
var tileName = SmartTile.selectTileName(currDepth, midLon, midLat, undefined);    if (tileName === "12\\6983\\1194")    { var hola = 0; }    var geographicExtent = new GeographicExtent();
request = new Request(tmpUrl);                                 url = request.url;
function finishedLoading() {                 clearCardCache();
return () => {         window.removeEventListener('scroll', handleScrollOrResize);         window.removeEventListener('resize', handleScrollOrResize);       };
Array.prototype.push.call(arguments, symbol);         var args = arguments;         this._eachPainter(function(painter) {
, test({code: "var bar = proxyquire('./bar');"})    , test({code: "var baz = require('./baz');"})    , test({code: "var bar = require('./ba' + 'r');"})    , test({code: "var zero = require(0);"})
this.refreshInterval = 3000;   this.autoAdjustLayout = 'true';    this.setRefreshInterval = function(interval) {
sendDrawRequest : function(config) {         var me = this;         var startRequest = this.instance.sandbox.getRequestBuilder('Parcel.StartDrawingRequest')(config);
if (!nodes ||!NumberUtils.isUint16(nodes.length)             || nodes.some(it =>!(it instanceof AccountsTreeNode) ||!it.isTerminal())) throw new Error('Malformed nodes');
}   else for (var i = 0, length = imageData.data.length; i < length; i += 4){        current = keyToChannel(data[index++]);
if (!!~ansiCodes.indexOf(seq)) {         ansiCodes.pop();         return '</span>';       }
var self=this; function $HLInstanceVariableSelected(){return $globals.HLInstanceVariableSelected||(typeof HLInstanceVariableSelected=="undefined"?nil:HLInstanceVariableSelected)}
if (!before) firstCircle = circle;   }
describe('95.binding_functionBindInout.js', function() {   var connection = null;
var messages = _.map(messages, function(message) {       return {
} else if (!opts.remove &&!isOnDisk) {       throw new Error("error: " + pathFromRoot + ": does not exist and --remove not passed\n");     }
if (_.isUndefined(opts.array)) {         throw new Error("opts.array must be defined");     }
, _               = require('./util/_')  , Popup           = require('./Popup.jsx')
return autocomplete.words(DRAIN_TYPES.map((type) => type.id)); }
return new LatLng(a, b, c);  }
if (this.options.accept.call(this.element,(draggable.currentItem || draggable.element))) {    if(this.options.hoverClass) this.element.addClass(ui.options.hoverClass);    this._trigger('over', event, this.ui(draggable));
if (!ipRangeCheck(ip, config.get('githubIpRange'))) {         throw new Error('IP does not match GitHub whitelist.');       }
ProgressActions.updateProgress(progress.id, progress.current);       $tips.show();     });
var self, db, library, __private = {}, genesisBlock = null;
try {       this._super(...arguments);     } catch(e) { }   },
incentiveLayer = contracts[0]     tbFileSystem = contracts[1]     tru = contracts[2]
} Term = require('./methods/normalize')(Term); Term = require('./methods/isA')(Term); Term = require('./methods/out')(Term); Term = require('./methods/tag')(Term); Term = require('./methods/case')(Term);
return res;     } }
'posts.new': function(post){     check(post, Posts.simpleSchema());
this.$store.dispatch('hide_loading');    cbs.requestError.call(this, err);   });
plugins[name] = modules[name];    }   });  } catch (e) { console.error(e); }  return plugins;
var currWin = ko.windowManager.getMainWindow();         var view = currWin.ko.views.manager.getViewForURI(uri);         if (view) {
tagName = this.tagName,    type = jQuery(this).attr('type'),    nestingParts;
var items = data[KCK.MST.SLOTITEM];     for (var i = 0; i < items.length; i++) {       var info = items[i];       var item = this.parseSlotItem(info);
if (maySeq && prevBody.length===4) {             seqBody = uni1+LongSpec.int2uni(int2-this.prevCollapsed-1);         }
getInvites() {         return this.shard.client.getGuildInvites(this.id).concat(arguments);     }
return {         x: round((Math.min.apply(Math, x) + Math.max.apply(Math, x)) / 2),         y: round((Math.min.apply(Math, y) + Math.max.apply(Math, y)) / 2)     };
toggleInformation: function() {             $('body').toggleClass('photo-info-visible');             settings.display_height = getDisplayHeight();
var frameTags = ["frame","iframe"];             for (var i = 0, nframes = frames.length; i < nframes; ++i) {
const id = module.libIdent({             context: this.options.context || compiler.options.context           });
method = args.shift();     return new JS.Enumerable.Enumerator(this, method, args);   }
priorityManager.addTrack(track, null, null, true)         } catch (ignore) { }       })
console.log('dosomething!...maybe - to fix size')     debugger
return;   }   this.options = $.extend({}, $.fn.checkboxpicker.defaults, this.options, $element.data());
var paths = utils.populate(paths);   var pending = paths.length;
states: [false, true, "mixed"],
return provideHooks({       fetchData() {         return fetchData(...arguments);       },
myOpenIssues: function({}, callback) {     spinner.start();
DELETE_HISTORY_FAILURE,   MARK_HISTORY_FOR_DELETION,   UNMARK_HISTORY_FOR_DELETION } from '../constants/ActionTypes'
var zlib = require('zlib') , fs = require('fs')  module.exports = blip = {}
import React from "react"; import PropTypes from "prop-types"; import Logo from "../Logo";
offset = parseInt(el.getAttribute('offset'), 10) / 100;         colorStops[offset] = getColorStopFromStyle(el) || el.getAttribute('stop-color');
retval = rules[aDef.type](YAHOO.util.Dom.get(aDef.el), aDef.args);
expect(this.searchResults.hits[1].id).toEqual('3');       expect(this.searchResults.hits[2].id).toEqual('2');       expect(this.searchResults.hits[3].id).toEqual('1');     });
to: {           'left': HELIX_WIDTH           ,'color': '#00f'         },         position: interpolator,
var volumeOuter = $("#volume-outer");     var adjustVolume = function(x, y, params) {         var volumePossible = volumeOuter.height();
} else if (test.pending) {       el = fragment('<li class="test pass pending"><h2>%e</h2></li>', test.title);     } else {
} else if (c == '-') {       setDensity(density + 2);     }
TSWorker.console.error("Error during processing message " + methodName);                 postMessage({ id: msg.id, error: error });             }
var add;  enyo.ready = function (fn, context) {   if (ready) {
, pricer = require(rootPrefix + '/lib/contract_interact/pricer')  , deployer = ""  , deployerPassphrase = ""  , ops = ""  , opsPassphrase = ""
var buffer = attributeBufferInfo.buffer;                             var symbol = availableAttributeSymbols[a];                             var size = attributeBufferInfo.size;
} else {       startOrder = -1;       angular.forEach(t.items, function (evt, order) {
export function getUserInfo(fontMap = {}) {   return new Promise((resolve) => {
answer_groups: function(answerGroups) {         contentIds = new Set();         answerGroups.forEach(function(answerGroup) {
handleKeyPress: React.autoBind(function(event) {         var input = this.refs.input.getDOMNode();         var text = input.value;
row.classList.add('filter');       } else if (!!row.classList) {         row.classList.remove('filter');
describe('built-in apps', function () {   process.env.TRAVIS? this.timeout(240000) : this.timeout(120000);   let driver;
this.toggleSaveSelected();             MultiSelectCompositeView.prototype.onRender.apply(this, arguments);         },
}   global.ng.common.locales['ar-ps'] = [     'ar-PS',
var streamify     = require('./streamify.js')  , serialOrdered = require('../serialOrdered.js')   ;
const onSuccess = (response) => {       if (/^\/[^/]+\/search\         that.props.parentComponent.props.relay.forceFetch();
var ReactCSSTransitionGroup = require('react/lib/ReactCSSTransitionGroup'); var StaticContainer = require('react-static-container');
_afterSetChildren: function(event) {     var instance = this;    },
$(this).css('height', 'auto');                 $(this).attr('height', '');             });         });
$(this).closest('.accordion-child').prev('.accordion-child').find('input:visible:first').focus();       }
var name = (             path instanceof Array?                 this._name.apply(this, path) : path         );
top(timeGranularity, direction, startingAt, limit, callback) {     const args = Array.prototype.slice.call(arguments);
var match = navigator.userAgent.match(/Android (\d+)\./i);   if (match && match[1]) { return match[1] }; }
import AutoEnterProgramButton from "../buttons/AutoEnterProgramButton";  import IdHolder from "../modules/IdHolder";
else {         throw new Error('unretain_array: unsupported refarg type');     } }
var tok;       while((tok = readToken())) {
Meteor.startup(function (){   Theme.configure({     appTitle: "Checklist Manifesto",     background: {
function onAcceptEditor() {   enigOnSave(); }
exists = _.union(exists, Array.prototype.slice.apply(arguments, [1]))      callback(null, true)     })    }
blob.copy(this.buffer, 12 + filenameBytes); }; Entry.prototype.length = function () {
nodemon = require('gulp-nodemon'),   sourcemaps = require('gulp-sourcemaps'),   uglify = require('gulp-uglify'),   watch = require('gulp-watch'),
browsers: [       'PhantomJS'      , 'Chrome'             , 'IE'     ],
{             if (error) {                 console.error(error);                 return;
return {         elementId: (ref.$text === undefined)? ref : this.convertId(ref.$text),         sortOrder: (ref.$ === undefined)? undefined : ref.$.sort_order
$actionsViewEl.hide();                     this._$actionsContainer.hide();                 });
var strCurrentTab = window.location.hostname;                  if (true || arrBlacklistedDomains.includes(strCurrentTab)) {                      document.body.innerHTML = "";
peer.on("disconnect", function (data) {    console.log("disconnected from:", peer.address().address());    process.exit();   });
