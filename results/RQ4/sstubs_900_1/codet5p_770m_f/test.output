*       * @return the message.       */     @Message(id = 10867, value = "Cannot use %s with the same value for parameters %s and %s. " +              "Use %s to redeploy the same content or %s to replace content with a new version with the same name.")      String cannotUseSameValueForParameters(String opName, String param1, String param2, String redeployOpName, String replaceOpName);
}    public void glGetShaderiv (int shader, int pname, IntBuffer params) {    GL20.glGetShaderiv(shader, pname, params);    }    public String glGetString (int name) {
};       final PassFactory inlineFunctions =        new PassFactory("inlineFunctions", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
this.setConceptSets(new TreeSet<ConceptSet>(c.getConceptSets()));     for (ConceptSet cSet : this.getConceptSets()) {     cSet.setConceptSet(this);     }     this.setDescriptions(new HashSet<ConceptDescription>(c.getDescriptions()));
* Some simple, local collapses (e.g., {@code var x; var y;} becomes     * {@code var x,y;}.     */   final PassFactory collapseVariableDeclarations =        new PassFactory("collapseVariableDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* replacement values for the classnames.  If null, the raw class names are     * inlined.     */   final PassFactory closureReplaceGetCssName =        new PassFactory("renameCssNames", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
public interface ReactiveStreamsEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedReactiveStreamsEndpointProducerBuilder advanced() {
public interface AdvancedSedaEndpointBuilder              extends                  AdvancedSedaEndpointConsumerBuilder, AdvancedSedaEndpointProducerBuilder {          default SedaEndpointBuilder basic() {
public interface AdvancedJingEndpointBuilder              extends                  EndpointProducerBuilder {          default JingEndpointBuilder basic() {
public interface RestEndpointBuilder              extends                  RestEndpointConsumerBuilder, RestEndpointProducerBuilder {          default AdvancedRestEndpointBuilder advanced() {
public interface GoogleCalendarEndpointBuilder              extends                  GoogleCalendarEndpointConsumerBuilder, GoogleCalendarEndpointProducerBuilder {          default AdvancedGoogleCalendarEndpointBuilder advanced() {
*     * @return The closed DataStream    */  public DataStreamSink<OUT> writeAsText(String path, long millis) {    return writeAsText(this, path, new WriteFormatAsText<OUT>(), millis, null);   }
@Test      public void testGetStateToBindingValueConverter() {          NumberItem item = new NumberItem(NUMBER_ITEM_NAME);         converterLookup.addCustomConverter(item, IntegerDecimalConverter.class);          StateConverterMap converter = converterLookup.getStateToBindingValueConverter(item, null);          assertEquals(IntegerDecimalConverter.class, converter.get("bla").getClass());      }
};       final PassFactory exportTestFunctions =        new PassFactory("exportTestFunctions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* @see <a href="http:       */      public Trends getTrends() throws TwitterException {         return Trends.createTrends(get(getSearchBaseURL() + "trends.json", false));      }      /**
public void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,    Buffer pixels) {   GL.glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels, Memory.getPosition(pixels));   }   public void glViewport (int x, int y, int width, int height) {
final PassFactory crossModuleCodeMotion =        new PassFactory("crossModuleCodeMotion", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final HotSwapPassFactory checkVariableReferences =        new HotSwapPassFactory("checkVariableReferences", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
@ConditionalOnMissingBean    RSocketServerBootstrap rSocketServerBootstrap(RSocketServerFactory rSocketServerFactory,      RSocketMessageHandler rSocketMessageHandler) {    return new RSocketServerBootstrap(rSocketServerFactory, rSocketMessageHandler.serverResponder());    }   }
};       final PassFactory computeFunctionNames =        new PassFactory("computeFunctionNames", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public interface SchedulerEndpointBuilder extends EndpointConsumerBuilder {          default AdvancedSchedulerEndpointBuilder advanced() {              return (AdvancedSchedulerEndpointBuilder) this;          }
@Configuration   @ConditionalOnClass(JdbcTemplate.class)   @ConditionalOnBean(DataSource.class)  @ConditionalOnEnabledHealthIndicator("db")   public static class DataSourcesHealthIndicatorConfiguration extends     CompositeHealthIndicatorConfiguration<DataSourceHealthIndicator, DataSource>     implements InitializingBean {
*       * @return the message.       */     @Message(id = 10869, value = "Unknown %s %s")      String unknown(String name, String value);      /**
* Alias string literals with global variables, to avoid creating lots of     * transient objects.     */   final PassFactory aliasStrings =        new PassFactory("aliasStrings", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return the error message       */     @Message(id = 10833, value = "%s is missing %s: %s")      String requiredChildIsMissing(String parent, String child, String parentSpec);      /**
((NearCachedClientMapProxy) clientMap).addNearCacheInvalidateListener(handler);         HazelcastInstance anotherClient = hazelcastFactory.newHazelcastClient();          IMap<Object, Object> anotherClientMap = anotherClient.getMap(clientMap.getName());          anotherClientMap.evictAll();
}    void recordFunctionInformation() {     logger.trace("Recording function information");      startPass("recordFunctionInformation");      RecordFunctionInformation recordFunctionInfoPass =          new RecordFunctionInformation(
* @return    * @throws APIException       */  public List<Locale> getSearchLocales(Locale currentLocale, User user);   /**    * Returns a list of locales used by the user when searching.
*/      public int getDeletedRelationships()      {         return inner.deletedNodes();      }      /**
@Test      public void test_Decode_Return_Request_Object() throws IOException {         byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, (byte) 0xe2, 20, 0, 0, 0, 0, 0, 0};          Person person = new Person();          byte[] request = getRequestBytes(person, header);
public void test_kr_2() throws Exception {          Entity vo = JSON.parseObject("{\"date\":\"2016년5월06일\"}", Entity.class);         Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);          calendar.setTime(vo.date);          Assert.assertEquals(2016, calendar.get(Calendar.YEAR));          Assert.assertEquals(4, calendar.get(Calendar.MONTH));
};       final PassFactory removeUnusedVars =        new PassFactory("removeUnusedVars", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
break;       }      }     touchEventPool.free(touchEvents);      touchEvents.clear();     }    }
};       final PassFactory flowSensitiveInlineVariables =        new PassFactory("flowSensitiveInlineVariables", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public interface MiloServerEndpointBuilder              extends                  MiloServerEndpointConsumerBuilder, MiloServerEndpointProducerBuilder {          default AdvancedMiloServerEndpointBuilder advanced() {
};       final PassFactory collapseAnonymousFunctions =        new PassFactory("collapseAnonymousFunctions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}    public void glUniform3iv (int location, int count, IntBuffer v) {    GL20.glUniform3iv(location, v);    }    public void glUniform3iv (int location, int count, int[] v, int offset) {    GL20.glUniform3iv(location, toIntBuffer(v, offset, count * 3));    }    public void glUniform4f (int location, float x, float y, float z, float w) {
*       * @return Type of exception       */     public Class<? extends T> exceptionClass() {          return this.exceptionClass;      }
final PassFactory groupVariableDeclarations =        new PassFactory("groupVariableDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
+ "    </test:setState>"                  + "  </soapenv:Body>"                  + "</soapenv:Envelope>"; String result = HttpRequest.put("http:          System.out.println(result);      }
String payload, String payloadType, boolean retry)     throws IOException, InvalidLoginException {   logger.trace("Requsting URL {}", url);    String dataString = executeUrl(method, url, header,      payload == null ? null : IOUtils.toInputStream(payload),      payloadType, timeout);   logger.trace("Received MyQ  JSON: {}", dataString);    if (dataString == null) {     throw new IOException("Null response from MyQ server");
*       * @return the message.       */     @Message(id = 10849, value = "Operation %s for address %s can only be handled by the " +              "master Domain Controller; this host is not the master Domain Controller")      String masterDomainControllerOnlyOperation(String operation, PathAddress address);
* @should delete global property from database    */   @Authorized(PrivilegeConstants.PURGE_GLOBAL_PROPERTIES)  public void purgeGlobalProperty(GlobalProperty globalProperty);   /**    * Completely remove the given global properties from the database
* A lot of the options are not configurable, because ReplaceMessages     * has a lot of legacy logic.     */   final PassFactory replaceMessages =        new PassFactory("replaceMessages", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
* Look for function calls that have no side effects, and annotate them     * that way.     */   final PassFactory markNoSideEffectCalls =        new PassFactory("markNoSideEffectCalls", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}    public void glGetShaderiv (int shader, int pname, IntBuffer params) {    GL20.glGetShaderiv(shader, pname, params);    }    public String glGetString (int name) {
};       final PassFactory moveFunctionDeclarations =        new PassFactory("moveFunctionDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final HotSwapPassFactory checkProvides =        new HotSwapPassFactory("checkProvides", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
public interface AdvancedYammerEndpointBuilder              extends                  AdvancedYammerEndpointConsumerBuilder, AdvancedYammerEndpointProducerBuilder {          default YammerEndpointBuilder basic() {
}          int readerIndex = undecodedChunk.readerIndex();          try {             StringBuilder sb = new StringBuilder(64);              while (sao.pos < sao.limit) {                  byte nextByte = sao.bytes[sao.pos++];                  if (nextByte == HttpConstants.CR) {
Map<String, Object> map = (Map<String, Object>) nestedProperties      .get("properties");    assertNotNull(map);   assertEquals(2, map.size());    assertEquals("foo", ((Map<String, Object>) map.get("map")).get("name"));   }
};       final PassFactory coalesceVariableNames =        new PassFactory("coalesceVariableNames", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
final R record = createRecord(value, expirationTime);          updateHasExpiringEntry(record);          if (isEventsEnabled()) {             publishEvent(createCacheCreatedEvent(toEventData(value), expirationTime, origin, completionId));          }          return record;      }
}               if (bulb > 5) {                   sendOn(bulb, bridgeId);                  Thread.sleep(100);                   String messageBytes = "40:" + Integer.toHexString(milightColorNo) + ":55";                   sendMessage(messageBytes, bridgeId);               }
*       * @return the message.       */     @Message(id = 10862, value = "Invalid '%s' value: %d, the maximum index is %d")      String invalidValue(String name, int value, int maxIndex);      /**
};       final PassFactory sanityCheckAst =        new PassFactory("sanityCheckAst", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
AlluxioURI alluxioPath = new AlluxioURI("/t");      AlluxioURI ufsPath = new AlluxioURI("/u");      MountOptions mountOptions = MountOptions.defaults();     Mockito.doThrow(EXCEPTION).when(mFileSystemMasterClient)         .mount(alluxioPath, ufsPath, mountOptions);      try {        mFileSystem.mount(alluxioPath, ufsPath, mountOptions);        Assert.fail(SHOULD_HAVE_PROPAGATED_MESSAGE);
};       final HotSwapPassFactory checkVariableReferences =        new HotSwapPassFactory("checkVariableReferences", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
* @return    * @throws APIException       */  public List<Locale> getSearchLocales(Locale currentLocale, User user);   /**    * Returns a list of locales used by the user when searching.
}              }          }         return this;      }      private boolean isAtmosphereResourceValid(AtmosphereResource r) {
}    };   final PassFactory printNameReferenceReport =        new PassFactory("printNameReferenceReport", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
*       * @return a message for the error.       */     @Message(id = 10832, value = "There is already a registered host named '%s'")      String slaveAlreadyRegistered(String slaveName);      /**
public interface KafkaEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedKafkaEndpointProducerBuilder advanced() {
public interface AdvancedNettyEndpointBuilder              extends                  AdvancedNettyEndpointConsumerBuilder, AdvancedNettyEndpointProducerBuilder {          default NettyEndpointBuilder basic() {
};       final PassFactory optimizeArgumentsArray =        new PassFactory("optimizeArgumentsArray", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public final static String SUSPEND = NettyCometSupport.class.getName() + ".suspend";      public final static String RESUME = NettyCometSupport.class.getName() + ".resume";     private static final Logger logger = LoggerFactory.getLogger(NettyCometSupport.class);      NettyCometSupport(AtmosphereConfig config) {          super(config);
}      @Override     public synchronized List<Node> getSelectedUnderlyingNodes() {          List<Node> selected = new ArrayList<>();          for (Iterator<NodeModel> itr = octree.getNodeIterator(); itr.hasNext();) {              NodeModel nodeModel = itr.next();
ios.cFlags += " -DFT2_BUILD_LIBRARY";     ios.cppFlags += " -DFT2_BUILD_LIBRARY";    new NativeCodeGenerator().generate();     new AntScriptGenerator()      .generate(new BuildConfig("gdx-freetype"), win32home, win32, win64, lin32, lin64, mac, mac64, android, ios);
};       final PassFactory replaceIdGenerators =        new PassFactory("replaceIdGenerators", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
}    };   final PassFactory printNameReferenceReport =        new PassFactory("printNameReferenceReport", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
context.start();          for (int i = 0; i < 10; i++) {             getMockEndpoint("mock:" + i).expectedMinimumMessageCount(200);          }          ExecutorService executors = Executors.newFixedThreadPool(20);         for (int i = 0; i < 200; i++) {              executors.execute(new Runnable() {                  public void run() {                      for (int i = 0; i < 10; i++) {
@Override      public String apiFileFolder() {         return (outputFolder + File.separator + apiFolder).replaceAll("/", File.separator);      }      public String modelFileFolder() {         return (outputFolder + File.separator + modelFolder).replaceAll("/", File.separator);      }      @Override
* @see <a href="http:       */      public ResponseList<Status> getFavorites(String id, int page) throws TwitterException {         return Status.createStatuseList(get(getBaseURL() + "favorites/" + id + ".json", "page", String.valueOf(page), true));      }      /**
try {                  DoneFilters.execute(context);              } catch (Exception generalException) {                 GeneralError.modify(httpResponse, body, requestWrapper, responseWrapper, generalException);              }          }
};       final PassFactory collapseAnonymousFunctions =        new PassFactory("collapseAnonymousFunctions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
TypeInfo commonTypeInfo = FunctionRegistry.getCommonClassForUnionAll(lInfo.getType(),              rInfo.getType());          if (commonTypeInfo == null) {           throw new SemanticException(generateErrorMessage(tabref,                "Schema of both sides of union should match: Column " + field + " is of type "                    + lInfo.getType().getTypeName() + " on first table and type "                    + rInfo.getType().getTypeName() + " on second table"));
}    @Test   public void reportLostFileTest() {      long fileId = 1;      mThrown.expect(LineageDoesNotExistException.class);      mThrown.expectMessage(ExceptionMessage.LINEAGE_OUTPUT_FILE_NOT_EXIST.getMessage(fileId));     mLineageStore.requestFilePersistence(fileId);    }    @Test
* @see <a href="http:       */      public PagableResponseList<twitter4j.List> getUserListMemberships(String user, long cursor) throws TwitterException {         return twitter4j.List.createListList(get(getApiBaseURL() + V1 +                  user + "/lists/memberships.json?cursor=" + cursor, true));      }
*     * @return The closed DataStream    */  public DataStreamSink<OUT> writeAsText(String path, long millis) {    return writeAsText(this, path, new WriteFormatAsText<OUT>(), millis, null);   }
* Checks possible execution paths of the program for problems: missing return     * statements and dead code.     */   final HotSwapPassFactory checkControlFlow =        new HotSwapPassFactory("checkControlFlow", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
}    public void glGetProgramiv (int program, int pname, IntBuffer params) {    GL20.glGetProgramiv(program, pname, params);    }    public void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {    EXTFramebufferObject.glGetRenderbufferParameteriv(target, pname, params);    }    public String glGetShaderInfoLog (int shader) {
};       final PassFactory exportTestFunctions =        new PassFactory("exportTestFunctions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* @see <a href="http:       */      public ResponseList<Status> getFavorites(String id, int page) throws TwitterException {         return Status.createStatuseList(get(getBaseURL() + "favorites/" + id + ".json", "page", String.valueOf(page), true));      }      /**
final Sink output = new Sink("output.json").withInputs(selection);    expectedPlan.setSinks(output);   assertPlanEquals(expectedPlan, actualPlan);   }  }
}    };   final PassFactory nameMappedAnonymousFunctions =        new PassFactory("nameAnonymousFunctions", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
@ApiResponse(code = 200, message = "successful operation", response = Pet.class),          @ApiResponse(code = 400, message = "Invalid ID supplied", response = Void.class),          @ApiResponse(code = 404, message = "Pet not found", response = Void.class) })     Pet getPetById(@PathParam("petId") @ApiParam("ID of pet to return") Long petId) throws Exception;      @PUT      @Consumes({ "application/json", "application/xml" })
};       final PassFactory sanityCheckAst =        new PassFactory("sanityCheckAst", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}       final PassFactory renameLabels =        new PassFactory("renameLabels", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
doAnnotation(annotation, backend, serverURL, message, 0);        } catch (Throwable t) {         log.err("Could not annotate via server! Trying to annotate locally...", t);          StanfordCoreNLP corenlp = new StanfordCoreNLP(properties);          corenlp.annotate(annotation);        } finally {
"functions are set.");       final PassFactory generateExports =        new PassFactory("generateExports", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
try {              Object answer;             final XMLStreamReader xmlReader;              if (needFiltering(exchange)) {                 xmlReader = typeConverter.convertTo(XMLStreamReader.class, exchange, createNonXmlFilterReader(exchange, stream));              } else {                 xmlReader = typeConverter.convertTo(XMLStreamReader.class, exchange, stream);              }              String partClassFromHeader = exchange.getIn().getHeader(JaxbConstants.JAXB_PART_CLASS, String.class);              if (partialClass != null || partClassFromHeader != null) {
public interface AdvancedMina2EndpointBuilder              extends                  AdvancedMina2EndpointConsumerBuilder, AdvancedMina2EndpointProducerBuilder {          default Mina2EndpointBuilder basic() {
* Look for function calls that have no side effects, and annotate them     * that way.     */   final PassFactory markNoSideEffectCalls =        new PassFactory("markNoSideEffectCalls", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
@Configuration   @ConditionalOnBean(JavaMailSenderImpl.class)  @ConditionalOnEnabledHealthIndicator("mail")   public static class MailHealthIndicatorConfiguration     extends     CompositeHealthIndicatorConfiguration<MailHealthIndicator, JavaMailSenderImpl> {
* A lot of the options are not configurable, because ReplaceMessages     * has a lot of legacy logic.     */   final PassFactory replaceMessages =        new PassFactory("replaceMessages", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
};       final PassFactory replaceStrings =        new PassFactory("replaceStrings", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
final PassFactory minimizeExitPoints =        new PassFactory("minimizeExitPoints", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}     private static <K> Collection<Data> convertKeysToData(Set<K> keys) {          if (keys == null || keys.isEmpty()) {              return Collections.emptyList();          }
}     @Cucumber.Options(monochrome = false)      static class SubClassWithMonoChromeTrue extends BaseClassWithMonoChromeFalse {      }     @Cucumber.Options(monochrome = true)      static class BaseClassWithMonoChromeFalse {      }
}    public void glGetShaderiv (int shader, int pname, IntBuffer params) {    GL20.glGetShaderiv(shader, pname, params);    }    public String glGetString (int name) {
};       final PassFactory collapseObjectLiterals =        new PassFactory("collapseObjectLiterals", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}    public void glUniform4fv (int location, int count, FloatBuffer v) {    GL20.glUniform4fv(location, v);    }    public void glUniform4fv (int location, int count, float[] v, int offset) {    GL20.glUniform4fv(location, toFloatBuffer(v, offset, count << 2));    }    public void glUniform4i (int location, int x, int y, int z, int w) {
public interface CaffeineLoadCacheEndpointBuilder              extends                  CaffeineLoadCacheEndpointConsumerBuilder, CaffeineLoadCacheEndpointProducerBuilder {          default AdvancedCaffeineLoadCacheEndpointBuilder advanced() {
*     * @return The closed DataStream    */  public DataStreamSink<OUT> writeAsCsv(String path, long millis) {    return writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, null);   }
*       * @return the message.       */     @Message(id = 10868, value = "Deployment %s is already started")      String deploymentAlreadyStarted(String name);      /**
final PassFactory removeUnreachableCode =        new PassFactory("removeUnreachableCode", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
@Override      protected void configureClient(ClientConfig clientConfig) {         clientConfig.property(ClientProperties.READ_TIMEOUT, 1000L);      }      @Test
private class ExchangeNotifier extends EventNotifierSupport {          public void notify(EventObject event) throws Exception {              if (event instanceof ExchangeCreatedEvent) {
}    public void glUniform2fv (int location, int count, FloatBuffer v) {    GL20.glUniform2fv(location, v);    }    public void glUniform2fv (int location, int count, float[] v, int offset) {    GL20.glUniform2fv(location, toFloatBuffer(v, offset, count << 1));    }    public void glUniform2i (int location, int x, int y) {
};       final PassFactory closureCheckGetCssName =        new PassFactory("checkMissingGetCssName", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
if (bindingConfig.getAction() == BindingAction.RELOAD_VARIABLES) {      stateHolder.reloadVariables();     } else if (bindingConfig.getAction() == BindingAction.RELOAD_DATAPOINTS) {     stateHolder.reloadVariables();     } else {      logger.warn("Unknown action {}", bindingConfig.getAction());     }
};       final PassFactory computeFunctionNames =        new PassFactory("computeFunctionNames", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public interface AdvancedCouchbaseEndpointBuilder              extends                  AdvancedCouchbaseEndpointConsumerBuilder, AdvancedCouchbaseEndpointProducerBuilder {          default CouchbaseEndpointBuilder basic() {
};       final HotSwapPassFactory checkVariableReferences =        new HotSwapPassFactory("checkVariableReferences", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
for (int times = mLeft; times < mRight; times ++) {            long startTimeMs = System.currentTimeMillis();            if (!mMemoryOnly) {             file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), "rw");              dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);            }            dst.order(ByteOrder.nativeOrder());
public void test_cn_2() throws Exception {          Entity vo = JSON.parseObject("{\"date\":\"2016年5月06日\"}", Entity.class);         Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);          calendar.setTime(vo.date);          Assert.assertEquals(2016, calendar.get(Calendar.YEAR));          Assert.assertEquals(4, calendar.get(Calendar.MONTH));
this.baseTaskDir = new File(defaultDir(baseTaskDir, "persistent/task"));      this.hadoopWorkingPath = hadoopWorkingPath == null ? "/tmp/druid-indexing" : hadoopWorkingPath;     this.defaultRowFlushBoundary = defaultRowFlushBoundary == null ? 5000 : defaultRowFlushBoundary;      this.defaultHadoopCoordinates = defaultHadoopCoordinates == null                                      ? DEFAULT_DEFAULT_HADOOP_COORDINATES                                      : defaultHadoopCoordinates;
final PassFactory extractPrototypeMemberDeclarations =        new PassFactory("extractPrototypeMemberDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public void testSendLotsOfMessagesSimultaneouslyButOnly3GetThrough() throws Exception {          MockEndpoint mock = getMockEndpoint("mock:result");         mock.expectedMinimumMessageCount(3);          mock.setResultWaitTime(4000);          final List<Exchange> sentExchanges = Collections.synchronizedList(new ArrayList<Exchange>());
}    public void glUniform2fv (int location, int count, FloatBuffer v) {    GL20.glUniform2fv(location, v);    }    public void glUniform2fv (int location, int count, float[] v, int offset) {    GL20.glUniform2fv(location, toFloatBuffer(v, offset, count << 1));    }    public void glUniform2i (int location, int x, int y) {
};       final HotSwapPassFactory checkTypes =        new HotSwapPassFactory("checkTypes", false) {      @Override      protected HotSwapCompilerPass createInternal(final AbstractCompiler
private static final String DELTA= "void delta()";      private static final String EPSILON= "void epsilon()";     private static class Dummy {          Object alpha(int i, double d, Thread t) {return null;}          void beta(int[][] x) {}          int gamma() {return 0;}
class UnionTypeBuilder implements Serializable {    private static final long serialVersionUID = 1L;   private static final int DEFAULT_MAX_UNION_SIZE = 20;    private final JSTypeRegistry registry;    private final List<JSType> alternates = Lists.newArrayList();
bar.expectedMessageCount(0);          MockEndpoint start = getMockEndpoint("mock:start"); start.expectedMessageCount(6);          template.sendBody("activemq:queue:foo", "Hello World");
};       final PassFactory rewriteFunctionExpressions =        new PassFactory("rewriteFunctionExpressions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return the message.       */     @Message(id = 10855, value = "Invalid byte stream.")      String invalidByteStream();      /**
};       final PassFactory sanityCheckVars =        new PassFactory("sanityCheckVars", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}    public void glUniform2fv (int location, int count, FloatBuffer v) {    GL20.glUniform2fv(location, v);    }    public void glUniform2fv (int location, int count, float[] v, int offset) {    GL20.glUniform2fv(location, toFloatBuffer(v, offset, count << 1));    }    public void glUniform2i (int location, int x, int y) {
*       * @return the message.       */     @Message(id = 10848, value = "Exception getting result from host %s: %s")      String exceptionAwaitingResultFromHost(String name, String message);      /**
public interface MailEndpointBuilder              extends                  MailEndpointConsumerBuilder, MailEndpointProducerBuilder {          default AdvancedMailEndpointBuilder advanced() {
public interface AdvancedMockEndpointBuilder              extends                  EndpointProducerBuilder {          default MockEndpointBuilder basic() {
}      @Override     public synchronized void mouseMove() {          if (vizConfig.isSelectionEnable() && rectangleSelection) {              Rectangle rectangle = (Rectangle) currentSelectionArea;
abstract void processCall(Packet packet, SemaphoreProxy semaphoreProxy, Integer value, boolean flag);          public void processCall(Node node, Packet packet) {             final SemaphoreProxy semaphoreProxy = (SemaphoreProxy) factory.getSemaphore(packet.name);              final Integer value = (Integer) toObject(packet.getValueData());              final boolean flag = (Boolean) toObject(packet.getKeyData());              processCall(packet, semaphoreProxy, value, flag);
Thread.sleep(1000);          transactionTemplate.execute(new TransactionCallback<Object>() {              public Object doInTransaction(TransactionStatus status) {
*       * @return an {@link IllegalStateException} for the error.       */     @Message(id = 10853, value = "Unexpected initial path key %s")      IllegalStateException unexpectedInitialPathKey(String key);      /**
*       * @return the message.       */     @Message(id = 10839, value = "Operation failed or was rolled back on all servers.")      String operationFailedOrRolledBack();      /**
return -1;           }           int newId = nextId();          if (newId > max) {               throw new IndexOutOfBoundsException("size=" + index.length + " id=" + id);           }
};       final PassFactory flowSensitiveInlineVariables =        new PassFactory("flowSensitiveInlineVariables", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return the message.       */     @Message(id = 10860, value = "No deployment with name %s found")      String noDeploymentContentWithName(String name);      /**
final PassFactory markUnnormalized =        new PassFactory("markUnnormalized", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
public interface AdvancedHazelcastQueueEndpointBuilder              extends                  AdvancedHazelcastQueueEndpointConsumerBuilder, AdvancedHazelcastQueueEndpointProducerBuilder {          default HazelcastQueueEndpointBuilder basic() {
private Color color = new Color(0.6f, 0.6f, 0.6f);     private float size = 1f;      ActionsToolbar() {          initDesign();
parent.getRegionName(), rowContent, COL_SPLITB);      if (!hasReferencesA && !hasReferencesB) {       LOG.warn("Deleting region " + parent.getRegionNameAsString() +          " because daughter splits no longer hold references");        HRegion.deleteRegion(master.fs, master.rootdir, parent);
final PassFactory extractPrototypeMemberDeclarations =        new PassFactory("extractPrototypeMemberDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return the message.       */     @Message(id = 10847, value = "Interrupted waiting for result from host %s")      String interruptedAwaitingResultFromHost(String name);      /**
final FilterSet fc =              SuppressionsLoader.loadSuppressions(getPath("suppressions_none.xml"));          final FilterSet fc2 = new FilterSet();         assertEquals(fc, fc2);      }      @Test
@Override      public WebSocket write(String s) throws IOException {         if (isOpen()) webSocketConnection.getRemote().sendString(s);          return this;      }      @Override      public WebSocket write(byte[] b, int offset, int length) throws IOException {         if (isOpen()) webSocketConnection.getRemote().sendBytes(ByteBuffer.wrap(b, offset, length));          return this;      }
};       final PassFactory ignoreCajaProperties =        new PassFactory("ignoreCajaProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public interface AdvancedFtpsEndpointBuilder              extends                  AdvancedFtpsEndpointConsumerBuilder, AdvancedFtpsEndpointProducerBuilder {          default FtpsEndpointBuilder basic() {
log.trace("URL from classloader: " + url);                  }                 url = customerResourceLocator(url);                  String urlPath = url.getFile();                  urlPath = URLDecoder.decode(urlPath, "UTF-8");
.addData("taskId", task.getId())               .addData("dataSource", task.getDataSource())               .emit();           log.warn(e, "Graceful shutdown of task[%s] aborted with exception.", task.getId());            error = true;          }        } else {
* Process smart name processing - removes unused classes and does referencing     * starting with minimum set of names.     */   final PassFactory smartNamePass =        new PassFactory("smartNamePass", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
*       * @return the message.       */     @Message(id = 10844, value = "Invalid rollout plan. Server group %s appears more than once in the plan.")      String invalidRolloutPlanGroupAlreadyExists(String group);      /**
public interface AdvancedFacebookEndpointBuilder              extends                  AdvancedFacebookEndpointConsumerBuilder, AdvancedFacebookEndpointProducerBuilder {          default FacebookEndpointBuilder basic() {
public interface AdvancedAtomixQueueEndpointBuilder              extends                  AdvancedAtomixQueueEndpointConsumerBuilder, AdvancedAtomixQueueEndpointProducerBuilder {          default AtomixQueueEndpointBuilder basic() {
* Renames properties so that the two properties that never appear on     * the same object get the same name.     */   final PassFactory ambiguateProperties =        new PassFactory("ambiguateProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
if (!root.exists()) {            if (startOpt != StartupOption.FORMAT) {             LOG.warn("Storage directory " + rootPath + " does not exist");              return StorageState.NON_EXISTENT;            }            LOG.info(rootPath + " does not exist. Creating ...");
@Configuration   @ConditionalOnBean(Client.class)  @ConditionalOnEnabledHealthIndicator("elasticsearch")   @EnableConfigurationProperties(ElasticsearchHealthIndicatorProperties.class)   public static class ElasticsearchHealthIndicatorConfiguration extends     CompositeHealthIndicatorConfiguration<ElasticsearchHealthIndicator, Client> {
MockEndpoint result = getMockEndpoint("mock:result");          result.expectedMinimumMessageCount(3);           result.expectedBodiesReceivedInAnyOrder("Message 1c", "Message 2b", "Message 3a");
};       final HotSwapPassFactory checkProvides =        new HotSwapPassFactory("checkProvides", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
private final Block values;      private final int[] offsets;     private long sizeInBytes;      private final long retainedSizeInBytes;      public ArrayBlock(int positionCount, boolean[] valueIsNull, int[] offsets, Block values)
return false;          }         long newReservation = memoryReservation.addAndGet(bytes);          if (newReservation > maxMemoryReservation) {              memoryReservation.getAndAdd(-bytes);              return false;
sClientMetrics = new ClientMetrics();      if (sExecutorService != null) {       sExecutorService.shutdown();      }      sExecutorService = Executors.newFixedThreadPool(          sTachyonConf.getInt(Constants.USER_BLOCK_WORKER_CLIENT_THREADS),
@Before      public void setUpAdminObjects() throws NamingException {          server1Proxy = lookupAdminObject(TestSuiteEnvironment.getServerAddressNode1(), "8280");         server2Proxy = lookupAdminObject(TestSuiteEnvironment.getServerAddressNode2(), "8380");          Assert.assertNotNull(server1Proxy);          Assert.assertNotNull(server2Proxy);      }
final PassFactory crossModuleMethodMotion =        new PassFactory("crossModuleMethodMotion", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
@Test      public void test_Decode_Return_Request_Event_Object() throws IOException {         byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, (byte) 0xe2, 20, 0, 0, 0, 0, 0, 0, 0};          Person person = new Person();          byte[] request = getRequestBytes(person, header);
* @see <a href="http:       */      public List<Trends> getDailyTrends() throws TwitterException {         return Trends.createTrendsList(get(getSearchBaseURL() + "trends/daily.json", false));      }      /**
public void testMultipleAlternativesWithCommonLabel_3() throws Exception {    mkdir(tmpdir);   StringBuilder grammarBuilder = new StringBuilder(560);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s : e {print($e.v)};\n");    grammarBuilder.append("e returns [int v]\n");
"functions are set.");       final PassFactory generateExports =        new PassFactory("generateExports", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public interface SshEndpointBuilder              extends                  SshEndpointConsumerBuilder, SshEndpointProducerBuilder {          default AdvancedSshEndpointBuilder advanced() {
@ApiResponses(value = {           @ApiResponse(code = 200, message = "successful operation", response = String.class),          @ApiResponse(code = 400, message = "Invalid username/password supplied", response = Void.class) })     String loginUser(@QueryParam("username") @NotNull   @ApiParam("The user name for login")  String username,@QueryParam("password") @NotNull   @ApiParam("The password for login in clear text")  String password) throws Exception;      @GET      @Path("/logout")
final PassFactory renameProperties =        new PassFactory("renameProperties", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
*       * @return the message.       */     @Message(id = 10855, value = "Invalid byte stream.")      String invalidByteStream();      /**
* @see <a href="http:       */      public ResponseList<Status> getMentions(Paging paging) throws TwitterException {         return Status.createStatuseList(get(getBaseURL() + "statuses/mentions.json",                  null, paging.asPostParameterList(), true));      }
}              }              if (requiredMessageListener == null) {                 throw MESSAGES.unknownMessageListenerType(resourceAdapterName, messageListenerInterface.getName());              }              final Activation activation = requiredMessageListener.getActivation();
}       final PassFactory renameVars =        new PassFactory("renameVars", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
final PassFactory crossModuleMethodMotion =        new PassFactory("crossModuleMethodMotion", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public void testSamplingUsingmessageFrequencyViaDSL() throws Exception {          long totalMessages = 50;          MockEndpoint mock = getMockEndpoint("mock:result");         mock.expectedMinimumMessageCount(10);          mock.setResultWaitTime(100);          for (int i = 0; i < totalMessages; i++) {
}      }     public synchronized void unblock(Address address) {          blockedAddresses.remove(address);          Connection connection = getConnection(address);          if (connection instanceof DroppingConnection) {
*  *  @see java.util.Comparator    */  public abstract int compare(DataInputView firstSource, DataInputView secondSource) throws IOException;
private static final List<PickleTag> NO_TAGS = Collections.<PickleTag>emptyList();      @Test     public void matches_pickles_from_files_not_in_the_predicate_map() {          PickleEvent pickleEvent = createPickleEventWithLocations("path/file.feature", asList(pickleLocation(4)));         LinePredicate predicate = new LinePredicate(singletonMap("another_path/file.feature", asList(8L)));         assertTrue(predicate.apply(pickleEvent));      }      @Test
Assert.assertEquals(2, result.size());        hbck.assigns(Arrays.asList(result.keySet().toArray(new String[0])).stream()            .map(regionName -> regionName.split("\\.")[1]).collect(Collectors.toList()));       ProcedureTestingUtility.waitNoProcedureRunning(master.getMasterProcedureExecutor());        result = hbck.getFailedSplitMergeLegacyRegions(Arrays.asList(TableName.valueOf(testTable)));        Assert.assertEquals(0, result.size());
};       final PassFactory collapseAnonymousFunctions =        new PassFactory("collapseAnonymousFunctions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
future.cancel(true);                          throw ExceptionUtil.rethrow(e, IOException.class);                      }                     ClientConnection current = connections.get(address);                      if (current != null) {                          clientConnection.close();                          clientConnection = current;
* @param isStatic           *        if import is static.           */         public final void setStaticImport(boolean isStatic) {              this.staticImport = isStatic;          }      }
};       final PassFactory inlineConstants =        new PassFactory("inlineConstants", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
private String findIndexFileInDirectory(File directory) {          for (String fileName : SimpleWebServer.INDEX_FILE_NAMES) {              File indexFile = new File(directory, fileName);             if (indexFile.exists() || indexFile.mkdirs()) {                  return fileName;              }          }
*       * @return the message.       */     @Message(id = 10856, value = "Invalid url stream.")      String invalidUrlStream();      /**
HttpRequest req = (HttpRequest) ch.readInbound();          DecoderResult dr = req.getDecoderResult();          assertFalse(dr.isSuccess());         assertFalse(dr.isFailure());          ensureInboundTrafficDiscarded(ch);      }
*     * @return the data stream constructed    */  private DataStreamSink<OUT> writeAsCsv(DataStream<OUT> inputStream, String path,     WriteFormatAsCsv<OUT> format, long millis, OUT endTuple) {   DataStreamSink<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByMillis<OUT>(      path, format, millis, endTuple));    jobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());    jobGraphBuilder.setMutability(returnStream.getId(), false);
future.get();              future.addListener(() -> counter.decrementAndGet(), Runnable::run);          }         assertEquals(0, counter.get());      }      @Test(groups = "standalone")
*       * @return the message.       */     @Message(id = 10859, value = "A slave domain controller cannot accept deployment content uploads")      String slaveCannotAcceptUploads();      /**
int cleanedSize = cleaned.size();      waitCount = 0;      while (cleanedSize < allocatedSize && waitCount++ < 200) {       Thread.sleep(100);        resp = nm.nodeHeartbeat(true);        cleaned = resp.getContainersToCleanup();        cleanedSize += cleaned.size();
*     * @return The closed DataStream    */  public DataStreamSink<OUT> writeAsText(String path) {    return writeAsText(this, path, new WriteFormatAsText<OUT>(), 1, null);   }
} else {          for (int times = mLeft; times < mRight; times ++) {            long startTimeMs = System.currentTimeMillis();           String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);            InputStream is = mHdfsFs.open(new Path(filePath));            long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;
};       final PassFactory ignoreCajaProperties =        new PassFactory("ignoreCajaProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
final PassFactory chainCalls =        new PassFactory("chainCalls", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return the message.       */     @Message(id = 10854, value = "Null stream at index %d")      String nullStream(int index);      /**
if (expMsg.contains("No FileSystem for scheme")) {          newMsg =              "Unsupported filesystem scheme found in the backup target url. Error Message: "                 + expMsg;          LOG.error(newMsg);          throw new IOException(newMsg);        } else {
currSectionCoreMap.set(CoreAnnotations.AuthorAnnotation.class, foundAuthor);              Pattern p = Pattern.compile(foundAuthor);             Matcher matcher = p.matcher(sectionStartToken.word());              if (matcher.find()) {                int authorMentionStart = matcher.start() + sectionStartTagCharBegin;                int authorMentionEnd = matcher.end() + sectionStartTagCharBegin;
}    public void glTexParameteriv (int target, int pname, IntBuffer params) {    GL11.glTexParameteriv(target, pname, params);    }    public void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,
}   @Test  void testHealth() throws Exception { String url = "http:    System.out.println(url);    ResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);
}    public void glUniform3fv (int location, int count, FloatBuffer v) {    GL20.glUniform3fv(location, v);    }    public void glUniform3fv (int location, int count, float[] v, int offset) {    GL20.glUniform3fv(location, toFloatBuffer(v, offset, count * 3));    }    public void glUniform3i (int location, int x, int y, int z) {
};       final PassFactory collapseProperties =        new PassFactory("collapseProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public interface JGroupsEndpointBuilder              extends                  JGroupsEndpointConsumerBuilder, JGroupsEndpointProducerBuilder {          default AdvancedJGroupsEndpointBuilder advanced() {
final Sink normalizedPersons = new Sink("normalizedPersons.json").withInputs(replace);    expectedPlan.setSinks(normalizedPersons);   assertPlanEquals(expectedPlan, actualPlan);   }  }
config.set(KeyProviderFactory.KEY_PROVIDER_PATH, "user:      ks.setConf(config);      rc = ks.run(args1);     assertEquals(1, rc);      assertTrue(outContent.toString().contains("There are no valid " +    "KeyProviders configured."));    }
}      @Override     public synchronized List<EdgeModel> getSelectedEdges() {          List<EdgeModel> selected = new ArrayList<>();          for (Iterator<EdgeModel> itr = octree.getEdgeIterator(); itr.hasNext();) {              EdgeModel edgeModel = itr.next();
}    public void glUniform1iv (int location, int count, IntBuffer v) {    GL20.glUniform1iv(location, v);    }    @Override    public void glUniform1iv (int location, int count, int[] v, int offset) {    GL20.glUniform1iv(location, toIntBuffer(v, offset, count));    }    public void glUniform2f (int location, float x, float y) {
* group.       * @author max       */     final class ImportDetails      {                    private String importFullPath;
}    public void glUniform3fv (int location, int count, FloatBuffer v) {    GL20.glUniform3fv(location, v);    }    public void glUniform3fv (int location, int count, float[] v, int offset) {    GL20.glUniform3fv(location, toFloatBuffer(v, offset, count * 3));    }    public void glUniform3i (int location, int x, int y, int z) {
mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), "processKey",                                 "(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;C)Ljava/lang/String;");          } else if (propertyClass == long.class) {             mw.visitVarInsn(LLOAD, context.var("long", 2));              mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), "processKey",                                 "(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;J)Ljava/lang/String;");          } else if (propertyClass == float.class) {
return HConstants.NORMAL_QOS;      } if (methodName.equals("scan")) {        ScanRequest request = (ScanRequest)param;        if (!request.hasScannerId()) {          return HConstants.NORMAL_QOS;
};       final PassFactory replaceStrings =        new PassFactory("replaceStrings", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
};       final PassFactory exportTestFunctions =        new PassFactory("exportTestFunctions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
@Override   public void openRegion(HRegionInfo region) {      LOG.info("Received request to open region: " +        region.getRegionNameAsString());      if (this.stopped) throw new RegionServerStoppedException();
span.log(fields);                  }              } catch (Throwable t) {                 LOG.warn("OpenTracing: Failed to capture tracing data", t);              }              return message;          }
public interface AtmosphereWebsocketEndpointBuilder              extends                  AtmosphereWebsocketEndpointConsumerBuilder, AtmosphereWebsocketEndpointProducerBuilder {          default AdvancedAtmosphereWebsocketEndpointBuilder advanced() {
public void testMultipleActionsPredicatesOptions_3() throws Exception {    mkdir(tmpdir);   StringBuilder grammarBuilder = new StringBuilder(245);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s @after {System.out.println($ctx.toStringTree(this));} : e ;\n");    grammarBuilder.append("e : a=e op=('*'|'/') b=e  {}{true}?\n");
cancelledKeys = 0;                 runAllTasks();                  selector = this.selector;                 processSelectedKeys();                  selector = this.selector;                  if (isShutdown()) {
*       * @return the message.       */     @Message(id = 10862, value = "Invalid '%s' value: %d, the maximum index is %d")      String invalidValue(String name, int value, int maxIndex);      /**
} else if ("directed".equalsIgnoreCase(key)) {                  if (value instanceof Double) {                      EdgeDirection type = ((Double) value) == 1 ? EdgeDirection.DIRECTED : EdgeDirection.UNDIRECTED;                     edge.setType(type);                  } else {                      report.logIssue(new Issue(NbBundle.getMessage(ImporterGML.class, "importerGML_error_directedparse", edge.toString()), Issue.Level.WARNING));                  }
try {                      return unmarshaller.unmarshall(jsonContent.jsonNode);                  } catch (Exception e) {                     LOG.warn("Unable to unmarshall exception content", e);                      return null;                  }              }
new FileWriter(this.temporaryFolder.newFile("test.txt")));    AbstractEmbeddedServletContainerFactory factory = getFactory();    factory.setDocumentRoot(this.temporaryFolder.getRoot());   this.container = factory.getEmbeddedServletContainer(); assertThat(getResponse("http:   }
.setXmlName(Attribute.MODE.getLocalName())                      .setAllowExpression(true)                      .setFlags(AttributeAccess.Flag.RESTART_ALL_SERVICES)                     .setValidator(new EnumValidator<TransactionMode>(TransactionMode.class, true, false))                      .setDefaultValue(new ModelNode().set(TransactionMode.FORWARD.name()))                      .build();      SimpleAttributeDefinition MODIFICATION_QUEUE_SIZE =
* @see <a href="http:       */      public ResponseList<Status> getRetweetsOfMe() throws TwitterException {         return Status.createStatuseList(get(getBaseURL() + "statuses/retweets_of_me.json",                  null, true));      }
return group.id();              }             String msg = group.getId() + " already exists with a different size: " + group.memberCount();              logger.severe(msg);              throw new IllegalStateException(msg);          }
};       final PassFactory inlineFunctions =        new PassFactory("inlineFunctions", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public interface AdvancedMicrometerEndpointBuilder              extends                  EndpointProducerBuilder {          default MicrometerEndpointBuilder basic() {
DomainControllerLogger HOST_CONTROLLER_LOGGER = Logger.getMessageLogger(DomainControllerLogger.class, "org.jboss.as.host.controller");      @LogMessage(level = Level.WARN)     @Message(id = 10800, value = "Ignoring 'include' child of 'socket-binding-group' %s")      void warnIgnoringSocketBindingGroupInclude(Location location);      @LogMessage(level = Level.WARN)     @Message(id = 10801, value = "Ignoring 'include' child of 'profile' %s")      void warnIgnoringProfileInclude(Location location);      /**
public interface CassandraEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedCassandraEndpointProducerBuilder advanced() {
};       final PassFactory deadAssignmentsElimination =        new PassFactory("deadAssignmentsElimination", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory collapseProperties =        new PassFactory("collapseProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
assertEquals(0, historyService.createHistoricActivityInstanceQuery().processInstanceId("nonExistingProcessInstanceId").list().size());      if (processEngineConfiguration.getHistoryLevel()==ProcessEngineConfigurationImpl.HISTORYLEVEL_FULL) {       assertEquals(2, historyService.createHistoricActivityInstanceQuery().processInstanceId(processInstance.getId()).list().size());      } else if (processEngineConfiguration.getHistoryLevel()>=ProcessEngineConfigurationImpl.HISTORYLEVEL_ACTIVITY) {       assertEquals(1, historyService.createHistoricActivityInstanceQuery().processInstanceId(processInstance.getId()).list().size());      } else {        assertEquals(0, historyService.createHistoricActivityInstanceQuery().processInstanceId(processInstance.getId()).list().size());      }
* @param dataSource the underlying data source    * @param entityManagerFactory the entity manager factory (or {@code null})    */  BasicBatchConfigurer(BatchProperties properties, DataSource dataSource,     EntityManagerFactory entityManagerFactory) {    this.properties = properties;    this.entityManagerFactory = entityManagerFactory;
public void testMultipleAlternativesWithCommonLabel_1() throws Exception {    mkdir(tmpdir);   StringBuilder grammarBuilder = new StringBuilder(560);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s : e {print($e.v)};\n");    grammarBuilder.append("e returns [int v]\n");
final PassFactory markUnnormalized =        new PassFactory("markUnnormalized", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
};       final PassFactory checkShadowVars =        new PassFactory("variableShadowDeclarationCheck", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
final PassFactory minimizeExitPoints =        new PassFactory("minimizeExitPoints", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory peepholeOptimizations =        new PassFactory("peepholeOptimizations", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory deadAssignmentsElimination =        new PassFactory("deadAssignmentsElimination", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public interface AdvancedJt400EndpointBuilder              extends                  AdvancedJt400EndpointConsumerBuilder, AdvancedJt400EndpointProducerBuilder {          default Jt400EndpointBuilder basic() {
ConceptName anotherConceptName = ConceptNameTest.createMockConceptName(3, Context.getLocale(), null, true);     anotherConceptName.setName(duplicateName);     newConcept.addName(anotherConceptName);    Errors errors = new BindException(newConcept, "concept");     new ConceptValidator().validate(newConcept, errors);    }
@Configuration      public static Option[] configure() {         return configure(COMPONENT);      }  } \ No newline at end of file
public class TestConverters {   @Test(timeout = 5000)    public void testTaskSpecToFragmentSpec() {      ByteBuffer procBb = ByteBuffer.allocate(4);      procBb.putInt(0, 200);
}    };   final PassFactory printNameReferenceReport =        new PassFactory("printNameReferenceReport", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
public interface OptaPlannerEndpointBuilder              extends                  OptaPlannerEndpointConsumerBuilder, OptaPlannerEndpointProducerBuilder {          default AdvancedOptaPlannerEndpointBuilder advanced() {
};       final HotSwapPassFactory checkVariableReferences =        new HotSwapPassFactory("checkVariableReferences", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory replaceIdGenerators =        new PassFactory("replaceIdGenerators", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
public interface KinesisEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedKinesisEndpointProducerBuilder advanced() {
private static final String ALLOW_ELEMENT_NAME = "allow";          private final Deque<PkgControl> stack = new ArrayDeque<>();      static {          DTD_RESOURCE_BY_ID.put(DTD_PUBLIC_ID_1_0, DTD_RESOURCE_NAME_1_0);
};       final PassFactory closureOptimizePrimitives =        new PassFactory("closureOptimizePrimitives", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
public int read(String table, String key, Set<String> fields,              HashMap<String, ByteIterator> result) {          if (fields == null) {             StringByteIteartor.putAllAsByteIterators(result, jedis.hgetAll(table, key));          }          else {              String[] fieldArray = (String[])fields.toArray(new String[fields.size()]);
* Some simple, local collapses (e.g., {@code var x; var y;} becomes     * {@code var x,y;}.     */   final PassFactory exploitAssign =        new PassFactory("expointAssign", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
final PassFactory specializeInitialModule =        new PassFactory("specializeInitialModule", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* Checks possible execution paths of the program for problems: missing return     * statements and dead code.     */   final HotSwapPassFactory checkControlFlow =        new HotSwapPassFactory("checkControlFlow", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
, (args = args.rest()).first()        , args.rest());     case 16:     return doInvoke(args.first()        , (args = args.rest()).first()        , (args = args.rest()).first()
@Override      protected void doStop() throws Exception {          if (channel != null) {             LOG.debug("Terminating channel to the remote gRPC server");              channel.shutdown().shutdownNow();              channel = null;              grpcStub = null;
*       * @return the message.       */     @Message(id = 10847, value = "Interrupted waiting for result from host %s")      String interruptedAwaitingResultFromHost(String name);      /**
final Object[] params = new Object[] { item };               try {                   if (mMethod.getReturnType() == Boolean.TYPE) {                      return (Boolean)mMethod.invoke(MenuInflater.this, params);                   }                   return false;               } catch (Exception e) {
}          public void shutdown() {             channel.disconnect();              bossGroup.shutdownGracefully();              workerGroup.shutdownGracefully();          }
final PassFactory renameProperties =        new PassFactory("renameProperties", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
* Process smart name processing - removes unused classes and does referencing     * starting with minimum set of names.     */   final PassFactory smartNamePass =        new PassFactory("smartNamePass", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
nodeE.appendChild(positionXE);              Element positionYE = createNodePositionY(document, n);              nodeE.appendChild(positionYE);             if (minZ != 0f && maxZ != 0f) {                  Element positionZE = createNodePositionZ(document, n);                  nodeE.appendChild(positionZE);              }
* Renames properties so that the two properties that never appear on     * the same object get the same name.     */   final PassFactory ambiguateProperties =        new PassFactory("ambiguateProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return the error message       */     @Message(id = 10833, value = "%s is missing %s: %s")      String requiredChildIsMissing(String parent, String child, String parentSpec);      /**
*       * @return the error message       */     @Message(id = 10833, value = "%s is missing %s: %s")      String requiredChildIsMissing(String parent, String child, String parentSpec);      /**
}       final PassFactory checkGlobalNames =        new PassFactory("Check names", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
currentInodeDirectory.addChild(dir);        currentInodeDirectory.setLastModificationTimeMs(options.getOperationTimeMs());        if (options.isPersisted()) {         String ufsPath = mMountTable.resolve(getPath(dir)).getPath();          UnderFileSystem ufs = UnderFileSystem.get(ufsPath, MasterContext.getConf());          ufs.mkdirs(ufsPath, false);        }
*       * @return the message.       */     @Message(id = 10868, value = "Deployment %s is already started")      String deploymentAlreadyStarted(String name);      /**
@ApiResponses(value = {           @ApiResponse(code = 400, message = "Invalid username supplied", response = Void.class),          @ApiResponse(code = 404, message = "User not found", response = Void.class) })     void deleteUser(@PathParam("username") @ApiParam("The name that needs to be deleted") String username) throws Exception;      @GET      @Path("/{username}")
}          if (!ObjectHelper.isEmpty(configuration.getHost()) && !ObjectHelper.isEmpty(configuration.getPort())) {             LOG.info("Building gRPC server on " + configuration.getHost() + ":" + configuration.getPort());              serverBuilder = NettyServerBuilder.forAddress(new InetSocketAddress(configuration.getHost(), configuration.getPort()));          } else if (ObjectHelper.isEmpty(configuration.getHost()) && !ObjectHelper.isEmpty(configuration.getPort())) {             LOG.info("Building gRPC server on <any address>" + ":" + configuration.getPort());              serverBuilder = NettyServerBuilder.forPort(configuration.getPort());          } else {              throw new IllegalArgumentException("No server start properties (host, port) specified");
};       final HotSwapPassFactory checkTypes =        new HotSwapPassFactory("checkTypes", false) {      @Override      protected HotSwapCompilerPass createInternal(final AbstractCompiler
}    @Override   public N oppositeNode(Object edge) {      return checkNotNull(incidentEdgeMap.get(edge));    }    @Override   public N removeInEdge(Object edge, boolean isSelfLoop) {      if (!isSelfLoop) {        return removeOutEdge(edge);      }
@Configuration   @ConditionalOnBean(SolrServer.class)  @ConditionalOnEnabledHealthIndicator("solr")   public static class SolrHealthIndicatorConfiguration extends     CompositeHealthIndicatorConfiguration<SolrHealthIndicator, SolrServer> {
*/            public boolean hasResponseStatus() {         return (bodyParts != null ? true : false);      }      /**
final Sink output = new Sink("output.json").withInputs(selection);    expectedPlan.setSinks(output);   assertPlanEquals(expectedPlan, actualPlan);   }   @Test
*/      public ResponseList<Status> getHomeTimeline(Paging paging) throws              TwitterException {         return Status.createStatuseList(get(getBaseURL() + "statuses/home_timeline.json", null, paging.asPostParameterList(), true));      }      /**
* Look for function calls that are pure, and annotate them     * that way.     */   final PassFactory markPureFunctions =        new PassFactory("markPureFunctions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* @see <a href="http:       */      public ResponseList<Status> getFavorites(String id, int page) throws TwitterException {         return Status.createStatuseList(get(getBaseURL() + "favorites/" + id + ".json", "page", String.valueOf(page), true));      }      /**
logger.debug("Asynchronous invocation. asyncContext={}", asyncContext);          }         final Trace trace = asyncContext.continueAsyncTraceObject();          if (trace == null) {              return;          }
@Override   public void internalReceiveCommand(String itemName, Command command) {    super.internalReceiveCommand(itemName, command);   logger.trace("MyQ binding received command '{}' for item '{}'",      command, itemName);    if (myqOnlineData != null) {     computeCommandForItem(command, itemName);
}    public void glUniform1fv (int location, int count, FloatBuffer v) {    GL20.glUniform1fv(location, v);    }    public void glUniform1fv (int location, int count, float[] v, int offset) {    GL20.glUniform1fv(location, toFloatBuffer(v, offset, count));    }    public void glUniform1i (int location, int x) {
}   @ImportAutoConfiguration(classes = ThymeleafAutoConfiguration.class)  @UnrelatedOne   static class ImportAutoConfigurationWithItemsTwo {   }
}    @GwtIncompatible("Reader/Writer")   private static void testStreamingEncodingWithSeparators(        BaseEncoding encoding, String decoded, String encoded) throws IOException {      testStreamingEncoding(encoding, decoded, encoded);
* Advanced builder for endpoint for the Kubernetes Persistent Volume Claim       * component.       */     public interface AdvancedKubernetesPersistentVolumesClaimsEndpointBuilder              extends                  EndpointProducerBuilder {          default KubernetesPersistentVolumesClaimsEndpointBuilder basic() {
};       final PassFactory runtimeTypeCheck =        new PassFactory("runtimeTypeCheck", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* @since Twitter4J 2.0.1       */      public ResponseList<Status> getFavorites(String id) throws TwitterException {         return Status.createStatuseList(get(getBaseURL() + "favorites/" + id + ".json", new PostParameter[0], true));      }      /**
protected void handleQPoll(String[] args) {          long timeout = 0;          if (args.length > 1) {             timeout = Long.parseLong(args[1]);          }          try {              println(getQueue().poll(timeout, TimeUnit.SECONDS));
this.context.refresh();    assertNotNull(this.context.getBean(AuthenticationManagerBuilder.class));   assertEquals(9, this.context.getBean(FilterChainProxy.class).getFilterChains()      .size());   }
};       final PassFactory ignoreCajaProperties =        new PassFactory("ignoreCajaProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
checkConfig.addAttribute("matchDirectoryStructure", "false");          final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;         verify(checkConfig, getNonCompilablePath("InputPackageDeclarationDiffDirectory.java"), expected);      }      @Test
* @param candidate The candidate to check.    * @return True, if the candidate is equal to the reference, false otherwise.    */  public abstract boolean equalToReference(T2 candidate);  public abstract int compareToReference(T2 candidate);  }
logger.debug("Active clients {}", activeClients());          }         long now = System.nanoTime();          String messageId = UUID.randomUUID().toString();          CacheMessage cacheMessage = new CacheMessage(messageId, now);          synchronized (messages) {
*       * @return the message.       */     @Message(id = 10844, value = "Invalid rollout plan. Server group %s appears more than once in the plan.")      String invalidRolloutPlanGroupAlreadyExists(String group);      /**
}      protected List<ResultMessageSummary> resultMessageListtoValueList(List<ResultMessage> resultMessages) {         final List<ResultMessageSummary> result = Lists.newArrayListWithExpectedSize(resultMessages.size());          for (ResultMessage resultMessage : resultMessages) {              result.add(ResultMessageSummary.create(resultMessage.highlightRanges, resultMessage.getMessage(), resultMessage.getIndex()));
if (itemMap.getSoapValueParser() == null) {              NodeList nlDataOutNodes = response.getSOAPPart().getElementsByTagName(itemMap.getReadDataOutName());             if (nlDataOutNodes != null && nlDataOutNodes.getLength() > 0) {                  value = nlDataOutNodes.item(0).getTextContent();              } else {
};       final PassFactory closureCodeRemoval =        new PassFactory("closureCodeRemoval", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
}    public boolean mouseMoved (int screenX, int screenY) {    Object[] items = processors.begin();     try {      for (int i = 0, n = processors.size; i < n; i++)      if (((InputProcessor)items[i]).mouseMoved(screenX, screenY)) return true;     } finally {      processors.end();     }
@Override      public AsyncSupport complete(AtmosphereResourceImpl r) {          try {             HttpEvent event = (HttpEvent) r.getRequest().getAttribute(HTTP_EVENT);              if (event != null) {                  event.close();
@Test      public void sync_whenCallTimeout_thenOperationTimeoutException() throws Exception {         long callTimeoutMs = 5000;          Config config = new Config().setProperty(GroupProperty.OPERATION_CALL_TIMEOUT_MILLIS.getName(), "" + callTimeoutMs);          TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(2);          HazelcastInstance local = factory.newHazelcastInstance(config);
RuntimeOptionsFactory runtimeOptionsFactory = new RuntimeOptionsFactory(SubClassWithMonoChromeTrue.class);          RuntimeOptions runtimeOptions = runtimeOptionsFactory.create();         assertFalse(runtimeOptions.isMonochrome());      }
String ha2 = getMd5(method + ":" + uri.getPath());          String expectedResponse = getMd5(ha1 + ":" + nonce + ":" + nc + ":" + cnonce + ":" + qop + ":" + ha2);         assertEquals(expectedResponse, orig.getResponse());      }      private static String getMd5(String what) {
boolean isDoubleA = isDouble(clazzA);          boolean isDoubleB = isDouble(clazzB);         if ((isDoubleA && isDoubleB) || (isDoubleA && isIntA) || (isDoubleB && isIntA)) {              return a.doubleValue() == b.doubleValue();          }
final long callId;      final long callStartNanos;     PrintingEventListener(long callId, long callStartNanos) {        this.callId = callId;        this.callStartNanos = callStartNanos;      }
final PassFactory renameProperties =        new PassFactory("renameProperties", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
*     * @return The closed DataStream    */  public DataStreamSink<OUT> writeAsCsv(String path, int batchSize) {    return writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), batchSize, null);   }
};       final PassFactory checkShadowVars =        new PassFactory("variableShadowDeclarationCheck", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));      Node node2 = Node.newString(Token.NAME, "f");      node2.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));     assertTrue(node1.isEquivalentToTyped(node2));    }    public void testCheckTreeTypeAwareEqualsSameNull() {
if (writeBatchSize > 1) {              failMap = doStoreUsingBatchSize(delayedEntries);          } else {             failMap = processInternal((List) delayedEntries);          }          return failMap;      }
};       final HotSwapPassFactory checkProvides =        new HotSwapPassFactory("checkProvides", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
}    public void glUniform4fv (int location, int count, FloatBuffer v) {    GL20.glUniform4fv(location, v);    }    public void glUniform4fv (int location, int count, float[] v, int offset) {    GL20.glUniform4fv(location, toFloatBuffer(v, offset, count << 2));    }    public void glUniform4i (int location, int x, int y, int z, int w) {
log.makeAlert(e, "Failed to persist merged index[%s]", schema.getDataSource())                   .addData("interval", interval)                   .emit();               if (!shuttingDown) {                  abandonSegment(truncatedTime, sink);
*     * @throws IOException Thrown if any of the two views raises an exception.       */  public abstract void copy(DataInputView source, DataOutputView target) throws IOException;  }
}   public void glPolygonOffset (float factor, float units) {   GL.glPolygonOffset(factor, units);   }   public void glReadPixels (int x, int y, int width, int height, int format, int type, Buffer pixels) {
*       * @return the message.       */     @Message(id = 10869, value = "Unknown %s %s")      String unknown(String name, String value);      /**
if (!drawing) throw new IllegalStateException("SpriteCache.begin must be called before draw.");     Cache cache = caches.get(cacheID);    offset = offset * 12 + cache.offset;     length *= 6;     Texture[] textures = cache.textures;     int[] counts = cache.counts;
*       * @return the message.       */     @Message(id = 10847, value = "Interrupted waiting for result from host %s")      String interruptedAwaitingResultFromHost(String name);      /**
* Process smart name processing - removes unused classes and does referencing     * starting with minimum set of names.     */   final PassFactory smartNamePass =        new PassFactory("smartNamePass", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
mThriftServer = createThriftServer();      mWorkerNetAddress =          new NetAddress(BlockWorkerUtils.getWorkerAddress(mTachyonConf).getAddress()             .getHostAddress(), thriftServerPort, mDataServer.getPort());      int webPort = mTachyonConf.getInt(Constants.WORKER_WEB_PORT, Constants.DEFAULT_WORKER_WEB_PORT);
};       final PassFactory latePeepholeOptimizations =        new PassFactory("latePeepholeOptimizations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final HotSwapPassFactory checkRequires =        new HotSwapPassFactory("checkRequires", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory checkRegExp =        new PassFactory("checkRegExp", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
"--attr", "foo=bar",              "--attr", "foo=glarch");      rc = ks.run(args4);     assertEquals(1, rc);            deleteKey(ks, "keyattr1");
@Configuration   @ConditionalOnBean(RabbitTemplate.class)  @ConditionalOnEnabledHealthIndicator("rabbit")   public static class RabbitHealthIndicatorConfiguration extends     CompositeHealthIndicatorConfiguration<RabbitHealthIndicator, RabbitTemplate> {
public static Rule<ExchangeNode> checkRulesAreFiredBeforeAddExchangesRule()      {         return checkPlanDoNotMatch(exchange(), "Expected rules to be fired before 'AddExchanges' optimizer");      }     public static <T extends PlanNode> Rule<T> checkPlanDoNotMatch(Pattern<T> pattern, String message)      {          return new CheckNoPlanNodeMatchesRule<>(pattern, message);      }
*       * @return the message.       */     @Message(id = 10844, value = "Invalid rollout plan. Server group %s appears more than once in the plan.")      String invalidRolloutPlanGroupAlreadyExists(String group);      /**
public void testMultipleActionsPredicatesOptions_1() throws Exception {    mkdir(tmpdir);   StringBuilder grammarBuilder = new StringBuilder(238);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s @after {print($ctx.toStringTree(recog=self))} : e ;\n");    grammarBuilder.append("e : a=e op=('*'|'/') b=e  {}{True}?\n");
* @return true if all the nodes up to the last annotation node are end of scope nodes       *         false otherwise       */     private static boolean isEndOfScope(final DetailAST lastAnnotationNode, final DetailAST node) {          DetailAST checkNode = node;          boolean endOfScope = false;          while (endOfScope && !checkNode.equals(lastAnnotationNode)) {
String sessionTTL = getParam("session-ttl-seconds");              if (sessionTTL != null) {                  MapConfig mapConfig = hzConfig.getMapConfig(clusterMapName);                 mapConfig.setTimeToLiveSeconds(Integer.parseInt(sessionTTL));                  hzConfig.addMapConfig(mapConfig);              }          } catch (UnsupportedOperationException ignored) {
if (maskPayload) {              int random = (int) (Math.random() * Integer.MAX_VALUE);              mask = ByteBuffer.allocate(4).putInt(random).array();             header.writeBytes(mask);              int counter = 0;              for (int i = data.readerIndex(); i < data.writerIndex(); i ++) {
try {              InetAddress address = resolver.resolve("10.0.0.1").syncUninterruptibly().getNow();             assertEquals("10.0.0.1", address.getHostName());          } finally {              resolver.close();          }
};       final PassFactory objectPropertyStringPreprocess =        new PassFactory("ObjectPropertyStringPreprocess", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
try {      bytes = input.read(buffer, index, 4096);     } catch (Exception e) {     throw new GdxRuntimeException("Failure reading Vorbis.", e);     }     syncState.wrote(bytes);
}    public void glUniform2fv (int location, int count, FloatBuffer v) {    GL20.glUniform2fv(location, v);    }    public void glUniform2fv (int location, int count, float[] v, int offset) {    GL20.glUniform2fv(location, toFloatBuffer(v, offset, count << 1));    }    public void glUniform2i (int location, int x, int y) {
return new ErrorCommand(ERROR_CLIENT);          }          if (st.hasMoreTokens()) {             flag = Integer.parseInt(st.nextToken());          } else {              return new ErrorCommand(ERROR_CLIENT);          }
final PassFactory crossModuleMethodMotion =        new PassFactory("crossModuleMethodMotion", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
} else {          for (int times = mLeft; times < mRight; times ++) {            long startTimeMs = System.currentTimeMillis();           String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);            InputStream is = mHdfsFs.open(new Path(filePath));            long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;
* Rewrite instance methods as static methods, to make them easier     * to inline.     */   final PassFactory devirtualizePrototypeMethods =        new PassFactory("devirtualizePrototypeMethods", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public interface AdvancedGoogleCalendarStreamEndpointBuilder              extends                  EndpointConsumerBuilder {          default GoogleCalendarStreamEndpointBuilder basic() {
}    };   final PassFactory nameUnmappedAnonymousFunctions =        new PassFactory("nameAnonymousFunctions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory rewriteFunctionExpressions =        new PassFactory("rewriteFunctionExpressions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*       * @return the message.       */     @Message(id = 10846, value = "Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.")      String invalidRolloutPlanLess(String name, String propertyName, int value);      /**
* Look for function calls that are pure, and annotate them     * that way.     */   final PassFactory markPureFunctions =        new PassFactory("markPureFunctions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final HotSwapPassFactory checkAccessControls =        new HotSwapPassFactory("checkAccessControls", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
* Process smart name processing - removes unused classes and does referencing     * starting with minimum set of names.     */   final PassFactory smartNamePass =        new PassFactory("smartNamePass", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
* Some simple, local collapses (e.g., {@code var x; var y;} becomes     * {@code var x,y;}.     */   final PassFactory collapseVariableDeclarations =        new PassFactory("collapseVariableDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* @return the number of blocks     */    public int getNumberOfBlocks() {     Preconditions.checkNotNull(mBlockIdsOnTiers,"mBlockIdsOnTiers");      int numberOfBlocks = 0;      for (List<Long> blockIds : mBlockIdsOnTiers.values()) {
final HttpConnectionFactory http11 = buildHttpConnectionFactory(httpConfig);          final HTTP2ServerConnectionFactory http2c = new HTTP2CServerConnectionFactory(httpConfig);          http2c.setMaxConcurrentStreams(maxConcurrentStreams);         http2c.setInitialStreamSendWindow(initialStreamSendWindow);
};       final PassFactory aliasKeywords =        new PassFactory("aliasKeywords", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
import org.jboss.logging.Messages;  /**  * This module is using message IDs in the range 10800-10899. This file is using the subset 10830-10899 for domain * controller non-logger messages. See http:   * JBAS message id blocks.   * <p/>
*     * @return The closed DataStream    */  public DataStreamSink<OUT> writeAsText(String path, int batchSize) {    return writeAsText(this, path, new WriteFormatAsText<OUT>(), batchSize, null);   }
*/  public class TFAgentStatBatchMapper {      private final Logger logger = LoggerFactory.getLogger(this.getClass());     public final TFAgentStatMappter tFAgentStatMappter = new TFAgentStatMappter();      public TFAgentStatBatch map(AgentStatBo agentStatBo) {          try {             List<TFAgentStat> tFAgentstatList = tFAgentStatMappter.map(agentStatBo);              long startTimestamp = getStartTimestamp(agentStatBo);              TFAgentStatBatch tFAgentStatBatch = new TFAgentStatBatch(agentStatBo.getAgentId(), startTimestamp, tFAgentstatList);              return tFAgentStatBatch;
* @param request   The request object providing information about the HTTP request       * @param response  The response object providing functionality for modifying the response       */     public abstract void handle(Exception exception, Request request, Response response);  }
* Renames properties so that the two properties that never appear on     * the same object get the same name.     */   final PassFactory ambiguateProperties =        new PassFactory("ambiguateProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
String uri = getScpUri() + "?username=admin&password=admin&knownHostsFile=" + getKnownHostsFile();          template.sendBodyAndHeader(uri, "Hello World", Exchange.FILE_NAME, "hello.txt");         Thread.sleep(200);          File file = new File(getScpPath() + "/hello.txt");          assertFileExists(file.getAbsolutePath());
@Override      protected void doStop() throws Exception {          if (channel != null) {             LOG.debug("Terminating channel to the remote gRPC server");              channel.shutdown().shutdownNow();              channel = null;              grpcStub = null;
}      private static void writeElement(XMLExtendedStreamWriter writer, ModelNode model, Attribute attribute) throws XMLStreamException {         attribute.getDefinition().getAttributeMarshaller().marshallAsElement(attribute.getDefinition(), model, false, writer);      }  }
*       * @return the message.       */     @Message(id = 10842, value = "Invalid rollout plan. %s is not a valid child of node %s")      String invalidRolloutPlan(ModelNode modelNode, String nodeName);      /**
};       final PassFactory inlineFunctions =        new PassFactory("inlineFunctions", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
catch(Throwable e)    {    if(!(e instanceof CompilerException))    throw new CompilerException((String) SOURCE.deref(), (Integer) LINE.deref(), e);    else     throw (CompilerException) e;    }
moveByMinutes(9 * 60 * 24);     waitForJobExecutorToProcessAllJobsAndExecutableTimerJobs(10000, 200);
}     @Test(timeout = 30000)      public void testMutex() throws InterruptedException {          final int threadCount = 2;          final HazelcastInstance[] instances = createHazelcastInstanceFactory(threadCount).newInstances();
String command = shellMsg.getCommand();                          if (command == null) {                             throw new UnsupportedOperationException("Command not found in bolt message: " + shellMsg);                          }                          if(command.equals("ack")) {                              handleAck(shellMsg.getId());
) throws IOException {      try {       ugi.reloginFromKeytab();      return ugi.doAs(new PrivilegedExceptionAction<Token<?>>() {          @Override          public Token<?> run() throws IOException {
LOG.trace("OpenTracing: start server span=" + span);                  }              } catch (Throwable t) {                 LOG.warn("OpenTracing: Failed to capture tracing data", t);              }          }
String[] paramNames = null;                  if (kotlin && constructors.length > 0) {                      paramNames = TypeUtils.getKoltinConstructorParameters(clazz);                     creatorConstructor = TypeUtils.getKoltinConstructor(constructors);                      TypeUtils.setAccessible(creatorConstructor);                  } else {
CamelContext context = super.createCamelContext();          context.addComponent("properties", new PropertiesComponent("ref:prop"));         KafkaComponent kafka = new KafkaComponent();          kafka.setBrokers("localhost:" + getKafkaPort());          context.addComponent("kafka", kafka);
public interface KubernetesNodesEndpointBuilder              extends                  KubernetesNodesEndpointConsumerBuilder, KubernetesNodesEndpointProducerBuilder {          default AdvancedKubernetesNodesEndpointBuilder advanced() {
}       final HotSwapPassFactory checkControlStructures =        new HotSwapPassFactory("checkControlStructures", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
*/      public ResponseList<Status> getUserTimeline(Paging paging) throws              TwitterException {         return Status.createStatuseList(get(getBaseURL() + "statuses/user_timeline.json"                  , null, paging.asPostParameterList(), true));      }
public static StreamPingPacket readBuffer(short packetType, ChannelBuffer buffer) {           assert packetType == PACKET_TYPE;          if (buffer.readableBytes() < 4) {               buffer.resetReaderIndex();               return null;           }
}    @GwtIncompatible("Reader/Writer")   private static void testStreamingEncodingWithSeparators(        BaseEncoding encoding, String decoded, String encoded) throws IOException {      testStreamingEncoding(encoding, decoded, encoded);
Exclusion(String groupId, String artifactId) {     Assert.notNull(groupId, "GroupId must not be null");     Assert.notNull(artifactId, "ArtifactId must not be null");     this.groupId = groupId;     this.artifactId = artifactId;    }
final PassFactory crossModuleCodeMotion =        new PassFactory("crossModuleCodeMotion", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* @since Twitter4J 2.0.1       */      public ResponseList<Status> getFavorites() throws TwitterException {         return Status.createStatuseList(get(getBaseURL() + "favorites.json", new PostParameter[0], true));      }      /**
@Test    public void testListenOnWildcardPort() throws Exception {     startTest(getMethodName(), false);    }    @Test
protected void handleQPoll(String[] args) {          long timeout = 0;          if (args.length > 1) {             timeout = Long.parseLong(args[1]);          }          try {              println(getQueue().poll(timeout, TimeUnit.SECONDS));
*       * @return the message.       */     @Message(id = 10846, value = "Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.")      String invalidRolloutPlanLess(String name, String propertyName, int value);      /**
)      );     queryNotifyLatch.await(1000, TimeUnit.MILLISECONDS);      Assert.assertEquals(1, factory.getSegmentReferences().size());
private final static Log   LOG         = LogFactory.getLog(DruidPooledConnection.class);       protected Connection       conn;      protected DruidConnectionHolder holder;       protected TransactionInfo  transactionInfo;       private final boolean      dupCloseLogEnable;       private boolean            traceEnable = false;
public static DetailAST annotatingWhat(DetailAST ast)      {          if (ast == null) {             throw new IllegalArgumentException("the ast is null");          }          if (ast.getType() != TokenTypes.ANNOTATION) {
};       final HotSwapPassFactory checkAccessControls =        new HotSwapPassFactory("checkAccessControls", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
}          for (Future<Pairs> future : lsFutures) {              Pairs pairs = future.get();             if (pairs != null) {                  for (KeyValue keyValue : pairs.getKeyValues()) {                      results.addKeyValue(keyValue);                  }
*       * @return the message.       */     @Message(id = 10849, value = "Operation %s for address %s can only be handled by the " +              "master Domain Controller; this host is not the master Domain Controller")      String masterDomainControllerOnlyOperation(String operation, PathAddress address);
MockEndpoint result = getMockEndpoint("mock:result");          result.expectedMinimumMessageCount(3);           result.expectedBodiesReceivedInAnyOrder("Message 1c", "Message 2b", "Message 3a");
reloadRequired = reloadRequired || Logging.requiresReload(attribute.getFlags());                      }                      if (restartRequired) {                         context.restartRequired();                      } else if (reloadRequired) {                         context.reloadRequired();                      }                  }                  performRollback(context, configuration, name, originalModel);
}   @ImportAutoConfiguration(classes = ThymeleafAutoConfiguration.class)  @UnrelatedOne   static class ImportAutoConfigurationWithItemsTwo {   }
};       final PassFactory inlineSimpleMethods =        new PassFactory("inlineSimpleMethods", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
assertEquals(encoded, encoding.encode(bytes));    }   private static void testDecodes(BaseEncoding encoding, String encoded, String decoded) {      byte[] bytes;      try {        bytes = decoded.getBytes("UTF-8");      } catch (UnsupportedEncodingException e) {        throw new AssertionError();
public void test_in() throws Exception {          Entity vo = JSON.parseObject("{\"date\":\"06-05-2016\"}", Entity.class);         Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);          calendar.setTime(vo.date);          Assert.assertEquals(2016, calendar.get(Calendar.YEAR));          Assert.assertEquals(4, calendar.get(Calendar.MONTH));
placeholderToken.setBeginPosition(beginPosition);              placeholderToken.setEndPosition(beginPosition + placeholderToken.word().length());              placeholderToken.set(TokenizerBenchmarkTestCase.MWTTokenCharacterOffsetBeginAnnotation.class,                     containedToken.get(TokenizerBenchmarkTestCase.MWTTokenCharacterOffsetBeginAnnotation.class));              placeholderToken.set(TokenizerBenchmarkTestCase.MWTTokenCharacterOffsetEndAnnotation.class,                     containedToken.get(TokenizerBenchmarkTestCase.MWTTokenCharacterOffsetEndAnnotation.class));              placeholderToken.setIsMWT(true);              return placeholderToken;          }
nodeE.appendChild(positionXE);              Element positionYE = createNodePositionY(document, n);              nodeE.appendChild(positionYE);             if (minZ != 0f && maxZ != 0f) {                  Element positionZE = createNodePositionZ(document, n);                  nodeE.appendChild(positionZE);              }
};       final PassFactory collapseProperties =        new PassFactory("collapseProperties", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public interface RestEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedRestEndpointProducerBuilder advanced() {
}              for (; i < srcEndIdx; i ++) {                 T m = src[srcIdx];                  if (m == null) {                      throw new IllegalArgumentException("src[" + srcIdx + ']');                  }
chunks.get(chunk.getId()).put(chunk.getSequenceNumber(), chunk);          } else {             Map<Integer, GELFMessageChunk> c = Maps.newHashMap();              c.put(chunk.getSequenceNumber(), chunk);              chunks.put(chunk.getId(), c);          }
serializedValue = new SerializedValue<>(null);      } else {       byte[] serializedData = new byte[length];      dis.readFully(serializedData, 0, length);       serializedValue = SerializedValue.fromBytes(serializedData);      }
*     * @return The closed DataStream    */  public DataStreamSink<OUT> writeAsCsv(String path, long millis) {    return writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, null);   }
};       final PassFactory computeFunctionNames =        new PassFactory("computeFunctionNames", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory collapseObjectLiterals =        new PassFactory("collapseObjectLiterals", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
public void testMultipleActionsPredicatesOptions_3() throws Exception {    mkdir(tmpdir);   StringBuilder grammarBuilder = new StringBuilder(245);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s @after {System.out.println($ctx.toStringTree(this));} : e ;\n");    grammarBuilder.append("e : a=e op=('*'|'/') b=e  {}{true}?\n");
try {           ModuleFactory.stopModule(mod, true, false);          }         catch (Throwable t3) {           log.err("Unable to shutdown module:" + mod, t3);
ControlFlowGraph<Node> computeCFG() {     logger.fine("Computing Control Flow Graph");      Tracer tracer = newTracer("computeCFG");      ControlFlowAnalysis cfa = new ControlFlowAnalysis(this, true, false);      process(cfa);
class OkHttpRequest implements Runnable {      private final Call call;     OkHttpRequest(Call call) {        this.call = call;      }
* @return the number of blocks     */    public int getNumberOfBlocks() {     Preconditions.checkNotNull(mBlockIdsOnTiers,"mBlockIdsOnTiers");      int numberOfBlocks = 0;      for (List<Long> blockIds : mBlockIdsOnTiers.values()) {
final PassFactory groupVariableDeclarations =        new PassFactory("groupVariableDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
case MotionEvent.ACTION_DOWN:      case MotionEvent.ACTION_POINTER_DOWN:  realPointerIndex = input.getFreePointerIndex();     if (realPointerIndex > AndroidInput.NUM_TOUCHES) break;       input.realId[realPointerIndex] = pointerId;       x = (int)event.getX(pointerIndex);       y = (int)event.getY(pointerIndex);
}          if (result && isStatisticsEnabled()) {              statistics.increaseCacheRemovals(1);             statistics.addRemoveTimeNanos(System.nanoTime() - start);          }          return result;      }
final Sink output = new Sink("allUsers.json").withInputs(union);    expectedPlan.setSinks(output);   assertPlanEquals(expectedPlan, actualPlan);   }  }
public interface WebsocketEndpointBuilder              extends                  WebsocketEndpointConsumerBuilder, WebsocketEndpointProducerBuilder {          default AdvancedWebsocketEndpointBuilder advanced() {
setTransform(false);   }  public Container (Actor actor) {    this();    setActor(actor);   }
* balancing purpose at a datanode     */    public static final int MAX_NUM_CONCURRENT_MOVES = 5;   public static final int MAX_NO_PENDING_BLOCK_INTERATIONS = 5;    private static final String USAGE = "Usage: java "        + Balancer.class.getSimpleName()
private void handleAtomicNumberSet(String[] args) {          long v = 0;          if (args.length > 1) {             v = Long.parseLong(args[1]);          }          getAtomicNumber().set(v);          println(getAtomicNumber().get());
"functions are set.");       final PassFactory generateExports =        new PassFactory("generateExports", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
*/      public ResponseList<Status> getPublicTimeline() throws              TwitterException {         return Status.createStatuseList(get(getBaseURL() +                  "statuses/public_timeline.json", false));      }
public interface PropertiesEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedPropertiesEndpointProducerBuilder advanced() {
Node node1 = Node.newString(Token.NAME, "f");      node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));      Node node2 = Node.newString(Token.NAME, "f");     assertFalse(node1.isEquivalentToTyped(node2));    }    public void testVarArgs1() {
@Test   public void testMultipleAlternativesWithCommonLabel_3() throws Exception {    mkdir(tmpdir);   StringBuilder grammarBuilder = new StringBuilder(638);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s : e {console.log($e.v);};\n");    grammarBuilder.append("e returns [int v]\n");
form.add("code", context.getAuthorizationCode());    String redirectUri = resource.getPreEstablishedRedirectUri();   if (redirectUri == null) {    redirectUri = String.valueOf(context==null ? null : context.getPreservedState());    } else {     form.add("state", String.valueOf(context.getPreservedState()));
}      @Override     public synchronized void updateLOD() {          Iterator<NodeModel> iterator = octree.getNodeIterator();          for (; iterator.hasNext();) {              NodeModel obj = iterator.next();
};       final HotSwapPassFactory checkVars =        new HotSwapPassFactory("checkVars", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory invertContextualRenaming =        new PassFactory("invertNames", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
HazelcastInstance server1;      @Before     public void setUp() throws Exception {          NearCacheConfig nearCacheConfig = newNearCacheConfig();          nearCacheConfig.setInvalidateOnChange(true);
}    };   final PassFactory nameUnmappedAnonymousFunctions =        new PassFactory("nameAnonymousFunctions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
return result;    }   private static String rule(String rule) {      return "com.google.javascript.jscomp.ConformanceRules$" + rule;    }   private static String value(String value) {      return "  value: '" + value + "'\n";    }
}    public void glUniform1iv (int location, int count, IntBuffer v) {    GL20.glUniform1iv(location, v);    }    @Override    public void glUniform1iv (int location, int count, int[] v, int offset) {    GL20.glUniform1iv(location, toIntBuffer(v, offset, count));    }    public void glUniform2f (int location, float x, float y) {
public interface KubernetesReplicationControllersEndpointBuilder              extends                  KubernetesReplicationControllersEndpointConsumerBuilder, KubernetesReplicationControllersEndpointProducerBuilder {          default AdvancedKubernetesReplicationControllersEndpointBuilder advanced() {
+ (StringUtils.isEmpty(modelPackage) ? "" : (modelPackage + "/")) + dataType;      }          private String getJSDocType(CodegenModel cm, CodegenProperty cp) {          if (Boolean.TRUE.equals(cp.isContainer)) {
if (i > 0) {                              buf.append(", ");                          }                         element(i, charsetName).toJsonString(buf, charsetName);                      }                      buf.append("]");                      break;
Assert.fail("Test should fail, user shouldn't be allowed to invoke that method");          } catch (WebServiceException e) {             Assert.assertEquals(e.getCause().getMessage(), getNotAllowedExceptionMessage("helloForNone"));          }      }
}          doRemoveRecord(key, source);          if (isEventsEnabled()) {             publishEvent(createCacheExpiredEvent(toEventData(record), CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,                                                   origin, IGNORE_COMPLETION));          }          return null;
* Look for function calls that have no side effects, and annotate them     * that way.     */   final PassFactory markNoSideEffectCalls =        new PassFactory("markNoSideEffectCalls", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
} else {          for (int pId = mLeft; pId < mRight; pId ++) {            long startTimeMs = System.currentTimeMillis();           TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));            buf = file.readByteBuffer(0);            for (int i = 0; i < BLOCKS_PER_FILE; i ++) {              buf.DATA.get(mBuf.array());
}    @Override   public N removeInEdge(Object edge, boolean isSelfLoop) {      if (!isSelfLoop) {        return removeOutEdge(edge);      }
public void testSamplingUsingmessageFrequencyViaDSL() throws Exception {          long totalMessages = 50;          MockEndpoint mock = getMockEndpoint("mock:result");         mock.expectedMinimumMessageCount(10);          mock.setResultWaitTime(100);          for (int i = 0; i < totalMessages; i++) {
* @see <a href="http:       */      public List<SavedSearch> getSavedSearches() throws TwitterException {         return SavedSearch.createSavedSearches(get(getBaseURL() + "saved_searches.json", true));      }      /**
*       * @return the message.       */     @Message(id = 10864, value = "Error obtaining input stream from URL %s -- %s")      String errorObtainingUrlStream(String url, String message);      /**
} else {                           sendColor(command, bridgeId, bulb);                       }                  }                  if (command instanceof PercentType) {                       sendPercent(bulb, rgbwSteps, bridgeId, (PercentType) command, BindingType.brightness);                   }               }
@RestController  public class PetController {     private static String[] PETS = new String[]{"Snoopy", "Fido", "Tony the Tiger"};      @RequestMapping(value = "/petById/{id}", produces = "application/json")      public String petById(@PathVariable("id") Integer id) {
for (int i = 0; i < size; i++) {              map.put(i, i);          }         instance2.shutdown();          mapStore.awaitStores();      }
public interface AMQPEndpointBuilder              extends                  AMQPEndpointConsumerBuilder, AMQPEndpointProducerBuilder {          default AdvancedAMQPEndpointBuilder advanced() {
out.writeInt(migrationData.size());          for (Map.Entry<String, Data> entry : migrationData.entrySet()) {              out.writeUTF(entry.getKey());             out.writeObject(entry.getValue());          }      }
public void restartWithKeepAlive() throws Exception {    ConfigurableEmbeddedServletContainerFactory factory = getFactory();    this.container = factory     .getEmbeddedServletContainer(exampleServletRegistration());    MultiThreadedHttpConnectionManager connectionManager = new MultiThreadedHttpConnectionManager();    HttpClient client = new HttpClient(connectionManager);
public void testMultipleActionsPredicatesOptions_2() throws Exception {    mkdir(tmpdir);   StringBuilder grammarBuilder = new StringBuilder(238);    grammarBuilder.append("grammar T;\n");    grammarBuilder.append("s @after {print($ctx.toStringTree(recog=self))} : e ;\n");    grammarBuilder.append("e : a=e op=('*'|'/') b=e  {}{True}?\n");
if (getDomain() == null && that.getDomain() != null) {              return false;         } else if (getDomain() != null && that.getDomain() == null) {              return false;          }          return getDomain().equalsIgnoreCase(that.getDomain());
public long renew(Token<?> token,                         Configuration conf) throws IOException {       UserGroupInformation.getLoginUser().reloginFromKeytab();        InetSocketAddress serviceAddr = SecurityUtil.getTokenServiceAddr(token);        return
};       final PassFactory replaceIdGenerators =        new PassFactory("replaceIdGenerators", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
}      @Override     public synchronized void updateLOD() {          Iterator<NodeModel> iterator = octree.getNodeIterator();          for (; iterator.hasNext();) {              NodeModel obj = iterator.next();
}, key);    }    catch (EmptyResultDataAccessException e) {    if (LOG.isInfoEnabled()) {      LOG.debug("Failed to find access token for authentication " + authentication);     }    }
public interface AdvancedLinkedInEndpointBuilder              extends                  AdvancedLinkedInEndpointConsumerBuilder, AdvancedLinkedInEndpointProducerBuilder {          default LinkedInEndpointBuilder basic() {
*       * @return an {@link IllegalArgumentException} for the error.       */     @Message(id = 10866, value = "%s is null")      IllegalArgumentException nullVar(String name);      /**
final PrintWriter output = mock(PrintWriter.class);          when(request.getMethod()).thenReturn("POST");         when(request.getPathInfo()).thenReturn("/gc");          when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.<String>of()));          when(response.getWriter()).thenReturn(output);
};       final HotSwapPassFactory checkAccessControls =        new HotSwapPassFactory("checkAccessControls", true) {      @Override      protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
*       * @return the message.       */     @Message(id = 10840, value = "Interrupted waiting for result from server %s")      String interruptedAwaitingResultFromServer(ServerIdentity server);      /**
getNewBlockId();        length -= blockSize;    }     setComplete(length);    }    @Override
InodeDirectory inode2 = createInodeDirectory();      Assert.assertEquals(AbstractInodeTest.TEST_USER_NAME, inode2.getUserName());      Assert.assertEquals(AbstractInodeTest.TEST_GROUP_NAME, inode2.getGroupName());     Assert.assertEquals((short) 0755, inode2.getPermission());    }    /**
* @since Twitter4J 2.0.1       */      public ResponseList<Status> getFavorites(String id) throws TwitterException {         return Status.createStatuseList(get(getBaseURL() + "favorites/" + id + ".json", new PostParameter[0], true));      }      /**
*       * @return a message for the error.       */     @Message(id = 10832, value = "There is already a registered host named '%s'")      String slaveAlreadyRegistered(String slaveName);      /**
* @should fail for an invalid object    * @should throw throw APIException if the input is null    */  public void validate(Object object, Errors errors);   /**    * Returns a list of locales used by the user when searching.
HazelcastInstance server1;      @Before     public void setUp() throws Exception {          NearCacheConfig nearCacheConfig = newNearCacheConfig();          nearCacheConfig.setInvalidateOnChange(true);
public interface SwiftEndpointBuilder extends EndpointProducerBuilder {          default AdvancedSwiftEndpointBuilder advanced() {              return (AdvancedSwiftEndpointBuilder) this;          }
final PassFactory groupVariableDeclarations =        new PassFactory("groupVariableDeclarations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
final PrintWriter output = mock(PrintWriter.class);          when(request.getMethod()).thenReturn("POST");         when(request.getRequestURI()).thenReturn("/gc");          when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.of("runs")));          when(request.getParameterValues("runs")).thenReturn(new String[]{"1"});          when(response.getWriter()).thenReturn(output);
};       final PassFactory sanityCheckVars =        new PassFactory("sanityCheckVars", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
* Process smart name processing - removes unused classes and does referencing     * starting with minimum set of names.     */   final PassFactory smartNamePass =        new PassFactory("smartNamePass", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
};       final PassFactory collapseObjectLiterals =        new PassFactory("collapseObjectLiterals", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
final double min, final int offset, final int count) {      checkIsInMultiOrPipeline();      client.zrevrangeByScoreWithScores(key, max, min, offset, count);     return getTupledSet();    }    @Override
};       final PassFactory collapseObjectLiterals =        new PassFactory("collapseObjectLiterals", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
final PassFactory chainCalls =        new PassFactory("chainCalls", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
} else if (url.startsWith("jdbc:sqlserver")) {        databaseFormatter = new DatabaseFormatterMsSqlServer();      } else if (url.startsWith("jdbc:db2")) {       databaseFormatter = new DatabaseFormatterOracle();      } else if (url.startsWith("jdbc:postgresql")) {       databaseFormatter = new DatabaseFormatterOracle();      }     }
if (LOG.isDebugEnabled()) {          LOG.debug("Current assignment of " +           Bytes.toString(info.getRegionName()) +            " is not valid: serverInfo: " + storedInfo + ", passed startCode: " +            startCode + ", storedInfo.startCode: " +            ((storedInfo != null)? storedInfo.getStartCode(): -1) +
ObjectMapper mapper = new ObjectMapper();     JsonNode rootNode = mapper.readTree(dataString);     int returnCode = rootNode.get("ReturnCode").asInt();      logger.trace("myq ReturnCode: {}", returnCode);     MyQResponseCode rc = MyQResponseCode.fromCode(returnCode);
sum += mBuf.get(pId % 16);            if (DEBUG_MODE) {             buf.DATA.flip();              CommonUtils.printByteBuffer(LOG, buf.DATA);            }            buf.DATA.clear();
};       final PassFactory inlineSimpleMethods =        new PassFactory("inlineSimpleMethods", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
if (handle.delete()) fail();     if (handle.list().length != 0) fail();     if (handle.child("meow").exists()) fail();    if (handle.parent().exists()) fail();     try {      handle.read().close();      fail();
};       final PassFactory checkConsts =        new PassFactory("checkConsts", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}    @Override   public synchronized void close() {      synchronized (this) {        checkClosed();        closed = true;
invalidateHierarchy();    }   public CharSequence getText () {     return text;    }
*       * @return the message.       */     @Message(id = 10841, value = "Exception getting result from server %s: %s")      String exceptionAwaitingResultFromServer(ServerIdentity server, String message);      /**
}        statsData.setDoubleStats(doubleStats);        statsObj.setStatsData(statsData); } else if (columnType.toLowerCase().startsWith("string")) {        StringColumnStatsData stringStats = new StringColumnStatsData();        stringStats.setMaxColLenIsSet(false);        stringStats.setAvgColLenIsSet(false);
}          if (result && isStatisticsEnabled()) {              statistics.increaseCachePuts(1);             statistics.addPutTimeNanos(System.nanoTime() - start);          }          return result;      }
ConfigurableEmbeddedServletContainerFactory factory = getFactory();    final Date[] date = new Date[1];    this.container = factory     .getEmbeddedServletContainer(new ServletContextInitializer() {       @Override       public void onStartup(ServletContext servletContext)         throws ServletException {
public void test_cn() throws Exception {          Entity vo = JSON.parseObject("{\"date\":\"2016-05-06\"}", Entity.class);         Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);          calendar.setTime(vo.date);          Assert.assertEquals(2016, calendar.get(Calendar.YEAR));          Assert.assertEquals(4, calendar.get(Calendar.MONTH));
Assert.fail("Test should fail, user shouldn't be allowed to invoke that method");          } catch (WebServiceException e) {             Assert.assertEquals(e.getCause().getMessage(), getNotAllowedExceptionMessage("helloForRoles"));          }      }
final Hpack.Reader hpackReader;       Http2Reader(BufferedSource source, boolean client) {      this.source = source;      this.client = client;      this.continuation = new ContinuationSource(this.source);
public interface AdvancedFlatpackEndpointBuilder              extends                  AdvancedFlatpackEndpointConsumerBuilder, AdvancedFlatpackEndpointProducerBuilder {          default FlatpackEndpointBuilder basic() {
};       final PassFactory latePeepholeOptimizations =        new PassFactory("latePeepholeOptimizations", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
Properties producerProps = new Properties();   producerProps.setProperty("max.request.size", Integer.toString(1024 * 1024 * 14));    producerProps.setProperty("retries", "3");    producerProps.setProperty(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, brokerConnectionStrings);
*/  class HornetQEmbeddedConfigurationFactory {  private Log logger = LogFactory.getLog(HornetQAutoConfiguration.class);   private final Embedded properties;
}          Map<String, Object> responseModels = IntrospectionSupport.extractProperties(parameters, "responseModel.");         for (Map.Entry<String, Object> entry : responseModels.entrySet()) {              configuration.addResponseModel(                  entry.getKey(),                  EndpointHelper.resolveParameter(context, (String)entry.getValue(), Class.class));
public interface HipchatEndpointProducerBuilder              extends                  EndpointProducerBuilder {          default AdvancedHipchatEndpointProducerBuilder advanced() {
}      @FixMethodOrder(MethodSorters.NAME_ASCENDING)     private static class DummySortWithNameAsc {          Object alpha(int i, double d, Thread t) {return null;}          void beta(int[][] x) {}          int gamma() {return 0;}
};       final PassFactory inlineFunctions =        new PassFactory("inlineFunctions", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
String annotation)      {          if (ast == null) {             throw new IllegalArgumentException("the ast is null");          }          if (annotation == null) {             throw new IllegalArgumentException("the annotation is null");          }          if (StringUtils.isBlank(annotation)) {
* replacement values for the classnames.  If null, the raw class names are     * inlined.     */   final PassFactory closureReplaceGetCssName =        new PassFactory("renameCssNames", true) {      @Override      protected CompilerPass createInternal(final AbstractCompiler compiler) {
* Look for function calls that are pure, and annotate them     * that way.     */   final PassFactory markPureFunctions =        new PassFactory("markPureFunctions", true) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
};       final PassFactory inlineVariables =        new PassFactory("inlineVariables", false) {      @Override      protected CompilerPass createInternal(AbstractCompiler compiler) {
}              }          }         if (keys.isEmpty()) {              return result;          }          MapGetAllRequest request = new MapGetAllRequest(name, keySet);
ControlFlowGraph<Node> computeCFG() {     logger.fine("Computing Control Flow Graph");      Tracer tracer = newTracer("computeCFG");      ControlFlowAnalysis cfa = new ControlFlowAnalysis(this, true, false);      process(cfa);
