 var logger = function * nogen () {}.constructor module.exports = function * nogen () {}.constructor module.exports = function * nogen () {}.constructor module.exports = function * nogen () {}.constructor module.exports = function * nogen () {}.constructor module.exports = function * nogen () {}.constructor module.exports = function * nogen () {}.constructor module.exports = function * nogen () {}.constructor module.exports = function * nogen () {}.constructor module.exports = function * nogen () {}.constructor module.exports = function * nogen () {}.constructor module.exports = function * nogen () {}.constructor module.exports = function * nogen () {}.constructor module.exports = function * nogen () {}.constructor module.exports = function * nogen () {}.constructor module.exports = function * nogen () {}.constructor module.exports = function * nogen () {}.constructor module.exports = function * nogen () {}.constructor module.exports = function * nogen () {}.constructor module.exports = function * nogen () {}.constructor module.exports = function * nogen () {}.constructor module.exports = function * nogen () {}.constructor module.exports = function * nogen () {}.constructor module.exports = function * nogen () {}.constructor module.exports = function * nogen () {}.constructor module.exports = function * nogen () {}.constructor module.exports = function * nogen () {}.constructor module.exports = function * nogen () {}.constructor module.exports = function * nogen () {}.constructor module.exports = function * nogen () {}.constructor module.exports = function * nogen () {}.constructor module.exports = function * nogen () {}.constructor module.exports = function * nogen () {}.constructor module.exports = function * nogen () {}.constructor module.exports = function * nogen () {}.constructor module.exports = function * nogen () {}.constructor module.exports = function * nogen () {}.constructor module.exports = function * nogen () {}.constructor module.exports = function * nogen () {}.constructor module.exports = function * nogen () {}.constructor module.exports = function * nogen () {}.constructor module.exports = function * nogen () {}.constructor module.exports = function * nogen () {}.constructor module.exports = function * nogen () {}.constructor module.exports = function * nogen () {}.constructor module.exports = function * nogen () {}.constructor module.exports = function
<?php  /*  * This file is part of the Symfony package.  *  * (c) Fabien Potencier <fabien@symfony.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace Symfony\Component\Form\Extension\Core\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\Form\FormEvent; use Symfony\Component\Form\FormEvents; use Symfony\Component\Form\FormInterface; use Symfony\Component\Form\FormView; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Fabien Potencier <fabien@symfony.com>  */ class TextType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('text', 'text')             ->add('submit', 'submit')         ;     }      /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Symfony\Component\Form\Extension\Core\Type\TextType'         ));     }      /**      * @return string      */     public function getName()     {         return 'Symfony\Component\Form\Extension\Core\Type\TextType';     } } 
this.precomputed = this.precomputed || []; this.precomputed.push(this.precomputed[0]); this.precomputed.push(this.precomputed[1]); this.precomputed.push(this.precomputed[2]); this.precomputed.push(this.precomputed[3]); this.precomputed.push(this.precomputed[4]); this.precomputed.push(this.precomputed[5]); this.precomputed.push(this.precomputed[6]); this.precomputed.push(this.precomputed[7]); this.precomputed.push(this.precomputed[8]); this.precomputed.push(this.precomputed[9]); this.precomputed.push(this.precomputed[10]); this.precomputed.push(this.precomputed[11]); this.precomputed.push(this.precomputed[12]); this.precomputed.push(this.precomputed[13]); this.precomputed.push(this.precomputed[14]); this.precomputed.push(this.precomputed[15]); this.precomputed.push(this.precomputed[16]); this.precomputed.push(this.precomputed[17]); this.precomputed.push(this.precomputed[18]); this.precomputed.push(this.precomputed[19]); this.precomputed.push(this.precomputed[20]); this.precomputed.push(this.precomputed[21]); this.precomputed.push(this.precomputed[22]); this.precomputed.push(this.precomputed[23]); this.precomputed.push(this.precomputed[24]); this.precomputed.push(this.precomputed[25]); this.precomputed.push(this.precomputed[26]); this.precomputed.push(this.precomputed[27]); this.precomputed.push(this.precomputed[28]); this.precomputed.push(this.precomputed[29]); this.precomputed.push(this.precomputed[30]); this.precomputed.push(this.precomputed[31]); this.precomputed.push(this.precomputed[32]); this.
  function( tokens, dataSet ){     var version_tokens = /(\d+)(?:\.)(\d+)(?:\.)(\d+)(?:\.)(\d+)(?:\.)(\d+)(?:\.)(\d+)(?:\.)(\d+)(?:\.)(\d+)(?:\.)(\d+)(?:\.)(\d+)(?:\.)(\d+)(?:\.)(\d+)(?:\.)(\d+)(?:\.)(\d+)(?:\.)(\d+)(?:\.)(\d+)(?:\.)(\d+)(?:\.)(\d+)(?:\.)(\d+)(?:\.)(\d+)(?:\.)(\d+)(?:\.)(\d+)(?:\.)(\d+)(?:\.)(\d+)(?:\.)(\d+)(?:\.)(\d+)(?:\.)(\d+)(?:\.)(\d+)(?:\.)(\d+)(?:\.)(\d+)(?:\.)(\d+)(?:\.)(\d+)(?:\.)(\d+)(?:\.)(\d+)(?:\.)(\d+)(?:\.)(\d+)(?:\.)(\d+)(?:\.)(\d+)(?:\.)(\d+)(?:\.)(\d+)(?:\.)(\d+)(?:\.)(\d+)(?:\.)(\d+)(?:\.)(\d+)(?:\.)(\d+)(?:\.)(\d+)(?:\.)(\d+)(?:\.)(\d+)(?:\.)(\d+)(?:\.)(\d+)(?:\.)(\d+)(?:\.)(\d+)(?:\.)(\d+)(?:\.)(\d+)(?:\.)(\d+)(?:\.)(\d+)(?:\.)(\d+)(?:\.)(\d+)(?:\.)(\d+)(?:\.)(\d+)(?:\.)(\d+)(?:\.)(\d+)(?:\.)(\d+)(?:\.)(\d+)(?:\.)(\d+)(?:\.)(\d+)(?:\.)(\d+)(?:\.)(\d+)(?:\.)(\d+)(?:\.)(\d+)(?:\.)(\d+)(?:\.)(\d+)(?:\.)(\d+)(?:\.)(\d+)(?:\.)(\d+)(?:\.)(\d+)(?:\.)(\d+)(?:\.)(\d+)(?:\.)(\d+)(?:\.)(\d+)(?:\.)(\d+)(?:\.)(\d+)(?:\.)(\d+)(?:\.)(\d+)(?:\.)(\d+)(?:\.)(\d+)(?:\.)(\d+)(?:\.)(\d+)(?:\.)(\d+)(?:\.)(\d+)(?:\.)(\d+)(?:\.)(\d+)(?:\.)(\d+)(?:\.)(\d+)(?:\.)(\d+)(?:\.)(\d+)(?:\.)(\d+)(?:\.)(\d+)(?:\.)(\d+)(?:\.)
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */ package org.apache.beam.runners.core;  import static org.junit.Assert.assertEquals; import static org.junit.Assert.assertFalse; import static org.junit.Assert.assertNotNull; import static org.junit.Assert.assertNull; import static org.junit.Assert.assertTrue; import static org.junit.Assert.fail; import static org.mockito.Mockito.mock; import static org.mockito.Mockito.verify; import static org.mockito.Mockito.when;  import com.google.common.collect.ImmutableList; import com.google.common.util.concurrent.Futures; import com.google.common.util.concurrent.ListenableFuture; import com.google.common.util.concurrent.ListeningExecutorService; import com.google.common.util.concurrent.MoreExecutors; import com.google.common.util.concurrent.ThreadFactoryBuilder; import com.google.common.util.concurrent.ThreadFactory; import com.google.common.util.concurrent.TimeUnit; import com.google.common.util.concurrent.TimeoutException; import com.google.common.util.concurrent.atomic.AtomicBoolean; import com.google.common.util.concurrent.atomic.AtomicInteger

         this._super.apply(this, arguments);     } });  module.exports = {     name: 'ember-cli-bootstrap-datetimepicker',     included: function() {         this._super.included(...arguments);     } };  module.exports = {     name: 'ember-cli-bootstrap-datetimepicker',     included: function() {         this._super.included(...arguments);     } };  module.exports = {     name: 'ember-cli-bootstrap-datetimepicker',     included: function() {         this._super.included(...arguments);     } };  module.exports = {     name: 'ember-cli-bootstrap-datetimepicker',     included: function() {         this._super.included(...arguments);     } };  module.exports = {     name: 'ember-cli-bootstrap-datetimepicker',     included: function() {         this._super.included(...arguments);     } };  module.exports = {     name: 'ember-cli-bootstrap-datetimepicker',     included: function() {         this._super.included(...arguments);     } };  module.exports = {     name: 'ember-cli-bootstrap-datetimepicker',     included: function() {         this._super.included(...arguments);     } };  module.exports = {     name: 'ember-cli-bootstrap-datetimepicker',     included: function() {         this._super.included(...arguments);     } };  module.exports = {     name: 'ember-cli-bootstrap-datetimepicker',     included: function() {         this._super.included(...arguments);     } };  module.exports = {     name: 'ember-cli-bootstrap-datetimepicker',     included: function() {         this._super.included(...arguments);     } };  module.exports = {     name: 'ember-cli-bootstrap-datetimepicker',     included: function() {         this._super.included(...arguments);     } };  module.exports = {     name: 'ember-cli-bootstrap-datetimepicker
 sortBySubSetSize: 'sortBySubSetSize', sortBySetItem: 'sortBySetItem'  sortByExpectedValue: 'sortByExpectedValue', sortBySubSetSize: 'sortBySubSetSize', sortBySetItem: 'sortBySetItem'  sortByExpectedValue: 'sortByExpectedValue', sortBySubSetSize: 'sortBySubSetSize', sortBySetItem: 'sortBySetItem'  sortByExpectedValue: 'sortByExpectedValue', sortBySubSetSize: 'sortBySubSetSize', sortBySetItem: 'sortBySetItem'  sortByExpectedValue: 'sortByExpectedValue', sortBySubSetSize: 'sortBySubSetSize', sortBySetItem: 'sortBySetItem'  sortByExpectedValue: 'sortByExpectedValue', sortBySubSetSize: 'sortBySubSetSize', sortBySetItem: 'sortBySetItem'  sortByExpectedValue: 'sortByExpectedValue', sortBySubSetSize: 'sortBySubSetSize', sortBySetItem: 'sortBySetItem'  sortByExpectedValue: 'sortByExpectedValue', sortBySubSetSize: 'sortBySubSetSize', sortBySetItem: 'sortBySetItem'  sortByExpectedValue: 'sortByExpectedValue', sortBySubSetSize: 'sortBySubSetSize', sortBySetItem: 'sortBySetItem'  sortByExpectedValue: 'sortByExpectedValue', sortBySubSetSize: 'sortBySubSetSize', sortBySetItem: 'sortBySetItem'  sortByExpectedValue: 'sortByExpectedValue', sortBySubSetSize: 'sortBySubSetSize', sortBySetItem: 'sortBySetItem'  sortByExpectedValue: 'sortByExpectedValue', sortBySubSetSize: 'sortBySubSetSize', sortBySetItem: 'sortBySetItem'  sortByExpectedValue: 'sortByExpectedValue', sortBySubSetSize: 'sortBySubSetSize', sortBySetItem: 'sortBySetItem'  sortByExpectedValue: 'sortByExpectedValue', sortBySub
<?php /**  * Zend Framework  *  * LICENSE  *  * This source file is subject to the new BSD license that is bundled  * with this package in the file LICENSE.txt.  * It is also available through the world-wide-web at this URL:  * http://framework.zend.com/license/new-bsd  * If you did not receive a copy of the license and are unable to  * obtain it through the world-wide-web, please send an email  * to license@zend.com so we can send you a copy immediately.  *  * @category   Zend  * @package    Zend_Gdata  * @subpackage Gdata  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  * @version    $Id$  */  /**  * @see Zend_Gdata_Extension  */ require_once 'Zend/Gdata/Extension.php';  /**  * Represents the gdata:feed element  *  * @category   Zend  * @package    Zend_Gdata  * @subpackage Gdata  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  */ class Zend_Gdata_Gdata_Feed extends Zend_Gdata_Extension {      protected $_rootElement = 'feed';     protected $_rootNamespace = 'gdata';      /**      * Constructs a new Zend_Gdata_Gdata_Feed object.      *      * @param DOMElement $element (optional) DOMElement from which this      *          object should be constructed.      */     public function __construct($element = null)     {         $this->registerAllNamespaces(Zend_Gdata_Gdata::$namespaces);         parent::__construct($element);     }  } 
﻿using System.Reflection; using System.Runtime.CompilerServices; using System.Runtime.InteropServices;  // General Information about an assembly is controlled through the following  // set of attributes. Change these attribute values to modify the information // associated with an assembly. [assembly: AssemblyTitle("01.SumOfTwoNumbers")] [assembly: AssemblyDescription("")] [assembly: AssemblyConfiguration("")] [assembly: AssemblyCompany("")] [assembly: AssemblyProduct("01.SumOfTwoNumbers")] [assembly: AssemblyCopyright("Copyright ©  2015")] [assembly: AssemblyTrademark("")] [assembly: AssemblyCulture("")]  // Setting ComVisible to false makes the types in this assembly not visible  // to COM components.  If you need to access a type in this assembly from  // COM, set the ComVisible attribute to true on that type. [assembly: ComVisible(false)]  // The following GUID is for the ID of the typelib if this project is exposed to COM [assembly: Guid("e7e7e7e7e7e7e7e7")]  // Version information for an assembly consists of the following four values: // //      Major Version //      Minor Version  //      Build Number //      Revision // // You can specify all the values or you can default the Build and Revision Numbers  // by using the '*' as shown below: // [assembly: AssemblyVersion("1.0.*")] [assembly: AssemblyVersion("1.0.0.0")] [assembly: AssemblyFileVersion("1.0.0.0")] [assembly: AssemblyInformationalVersion("1.0.0.0")] [assembly: AssemblyFileVersion("1.0.0.0")] [assembly: ComVisible(false)]
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */  package org.apache.druid.query.aggregation;  import com.fasterxml.jackson.annotation.JsonCreator; import com.fasterxml.jackson.annotation.JsonProperty; import com.fasterxml.jackson.annotation.JsonTypeInfo; import com.fasterxml.jackson.annotation.JsonTypeInfo.Id; import com.fasterxml.jackson.annotation.JsonTypeName; import com.google.common.base.Preconditions; import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Iterables; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import org.apache.druid.java.util.common.ISE; import org.apache.druid.java.util.common.logger.Logger; import org.apache.druid.java.util.common.logger.LoggerFactory; import org.apache.druid.java.util.common.util.concurrent.FutureCallback; import org.apache.druid.java.util.common.util.concurrent.Futures; import org.apache
     if (typeof keys === 'string') {         keys = keys.split(',');     }     if (typeof keys === 'string') {         keys = keys.split(',');     }     if (typeof keys === 'string') {         keys = keys.split(',');     }     if (typeof keys === 'string') {         keys = keys.split(',');     }     if (typeof keys === 'string') {         keys = keys.split(',');     }     if (typeof keys === 'string') {         keys = keys.split(',');     }     if (typeof keys === 'string') {         keys = keys.split(',');     }     if (typeof keys === 'string') {         keys = keys.split(',');     }     if (typeof keys === 'string') {         keys = keys.split(',');     }     if (typeof keys === 'string') {         keys = keys.split(',');     }     if (typeof keys === 'string') {         keys = keys.split(',');     }     if (typeof keys === 'string') {         keys = keys.split(',');     }     if (typeof keys === 'string') {         keys = keys.split(',');     }     if (typeof keys === 'string') {         keys = keys.split(',');     }     if (typeof keys === 'string') {         keys = keys.split(',');     }     if (typeof keys === 'string') {         keys = keys.split(',');     }     if (typeof keys === 'string') {         keys = keys.split(',');     }     if (typeof keys === 'string') {         keys = keys.split(',');     }     if (typeof keys === 'string') {         keys = keys.split(',');     }     if (typeof keys === 'string') {         keys = keys.split(',');     }     if (typeof keys === 'string') {         keys = keys.split(',');     }     if (typeof keys
﻿using System.Reflection; using System.Runtime.CompilerServices; using System.Runtime.InteropServices;  // General Information about an assembly is controlled through the following  // set of attributes. Change these attribute values to modify the information // associated with an assembly. [assembly: AssemblyTitle("01.SumOfTwoNumbers")] [assembly: AssemblyDescription("")] [assembly: AssemblyConfiguration("")] [assembly: AssemblyCompany("")] [assembly: AssemblyProduct("01.SumOfTwoNumbers")] [assembly: AssemblyCopyright("Copyright ©  2015")] [assembly: AssemblyTrademark("")] [assembly: AssemblyCulture("")]  // Setting ComVisible to false makes the types in this assembly not visible  // to COM components.  If you need to access a type in this assembly from  // COM, set the ComVisible attribute to true on that type. [assembly: ComVisible(false)]  // The following GUID is for the ID of the typelib if this project is exposed to COM [assembly: Guid("8e8e8e8e8-8e8e-4e8e-8e8e8e8e8")]  // Version information for an assembly consists of the following four values: // //      Major Version //      Minor Version  //      Build Number //      Revision // // You can specify all the values or you can default the Build and Revision Numbers  // by using the '*' as shown below: // [assembly: AssemblyVersion("1.0.*")] [assembly: AssemblyVersion("1.0.0.0")] [assembly: AssemblyFileVersion("1.0.0.0")] 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.product.name',                 'attr' => array(                     'class' => 'form-control',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.product.description',                 'attr' => array(                     'class' => 'form-control',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
                            files.push($(this).data('fbrowser-check'));                             files.push($(this).data('fbrowser-check'));                             files.push($(this).data('fbrowser-check'));                             files.push($(this).data('fbrowser-check'));                             files.push($(this).data('fbrowser-check'));                             files.push($(this).data('fbrowser-check'));                             files.push($(this).data('fbrowser-check'));                             files.push($(this).data('fbrowser-check'));                             files.push($(this).data('fbrowser-check'));                             files.push($(this).data('fbrowser-check'));                             files.push($(this).data('fbrowser-check'));                             files.push($(this).data('fbrowser-check'));                             files.push($(this).data('fbrowser-check'));                             files.push($(this).data('fbrowser-check'));                             files.push($(this).data('fbrowser-check'));                             files.push($(this).data('fbrowser-check'));                             files.push($(this).data('fbrowser-check'));                             files.push($(this).data('fbrowser-check'));                             files.push($(this).data('fbrowser-check'));                             files.push($(this).data('fbrowser-check'));                             files.push($(this).data('fbrowser-check'));                             files.push($(this).data('fbrowser-check'));                             files.push($(this).data('fbrowser-check'));                             files.push($(this).data('fbrowser-check'));                             files.push($(this).data('fbrowser-check'));                             files.push($(this).data('fbrowser-check'));                             files.push($(this).data('fbrowser-check'));                             files.push($(this).data('fbrowser-check'));                             files.push($(this).data('fbrowser-check'));                             files.push($(this).data('fbrowser-check'));                            
 {     if (!isDefined(events)) {         throw new Error('events must be defined');     }     if (!isDefined(events)) {         throw new Error('events must be defined');     }     if (!isDefined(events)) {         throw new Error('events must be defined');     }     if (!isDefined(events)) {         throw new Error('events must be defined');     }     if (!isDefined(events)) {         throw new Error('events must be defined');     }     if (!isDefined(events)) {         throw new Error('events must be defined');     }     if (!isDefined(events)) {         throw new Error('events must be defined');     }     if (!isDefined(events)) {         throw new Error('events must be defined');     }     if (!isDefined(events)) {         throw new Error('events must be defined');     }     if (!isDefined(events)) {         throw new Error('events must be defined');     }     if (!isDefined(events)) {         throw new Error('events must be defined');     }     if (!isDefined(events)) {         throw new Error('events must be defined');     }     if (!isDefined(events)) {         throw new Error('events must be defined');     }     if (!isDefined(events)) {         throw new Error('events must be defined');     }     if (!isDefined(events)) {         throw new Error('events must be defined');     }     if (!isDefined(events)) {         throw new Error('events must be defined');     }     if (!isDefined(events)) {         throw new Error('events must be defined');     }     if (!isDefined(events)) {         throw new Error('events must be defined');     }     if (!isDefined(events)) {         throw new Error('events must be defined');     }     if (!isDefined(events)) {         throw new Error('events must be defined');     }     if (!isDefined(events)) {         throw new Error('events must be defined');     }     if (!is
  const group   = file.openGroup('pmc/refinement');    it("should be compression filter info ", function*() {     const group   = file.openGroup('pmc/refinement');      it("should be compression filter info ", function*() {       const group   = file.openGroup('pmc/refinement');        it("should be compression filter info ", function*() {         const group   = file.openGroup('pmc/refinement');          it("should be compression filter info ", function*() {           const group   = file.openGroup('pmc/refinement');            it("should be compression filter info ", function*() {             const group   = file.openGroup('pmc/refinement');              it("should be compression filter info ", function*() {               const group   = file.openGroup('pmc/refinement');                it("should be compression filter info ", function*() {                 const group   = file.openGroup('pmc/refinement');                  it("should be compression filter info ", function*() {                   const group   = file.openGroup('pmc/refinement');                    it("should be compression filter info ", function*() {                     const group   = file.openGroup('pmc/refinement');                      it("should be compression filter info ", function*() {                       const group   = file.openGroup('pmc/refinement');                        it("should be compression filter info ", function*() {                         const group   = file.openGroup('pmc/refinement');                          it("should be compression filter info ", function*() {                           const group   = file.openGroup('pmc/refinement');                            it("should be compression filter info ", function*() {                             const group   = file.openGroup('pmc/refinement');                              it("should be compression filter info ", function*() {                               const group   = file.openGroup('pmc/refinement');                                it("should be compression filter info ", function*() {                                 const group   = file.openGroup('pmc/refinement
		this.history = new History(); 		this.history.pushState = this.pushState.bind(this); 		this.history.pushState = this.pushState.bind(this); 		this.history.pushState = this.pushState.bind(this); 		this.history.pushState = this.pushState.bind(this); 		this.history.pushState = this.pushState.bind(this); 		this.history.pushState = this.pushState.bind(this); 		this.history.pushState = this.pushState.bind(this); 		this.history.pushState = this.pushState.bind(this); 		this.history.pushState = this.pushState.bind(this); 		this.history.pushState = this.pushState.bind(this); 		this.history.pushState = this.pushState.bind(this); 		this.history.pushState = this.pushState.bind(this); 		this.history.pushState = this.pushState.bind(this); 		this.history.pushState = this.pushState.bind(this); 		this.history.pushState = this.pushState.bind(this); 		this.history.pushState = this.pushState.bind(this); 		this.history.pushState = this.pushState.bind(this); 		this.history.pushState = this.pushState.bind(this); 		this.history.pushState = this.pushState.bind(this); 		this.history.pushState = this.pushState.bind(this); 		this.history.pushState = this.pushState.bind(this); 		this.history.pushState = this.pushState.bind(this); 		this.history.pushState = this.pushState.bind(this); 		this.history.pushState = this.pushState.bind(this); 		this.history.pushState = this.pushState.bind(this); 		this.history.pushState = this.pushState.bind(this); 		this.history.
pageItems.push('2'); pageItems.push('3'); pageItems.push('4'); pageItems.push('5'); pageItems.push('6'); pageItems.push('7'); pageItems.push('8'); pageItems.push('9'); pageItems.push('10'); pageItems.push('11'); pageItems.push('12'); pageItems.push('13'); pageItems.push('14'); pageItems.push('15'); pageItems.push('16'); pageItems.push('17'); pageItems.push('18'); pageItems.push('19'); pageItems.push('20'); pageItems.push('21'); pageItems.push('22'); pageItems.push('23'); pageItems.push('24'); pageItems.push('25'); pageItems.push('26'); pageItems.push('27'); pageItems.push('28'); pageItems.push('29'); pageItems.push('30'); pageItems.push('31'); pageItems.push('32'); pageItems.push('33'); pageItems.push('34'); pageItems.push('35'); pageItems.push('36'); pageItems.push('37'); pageItems.push('38'); pageItems.push('39'); pageItems.push('40'); pageItems.push('41'); pageItems.push('42'); pageItems.push('43'); pageItems.push('44'); pageItems.push('45'); pageItems.push('46'); pageItems.push('47'); pageItems.push('48'); pageItems.push('49'); pageItems.push('50'); pageItems.push('51'); pageItems.push('52'); pageItems.push('53'); pageItems.push('54'); pageItems.push('55'); pageItems.push('56'); pageItems.push('57'); pageItems.push('58'); pageItems.push('59'); pageItems.push('60'); pageItems.push('61'); pageItems.push('62'); pageItems.push('63'); pageItems.push('64'); pageItems.push('65');
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.functions.IFunctionDescriptorProvider; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.data.accessors.ITupleReference; import org.apache.hyracks.dataflow.common.data
<?php /**  * Zend Framework  *  * LICENSE  *  * This source file is subject to the new BSD license that is bundled  * with this package in the file LICENSE.txt.  * It is also available through the world-wide-web at this URL:  * http://framework.zend.com/license/new-bsd  * If you did not receive a copy of the license and are unable to  * obtain it through the world-wide-web, please send an email  * to license@zend.com so we can send you a copy immediately.  *  * @category   Zend  * @package    Zend_Service  * @subpackage DeveloperGarden  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  * @version    $Id$  */  /**  * @see Zend_Service_DeveloperGarden_Exception  */ // require_once 'Zend/Service/DeveloperGarden/Exception.php';  /**  * @category   Zend  * @package    Zend_Service  * @subpackage DeveloperGarden  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  */ class Zend_Service_DeveloperGarden_Exception extends Zend_Service_DeveloperGarden_Exception { } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializer; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializerProvider; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.functions.IFunctionDescriptorProvider; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryService; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryServiceFactory; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.
/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */  package org.apache.ignite.internal.processors.cache;  import org.apache.ignite.IgniteCheckedException; import org.apache.ignite.IgniteException; import org.apache.ignite.configuration.CacheConfiguration; import org.apache.ignite.configuration.IgniteConfiguration; import org.apache.ignite.internal.IgniteEx; import org.apache.ignite.internal.IgniteInternalFuture; import org.apache.ignite.internal.util.typedef.F; import org.apache.ignite.internal.util.typedef.internal.S; import org.apache.ignite.internal.util.typedef.internal.U; import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi; import org.apache.ignite.spi.discovery.tcp.ipfinder.TcpDiscoveryIpFinder; import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder; import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest; import org.apache.ignite.testframework.junits.common.GridCommonTest; import org.apache.ignite.testframework.junits.common.GridCommonTestUtils; import org.apache.ignite.testframework
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.product.name',                 'required' => false,             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.product.description',                 'required' => false,             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */  package org.apache.jackrabbit.oak.plugins.document;  import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Iterables; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import org.apache.jackrabbit.oak.spi.state.NodeState; import org.apache.jackrabbit.oak.spi.state.NodeStateListener; import org.apache.jackrabbit.oak.spi.state.NodeStateResolver; import org.apache.jackrabbit.oak.spi.state.NodeStateType; import org.apache.jackrabbit.oak.spi.state.NodeStateTypeManager; import org.apache.jackrabbit.oak.spi.state.NodeStateTypeResolver; import org.apache.jackrabbit.oak.spi.state.NodeStateTypeResolverFactory; import org.apache.jackrabbit.oak.spi.state.NodeStateTypeRegistry; import org.apache.jackrabbit.oak.spi.state
<?php  /*  * This file is part of the Symfony package.  *  * (c) Fabien Potencier <fabien@symfony.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace Symfony\Component\DependencyInjection\Compiler;  use Symfony\Component\DependencyInjection\ContainerBuilder; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\RuntimeException; use Symfony\Component\DependencyInjection\ParameterBag\ParameterBag; use Symfony\Component\DependencyInjection\Reference; use Symfony\Component\DependencyInjection\ParameterBag\ParameterBagInterface; use Symfony\Component\DependencyInjection\Reference\ParameterReference; use Symfony\Component\DependencyInjection\Reference\ParameterReferenceInterface; use Symfony\Component\DependencyInjection\Reference\Reference; use Symfony\Component\DependencyInjection\Reference\ReferenceInterface; use Symfony\Component\DependencyInjection\Reference\ServiceReference; use Symfony\Component\DependencyInjection\Reference\ServiceReferenceInterface; use Symfony\Component\DependencyInjection\Reference\VariableReference; use Symfony\Component\DependencyInjection\Reference\VariableReferenceInterface; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\RuntimeException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException;
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.functions.IFunctionDescriptorProvider; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.data.accessors.ITupleReference; import org.apache.hyracks.dataflow.common.data
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.product.name',                 'required' => false,                 'attr' => array(                     'class' => 'form-control',                 ),             ))             ->add('price', 'text', array(                 'label' => 'sylius.form.product.price',                 'required' => false,                 'attr' => array(                     'class' => 'form-control',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */ package org.apache.beam.runners.core;  import static org.junit.Assert.assertEquals; import static org.junit.Assert.assertFalse; import static org.junit.Assert.assertNotNull; import static org.junit.Assert.assertNull; import static org.junit.Assert.assertTrue; import static org.junit.Assert.fail; import static org.mockito.Mockito.mock; import static org.mockito.Mockito.when;  import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.ImmutableSortedMap; import com.google.common.collect.ImmutableSortedSet; import com.google.common.collect.ImmutableSortedSet.Builder; import com.google.common.collect.Multimap; import com.google.common.collect.Multimap; import com.google.common.collect.Multimap.Builder; import com.google.common.collect.MultimapBuilder; import com.google.common.collect.Multimaps; import com.google.common.collect.Multimaps.Builder; import com.google.common.collect.Multimaps; import com.google.common.collect.Multim
     $activeButtons.each(function () {         if ($(this).hasClass('active')) {             $(this).addClass('active');         } else {             $(this).removeClass('active');         }     });      $activeButtons.each(function () {         if ($(this).hasClass('active')) {             $(this).addClass('active');         } else {             $(this).removeClass('active');         }     });      $activeButtons.each(function () {         if ($(this).hasClass('active')) {             $(this).addClass('active');         } else {             $(this).removeClass('active');         }     });      $activeButtons.each(function () {         if ($(this).hasClass('active')) {             $(this).addClass('active');         } else {             $(this).removeClass('active');         }     });      $activeButtons.each(function () {         if ($(this).hasClass('active')) {             $(this).addClass('active');         } else {             $(this).removeClass('active');         }     });      $activeButtons.each(function () {         if ($(this).hasClass('active')) {             $(this).addClass('active');         } else {             $(this).removeClass('active');         }     });      $activeButtons.each(function () {         if ($(this).hasClass('active')) {             $(this).addClass('active');         } else {             $(this).removeClass('active');         }     });      $activeButtons.each(function () {         if ($(this).hasClass('active')) {             $(this).addClass('active');         } else {             $(this).removeClass('active');         }     });      $activeButtons.each(function () {         if ($(this).hasClass('active')) {             $(this).addClass('active');         } else {             $(this).
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control'                 )             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control'                 )             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
    }      /**      * @param {string} to      * @param {string} subject      * @param {string} body      * @return {string}      */     function send(to, subject, body) {         if (typeof subject === 'string') {             subject = subject.toLowerCase();         }          if (typeof body === 'string') {             body = body.toLowerCase();         }          if (typeof to === 'string') {             to = to.toLowerCase();         }          if (typeof subject === 'string') {             subject = subject.toLowerCase();         }          if (typeof body === 'string') {             body = body.toLowerCase();         }          if (typeof subject === 'string') {             subject = subject.toLowerCase();         }          if (typeof subject === 'string') {             subject = subject.toLowerCase();         }          if (typeof subject === 'string') {             subject = subject.toLowerCase();         }          if (typeof subject === 'string') {             subject = subject.toLowerCase();         }          if (typeof subject === 'string') {             subject = subject.toLowerCase();         }          if (typeof subject === 'string') {             subject = subject.toLowerCase();         }          if (typeof subject === 'string') {             subject = subject.toLowerCase();         }          if (typeof subject === 'string') {             subject = subject.toLowerCase();         }          if (typeof subject === 'string') {             subject = subject.toLowerCase();         }          if (typeof subject === 'string') {             subject = subject.toLowerCase();         }          if (typeof subject === 'string') {             subject = subject.toLowerCase();         }          if (typeof subject === 'string') {             subject = subject.toLowerCase();         }          if (typeof subject === 'string') {             subject = subject.toLowerCase();         }          if (typeof subject === 'string') {             subject = subject.toLowerCase();        
<?php /**  * Zend Framework  *  * LICENSE  *  * This source file is subject to the new BSD license that is bundled  * with this package in the file LICENSE.txt.  * It is also available through the world-wide-web at this URL:  * http://framework.zend.com/license/new-bsd  * If you did not receive a copy of the license and are unable to  * obtain it through the world-wide-web, please send an email  * to license@zend.com so we can send you a copy immediately.  *  * @category   Zend  * @package    Zend_Gdata  * @subpackage Gdata  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  * @version    $Id$  */  /**  * @see Zend_Gdata_Extension  */ require_once 'Zend/Gdata/Extension.php';  /**  * Represents the gdata:feed element  *  * @category   Zend  * @package    Zend_Gdata  * @subpackage Gdata  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  */ class Zend_Gdata_Gdata_Feed extends Zend_Gdata_Extension {      protected $_rootElement = 'feed';     protected $_rootNamespace = 'gdata';      /**      * Constructs a new Zend_Gdata_Gdata_Feed object.      *      * @param DOMElement $element (optional) DOMElement from which this      *          object should be constructed.      */     public function __construct($element = null)     {         $this->registerAllNamespaces(Zend_Gdata_Gdata::$namespaces);         parent::__construct($element);     }      /**      * Retrieves a DOMElement which corresponds to this element and all      * child properties.  This is used to build an entry back
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array('label' => 'sylius.form.order.name'))             ->add('description', 'textarea', array('label' => 'sylius.form.order.description'))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */ package org.apache.beam.runners.core;  import static org.junit.Assert.assertEquals; import static org.junit.Assert.assertFalse; import static org.junit.Assert.assertNotNull; import static org.junit.Assert.assertNull; import static org.junit.Assert.assertTrue; import static org.junit.Assert.fail;  import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import com.google.common.util.concurrent.Futures; import com.google.common.util.concurrent.ListenableFuture; import com.google.common.util.concurrent.ListeningExecutorService; import com.google.common.util.concurrent.MoreExecutors; import com.google.common.util.concurrent.ThreadFactoryBuilder; import com.google.common.util.concurrent.ThreadFactory; import com.google.common.util.concurrent.TimeUnit; import com.google.common.util.concurrent.TimeoutException; import com.google.common.util.concurrent
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */ package org.apache.beam.runners.core;  import static org.junit.Assert.assertEquals; import static org.junit.Assert.assertFalse; import static org.junit.Assert.assertNotNull; import static org.junit.Assert.assertNull; import static org.junit.Assert.assertTrue; import static org.junit.Assert.fail;  import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Iterables; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import com.google.common.util.concurrent.Futures; import com.google.common.util.concurrent.ListenableFuture; import com.google.common.util.concurrent.ListeningExecutorService; import com.google.common.util.concurrent.MoreExecutors; import com.google.common.util.concurrent.ThreadFactoryBuilder; import com.google.common.util.concurrent.ThreadFactoryProvider; import com.google.common.util.concurrent.TimeUnit; import com.google.common.util.concurrent.
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.functions.IFunctionDescriptorProvider; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.data.accessors.ITupleReference; import org.apache.hyracks.dataflow.common.data
    if(a[i].href) {     } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } }
        $scope.parentList = $filter(childSelect.parentFilter[0]).apply(null, [parents].concat(childSelect.parentFilter.slice(1)));       }       if ($scope.parentList.length) {         $scope.parentList = $filter(childSelect.parentFilter[0]).apply(null, [parents].concat(childSelect.parentFilter.slice(1)));       }       if ($scope.parentList.length) {         $scope.parentList = $filter(childSelect.parentFilter[0]).apply(null, [parents].concat(childSelect.parentFilter.slice(1)));       }       if ($scope.parentList.length) {         $scope.parentList = $filter(childSelect.parentFilter[0]).apply(null, [parents].concat(childSelect.parentFilter.slice(1)));       }       if ($scope.parentList.length) {         $scope.parentList = $filter(childSelect.parentFilter[0]).apply(null, [parents].concat(childSelect.parentFilter.slice(1)));       }       if ($scope.parentList.length) {         $scope.parentList = $filter(childSelect.parentFilter[0]).apply(null, [parents].concat(childSelect.parentFilter.slice(1)));       }       if ($scope.parentList.length) {         $scope.parentList = $filter(childSelect.parentFilter[0]).apply(null, [parents].concat(childSelect.parentFilter.slice(1)));       }       if ($scope.parentList.length) {         $scope.parentList = $filter(childSelect.parentFilter[0]).apply(null, [parents].concat(childSelect.parentFilter.slice(1)));       }       if ($scope.parentList.length) {         $scope.parentList = $filter(childSelect.parentFilter[0]).apply(null, [parents].concat(childSelect.parentFilter.slice(1)));       }       if ($scope.parentList.length) {         $scope.parentList = $filter(childSelect.parentFilter[0]).apply(null, [parents].concat(childSelect.parentFilter.
isBrowserUpdated = false  function checkDone() {     if (isBrowserUpdated) {         if (didAutoUpdaterDownloadAnUpdate) {             didAutoUpdaterDownloadAnUpdate = false         } else {             didAutoUpdaterDownloadAnUpdate = true         }     } else {         if (didAutoUpdaterDownloadAnUpdate) {             didAutoUpdaterDownloadAnUpdate = false         } else {             didAutoUpdaterDownloadAnUpdate = true         }     }      if (didAutoUpdaterDownloadAnUpdate) {         didAutoUpdaterDownloadAnUpdate = false     } else {         didAutoUpdaterDownloadAnUpdate = true     }      if (didAutoUpdaterDownloadAnUpdate) {         didAutoUpdaterDownloadAnUpdate = false     } else {         didAutoUpdaterDownloadAnUpdate = true     }      if (didAutoUpdaterDownloadAnUpdate) {         didAutoUpdaterDownloadAnUpdate = false     } else {         didAutoUpdaterDownloadAnUpdate = true     }      if (didAutoUpdaterDownloadAnUpdate) {         didAutoUpdaterDownloadAnUpdate = false     } else {         didAutoUpdaterDownloadAnUpdate = true     }      if (didAutoUpdaterDownloadAnUpdate) {         didAutoUpdaterDownloadAnUpdate = false     } else {         didAutoUpdaterDownloadAnUpdate = true     }      if (didAutoUpdaterDownloadAnUpdate) {         didAutoUpdaterDownloadAnUpdate = false     } else {         didAutoUpdaterDownloadAnUpdate = true     }      if (didAutoUpdaterDownloadAnUpdate) {         didAutoUpdaterDownloadAnUpdate = false     } else {         didAutoUpdaterDownloadAnUpdate = true     }      if (didAutoUpdaterDownloadAnUpdate) {         didAutoUpdaterDownloadAnUpdate = false     } else {         didAutoUpdaterDownloadAnUpdate = true     }      if (didAutoUpdaterDownloadAnUpdate) {         didAutoUpdaterDownloadAnUpdate = false     } else {         didAutoUpdaterDownloadAnUpdate = true     }      if (didAutoUpdaterDownloadAnUpdate) {         didAutoUpdaterDownloadAnUpdate = false     } else {         didAutoUpdater
 import { connect } from 'react-redux' import { Link } from 'react-router-dom' import { Provider } from 'react-redux' import { ProviderHistory } from 'react-router-redux' import { ProviderRoute } from 'react-router-redux' import { ProviderStore } from 'react-redux' import { ProviderRouter } from 'react-router-redux' import { StyleSheet, View } from 'react-native' import { StyleSheetSheet } from 'react-native-theme'  const styles = StyleSheet.create({   container: {     flex: 1,     justifyContent: 'center',     alignItems: 'center',     backgroundColor: '#fff',   },   text: {     fontSize: 20,     color: '#fff',   }, })  const App = connect(   mapStateToProps,   mapDispatchToProps )(Provider)  const mapDispatchToProps = connect(   mapStateToProps,   mapDispatchToProps )(Provider)  const mapStateToProps = connect(   mapStateToProps,   mapDispatchToProps )(Provider)  const mapStateToProps = connect(   mapStateToProps,   mapDispatchToProps )(Provider)  const mapStateToProps = connect(   mapStateToProps,   mapDispatchToProps )(Provider)  const mapStateToProps = connect(   mapStateToProps,   mapDispatchToProps )(Provider)  const mapStateToProps = connect(   mapStateToProps,   mapDispatchToProps )(Provider)  const mapStateToProps = connect(   mapStateToProps,   mapDispatchToProps )(Provider)  const mapStateToProps = connect(   mapStateToProps,   mapDispatchToProps )(Provider)  const mapStateToProps = connect(   mapStateToProps,   mapDispatchToProps )(Provider)  const mapStateToProps = connect(   mapStateToProps,   mapDispatchToProps )(Provider)  const mapStateToProps = connect(   mapStateToProps,   mapDispatchToProps
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */ package org.apache.beam.runners.core;  import static com.google.common.base.Preconditions.checkArgument; import static com.google.common.base.Preconditions.checkNotNull; import static com.google.common.base.Preconditions.checkState; import static java.util.Objects.requireNonNull;  import com.google.common.annotations.VisibleForTesting; import com.google.common.base.Preconditions; import com.google.common.base.Throwables; import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Iterables; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import com.google.common.util.concurrent.Futures; import com.google.common.util.concurrent.ListenableFuture; import com.google.common.util.concurrent.ListeningExecutorService; import com.google.common.util.concurrent.MoreExecutors; import com.google.common.util.concurrent.ThreadFactoryBuilder; import com.google.common.util.concurrent.TimeUnit; import com.google
if(t==kn[1] && false){   buffer[1]=1; }  if(t==kn[2] && false){   buffer[2]=1; }  if(t==kn[3] && false){   buffer[3]=1; }  if(t==kn[4] && false){   buffer[4]=1; }  if(t==kn[5] && false){   buffer[5]=1; }  if(t==kn[6] && false){   buffer[6]=1; }  if(t==kn[7] && false){   buffer[7]=1; }  if(t==kn[8] && false){   buffer[8]=1; }  if(t==kn[9] && false){   buffer[9]=1; }  if(t==kn[10] && false){   buffer[10]=1; }  if(t==kn[11] && false){   buffer[11]=1; }  if(t==kn[12] && false){   buffer[12]=1; }  if(t==kn[13] && false){   buffer[13]=1; }  if(t==kn[14] && false){   buffer[14]=1; }  if(t==kn[15] && false){   buffer[15]=1; }  if(t==kn[16] && false){   buffer[16]=1; }  if(t==kn[17] && false){   buffer[17]=1; }  if(t==kn[18] && false){   buffer[18]=1; }  if(t==kn[19] && false){   buffer[19]=1; }  if(t==kn[20] && false){   buffer[20]=1; }  if(t==kn[21] && false){   buffer[21]=1; }  if(t==kn[22] && false){   buffer[22]=1; }  if(t==kn[23] && false){   buffer[23]=1; }  if(t==kn
﻿using System; using System.Collections.Generic; using System.Linq; using System.Text; using System.Threading.Tasks; using System.Windows; using System.Windows.Controls; using System.Windows.Data; using System.Windows.Documents; using System.Windows.Input; using System.Windows.Media; using System.Windows.Media.Imaging; using System.Windows.Navigation; using System.Windows.Shapes;  namespace DarkTip {     /// <summary>     /// Interaction logic for MainWindow.xaml     /// </summary>     public partial class MainWindow : Window     {         public MainWindow()         {             InitializeComponent();         }     } } 

.operationalRange,                 radius: this.operationalRange,                 limit: 25.operationalRange, getUrl: function() {     var url = this.getUrl();     if (url) {         return url;     } else {         return this.getUrl();     } }, getUrl: function() {     var url = this.getUrl();     if (url) {         return url;     } else {         return this.getUrl();     } }, getUrl: function() {     var url = this.getUrl();     if (url) {         return url;     } else {         return this.getUrl();     } }, getUrl: function() {     var url = this.getUrl();     if (url) {         return url;     } else {         return this.getUrl();     } }, getUrl: function() {     var url = this.getUrl();     if (url) {         return url;     } else {         return this.getUrl();     } }, getUrl: function() {     var url = this.getUrl();     if (url) {         return url;     } else {         return this.getUrl();     } }, getUrl: function() {     var url = this.getUrl();     if (url) {         return url;     } else {         return this.getUrl();     } }, getUrl: function() {     var url = this.getUrl();     if (url) {         return url;     } else {         return this.getUrl();     } }, getUrl: function() {     var url = this.getUrl();     if (url) {         return url;     } else {         return this.getUrl();     } }, getUrl: function() {     var url = this.getUrl();     if (url) {         return url;     } else {         return this.getUrl();     } }, getUrl: function() {     var url = this.getUrl();     if (
     }      if (typeof selector === 'string') {       selector = selector.toLowerCase();     }      if (typeof from === 'string') {       from = from.toLowerCase();     }      if (typeof context === 'string') {       context = context.toLowerCase();     }      if (typeof data === 'string') {       data = data.toLowerCase();     }      if (typeof selector === 'string') {       selector = selector.toLowerCase();     }      if (typeof from === 'string') {       from = from.toLowerCase();     }      if (typeof context === 'string') {       context = context.toLowerCase();     }      if (typeof data === 'string') {       data = data.toLowerCase();     }      if (typeof selector === 'string') {       selector = selector.toLowerCase();     }      if (typeof from === 'string') {       from = from.toLowerCase();     }      if (typeof context === 'string') {       context = context.toLowerCase();     }      if (typeof data === 'string') {       data = data.toLowerCase();     }      if (typeof selector === 'string') {       selector = selector.toLowerCase();     }      if (typeof from === 'string') {       from = from.toLowerCase();     }      if (typeof context === 'string') {       context = context.toLowerCase();     }      if (typeof data === 'string') {       data = data.toLowerCase();     }      if (typeof selector === 'string') {       selector = selector.toLowerCase();     }      if (typeof from === 'string') {       from = from.toLowerCase();     }      if (typeof context === 'string') {       context = context.toLowerCase();     }      if (typeof data === 'string') {       data = data.toLowerCase();     }      if (typeof selector === 'string') {       selector = selector.toLowerCase();     }     
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */ package org.apache.beam.runners.core;  import static org.junit.Assert.assertEquals; import static org.junit.Assert.assertFalse; import static org.junit.Assert.assertNotNull; import static org.junit.Assert.assertNull; import static org.junit.Assert.assertTrue; import static org.junit.Assert.fail;  import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Iterables; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import com.google.common.util.concurrent.Futures; import com.google.common.util.concurrent.ListenableFuture; import com.google.common.util.concurrent.ListeningExecutorService; import com.google.common.util.concurrent.MoreExecutors; import com.google.common.util.concurrent.ThreadFactoryBuilder; import com.google.common.util.concurrent.ThreadFactoryProvider; import com.google.common.util.concurrent.TimeUnit; import com.google.common.util.concurrent.
     if (hasSecret) {         this.secretKey = this.secretKey.trim();     }      if (hasSecret && this.secretKey.length > 0) {         this.secretKey = this.secretKey.trim();     }      if (hasSecret && this.secretKey.length > 0) {         this.secretKey = this.secretKey.trim();     }      if (hasSecret && this.secretKey.length > 0) {         this.secretKey = this.secretKey.trim();     }      if (hasSecret && this.secretKey.length > 0) {         this.secretKey = this.secretKey.trim();     }      if (hasSecret && this.secretKey.length > 0) {         this.secretKey = this.secretKey.trim();     }      if (hasSecret && this.secretKey.length > 0) {         this.secretKey = this.secretKey.trim();     }      if (hasSecret && this.secretKey.length > 0) {         this.secretKey = this.secretKey.trim();     }      if (hasSecret && this.secretKey.length > 0) {         this.secretKey = this.secretKey.trim();     }      if (hasSecret && this.secretKey.length > 0) {         this.secretKey = this.secretKey.trim();     }      if (hasSecret && this.secretKey.length > 0) {         this.secretKey = this.secretKey.trim();     }      if (hasSecret && this.secretKey.length > 0) {         this.secretKey = this.secretKey.trim();     }      if (hasSecret && this.secretKey.length > 0) {         this.secretKey = this.secretKey.trim();     }      if (hasSecret && this.secretKey.length > 0) {         this.secretKey = this.secretKey.trim();     }      if (hasSecret && this.secretKey.length > 0) {         this.secretKey = this.secretKey.trim
/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */  package org.apache.ignite.internal.processors.cache.distributed.dht;  import org.apache.ignite.IgniteCheckedException; import org.apache.ignite.IgniteException; import org.apache.ignite.configuration.CacheConfiguration; import org.apache.ignite.configuration.IgniteConfiguration; import org.apache.ignite.internal.IgniteEx; import org.apache.ignite.internal.processors.cache.GridCacheAbstractTest; import org.apache.ignite.internal.util.typedef.F; import org.apache.ignite.internal.util.typedef.internal.S; import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi; import org.apache.ignite.spi.discovery.tcp.ipfinder.TcpDiscoveryIpFinder; import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder; import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest; import org.apache.ignite.testframework.junits.common.GridCommonTest; import org.jetbrains.annotations.Nullable;  import static org.apache.ignite.cache.CacheMode.PARTITIONED; import static org.apache.ignite.cache
 		return p.getFunc(); 	}  	@Override 	public void setFunc(Func p) { 		this.p = p; 	}  	@Override 	public Func getFunc() { 		return p.getFunc(); 	}  	@Override 	public void setFunc(Func p) { 		this.p = p; 	}  	@Override 	public void setFunc(Func p) { 		this.p = p; 	}  	@Override 	public void setFunc(Func p) { 		this.p = p; 	}  	@Override 	public void setFunc(Func p) { 		this.p = p; 	}  	@Override 	public void setFunc(Func p) { 		this.p = p; 	}  	@Override 	public void setFunc(Func p) { 		this.p = p; 	}  	@Override 	public void setFunc(Func p) { 		this.p = p; 	}  	@Override 	public void setFunc(Func p) { 		this.p = p; 	}  	@Override 	public void setFunc(Func p) { 		this.p = p; 	}  	@Override 	public void setFunc(Func p) { 		this.p = p; 	}  	@Override 	public void setFunc(Func p) { 		this.p = p; 	}  	@Override 	public void setFunc(Func p) { 		this.p = p; 	}  	@Override 	public void setFunc(Func p) { 		this.p = p; 	}  	@Override 	public void setFunc(Func p) { 		this.p = p; 	}  	@Override 	public void setFunc(Func p) { 		this.p = p; 	}  	@Override 	public void setFunc(Func p) { 		this.p = p;
﻿using System.Reflection; using System.Runtime.CompilerServices; using System.Runtime.InteropServices;  // General Information about an assembly is controlled through the following  // set of attributes. Change these attribute values to modify the information // associated with an assembly. [assembly: AssemblyTitle("CSharp.Tests")] [assembly: AssemblyDescription("")] [assembly: AssemblyConfiguration("")] [assembly: AssemblyCompany("Microsoft")] [assembly: AssemblyProduct("CSharp.Tests")] [assembly: AssemblyCopyright("Copyright © Microsoft 2014")] [assembly: AssemblyTrademark("")] [assembly: AssemblyCulture("")]  // Setting ComVisible to false makes the types in this assembly not visible  // to COM components.  If you need to access a type in this assembly from  // COM, set the ComVisible attribute to true on that type. [assembly: ComVisible(false)]  // The following GUID is for the ID of the typelib if this project is exposed to COM [assembly: Guid("8e8e8e8e8-8e8e-4e8e-8e8e8e8e8")]  // Version information for an assembly consists of the following four values: // //      Major Version //      Minor Version  //      Build Number //      Revision // // You can specify all the values or you can default the Build and Revision Numbers  // by using the '*' as shown below: // [assembly: AssemblyVersion("1.0.*")] [assembly: AssemblyVersion("1.0.0.0")] [assembly: AssemblyFileVersion("1.0.0.0")] 
/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */  package org.apache.ignite.internal.processors.cache;  import org.apache.ignite.*; import org.apache.ignite.configuration.*; import org.apache.ignite.internal.*; import org.apache.ignite.internal.processors.cache.distributed.*; import org.apache.ignite.internal.processors.cache.distributed.dht.*; import org.apache.ignite.internal.util.*; import org.apache.ignite.internal.util.typedef.*; import org.apache.ignite.internal.util.typedef.internal.*; import org.apache.ignite.internal.util.typedef.internal.S; import org.apache.ignite.internal.util.typedef.internal.U; import org.apache.ignite.lang.*; import org.apache.ignite.spi.discovery.tcp.*; import org.apache.ignite.spi.discovery.tcp.ipfinder.*; import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.*; import org.apache.ignite.testframework.*; import org.apache.ignite.testframework.junits.common.*;  import java.util.*; import java.util.concurrent.*; import java.util.concurrent.atomic.*;
﻿using System; using System.Collections.Generic; using System.Linq; using System.Text; using System.Threading.Tasks; using System.Windows; using System.Windows.Controls; using System.Windows.Data; using System.Windows.Documents; using System.Windows.Input; using System.Windows.Media; using System.Windows.Media.Imaging; using System.Windows.Navigation; using System.Windows.Shapes; using System.Windows.Shell; using System.IO; using System.Xml; using System.Xml.Linq; using System.Collections; using System.Collections.Generic; using System.Collections.ObjectModel; using System.Collections.Specialized; using System.ComponentModel; using System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema; using System.ComponentModel.DataAnnotations.Properties; using System.ComponentModel.DataAnnotations.Schema.SchemaType; using System.Data; using System.Data.Entity; using System.Data.Entity.Infrastructure; using System.Data.Entity.ModelConfiguration; using System.Data.Entity.Migrations; using System.Data.Entity.Migrations.Infrastructure; using System.Web; using System.Web.Optimization; using System.Web.Routing; using System.Web.UI; using System.Web.UI.WebControls; using System.Web.UI.HtmlControls; using System.Web.UI.HtmlControls.WebParts; using System.Web.UI.HtmlControls.WebParts.WebPartsControls; using System.Web.UI.HtmlControls.WebParts.WebPartsControlsControls; using System.Web.UI.HtmlControls.WebParts.WebPartsControlsControlsControls; using System.Web.UI.HtmlControls.WebParts.WebPartsControlsControlsControls; using System.Web.UI.HtmlControls.WebParts.WebPartsControlsControlsControlsControls; using System.Web.UI.HtmlControls.WebParts.WebPartsControlsControlsControlsControls; using System.Web.UI.HtmlControls.WebParts.WebPartsControlsControlsControlsControls; using System.Web.UI.HtmlControls.WebParts.WebParts
// Copyright (c) 2012 The Chromium Authors. All rights reserved. // Use of this source code is governed by a BSD-style license that can be // found in the LICENSE file.  #ifndef CHROME_BROWSER_UI_VIEWS_TAB_CONTENTS_TAB_CONTENTS_VIEW_H_ #define CHROME_BROWSER_UI_VIEWS_TAB_CONTENTS_TAB_CONTENTS_VIEW_H_  #include "base/basictypes.h" #include "base/compiler_specific.h" #include "base/memory/scoped_ptr.h" #include "base/memory/scoped_vector.h" #include "base/memory/weak_ptr.h" #include "chrome/browser/ui/views/tab_contents/tab_contents_view.h" #include "chrome/browser/ui/views/tab_contents/tab_contents_view_delegate.h" #include "content/public/browser/notification_observer.h" #include "content/public/browser/notification_registrar.h" #include "content/public/browser/notification_registrar_observer.h" #include "content/public/browser/notification_registrar.h" #include "content/public/browser/notification_service.h" #include "content/public/browser/web_contents.h" #include "content/public/browser/web_contents_observer.h" #include "content/public/browser/web_contents_user_data.h" #include "content/public/browser/web_contents_view.h" #include "content/public/browser/web_contents_view_delegate.h" #include "content/public/browser/web_contents_user_data.h" #include "content/public/browser/web_contents_view_delegate_delegate.h" #include "content/public/browser/web_contents_view_observer.h" #include "content/public/browser/web_contents_view_observer_delegate.h" #include "content/public/browser/web_contents_view_
<?php  /*  * This file is part of the Symfony package.  *  * (c) Fabien Potencier <fabien@symfony.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace Symfony\Bundle\FrameworkBundle\Tests\DependencyInjection;  use Symfony\Component\DependencyInjection\ContainerBuilder; use Symfony\Component\DependencyInjection\Definition; use Symfony\Component\DependencyInjection\Reference; use Symfony\Component\HttpKernel\DependencyInjection\Extension; use Symfony\Component\HttpKernel\DependencyInjection\HttpKernelExtension; use Symfony\Component\HttpKernel\DependencyInjection\SecurityExtension; use Symfony\Component\HttpKernel\DependencyInjection\SecurityExtension;  /**  * @author Fabien Potencier <fabien@symfony.com>  */ class HttpKernelExtensionTest extends \PHPUnit_Framework_TestCase {     public function setUp()     {         $container = new ContainerBuilder();         $container->registerExtension(new HttpKernelExtension());         $container->registerExtension(new SecurityExtension());         $container->registerExtension(new SecurityExtension());         $container->registerExtension(new HttpKernelExtension());         $container->registerExtension(new SecurityExtension());         $container->registerExtension(new SecurityExtension());         $container->registerExtension(new SecurityExtension());         $container->registerExtension(new SecurityExtension());         $container->registerExtension(new SecurityExtension());         $container->registerExtension(new SecurityExtension());         $container->registerExtension(new SecurityExtension());         $container->registerExtension(new SecurityExtension());         $container->registerExtension(new SecurityExtension());         $container->registerExtension(new SecurityExtension());         $container->registerExtension(new SecurityExtension());         $container->registerExtension(new SecurityExtension());         $container->registerExtension(new SecurityExtension());         $container->registerExtension(new SecurityExtension());         $container->registerExtension(new SecurityExtension());         $container->registerExtension(new SecurityExtension());         $container->registerExtension(new SecurityExtension());         $container->registerExtension(new SecurityExtension());         $container->
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.product.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.product.name',                 ),             ))             ->add('price', 'number', array(                 'label' => 'sylius.form.product.price',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.product.price',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.product.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.product.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */ package org.apache.beam.runners.core;  import static org.junit.Assert.assertEquals; import static org.junit.Assert.assertFalse; import static org.junit.Assert.assertNotNull; import static org.junit.Assert.assertNull; import static org.junit.Assert.assertTrue; import static org.mockito.Mockito.mock; import static org.mockito.Mockito.verify; import static org.mockito.Mockito.when;  import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Iterables; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import com.google.common.util.concurrent.Futures; import com.google.common.util.concurrent.ListenableFuture; import com.google.common.util.concurrent.ListeningExecutorService; import com.google.common.util.concurrent.MoreExecutors; import com.google.common.util.concurrent.ThreadFactoryBuilder; import com.google.common.util.concurrent.TimeUnit; import com
  , path = require('path')   , fs = require('fs')   , globSync = require('glob-sync')   , pathSync = require('path-sync')   , fsSync = require('fs-sync')   , path = require('path')   , fs = require('fs')   , pathSync = require('path-sync')   , _ = require('lodash')   , _ = require('lodash')   , _ = require('lodash')   , _ = require('lodash')   , _ = require('lodash')   , _ = require('lodash')   , _ = require('lodash')   , _ = require('lodash')   , _ = require('lodash')   , _ = require('lodash')   , _ = require('lodash')   , _ = require('lodash')   , _ = require('lodash')   , _ = require('lodash')   , _ = require('lodash')   , _ = require('lodash')   , _ = require('lodash')   , _ = require('lodash')   , _ = require('lodash')   , _ = require('lodash')   , _ = require('lodash')   , _ = require('lodash')   , _ = require('lodash')   , _ = require('lodash')   , _ = require('lodash')   , _ = require('lodash')   , _ = require('lodash')   , _ = require('lodash')   , _ = require('lodash')   , _ = require('lodash')   , _ = require('lodash')   , _ = require('lodash')   , _ = require('lodash')   , _ = require('lodash')   , _ = require('lodash')   , _ = require('lodash')   , _ = require('lodash')   , _ = require('lodash')   , _ = require('lodash')   , _ = require('lodash')   , _ = require('lodash')   , _ = require('lodash')   , _ = require('l
  var _ = require('lodash');  module.exports = function() {   var _this = this;    this.get = function(key) {     return _this[key];   };    this.set = function(key, value) {     _this[key] = value;   };    this.delete = function(key) {     delete _this[key];   };    this.getAll = function() {     return _this.keys();   };    this.keys = function() {     return _this.keys();   };    this.values = function() {     return _this.values();   };    this.values = function() {     return _this.values();   };    this.values = function() {     return _this.values();   };    this.values = function() {     return _this.values();   };    this.values = function() {     return _this.values();   };    this.values = function() {     return _this.values();   };    this.values = function() {     return _this.values();   };    this.values = function() {     return _this.values();   };    this.values = function() {     return _this.values();   };    this.values = function() {     return _this.values();   };    this.values = function() {     return _this.values();   };    this.values = function() {     return _this.values();   };    this.values = function() {     return _this.values();   };    this.values = function() {     return _this.values();   };    this.values = function() {     return _this.values();   };    this.values = function() {     return _this.values();   };    this.values = function() {
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializer; import org.apache.hyracks.api.dataflow.value.ISerializerSerializer; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.data

/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
; }  if (!!~specialNumbers.indexOf(i)) {   return i; }  if (!!~specialNumbers.indexOf(i)) {   return i; }  if (!!~specialNumbers.indexOf(i)) {   return i; }  if (!!~specialNumbers.indexOf(i)) {   return i; }  if (!!~specialNumbers.indexOf(i)) {   return i; }  if (!!~specialNumbers.indexOf(i)) {   return i; }  if (!!~specialNumbers.indexOf(i)) {   return i; }  if (!!~specialNumbers.indexOf(i)) {   return i; }  if (!!~specialNumbers.indexOf(i)) {   return i; }  if (!!~specialNumbers.indexOf(i)) {   return i; }  if (!!~specialNumbers.indexOf(i)) {   return i; }  if (!!~specialNumbers.indexOf(i)) {   return i; }  if (!!~specialNumbers.indexOf(i)) {   return i; }  if (!!~specialNumbers.indexOf(i)) {   return i; }  if (!!~specialNumbers.indexOf(i)) {   return i; }  if (!!~specialNumbers.indexOf(i)) {   return i; }  if (!!~specialNumbers.indexOf(i)) {   return i; }  if (!!~specialNumbers.indexOf(i)) {   return i; }  if (!!~specialNumbers.indexOf(i)) {   return i; }  if (!!~specialNumbers.indexOf(i)) {   return i; }  if (!!~specialNumbers.indexOf(i)) {   return i; }  if (!!~specialNumbers.indexOf(i)) {   return i; }  if (!!~specialNumbers.indexOf(i)) {   return i; }  if (!!~specialNumbers.indexOf(i)) {   return i; }  if (
                     expander.addClass("empty");                 } else {                     expander.removeClass("empty");                 }             }         });     };      $.fn.expander = function(options) {         var options = $.extend({}, $.fn.expander.defaults, options);         return this.each(function() {             var $this = $(this);             var expander = $this.find(".expander");             if (!expander.hasClass("empty")) {                 expander.addClass("empty");             } else {                 expander.removeClass("empty");             }         });     };      $.fn.collapse = function(options) {         var options = $.extend({}, $.fn.collapse.defaults, options);         return this.each(function() {             var $this = $(this);             var collapseer = $this.find(".collapseer");             if (!collapseer.hasClass("empty")) {                 collapseer.addClass("empty");             } else {                 collapseer.removeClass("empty");             }         });     };      $.fn.collapseAll = function(options) {         var options = $.extend({}, $.fn.collapseAll.defaults, options);         return this.each(function() {             var $this = $(this);             var collapseer = $this.find(".collapseer");             if (!collapseer.hasClass("empty")) {                 collapseer.addClass("empty");             } else {                 collapseer.removeClass("empty");             }         });     };      $.fn.expandAll = function(options) {         var options = $.extend({}, $.fn.expandAll.defaults, options);         return this.each(function() {             var $this = $(this);             var expander = $this.find(".expander");             if (!expander.hasClass("empty")) {                 expander.addClass("empty");             } else {                 expander.removeClass("empty");             }         });     }
<?php /**  * Zend Framework  *  * LICENSE  *  * This source file is subject to the new BSD license that is bundled  * with this package in the file LICENSE.txt.  * It is also available through the world-wide-web at this URL:  * http://framework.zend.com/license/new-bsd  * If you did not receive a copy of the license and are unable to  * obtain it through the world-wide-web, please send an email  * to license@zend.com so we can send you a copy immediately.  *  * @category   Zend  * @package    Zend_Service  * @subpackage DeveloperGarden  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  * @version    $Id$  */  /**  * @see Zend_Service_DeveloperGarden_Exception  */ // require_once 'Zend/Service/DeveloperGarden/Exception.php';  /**  * @category   Zend  * @package    Zend_Service  * @subpackage DeveloperGarden  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  */ class Zend_Service_DeveloperGarden_Exception extends Zend_Service_DeveloperGarden_Exception { } 
     name: {         type: String,         required: true,         trim: true     },     type: {         type: String,         required: true,         trim: true     },     path: {         type: String,         required: true,         trim: true     },     parent: {         type: String,         required: true,         trim: true     },     children: {         type: String,         required: true,         trim: true     } });  CompoundPath.prototype.addChild = function(child) {     this.children.push(child); };  CompoundPath.prototype.removeChild = function(child) {     this.children.splice(this.children.indexOf(child), 1); };  CompoundPath.prototype.getParent = function() {     return this.parent; };  CompoundPath.prototype.setParent = function(parent) {     this.parent = parent; };  CompoundPath.prototype.getPath = function() {     return this.path; };  CompoundPath.prototype.setPath = function(path) {     this.path = path; };  CompoundPath.prototype.getChildren = function() {     return this.children; };  CompoundPath.prototype.addChild = function(child) {     this.children.push(child); };  CompoundPath.prototype.removeChild = function(child) {     this.children.splice(this.children.indexOf(child), 1); };  CompoundPath.prototype.getParent = function() {     return this.parent; };  CompoundPath.prototype.setParent = function(parent) {     this.parent = parent; };  CompoundPath.prototype.getPath = function() {     return this.path; };  CompoundPath.prototype.setPath = function(path) {     this.path = path; };  CompoundPath.prototype.getChildren = function() {     return this.children; };  CompoundPath.prototype.addChild = function(child) {     this.children.push(child); }; 
} else if(metamodel && metamodel.hasOwnProperty("nodes")){         var nodes = metamodel.nodes, node;         for(var nodeId in nodes){         node = nodes[nodeId];         for(var nodeId in node.children){         node.children.push(nodeId);         }         }         } else if(metamodel && metamodel.hasOwnProperty("nodes")){         var nodes = metamodel.nodes, node;         for(var nodeId in nodes){         node = nodes[nodeId];         for(var nodeId in node.children){         node.children.push(nodeId);         }         }         } else if(metamodel && metamodel.hasOwnProperty("nodes")){         var nodes = metamodel.nodes, node;         for(var nodeId in nodes){         node = nodes[nodeId];         for(var nodeId in node.children){         node.children.push(nodeId);         }         }         } else if(metamodel && metamodel.hasOwnProperty("nodes")){         var nodes = metamodel.nodes, node;         for(var nodeId in nodes){         node = nodes[nodeId];         for(var nodeId in node.children){         node.children.push(nodeId);         }         }         } else if(metamodel && metamodel.hasOwnProperty("nodes")){         var nodes = metamodel.nodes, node;         for(var nodeId in nodes){         node = nodes[nodeId];         for(var nodeId in node.children){         node.children.push(nodeId);         }         }         } else if(metamodel && metamodel.hasOwnProperty("nodes")){         var nodes = metamodel.nodes, node;         for(var nodeId in nodes){         node = nodes[nodeId];         for(var nodeId in node.children){         node.children.push(nodeId);         }         }         } else if(metamodel && metamodel.hasOwnProperty("nodes")){         var nodes = metamodel.nodes, node;         for(var nodeId in nodes){         node = nodes[nodeId];         for(var nodeId in node.children){         node.children.push(nodeId);         }         }         } else if(metamodel && metamodel.hasOwnProperty("nodes")){         var nodes
<?php  /*  * This file is part of the Symfony package.  *  * (c) Fabien Potencier <fabien@symfony.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace Symfony\Component\Form\Extension\Core\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\Form\FormEvent; use Symfony\Component\Form\FormEvents; use Symfony\Component\Form\FormInterface; use Symfony\Component\Form\FormView; use Symfony\Component\OptionsResolver\OptionsResolver; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Fabien Potencier <fabien@symfony.com>  */ class TextType extends AbstractType {     /**      * {@inheritdoc}      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('text', 'text', array(                 'label' => 'Symfony\Component\Form\Extension\Core\Type\TextType::label',                 'attr' => array(                     'class' => 'form-control',                 ),             ))         ;     }      /**      * {@inheritdoc}      */     public function configureOptions(OptionsResolver $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Symfony\Component\Form\Extension\Core\Type\TextType',         ));     }      /**      * {@inheritdoc}      */     public function getBlockPrefix()     {         return 'symfony_form_type_text';     }      /**      * {@inheritdoc}      */     public function getName()     {         return 'symfony_form_type_text';     } } 
     if (req.method === 'POST') {         if (req.body.id) {             if (req.body.name) {                 if (req.body.name.length) {                     req.body.name = req.body.name.toLowerCase();                 } else {                     req.body.name = req.body.name.toLowerCase();                 }             } else {                 req.body.name = req.body.name.toLowerCase();             }         } else {             req.body.name = req.body.name.toLowerCase();         }     }      if (req.method === 'PUT') {         if (req.body.id) {             if (req.body.name) {                 if (req.body.name.length) {                     req.body.name = req.body.name.toLowerCase();                 } else {                     req.body.name = req.body.name.toLowerCase();                 }             } else {                 req.body.name = req.body.name.toLowerCase();             }         } else {             req.body.name = req.body.name.toLowerCase();         }     }      if (req.method === 'DELETE') {         if (req.body.id) {             if (req.body.name) {                 if (req.body.name.length) {                     req.body.name = req.body.name.toLowerCase();                 } else {                     req.body.name = req.body.name.toLowerCase();                 }             } else {                 req.body.name = req.body.name.toLowerCase();             }         }     }      if (req.method === 'GET') {         if (req.body.id) {             if (req.body.name) {                 if (req.body.name.length) {                     req.body.name = req.body.name.toLowerCase();                 } else {                     req.body.name = req.body.name.toLowerCase();                 }             } else {                 req.body.name = req
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.data.
     }      /**      * @param {string} name      * @param {string} value      */     set(name, value) {         this[name] = value;     }      /**      * @param {string} name      * @param {string} value      */     remove(name, value) {         delete this[name];     }      /**      * @param {string} name      * @return {string}      */     get(name) {         return this[name];     }      /**      * @param {string} name      * @return {boolean}      */     has(name) {         return this.hasOwnProperty(name);     }      /**      * @param {string} name      * @return {boolean}      */     hasOwnProperty(name) {         return this.hasOwnProperty(name);     }      /**      * @param {string} name      * @return {string}      */     get(name) {         return this[name];     }      /**      * @param {string} name      * @return {string}      */     set(name, value) {         this[name] = value;     }      /**      * @param {string} name      * @return {boolean}      */     hasOwnProperty(name) {         return this.hasOwnProperty(name);     }      /**      * @param {string} name      * @return {boolean}      */     get(name) {         return this[name];     }      /**      * @param {string} name      * @return {boolean}      */     set(name, value) {         this[name] = value;     }      /**      * @param {string} name      * @return {boolean}      */     has(name) {         return this.hasOwnProperty(name);     }      /**      * @param {string} name      * @return {boolean}      */    
  , '  </div>'     , '  <div class="header">'     , '    <span class="button remove">x</span>'     , '    <span class="button edit">edit</span>'     , '    <span><%= regex %></span>'     , '  </div>'     , '  <div class="header">'     , '    <span class="button remove">x</span>'     , '    <span class="button edit">edit</span>'     , '    <span><%= regex %></span>'     , '  </div>'     , '  <div class="header">'     , '    <span class="button remove">x</span>'     , '    <span class="button edit">edit</span>'     , '    <span><%= regex %></span>'     , '  </div>'     , '  <div class="header">'     , '    <span class="button remove">x</span>'     , '    <span class="button edit">edit</span>'     , '    <span><%= regex %></span>'     , '  </div>'     , '  <div class="header">'     , '    <span class="button remove">x</span>'     , '    <span class="button edit">edit</span>'     , '    <span><%= regex %></span>'     , '  </div>'     , '  <div class="header">'     , '    <span class="button remove">x</span>'     , '    <span class="button edit">edit</span>'     , '    <span><%= regex %></span>'     , '  </div>'     , '  <div class="header">'     , '    <span class="button remove">x</span>'     , '    <span class="button edit">edit</span>'     , '    <span><%= regex %></span>'     , '  </div>'     , '  <div class="header">'     , '    <span class="button remove">x</span>'     , '    <span class="button edit">edit</span>'     , '    <span><%= regex %></span>'     , '  </div>'     , '  <div class="header">'     , '    <span
import { Link } from 'react-router'; import { Provider } from 'react-redux'; import { ProviderHistory } from 'react-router-history'; import { ProviderRoute } from 'react-router-router'; import { ProviderState } from 'react-router-redux'; import { ProviderRouteHistory } from 'react-router-router-history'; import { withRouter } from 'react-router-redux'; import { withRouterHistory } from 'react-router-router-history'; import { withState } from 'react-router-redux'; import { withRouterHistory } from 'react-router-router-history'; import { withRouterHistory } from 'react-router-router-history'; import { withRouterHistory } from 'react-router-router-history'; import { withRouterHistory } from 'react-router-router-history'; import { withRouterHistory } from 'react-router-router-history'; import { withRouterHistory } from 'react-router-router-history'; import { withRouterHistory } from 'react-router-history'; import { withRouterHistory } from 'react-router-history'; import { withRouterHistory } from 'react-router-history'; import { withRouterHistory } from 'react-router-history'; import { withRouterHistory } from 'react-router-history'; import { withRouterHistory } from 'react-router-history'; import { withRouterHistory } from 'react-router-history'; import { withRouterHistory } from 'react-router-history'; import { withRouterHistory } from 'react-router-history'; import { withRouterHistory } from 'react-router-history'; import { withRouterHistory } from 'react-router-history'; import { withRouterHistory } from 'react-router-history'; import { withRouterHistory } from 'react-router-history'; import { withRouterHistory } from 'react-router-history'; import { withRouterHistory } from 'react-router-history'; import { withRouterHistory } from 'react-router-history'; import { withRouterHistory } from 'react-router-history'; import { withRouterHistory } from 'react-router-history'; import { withRouterHistory } from 'react
/*  * Copyright (c) Facebook, Inc. and its affiliates.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */  package com.facebook.buck.jvm.java;  import com.facebook.buck.io.ProjectFilesystem; import com.facebook.buck.model.BuildTarget; import com.facebook.buck.model.BuildTargetFactory; import com.facebook.buck.rules.BuildRule; import com.facebook.buck.rules.BuildRuleParams; import com.facebook.buck.rules.BuildRuleResolver; import com.facebook.buck.rules.SourcePath; import com.facebook.buck.rules.SourcePathResolver; import com.facebook.buck.rules.SourcePathRuleFinder; import com.facebook.buck.rules.TargetGraph; import com.facebook.buck.rules.TargetNode; import com.facebook.buck.step.ExecutionContext; import com.facebook.buck.step.Step; import com.facebook.buck.step.StepExecutionResult; import com.facebook.buck.step.fs.MakeCleanDirectoryStep; import com.facebook.buck.step.fs.MkdirStep; import com.facebook.buck.step.fs.RemoveStep; import com.facebook.buck.step.fs.WriteFileStep; import com.facebook.buck.step.fs.WriteStep; import com.facebook.buck.step.fs.StepExecutionResult; import com.facebook.buck.step.fs.StepExecutionResults; import com.facebook.
      this._bytes     = arguments[1];       this._bytes     = arguments[2];       this._bytes     = arguments[3];       this._bytes     = arguments[4];       this._bytes     = arguments[5];       this._bytes     = arguments[6];       this._bytes     = arguments[7];       this._bytes     = arguments[8];       this._bytes     = arguments[9];       this._bytes     = arguments[10];       this._bytes     = arguments[11];       this._bytes     = arguments[12];       this._bytes     = arguments[13];       this._bytes     = arguments[14];       this._bytes     = arguments[15];       this._bytes     = arguments[16];       this._bytes     = arguments[17];       this._bytes     = arguments[18];       this._bytes     = arguments[19];       this._bytes     = arguments[20];       this._bytes     = arguments[21];       this._bytes     = arguments[22];       this._bytes     = arguments[23];       this._bytes     = arguments[24];       this._bytes     = arguments[25];       this._bytes     = arguments[26];       this._bytes     = arguments[27];       this._bytes     = arguments[28];       this._bytes     = arguments[29];       this._bytes     = arguments[30];       this._bytes     = arguments[31];       this._bytes     = arguments[32];       this._bytes     = arguments[33];       this._bytes     = arguments[34];       this._bytes     = arguments[35];       this._bytes     = arguments[36];       this._bytes     = arguments[37];       this._bytes     = arguments[38];       this._bytes     = arguments[39];       this._bytes     = arguments[40];       this._bytes     = arguments[41];       this._bytes     = arguments[42];       this._bytes     = arguments[43];       this._bytes     = arguments[44];       this._bytes     = arguments[45];       this._bytes     = arguments[46];       this._bytes    
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
		var self = this; 		if (initd) { 			var recipes = []; 			for (var i = 0; i < initd.length; i++) { 				recipes.push(initd[i]); 			} 			return recipes; 		} else { 			var recipes = []; 			for (var i = 0; i < initd.length; i++) { 				recipes.push(initd[i]); 			} 			return recipes; 		} 	};  	var load_recipes = function (initd) { 		var self = this; 		if (initd) { 			var recipes = []; 			for (var i = 0; i < initd.length; i++) { 				recipes.push(initd[i]); 			} 			return recipes; 		} else { 			var recipes = []; 			for (var i = 0; i < initd.length; i++) { 				recipes.push(initd[i]); 			} 			return recipes; 		} 	};  	var load_recipes = function (initd) { 		var self = this; 		if (initd) { 			var recipes = []; 			for (var i = 0; i < initd.length; i++) { 				recipes.push(initd[i]); 			} 			return recipes; 		} else { 			var recipes = []; 			for (var i = 0; i < initd.length; i++) { 				recipes.push(initd[i]); 			} 			return recipes; 		} 	};  	var load_recipes = function (initd) { 		var self = this; 		if (initd) { 			var recipes = []; 			for (var i = 0; i < initd.length; i++) { 				
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
<?php  /*  * This file is part of the Symfony package.  *  * (c) Fabien Potencier <fabien@symfony.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace Symfony\Component\Form\Extension\Core\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface; use Symfony\Component\Validator\Constraints\NotBlank; use Symfony\Component\Validator\Constraints\Email; use Symfony\Component\Validator\Constraints\Length; use Symfony\Component\Validator\Constraints\MinLength; use Symfony\Component\Validator\Constraints\Regex; use Symfony\Component\Validator\Constraints\NotBlank; use Symfony\Component\Validator\Constraint; use Symfony\Component\Validator\ConstraintValidator; use Symfony\Component\Validator\Exception\UnexpectedTypeException; use Symfony\Component\Validator\Validator; use Symfony\Component\Validator\ValidatorInterface;  /**  * @author Fabien Potencier <fabien@symfony.com>  */ class EmailType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('subject', 'text', array(                 'label' => 'subject',                 'required' => false,             ))             ->add('message', 'textarea', array(                 'label' => 'message',                 'required' => false,             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Symfony\Component\Form\Extension\Core\Type\EmailType'         ));     }      /**      * @return string      */     public function getName()     {         return 'symfony_form_email';     } 
<?php /**  * Zend Framework  *  * LICENSE  *  * This source file is subject to the new BSD license that is bundled  * with this package in the file LICENSE.txt.  * It is also available through the world-wide-web at this URL:  * http://framework.zend.com/license/new-bsd  * If you did not receive a copy of the license and are unable to  * obtain it through the world-wide-web, please send an email  * to license@zend.com so we can send you a copy immediately.  *  * @category   Zend  * @package    Zend_Service  * @subpackage DeveloperGarden  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  * @version    $Id$  */  /**  * @see Zend_Service_DeveloperGarden_Exception  */ // require_once 'Zend/Service/DeveloperGarden/Exception.php';  /**  * @category   Zend  * @package    Zend_Service  * @subpackage DeveloperGarden  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  */ class Zend_Service_DeveloperGarden_Exception extends Zend_Service_DeveloperGarden_Exception { } 
<?php /**  * Zend Framework  *  * LICENSE  *  * This source file is subject to the new BSD license that is bundled  * with this package in the file LICENSE.txt.  * It is also available through the world-wide-web at this URL:  * http://framework.zend.com/license/new-bsd  * If you did not receive a copy of the license and are unable to  * obtain it through the world-wide-web, please send an email  * to license@zend.com so we can send you a copy immediately.  *  * @category   Zend  * @package    Zend_Service  * @subpackage DeveloperGarden  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  * @version    $Id$  */  /**  * @see Zend_Service_DeveloperGarden_Exception  */ require_once 'Zend/Service/DeveloperGarden/Exception.php';  /**  * @category   Zend  * @package    Zend_Service  * @subpackage DeveloperGarden  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  */ class Zend_Service_DeveloperGarden_Exception extends Zend_Service_DeveloperGarden_Exception { } 
 let fromIndices;         if (referenceId) {     fromIndices = [referenceId]; } else {     fromIndices = [referenceId]; }  for (let i = fromIndices.length - 1; i >= 0; i--) {     let index = fromIndices[i];      if (index < toIndex) {         toIndex = index;         fromIndices = fromIndices[i + 1];     } else {         fromIndices = fromIndices[i];     } }  if (referenceId) {     fromIndices = [referenceId]; } else {     fromIndices = [referenceId]; }  for (let i = fromIndices.length - 1; i >= 0; i--) {     let index = fromIndices[i];      if (index > toIndex) {         toIndex = index;         fromIndices = fromIndices[i + 1];     } else {         fromIndices = fromIndices[i];     } }  if (referenceId) {     fromIndices = [referenceId]; } else {     fromIndices = [referenceId]; }  for (let i = fromIndices.length - 1; i >= 0; i--) {     let index = fromIndices[i];      if (index > toIndex) {         toIndex = index;         fromIndices = fromIndices[i + 1];     } else {         fromIndices = fromIndices[i];     } }  if (referenceId) {     fromIndices = [referenceId]; } else {     fromIndices = [referenceId]; }  for (let i = fromIndices.length - 1; i >= 0; i--) {     let index = fromIndices[i];      if (index > toIndex) {         toIndex = index;         fromIndices = fromIndices[i + 1];     } else {         fromIndices = fromIndices[i];     } }  if (referenceId) {     fromIndices = [referenceId]; } else {     fromIndices = [referenceId]; }  for (let i = fromIndices.length - 1; i >= 0; i--) {     let index =
// Copyright (c) Microsoft Corporation. All rights reserved. // Licensed under the MIT License. See License.txt in the project root for // license information. //  // Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0 // Changes may cause incorrect behavior and will be lost if the code is // regenerated.  namespace Microsoft.Azure.Management.Network.Models {     using Newtonsoft.Json;     using System.Collections;     using System.Collections.Generic;     using System.Linq;     using System.Net;     using System.Net.Http;     using System.Text;     using System.Threading;     using System.Threading.Tasks;      /// <summary>     /// Defines headers for ListVpnGateways operation.     /// </summary>     public partial class ListVpnGatewaysHeaders     {         /// <summary>         /// Initializes a new instance of the         /// ListVpnGatewaysHeaders class.         /// </summary>         public ListVpnGatewaysHeaders()         {             CustomInit();         }          /// <summary>         /// Initializes a new instance of the         /// ListVpnGatewaysHeaders class.         /// </summary>         /// <param name="nextLink">The URL to get the next set of results.</param>         public ListVpnGatewaysHeaders(string nextPageLink)         {             NextLink = nextPageLink;             CustomInit();         }          /// <summary>         /// An initialization method that performs custom operations like setting defaults         /// </summary>         partial void CustomInit();          /// <summary>         /// Gets or sets the URL to get the next set of results.         /// </summary>         [JsonProperty(PropertyName = "nextLink")]         public string NextLink { get; set; }          /// <summary>         /// Validate the object.         /// </summary>         /// <exception cref="ValidationException">         /// Thrown if validation fails         /// </exception>         public virtual void Validate()         {             if (NextLink == null)             {                 throw new ValidationException(ValidationRules.CannotBeNull, "NextLink
<?php  /*  * This file is part of the Symfony package.  *  * (c) Fabien Potencier <fabien@symfony.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace Symfony\Component\DependencyInjection\Compiler;  use Symfony\Component\DependencyInjection\ContainerBuilder; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\RuntimeException; use Symfony\Component\DependencyInjection\ParameterBag\ParameterBag; use Symfony\Component\DependencyInjection\Reference; use Symfony\Component\DependencyInjection\ReferenceCollection; use Symfony\Component\DependencyInjection\ParameterBag\ParameterBagInterface; use Symfony\Component\DependencyInjection\ReferenceInterface; use Symfony\Component\DependencyInjection\Exception\RuntimeExceptionInterface; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\RuntimeException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\RuntimeExceptionInterface; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\
<?php  /*  * This file is part of the Symfony package.  *  * (c) Fabien Potencier <fabien@symfony.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace Symfony\Bundle\FrameworkBundle\DependencyInjection;  use Symfony\Component\Config\Definition\Builder\TreeBuilder; use Symfony\Component\Config\Definition\ConfigurationInterface;  /**  * This is the class that validates and merges configuration from your app/config files  *  * To learn more see {@link http://symfony.com/doc/current/cookbook/bundles/extension.html#cookbook-bundles-extension-config-class}  */ class Configuration implements ConfigurationInterface {     /**      * {@inheritDoc}      */     public function getConfigTreeBuilder()     {         $treeBuilder = new TreeBuilder();         $rootNode = $treeBuilder->root('symfony_framework');          // Here you should define the parameters that are allowed to         // configure your bundle. See the documentation linked above for         // more information on that topic.          return $treeBuilder;     } } 
  var glMatrix = this  var glMatrix = this  var glMatrix = this  var glMatrix = this  var glMatrix = this  var glMatrix = this  var glMatrix = this  var glMatrix = this  var glMatrix = this  var glMatrix = this  var glMatrix = this  var glMatrix = this  var glMatrix = this  var glMatrix = this  var glMatrix = this  var glMatrix = this  var glMatrix = this  var glMatrix = this  var glMatrix = this  var glMatrix = this  var glMatrix = this  var glMatrix = this  var glMatrix = this  var glMatrix = this  var glMatrix = this  var glMatrix = this  var glMatrix = this  var glMatrix = this  var glMatrix = this  var glMatrix = this  var glMatrix = this  var glMatrix = this  var glMatrix = this  var glMatrix = this  var glMatrix = this  var glMatrix = this  var glMatrix = this  var glMatrix = this  var glMatrix = this  var glMatrix = this  var glMatrix = this  var glMatrix = this  var glMatrix = this  var glMatrix = this  var glMatrix = this  var glMatrix = this  var glMatrix = this  var glMatrix = this  var glMatrix = this  var glMatrix = this  var glMatrix = this  var glMatrix = this  var glMatrix = this  var glMatrix = this  var glMatrix = this  var glMatrix = this  var glMatrix = this  var glMatrix = this  var glMatrix = this  var glMatrix = this  var glMatrix = this  var glMatrix = this  var glMatrix = this  var glMatrix = this  var glMatrix = this  var glMatrix = this  var glMatrix = this  var glMatrix = this  var glMatrix = this  var glMatrix = this  var glMatrix = this  var glMatrix = this  var glMatrix =
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.functions.IFunctionDescriptorProvider; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.data.accessors.ITupleReference; import org.apache.hyracks.dataflow.common.data
     this._attachedSagas = Map();     this._attachedReducers = Map();     this._attachedSelectors = Map();     this._attachedSagas = Map();     this._attachedReducers = Map();     this._attachedSelectors = Map();     this._attachedSagas = Map();     this._attachedSagas = Map();     this._attachedSagas = Map();     this._attachedSagas = Map();     this._attachedSagas = Map();     this._attachedSagas = Map();     this._attachedSagas = Map();     this._attachedSagas = Map();     this._attachedSagas = Map();     this._attachedSagas = Map();     this._attachedSagas = Map();     this._attachedSagas = Map();     this._attachedSagas = Map();     this._attachedSagas = Map();     this._attachedSagas = Map();     this._attachedSagas = Map();     this._attachedSagas = Map();     this._attachedSagas = Map();     this._attachedSagas = Map();     this._attachedSagas = Map();     this._attachedSagas = Map();     this._attachedSagas = Map();     this._attachedSagas = Map();     this._attachedSagas = Map();     this._attachedSagas = Map();     this._attachedSagas = Map();     this._attachedSagas = Map();     this._attachedSagas = Map();     this._attachedSagas = Map();     this._attachedSagas = Map();     this._attachedSagas = Map();     this._attachedSagas = Map();     this._attachedSagas = Map();     this._attachedSagas = Map();     this._attachedSagas = Map();     this._attachedSagas = Map();     this._attachedSagas = Map();     this._attachedSagas = Map();     this._attachedSagas = Map();     this._attachedSagas = Map();     this._attachedSagas = Map();     this._attachedSagas = Map();     this._attachedSagas = Map();     this._attachedSagas = Map();     this._attachedSagas = Map();     this._attachedS
 psi.addBinding('shieldbattery_psi', psi.getBinding('shieldbattery_psi')) psi.addBinding('shieldbattery_psi', psi.getBinding('shieldbattery_psi')) psi.addBinding('shieldbattery_psi', psi.getBinding('shieldbattery_psi')) psi.addBinding('shieldbattery_psi', psi.getBinding('shieldbattery_psi')) psi.addBinding('shieldbattery_psi', psi.getBinding('shieldbattery_psi')) psi.addBinding('shieldbattery_psi', psi.getBinding('shieldbattery_psi')) psi.addBinding('shieldbattery_psi', psi.getBinding('shieldbattery_psi')) psi.addBinding('shieldbattery_psi', psi.getBinding('shieldbattery_psi')) psi.addBinding('shieldbattery_psi', psi.getBinding('shieldbattery_psi')) psi.addBinding('shieldbattery_psi', psi.getBinding('shieldbattery_psi')) psi.addBinding('shieldbattery_psi', psi.getBinding('shieldbattery_psi')) psi.addBinding('shieldbattery_psi', psi.getBinding('shieldbattery_psi')) psi.addBinding('shieldbattery_psi', psi.getBinding('shieldbattery_psi')) psi.addBinding('shieldbattery_psi', psi.getBinding('shieldbattery_psi')) psi.addBinding('shieldbattery_psi', psi.getBinding('shieldbattery_psi')) psi.addBinding('shieldbattery_psi', psi.getBinding('shieldbattery_psi')) psi.addBinding('shieldbattery_psi', psi.getBinding('shieldbattery_psi')) psi.addBinding('shieldbattery_psi', psi.getBinding('shieldbattery_psi')) psi.addBinding('shieldbattery_psi', psi.getBinding('shieldbattery_psi')) psi.addBinding('shieldbattery_psi', psi.getBinding('shieldbattery_psi')) psi.addBinding('shieldbattery_
<?php  /*  * This file is part of the Symfony package.  *  * (c) Fabien Potencier <fabien@symfony.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace Symfony\Component\Form\Extension\Core\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\Form\FormEvent; use Symfony\Component\Form\FormEvents; use Symfony\Component\Form\FormInterface; use Symfony\Component\Form\FormView; use Symfony\Component\OptionsResolver\OptionsResolverInterface; use Symfony\Component\OptionsResolver\OptionsResolver;  /**  * @author Fabien Potencier <fabien@symfony.com>  */ class TextType extends AbstractType {     /**      * {@inheritdoc}      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('text', 'text')             ->add('submit', 'submit')         ;     }      /**      * {@inheritdoc}      */     public function configureOptions(OptionsResolver $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Symfony\Component\Form\Extension\Core\Type\TextType'         ));     }      /**      * {@inheritdoc}      */     public function getBlockPrefix()     {         return 'symfony_form_type_text';     }      /**      * {@inheritdoc}      */     public function getName()     {         return 'symfony_form_type_text';     } } 
<?php /**  * Zend Framework  *  * LICENSE  *  * This source file is subject to the new BSD license that is bundled  * with this package in the file LICENSE.txt.  * It is also available through the world-wide-web at this URL:  * http://framework.zend.com/license/new-bsd  * If you did not receive a copy of the license and are unable to  * obtain it through the world-wide-web, please send an email  * to license@zend.com so we can send you a copy immediately.  *  * @category   Zend  * @package    Zend_Service  * @subpackage DeveloperGarden  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  * @version    $Id$  */  /**  * @see Zend_Service_DeveloperGarden_Exception  */ // require_once 'Zend/Service/DeveloperGarden/Exception.php';  /**  * @category   Zend  * @package    Zend_Service  * @subpackage DeveloperGarden  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  */ class Zend_Service_DeveloperGarden_Exception extends Zend_Service_DeveloperGarden_Exception { } 
﻿using System; using System.Collections.Generic; using System.Linq; using System.Text; using System.Threading.Tasks; using System.Windows; using System.Windows.Controls; using System.Windows.Data; using System.Windows.Documents; using System.Windows.Input; using System.Windows.Media; using System.Windows.Media.Imaging; using System.Windows.Navigation; using System.Windows.Shapes; using System.Windows.Shell; using System.IO; using System.Xml; using System.Xml.Linq; using System.Collections; using System.Collections.Generic; using System.Collections.ObjectModel; using System.Collections.Specialized; using System.ComponentModel; using System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema; using System.Diagnostics; using System.Diagnostics.CodeAnalysis; using System.Globalization; using System.Reflection; using System.Xml.Serialization; using System.Xml.Serialization.Formatters.Xml; using System.Xml.Serialization.Formatters.Binary; using System.Xml.Serialization.Formatters.XmlSerializer; using System.Xml.Serialization.Formatters.XmlSerializerSettings; using System.Xml.Serialization.Formatters.XmlSerializerSettings.Formatting; using System.Xml.Serialization; using System.Xml; using System.Xml.Linq; using System.Xml.Linq.Expressions; using System.Xml.Linq.Expressions.Linq; using System.Xml.XPath; using System.Xml.XPath.Expressions; using System.Xml.XPath.Serialization; using System.Xml.XPath; using System.Xml.XPath.Serialization.Formatters.XmlSerializer; using System.Xml.XPath.Serialization.Formatters.XmlSerializerSettings; using System.Xml.XPath.Serialization.Formatters.XmlSerializerSettings.Converters; using System.Xml.XPath.Serialization.Formatters.XmlSerializerSettings.Formatting; using System.Xml.XPath.Serialization.Formatters.XmlSerializerSettings.SerializationContext; using System.Xml.XPath.Serialization.Formatters.XmlSerializerSettings.SerializationInfo; using System.Xml.XPath.Serialization.Formatters
             name: slotData.name,             slotData: slotData         });          slotObjects.forEach(function(slotObject) {             _this.slotObjects.push(slotObject);         });          this.slotObjects = slotObjects;     }, this);      this.slotObjects.forEach(function(slotObject) {         _this.slotObjects.push(slotObject);     });      this.slotObjects.forEach(function(slotObject) {         _this.slotObjects.push(slotObject);     });      this.slotObjects.forEach(function(slotObject) {         _this.slotObjects.push(slotObject);     });      this.slotObjects.forEach(function(slotObject) {         _this.slotObjects.push(slotObject);     });      this.slotObjects.forEach(function(slotObject) {         _this.slotObjects.push(slotObject);     });      this.slotObjects.forEach(function(slotObject) {         _this.slotObjects.push(slotObject);     });      this.slotObjects.forEach(function(slotObject) {         _this.slotObjects.push(slotObject);     });      this.slotObjects.forEach(function(slotObject) {         _this.slotObjects.push(slotObject);     });      this.slotObjects.forEach(function(slotObject) {         _this.slotObjects.push(slotObject);     });      this.slotObjects.forEach(function(slotObject) {         _this.slotObjects.push(slotObject);     });      this.slotObjects.forEach(function(slotObject) {         _this.slotObjects.push(slotObject);     });      this.slotObjects.forEach(function(slotObject) {         _this.slotObjects.push(slotObject);     });      this.slotObjects.forEach(function(slotObject) {         _this.slotObjects.push(slotObject);     });      this.slotObjects.forEach(function(slotObject)
﻿//------------------------------------------------------------------------------ // <auto-generated> //     This code was generated by a tool. //     Runtime Version:4.0.30319.42000 // //     Changes to this file may cause incorrect behavior and will be lost if //     the code is regenerated. // </auto-generated> //------------------------------------------------------------------------------  using System; using System.Diagnostics; using System.Windows; using System.Windows.Automation; using System.Windows.Automation.Peers; using System.Windows.Automation.Provider; using System.Windows.Controls; using System.Windows.Controls.Primitives; using System.Windows.Data; using System.Windows.Documents; using System.Windows.Ink; using System.Windows.Input; using System.Windows.Media; using System.Windows.Media.Animation; using System.Windows.Media.Effects; using System.Windows.Media.Imaging; using System.Windows.Media.Media3D; using System.Windows.Media.TextFormatting; using System.Windows.Navigation; using System.Windows.Shapes; using System.Windows.Shapes.Design; using System.Windows.Shell; using System.ComponentModel; using System.Diagnostics.CodeAnalysis; using System.Diagnostics.Contracts; using System.Runtime.CompilerServices; using System.Windows.Documents; using System.Windows.Input; using System.Windows.Media; using System.Windows.Media.Animation; using System.Windows.Media.Effects; using System.Windows.Media.Media3D; using System.Windows.Media.TextFormatting; using System.Windows.Media.Animation.Effects; using System.Windows.Media.Media3D.Effects; using System.Windows.Media.Media3D.Media3DCore; using System.Windows.Media.Animation; using System.Windows.Media.Media3D.Media3DCore.Effects; using System.Windows.Media.Media3D.Media3DCore.Controls; using System.Windows.Media.Media3D.Media3DCore.Media3DCore.Controls.Primitives; using System.Windows.Media.Media3D.Media3DCore.Media
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'required' => false,             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'required' => false,             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
