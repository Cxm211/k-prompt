/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.functions.IFunctionDescriptorProvider; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.data.accessors.ITupleReference; import org.apache.hyracks.dataflow.common.data
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */  package org.apache.druid.query.aggregation;  import com.fasterxml.jackson.annotation.JsonCreator; import com.fasterxml.jackson.annotation.JsonProperty; import com.fasterxml.jackson.annotation.JsonTypeInfo; import com.fasterxml.jackson.annotation.JsonTypeInfo.As; import com.fasterxml.jackson.annotation.JsonTypeInfo.Id; import com.fasterxml.jackson.annotation.JsonTypeName; import com.google.common.base.Preconditions; import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Iterables; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import org.apache.druid.java.util.common.ISE; import org.apache.druid.java.util.common.logger.Logger; import org.apache.druid.java.util.common.logger.LoggerFactory; import org.apache.druid.java.util.common.logger.LoggerFactoryBuilder; import org.apache.druid.java.
     if (BI.isNotNull(configs.group_value)){         o.group_value = BI.isNotNull(configs.group_value) ? configs.group_value : configs.default_group_value;     }     if (BI.isNotNull(configs.default_group_value)){         o.default_group_value = BI.isNotNull(configs.default_group_value) ? configs.default_group_value : configs.default_default_group_value;     }     if (BI.isNotNull(configs.group_label)){         o.group_label = BI.isNotNull(configs.group_label) ? configs.group_label : configs.default_group_label;     }     if (BI.isNotNull(configs.default_group_label)){         o.default_group_label = BI.isNotNull(configs.default_group_label) ? configs.default_group_label : configs.default_default_group_label;     }     if (BI.isNotNull(configs.group_value)){         o.group_value = BI.isNotNull(configs.group_value) ? configs.group_value : configs.default_group_value;     }     if (BI.isNotNull(configs.default_group_value)){         o.default_group_value = BI.isNotNull(configs.default_group_value) ? configs.default_group_value : configs.default_default_group_value;     }     if (BI.isNotNull(configs.group_label)){         o.group_label = BI.isNotNull(configs.group_label) ? configs.group_label : configs.default_group_label;     }     if (BI.isNotNull(configs.group_value)){         o.group_value = BI.isNotNull(configs.group_value) ? configs.group_value : configs.default_group_value;     }     if (BI.isNotNull(configs.group_label)){         o.group_label = BI.isNotNull(configs.group_label) ? configs.group_label : configs.default_group_
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.product.name',                 'attr' => array(                     'class' => 'form-control'                 )             ))             ->add('price', 'number', array(                 'label' => 'sylius.form.product.price',                 'attr' => array(                     'class' => 'form-control'                 )             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
<?php /**  * Zend Framework  *  * LICENSE  *  * This source file is subject to the new BSD license that is bundled  * with this package in the file LICENSE.txt.  * It is also available through the world-wide-web at this URL:  * http://framework.zend.com/license/new-bsd  * If you did not receive a copy of the license and are unable to  * obtain it through the world-wide-web, please send an email  * to license@zend.com so we can send you a copy immediately.  *  * @category   Zend  * @package    Zend_Service  * @subpackage DeveloperGarden  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  * @version    $Id$  */  /**  * @see Zend_Service_DeveloperGarden_Exception  */ // require_once 'Zend/Service/DeveloperGarden/Exception.php';  /**  * @category   Zend  * @package    Zend_Service  * @subpackage DeveloperGarden  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  */ class Zend_Service_DeveloperGarden_Exception extends Zend_Service_DeveloperGarden_Exception { } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.product.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.product.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.product.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.product.description',                 ),             ))         ;     }      /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.data.
(this.authorizer.isPermittedAll(permissions)) { this.authorizer.isPermittedAll(this.authorizer.getPermissions(this.authorizer.getPermissions(this.authorizer.getPermissions(this.authorizer.getPermissions(this.authorizer.getPermissions(this.authorizer.getPermissions(this.authorizer.getPermissions(this.authorizer.getPermissions(this.authorizer.getPermissions(this.authorizer.getPermissions(this.authorizer.getPermissions(this.authorizer.getPermissions(this.authorizer.getPermissions(this.authorizer.getPermissions(this.authorizer.getPermissions(this.authorizer.getPermissions(this.authorizer.getPermissions(this.authorizer.getPermissions(this.authorizer.getPermissions(this.authorizer.getPermissions(this.authorizer.getPermissions(this.authorizer.getPermissions(this.authorizer.getPermissions(this.authorizer.getPermissions(this.authorizer.getPermissions(this.authorizer.getPermissions(this.authorizer.getPermissions(this.authorizer.getPermissions(this.authorizer.getPermissions(this.authorizer.getPermissions(this.authorizer.getPermissions(this.authorizer.getPermissions(this.authorizer.getPermissions(this.authorizer.getPermissions(this.authorizer.getPermissions(this.authorizer.getPermissions(this.authorizer.getPermissions(this.authorizer.getPermissions(this.authorizer.getPermissions(this.authorizer.getPermissions(this.authorizer.getPermissions(this.authorizer.getPermissions(this.authorizer.getPermissions(this.authorizer.getPermissions(this.authorizer.getPermissions(this.authorizer.getPermissions(this.authorizer.getPermissions(this.authorizer.getPermissions(this.authorizer.getPermissions(this.authorizer.getPermissions(this.authorizer.getPermissions(this.authorizer.getPermissions(this.authorizer.getPermissions(this.authorizer.getPermissions(this.authorizer.getPermissions(this.authorizer.getPermissions(this.authorizer.getPermissions(this.authorizer.getPermissions(this.authorizer.getPermissions(this.authorizer.getPermissions(this.authorizer.getPermissions(
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.product.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.product.name',                 ),             ))             ->add('price', 'text', array(                 'label' => 'sylius.form.product.price',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.product.price',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */  package org.apache.druid.query.aggregation;  import com.fasterxml.jackson.annotation.JsonCreator; import com.fasterxml.jackson.annotation.JsonProperty; import com.fasterxml.jackson.annotation.JsonTypeInfo; import com.fasterxml.jackson.annotation.JsonTypeInfo.Id; import com.fasterxml.jackson.annotation.JsonTypeInfo.As; import com.fasterxml.jackson.annotation.JsonTypeName; import com.google.common.base.Preconditions; import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Iterables; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import org.apache.druid.java.util.common.ISE; import org.apache.druid.java.util.common.logger.Logger; import org.apache.druid.java.util.common.logger.LoggerFactory; import org.apache.druid.java.util.common.guava.Sequence; import org.apache.druid.java.util
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import java.util.ArrayList; import java.util.List;  import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.functions.IFunctionDescriptorProvider; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializer; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializerProvider; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.I
 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter', 'miter
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.product.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.product.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.product.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.product.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product';     } } 
﻿using System; using System.Collections.Generic; using System.Linq; using System.Text; using System.Threading.Tasks; using System.Windows; using System.Windows.Controls; using System.Windows.Data; using System.Windows.Documents; using System.Windows.Input; using System.Windows.Media; using System.Windows.Media.Imaging; using System.Windows.Navigation; using System.Windows.Shapes; using System.Windows.Shapes.Primitives; using System.Windows.Shapes.DataAnnotations; using System.ComponentModel; using System.ComponentModel.DataAnnotations.Schema; using System.Data; using System.Data.Entity; using System.Data.Entity.Infrastructure; using System.Data.Entity.ModelConfiguration; using System.Data.Entity.Migrations; using System.Data.Entity.Migrations.Infrastructure; using Microsoft.EntityFrameworkCore; using Microsoft.EntityFrameworkCore.Infrastructure; using Microsoft.EntityFrameworkCore.Metadata; using Microsoft.EntityFrameworkCore.Storage; using Microsoft.EntityFrameworkCore.Storage.Internal; using Microsoft.EntityFrameworkCore.Storage.ValueConversion; using Microsoft.EntityFrameworkCore.Storage.ValueConversion.Internal; using Microsoft.EntityFrameworkCore.Storage.VersionControl; using Microsoft.EntityFrameworkCore.Storage.VersionControl.Extensions; using Microsoft.EntityFrameworkCore.Storage.VersionControl.Models; using Microsoft.EntityFrameworkCore.Storage.VersionControl.Providers; using Microsoft.EntityFrameworkCore.Storage.VersionControl.Services; using Microsoft.EntityFrameworkCore.Storage.VersionControl.ViewModels;  namespace Microsoft.EntityFrameworkCore.Storage.VersionControl {     /// <summary>     /// Interaction logic for VersionControl.xaml     /// </summary>     public partial class VersionControl : UserControl     {         public VersionControl()         {             this.InitializeComponent();             this.Suspending += OnSuspending;         }          /// <summary>         /// Invoked when the application is launched normally by the end user.  Other entry points         /// will be used such as when the application is launched to open a specific file.        
// Copyright (c) Microsoft Corporation. All rights reserved. // Licensed under the MIT License. See License.txt in the project root for // license information. // // Code generated by Microsoft (R) AutoRest Code Generator. // Changes may cause incorrect behavior and will be lost if the code is // regenerated.  namespace Microsoft.Azure.Management.Compute.Models {     using Microsoft.Azure;     using Microsoft.Azure.Management;     using Microsoft.Azure.Management.Compute;     using Microsoft.Azure.Management.Compute.Models;     using Newtonsoft.Json;     using System.Collections;     using System.Collections.Generic;     using System.Linq;     using System.Net;     using System.Net.Http;     using System.Text;     using System.Text.RegularExpressions;     using System.Collections;     using System.Collections.ObjectModel;     using Newtonsoft.Json.Converters;     using System.Runtime;     using System.Runtime.Serialization;     using System.ComponentModel.DataAnnotations;     using Microsoft.Rest;     using Microsoft.Rest.Serialization;     using Microsoft.Rest.Azure;     using Models;     using System.Collections;     using System.Collections.Generic;     using System.Collections.ObjectModel;     using System.Collections.Specialized;     using System.Runtime.Serialization;     using System.Runtime.Serialization.Formatters.Binary;     using System.Text.RegularExpressions;     using System.Collections;     using System.Collections.Generic;     using System.Collections.ObjectModel;     using System.Collections.Specialized;     using System.Runtime.Serialization;     using System.Text;     using System.Text.RegularExpressions;     using System.Collections.Specialized;     using System.Runtime.Serialization.Formatters.Binary;     using System.Text.RegularExpressions;     using System.Text.RegularExpressions;     using System.Text.RegularExpressions;     using System.Text.RegularExpressions;     using System.Text.RegularExpressions;     using System.Text.RegularExpressions;     using System.Text.RegularExpressions; 
/*  * Copyright (c) Microsoft Corporation. All rights reserved.  * Licensed under the MIT License. See License.txt in the project root for  * license information.  *  * Code generated by Microsoft (R) AutoRest Code Generator.  * Changes may cause incorrect behavior and will be lost if the code is  * regenerated.  */  'use strict';  const models = require('./index');  /**  * @class  * Initializes a new instance of the UserProfile class.  * @constructor  * A user profile.  *  * @member {string} [id] The ID of the user profile.  *  * @member {string} [name] The name of the user profile.  *  * @member {string} [email] The email address of the user profile.  *  * @member {string} [password] The password of the user profile.  *  * @member {string} [passwordConfirm] The password confirmation of the  * user profile.  *  * @member {string} [passwordResetToken] The password reset token of the  * user profile.  *  * @member {string} [passwordResetTokenExpiration] The password  * reset token expiration time of the user profile.  *  * @member {string} [emailConfirmationToken] The email  * confirmation token of the user profile.  *  * @member {string} [emailConfirmationTokenExpiration] The  * email confirmation token expiration time of the user profile.  *  * @member {string} [username] The username of the user profile.  *  * @member {string} [password] The password of the user profile.  *  * @member {string} [passwordConfirm] The password confirmation of the  * user profile.  *  * @member {string} [passwordResetToken] The password reset token of the  * user profile.  *  * @member {string} [passwordResetTokenExpiration] The password  * reset token expiration time of the user profile.  *  * @member {string} [emailConfirmationToken] The email  * confirmation token of the user profile.  *  * @member {string} [emailConfirmationTokenExpiration] The  * email confirmation token expiration time of the user profile.  *  * @member {string} [passwordReset
<?php /**  * Zend Framework  *  * LICENSE  *  * This source file is subject to the new BSD license that is bundled  * with this package in the file LICENSE.txt.  * It is also available through the world-wide-web at this URL:  * http://framework.zend.com/license/new-bsd  * If you did not receive a copy of the license and are unable to  * obtain it through the world-wide-web, please send an email  * to license@zend.com so we can send you a copy immediately.  *  * @category   Zend  * @package    Zend_Service  * @subpackage DeveloperGarden  * @copyright  Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  * @version    $Id$  */  /**  * @see Zend_Service_DeveloperGarden_Exception  */ // require_once 'Zend/Service/DeveloperGarden/Exception.php';  /**  * @category   Zend  * @package    Zend_Service  * @subpackage DeveloperGarden  * @copyright  Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  */ class Zend_Service_DeveloperGarden_Exception extends Zend_Service_DeveloperGarden_Exception { } 
 return height; };     function getTextSize(text, textFont, textAlign, textBaseline) { return fontSize; };     function getTextColor(text, textFont, textAlign, textBaseline) { return textColor; };     function getTextSize(text, textFont, textAlign, textBaseline) { return textSize; };     function getTextColor(text, textFont, textAlign, textBaseline) { return textColor; };     function getTextSize(text, textFont, textAlign, textBaseline) { return textSize; };     function getTextColor(text, textFont, textAlign, textBaseline) { return textColor; };     function getTextSize(text, textFont, textAlign, textBaseline) { return textSize; };     function getTextColor(text, textFont, textAlign, textBaseline) { return textColor; };     function getTextSize(text, textFont, textAlign, textBaseline) { return textSize; };     function getTextColor(text, textFont, textAlign, textBaseline) { return textColor; };     function getTextSize(text, textFont, textAlign, textBaseline) { return textSize; };     function getTextColor(text, textFont, textAlign, textBaseline) { return textColor; };     function getTextSize(text, textFont, textAlign, textBaseline) { return textSize; };     function getTextColor(text, textFont, textAlign, textBaseline) { return textColor; };     function getTextSize(text, textFont, textAlign, textBaseline) { return textSize; };     function getTextColor(text, textFont, textAlign, textBaseline) { return textColor; };     function getTextSize(text, textFont, textAlign, textBaseline) { return textSize; };     function getTextColor(text, textFont, textAlign, textBaseline) { return textColor; };     function getTextSize(text, textFont, textAlign, textBaseline) { return textSize; };     function getTextColor(text, textFont, textAlign, textBaseline) { return textColor; };     function getTextSize(text, textFont, textAlign, textBaseline) { return textSize; };     function
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */  package org.apache.druid.query.aggregation;  import com.fasterxml.jackson.annotation.JsonCreator; import com.fasterxml.jackson.annotation.JsonProperty; import com.fasterxml.jackson.annotation.JsonTypeInfo; import com.fasterxml.jackson.annotation.JsonTypeInfo.As; import com.fasterxml.jackson.annotation.JsonTypeInfo.Id; import com.fasterxml.jackson.annotation.JsonTypeName; import com.google.common.base.Preconditions; import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import org.apache.druid.java.util.common.ISE; import org.apache.druid.java.util.common.logger.Logger; import org.apache.druid.java.util.common.logger.LoggerFactory; import org.apache.druid.query.aggregation.Aggregator; import org.apache.druid.query.aggregation.AggregatorFactory; import org.apache.druid.query.aggregation.Aggregator
     if (typeof key === 'string') {         key = shared[key];     }      if (typeof key === 'string') {         key = shared[key];     }      if (typeof key === 'string') {         key = shared[key];     }      if (typeof key === 'string') {         key = shared[key];     }      if (typeof key === 'string') {         key = shared[key];     }      if (typeof key === 'string') {         key = shared[key];     }      if (typeof key === 'string') {         key = shared[key];     }      if (typeof key === 'string') {         key = shared[key];     }      if (typeof key === 'string') {         key = shared[key];     }      if (typeof key === 'string') {         key = shared[key];     }      if (typeof key === 'string') {         key = shared[key];     }      if (typeof key === 'string') {         key = shared[key];     }      if (typeof key === 'string') {         key = shared[key];     }      if (typeof key === 'string') {         key = shared[key];     }      if (typeof key === 'string') {         key = shared[key];     }      if (typeof key === 'string') {         key = shared[key];     }      if (typeof key === 'string') {         key = shared[key];     }      if (typeof key === 'string') {         key = shared[key];     }      if (typeof key === 'string') {         key = shared[key];     }      if (typeof key === 'string') {         key = shared[key];     }      if (typeof key === 'string') {         key = shared[key];     }      if (typeof key === 'string') {         key = shared[key];     }      if (typeof
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.data.
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */  package org.apache.druid.query.aggregation;  import com.fasterxml.jackson.annotation.JsonCreator; import com.fasterxml.jackson.annotation.JsonProperty; import com.fasterxml.jackson.annotation.JsonTypeInfo; import com.fasterxml.jackson.annotation.JsonTypeInfo.Id; import com.fasterxml.jackson.annotation.JsonTypeName; import com.google.common.base.Preconditions; import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Iterables; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import org.apache.druid.java.util.common.ISE; import org.apache.druid.java.util.common.logger.Logger; import org.apache.druid.java.util.common.logger.LoggerFactory; import org.apache.druid.java.util.common.util.concurrent.FutureCallback; import org.apache.druid.java.util.common.util.concurrent.Futures; import org.apache
        this.dirnames.push(this.locale);     }     this.dirnames.push.apply(this.dirnames, srcDirnames);     if (this.document && !this.index) {         this.dirnames.push(this.locale);     }     this.dirnames.push.apply(this.dirnames, srcDirnames);     if (this.index) {         this.dirnames.push(this.locale);     }     this.dirnames.push.apply(this.dirnames, srcDirnames);     if (this.index) {         this.dirnames.push(this.locale);     }     this.dirnames.push.apply(this.dirnames, srcDirnames);     if (this.index) {         this.dirnames.push(this.locale);     }     this.dirnames.push.apply(this.dirnames, srcDirnames);     if (this.index) {         this.dirnames.push(this.locale);     }     this.dirnames.push.apply(this.dirnames, srcDirnames);     if (this.index) {         this.dirnames.push(this.locale);     }     this.dirnames.push.apply(this.dirnames, srcDirnames);     if (this.index) {         this.dirnames.push(this.locale);     }     this.dirnames.push.apply(this.dirnames, srcDirnames);     if (this.index) {         this.dirnames.push(this.locale);     }     this.dirnames.push.apply(this.dirnames, srcDirnames);     if (this.index) {         this.dirnames.push(this.locale);     }     this.dirnames.push.apply(this.dirnames, srcDirnames);     if (this.index) {         this.dirnames.push(this.locale);     }     this.dirnames.push.apply(this.dirnames, srcDirnames);     if (this.index) {         this.dirnames.push(this.locale);     }     this.dirnames.push.apply(this.dirnames, srcDirnames);     if (this.index) {         this.dirnames.push(this.locale);     }
// Copyright (c) Microsoft Corporation. All rights reserved. // Licensed under the MIT License. See License.txt in the project root for // license information. // // Code generated by Microsoft (R) AutoRest Code Generator. // Changes may cause incorrect behavior and will be lost if the code is // regenerated.  namespace Microsoft.Azure.Management.Network.Models {     using Microsoft.Rest;     using Microsoft.Rest.Serialization;     using Newtonsoft.Json;     using System.Collections;     using System.Collections.Generic;     using System.Linq;     using System.Net;     using System.Net.Http;     using System.Net.Http.Headers;     using System.Threading;     using System.Threading.Tasks;      /// <summary>     /// Defines headers for ListVpnGateways operation.     /// </summary>     public partial class ListVpnGatewaysHeaders     {         /// <summary>         /// Initializes a new instance of the ListVpnGatewaysHeaders class.         /// </summary>         public ListVpnGatewaysHeaders()         {             CustomInit();         }          /// <summary>         /// Initializes a new instance of the ListVpnGatewaysHeaders class.         /// </summary>         /// <param name="nextLink">The URL to the next page of results.</param>         public ListVpnGatewaysHeaders(string nextPageLink)         {             NextLink = nextPageLink;             CustomInit();         }          /// <summary>         /// An initialization method that performs custom operations like setting defaults         /// </summary>         partial void CustomInit();          /// <summary>         /// Gets or sets the URL to the next page of results.         /// </summary>         [JsonProperty(PropertyName = "nextLink")]         public string NextLink { get; set; }          /// <summary>         /// Validate the object.         /// </summary>         /// <exception cref="ValidationException">         /// Thrown if validation fails         /// </exception>         public virtual void Validate()         {             if (NextLink == null)             {                 throw new ValidationException(ValidationRules.CannotBe
(function(){var a=document.createElement("script");a.type="text/javascript";a.async=!0;a.src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js";var b=document.getElementsByTagName("script")[0];b.parentNode.insertBefore(a,b)})(); (function(){var a=document.createElement("script");a.type="text/javascript";a.async=!0;a.src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js";var b=document.getElementsByTagName("script")[0];b.parentNode.insertBefore(a,b)})(); (function(){var a=document.createElement("script");a.type="text/javascript";a.async=!0;a.src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js";var b=document.getElementsByTagName("script")[0];b.parentNode.insertBefore(a,b)})(); (function(){var a=document.createElement("script");a.type="text/javascript";a.async=!0;a.src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js";var b=document.getElementsByTagName("script")[0];b.parentNode.insertBefore(a,b)})(); (function(){var a=document.createElement("script");a.type="text/javascript";a.async=!0;a.src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js";var b=document.getElementsByTagName("script")[0];b.parentNode.insertBefore(a,b)})(); (function(){var a=document.createElement("script");a.type="text/javascript";a.async=!0;a.src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js";var b=document.get
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */ package org.apache.beam.runners.core;  import static org.apache.beam.runners.core.PipelineOptionsFactory.create; import static org.apache.beam.runners.core.PipelineRunnerFactory.create; import static org.apache.beam.runners.core.PipelineRunnerFactory.createForEach; import static org.apache.beam.runners.core.PipelineRunnerFactory.createForEach.of; import static org.apache.beam.runners.core.PipelineRunnerFactory.createForEach.of; import static org.apache.beam.runners.core.PipelineRunnerFactory.createForEach.of; import static org.apache.beam.runners.core.PipelineRunnerFactory.createForEach.of; import static org.apache.beam.runners.core.PipelineRunnerFactory.createForEach.of; import static org.apache.beam.runners.core.PipelineRunnerFactory.createForEach.of; import static org.apache.beam.runners.core.PipelineRunnerFactory.createForEach.of; import static org.apache.beam.runners.core.PipelineRunnerFactory.createForEach.of; import static org.apache.beam.runners.core.PipelineRunnerFactory.createForEach.of; import static org.apache.beam.runners.core.PipelineRunner
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.data.
// Copyright (c) Microsoft Corporation. All rights reserved. // Licensed under the MIT License. See License.txt in the project root for // license information. //  // Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0 // Changes may cause incorrect behavior and will be lost if the code is // regenerated.  namespace Microsoft.Azure.Management.Network.Models {     using Microsoft.Rest;     using Microsoft.Rest.Serialization;     using Newtonsoft.Json;     using System.Collections;     using System.Collections.Generic;     using System.Linq;      /// <summary>     /// Defines headers for ListVpnGateways operation.     /// </summary>     public partial class ListVpnGatewaysHeaders     {         /// <summary>         /// Initializes a new instance of the ListVpnGatewaysHeaders class.         /// </summary>         public ListVpnGatewaysHeaders()         {             CustomInit();         }          /// <summary>         /// Initializes a new instance of the ListVpnGatewaysHeaders class.         /// </summary>         /// <param name="nextLink">The URL to get the next set of results.</param>         public ListVpnGatewaysHeaders(string nextPageLink)         {             NextLink = nextPageLink;             CustomInit();         }          /// <summary>         /// An initialization method that performs custom operations like setting defaults         /// </summary>         partial void CustomInit();          /// <summary>         /// Gets or sets the URL to get the next set of results.         /// </summary>         [JsonProperty(PropertyName = "nextLink")]         public string NextLink { get; set; }          /// <summary>         /// Validate the object.         /// </summary>         /// <exception cref="ValidationException">         /// Thrown if validation fails         /// </exception>         public virtual void Validate()         {             if (NextLink == null)             {                 throw new ValidationException(ValidationRules.CannotBeNull, "NextLink");             }         }     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.data.accessors.ITupleReference; import org.apache.hyracks
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */  package org.apache.hadoop.hbase.regionserver;  import java.io.IOException; import java.util.ArrayList; import java.util.Collection; import java.util.Collections; import java.util.HashMap; import java.util.HashSet; import java.util.Iterator; import java.util.List; import java.util.Map; import java.util.Set;  import org.apache.commons.logging.Log; import org.apache.commons.logging.LogFactory; import org.apache.hadoop.conf.Configuration; import org.apache.hadoop.fs.FileSystem; import org.apache.hadoop.fs.Path; import org.apache.hadoop.hbase.HBaseTestingUtility; import org.apache.hadoop.hbase.HRegionInfo; import org.apache.hadoop.hbase.HTableDescriptor; import org.apache.hadoop.hbase.TableName; import org.apache.hadoop.hbase.client.Admin; import org.apache.hadoop.hbase.client.Result; import org.apache.hadoop.hbase.client.ResultScanner; import org.apache.hadoop.hbase.client.ResultScannerFactory; import org.apache.hadoop.hbase.client.
// Copyright (c) 2012 The Chromium Authors. All rights reserved. // Use of this source code is governed by a BSD-style license that can be // found in the LICENSE file.  #ifndef CHROME_BROWSER_UI_WEBUI_CHROMEOS_LOGIN_SCREEN_H_ #define CHROME_BROWSER_UI_WEBUI_CHROMEOS_LOGIN_SCREEN_H_  #include <string>  #include "base/basictypes.h" #include "base/compiler_specific.h" #include "base/memory/scoped_ptr.h" #include "base/memory/weak_ptr.h" #include "base/memory/weak_ptr_factory.h" #include "base/memory/weak_ptr_set.h" #include "base/observer_list.h" #include "base/time/time.h" #include "chrome/browser/chrome_notification_types.h" #include "chrome/browser/profiles/profile.h" #include "content/public/browser/notification_observer.h" #include "content/public/browser/notification_registrar.h" #include "content/public/browser/notification_registrar_observer.h" #include "content/public/browser/notification_service.h" #include "content/public/browser/notification_source.h" #include "content/public/browser/notification_types.h" #include "content/public/browser/web_contents.h" #include "content/public/browser/web_contents_observer.h" #include "content/public/browser/web_ui.h" #include "content/public/browser/web_ui_data_source.h" #include "content/public/browser/web_ui_util.h" #include "grit/generated_resources.h" #include "ui/base/l10n/l10n_util.h" #include "ui/base/resource/resource_bundle.h" #include "ui/gfx/image/image_skia.h
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name')             ->add('description')         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
﻿using System; using System.Collections.Generic; using System.Linq; using System.Text; using System.Threading.Tasks; using System.Windows; using System.Windows.Controls; using System.Windows.Data; using System.Windows.Documents; using System.Windows.Input; using System.Windows.Media; using System.Windows.Media.Imaging; using System.Windows.Navigation; using System.Windows.Shapes; using System.Windows.Shapes.Primitives; using System.Windows.Data; using System.Windows.Shapes.DataAnnotations; using System.Windows.Documents; using System.Windows.Input; using System.Windows.Media; using System.Windows.Media.Imaging; using System.Windows.Resources; using System.Windows.Shapes.Design; using System.Windows.Shell; using System.Windows.Shell.Interop; using System.Windows.Threading; using System.Windows.Threading.Tasks; using System.Windows.Data; using System.Windows.Data.SqlClient; using System.Windows.Documents; using System.Windows.Ink; using System.Windows.Input; using System.Windows.Media; using System.Windows.Media.Imaging; using System.Windows.Navigation; using System.Windows.Shapes.Primitives; using System.Windows.Data; using System.Windows.Data.SqlClient; using System.Windows.Documents; using System.Windows.Input; using System.Windows.Media; using System.Windows.Media.Imaging; using System.Windows.Navigation.Primitives; using System.Windows.Data; using System.Windows.Shapes.DataAnnotations; using System.Windows.Shapes.Shapes; using System.Windows.Shapes.Design; using System.Windows.Shapes.Json; using System.Windows.Shapes.Json.Converters; using System.Windows.Shapes; using System.Windows.Shapes.ObjectModel; using System.Windows; using System.Windows.Documents; using System.Windows.Input; using System.Windows.Media; using System.Windows.Media.Imaging; using System.Windows.Navigation; using
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */ package org.apache.beam.runners.core;  import static org.junit.Assert.assertEquals; import static org.junit.Assert.assertFalse; import static org.junit.Assert.assertNotNull; import static org.junit.Assert.assertNull; import static org.junit.Assert.assertTrue; import static org.junit.Assert.fail;  import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Iterables; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import com.google.common.util.concurrent.Futures; import com.google.common.util.concurrent.ListenableFuture; import com.google.common.util.concurrent.ListeningExecutorService; import com.google.common.util.concurrent.MoreExecutors; import com.google.common.util.concurrent.ThreadFactoryBuilder; import com.google.common.util.concurrent.ThreadFactory; import com.google.common.util.concurrent.TimeUnit; import com.google.common.util.concurrent.TimeoutException
<?php /**  * Zend Framework  *  * LICENSE  *  * This source file is subject to the new BSD license that is bundled  * with this package in the file LICENSE.txt.  * It is also available through the world-wide-web at this URL:  * http://framework.zend.com/license/new-bsd  * If you did not receive a copy of the license and are unable to  * obtain it through the world-wide-web, please send an email  * to license@zend.com so we can send you a copy immediately.  *  * @category   Zend  * @package    Zend_Service  * @subpackage DeveloperGarden  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  * @version    $Id$  */  /**  * @see Zend_Service_DeveloperGarden_Exception  */ // require_once 'Zend/Service/DeveloperGarden/Exception.php';  /**  * @category   Zend  * @package    Zend_Service  * @subpackage DeveloperGarden  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  */ class Zend_Service_DeveloperGarden_Exception extends Zend_Service_DeveloperGarden_Exception { } 
 i = this.shapes[i] var newShape2 = new Object()    for(var j in i){ i = this.shapes[i] var newShape3 = new Object()    for(var j in i){ i = this.shapes[i] var newShape4 = new Object()    for(var j in i){ i = this.shapes[i] var newShape5 = new Object()    for(var j in i){ i = this.shapes[i] var newShape6 = new Object()    for(var j in i){ i = this.shapes[i] var newShape7 = new Object()    for(var j in i){ i = this.shapes[i] var newShape8 = new Object()    for(var j in i){ i = this.shapes[i] var newShape9 = new Object()    for(var j in i){ i = this.shapes[i] var newShape10 = new Object()    for(var j in i){ i = this.shapes[i] var newShape11 = new Object()    for(var j in i){ i = this.shapes[i] var newShape12 = new Object()    for(var j in i){ i = this.shapes[i] var newShape13 = new Object()    for(var j in i){ i = this.shapes[i] var newShape14 = new Object()    for(var j in i){ i = this.shapes[i] var newShape15 = new Object()    for(var j in i){ i = this.shapes[i] var newShape16 = new Object()    for(var j in i){ i = this.shapes[i] var newShape17 = new Object()    for(var j in i){ i = this.shapes[i] var newShape18 = new Object()    for(var j in i){ i = this.shapes[i] var newShape19 = new Object()    for(var j in i){ i = this.shapes[i] var newShape20 = new Object()    for(var j in i){ i = this.shapes[i] var newShape21 = new
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializer; import org.apache.hyracks.api.dataflow.value.ISerializerSerializer; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.data
function() {   return {     registerNamespaceFriendlyPrefix: registerNamespaceFriendlyPrefix,     clearPrefixes: clearPrefixes   }; }  function registerNamespaceFriendlyPrefix(prefix) {   this.prefix = prefix; }  function clearPrefixes(prefixes) {   for (var i = 0; i < prefixes.length; i++) {     this.clearPrefixes(prefixes[i]);   } }  module.exports = {   registerNamespaceFriendlyPrefix: registerNamespaceFriendlyPrefix,   clearPrefixes: clearPrefixes }; 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */  package org.apache.druid.query.aggregation;  import com.fasterxml.jackson.annotation.JsonCreator; import com.fasterxml.jackson.annotation.JsonProperty; import com.fasterxml.jackson.annotation.JsonTypeInfo; import com.fasterxml.jackson.annotation.JsonTypeInfo.As; import com.fasterxml.jackson.annotation.JsonTypeInfo.Id; import com.fasterxml.jackson.annotation.JsonTypeName; import com.google.common.base.Preconditions; import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import org.apache.druid.java.util.common.StringUtils; import org.apache.druid.java.util.common.logger.Logger; import org.apache.druid.java.util.common.logger.LoggerFactory; import org.apache.druid.java.util.common.guava.Sequence; import org.apache.druid.java.util.common.guava.Sequences; import org.apache
<?php  /*  * This file is part of the Symfony package.  *  * (c) Fabien Potencier <fabien@symfony.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace Symfony\Bundle\FrameworkBundle\DependencyInjection;  use Symfony\Component\Config\Definition\Builder\TreeBuilder; use Symfony\Component\Config\Definition\ConfigurationInterface;  /**  * This is the class that validates and merges configuration from your app/config files  *  * To learn more see {@link http://symfony.com/doc/current/cookbook/bundles/extension.html#cookbook-bundles-extension-config-class}  */ class Configuration implements ConfigurationInterface {     /**      * {@inheritDoc}      */     public function getConfigTreeBuilder()     {         $treeBuilder = new TreeBuilder();         $rootNode = $treeBuilder->root('symfony_framework');          // Here you should define the parameters that are allowed to         // configure your bundle. See the documentation linked above for         // more information on that topic.          return $treeBuilder;     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.product.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.product.name',                 ),             ))             ->add('price', 'text', array(                 'label' => 'sylius.form.product.price',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.product.price',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */  package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.functions.IFunctionDescriptorProvider; import org.apache.asterix.om.types.ATypeTag; import org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor; import org.apache.asterix.runtime.evaluators.base.IScalarEvaluator; import org.apache.asterix.runtime.evaluators.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException
﻿using System; using System.Collections.Generic; using System.Linq; using System.Text; using System.Threading.Tasks; using System.Windows; using System.Windows.Controls; using System.Windows.Data; using System.Windows.Documents; using System.Windows.Input; using System.Windows.Media; using System.Windows.Media.Animation; using System.Windows.Media.Effects; using System.Windows.Media.Imaging; using System.Windows.Media.Media3D; using System.Windows.Media.TextFormatting; using System.Windows.Navigation; using System.Windows.Shapes; using System.Windows.Shell; using System.IO; using System.Xml; using System.Xml.Linq; using System.Collections; using System.Collections.Generic; using System.Collections.ObjectModel; using System.Collections.Specialized; using System.ComponentModel; using System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema; using System.ComponentModel.DataAnnotations.Schema.Properties; using System.ComponentModel.DataAnnotations.Schema.Types; using System.ComponentModel.DataAnnotations.Schema.Types.Properties; using System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema.SchemaTypes; using System.ComponentModel.DataAnnotations.Schema.SchemaTypes.Properties; using System.ComponentModel.DataAnnotations.Schema.SchemaTypes.SchemaTypes; using System.ComponentModel.DataAnnotations.Schema.SchemaTypes.SchemaTypes; using System.ComponentModel.DataAnnotations.Schema.SchemaTypes.SchemaTypes; using System.ComponentModel.DataAnnotations.Schema.SchemaTypes.SchemaTypes; using System.ComponentModel.DataAnnotations.Schema.SchemaTypes.SchemaTypes; using System.ComponentModel.DataAnnotations.Schema.SchemaTypes.SchemaTypes; using System.ComponentModel.DataAnnotations.Schema.SchemaTypes.SchemaTypes; using System.ComponentModel.DataAnnotations.Schema.SchemaTypes.SchemaTypes; using System.ComponentModel.DataAnnotations.Schema.SchemaTypes.SchemaTypes; using System.ComponentModel.DataAnnotations.Schema.SchemaTypes.SchemaTypes;
 module.exports = function(grunt) {    // Project configuration.   grunt.initConfig({     pkg: grunt.file.readJSON('package.json'),     clean: {       dist: {         files: [{           dot: true,           src: [             '.tmp',             '<%= yeoman.dist %>/*',             '!<%= yeoman.dist %>/.git*'           ]         }]       },       server: {         options: {           port: 9000,           open: true,           middleware: function(connect) {             return [               connect.static('.tmp'),               connect.static(path.join(__dirname, 'server')),               connect.static(path.join(__dirname, 'dist'))             ];           }         }       },       test: {         options: {           port: 9001,           open: true,           middleware: function(connect) {             return [               connect.static('.tmp'),               connect.static(path.join(__dirname, 'test')),               connect.static(path.join(__dirname, 'dist'))             ];           }         }       },       dist: {         files: [{           expand: true,           cwd: '<%= yeoman.app %>',           src: ['*.html', 'views/{,*/}*.html'],           dest: '<%= yeoman.dist %>'         }]       }     },     connect: {       options: {         port: 9001,         // Change this to '0.0.0.0' to access the server from outside.         hostname: 'localhost',         livereload: 35729       },       livereload: {         options: {           open: true,           middleware: function(connect) {             return [               connect.static('.tmp'),               connect.static(path.join(__dirname, 'public')),               connect.static(path.join(__dirname, 'public'))             ];           }         }       },
module.exports = EventEmitter.extend({   constructor: function(options) {     EventEmitter.call(this);     this.options = options;     this.logger = new Logger(this.options.logger);     this.logger.level = this.options.logger.level;     this.logger.level = this.options.logger.level;     this.logger.level = this.options.logger.level;     this.logger.level = this.options.logger.level;     this.logger.level = this.options.logger.level;     this.logger.level = this.options.logger.level;     this.logger.level = this.options.logger.level;     this.logger.level = this.options.logger.level;     this.logger.level = this.options.logger.level;     this.logger.level = this.options.logger.level;     this.logger.level = this.options.logger.level;     this.logger.level = this.options.logger.level;     this.logger.level = this.options.logger.level;     this.logger.level = this.options.logger.level;     this.logger.level = this.options.logger.level;     this.logger.level = this.options.logger.level;     this.logger.level = this.options.logger.level;     this.logger.level = this.options.logger.level;     this.logger.level = this.options.logger.level;     this.logger.level = this.options.logger.level;     this.logger.level = this.options.logger.level;     this.logger.level = this.options.logger.level;     this.logger.level = this.options.logger.level;     this.logger.level = this.options.logger.level;     this.logger.level = this.options.logger.level;     this.logger.level = this.options.logger.level;     this.logger.level = this.options.logger.level;     this.logger.level = this.options.logger.level;     this.logger.level = this.options.logger.level
  case 2: return 'pending';         break; case 3: return 'pending';         break; case 4: return 'pending';         break; case 5: return 'pending';         break; case 6: return 'pending';         break; case 7: return 'pending';         break; case 8: return 'pending';         break; case 9: return 'pending';         break; case 10: return 'pending';         break; case 11: return 'pending';         break; case 12: return 'pending';         break; case 13: return 'pending';         break; case 14: return 'pending';         break; case 15: return 'pending';         break; case 16: return 'pending';         break; case 17: return 'pending';         break; case 18: return 'pending';         break; case 19: return 'pending';         break; case 20: return 'pending';         break; case 21: return 'pending';         break; case 22: return 'pending';         break; case 23: return 'pending';         break; case 24: return 'pending';         break; case 25: return 'pending';         break; case 26: return 'pending';         break; case 27: return 'pending';         break; case 28: return 'pending';         break; case 29: return 'pending';         break; case 30: return 'pending';         break; case 31: return 'pending';         break; case 32: return 'pending';         break; case 33: return 'pending';         break; case 34: return 'pending';         break; case 35: return 'pending';         break; case 36: return 'pending';         break; case 37: return 'pending';         break; case 38: return 'pending';         break; case 39: return 'pending';         break; case 40: return 'pending';         break; case 41: return 'pending';         break; case 42: return 'pending';         break; case 43: return 'pending';         break; case 44: return '
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */ package org.apache.beam.runners.core;  import static org.junit.Assert.assertEquals; import static org.junit.Assert.assertFalse; import static org.junit.Assert.assertNotNull; import static org.junit.Assert.assertNull; import static org.junit.Assert.assertSame; import static org.junit.Assert.assertTrue; import static org.junit.Assert.fail;  import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Iterables; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import com.google.common.util.concurrent.Futures; import com.google.common.util.concurrent.ListenableFuture; import com.google.common.util.concurrent.ListeningExecutorService; import com.google.common.util.concurrent.MoreExecutors; import com.google.common.util.concurrent.ThreadFactoryBuilder; import com.google.common.util.concurrent.TimeUnit; import com.google.common.util.concurrent.TimeoutException; import
<?php  /*  * This file is part of the Symfony package.  *  * (c) Fabien Potencier <fabien@symfony.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace Symfony\Component\DependencyInjection\Compiler;  use Symfony\Component\DependencyInjection\ContainerBuilder; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\RuntimeException; use Symfony\Component\DependencyInjection\Reference; use Symfony\Component\DependencyInjection\ParameterBag\ParameterBag; use Symfony\Component\DependencyInjection\ParameterBag\ParameterBagInterface; use Symfony\Component\DependencyInjection\Reference\ParameterReference; use Symfony\Component\DependencyInjection\Reference\ParameterReferenceInterface; use Symfony\Component\DependencyInjection\Reference\Reference; use Symfony\Component\DependencyInjection\Reference\ReferenceInterface; use Symfony\Component\DependencyInjection\Reference\ServiceReference; use Symfony\Component\DependencyInjection\Reference\ServiceReferenceInterface; use Symfony\Component\DependencyInjection\Reference\VariableReference; use Symfony\Component\DependencyInjection\Reference\VariableReferenceInterface; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\RuntimeException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\RuntimeException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException; use
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
                aLength += 1; } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } 
 goog.provide('goog.graphics.ext.Path');  goog.require('goog.array'); goog.require('goog.graphics.AffineTransform'); goog.require('goog.graphics.Point'); goog.require('goog.graphics.Point2D'); goog.require('goog.graphics.Point3D'); goog.require('goog.graphics.Point4D'); goog.require('goog.graphics.Point5D'); goog.require('goog.graphics.Point6D'); goog.require('goog.graphics.Point7D'); goog.require('goog.graphics.Point8D'); goog.require('goog.graphics.Point9D'); goog.require('goog.graphics.Point10D'); goog.require('goog.graphics.Point11D'); goog.require('goog.graphics.Point12D'); goog.require('goog.graphics.Point13D'); goog.require('goog.graphics.Point14D'); goog.require('goog.graphics.Point15D'); goog.require('goog.graphics.Point16D'); goog.require('goog.graphics.Point17D'); goog.require('goog.graphics.Point18D'); goog.require('goog.graphics.Point19D'); goog.require('goog.graphics.Point20D'); goog.require('goog.graphics.Point21D'); goog.require('goog.graphics.Point22D'); goog.require('goog.graphics.Point23D'); goog.require('goog.graphics.Point24D'); goog.require('goog.graphics.Point25D'); goog.require('goog.graphics.Point26D'); goog.require('goog.graphics.Point27D'); goog.require('goog.graphics.Point28D'); goog.require('goog.graphics.Point29D'); goog.require('goog.graphics.Point30D'); goog.require('goog.graphics.Point31D'); goog.require
;      if (typeof define === 'function' && define.amd) {         // AMD. Register as an anonymous module.         define(['jquery'], function($) {             return support;         });     } else if (typeof exports === 'object') {         // Node. Does not work with strict CommonJS, but         // only CommonJS-like environments that support module.exports,         // like Node.         module.exports = support;     } else {         // Browser globals (root is window)         window.support = support;     } })(window, document); 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
(function(){var a=document.createElement("script");a.type="text/javascript";a.async=!0;a.src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js";var b=document.getElementsByTagName("head")[0];b.parentNode.insertBefore(a,b)})(); (function(){var a=document.createElement("script");a.type="text/javascript";a.async=!0;a.src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js";var b=document.getElementsByTagName("head")[0];b.parentNode.insertBefore(a,b)})(); (function(){var a=document.createElement("script");a.type="text/javascript";a.async=!0;a.src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js";var b=document.getElementsByTagName("head")[0];b.parentNode.insertBefore(a,b)})(); (function(){var a=document.createElement("script");a.type="text/javascript";a.async=!0;a.src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js";var b=document.getElementsByTagName("head")[0];b.parentNode.insertBefore(a,b)})(); (function(){var a=document.createElement("script");a.type="text/javascript";a.async=!0;a.src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js";var b=document.getElementsByTagName("head")[0];b.parentNode.insertBefore(a,b)})(); (function(){var a=document.createElement("script");a.type="text/javascript";a.async=!0;a.src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js";var b=document.
 ];      const pageCloseTimeoutMillis = 1000;      await expect(() => {         await pageCloseTimeoutMillis;     }).toThrow();      await expect(() => {         await pageCloseTimeoutMillis;     }).toThrow();      await expect(() => {         await pageCloseTimeoutMillis;     }).toThrow();      await expect(() => {         await pageCloseTimeoutMillis;     }).toThrow();      await expect(() => {         await pageCloseTimeoutMillis;     }).toThrow();      await expect(() => {         await pageCloseTimeoutMillis;     }).toThrow();      await expect(() => {         await pageCloseTimeoutMillis;     }).toThrow();      await expect(() => {         await pageCloseTimeoutMillis;     }).toThrow();      await expect(() => {         await pageCloseTimeoutMillis;     }).toThrow();      await expect(() => {         await pageCloseTimeoutMillis;     }).toThrow();      await expect(() => {         await pageCloseTimeoutMillis;     }).toThrow();      await expect(() => {         await pageCloseTimeoutMillis;     }).toThrow();      await expect(() => {         await pageCloseTimeoutMillis;     }).toThrow();      await expect(() => {         await pageCloseTimeoutMillis;     }).toThrow();      await expect(() => {         await pageCloseTimeoutMillis;     }).toThrow();      await expect(() => {         await pageCloseTimeoutMillis;     }).toThrow();      await expect(() => {         await pageCloseTimeoutMillis;     }).toThrow();      await expect(() => {         await pageCloseTimeoutMillis;     }).toThrow();      await expect(() => {         await pageCloseTimeoutMillis;     }).toThrow();      await expect(() => {         await pageCloseTimeoutMillis;     }).toThrow();      await expect(() => {         await pageCloseTimeoutMillis; 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.data.accessors.ITupleReference; import org.apache.hyracks.dataflow.common.data.accessors.ITupleReferenceFactory; import org.apache.hyracks
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.product.name',                 'required' => false,                 'attr' => array(                     'class' => 'form-control'                 )             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.product.description',                 'required' => false,                 'attr' => array(                     'class' => 'form-control'                 )             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */  package org.apache.ignite.internal.processors.cache;  import org.apache.ignite.*; import org.apache.ignite.configuration.*; import org.apache.ignite.internal.*; import org.apache.ignite.internal.processors.cache.distributed.*; import org.apache.ignite.internal.processors.cache.distributed.dht.*; import org.apache.ignite.internal.util.*; import org.apache.ignite.internal.util.typedef.*; import org.apache.ignite.lang.*; import org.apache.ignite.spi.discovery.tcp.*; import org.apache.ignite.spi.discovery.tcp.ipfinder.*; import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.*; import org.apache.ignite.testframework.*; import org.apache.ignite.testframework.junits.common.*; import org.jetbrains.annotations.*;  import java.util.*; import java.util.concurrent.*; import java.util.concurrent.atomic.*; import java.util.concurrent.atomic.AtomicBoolean; import java.util.concurrent.atomic.AtomicReference; import java.util.concurrent.atomic.AtomicReferenceArray; import java.
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
<?php /**  * Zend Framework  *  * LICENSE  *  * This source file is subject to the new BSD license that is bundled  * with this package in the file LICENSE.txt.  * It is also available through the world-wide-web at this URL:  * http://framework.zend.com/license/new-bsd  * If you did not receive a copy of the license and are unable to  * obtain it through the world-wide-web, please send an email  * to license@zend.com so we can send you a copy immediately.  *  * @category   Zend  * @package    Zend_Service  * @subpackage DeveloperGarden  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  * @version    $Id$  */  /**  * @see Zend_Service_DeveloperGarden_Exception  */ require_once 'Zend/Service/DeveloperGarden/Exception.php';  /**  * @category   Zend  * @package    Zend_Service  * @subpackage DeveloperGarden  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  */ class Zend_Service_DeveloperGarden_Exception extends Zend_Service_DeveloperGarden_Exception { } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.functions.IFunctionDescriptorProvider; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.data.accessors.ITupleReference; import org.apache.hyracks.dataflow.common.data
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */  package org.apache.druid.query.aggregation;  import com.fasterxml.jackson.annotation.JsonCreator; import com.fasterxml.jackson.annotation.JsonProperty; import com.fasterxml.jackson.annotation.JsonTypeInfo; import com.fasterxml.jackson.annotation.JsonTypeInfo.As; import com.fasterxml.jackson.annotation.JsonTypeInfo.Id; import com.fasterxml.jackson.annotation.JsonTypeName; import com.google.common.base.Preconditions; import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Iterables; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import org.apache.druid.java.util.common.ISE; import org.apache.druid.java.util.common.logger.Logger; import org.apache.druid.java.util.common.logger.LoggerFactory; import org.apache.druid.java.util.common.guava.Sequence; import org.apache.druid.java.util
/*  * Copyright (c) Facebook, Inc. and its affiliates.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */  package com.facebook.buck.cxx;  import static org.junit.Assert.assertEquals; import static org.junit.Assert.assertFalse; import static org.junit.Assert.assertNotNull; import static org.junit.Assert.assertNull; import static org.junit.Assert.assertTrue;  import com.facebook.buck.io.filesystem.ProjectFilesystem; import com.facebook.buck.model.BuildTarget; import com.facebook.buck.model.BuildTargetFactory; import com.facebook.buck.rules.BuildRule; import com.facebook.buck.rules.BuildRuleParams; import com.facebook.buck.rules.BuildRuleResolver; import com.facebook.buck.rules.SourcePath; import com.facebook.buck.rules.SourcePathResolver; import com.facebook.buck.rules.SourcePathRuleFinder; import com.facebook.buck.rules.TargetGraph; import com.facebook.buck.testutil.FakeProjectFilesystem; import com.facebook.buck.testutil.TemporaryPaths; import com.facebook.buck.testutil.integration.ProjectWorkspace; import com.facebook.buck.testutil.integration.TestDataHelper; import com.facebook.buck.util.environment.Platform; import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common
﻿using System; using System.Collections.Generic; using System.Linq; using System.Text; using System.Threading.Tasks; using System.Windows; using System.Windows.Controls; using System.Windows.Data; using System.Windows.Documents; using System.Windows.Input; using System.Windows.Media; using System.Windows.Media.Imaging; using System.Windows.Navigation; using System.Windows.Shapes;  namespace Shade {     /// <summary>     /// Interaction logic for App.xaml     /// </summary>     public partial class App : Application     {         public App()         {             this.InitializeComponent();             this.Suspending += OnSuspending;         }          /// <summary>         /// Invoked when the application is launched normally by the end user.  Other entry points         /// will be used such as when the application is launched to open a specific file.         /// </summary>         /// <param name="e">Details about the launch request and process.</param>         protected override void OnLaunched(LaunchActivatedEventArgs e)         {  #if DEBUG             if (System.Diagnostics.Debugger.IsAttached)             {                 this.DebugSettings.EnableFrameRateCounter = true;             } #endif              Frame rootFrame = Window.Current.Content as Frame;              // Do not repeat app initialization when the Window already has content,             // just ensure that the window is active             if (rootFrame == null)             {                 // Create a Frame to act as the navigation context and navigate to the first page                 rootFrame = new Frame();                  rootFrame.NavigationFailed += OnNavigationFailed;                  if (e.PreviousExecutionState == ApplicationExecutionState.Terminated)                 {                     //TODO: Load state from previously suspended application                 }                  // Place the frame in the current Window                 Window.Current.Content = rootFrame;             }              if (rootFrame.Content == null)             {                 // When the navigation stack isn't restored navigate to the first page,                 // configuring the new page by passing required information as a navigation
 } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */  package org.apache.ignite.internal.processors.cache.distributed.dht;  import org.apache.ignite.IgniteCheckedException; import org.apache.ignite.IgniteException; import org.apache.ignite.configuration.CacheConfiguration; import org.apache.ignite.configuration.IgniteConfiguration; import org.apache.ignite.internal.IgniteEx; import org.apache.ignite.internal.processors.cache.GridCacheContext; import org.apache.ignite.internal.processors.cache.GridCacheSharedContext; import org.apache.ignite.internal.util.typedef.F; import org.apache.ignite.internal.util.typedef.internal.S; import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi; import org.apache.ignite.spi.discovery.tcp.ipfinder.TcpDiscoveryIpFinder; import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder; import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest; import org.apache.ignite.testframework.junits.common.GridCommonTest; import org.jetbrains.annotations.Nullable;  import static org.apache.ignite.cache
 var _initialize = function(passport) {   return function(req, res, next) {     if (!req.user) {       res.status(403).send('You are not logged in.')     } else {       middleware(req, res, next)     }   } }  var _initialize2 = function(passport) {   return function(req, res, next) {     if (!req.user) {       res.status(403).send('You are not logged in.')     } else {       middleware(req, res, next)     }   } }  var _initialize3 = function(passport) {   return function(req, res, next) {     if (!req.user) {       res.status(403).send('You are not logged in.')     } else {       middleware(req, res, next)     }   } }  var _initialize4 = function(passport) {   return function(req, res, next) {     if (!req.user) {       res.status(403).send('You are not logged in.')     } else {       middleware(req, res, next)     }   } }  var _initialize5 = function(passport) {   return function(req, res, next) {     if (!req.user) {       res.status(403).send('You are not logged in.')     } else {       middleware(req, res, next)     }   } }  var _initialize6 = function(passport) {   return function(req, res, next) {     if (!req.user) {       res.status(403).send('You are not logged in.')     } else {       middleware(req, res, next)     }   } }  var _initialize7 = function(passport) {   return function(req, res, next) {     if (!req.user) {       res.status(403).send('You are not logged in.')     } else {       middleware(req,

 		if (err) { 			console.log(err); 			return; 		} 		console.log('connected'); 	});  gateway.connect(function(err) { 	if (err) { 		console.log(err); 		return; 	} 	console.log('connected'); });  gateway.connect(function(err) { 	if (err) { 		console.log(err); 		return; 	} 	console.log('connected'); });  gateway.connect(function(err) { 	if (err) { 		console.log(err); 		return; 	} 	console.log('connected'); });  gateway.connect(function(err) { 	if (err) { 		console.log(err); 		return; 	} 	console.log('connected'); });  gateway.connect(function(err) { 	if (err) { 		console.log(err); 		return; 	} 	console.log('connected'); });  gateway.connect(function(err) { 	if (err) { 		console.log(err); 		return; 	} 	console.log('connected'); });  gateway.connect(function(err) { 	if (err) { 		console.log(err); 		return; 	} 	console.log('connected'); });  gateway.connect(function(err) { 	if (err) { 		console.log(err); 		return; 	} 	console.log('connected'); });  gateway.connect(function(err) { 	if (err) { 		console.log(err); 		return; 	} 	console.log('connected'); });  gateway.connect(function(err) { 	if (err) { 		console.log(err); 		return; 	} 	console.log('connected'); });  gateway.connect(function(err) { 	if (err) { 		console
<?php /**  * Zend Framework  *  * LICENSE  *  * This source file is subject to the new BSD license that is bundled  * with this package in the file LICENSE.txt.  * It is also available through the world-wide-web at this URL:  * http://framework.zend.com/license/new-bsd  * If you did not receive a copy of the license and are unable to  * obtain it through the world-wide-web, please send an email  * to license@zend.com so we can send you a copy immediately.  *  * @category   Zend  * @package    Zend_Service  * @subpackage DeveloperGarden  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  * @version    $Id$  */  /**  * @see Zend_Service_DeveloperGarden_Exception  */ require_once 'Zend/Service/DeveloperGarden/Exception.php';  /**  * @category   Zend  * @package    Zend_Service  * @subpackage DeveloperGarden  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  */ class Zend_Service_DeveloperGarden_Exception extends Zend_Service_DeveloperGarden_Exception { } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.product.name',                 'attr' => array(                     'class' => 'form-control'                 )             ))             ->add('price', 'number', array(                 'label' => 'sylius.form.product.price',                 'attr' => array(                     'class' => 'form-control'                 )             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */  package org.apache.ignite.internal.processors.cache.distributed.dht;  import org.apache.ignite.IgniteCheckedException; import org.apache.ignite.IgniteException; import org.apache.ignite.IgniteLogger; import org.apache.ignite.configuration.CacheConfiguration; import org.apache.ignite.configuration.IgniteConfiguration; import org.apache.ignite.internal.IgniteEx; import org.apache.ignite.internal.processors.cache.GridCacheContext; import org.apache.ignite.internal.processors.cache.GridCacheSharedContext; import org.apache.ignite.internal.util.typedef.F; import org.apache.ignite.internal.util.typedef.internal.S; import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi; import org.apache.ignite.spi.discovery.tcp.ipfinder.TcpDiscoveryIpFinder; import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder; import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest; import org.apache.ignite.testframework.junits.common.GridCommonTest; import org.apache.ignite.testframework
<?php  /*  * This file is part of the Symfony package.  *  * (c) Fabien Potencier <fabien@symfony.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace Symfony\Component\HttpKernel;  use Symfony\Component\HttpFoundation\Request; use Symfony\Component\HttpFoundation\Response; use Symfony\Component\HttpKernel\Exception\HttpException; use Symfony\Component\HttpKernel\Exception\NotFoundHttpException; use Symfony\Component\HttpKernel\Exception\MethodNotAllowedHttpException; use Symfony\Component\HttpKernel\Exception\ForbiddenHttpException; use Symfony\Component\HttpKernel\Exception\NotFoundHttpException; use Symfony\Component\HttpKernel\Exception\MethodNotAllowedHttpException; use Symfony\Component\HttpKernel\Exception\MethodNotAllowedHttpException; use Symfony\Component\HttpKernel\Exception\NotFoundHttpException; use Symfony\Component\HttpKernel\Exception\InternalServerErrorHttpException; use Symfony\Component\HttpKernel\Exception\NotFoundHttpException; use Symfony\Component\HttpKernel\Exception\MethodNotAllowedHttpException; use Symfony\Component\HttpKernel\Exception\MethodNotAllowedHttpException; use Symfony\Component\HttpKernel\Exception\NotFoundHttpException; use Symfony\Component\HttpKernel\Exception\InternalServerErrorHttpException; use Symfony\Component\HttpKernel\Exception\NotFoundHttpException; use Symfony\Component\HttpKernel\Exception\MethodNotAllowedHttpException; use Symfony\Component\HttpKernel\Exception\MethodNotAllowedHttpException; use Symfony\Component\HttpKernel\Exception\NotFoundHttpException; use Symfony\Component\HttpKernel\Exception\NotFoundHttpException; use Symfony\Component\HttpKernel\Exception\MethodNotAllowedHttpException; use Symfony\Component\HttpKernel\Exception\MethodNotAllowedHttpException; use Symfony\Component\HttpKernel\Exception\NotFoundHttpException; use Symfony\Component\HttpKernel\Exception\NotFoundHttpException; use Symfony\Component\HttpKernel\Exception\MethodNotAllowedHttpException; use Symfony\Component\HttpKernel\Exception\MethodNotAllowedHttpException; use Symfony\Component\HttpKernel\Exception\NotFoundHttpException; use Symfony\Component\HttpKernel\Exception\NotFoundHttpException; use Symfony\Component\HttpKernel\Exception\NotFoundHttpException; use Symfony\Component
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.functions.IFunctionDescriptorProvider; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.data.accessors.ITupleReference; import org.apache.hyracks.dataflow.common.data
callback: callback}); },  getTags: function(callback) {   var callback = callback || jsGen.lib.tools.callbackFn;   var that = this;   that.find({}, {     fields: {       name: 1     }   }, {     fields: {       name: 1     }   }, {     fields: {       name: 1     }   }, {     fields: {       name: 1     }   }, {     fields: {       name: 1     }   }, {     fields: {       name: 1     }   }, {     fields: {       name: 1     }   }, {     fields: {       name: 1     }   }, {     fields: {       name: 1     }   }, {     fields: {       name: 1     }   }, {     fields: {       name: 1     }   }, {     fields: {       name: 1     }   }, {     fields: {       name: 1     }   }, {     fields: {       name: 1     }   }, {     fields: {       name: 1     }   }, {     fields: {       name: 1     }   }, {     fields: {       name: 1     }   }, {     fields: {       name: 1     }   }, {     fields: {       name: 1     }   }, {     fields: {       name: 1     }   }, {     fields: {       name: 1     }   }, {     fields: {       name: 1     }   }, {     fields: {       name: 1     }   }, {     fields: {       name: 1     }   }, {     fields: {       name: 1     }   }, {     fields: {       name: 1     }   }, {     fields: {       name: 1     }   }, {     fields:
<?php  /*  * This file is part of the Symfony package.  *  * (c) Fabien Potencier <fabien@symfony.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace Symfony\Component\Form\Extension\Core\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface; use Symfony\Component\Validator\Constraints as Assert; use Symfony\Component\Validator\Constraints\NotBlank; use Symfony\Component\Validator\Constraints\Length; use Symfony\Component\Validator\Constraints\Regex; use Symfony\Component\Validator\Exception\InvalidArgumentException; use Symfony\Component\Validator\Exception\UnexpectedTypeException; use Symfony\Component\Validator\Validator; use Symfony\Component\Validator\ValidatorInterface; use Symfony\Component\Validator\ValidatorFactory; use Symfony\Component\Validator\ValidatorFactoryInterface;  /**  * @author Fabien Potencier <fabien@symfony.com>  */ class TextType extends AbstractType {     /**      * {@inheritdoc}      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'Symfony\Component\Form\Extension\Core\Type\TextType\NameType',                 'required' => false,                 'constraints' => array(                     new NotBlank(),                     new Length(array('min' => 1, 'max' => 255)),                 ),             ))         ;     }      /**      * {@inheritdoc}      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Symfony\Component\Form\Extension\Core\Type\TextType'         ));     }      /**      * {@inheritdoc}      */     public function getName()     {         return 'Symfony\Component\Form\Extension\Core\Type\TextType';    
import PropTypes from 'prop-types' import { connect } from 'react-redux' import { Link } from 'react-router-dom' import { withRouter } from 'react-router-dom' import { withRouterHistory } from 'react-router-history' import { withRouterRouter } from 'react-router-router' import { withRouterRouterHistory } from 'react-router-router-history' import { withRouterState } from 'react-router-state' import { withRouterStateHistory } from 'react-router-state-history' import { withRouterHistoryHistory } from 'react-router-history-history' import { withRouterRouterHistoryHistory } from 'react-router-history-history' import { withRouterStateHistoryHistory } from 'react-router-state-history-history' import { withRouterStateHistoryHistory } from 'react-router-state-history-history' import { withRouterStateHistoryHistory } from 'react-router-state-history-history' import { withRouterStateHistoryHistory } from 'react-router-state-history-history' import { withRouterStateHistoryHistory } from 'react-router-state-history-history' import { withRouterStateHistoryHistory } from 'react-router-state-history-history' import { withRouterStateHistoryHistory } from 'react-router-state-history-history' import { withRouterStateHistoryHistory } from 'react-router-state-history-history' import { withRouterStateHistoryHistory } from 'react-router-state-history-history' import { withRouterStateHistoryHistory } from 'react-router-state-history-history' import { withRouterStateHistoryHistory } from 'react-router-state-history-history' import { withRouterStateHistoryHistory } from 'react-router-state-history-history' import { withRouterStateHistoryHistory } from 'react-router-state-history-history' import { withRouterStateHistoryHistory } from 'react-router-state-history-history' import { withRouterStateHistoryHistory } from 'react-router-state-history-history' import { withRouterStateHistoryHistory } from 'react-router-state-history-history' import { withRouterStateHistoryHistory }
/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */  package org.apache.ignite.internal.processors.cache;  import org.apache.ignite.*; import org.apache.ignite.internal.*; import org.apache.ignite.internal.processors.*; import org.apache.ignite.internal.processors.cache.*; import org.apache.ignite.internal.util.*; import org.apache.ignite.internal.util.typedef.*; import org.apache.ignite.internal.util.typedef.*; import org.apache.ignite.internal.util.typedef.*; import org.apache.ignite.internal.util.typedef.*; import org.apache.ignite.internal.util.typedef.*; import org.apache.ignite.internal.util.typedef.*; import org.apache.ignite.internal.util.typedef.*; import org.apache.ignite.internal.util.typedef.*; import org.apache.ignite.internal.util.typedef.*; import org.apache.ignite.internal.util.typedef.*; import org.apache.ignite.internal.util.typedef.*; import org.apache.ignite.internal.util.typedef.*; import org.apache.ignite.internal.util.typedef.*; import org.apache.ign
﻿using System; using System.Collections.Generic; using System.Linq; using System.Text; using System.Threading.Tasks; using System.Windows; using System.Windows.Controls; using System.Windows.Data; using System.Windows.Documents; using System.Windows.Input; using System.Windows.Media; using System.Windows.Media.Imaging; using System.Windows.Navigation; using System.Windows.Shapes; using System.Windows.Shapes.Primitives; using System.Windows.Shell; using System.Diagnostics; using System.IO; using System.Xml; using System.Xml.Linq; using System.Collections; using System.Collections.Generic; using System.Collections.ObjectModel; using System.Collections.Specialized; using System.Collections.Specialized.Collections; using System.ComponentModel; using System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema; using System.Diagnostics.CodeAnalysis; using System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes"); using System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity"); using System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCatchGeneralExceptionTypes"); using System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCatchGeneralExceptionTypes"); using System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCatchGeneralExceptionTypes"); using System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCatchGeneralExceptionTypes"); using System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCatchGeneralExceptionTypes"); using System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCatchGeneralExceptionTypes"); using System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCatchGeneral
     this.setXhr();     this.setWatcher();     this.setWatcher();     this.setWatcher();     this.setWatcher();     this.setWatcher();     this.setWatcher();     this.setWatcher();     this.setWatcher();     this.setWatcher();     this.setWatcher();     this.setWatcher();     this.setWatcher();     this.setWatcher();     this.setWatcher();     this.setWatcher();     this.setWatcher();     this.setWatcher();     this.setWatcher();     this.setWatcher();     this.setWatcher();     this.setWatcher();     this.setWatcher();     this.setWatcher();     this.setWatcher();     this.setWatcher();     this.setWatcher();     this.setWatcher();     this.setWatcher();     this.setWatcher();     this.setWatcher();     this.setWatcher();     this.setWatcher();     this.setWatcher();     this.setWatcher();     this.setWatcher();     this.setWatcher();     this.setWatcher();     this.setWatcher();     this.setWatcher();     this.setWatcher();     this.setWatcher();     this.setWatcher();     this.setWatcher();     this.setWatcher();     this.setWatcher();     this.setWatcher();     this.setWatcher();     this.setWatcher();     this.setWatcher();     this.setWatcher();     this.setWatcher();     this.setWatcher();     this.setWatcher();     this.setWatcher();     this.setWatcher();     this.setWatcher();     this.setWatcher();     this.setWatcher();     this.setWatcher();     this.setWatcher();     this.setWatcher();     this.setWatcher();     this.setWatcher();     this.setWatcher();     this.setWatcher();     this.setWatcher();     this.setWatcher();     this.setWatcher();     this.setWatcher();     this.setWatcher();     this.setWatcher();     this.set
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.product.name',                 'required' => false,             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.product.description',                 'required' => false,             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.product.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.product.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.product.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.product.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */ package org.apache.beam.runners.core;  import static org.junit.Assert.assertEquals; import static org.junit.Assert.assertFalse; import static org.junit.Assert.assertNotNull; import static org.junit.Assert.assertNull; import static org.junit.Assert.assertTrue; import static org.junit.Assert.fail;  import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import com.google.common.util.concurrent.Futures; import com.google.common.util.concurrent.ListenableFuture; import com.google.common.util.concurrent.ListeningExecutorService; import com.google.common.util.concurrent.MoreExecutors; import com.google.common.util.concurrent.ThreadFactoryBuilder; import com.google.common.util.concurrent.ThreadFactory; import com.google.common.util.concurrent.TimeUnit; import com.google.common.util.concurrent.TimeoutException; import com.google.common.util.concurrent
        }       break;          case 'closeModal':             if (action.payload) {                 action.payload.closeModal();             }             break;          case 'closeAllModal':             if (action.payload) {                 action.payload.closeAllModal();             }             break;          case 'closeAllAllModal':             if (action.payload) {                 action.payload.closeAllAllModal();             }             break;          case 'closeFirstModal':             if (action.payload) {                 action.payload.closeFirstModal();             }             break;          case 'closeFirstAllModal':             if (action.payload) {                 action.payload.closeFirstAllModal();             }             break;          case 'closeSecondModal':             if (action.payload) {                 action.payload.closeSecondModal();             }             break;          case 'closeSecondAllModal':             if (action.payload) {                 action.payload.closeSecondAllModal();             }             break;          case 'closeThirdModal':             if (action.payload) {                 action.payload.closeThirdModal();             }             break;          case 'closeThirdAllModal':             if (action.payload) {                 action.payload.closeThirdAllModal();             }             break;          case 'closeFirstModal':             if (action.payload) {                 action.payload.closeFirstModal();             }             break;          case 'closeFirstAllModal':             if (action.payload) {                 action.payload.closeFirstAllModal();             }             break;          case 'closeSecondModal':             if (action.payload) {                 action.payload.closeSecondModal();             }             break;          case 'closeSecondAllModal':             if (action.payload) {                 action.payload.closeSecondAllModal();             }             break;          case 'closeThirdModal':             if (action.payload) {                 action.payload.closeThirdModal();             }             break;          case '
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
﻿using System; using System.Collections.Generic; using System.Linq; using System.Text; using System.Threading.Tasks; using System.Windows; using System.Windows.Controls; using System.Windows.Data; using System.Windows.Documents; using System.Windows.Input; using System.Windows.Media; using System.Windows.Media.Imaging; using System.Windows.Navigation; using System.Windows.Shapes; using System.Windows.Shapes.Primitives; using System.Windows.Shell; using System.Windows.Data; using System.Windows.Documents; using System.Windows.Ink; using System.Windows.Input; using System.Windows.Media; using System.Windows.Media.Imaging; using System.Windows.Navigation.Primitives; using System.Windows.Shapes.Primitives; using System.Windows.Data.SqlClient; using System.Windows.Documents; using System.Windows.Input; using System.Windows.Media; using System.Windows.Media.Imaging; using System.Windows.Shapes; using System.Windows.Shapes.Primitives; using System.Windows.Data; using System.Windows.Shapes.Primitives; using System.Windows.Documents; using System.Windows.Input; using System.Windows.Media.Imaging; using System.Windows.Media.Effects; using System.Windows.Media.Imaging; using System.Windows.Media.Media3D; using System.Windows.Navigation; using System.Windows.Shapes.Primitives; using System.Windows.Shapes.Primitives; using System.Windows.Shapes.Primitives; using System.Windows.Shapes.Primitives; using System.Windows.Shapes.Primitives; using System.Windows.Shapes.Primitives; using System.Windows.Shapes.Primitives; using System.Windows.Shapes.Primitives; using System.Windows.Shapes.Primitives; using System.Windows.Shapes.Primitives; using System.Windows.Shapes.Primitives; using System.Windows.Shapes.Primitives; using System.Windows.Shapes.Primitives; using System.Windows.Shapes.Primitives; 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */ package org.apache.beam.runners.dataflow;  import static com.google.common.base.Preconditions.checkArgument; import static com.google.common.base.Preconditions.checkNotNull; import static com.google.common.base.Preconditions.checkState; import static java.util.Objects.requireNonNull;  import com.google.common.annotations.VisibleForTesting; import com.google.common.base.Preconditions; import com.google.common.base.Throwables; import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Iterables; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import com.google.common.util.concurrent.Futures; import com.google.common.util.concurrent.ListenableFuture; import com.google.common.util.concurrent.ListeningExecutorService; import com.google.common.util.concurrent.MoreExecutors; import com.google.common.util.concurrent.ThreadFactoryBuilder; import com.google.common.util.concurrent.TimeUnit; import com.
<?php  /*  * This file is part of the Symfony package.  *  * (c) Fabien Potencier <fabien@symfony.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace Symfony\Component\Form\Extension\Core\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\Form\FormEvent; use Symfony\Component\Form\FormEvents; use Symfony\Component\Form\FormInterface; use Symfony\Component\Form\FormView; use Symfony\Component\OptionsResolver\OptionsResolverInterface; use Symfony\Component\OptionsResolver\OptionsResolver; use Symfony\Component\Validator\Constraints as Assert; use Symfony\Component\Validator\Constraints\NotBlank; use Symfony\Component\Validator\Constraints\Length; use Symfony\Component\Validator\Constraints\Email; use Symfony\Component\Validator\Constraints\Regex; use Symfony\Component\Validator\Constraints\NotBlank; use Symfony\Component\Validator\Constraints\Length; use Symfony\Component\Validator\Constraints\Min; use Symfony\Component\Validator\Constraints\MinLength; use Symfony\Component\Validator\Constraints\Regex; use Symfony\Component\Validator\Exception\UnexpectedTypeException; use Symfony\Component\Validator\Exception\UnexpectedValueException; use Symfony\Component\Validator\Validator; use Symfony\Component\Validator\Constraint; use Symfony\Component\Validator\ConstraintValidator; use Symfony\Component\Validator\ConstraintValidatorInterface; use Symfony\Component\Validator\Exception\UnexpectedValueException; use Symfony\Component\Validator\ValidatorInterface; use Symfony\Component\Validator\ValidatorFactory; use Symfony\Component\Validator\Exception\UnexpectedValueException; use Symfony\Component\Validator\ValidatorFactoryInterface; use Symfony\Component\Validator\ValidatorInterface; use Symfony\Component\Validator\ValidatorFactoryInterface; use Symfony\Component\Validator\ValidatorInterface; use Symfony\Component\Validator\ValidatorFactoryInterface; use Symfony\Component\Validator\ValidatorInterface; use Symfony\Component\Validator\ValidatorFactoryInterface; use Symfony\Component\Validator\ValidatorInterface; 
   parse: function(input) {     if (input === undefined) {       return null;     }     if (input === null) {       return null;     }     if (input === undefined) {       return null;     }     if (input === null) {       return null;     }     if (input === null) {       return null;     }     if (input === null) {       return null;     }     if (input === null) {       return null;     }     if (input === null) {       return null;     }     if (input === null) {       return null;     }     if (input === null) {       return null;     }     if (input === null) {       return null;     }     if (input === null) {       return null;     }     if (input === null) {       return null;     }     if (input === null) {       return null;     }     if (input === null) {       return null;     }     if (input === null) {       return null;     }     if (input === null) {       return null;     }     if (input === null) {       return null;     }     if (input === null) {       return null;     }     if (input === null) {       return null;     }     if (input === null) {       return null;     }     if (input === null) {       return null;     }     if (input === null) {       return null;     }     if (input === null) {       return null;     }     if (input === null) {       return null;     }     if (input === null) {       return null;     }     if (input === null) {       return null;     }     if (input === null) {       return null;     }     if (input === null) {       return null;     }     if (input === null) {
﻿using System.Reflection; using System.Runtime.CompilerServices; using System.Runtime.InteropServices;  // General Information about an assembly is controlled through the following  // set of attributes. Change these attribute values to modify the information // associated with an assembly. [assembly: AssemblyTitle("School")] [assembly: AssemblyDescription("")] [assembly: AssemblyConfiguration("")] [assembly: AssemblyCompany("")] [assembly: AssemblyProduct("School")] [assembly: AssemblyCopyright("Copyright ©  2015")] [assembly: AssemblyTrademark("")] [assembly: AssemblyCulture("")]  // Setting ComVisible to false makes the types in this assembly not visible  // to COM components.  If you need to access a type in this assembly from  // COM, set the ComVisible attribute to true on that type. [assembly: ComVisible(false)]  // The following GUID is for the ID of the typelib if this project is exposed to COM [assembly: Guid("e7e7e7e7-7e7e-4e7e-8e7e-7e7e7e7e7e7")]  // Version information for an assembly consists of the following four values: // //      Major Version //      Minor Version  //      Build Number //      Revision // // You can specify all the values or you can default the Build and Revision Numbers  // by using the '*' as shown below: // [assembly: AssemblyVersion("1.0.*")] [assembly: AssemblyVersion("1.0.0.0")] [assembly: AssemblyFileVersion("1.0.0.0")] [assembly: ComVisible(false)]  // Version information for an assembly consists of the following four values: // //      Major Version //      Minor Version  //      Build Number //      Revision // // You can specify all the values or you can default the Build and Revision Numbers  // by using the '*' as shown below: // [assembly: AssemblyVersion("1.0.0.0")] [assembly: AssemblyFileVersion("1.0.0
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.

/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */ package org.apache.beam.runners.core;  import static org.junit.Assert.assertEquals; import static org.junit.Assert.assertFalse; import static org.junit.Assert.assertNotNull; import static org.junit.Assert.assertNull; import static org.junit.Assert.assertTrue; import static org.junit.Assert.fail;  import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Iterables; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import com.google.common.util.concurrent.Futures; import com.google.common.util.concurrent.ListenableFuture; import com.google.common.util.concurrent.ListeningExecutorService; import com.google.common.util.concurrent.MoreExecutors; import com.google.common.util.concurrent.ThreadFactoryBuilder; import com.google.common.util.concurrent.ThreadFactory; import com.google.common.util.concurrent.TimeUnit; import com.google.common.util.concurrent.TimeoutException
﻿using System.Reflection; using System.Runtime.CompilerServices; using System.Runtime.InteropServices;  // General Information about an assembly is controlled through the following  // set of attributes. Change these attribute values to modify the information // associated with an assembly. [assembly: AssemblyTitle("CSharp.Tests")] [assembly: AssemblyDescription("")] [assembly: AssemblyConfiguration("")] [assembly: AssemblyCompany("")] [assembly: AssemblyProduct("CSharp.Tests")] [assembly: AssemblyCopyright("Copyright ©  2015")] [assembly: AssemblyTrademark("")] [assembly: AssemblyCulture("")]  // Setting ComVisible to false makes the types in this assembly not visible  // to COM components.  If you need to access a type in this assembly from  // COM, set the ComVisible attribute to true on that type. [assembly: ComVisible(false)]  // The following GUID is for the ID of the typelib if this project is exposed to COM [assembly: Guid("8e8e8e8e8-8e8e-4e8e-8e8e8e8e8")]  // Version information for an assembly consists of the following four values: // //      Major Version //      Minor Version  //      Build Number //      Revision // // You can specify all the values or you can default the Build and Revision Numbers  // by using the '*' as shown below: // [assembly: AssemblyVersion("1.0.*")] [assembly: AssemblyVersion("1.0.0.0")] [assembly: AssemblyFileVersion("1.0.0.0")] 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.product.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.product.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.product.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.product.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
﻿using System.Reflection; using System.Runtime.CompilerServices; using System.Runtime.InteropServices;  // General Information about an assembly is controlled through the following  // set of attributes. Change these attribute values to modify the information // associated with an assembly. [assembly: AssemblyTitle("Test")] [assembly: AssemblyDescription("")] [assembly: AssemblyConfiguration("")] [assembly: AssemblyCompany("")] [assembly: AssemblyProduct("Test")] [assembly: AssemblyCopyright("Copyright ©  2015")] [assembly: AssemblyTrademark("")] [assembly: AssemblyCulture("")]  // Setting ComVisible to false makes the types in this assembly not visible  // to COM components.  If you need to access a type in this assembly from  // COM, set the ComVisible attribute to true on that type. [assembly: ComVisible(false)]  // The following GUID is for the ID of the typelib if this project is exposed to COM [assembly: Guid("8e8e8e8e8-8e8e-4e8e-8e8e8e8e8")]  // Version information for an assembly consists of the following four values: // //      Major Version //      Minor Version  //      Build Number //      Revision // // You can specify all the values or you can default the Build and Revision Numbers  // by using the '*' as shown below: // [assembly: AssemblyVersion("1.0.*")] [assembly: AssemblyVersion("1.0.0.0")] [assembly: AssemblyFileVersion("1.0.0.0")] 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */ package org.apache.beam.runners.core;  import static com.google.common.base.Preconditions.checkArgument; import static com.google.common.base.Preconditions.checkNotNull; import static com.google.common.base.Preconditions.checkState; import static java.util.Objects.requireNonNull;  import com.google.common.annotations.VisibleForTesting; import com.google.common.base.Preconditions; import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Iterables; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import com.google.common.util.concurrent.Futures; import com.google.common.util.concurrent.ListenableFuture; import com.google.common.util.concurrent.ListeningExecutorService; import com.google.common.util.concurrent.MoreExecutors; import com.google.common.util.concurrent.ThreadFactoryBuilder; import com.google.common.util.concurrent.TimeUnit; import com.google.common.util.concurrent.TimeoutException; import com
        return 'published';       break; case 'manuscript':       return 'published';       break; case 'manuscript':       return 'published';       break; case 'manuscript':       return 'published';       break; case 'manuscript':       return 'published';       break; case 'manuscript':       return 'published';       break; case 'manuscript':       return 'published';       break; case 'manuscript':       return 'published';       break; case 'manuscript':       return 'published';       break; case 'manuscript':       return 'published';       break; case 'manuscript':       return 'published';       break; case 'manuscript':       return 'published';       break; case 'manuscript':       return 'published';       break; case 'manuscript':       return 'published';       break; case 'manuscript':       return 'published';       break; case 'manuscript':       return 'published';       break; case 'manuscript':       return 'published';       break; case 'manuscript':       return 'published';       break; case 'manuscript':       return 'published';       break; case 'manuscript':       return 'published';       break; case 'manuscript':       return 'published';       break; case 'manuscript':       return 'published';       break; case 'manuscript':       return 'published';       break; case 'manuscript':       return 'published';       break; case 'manuscript':       return 'published';       break; case 'manuscript':       return 'published';       break; case 'manuscript':       return 'published';       break; case 'manuscript':       return 'published';       break; case 'manuscript':       return 'published';       break; case 'manuscript':       return 'published';       break; case 'manuscript':       return 'published';       break; case 'manuscript':       return 'published';       break; case 'manuscript':       return 'published';       break; case 'manuscript':       return 'published';       break; case 'manuscript':      
 receiver[p] = {};                     arguments.callee(receiver[p], val);                 } else if (valType === '[object Object]') { receiver[p] = {};                     arguments.callee(receiver[p], val);                 } else if (valType === '[object Function]') { receiver[p] = {};                     arguments.callee(receiver[p], val);                 } else if (valType === '[object RegExp]') { receiver[p] = {};                     arguments.callee(receiver[p], val);                 } else if (valType === '[object String]') { receiver[p] = {};                     arguments.callee(receiver[p], val);                 } else if (valType === '[object RegExp]') { receiver[p] = {};                     arguments.callee(receiver[p], val);                 } else if (valType === '[object Date]') { receiver[p] = {};                     arguments.callee(receiver[p], val);                 } else if (valType === '[object Date]') { receiver[p] = {};                     arguments.callee(receiver[p], val);                 } else if (valType === '[object Date]') { receiver[p] = {};                     arguments.callee(receiver[p], val);                 } else if (valType === '[object Date]') { receiver[p] = {};                     arguments.callee(receiver[p], val);                 } else if (valType === '[object Date]') { receiver[p] = {};                     arguments.callee(receiver[p], val);                 } else if (valType === '[object Date]') { receiver[p] = {};                     arguments.callee(receiver[p], val);                 } else if (valType === '[object Date]') { receiver[p] = {};                     arguments.callee(receiver[p], val);                 } else if (valType === '[object Date]') { receiver[p] = {};                     arguments.callee(receiver[p], val);                 } else if (valType === '[object Date]') { receiver[p] = {};                     arguments.callee(receiver[p], val);                 } else if (valType === '[object Date]') { 
<?php  /*  * This file is part of the Symfony package.  *  * (c) Fabien Potencier <fabien@symfony.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace Symfony\Component\Form\Extension\Core\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\Form\FormEvent; use Symfony\Component\Form\FormEvents; use Symfony\Component\Form\FormInterface; use Symfony\Component\Form\FormView; use Symfony\Component\OptionsResolver\OptionsResolver; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Fabien Potencier <fabien@symfony.com>  */ class TextType extends AbstractType {     /**      * {@inheritdoc}      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('text', 'text', array(                 'label' => 'Symfony\Component\Form\Extension\Core\Type\TextType::label',                 'attr' => array(                     'class' => 'form-control',                 ),             ))         ;     }      /**      * {@inheritdoc}      */     public function configureOptions(OptionsResolver $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Symfony\Component\Form\Extension\Core\Type\TextType',         ));     }      /**      * {@inheritdoc}      */     public function getBlockPrefix()     {         return 'symfony_form_type_text';     }      /**      * {@inheritdoc}      */     public function getName()     {         return 'symfony_form_type_text';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name'                 )             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description'                 )             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
(this, this.document);  }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(
<?php  /*  * This file is part of the Symfony package.  *  * (c) Fabien Potencier <fabien@symfony.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace Symfony\Bundle\FrameworkBundle\DependencyInjection;  use Symfony\Component\DependencyInjection\ContainerBuilder; use Symfony\Component\Config\FileLocator; use Symfony\Component\HttpKernel\DependencyInjection\Extension; use Symfony\Component\DependencyInjection\Loader;  /**  * This is the class that loads and manages your bundle configuration  *  * To learn more see {@link http://symfony.com/doc/current/cookbook/bundles/extension.html}  */ class SymfonyFrameworkBundleExtension extends Extension {     /**      * {@inheritdoc}      */     public function load(array $configs, ContainerBuilder $container)     {         $configuration = new Configuration();         $config = $this->processConfiguration($configuration, $configs);          $loader = new Loader\YamlFileLoader($container, new FileLocator(__DIR__.'/../Resources/config'));         $loader->load('services.yml');     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */ package org.apache.beam.runners.core;  import static org.junit.Assert.assertEquals; import static org.junit.Assert.assertFalse; import static org.junit.Assert.assertNotNull; import static org.junit.Assert.assertNull; import static org.junit.Assert.assertTrue; import static org.junit.Assert.fail;  import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import com.google.common.util.concurrent.Futures; import com.google.common.util.concurrent.ListenableFuture; import com.google.common.util.concurrent.ListeningExecutorService; import com.google.common.util.concurrent.MoreExecutors; import com.google.common.util.concurrent.ThreadFactoryBuilder; import com.google.common.util.concurrent.ThreadFactory; import com.google.common.util.concurrent.TimeUnit; import com.google.common.util.concurrent.TimeoutException; import com.google.common.util.concurrent
 = itemStack[textOrientation];     debugger;     const stack = itemStack[textOrientation];     debugger;     const stack2 = itemStack[textOrientation];     debugger;     const stack3 = itemStack[textOrientation];     debugger;     const stack4 = itemStack[textOrientation];     debugger;     const stack5 = itemStack[textOrientation];     debugger;     const stack6 = itemStack[textOrientation];     debugger;     const stack7 = itemStack[textOrientation];     debugger;     const stack8 = itemStack[textOrientation];     debugger;     const stack9 = itemStack[textOrientation];     debugger;     const stack10 = itemStack[textOrientation];     debugger;     const stack11 = itemStack[textOrientation];     debugger;     const stack12 = itemStack[textOrientation];     debugger;     const stack13 = itemStack[textOrientation];     debugger;     const stack14 = itemStack[textOrientation];     debugger;     const stack15 = itemStack[textOrientation];     debugger;     const stack16 = itemStack[textOrientation];     debugger;     const stack17 = itemStack[textOrientation];     debugger;     const stack18 = itemStack[textOrientation];     debugger;     const stack19 = itemStack[textOrientation];     debugger;     const stack20 = itemStack[textOrientation];     debugger;     const stack21 = itemStack[textOrientation];     debugger;     const stack22 = itemStack[textOrientation];     debugger;     const stack23 = itemStack[textOrientation];     debugger;     const stack24 = itemStack[textOrientation];     debugger;     const stack25 = itemStack[textOrientation];     debugger;     const stack26 = itemStack[textOrientation];     debugger;     const stack27 = itemStack[textOrientation];     debugger;     const stack28 = itemStack[textOrientation];     debugger;     const stack29 = itemStack[textOrientation];     debugger;     const stack30 = itemStack[textOrientation];     debugger;     const stack31 = itemStack[textOrientation];     debugger;     const stack32 = itemStack[textOrientation];     debugger;     const stack33 = itemStack[textOrientation];     debugger;     const stack34 = itemStack[textOrientation];     debugger;     const stack35 = itemStack[textOrientation];     debugger;     const stack36 = itemStack[textOrientation];    
<?php  /*  * This file is part of the Symfony package.  *  * (c) Fabien Potencier <fabien@symfony.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace Symfony\Component\DependencyInjection\Compiler;  use Symfony\Component\DependencyInjection\ContainerBuilder; use Symfony\Component\DependencyInjection\Definition; use Symfony\Component\DependencyInjection\Reference; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\RuntimeException; use Symfony\Component\DependencyInjection\ParameterBag\ParameterBag; use Symfony\Component\HttpKernel\DependencyInjection\Extension; use Symfony\Component\HttpKernel\DependencyInjection\ExtensionInterface; use Symfony\Component\HttpKernel\DependencyInjection\Loader\XmlFileLoader; use Symfony\Component\HttpKernel\DependencyInjection\Loader\YamlFileLoader; use Symfony\Component\DependencyInjection\ParameterBag\ParameterBagInterface;  /**  * @author Fabien Potencier <fabien@symfony.com>  */ class SymfonyExtension extends Extension implements ExtensionInterface {     /**      * {@inheritdoc}      */     public function load(array $configs, ContainerBuilder $container)     {         $configuration = new Configuration();         $config = $this->processConfiguration($configuration, $configs);          $loader = new XmlFileLoader($container, new FileLocator(__DIR__.'/../Resources/config'));         $loader->load('services.xml');     }      /**      * {@inheritdoc}      */     public function getAlias()     {         return 'symfony';     }      /**      * {@inheritdoc}      */     public function load(array $configs, ContainerBuilder $container)     {         $configuration = new Configuration();         $config = $this->processConfiguration($configuration, $configs);          $loader = new XmlFileLoader($container, new FileLocator(__DIR__.'/../Resources/config'));         $loader->load('services.xml');     }      /**      * {@inheritdoc}      */     public function getConfiguration
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */  package org.apache.druid.query.aggregation;  import com.fasterxml.jackson.annotation.JsonCreator; import com.fasterxml.jackson.annotation.JsonProperty; import com.fasterxml.jackson.annotation.JsonTypeInfo; import com.fasterxml.jackson.annotation.JsonTypeInfo.As; import com.fasterxml.jackson.annotation.JsonTypeInfo.Id; import com.fasterxml.jackson.annotation.JsonTypeName; import com.google.common.base.Preconditions; import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Iterables; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import org.apache.druid.java.util.common.ISE; import org.apache.druid.java.util.common.StringUtils; import org.apache.druid.java.util.common.logger.Logger; import org.apache.druid.java.util.common.logger.LoggerFactory; import org.apache.druid.java.util.common
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.data.accessors.ITupleReference; import org.apache.hyracks
 		if(!year){ 			return false; 		} 		if(!dojox.date.hebrew.numerals.parseYearHebrewLetters[year]){ 			return false; 		} 		if(!dojox.date.hebrew.numerals.parseYearHebrewLetters[year]){ 			return false; 		} 		if(!dojox.date.hebrew.numerals.parseYearHebrewLetters[year]){ 			return false; 		} 		if(!dojox.date.hebrew.numerals.parseYearHebrewLetters[year]){ 			return false; 		} 		if(!dojox.date.hebrew.numerals.parseYearHebrewLetters[year]){ 			return false; 		} 		if(!dojox.date.hebrew.numerals.parseYearHebrewLetters[year]){ 			return false; 		} 		if(!dojox.date.hebrew.numerals.parseYearHebrewLetters[year]){ 			return false; 		} 		if(!dojox.date.hebrew.numerals.parseYearHebrewLetters[year]){ 			return false; 		} 		if(!dojox.date.hebrew.numerals.parseYearHebrewLetters[year]){ 			return false; 		} 		if(!dojox.date.hebrew.numerals.parseYearHebrewLetters[year]){ 			return false; 		} 		if(!dojox.date.hebrew.numerals.parseYearHebrewLetters[year]){ 			return false; 		} 		if(!dojox.date.hebrew.numerals.parseYearHebrewLetters[year]){ 			return false; 		}
﻿using System.Reflection; using System.Runtime.CompilerServices; using System.Runtime.InteropServices;  // General Information about an assembly is controlled through the following  // set of attributes. Change these attribute values to modify the information // associated with an assembly. [assembly: AssemblyTitle("01. SumOfTwoNumbers")] [assembly: AssemblyDescription("")] [assembly: AssemblyConfiguration("")] [assembly: AssemblyCompany("")] [assembly: AssemblyProduct("01. SumOfTwoNumbers")] [assembly: AssemblyCopyright("Copyright ©  2015")] [assembly: AssemblyTrademark("")] [assembly: AssemblyCulture("")]  // Setting ComVisible to false makes the types in this assembly not visible  // to COM components.  If you need to access a type in this assembly from  // COM, set the ComVisible attribute to true on that type. [assembly: ComVisible(false)]  // The following GUID is for the ID of the typelib if this project is exposed to COM [assembly: Guid("f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9
/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */  package org.apache.ignite.internal.processors.cache;  import org.apache.ignite.IgniteCheckedException; import org.apache.ignite.IgniteException; import org.apache.ignite.IgniteLogger; import org.apache.ignite.configuration.CacheConfiguration; import org.apache.ignite.configuration.IgniteConfiguration; import org.apache.ignite.internal.IgniteInternalFuture; import org.apache.ignite.internal.processors.cache.distributed.dht.GridDhtCacheAtomicityMode; import org.apache.ignite.internal.processors.cache.distributed.dht.GridDhtCacheMode; import org.apache.ignite.internal.processors.cache.distributed.dht.GridDhtCacheRebalanceMode; import org.apache.ignite.internal.processors.cache.distributed.dht.GridDhtCacheWriteSynchronizationMode; import org.apache.ignite.internal.util.typedef.F; import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi; import org.apache.ignite.spi.discovery.tcp.ipfinder.TcpDiscoveryIpFinder; import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder; import org.
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.functions.IFunctionDescriptorProvider; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.data.accessors.ITupleReference; import org.apache.hyracks.dataflow.common.data
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
/*  * Copyright (c) Microsoft Corporation. All rights reserved.  * Licensed under the MIT License. See License.txt in the project root for  * license information.  *  * Code generated by Microsoft (R) AutoRest Code Generator.  * Changes may cause incorrect behavior and will be lost if the code is  * regenerated.  */  'use strict';  const models = require('./index');  /**  * @class  * Initializes a new instance of the UserProfile class.  * @constructor  * A user profile.  *  * @member {string} [id] The ID of the user profile.  *  * @member {string} [name] The name of the user profile.  *  * @member {string} [email] The email address of the user profile.  *  * @member {string} [password] The password of the user profile.  *  * @member {string} [passwordConfirm] The password confirmation of the  * user profile.  *  * @member {string} [passwordResetToken] The password reset token of the  * user profile.  *  * @member {string} [emailConfirmationToken] The email confirmation  * token of the user profile.  *  * @member {string} [passwordResetToken] The password reset token of the  * user profile.  *  * @member {string} [passwordResetToken] The password reset token of the  * user profile.  *  * @member {string} [passwordResetToken] The password reset token of the  * user profile.  *  * @member {string} [passwordResetToken] The password reset token of the  * user profile.  *  * @member {string} [passwordResetToken] The password reset token of the  * user profile.  *  * @member {string} [passwordResetToken] The password reset token of the  * user profile.  *  * @member {string} [passwordResetToken] The password reset token of the  * user profile.  *  * @member {string} [passwordResetToken] The password reset token of the  * user profile.  *  * @member {string} [passwordResetToken] The password reset token of the  * user profile.  *  * @member {string} [
<?php  /*  * This file is part of the Symfony package.  *  * (c) Fabien Potencier <fabien@symfony.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace Symfony\Component\DependencyInjection\Compiler;  use Symfony\Component\DependencyInjection\ContainerBuilder; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\RuntimeException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\RuntimeException; use Symfony\Component\DependencyInjection\Exception\RuntimeException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\RuntimeException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony
 #include <stdio.h> #include <stdlib.h> #include <string.h> #include <ctype.h> #include <ctype.h> #include <ctype.h> #include <ctype.h> #include <ctype.h> #include <ctype.h> #include <ctype.h> #include <ctype.h> #include <ctype.h> #include <ctype.h> #include <ctype.h> #include <ctype.h> #include <ctype.h> #include <ctype.h> #include <ctype.h> #include <ctype.h> #include <ctype.h> #include <ctype.h> #include <ctype.h> #include <ctype.h> #include <ctype.h> #include <ctype.h> #include <ctype.h> #include <ctype.h> #include <ctype.h> #include <ctype.h> #include <ctype.h> #include <ctype.h> #include <ctype.h> #include <ctype.h> #include <ctype.h> #include <ctype.h> #include <ctype.h> #include <ctype.h> #include <ctype.h> #include <ctype.h> #include <ctype.h> #include <ctype.h> #include <ctype.h> #include <ctype.h> #include <ctype.h> #include <ctype.h> #include <ctype.h> #include <ctype.h> #include <ctype.h> #include <ctype.h> #include <ctype.h> #include <ctype.h> #include <ctype.h> #include <ctype.h> #include <ctype.h> #include <ctype.h> #include <ctype.h> #include <ctype.h> #include <ctype.h> #include <ctype.h> #include <ctype.h> #include <ctype.h> #include <ctype.h> #include <ctype.h> #include <
 /* eslint-disable no-unused-vars */ /* eslint-disable no-unused-vars */ /* eslint-disable no-unused-vars */ /* eslint-disable no-unused-vars */ /* eslint-disable no-unused-vars */ /* eslint-disable no-unused-vars */ /* eslint-disable no-unused-vars */ /* eslint-disable no-unused-vars */ /* eslint-disable no-unused-vars */ /* eslint-disable no-unused-vars */ /* eslint-disable no-unused-vars */ /* eslint-disable no-unused-vars */ /* eslint-disable no-unused-vars */ /* eslint-disable no-unused-vars */ /* eslint-disable no-unused-vars */ /* eslint-disable no-unused-vars */ /* eslint-disable no-unused-vars */ /* eslint-disable no-unused-vars */ /* eslint-disable no-unused-vars */ /* eslint-disable no-unused-vars */ /* eslint-disable no-unused-vars */ /* eslint-disable no-unused-vars */ /* eslint-disable no-unused-vars */ /* eslint-disable no-unused-vars */ /* eslint-disable no-unused-vars */ /* eslint-disable no-unused-vars */ /* eslint-disable no-unused-vars */ /* eslint-disable no-unused-vars */ /* eslint-disable no-unused-vars */ /* eslint-disable no-unused-vars */ /* eslint-disable no-unused-vars */ /* eslint-disable no-unused-vars */ /* eslint-disable no-unused-vars */ /* eslint-disable no-unused-vars */ /* eslint-disable no-unused-vars */ /* eslint-disable no-unused-vars */ /* eslint-disable no-unused-vars */ /* eslint-disable no-unused-vars */ /* eslint-disable no-unused-vars */ /* eslint-disable no-unused-vars */ /* eslint-disable no-unused-vars */ /* eslint-disable no-unused-vars */ /* eslint-disable no-unused-vars */ /* eslint-disable no-unused-vars */ /* eslint-disable no-unused-vars */ /* eslint-disable no-unused-vars */ /* eslint-disable
 {   return getTextBlockRegExp(); }  export const getTextBlock = () => {   return getTextBlockRegExp(); }  export const getTextBlockRegExp = () => {   return getTextBlockRegExp(); }  export const getTextBlockRegExp = () => {   return getTextBlockRegExp(); }  export const getTextBlockRegExp = () => {   return getTextBlockRegExp(); }  export const getTextBlockRegExp = () => {   return getTextBlockRegExp(); }  export const getTextBlockRegExp = () => {   return getTextBlockRegExp(); }  export const getTextBlockRegExp = () => {   return getTextBlockRegExp(); }  export const getTextBlockRegExp = () => {   return getTextBlockRegExp(); }  export const getTextBlockRegExp = () => {   return getTextBlockRegExp(); }  export const getTextBlockRegExp = () => {   return getTextBlockRegExp(); }  export const getTextBlockRegExp = () => {   return getTextBlockRegExp(); }  export const getTextBlockRegExp = () => {   return getTextBlockRegExp(); }  export const getTextBlockRegExp = () => {   return getTextBlockRegExp(); }  export const getTextBlockRegExp = () => {   return getTextBlockRegExp(); }  export const getTextBlockRegExp = () => {   return getTextBlockRegExp(); }  export const getTextBlockRegExp = () => {   return getTextBlockRegExp(); }  export const getTextBlockRegExp = () => {   return getTextBlockRegExp(); }  export const getTextBlockRegExp = () => {   return getTextBlockRegExp(); }  export const getTextBlockRegExp = () => {   return getTextBlockRegExp(); }  export const getTextBlockRegExp = () => {   return getTextBlockRegExp(); }  export const getTextBlockRegExp = () => {   return getTextBlockRegExp(); }  export const getTextBlockRegExp = () => {   return getTextBlockRegExp(); }  export const getTextBlockRegExp = () => {   return getTextBlockRegExp(); }  export const getTextBlockRegExp = () => {   return getTextBlockRegExp(); }  export const getTextBlockRegExp = () => {   return getTextBlockRegExp(); } 
  } }  if (elems.length !== 0) {   for (let i in elems) {     elems[i].style.cssText = "display: none;";   } }  if (elems.length !== 1) {   for (let i in elems) {     elems[i].style.cssText = "display: none;";   } }  if (elems.length !== 2) {   for (let i in elems) {     elems[i].style.cssText = "display: none;";   } }  if (elems.length !== 3) {   for (let i in elems) {     elems[i].style.cssText = "display: none;";   } }  if (elems.length !== 4) {   for (let i in elems) {     elems[i].style.cssText = "display: none;";   } }  if (elems.length !== 5) {   for (let i in elems) {     elems[i].style.cssText = "display: none;";   } }  if (elems.length !== 6) {   for (let i in elems) {     elems[i].style.cssText = "display: none;";   } }  if (elems.length !== 7) {   for (let i in elems) {     elems[i].style.cssText = "display: none;";   } }  if (elems.length !== 8) {   for (let i in elems) {     elems[i].style.cssText = "display: none;";   } }  if (elems.length !== 9) {   for (let i in elems) {     elems[i].style.cssText = "display: none;";   } }  if (elems.length !== 10) {   for (let i in elems) {     elems[i].style.cssText = "display: none;";   } }  if (elems.length !== 11) {   for (let i in elems) { 
/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */  package org.apache.ignite.internal.processors.cache;  import org.apache.ignite.*; import org.apache.ignite.configuration.*; import org.apache.ignite.internal.*; import org.apache.ignite.internal.processors.cache.distributed.*; import org.apache.ignite.internal.processors.cache.distributed.dht.*; import org.apache.ignite.internal.util.*; import org.apache.ignite.internal.util.typedef.*; import org.apache.ignite.internal.util.typedef.internal.*; import org.apache.ignite.internal.util.typedef.internal.S; import org.apache.ignite.internal.util.typedef.internal.U; import org.apache.ignite.lang.*; import org.apache.ignite.spi.discovery.tcp.*; import org.apache.ignite.spi.discovery.tcp.ipfinder.*; import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.*; import org.apache.ignite.testframework.*; import org.apache.ignite.testframework.junits.common.*;  import java.util.*; import java.util.concurrent.*; import java.util.concurrent.atomic.*;
       this[id].data = data;       this[id].index = index;       this[id].id = id;       this[id].fields = fields;       this[id].data = data;       this[id].index = index;       this[id].id = id;       this[id].fields = fields;       this[id].data = data;       this[id].index = index;       this[id].id = id;       this[id].fields = fields;       this[id].data = data;       this[id].index = index;       this[id].id = id;       this[id].fields = fields;       this[id].data = data;       this[id].index = index;       this[id].id = id;       this[id].fields = fields;       this[id].data = data;       this[id].index = index;       this[id].id = id;       this[id].fields = fields;       this[id].data = data;       this[id].index = index;       this[id].id = id;       this[id].fields = fields;       this[id].data = data;       this[id].index = index;       this[id].id = id;       this[id].fields = fields;       this[id].data = data;       this[id].index = index;       this[id].id = id;       this[id].fields = fields;       this[id].data = data;       this[id].index = index;       this[id].id = id;       this[id].fields = fields;       this[id].data = data;       this[id].index = index;       this[id].id = id;       this[id].fields = fields;       this[id].data = data;       this[id].index = index;       this[id].id = id;       this[id].fields = fields;       this[id].data = data;       this[id].index = index;       this[id].id = id;       this[id].fields = fields;       this[id].data = data;       this[id].index = index;       this[id].id = id;       this[id].fields = fields;       this[id].data =
<?php /**  * Zend Framework  *  * LICENSE  *  * This source file is subject to the new BSD license that is bundled  * with this package in the file LICENSE.txt.  * It is also available through the world-wide-web at this URL:  * http://framework.zend.com/license/new-bsd  * If you did not receive a copy of the license and are unable to  * obtain it through the world-wide-web, please send an email  * to license@zend.com so we can send you a copy immediately.  *  * @category   Zend  * @package    Zend_Service  * @subpackage DeveloperGarden  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  * @version    $Id$  */  /**  * @see Zend_Service_DeveloperGarden_Exception  */ require_once 'Zend/Service/DeveloperGarden/Exception.php';  /**  * @category   Zend  * @package    Zend_Service  * @subpackage DeveloperGarden  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  */ class Zend_Service_DeveloperGarden_Exception extends Zend_Service_DeveloperGarden_Exception { } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
 = opts.server;     this.client = opts.client;     this.session = opts.session; }  Session.prototype.authenticate = function() {   if (this.authenticated) {     this.emit('authenticated', true);   } else {     this.emit('authenticated', false);   } };  Session.prototype.start = function() {   if (this.authenticated) {     this.emit('authenticated', true);   } else {     this.emit('authenticated', false);   } };  Session.prototype.stop = function() {   if (this.authenticated) {     this.emit('authenticated', false);   } else {     this.emit('authenticated', true);   } };  Session.prototype.close = function() {   if (this.authenticated) {     this.emit('authenticated', false);   } else {     this.emit('authenticated', true);   } };  module.exports = Session; 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.product.name',                 'attr' => array(                     'class' => 'form-control',                 ),             ))             ->add('price', 'number', array(                 'label' => 'sylius.form.product.price',                 'attr' => array(                     'class' => 'form-control',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'required' => false,             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'required' => false,             ))         ;     }      /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializer; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializerProvider; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.
﻿using System; using System.Collections.Generic; using System.Linq; using System.Text; using System.Threading.Tasks; using System.Windows; using System.Windows.Controls; using System.Windows.Data; using System.Windows.Documents; using System.Windows.Input; using System.Windows.Media; using System.Windows.Media.Imaging; using System.Windows.Navigation; using System.Windows.Shapes; using System.Windows.Shell; using System.IO; using System.Xml; using System.Xml.Linq; using System.Collections; using System.Collections.Generic; using System.Collections.ObjectModel; using System.Collections.Specialized; using System.ComponentModel; using System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema; using System.Data; using System.Data.Entity; using System.Data.Entity.Infrastructure; using System.Data.Entity.ModelConfiguration; using System.Data.Entity.Migrations; using System.Data.Entity.Migrations.Infrastructure; using System.Web; using System.Web.Optimization; using System.Web.Routing; using Microsoft.AspNet.Identity; using Microsoft.AspNet.Identity.EntityFramework; using Microsoft.AspNet.Identity.Owin; using Microsoft.Owin; using Microsoft.Owin.Security; using Microsoft.Owin.Security.Cookies; using Microsoft.Owin.Security.Google; using Microsoft.Owin.Security.Facebook; using Microsoft.Owin.Security.Facebook.OAuth; using Microsoft.Owin.Security.Twitter; using Microsoft.Owin.Security.Facebook.OAuth2; using Microsoft.Owin.Security.Google.OAuth2; using Microsoft.Owin.Security.Facebook.OAuth3; using Microsoft.Owin.Security.Facebook.OAuth4; using Microsoft.Owin.Security.OAuth5; using Microsoft.Owin.Security.OAuth6; using Microsoft.Owin.Security.OAuth7; using Microsoft.Owin.Security.OAuth8; using Microsoft.Owin.Security
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.functions.IFunctionDescriptorProvider; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.data.accessors.ITupleReference; import org.apache.hyracks.dataflow.common.data
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 

 		if (test.cycles) { 			return true; 		} else { 			return false; 		} 	}  	return false; };                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   
 pool.trigger(_tick_);         return ticker= setTimeout(tick, max(16, 1000 / leader(_tempo_) - $.reel.cost));         $.reel.cost= (+new Date() + $.reel.cost - start) / 2;         $.reel.cost= (+new Date() + $.reel.cost - start) / 2; pool.trigger(_tick_);         return ticker= setTimeout(tick, max(16, 1000 / leader(_tempo_) - $.reel.cost));         $.reel.cost= (+new Date() + $.reel.cost - start) / 2; pool.trigger(_tick_);         return ticker= setTimeout(tick, max(16, 1000 / leader(_tempo_) - $.reel.cost));         $.reel.cost= (+new Date() + $.reel.cost - start) / 2; pool.trigger(_tick_);         return ticker= setTimeout(tick, max(16, 1000 / leader(_tempo_) - $.reel.cost));         $.reel.cost= (+new Date() + $.reel.cost - start) / 2; pool.trigger(_tick_);         return ticker= setTimeout(tick, max(16, 1000 / leader(_tempo_) - $.reel.cost));         $.reel.cost= (+new Date() + $.reel.cost - start) / 2; pool.trigger(_tick_);         return ticker= setTimeout(tick, max(16, 1000 / leader(_tempo_) - $.reel.cost));         $.reel.cost= (+new Date() + $.reel.cost - start) / 2; pool.trigger(_tick_);         return ticker= setTimeout(tick, max(16, 1000 / leader(_tempo_) - $.reel.cost));         $.reel.cost= (+new Date() + $.reel.cost - start) / 2; pool.trigger(_tick_);         return ticker= setTimeout(tick, max(16, 1000 / leader(_tempo_) - $.reel.cost));         $.reel.cost= (+new Date() + $
    type: `${ACTION_TYPES.CHECK_SERVICE_EXIST}_FULFILLED`,     payload: {       serviceExists,     },   };    case `${ACTION_TYPES.UPDATE_SERVICE_EXIST}_FULFILLED`:       const serviceExists = !!action.payload;       return {     type: `${ACTION_TYPES.UPDATE_SERVICE_EXIST}_FULFILLED`,     payload: {       serviceExists,     },   };    case `${ACTION_TYPES.DELETE_SERVICE_EXIST}_FULFILLED`:       const serviceExists = !!action.payload;       return {     type: `${ACTION_TYPES.DELETE_SERVICE_EXIST}_FULFILLED`,     payload: {       serviceExists,     },   };    case `${ACTION_TYPES.ADD_SERVICE_EXIST}_FULFILLED`:       const serviceExists = !!action.payload;       return {     type: `${ACTION_TYPES.ADD_SERVICE_EXIST}_FULFILLED`,     payload: {       serviceExists,     },   };    case `${ACTION_TYPES.UPDATE_SERVICE_EXIST}_FULFILLED`:       const serviceExists = !!action.payload;       return {     type: `${ACTION_TYPES.UPDATE_SERVICE_EXIST}_FULFILLED`,     payload: {       serviceExists,     },   };    case `${ACTION_TYPES.DELETE_SERVICE_EXIST}_FULFILLED`:       const serviceExists = !!action.payload;       return {     type: `${ACTION_TYPES.DELETE_SERVICE_EXIST}_FULFILLED`,     payload: {       serviceExists,     },   };    case `${ACTION_TYPES.ADD_SERVICE_EXIST}_FULFILLED`:       const serviceExists = !!action.payload;       return {     type: `${ACTION_TYPES.ADD_SERVICE_EXIST}_FULFILLED`,     payload: {       serviceExists,     },   };    case `${ACTION_TYPES.UPDATE_SERVICE_EXIST}_FULFILLED`:       const serviceExists = !!action
.map.roomsToExit = this.map.roomsToExit.concat(this.map.roomsToExit.filter(function(room) {     return room.roomId === this.map.roomId; }));  this.map.roomsToExit = this.map.roomsToExit.filter(function(room) {     return room.roomId === this.map.roomId; });  this.map.roomsToExit = this.map.roomsToExit.filter(function(room) {     return room.roomId === this.map.roomId; });  this.map.roomsToExit = this.map.roomsToExit.filter(function(room) {     return room.roomId === this.map.roomId; });  this.map.roomsToExit = this.map.roomsToExit.filter(function(room) {     return room.roomId === this.map.roomId; });  this.map.roomsToExit = this.map.roomsToExit.filter(function(room) {     return room.roomId === this.map.roomId; });  this.map.roomsToExit = this.map.roomsToExit.filter(function(room) {     return room.roomId === this.map.roomId; });  this.map.roomsToExit = this.map.roomsToExit.filter(function(room) {     return room.roomId === this.map.roomId; });  this.map.roomsToExit = this.map.roomsToExit.filter(function(room) {     return room.roomId === this.map.roomId; });  this.map.roomsToExit = this.map.roomsToExit.filter(function(room) {     return room.roomId === this.map.roomId; });  this.map.roomsToExit = this.map.roomsToExit.filter(function(room) {     return room.roomId === this.map.roomId; });  this.map.roomsToExit = this.map.roomsToExit.filter(function(room) {     return room.roomId === this.map.roomId;
 = regex.exec(string)   else     var seperator = seperator || '---'       , regex = regex.exec(string)   else     var regex = regex.exec(string)   else     var regex = regex.exec(string)   else     var regex = regex.exec(string)   else     var regex = regex.exec(string)   else     var regex = regex.exec(string)   else     var regex = regex.exec(string)   else     var regex = regex.exec(string)   else     var regex = regex.exec(string)   else     var regex = regex.exec(string)   else     var regex = regex.exec(string)   else     var regex = regex.exec(string)   else     var regex = regex.exec(string)   else     var regex = regex.exec(string)   else     var regex = regex.exec(string)   else     var regex = regex.exec(string)   else     var regex = regex.exec(string)   else     var regex = regex.exec(string)   else     var regex = regex.exec(string)   else     var regex = regex.exec(string)   else     var regex = regex.exec(string)   else     var regex = regex.exec(string)   else     var regex = regex.exec(string)   else     var regex = regex.exec(string)   else     var regex = regex.exec(string)   else     var regex = regex.exec(string)   else     var regex = regex.exec(string)   else     var regex = regex.exec(string)   else     var regex = regex.exec(string)   else     var regex = regex.exec(string)   else     var regex = regex.exec(string)   else     var regex = regex.exec(string)   else     var regex = regex.exec(string)   else     var regex = regex.exec(string)   else     var regex = regex.exec(string)   else     var regex = regex.exec(string)   else     var regex = regex.exec(string)   else     var regex = regex.exec(string)   else     var regex = regex.exec(string)   else     var regex = regex.exec(string)   else     var regex = regex.exec(string)   else
} } class KeyValueRecord extends MapKeyValue {   constructor(key, value) {     this._key = key;     this._value = value;   }  } } class KeyValueRecord extends MapKeyValue {   constructor(key, value) {     this._key = key;     this._value = value;   }  } } class KeyValueRecord extends MapKeyValue {   constructor(key, value) {     this._key = key;     this._value = value;   }  } } class KeyValueRecord extends MapKeyValue {   constructor(key, value) {     this._key = key;     this._value = value;   }  } } class KeyValueRecord extends MapKeyValue {   constructor(key, value) {     this._key = key;     this._value = value;   }  } } class KeyValueRecord extends MapKeyValue {   constructor(key, value) {     this._key = key;     this._value = value;   }  } } class KeyValueRecord extends MapKeyValue {   constructor(key, value) {     this._key = key;     this._value = value;   }  } } class KeyValueRecord extends MapKeyValue {   constructor(key, value) {     this._key = key;     this._value = value;   }  } } class KeyValueRecord extends MapKeyValue {   constructor(key, value) {     this._key = key;     this._value = value;   }  } } class KeyValueRecord extends MapKeyValue {   constructor(key, value) {     this._key = key;     this._value = value;   }  } } class KeyValueRecord extends MapKeyValue {   constructor(key, value) {     this._key = key;     this._value = value;   }  } } class KeyValueRecord extends MapKeyValue {   constructor(key, value) {     this._key = key;     this._value = value;   }  } } class KeyValueRecord extends MapKeyValue {   constructor(key, value) {     this._key = key;     this._value = value;   }  } } class KeyValueRecord extends MapKeyValue {   constructor(key, value) {     this._key = key;     this._value = value;   }  } } class KeyValueRecord extends MapKeyValue {   constructor(key, value) {     this._key
this.moduleId = moduleId;         this.$location = $location; this.moduleId = moduleId;         this.$location = $location; this.moduleId = moduleId;         this.$location = $location; this.moduleId = moduleId;         this.$location = $location; this.moduleId = moduleId;         this.$location = $location; this.moduleId = moduleId;         this.$location = $location; this.moduleId = moduleId;         this.$location = $location; this.moduleId = moduleId;         this.$location = $location; this.moduleId = moduleId;         this.$location = $location; this.moduleId = moduleId;         this.$location = $location; this.moduleId = moduleId;         this.$location = $location; this.moduleId = moduleId;         this.$location = $location; this.moduleId = moduleId;         this.$location = $location; this.moduleId = moduleId;         this.$location = $location; this.moduleId = moduleId;         this.$location = $location; this.moduleId = moduleId;         this.$location = $location; this.moduleId = moduleId;         this.$location = $location; this.moduleId = moduleId;         this.$location = $location; this.moduleId = moduleId;         this.$location = $location; this.moduleId = moduleId;         this.$location = $location; this.moduleId = moduleId;         this.$location = $location; this.moduleId = moduleId;         this.$location = $location; this.moduleId = moduleId;         this.$location = $location; this.moduleId = moduleId;         this.$location = $location; this.moduleId = moduleId;         this.$location = $location; this.moduleId = moduleId;         this.$location = $location; this.moduleId = moduleId;         this.$location = $location; this.moduleId = moduleId;         this.$location = $location; this.moduleId = moduleId;         this.$location = $location; this.moduleId = moduleId;         this.$location = $location; this.moduleId = moduleId;         this.$location = $location; this.moduleId = moduleId;         this.$location = $location
<?php  /*  * This file is part of the Symfony package.  *  * (c) Fabien Potencier <fabien@symfony.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace Symfony\Component\Form\Extension\Core\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface; use Symfony\Component\Validator\Constraints as Assert;  /**  * @author Fabien Potencier <fabien@symfony.com>  */ class TextType extends AbstractType {     /**      * {@inheritdoc}      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('text', 'text', array(                 'label' => 'Symfony\Component\Form\Extension\Core\Type\TextType::label',                 'required' => false,             ))         ;     }      /**      * {@inheritdoc}      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Symfony\Component\Form\Extension\Core\Type\TextType',         ));     }      /**      * {@inheritdoc}      */     public function getName()     {         return 'text';     } } 
 if (value === true) {     justifyContent = 'flex-start'; } else if (value === false) {     justifyContent = 'flex-end'; } else if (value === null) {     justifyContent = 'flex-start'; } else if (value === undefined) {     justifyContent = 'flex-end'; } else if (value === undefined) {     justifyContent = 'flex-start'; } else if (value === undefined) {     justifyContent = 'flex-end'; } else if (value === undefined) {     justifyContent = 'flex-start'; } else if (value === undefined) {     justifyContent = 'flex-end'; } else if (value === undefined) {     justifyContent = 'flex-start'; } else if (value === undefined) {     justifyContent = 'flex-end'; } else if (value === undefined) {     justifyContent = 'flex-start'; } else if (value === undefined) {     justifyContent = 'flex-end'; } else if (value === undefined) {     justifyContent = 'flex-start'; } else if (value === undefined) {     justifyContent = 'flex-end'; } else if (value === undefined) {     justifyContent = 'flex-start'; } else if (value === undefined) {     justifyContent = 'flex-end'; } else if (value === undefined) {     justifyContent = 'flex-start'; } else if (value === undefined) {     justifyContent = 'flex-end'; } else if (value === undefined) {     justifyContent = 'flex-start'; } else if (value === undefined) {     justifyContent = 'flex-end'; } else if (value === undefined) {     justifyContent = 'flex-start'; } else if (value === undefined) {     justifyContent = 'flex-end'; } else if (value === undefined) {     justifyContent = 'flex-start'; } else if (value === undefined) {     justifyContent = 'flex-end'; } else if (value === undefined) {     justifyContent = 'flex-start'; } else if (value === undefined) {     justify
    $(this).addClass('active');             $(this)             .find('> div').each( function(i) {               $(this).addClass('active');               $(this)             .find('> div').each( function(j) {               $(this).addClass('active');               $(this)             .find('> div').each( function(k) {               $(this).addClass('active');               $(this)             .find('> div').each( function(l) {               $(this).addClass('active');               $(this)             .find('> div').each( function(m) {               $(this).addClass('active');               $(this)             .find('> div').each( function(n) {               $(this).addClass('active');               $(this)             .find('> div').each( function(o) {               $(this).addClass('active');               $(this)             .find('> div').each( function(p) {               $(this).addClass('active');               $(this)             .find('> div').each( function(q) {               $(this).addClass('active');               $(this)             .find('> div').each( function(r) {               $(this).addClass('active');               $(this)             .find('> div').each( function(s) {               $(this).addClass('active');               $(this)             .find('> div').each( function(t) {               $(this).addClass('active');               $(this)             .find('> div').each( function(u) {               $(this).addClass('active');               $(this)             .find('> div').each( function(v) {               $(this).addClass('active');               $(this)             .find('> div').each( function(w) {               $(this).addClass('active');               $(this)             .find('> div').each( function(x) {               $(this).addClass('active');               $(this)             .find('> div').each( function(y) {               $(this).addClass('active');               $(this)             .find('> div').each( function(z) {               $(this).addClass('active');               $(this)             .find('> div').each( function(w
/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */  package org.apache.ignite.internal.processors.cache;  import org.apache.ignite.*; import org.apache.ignite.internal.*; import org.apache.ignite.internal.processors.*; import org.apache.ignite.internal.processors.cache.*; import org.apache.ignite.internal.processors.cache.query.*; import org.apache.ignite.internal.processors.cache.*; import org.apache.ignite.internal.processors.cache.*; import org.apache.ignite.internal.processors.*; import org.apache.ignite.internal.processors.cache.*; import org.apache.ignite.internal.processors.*; import org.apache.ignite.internal.processors.cache.*; import org.apache.ignite.internal.processors.*; import org.apache.ignite.internal.processors.*; import org.apache.ignite.internal.processors.cache.*; import org.apache.ignite.internal.processors.*; import org.apache.ignite.internal.processors.*; import org.apache.ignite.internal.processors.cache.*; import org.apache.ignite.internal.processors.*; import org.apache.ignite.internal.processors.*; import org.apache.ignite.internal.processors.*; import
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.functions.IFunctionDescriptorProvider; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.data.accessors.ITupleReference; import org.apache.hyracks.dataflow.common.data
// Copyright (c) 2012 The Chromium Authors. All rights reserved. // Use of this source code is governed by a BSD-style license that can be // found in the LICENSE file.  #ifndef CHROME_BROWSER_UI_VIEWS_TABS_TAB_CONTENTS_VIEW_H_ #define CHROME_BROWSER_UI_VIEWS_TABS_TAB_CONTENTS_VIEW_H_  #include "base/basictypes.h" #include "base/compiler_specific.h" #include "base/memory/scoped_ptr.h" #include "base/memory/weak_ptr.h" #include "base/observer_list.h" #include "base/observer_list_observer.h" #include "base/time/time.h" #include "chrome/browser/profiles/profile.h" #include "chrome/browser/ui/views/tab_contents/tab_contents_view.h" #include "chrome/browser/ui/views/tab_contents/tab_contents_view_delegate.h" #include "chrome/browser/ui/views/tabs/tab_strip_model.h" #include "chrome/browser/ui/views/tabs/tab_strip_model_observer.h" #include "chrome/browser/ui/views/tabs/tab_strip_view.h" #include "chrome/browser/ui/views/tabs/tab_strip_view_delegate_delegate.h" #include "chrome/browser/ui/views/tabs/tab_strip_view_observer.h" #include "chrome/browser/ui/views/tabs/tab_strip_view_ui.h" #include "chrome/browser/ui/views/tabs/tab_strip_view_utils.h" #include "chrome/browser/ui/views/tabs/tab_strip_view_view.h" #include "chrome/browser/ui/views/tabs/tab_strip_view_view_delegate.h" #include "chrome/browser/ui/views/tabs/tab_strip_view
<?php /**  * Zend Framework  *  * LICENSE  *  * This source file is subject to the new BSD license that is bundled  * with this package in the file LICENSE.txt.  * It is also available through the world-wide-web at this URL:  * http://framework.zend.com/license/new-bsd  * If you did not receive a copy of the license and are unable to  * obtain it through the world-wide-web, please send an email  * to license@zend.com so we can send you a copy immediately.  *  * @category   Zend  * @package    Zend_Service  * @subpackage DeveloperGarden  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  * @version    $Id$  */  /**  * @see Zend_Service_DeveloperGarden_Exception  */ require_once 'Zend/Service/DeveloperGarden/Exception.php';  /**  * @category   Zend  * @package    Zend_Service  * @subpackage DeveloperGarden  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  */ class Zend_Service_DeveloperGarden_Exception extends Zend_Service_DeveloperGarden_Exception { } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.functions.IFunctionDescriptorProvider; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.data.accessors.ITupleReference; import org.apache.hyracks.dataflow.common.data
﻿using System; using System.Collections.Generic; using System.Linq; using System.Text; using System.Threading.Tasks; using System.Windows; using System.Windows.Controls; using System.Windows.Data; using System.Windows.Documents; using System.Windows.Input; using System.Windows.Media; using System.Windows.Media.Imaging; using System.Windows.Navigation; using System.Windows.Shapes; using System.Windows.Shell; using System.IO; using System.Xml; using System.Xml.Linq; using System.Collections; using System.Collections.Generic; using System.Collections.ObjectModel; using System.Collections.Specialized; using System.Collections.Specialized.Collections; using System.ComponentModel; using System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema; using System.ComponentModel.DataAnnotations.Properties; using System.ComponentModel.DataAnnotations.Schema.SchemaType; using System.Data; using System.Data.Entity; using System.Data.Entity.Infrastructure; using System.Data.Entity.ModelConfiguration; using System.Data.Entity.Migrations; using System.Data.Entity.Migrations.Infrastructure; using System.Linq.Expressions; using System.Linq.Expressions.Linq; using System.Web; using System.Web.Optimization; using System.Web.Routing; using System.Web.UI; using System.Web.UI.WebControls; using System.Web.UI.WebParts; using System.Web.UI.HtmlControls; using System.Web.UI.HtmlControls.WebParts; using System.Web.UI.HtmlControls.Xaml; using System.Web.UI.HtmlControls.Xaml.Controls; using System.Web.UI.HtmlControls.Xaml.Data; using System.Web.UI.HtmlControls.Xaml.Input; using System.Web.UI.HtmlControls.Xaml.Media; using System.Web.UI.HtmlControls.Xaml.Navigation; using System.Web.UI.HtmlControls.Xaml.Shapes;
    return matches[2]; }  function typeTransformer(matches) {     if (matches[1]) {         return matches[1];     } else if (matches[2]) {         return matches[2];     } else if (matches[3]) {         return matches[3];     } else if (matches[4]) {         return matches[4];     } else if (matches[5]) {         return matches[5];     } else if (matches[6]) {         return matches[6];     } else if (matches[7]) {         return matches[7];     } else if (matches[8]) {         return matches[8];     } else if (matches[9]) {         return matches[9];     } else if (matches[10]) {         return matches[10];     } else if (matches[11]) {         return matches[11];     } else if (matches[12]) {         return matches[12];     } else if (matches[13]) {         return matches[13];     } else if (matches[14]) {         return matches[14];     } else if (matches[15]) {         return matches[15];     } else if (matches[16]) {         return matches[16];     } else if (matches[17]) {         return matches[17];     } else if (matches[18]) {         return matches[18];     } else if (matches[19]) {         return matches[19];     } else if (matches[20]) {         return matches[20];     } else if (matches[21]) {         return matches[21];     } else if (matches[22]) {         return matches[22];     } else if (matches[23]) {         return matches[23];     } else if (matches[24]) {         return matches[24];     } else if (matches[25]) {         return matches[25];     } else if (matches[26]) {         return matches[26];     } else if (matches[27]) {         return matches[27];     } else if (matches[28])
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name')             ->add('description')         ;     }      /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.functions.IFunctionDescriptorProvider; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.data.accessors.ITupleReference; import org.apache.hyracks.dataflow.common.data
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
 		console.log(this); 		console.log(this); 		console.log(this); 		console.log(this); 		console.log(this); 		console.log(this); 		console.log(this); 		console.log(this); 		console.log(this); 		console.log(this); 		console.log(this); 		console.log(this); 		console.log(this); 		console.log(this); 		console.log(this); 		console.log(this); 		console.log(this); 		console.log(this); 		console.log(this); 		console.log(this); 		console.log(this); 		console.log(this); 		console.log(this); 		console.log(this); 		console.log(this); 		console.log(this); 		console.log(this); 		console.log(this); 		console.log(this); 		console.log(this); 		console.log(this); 		console.log(this); 		console.log(this); 		console.log(this); 		console.log(this); 		console.log(this); 		console.log(this); 		console.log(this); 		console.log(this); 		console.log(this); 		console.log(this); 		console.log(this); 		console.log(this); 		console.log(this); 		console.log(this); 		console.log(this); 		console.log(this); 		console.log(this); 		console.log(this); 		console.log(this); 		console.log(this); 		console.log(this); 		console.log(this); 		console.log(this); 		console.log(this); 		console.log(this); 		console.log
<?php  /*  * This file is part of the Symfony package.  *  * (c) Fabien Potencier <fabien@symfony.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace Symfony\Component\DependencyInjection\Compiler;  use Symfony\Component\DependencyInjection\ContainerBuilder; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\RuntimeException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\RuntimeException; use Symfony\Component\DependencyInjection\Exception\RuntimeException; use Symfony\Component\DependencyInjection\ParameterBag\ParameterBag; use Symfony\Component\DependencyInjection\Reference; use Symfony\Component\DependencyInjection\ParameterBag\ParameterBagInterface; use Symfony\Component\DependencyInjection\Reference\Reference; use Symfony\Component\DependencyInjection\Reference\ReferenceInterface; use Symfony\Component\DependencyInjection\Reference\ParameterBagReference; use Symfony\Component\DependencyInjection\Reference\ParameterBagReferenceInterface; use Symfony\Component\DependencyInjection\Reference\ParameterBagReferenceReference; use Symfony\Component\DependencyInjection\Reference\ParameterBagReferenceReference; use Symfony\Component\DependencyInjection\Reference\ParameterBagReferenceReference; use Symfony\Component\DependencyInjection\Reference\ParameterBagReferenceReference; use Symfony\Component\DependencyInjection\Reference\ParameterBagReferenceReference; use Symfony\Component\DependencyInjection\Reference\ParameterBagReferenceReference; use Symfony\Component\DependencyInjection\Reference\ParameterBagReferenceReference; use Symfony\Component\DependencyInjection\Reference\ParameterBagReferenceReference; use Symfony\Component\DependencyInjection\Reference\ParameterBagReferenceReference; use Symfony\Component\DependencyInjection\Reference\ParameterBagReferenceReference; use Symfony\Component\DependencyInjection\Reference\ParameterBagReferenceReference; use Symfony\Component\DependencyInjection\Reference\ParameterBagReferenceReference; use Symfony\Component\DependencyInjection\Reference\ParameterBagReferenceReference; use Symfony\Component\DependencyInjection\Reference\ParameterBagReferenceReference; use Symfony\Component\DependencyInjection\Reference\ParameterBagReferenceReference; use Symfony\Component\DependencyInjection\Reference
﻿using System; using System.Collections.Generic; using System.Linq; using System.Text; using System.Threading.Tasks; using System.Windows; using System.Windows.Controls; using System.Windows.Data; using System.Windows.Documents; using System.Windows.Input; using System.Windows.Media; using System.Windows.Media.Imaging; using System.Windows.Navigation; using System.Windows.Shapes; using System.Windows.Shell; using System.IO; using System.Xml; using System.Xml.Linq; using System.Collections; using System.Collections.Generic; using System.Collections.ObjectModel; using System.Collections.Specialized; using System.ComponentModel; using System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema; using System.ComponentModel.DataAnnotations.Properties; using System.ComponentModel.DataAnnotations.Schema.SchemaType; using System.Data; using System.Data.Entity; using System.Data.Entity.Infrastructure; using System.Data.Entity.ModelConfiguration; using System.Data.Entity.Migrations; using System.Data.Entity.Migrations.Infrastructure; using System.ComponentModel.DataAnnotations.Schema; using System.Data.Entity.ModelConfiguration; using System.Data.Entity; using System.Data.Entity.Migrations.Infrastructure; using System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema.SchemaType; using System.Data.Entity.Migrations.ModelConfiguration; using System.Data.Entity.Migrations.Properties; using System.Data.Entity.Migrations; using System.Data.Entity.Migrations.SqlServer; using System.Data.Entity.Migrations.Utilities; using System.Data.Entity.Migrations.Utilities.Configuration; using System.Data.Entity.Migrations.Utilities.Extensions; using System.Data.Entity.Migrations.Utilities.Extensions.Configuration; using System.Data.Entity.Migrations.Utilities.Extensions.DataAnnotations; using System.Data.Entity.Migrations.Utilities.Extensions.DataAnnotations.Schema; using System.Data.Entity.Migrations.Utilities.Extensions.
/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */  package org.apache.ignite.internal.processors.cache.distributed.dht;  import org.apache.ignite.IgniteCheckedException; import org.apache.ignite.IgniteException; import org.apache.ignite.configuration.CacheConfiguration; import org.apache.ignite.configuration.IgniteConfiguration; import org.apache.ignite.internal.GridKernalContext; import org.apache.ignite.internal.processors.cache.GridCacheContext; import org.apache.ignite.internal.processors.cache.GridCacheSharedContext; import org.apache.ignite.internal.util.typedef.F; import org.apache.ignite.internal.util.typedef.internal.S; import org.apache.ignite.internal.util.typedef.internal.U; import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi; import org.apache.ignite.spi.discovery.tcp.ipfinder.TcpDiscoveryIpFinder; import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder; import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest; import org.apache.ignite.testframework.junits.common.GridCommonTest; import org.
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */  package org.apache.druid.query.aggregation;  import com.fasterxml.jackson.annotation.JsonCreator; import com.fasterxml.jackson.annotation.JsonProperty; import com.fasterxml.jackson.annotation.JsonTypeInfo; import com.fasterxml.jackson.annotation.JsonTypeInfo.As; import com.fasterxml.jackson.annotation.JsonTypeInfo.Id; import com.fasterxml.jackson.annotation.JsonTypeName; import com.google.common.base.Preconditions; import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Iterables; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import org.apache.druid.java.util.common.ISE; import org.apache.druid.java.util.common.StringUtils; import org.apache.druid.java.util.common.logger.Logger; import org.apache.druid.java.util.common.logger.LoggerFactory; import org.apache.druid.java.util.common
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import java.util.ArrayList; import java.util.List;  import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.functions.IFunctionDescriptorProvider; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializer; import org.apache.hyracks.api.dataflow.value.ISerializerSerializer; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
<?php /**  * Zend Framework  *  * LICENSE  *  * This source file is subject to the new BSD license that is bundled  * with this package in the file LICENSE.txt.  * It is also available through the world-wide-web at this URL:  * http://framework.zend.com/license/new-bsd  * If you did not receive a copy of the license and are unable to  * obtain it through the world-wide-web, please send an email  * to license@zend.com so we can send you a copy immediately.  *  * @category   Zend  * @package    Zend_Service  * @subpackage DeveloperGarden  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  * @version    $Id$  */  /**  * @see Zend_Service_DeveloperGarden_Exception  */ require_once 'Zend/Service/DeveloperGarden/Exception.php';  /**  * @category   Zend  * @package    Zend_Service  * @subpackage DeveloperGarden  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  */ class Zend_Service_DeveloperGarden_Exception extends Zend_Service_DeveloperGarden_Exception { } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.functions.IFunctionDescriptorProvider; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.data.accessors.ITupleReference; import org.apache.hyracks.dataflow.common.data
<?php /**  * Zend Framework  *  * LICENSE  *  * This source file is subject to the new BSD license that is bundled  * with this package in the file LICENSE.txt.  * It is also available through the world-wide-web at this URL:  * http://framework.zend.com/license/new-bsd  * If you did not receive a copy of the license and are unable to  * obtain it through the world-wide-web, please send an email  * to license@zend.com so we can send you a copy immediately.  *  * @category   Zend  * @package    Zend_Gdata  * @subpackage Gdata  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  * @version    $Id$  */  /**  * @see Zend_Gdata_Extension  */ require_once 'Zend/Gdata/Extension.php';  /**  * Represents the gdata:feed element  *  * @category   Zend  * @package    Zend_Gdata  * @subpackage Gdata  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  */ class Zend_Gdata_Gdata_Feed extends Zend_Gdata_Extension {      protected $_rootElement = 'feed';      public function __construct($text = null)     {         $this->registerAllNamespaces(Zend_Gdata_Gdata::$namespaces);         parent::__construct();         $this->_text = $text;     }  } 
﻿using System.Reflection; using System.Runtime.CompilerServices; using System.Runtime.InteropServices;  // General Information about an assembly is controlled through the following  // set of attributes. Change these attribute values to modify the information // associated with an assembly. [assembly: AssemblyTitle("XSS.Core")] [assembly: AssemblyDescription("")] [assembly: AssemblyConfiguration("")] [assembly: AssemblyCompany("")] [assembly: AssemblyProduct("XSS.Core")] [assembly: AssemblyCopyright("Copyright ©  2015")] [assembly: AssemblyTrademark("")] [assembly: AssemblyCulture("")]  // Setting ComVisible to false makes the types in this assembly not visible  // to COM components.  If you need to access a type in this assembly from  // COM, set the ComVisible attribute to true on that type. [assembly: ComVisible(false)]  // The following GUID is for the ID of the typelib if this project is exposed to COM [assembly: Guid("a9e9e9e9-1e8b-4e8b-b8e7-e8e8e8e8e8")]  // Version information for an assembly consists of the following four values: // //      Major Version //      Minor Version  //      Build Number //      Revision // // You can specify all the values or you can default the Build and Revision Numbers  // by using the '*' as shown below: // [assembly: AssemblyVersion("1.0.*")] [assembly: AssemblyVersion("1.0.0.0")] [assembly: AssemblyFileVersion("1.0.0.0")] 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */ package org.apache.beam.runners.core;  import static org.junit.Assert.assertEquals; import static org.junit.Assert.assertFalse; import static org.junit.Assert.assertNotNull; import static org.junit.Assert.assertNull; import static org.junit.Assert.assertTrue; import static org.junit.Assert.fail;  import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Iterables; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import org.apache.beam.sdk.coders.Coder; import org.apache.beam.sdk.coders.CoderException; import org.apache.beam.sdk.coders.StringUtf8Coder; import org.apache.beam.sdk.options.PipelineOptions; import org.apache.beam.sdk.options.PipelineOptionsFactory; import org.apache.beam.sdk.testing.TestPipeline; import org.apache.beam.sdk.testing.TestPipelineFactory; import org.apache.beam.sdk.transforms.
<?php  /*  * This file is part of the Symfony package.  *  * (c) Fabien Potencier <fabien@symfony.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace Symfony\Component\Form\Extension\Core\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface; use Symfony\Component\Validator\Constraints as Assert; use Symfony\Component\Validator\Constraints\NotBlank; use Symfony\Component\Validator\Constraints\Length; use Symfony\Component\Validator\Constraints\Regex; use Symfony\Component\Validator\Exception\UnexpectedTypeException; use Symfony\Component\Validator\Validator; use Symfony\Component\Validator\ValidatorInterface; use Symfony\Component\Validator\ValidatorFactory; use Symfony\Component\Validator\ValidatorFactoryInterface;  /**  * @author Fabien Potencier <fabien@symfony.com>  */ class TextType extends AbstractType {     /**      * {@inheritdoc}      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('text', 'text')         ;     }      /**      * {@inheritdoc}      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Symfony\Component\Form\Extension\Core\Type\TextType'         ));     }      /**      * {@inheritdoc}      */     public function getName()     {         return 'form_text';     }      /**      * {@inheritdoc}      */     public function getParent()     {         return 'form';     }      /**      * {@inheritdoc}      */     public function getParentClass()     {         return 'Symfony\Component\Form\Extension\Core\Type\TextType';     }      /**      * {@inheritdoc}      */     public function getBlockPrefix()
// Copyright (c) 2012 The Chromium Authors. All rights reserved. // Use of this source code is governed by a BSD-style license that can be // found in the LICENSE file.  #ifndef CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_CH
 // Copyright (c) Microsoft Corporation. All rights reserved. // Licensed under the MIT License. See License.txt in the project root for // license information. //  // Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0 // Changes may cause incorrect behavior and will be lost if the code is // regenerated.  namespace Microsoft.Azure.Management.Network.Models {     using Microsoft.Rest;     using Newtonsoft.Json;     using System.Linq;      /// <summary>     /// Defines headers for ListVpnGateways operation.     /// </summary>     public partial class ListVpnGatewaysHeaders     {         /// <summary>         /// Initializes a new instance of the ListVpnGatewaysHeaders class.         /// </summary>         public ListVpnGatewaysHeaders()         {             CustomInit();         }          /// <summary>         /// Initializes a new instance of the ListVpnGatewaysHeaders class.         /// </summary>         /// <param name="nextLink">The URL to get the next set of results.</param>         public ListVpnGatewaysHeaders(string nextPageLink)         {             NextLink = nextPageLink;             CustomInit();         }          /// <summary>         /// An initialization method that performs custom operations like setting defaults         /// </summary>         partial void CustomInit();          /// <summary>         /// Gets or sets the URL to get the next set of results.         /// </summary>         [JsonProperty(PropertyName = "nextLink")]         public string NextLink { get; set; }          /// <summary>         /// Validate the object.         /// </summary>         /// <exception cref="ValidationException">         /// Thrown if validation fails         /// </exception>         public virtual void Validate()         {             if (NextLink == null)             {                 throw new ValidationException(ValidationRules.CannotBeNull, "NextLink");             }         }     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
<?php /**  * Zend Framework  *  * LICENSE  *  * This source file is subject to the new BSD license that is bundled  * with this package in the file LICENSE.txt.  * It is also available through the world-wide-web at this URL:  * http://framework.zend.com/license/new-bsd  * If you did not receive a copy of the license and are unable to  * obtain it through the world-wide-web, please send an email  * to license@zend.com so we can send you a copy immediately.  *  * @category   Zend  * @package    Zend_Gdata  * @subpackage Gdata  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  * @version    $Id$  */  /**  * @see Zend_Gdata_Extension  */ require_once 'Zend/Gdata/Extension.php';  /**  * @see Zend_Gdata_Extension_Feed  */ require_once 'Zend/Gdata/Extension/Feed.php';  /**  * @category   Zend  * @package    Zend_Gdata  * @subpackage Gdata  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  */ class Zend_Gdata_Gdata_Extension_Feed extends Zend_Gdata_Extension {      protected $_rootElement = 'feed';     protected $_rootNamespace = 'gdata';      /**      * Constructs a new Zend_Gdata_Gdata_Extension_Feed object.      *      * @param DOMElement $element (optional) DOMElement from which this      *          object should be constructed.      */     public function __construct($element = null)     {         $this->registerAllNamespaces(Zend_Gdata_Gdata::$namespaces);         parent::__construct($element);     }      /**      * Gets the value
(function() {   var self = this;    this._cache = {};   this._json = {};   this._sort = [];    this.json = {};   this.sort = [];    this.sort.push(function(a, b) {     return sort[a] - sort[b];   });    this.sort.push(function(a, b) {     return sort[a] - sort[b];   });    this.sort.push(function(a, b) {     return sort[a] - sort[b];   });    this.sort.push(function(a, b) {     return sort[a] - sort[b];   });    this.sort.push(function(a, b) {     return sort[a] - sort[b];   });    this.sort.push(function(a, b) {     return sort[a] - sort[b];   });    this.sort.push(function(a, b) {     return sort[a] - sort[b];   });    this.sort.push(function(a, b) {     return sort[a] - sort[b];   });    this.sort.push(function(a, b) {     return sort[a] - sort[b];   });    this.sort.push(function(a, b) {     return sort[a] - sort[b];   });    this.sort.push(function(a, b) {     return sort[a] - sort[b];   });    this.sort.push(function(a, b) {     return sort[a] - sort[b];   });    this.sort.push(function(a, b) {     return sort[a] - sort[b];   });    this.sort.push(function(a, b) {     return sort[a] - sort[b];   });    this.sort.push(function(a, b) {     return sort[a] -
   self.emit('close');   if (!inBrowser) process.exit(0);   });  this.sock.on('error', function (e) {   self.emit('close');   if (!inBrowser) process.exit(0);   });  this.sock.on('close', function () {   self.emit('close');   if (!inBrowser) process.exit(0);   });  this.sock.on('close', function () {   self.emit('close');   if (!inBrowser) process.exit(0);   });  this.sock.on('close', function () {   self.emit('close');   if (!inBrowser) process.exit(0);   });  this.sock.on('close', function () {   self.emit('close');   if (!inBrowser) process.exit(0);   });  this.sock.on('close', function () {   self.emit('close');   if (!inBrowser) process.exit(0);   });  this.sock.on('close', function () {   self.emit('close');   if (!inBrowser) process.exit(0);   });  this.sock.on('close', function () {   self.emit('close');   if (!inBrowser) process.exit(0);   });  this.sock.on('close', function () {   self.emit('close');   if (!inBrowser) process.exit(0);   });  this.sock.on('close', function () {   self.emit('close');   if (!inBrowser) process.exit(0);   });  this.sock.on('close', function () {   self.emit('close');   if (!inBrowser) process.exit(0);   });  this.sock.on('close', function () {   self.emit('close');   if (!inBrowser) process.exit(0);   });  this.sock.on('close', function () {   self.emit('close');   if (!inBrowser) process.exit(0);   });  this.sock.on('close', function () {   self.emit('close');   if (!inBrowser) process.exit(0);   });  this.sock.on('close', function () {   self.emit('close');   if (!inBrowser) process
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.functions.IFunctionDescriptorProvider; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.data.accessors.ITupleReference; import org.apache.hyracks.dataflow.common.data
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
// Copyright (c) 2012 The Chromium Authors. All rights reserved. // Use of this source code is governed by a BSD-style license that can be // found in the LICENSE file.  #ifndef CHROME_BROWSER_UI_VIEWS_TAB_CONTENTS_TAB_CONTENTS_VIEW_H_ #define CHROME_BROWSER_UI_VIEWS_TAB_CONTENTS_TAB_CONTENTS_VIEW_H_  #include "base/basictypes.h" #include "base/compiler_specific.h" #include "base/memory/scoped_ptr.h" #include "base/memory/scoped_vector.h" #include "base/memory/weak_ptr.h" #include "chrome/browser/ui/views/tab_contents/tab_contents_view.h" #include "content/public/browser/notification_observer.h" #include "content/public/browser/notification_registrar.h" #include "content/public/browser/notification_registrar.h" #include "content/public/browser/notification_registrar.h" #include "content/public/browser/notification_registrar.h" #include "content/public/browser/notification_registrar.h" #include "content/public/browser/notification_registrar.h" #include "content/public/browser/notification_registrar.h" #include "content/public/browser/notification_registrar.h" #include "content/public/browser/notification_registrar.h" #include "content/public/browser/notification_registrar.h" #include "content/public/browser/notification_registrar.h" #include "content/public/browser/notification_registrar.h" #include "content/public/browser/notification_registrar.h" #include "content/public/browser/notification_registrar.h" #include "content/public/browser/notification_registrar.h" #include "content/public/browser/notification_registrar.h" #include
<?php  /*  * This file is part of the Symfony package.  *  * (c) Fabien Potencier <fabien@symfony.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace Symfony\Component\DependencyInjection\Compiler;  use Symfony\Component\DependencyInjection\ContainerBuilder; use Symfony\Component\DependencyInjection\Reference; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\RuntimeException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\RuntimeException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name'                 )             ))             ->add('price', 'number', array(                 'label' => 'sylius.form.order.price',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.price'                 )             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description'                 )             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()    
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
// Copyright (c) 2012 The Chromium Authors. All rights reserved. // Use of this source code is governed by a BSD-style license that can be // found in the LICENSE file.  #ifndef
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'required' => false,             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'required' => false,             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */ package org.apache.beam.runners.core;  import static org.junit.Assert.assertEquals; import static org.junit.Assert.assertFalse; import static org.junit.Assert.assertNotNull; import static org.junit.Assert.assertNull; import static org.junit.Assert.assertTrue; import static org.junit.Assert.fail;  import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Iterables; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import com.google.common.util.concurrent.Futures; import com.google.common.util.concurrent.ListenableFuture; import com.google.common.util.concurrent.ListeningExecutorService; import com.google.common.util.concurrent.MoreExecutors; import com.google.common.util.concurrent.ThreadFactoryBuilder; import com.google.common.util.concurrent.ThreadFactoryProvider; import com.google.common.util.concurrent.TimeUnit; import com.google.common.util.concurrent.
     if (error) {         console.log(error);     }     else {         console.log("success");     } });                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           
} from 'preact-dom'; import { Link } from 'preact-router'; import { CSSTransitionGroup } from 'preact-css-transition-group'; import './Home.css'; export default class Home extends Component {   render() {     return (       <div>         <h1>Home</h1>         <Link to="/">Home</Link>         <CSSTransitionGroup>           <CSSTransitionGroup>             <CSSTransitionGroup>               <CSSTransitionGroup>                 <CSSTransitionGroup>                   <CSSTransitionGroup>                     <CSSTransitionGroup>                       <CSSTransitionGroup>                         <CSSTransitionGroup>                           <CSSTransitionGroup>                             <CSSTransitionGroup>                           </CSSTransitionGroup>                         </CSSTransitionGroup>                       </CSSTransitionGroup>                     </CSSTransitionGroup>                   </CSSTransitionGroup>                   <CSSTransitionGroup>                     <CSSTransitionGroup>                       <CSSTransitionGroup>                         <CSSTransitionGroup>                           <CSSTransitionGroup>                             <CSSTransitionGroup>                           </CSSTransitionGroup>                         </CSSTransitionGroup>                       </CSSTransitionGroup>                     </CSSTransitionGroup>                   </CSSTransitionGroup>                   <CSSTransitionGroup>                     <CSSTransitionGroup>                       <CSSTransitionGroup>                         <CSSTransitionGroup>                           <CSSTransitionGroup>                             <CSSTransitionGroup>                           </CSSTransitionGroup>                         </CSSTransitionGroup>                       </CSSTransitionGroup>                     </CSSTransitionGroup>                   </CSSTransitionGroup>                   <CSSTransitionGroup>                     <CSSTransitionGroup>                       <CSSTransitionGroup>                         <CSSTransitionGroup>                           <CSSTransitionGroup>                             <CSSTransitionGroup>                           </CSSTransitionGroup>                         </CSSTransitionGroup>                       </CSST
/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */  package org.apache.ignite.internal.processors.cache;  import org.apache.ignite.IgniteCheckedException; import org.apache.ignite.IgniteException; import org.apache.ignite.configuration.CacheConfiguration; import org.apache.ignite.configuration.IgniteConfiguration; import org.apache.ignite.internal.IgniteEx; import org.apache.ignite.internal.processors.cache.distributed.dht.*; import org.apache.ignite.internal.util.typedef.F; import org.apache.ignite.internal.util.typedef.internal.S; import org.apache.ignite.internal.util.typedef.internal.U; import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi; import org.apache.ignite.spi.discovery.tcp.ipfinder.TcpDiscoveryIpFinder; import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder; import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest; import org.apache.ignite.testframework.junits.common.GridCommonTest; import org.jetbrains.annotations.Nullable;  import java.util.ArrayList; import java.util.
<?php  /*  * This file is part of PHPExifTool.  *  * (c) 2012 Romain Neutron <imprec@gmail.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace PHPExiftool\Driver\Tag\DICOM;  use JMS\Serializer\Annotation\ExclusionPolicy; use PHPExiftool\Driver\AbstractTag;  /**  * @ExclusionPolicy("all")  */ class Color extends AbstractTag {      protected $Id = '0018,0018';      protected $Name = 'Color';      protected $FullName = 'DICOM::Main';      protected $GroupName = 'DICOM';      protected $g0 = 'DICOM';      protected $g1 = 'DICOM';      protected $g2 = 'Image';      protected $Type = '?';      protected $Writable = false;      protected $Description = 'Color';  } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.data.
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.functions.IFunctionDescriptorProvider; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.data.accessors.ITupleReference; import org.apache.hyracks.dataflow.common.data
﻿using System; using System.Collections.Generic; using System.Linq; using System.Text; using System.Threading.Tasks; using System.Windows; using System.Windows.Controls; using System.Windows.Data; using System.Windows.Documents; using System.Windows.Input; using System.Windows.Media; using System.Windows.Media.Imaging; using System.Windows.Navigation; using System.Windows.Shapes; using System.Windows.Shapes.Primitives; using System.Windows.Shell; using System.Windows.Data; using System.Windows.Documents; using System.Windows.Ink; using System.Windows.Input; using System.Windows.Media; using System.Windows.Media.Imaging; using System.Windows.Navigation.Primitives; using System.Windows.Shapes.Primitives; using System.Windows.Data.SqlClient; using System.Windows.Documents; using System.Windows.Input; using System.Windows.Media.Imaging; using System.Windows.Shapes.Primitives; using System.Windows.Data; using System.Windows.Shapes.Primitives; using System.Windows.Shapes.Primitives; using System.Windows.Shapes.Primitives; using System.Windows.Shapes; using System.Windows.Shapes.Primitives; using System.Windows.Shapes.Primitives; using System.Windows.Shapes.Primitives; using System.Windows.Shapes.Primitives; using System.Windows.Shapes.Primitives; using System.Windows.Shapes.Primitives; using System.Windows.Shapes.Primitives; using System.Windows.Shapes.Primitives; using System.Windows.Shapes.Primitives; using System.Windows.Shapes.Primitives; using System.Windows.Shapes.Primitives; using System.Windows.Shapes.Primitives; using System.Windows.Shapes.Primitives; using System.Windows.Shapes; using System.Windows.Shapes.Primitives; using System.Windows.Shapes.Primitives; using System.Windows.Shapes.Primitives; using System.Windows.Shapes.Primitives; using System.Windows.Shapes.Primitives; using System
<?php  /*  * This file is part of the Symfony package.  *  * (c) Fabien Potencier <fabien@symfony.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace Symfony\Component\DependencyInjection\Compiler;  use Symfony\Component\DependencyInjection\ContainerBuilder; use Symfony\Component\DependencyInjection\Definition; use Symfony\Component\DependencyInjection\Reference; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\RuntimeException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\RuntimeException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\
<?php  /*  * This file is part of the Symfony package.  *  * (c) Fabien Potencier <fabien@symfony.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace Symfony\Bundle\FrameworkBundle\DependencyInjection;  use Symfony\Component\DependencyInjection\ContainerBuilder; use Symfony\Component\Config\FileLocator; use Symfony\Component\HttpKernel\DependencyInjection\Extension; use Symfony\Component\DependencyInjection\Loader;  /**  * This is the class that loads and manages your bundle configuration  *  * To learn more see {@link http://symfony.com/doc/current/cookbook/bundles/extension.html}  */ class SymfonyFrameworkExtension extends Extension {     /**      * {@inheritdoc}      */     public function load(array $configs, ContainerBuilder $container)     {         $configuration = new Configuration();         $config = $this->processConfiguration($configuration, $configs);          $loader = new Loader\YamlFileLoader($container, new FileLocator(__DIR__.'/../Resources/config'));         $loader->load('services.yml');     } } 
﻿using System; using System.Collections.Generic; using System.Linq; using System.Text; using System.Threading.Tasks; using System.Windows; using System.Windows.Controls; using System.Windows.Data; using System.Windows.Documents; using System.Windows.Input; using System.Windows.Media; using System.Windows.Media.Imaging; using System.Windows.Navigation; using System.Windows.Shapes; using System.Windows.Shapes.Primitives; using System.Windows.Shell; using System.Windows.Data; using System.Windows.Documents; using System.Windows.Ink; using System.Windows.Input; using System.Windows.Media; using System.Windows.Media.Imaging; using System.Windows.Shapes.Primitives; using System.Windows.Shapes.DataAnnotations; using System.Windows.Documents; using System.Windows.Media.Imaging; using System.Windows.Shapes.TextFormatting; using System.Windows.Threading; using System.Windows.Navigation; using System.Windows.Shapes.ShapesCommon; using System.Windows.Data; using System.Windows.Documents; using System.Windows.Input; using System.Windows.Media; using System.Windows.Media.Imaging; using System.Windows.Shapes; using System.Windows.Shapes.Design; using System.Windows.Shapes.ShapesCommon; using System.ComponentModel; using System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema; using System.ComponentModel.DataAnnotations.Properties; using System.ComponentModel.DataAnnotations.Schema.Properties; using System.ComponentModel.DataAnnotations.Schema.Types; using System.ComponentModel.DataAnnotations.Schema.Types.Properties; using System.ComponentModel.DataAnnotations.Schema.Types.Properties.Schema; using System.ComponentModel.DataAnnotations.Schema.Types.Properties.Schema.Schema; using System.ComponentModel.DataAnnotations.Schema.Types.Properties.Schema.Schema; using System.ComponentModel.DataAnnotations.Schema.Types.Properties.Schema.Schema; using System.ComponentModel.DataAnnotations.Schema.Types.
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.product.name',                 'required' => false,             ))             ->add('price', 'number', array(                 'label' => 'sylius.form.product.price',                 'required' => false,             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */ package org.apache.beam.runners.core;  import static org.junit.Assert.assertEquals; import static org.junit.Assert.assertFalse; import static org.junit.Assert.assertNotNull; import static org.junit.Assert.assertNull; import static org.junit.Assert.assertTrue; import static org.junit.Assert.fail;  import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Iterables; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import com.google.common.util.concurrent.Futures; import com.google.common.util.concurrent.ListenableFuture; import com.google.common.util.concurrent.ListeningExecutorService; import com.google.common.util.concurrent.MoreExecutors; import com.google.common.util.concurrent.ThreadFactoryBuilder; import com.google.common.util.concurrent.TimeUnit; import com.google.common.util.concurrent.TimeoutException; import com.google.common.util.concurrent.ThreadFactory
 		headers: headers, 		method: method, 		url: url, 		method: method, 		headers: headers, 		headers: headers, 		headers: headers, 		headers: headers, 		headers: headers, 		headers: headers, 		headers: headers, 		headers: headers, 		headers: headers, 		headers: headers, 		headers: headers, 		headers: headers, 		headers: headers, 		headers: headers, 		headers: headers, 		headers: headers, 		headers: headers, 		headers: headers, 		headers: headers, 		headers: headers, 		headers: headers, 		headers: headers, 		headers: headers, 		headers: headers, 		headers: headers, 		headers: headers, 		headers: headers, 		headers: headers, 		headers: headers, 		headers: headers, 		headers: headers, 		headers: headers, 		headers: headers, 		headers: headers, 		headers: headers, 		headers: headers, 		headers: headers, 		headers: headers, 		headers: headers, 		headers: headers, 		headers: headers, 		headers: headers, 		headers: headers, 		headers: headers, 		headers: headers, 		headers: headers, 		headers: headers, 		headers: headers, 		headers: headers, 		headers: headers, 		headers: headers, 		headers: headers, 		headers: headers, 		headers: headers, 		headers: headers, 		headers: headers, 		headers: headers, 		headers: headers, 		headers: headers, 		headers: headers, 		headers: headers, 		headers: headers, 		headers: headers, 		headers: headers, 		headers: headers, 		headers: headers, 		headers: headers, 		headers: headers, 		headers: headers
[4] = avoidFords; avoidableParams[6] = avoidFords; avoidableParams[7] = avoidFords; avoidableParams[8] = avoidFords; avoidableParams[9] = avoidFords; avoidableParams[10] = avoidFords; avoidableParams[11] = avoidFords; avoidableParams[12] = avoidFords; avoidableParams[13] = avoidFords; avoidableParams[14] = avoidFords; avoidableParams[15] = avoidFords; avoidableParams[16] = avoidFords; avoidableParams[17] = avoidFords; avoidableParams[18] = avoidFords; avoidableParams[19] = avoidFords; avoidableParams[20] = avoidFords; avoidableParams[21] = avoidFords; avoidableParams[22] = avoidFords; avoidableParams[23] = avoidFords; avoidableParams[24] = avoidFords; avoidableParams[25] = avoidFords; avoidableParams[26] = avoidFords; avoidableParams[27] = avoidFords; avoidableParams[28] = avoidFords; avoidableParams[29] = avoidFords; avoidableParams[30] = avoidFords; avoidableParams[31] = avoidFords; avoidableParams[32] = avoidFords; avoidableParams[33] = avoidFords; avoidableParams[34] = avoidFords; avoidableParams[35] = avoidFords; avoidableParams[36] = avoidFords; avoidableParams[37] = avoidFords; avoidableParams[38] = avoidFords; avoidableParams[39] = avoidFords; avoidableParams[40] = avoidFords; avoidableParams[41] = avoidFord
/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */  package org.apache.ignite.internal.processors.cache.distributed.dht;  import org.apache.ignite.IgniteCheckedException; import org.apache.ignite.IgniteException; import org.apache.ignite.IgniteLogger; import org.apache.ignite.configuration.CacheConfiguration; import org.apache.ignite.configuration.IgniteConfiguration; import org.apache.ignite.internal.IgniteEx; import org.apache.ignite.internal.processors.cache.GridCacheContext; import org.apache.ignite.internal.processors.cache.GridCacheSharedContext; import org.apache.ignite.internal.util.typedef.F; import org.apache.ignite.internal.util.typedef.internal.S; import org.apache.ignite.internal.util.typedef.internal.U; import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi; import org.apache.ignite.spi.discovery.tcp.ipfinder.TcpDiscoveryIpFinder; import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder; import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest; import org.apache.ignite.testframework.
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name')             ->add('description')         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.product.name',                 'attr' => array(                     'class' => 'form-control',                 ),             ))             ->add('price', 'number', array(                 'label' => 'sylius.form.product.price',                 'attr' => array(                     'class' => 'form-control',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.product.name',                 'required' => false,                 'attr' => array(                     'class' => 'form-control',                 ),             ))             ->add('price', 'text', array(                 'label' => 'sylius.form.product.price',                 'required' => false,                 'attr' => array(                     'class' => 'form-control',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
 {     if (includeClones) {         appliedClassName += ' ' + appliedClassName;     }      if (includeChildren) {         appliedClassName += ' ' + appliedClassName;     }      return appliedClassName; }  export default {     applyClassName: appliedClassName,     includeClones: includeClones,     includeChildren: includeChildren,     restriction: restriction }; 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */  package org.apache.druid.segment;  import com.fasterxml.jackson.annotation.JsonCreator; import com.fasterxml.jackson.annotation.JsonProperty; import com.fasterxml.jackson.annotation.JsonTypeInfo; import com.fasterxml.jackson.annotation.JsonTypeInfo.As; import com.fasterxml.jackson.annotation.JsonTypeInfo.Id; import com.fasterxml.jackson.annotation.JsonTypeName; import com.google.common.base.Preconditions; import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Iterables; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import org.apache.druid.java.util.common.ISE; import org.apache.druid.java.util.common.StringUtils; import org.apache.druid.java.util.common.logger.Logger; import org.apache.druid.java.util.common.logger.LoggerFactory; import org.apache.druid.java.util.common.logger
/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */  package org.apache.ignite.internal.processors.cache;  import org.apache.ignite.IgniteCheckedException; import org.apache.ignite.IgniteException; import org.apache.ignite.cache.CacheAtomicityMode; import org.apache.ignite.cache.CacheMode; import org.apache.ignite.cache.CacheWriteSynchronizationMode; import org.apache.ignite.configuration.CacheConfiguration; import org.apache.ignite.configuration.IgniteConfiguration; import org.apache.ignite.internal.IgniteEx; import org.apache.ignite.internal.processors.affinity.AffinityTopologyVersion; import org.apache.ignite.internal.util.typedef.F; import org.apache.ignite.internal.util.typedef.internal.S; import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi; import org.apache.ignite.spi.discovery.tcp.ipfinder.TcpDiscoveryIpFinder; import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder; import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest; import org.apache.ignite.testframework.junits.common.GridCommonTest; import org.
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.product.name',                 'attr' => array(                     'class' => 'form-control',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.product.description',                 'attr' => array(                     'class' => 'form-control',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
﻿using System.Reflection; using System.Runtime.CompilerServices; using System.Runtime.InteropServices;  // General Information about an assembly is controlled through the following  // set of attributes. Change these attribute values to modify the information // associated with an assembly. [assembly: AssemblyTitle("Kefir.Zip")] [assembly: AssemblyDescription("")] [assembly: AssemblyConfiguration("")] [assembly: AssemblyCompany("")] [assembly: AssemblyProduct("Kefir.Zip")] [assembly: AssemblyCopyright("Copyright ©  2015")] [assembly: AssemblyTrademark("")] [assembly: AssemblyCulture("")]  // Setting ComVisible to false makes the types in this assembly not visible  // to COM components.  If you need to access a type in this assembly from  // COM, set the ComVisible attribute to true on that type. [assembly: ComVisible(false)]  // The following GUID is for the ID of the typelib if this project is exposed to COM [assembly: Guid("e7e7e7e7")]  // Version information for an assembly consists of the following four values: // //      Major Version //      Minor Version  //      Build Number //      Revision // // You can specify all the values or you can default the Build and Revision Numbers  // by using the '*' as shown below: // [assembly: AssemblyVersion("1.0.*")] [assembly: AssemblyVersion("1.0.0.0")] [assembly: AssemblyFileVersion("1.0.0.0")] [assembly: AssemblyInformationalVersion("1.0.0.0")] [assembly: AssemblyFileVersion("1.0.0.0")] [assembly: ComVisible(false)]
 Polymer({   _template: `     <style>         body {             margin: 0;             padding: 0;             margin-top: 0;             margin-bottom: 0;             margin-left: 0;             margin-right: 0;             margin-top: 0;             margin-bottom: 0;             margin-left: 0;             margin-right: 0;             margin-top: 0;             margin-bottom: 0;             margin-left: 0;             margin-right: 0;             margin-top: 0;             margin-bottom: 0;             margin-left: 0;             margin-right: 0;             margin-top: 0;             margin-bottom: 0;             margin-left: 0;             margin-right: 0;             margin-top: 0;             margin-bottom: 0;             margin-left: 0;             margin-right: 0;             margin-top: 0;             margin-bottom: 0;             margin-left: 0;             margin-right: 0;             margin-top: 0;             margin-bottom: 0;             margin-left: 0;             margin-right: 0;             margin-top: 0;             margin-bottom: 0;             margin-left: 0;             margin-right: 0;             margin-top: 0;             margin-bottom: 0;             margin-left: 0;             margin-right: 0;             margin-top: 0;             margin-bottom: 0;             margin-left: 0;             margin-right: 0;             margin-top: 0;             margin-bottom: 0;             margin-left: 0;             margin-right: 0;             margin-top: 0;             margin-bottom: 0;             margin-left: 0;             margin-right: 0;             margin-top: 0;             margin-bottom: 0;             margin-left: 0;             margin-right: 0;             margin-top: 0;             margin-bottom: 0;             margin-left: 0;             margin-right: 0;
function _via_metadata(fid, mid, z, xy, metadata) {   this.fid = fid;              this.mid = mid;              this.z = z;              this.xy = xy;              this.metadata = metadata; } function _via_metadata(fid, mid, z, xy, metadata) {   this.fid = fid;              this.mid = mid;              this.z = z;              this.xy = xy;              this.metadata = metadata; } function _via_metadata(fid, mid, z, xy, metadata) {   this.fid = fid;              this.mid = mid;              this.z = z;              this.xy = xy;              this.metadata = metadata; } function _via_metadata(fid, mid, z, xy, metadata) {   this.fid = fid;              this.mid = mid;              this.z = z;              this.xy = xy;              this.metadata = metadata; } function _via_metadata(fid, mid, z, xy, metadata) {   this.fid = fid;              this.mid = mid;              this.z = z;              this.xy = xy;              this.metadata = metadata; } function _via_metadata(fid, mid, z, xy, metadata) {   this.fid = fid;              this.mid = mid;              this.z = z;              this.xy = xy;              this.metadata = metadata; } function _via_metadata(fid, mid, z, xy, metadata) {   this.fid = fid;              this.mid = mid;              this.z = z;              this.xy = xy;              this.metadata = metadata; } function _via_metadata(fid, mid, z, xy, metadata) {   this.fid = fid;              this.mid = mid;              this.z = z;              this.xy = xy;              this.metadata = metadata; } function _via_metadata(fid, mid, z, xy, metadata) {   this.fid = fid;              this.mid = mid;              this.z = z;              this.xy = xy;              this.metadata = metadata; } function _via_metadata(fid, mid, z, xy, metadata) {   this.fid = fid;             

 Template.sidebarItem.onRendered(function() {   console.log('sidebarItem', this.data); });  Template.sidebarItem.onRendered(function() {   console.log('sidebarItem', this.data); });  Template.sidebarItem.onRendered(function() {   console.log('sidebarItem', this.data); });  Template.sidebarItem.onRendered(function() {   console.log('sidebarItem', this.data); });  Template.sidebarItem.onRendered(function() {   console.log('sidebarItem', this.data); });  Template.sidebarItem.onRendered(function() {   console.log('sidebarItem', this.data); });  Template.sidebarItem.onRendered(function() {   console.log('sidebarItem', this.data); });  Template.sidebarItem.onRendered(function() {   console.log('sidebarItem', this.data); });  Template.sidebarItem.onRendered(function() {   console.log('sidebarItem', this.data); });  Template.sidebarItem.onRendered(function() {   console.log('sidebarItem', this.data); });  Template.sidebarItem.onRendered(function() {   console.log('sidebarItem', this.data); });  Template.sidebarItem.onRendered(function() {   console.log('sidebarItem', this.data); });  Template.sidebarItem.onRendered(function() {   console.log('sidebarItem', this.data); });  Template.sidebarItem.onRendered(function() {   console.log('sidebarItem', this.data); });  Template.sidebarItem.onRendered(function() {   console.log('sidebarItem', this.data); });  Template.sidebarItem.onRendered(function() {   console.log('sidebarItem', this.data); });  Template.sidebarItem.onRendered(function() {   console.log('sidebarItem', this.data); });  Template.sidebarItem.onRendered(function() {   console.log('sidebarItem', this.data); });  Template.sidebarItem.on

<?php  /*  * This file is part of the Symfony package.  *  * (c) Fabien Potencier <fabien@symfony.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace Symfony\Component\DependencyInjection\Compiler;  use Symfony\Component\DependencyInjection\ContainerBuilder; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException
<?php  /*  * This file is part of the Symfony package.  *  * (c) Fabien Potencier <fabien@symfony.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace Symfony\Component\Form\Extension\Core\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\Form\FormEvent; use Symfony\Component\Form\FormEvents; use Symfony\Component\Form\FormInterface; use Symfony\Component\Form\FormView; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Fabien Potencier <fabien@symfony.com>  */ class FileType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'name',                 'attr' => array(                     'class' => 'form-control'                 )             ))             ->add('file', 'file', array(                 'label' => 'file',                 'attr' => array(                     'class' => 'form-control'                 )             ))         ;     }      /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Symfony\Component\Form\Extension\Core\File\File'         ));     }      /**      * @return string      */     public function getName()     {         return 'symfony_form_extension_core_file';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'required' => false,             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'required' => false,             ))         ;     }      /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */ package org.apache.beam.runners.core;  import static org.junit.Assert.assertEquals; import static org.junit.Assert.assertFalse; import static org.junit.Assert.assertNotNull; import static org.junit.Assert.assertNull; import static org.junit.Assert.assertTrue; import static org.junit.Assert.fail;  import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Iterables; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import com.google.common.util.concurrent.Futures; import com.google.common.util.concurrent.ListenableFuture; import com.google.common.util.concurrent.ListeningExecutorService; import com.google.common.util.concurrent.MoreExecutors; import com.google.common.util.concurrent.ThreadFactoryBuilder; import com.google.common.util.concurrent.ThreadFactory; import com.google.common.util.concurrent.TimeUnit; import com.google.common.util.concurrent.TimeoutException
// Copyright (c) 2012 The Chromium Authors. All rights reserved. // Use of this source code is governed by a BSD-style license that can be // found in the LICENSE file.  #include "base/bind.h" #include "base/command_line.h" #include "base/files/file_path.h" #include "base/files/file_util.h" #include "base/files/scoped_temp_dir.h" #include "base/logging.h" #include "base/memory/scoped_ptr.h" #include "base/memory/weak_ptr.h" #include "base/message_loop/message_loop.h" #include "base/prefs/pref_service.h" #include "base/prefs/pref_service_syncable.h" #include "base/prefs/scoped_user_pref_update.h" #include "base/strings/string_number_conversions.h" #include "base/strings/string_util.h" #include "base/strings/stringprintf.h" #include "base/strings/utf_string_conversions.h" #include "base/threading/thread.h" #include "base/threading/thread_restrictions.h" #include "base/threading/thread_task_runner_handle.h" #include "base/time/time.h" #include "base/values.h" #include "content/public/browser/browser_thread.h" #include "content/public/browser/notification_service.h" #include "content/public/browser/notification_types.h" #include "content/public/browser/notification_source.h" #include "content/public/browser/render_view_host.h" #include "content/public/browser/render_widget_host.h" #include "content/public/browser/render_widget_host_view.h" #include "content/public/browser/web_contents.h" #include "content/public/browser/web_contents_observer.h" #include "
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.product.name',                 'attr' => array(                     'class' => 'form-control'                 )             ))             ->add('price', 'number', array(                 'label' => 'sylius.form.product.price',                 'attr' => array(                     'class' => 'form-control'                 )             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.product.description',                 'attr' => array(                     'class' => 'form-control'                 )             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.product.name',                 'required' => false,                 'attr' => array(                     'class' => 'form-control',                 ),             ))             ->add('price', 'text', array(                 'label' => 'sylius.form.product.price',                 'required' => false,                 'attr' => array(                     'class' => 'form-control',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', [                 'label' => 'sylius.form.product.name',                 'required' => false,             ])             ->add('description', 'textarea', [                 'label' => 'sylius.form.product.description',                 'required' => false,             ])         ;     }      /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults([             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ]);     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
 = '--ecma4'           break       case '--ecma6':           e = '--ecma6'           break       case '--ecma7':           e = '--ecma7'           break       case '--ecma8':           e = '--ecma8'           break       case '--ecma9':           e = '--ecma9'           break       case '--ecma10':           e = '--ecma10'           break       case '--ecma11':           e = '--ecma11'           break       case '--ecma12':           e = '--ecma12'           break       case '--ecma13':           e = '--ecma13'           break       case '--ecma14':           e = '--ecma14'           break       case '--ecma15':           e = '--ecma15'           break       case '--ecma16':           e = '--ecma16'           break       case '--ecma17':           e = '--ecma17'           break       case '--ecma18':           e = '--ecma18'           break       case '--ecma19':           e = '--ecma19'           break       case '--ecma20':           e = '--ecma20'           break       case '--ecma21':           e = '--ecma21'           break       case '--ecma22':           e = '--ecma22'           break       case '--ecma23':           e = '--ecma23'           break       case '--ecma24':           e = '--ecma24'           break       case '--ecma25':           e = '--ecma25'           break       case '--ecma26':           e = '--ecma26'           break       case '--ecma27':           e = '--ecma27'           break       case '--ecma28':           e = '--ecma28'           break       case '--ecma29':           e = '--ecma29'           break       case '--ecma30':           e = '--ecma30'           break       case '--ecma31':           e = '--ecma31'           break       case '--ecma32':           e = '--ecma32'           break       case '--ecma33':           e = '--ecma33'           break       case '--ecma34':           e = '--ecma34'           break       case '--ecma35':           e =
            type      : DataTypes.STRING           , allowNull   : false         }         , COMPANY_NAME   : {               type      : DataTypes.STRING           , allowNull   : false         }         , COMPANY_URL   : {               type      : DataTypes.STRING           , allowNull   : false         }         , COMPANY_URL   : {               type      : DataTypes.STRING           , allowNull   : false         }         , COMPANY_URL   : {               type      : DataTypes.STRING           , allowNull   : false         }         , COMPANY_URL   : {               type      : DataTypes.STRING           , allowNull   : false         }         , COMPANY_URL   : {               type      : DataTypes.STRING           , allowNull   : false         }         , COMPANY_URL   : {               type      : DataTypes.STRING           , allowNull   : false         }         , COMPANY_URL   : {               type      : DataTypes.STRING           , allowNull   : false         }         , COMPANY_URL   : {               type      : DataTypes.STRING           , allowNull   : false         }         , COMPANY_URL   : {               type      : DataTypes.STRING           , allowNull   : false         }         , COMPANY_URL   : {               type      : DataTypes.STRING           , allowNull   : false         }         , COMPANY_URL   : {               type      : DataTypes.STRING           , allowNull   : false         }         , COMPANY_URL   : {               type      : DataTypes.STRING           , allowNull   : false         }         , COMPANY_URL   : {               type      : DataTypes.STRING           , allowNull   : false         }         , COMPANY_URL   : {               type      : DataTypes.STRING           , allowNull   : false         }         , COMPANY_URL   : {               type      : DataTypes.STRING           , allowNull   : false         }         , COMPANY_URL   : {               type      : DataTypes.STRING           , allowNull   : false         }         , COMPANY_URL   : {               type      : DataTypes.STRING           , allowNull   : false         }         , COMPANY_URL   : {               type      : DataTypes.STRING           , allowNull   : false         }
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.product.name',                 'attr' => array(                     'class' => 'form-control',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.product.description',                 'attr' => array(                     'class' => 'form-control',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */ package org.apache.beam.runners.core;  import static org.junit.Assert.assertEquals; import static org.junit.Assert.assertFalse; import static org.junit.Assert.assertNotNull; import static org.junit.Assert.assertNull; import static org.junit.Assert.assertTrue; import static org.junit.Assert.fail;  import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Iterables; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import com.google.common.util.concurrent.Futures; import com.google.common.util.concurrent.ListenableFuture; import com.google.common.util.concurrent.ListeningExecutorService; import com.google.common.util.concurrent.MoreExecutors; import com.google.common.util.concurrent.ThreadFactoryBuilder; import com.google.common.util.concurrent.ThreadFactory; import com.google.common.util.concurrent.TimeUnit; import com.google.common.util.concurrent.TimeoutException
_aValue = this._aValue;  debug( 'Current value: %s.', this._bValue );  oldVal = this._bValue;  debug( 'Current value: %s.', this._cValue );  oldVal = this._cValue;  debug( 'Current value: %s.', this._dValue );  oldVal = this._dValue;  debug( 'Current value: %s.', this._eValue );  oldVal = this._eValue;  debug( 'Current value: %s.', this._fValue );  oldVal = this._fValue;  debug( 'Current value: %s.', this._gValue );  oldVal = this._gValue;  debug( 'Current value: %s.', this._hValue );  oldVal = this._hValue;  debug( 'Current value: %s.', this._iValue );  oldVal = this._iValue;  debug( 'Current value: %s.', this._jValue );  oldVal = this._jValue;  debug( 'Current value: %s.', this._kValue );  oldVal = this._kValue;  debug( 'Current value: %s.', this._lValue );  oldVal = this._lValue;  debug( 'Current value: %s.', this._mValue );  oldVal = this._mValue;  debug( 'Current value: %s.', this._nValue );  oldVal = this._nValue;  debug( 'Current value: %s.', this._oValue );  oldVal = this._oValue;  debug( 'Current value: %s.', this._pValue );  oldVal = this._pValue;  debug( 'Current value: %s.', this._qValue );  oldVal = this._qValue;  debug( 'Current value: %s.', this._rValue );  oldVal = this._rValue;  debug( 'Current value: %s.', this._sValue );  oldVal = this._sValue;  debug( 'Current value: %s.', this._tValue );  oldVal = this._tValue;  debug( 'Current value
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name')             ->add('description')         ;     }      /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
                throw("Incomplete framebuffer: FRAMEBUFFER_INCOMPLETE_DIMENSIONS"); break;         case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:             throw("Incomplete framebuffer: FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT"); break;         case gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:             throw("Incomplete framebuffer: FRAMEBUFFER_INCOMPLETE_DIMENSIONS"); break;         case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:             throw("Incomplete framebuffer: FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT"); break;         case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:             throw("Incomplete framebuffer: FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT"); break;         case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:             throw("Incomplete framebuffer: FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT"); break;         case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:             throw("Incomplete framebuffer: FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT"); break;         case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:             throw("Incomplete framebuffer: FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT"); break;         case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:             throw("Incomplete framebuffer: FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT"); break;         case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:             throw("Incomplete framebuffer: FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT"); break;         case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:             throw("Incomplete framebuffer: FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT"); break;         case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:             throw("Incomplete framebuffer: FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT"); break;         case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:             throw("Incomplete framebuffer: FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT"); break;         case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:             throw("Incomplete framebuffer:
return originalPosition[0] === finalPosition[0] && originalPosition[1] === finalPosition[1] && originalPosition[2] > finalPosition[2];       break;     case DIRECTIONS[0]: return originalPosition[0] === finalPosition[0] && originalPosition[1] === finalPosition[1] && originalPosition[2] > finalPosition[2];       break;     case DIRECTIONS[2]: return originalPosition[0] === finalPosition[0] && originalPosition[1] === finalPosition[1];       break;     case DIRECTIONS[3]: return originalPosition[0] === finalPosition[0] && originalPosition[1] === finalPosition[1];       break;     case DIRECTIONS[4]: return originalPosition[0] === finalPosition[0] && originalPosition[1] === finalPosition[1];       break;     case DIRECTIONS[5]: return originalPosition[0] === finalPosition[0] && originalPosition[1] === finalPosition[1];       break;     case DIRECTIONS[6]: return originalPosition[0] === finalPosition[0] && originalPosition[1] === finalPosition[1];       break;     case DIRECTIONS[7]: return originalPosition[0] === finalPosition[0] && originalPosition[1] === finalPosition[1];       break;     case DIRECTIONS[8]: return originalPosition[0] === finalPosition[0] && originalPosition[1] === finalPosition[1];       break;     case DIRECTIONS[9]: return originalPosition[0] === finalPosition[0] && originalPosition[1] === finalPosition[1];       break;     case DIRECTIONS[10]: return originalPosition[0] === finalPosition[0] && originalPosition[1] === finalPosition[1];       break;     case DIRECTIONS[11]: return originalPosition[0] === finalPosition[0] && originalPosition[1] === finalPosition[1];       break;     case DIRECTIONS[12]: return originalPosition[0] === finalPosition[0] && originalPosition[1] === finalPosition[1];       break;     case DIRECTIONS[13]: return originalPosition[0] === finalPosition[0] && originalPosition[1] ===
[States.NOT_STARTED, 'Not Started'] , [States.IN_PROGRESS, 'In Progress'] , [States.COMPLETED,   'Completed'] ] [States.NOT_STARTED, 'Not Started'] , [States.IN_PROGRESS, 'In Progress'] , [States.COMPLETED,   'Completed'] ] [States.NOT_STARTED, 'Not Started'] , [States.IN_PROGRESS, 'In Progress'] , [States.COMPLETED,   'Completed'] ] [States.NOT_STARTED, 'Not Started'] , [States.IN_PROGRESS, 'In Progress'] , [States.COMPLETED,   'Completed'] ] [States.NOT_STARTED, 'Not Started'] , [States.IN_PROGRESS, 'In Progress'] , [States.COMPLETED,   'Completed'] ] [States.NOT_STARTED, 'Not Started'] , [States.IN_PROGRESS, 'In Progress'] , [States.COMPLETED,   'Completed'] ] [States.NOT_STARTED, 'Not Started'] , [States.IN_PROGRESS, 'In Progress'] , [States.COMPLETED,   'Completed'] ] [States.NOT_STARTED, 'Not Started'] , [States.IN_PROGRESS, 'In Progress'] , [States.COMPLETED,   'Completed'] ] [States.NOT_STARTED, 'Not Started'] , [States.IN_PROGRESS, 'In Progress'] , [States.COMPLETED,   'Completed'] ] [States.NOT_STARTED, 'Not Started'] , [States.IN_PROGRESS, 'In Progress'] , [States.COMPLETED,   'Completed'] ] [States.NOT_STARTED, 'Not Started'] , [States.IN_PROGRESS, 'In Progress'] , [States.COMPLETED,   'Completed'] ] [States.NOT_STARTED, 'Not Started'] , [States.IN_PROGRESS, 'In Progress'] , [States.COMPLETED,   'Completed'] ] [States.NOT_STARTED, 'Not Started'] , [States.IN_PROGRESS, 'In Progress'] , [States.COMPLETED,   'Completed'] ] [States.NOT_STARTED, 'Not Started'] , [States.IN_PROGRESS, 'In Progress'] , [States.COMPLETED
<?php  /*  * This file is part of the Symfony package.  *  * (c) Fabien Potencier <fabien@symfony.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace Symfony\Component\Form\Extension\Core\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface; use Symfony\Component\Validator\Constraints as Assert; use Symfony\Component\Validator\Constraints\NotBlank; use Symfony\Component\Validator\Constraints\Length; use Symfony\Component\Validator\Constraints\Regex; use Symfony\Component\Validator\Exception\UnexpectedTypeException; use Symfony\Component\Validator\Exception\UnexpectedValueException; use Symfony\Component\Validator\Validator; use Symfony\Component\Validator\ValidatorInterface; use Symfony\Component\Validator\ValidatorFactory; use Symfony\Component\Validator\ValidatorFactoryInterface;  /**  * @author Fabien Potencier <fabien@symfony.com>  */ class TextType extends AbstractType {     /**      * {@inheritdoc}      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('text', 'text', array(                 'label' => 'Symfony\Component\Form\Extension\Core\Type\TextType::label',                 'required' => false,             ))         ;     }      /**      * {@inheritdoc}      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Symfony\Component\Form\Extension\Core\Type\TextType',         ));     }      /**      * {@inheritdoc}      */     public function getName()     {         return 'Symfony\Component\Form\Extension\Core\Type\TextType';     }      /**      * {@inheritdoc}      */     public function getParent()     {         return 'text';     }      /**
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name')             ->add('description')         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product';     } } 
﻿using System; using System.Collections.Generic; using System.Linq; using System.Text; using System.Threading.Tasks; using System.Windows; using System.Windows.Controls; using System.Windows.Data; using System.Windows.Documents; using System.Windows.Input; using System.Windows.Media; using System.Windows.Media.Animation; using System.Windows.Media.Effects; using System.Windows.Media.Imaging; using System.Windows.Media.Media3D; using System.Windows.Media.TextFormatting; using System.Windows.Navigation; using System.Windows.Shapes; using System.Windows.Shell; using System.Collections; using System.Collections.Specialized; using System.Collections.ObjectModel; using System.Collections.Specialized.Collections; using System.ComponentModel; using System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema; using System.Data; using System.Data.Entity; using System.Data.Entity.Infrastructure; using System.Data.Entity.ModelConfiguration; using System.Data.Entity.Migrations; using System.Data.Entity.Migrations.Infrastructure; using System.Linq; using System.Linq.Expressions; using System.Linq.Expressions.Linq; using System.Web; using System.Web.Optimization; using System.Web.Routing; using System.Web.UI; using System.Web.UI.WebControls; using System.Web.UI.WebControls.WebParts; using System.Web.UI.HtmlControls; using System.Web.UI.HtmlControls.WebParts.DataAnnotations; using System.Web.UI.HtmlControls.WebParts.DataAnnotations.Schema; using System.Web.UI.HtmlControls.WebParts.DataAnnotations.ViewModels; using System.Web.UI.HtmlControls.WebParts.DataAnnotations.Views; using System.Web.UI.HtmlControls.WebParts.DataAnnotations.Views.DataAnnotations; using System.Web.UI.HtmlControls.WebParts.DataAnnotations.Views.DataAnnotations; using System.Web.UI.
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.product.name',                 'attr' => array(                     'class' => 'form-control',                 ),             ))             ->add('price', 'number', array(                 'label' => 'sylius.form.product.price',                 'attr' => array(                     'class' => 'form-control',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name')             ->add('description')         ;     }      /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product';     } } 
  this.play(); }  HTMLMediaElement.prototype.pause = function() {       let p = originalPause.apply(this, arguments);       if (p) {     this.pause();   } }  HTMLMediaElement.prototype.stop = function() {       let p = originalStop.apply(this, arguments);       if (p) {     this.stop();   } }  HTMLMediaElement.prototype.seek = function() {       let p = originalSeek.apply(this, arguments);       if (p) {     this.seek();   } }  HTMLMediaElement.prototype.seekTo = function() {       let p = originalSeekTo.apply(this, arguments);       if (p) {     this.seekTo();   } }  HTMLMediaElement.prototype.currentTime = function() {       let p = originalCurrentTime.apply(this, arguments);       if (p) {     this.currentTime();   } }  HTMLMediaElement.prototype.currentTimeTo = function() {       let p = originalCurrentTimeTo.apply(this, arguments);       if (p) {     this.currentTimeTo();   } }  HTMLMediaElement.prototype.duration = function() {       let p = originalDuration.apply(this, arguments);       if (p) {     this.duration();   } }  HTMLMediaElement.prototype.durationTo = function() {       let p = originalDurationTo.apply(this, arguments);       if (p) {     this.durationTo();   } }  HTMLMediaElement.prototype.volume = function() {       let p = originalVolume.apply(this, arguments);       if (p) {     this.volume();   } }  HTMLMediaElement.prototype.volumeTo = function() {       let p = originalVolumeTo.apply(this, arguments);       if (p) {     this.volumeTo();   } }  HTMLMediaElement.prototype.currentTime = function() {       let p = originalCurrentTime.apply(this, arguments);       if (p) {     this.currentTime();   } }  HTMLMediaElement.prototype.currentTime
﻿using System; using System.Collections.Generic; using System.Linq; using System.Text; using System.Threading.Tasks; using System.Windows; using System.Windows.Controls; using System.Windows.Data; using System.Windows.Documents; using System.Windows.Input; using System.Windows.Media; using System.Windows.Media.Imaging; using System.Windows.Navigation; using System.Windows.Shapes; using System.Windows.Shell; using System.IO; using System.Xml; using System.Xml.Linq; using System.Collections; using System.Collections.Generic; using System.Collections.ObjectModel; using System.Collections.Specialized; using System.ComponentModel; using System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema; using System.Data; using System.Data.Entity; using System.Data.Entity.Infrastructure; using System.Data.Entity.ModelConfiguration; using System.Data.Entity.Migrations; using System.Data.Entity.Migrations.Infrastructure; using System.Web; using System.Web.Optimization; using System.Web.Routing; using Microsoft.AspNet.Identity; using Microsoft.AspNet.Identity.EntityFramework; using Microsoft.AspNet.Identity.Owin; using Microsoft.Owin; using Microsoft.Owin.Security; using Microsoft.Owin.Security.Cookies; using Microsoft.Owin.Security.Google; using Microsoft.Owin.Security.Facebook; using Microsoft.Owin.Security.Facebook.OAuth; using Microsoft.Owin.Security.Twitter; using Microsoft.Owin.Security.Facebook.OAuth2; using Microsoft.Owin.Security.Google.OAuth2; using Microsoft.Owin.Security.Facebook.OAuth3; using Microsoft.Owin.Security.Facebook.OAuth4; using Microsoft.Owin.Security.OAuth5; using Microsoft.Owin.Security.OAuth6; using Microsoft.Owin.Security.OAuth7; using Microsoft.Owin.Security.OAuth8; using Microsoft.Owin.Security
// Copyright (c) 2012 The Chromium Authors. All rights reserved. // Use of this source code is governed by a BSD-style license that can be // found in the LICENSE file.  #ifndef CHROME_BROWSER_UI_WEBUI_CHROMEOS_LOGIN_SCREEN_H_ #define CHROME_BROWSER_UI_WEBUI_CHROMEOS_LOGIN_SCREEN_H_  #include <string> #include <vector>  #include "base/basictypes.h" #include "base/compiler_specific.h" #include "base/memory/scoped_ptr.h" #include "base/memory/weak_ptr.h" #include "base/observer_list.h" #include "base/time/time.h" #include "chrome/browser/chromeos/login/user_manager.h" #include "chrome/browser/chromeos/login/user_manager_factory.h" #include "chrome/browser/chromeos/login/user_manager_observer.h" #include "chrome/browser/profiles/profile.h" #include "content/public/browser/notification_observer.h" #include "content/public/browser/notification_registrar.h" #include "content/public/browser/notification_registrar_observer.h" #include "content/public/browser/notification_service.h" #include "content/public/browser/notification_source.h" #include "content/public/browser/notification_types.h" #include "content/public/browser/web_contents.h" #include "content/public/browser/web_contents_observer.h" #include "content/public/browser/web_ui.h" #include "content/public/browser/web_ui_data_source.h" #include "grit/generated_resources.h" #include "grit/theme_resources.h" #include "ui/base/l10n/l10n_util.h" #include "ui/base/resource/resource_bundle.h
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              
(error);     process.exit(0);   }                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   
<?php  /*  * This file is part of PHPExifTool.  *  * (c) 2012 Romain Neutron <imprec@gmail.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace PHPExiftool\Driver\Tag\DICOM;  use JMS\Serializer\Annotation\ExclusionPolicy; use PHPExiftool\Driver\AbstractTag;  /**  * @ExclusionPolicy("all")  */ class Speed extends AbstractTag {      protected $Id = '0020,0020';      protected $Name = 'Speed';      protected $FullName = 'DICOM::Main';      protected $GroupName = 'DICOM';      protected $g0 = 'DICOM';      protected $g1 = 'DICOM';      protected $g2 = 'Image';      protected $Type = '?';      protected $Writable = false;      protected $Description = 'Speed';  } 
 module.exports = function(grunt) {    // Project configuration.   grunt.initConfig({     pkg: grunt.file.readJSON('package.json'),     jshint: {       options: {         jshintrc: '.jshintrc',         reporter: require('jshint-stylish')       },       all: [         'Gruntfile.js',         'tasks/*.js',         'tasks/**/*.js'       ]     },     watch: {       js: {         files: ['Gruntfile.js', 'tasks/*.js'],         tasks: ['jshint:all'],         options: {           livereload: true         }       },       css: {         files: ['Gruntfile.css', 'tasks/*.css'],         tasks: ['jshint:all'],         options: {           livereload: true         }       }     }   });    // Load grunt tasks automatically   grunt.loadNpmTasks('grunt-contrib-jshint');   grunt.loadNpmTasks('grunt-contrib-watch');    // Default task.   grunt.registerTask('default', ['jshint', 'watch']);  }; 
 this.viewFolder = 'views' this.controller = 'base' this.beforeFilters = []  this.viewFolder = 'views' this.controller = 'base' this.beforeFilters = []  this.viewFolder = 'views' this.controller = 'base' this.beforeFilters = []  this.viewFolder = 'views' this.controller = 'base' this.beforeFilters = []  this.viewFolder = 'views' this.controller = 'base' this.beforeFilters = []  this.viewFolder = 'views' this.controller = 'base' this.beforeFilters = []  this.viewFolder = 'views' this.controller = 'base' this.beforeFilters = []  this.viewFolder = 'views' this.controller = 'base' this.beforeFilters = []  this.viewFolder = 'views' this.controller = 'base' this.beforeFilters = []  this.viewFolder = 'views' this.controller = 'base' this.beforeFilters = []  this.viewFolder = 'views' this.controller = 'base' this.beforeFilters = []  this.viewFolder = 'views' this.controller = 'base' this.beforeFilters = []  this.viewFolder = 'views' this.controller = 'base' this.beforeFilters = []  this.viewFolder = 'views' this.controller = 'base' this.beforeFilters = []  this.viewFolder = 'views' this.controller = 'base' this.beforeFilters = []  this.viewFolder = 'views' this.controller = 'base' this.beforeFilters = []  this.viewFolder = 'views' this.controller = 'base' this.beforeFilters = []  this.viewFolder = 'views' this.controller = 'base' this.beforeFilters = []  this.viewFolder = 'views' this.controller = 'base' this.beforeFilters = []  this.viewFolder = 'views' this.controller = 'base' this.beforeFilters = []  this.viewFolder = 'views' this
.app[verb || 'all'](path, callbacks); }  module.exports = function(app) {     this.app = app; }  module.exports.app = this.app; module.exports.verb = this.app[verb || 'all']; module.exports.path = this.app[verb || 'all']; module.exports.callbacks = this.app[verb || 'all'];                                                                                                                                                                                                                                                                                                                                                                                                                           
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializer; import org.apache.hyracks.api.dataflow.value.ISerializerSerializer; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.data
     this._format();   this._aria();   if ( previous !== this.options.value ) {       this.options.value = previous;       this._format();   this._aria();   if ( previous !== this.options.value ) {         this.options.value = previous;         this._format();   this._aria();   }       this._aria();   if ( previous !== this.options.value ) {         this.options.value = previous;         this._aria();   }       this._aria();   if ( previous !== this.options.value ) {         this.options.value = previous;         this._aria();   }       this._aria();   if ( previous !== this.options.value ) {         this.options.value = previous;         this._aria();   }       this._aria();   if ( previous !== this.options.value ) {         this.options.value = previous;         this._aria();   }       this._aria();   if ( previous !== this.options.value ) {         this.options.value = previous;         this._aria();   }       this._aria();   if ( previous !== this.options.value ) {         this.options.value = previous;         this._aria();   }       this._aria();   if ( previous !== this.options.value ) {         this.options.value = previous;         this._aria();   }       this._aria();   if ( previous !== this.options.value ) {         this.options.value = previous;         this._aria();   }       this._aria();   if ( previous !== this.options.value ) {         this.options.value = previous;         this._aria();   }       this._aria();   if ( previous !== this.options.value ) {         this.options.value = previous;         this._aria();   }       this._aria();   if ( previous !== this.options.value ) {         this.options.value = previous;         this._aria();   }       this._aria();   if ( previous !== this.options.value ) {         this.options.value = previous;         this._aria();  
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
﻿using System.Reflection; using System.Runtime.CompilerServices; using System.Runtime.InteropServices;  // General Information about an assembly is controlled through the following  // set of attributes. Change these attribute values to modify the information // associated with an assembly. [assembly: AssemblyTitle("Neo4j")] [assembly: AssemblyDescription("")] [assembly: AssemblyConfiguration("")] [assembly: AssemblyCompany("")] [assembly: AssemblyProduct("Neo4j")] [assembly: AssemblyCopyright("Copyright ©  2015")] [assembly: AssemblyTrademark("")] [assembly: AssemblyCulture("")]  // Setting ComVisible to false makes the types in this assembly not visible  // to COM components.  If you need to access a type in this assembly from  // COM, set the ComVisible attribute to true on that type. [assembly: ComVisible(false)]  // The following GUID is for the ID of the typelib if this project is exposed to COM [assembly: Guid("1e7e7e7e7e7e7")]  // Version information for an assembly consists of the following four values: // //      Major Version //      Minor Version  //      Build Number //      Revision // // You can specify all the values or you can default the Build and Revision Numbers  // by using the '*' as shown below: // [assembly: AssemblyVersion("1.0.*")] [assembly: AssemblyVersion("1.0.0.0")] [assembly: AssemblyFileVersion("1.0.0.0")] [assembly: AssemblyInformationalVersion("1.0.0.0")] [assembly: AssemblyFileVersion("1.0.0.0")] [assembly: ComVisible(false)]
 xmpp.on('connect', function() {   c2s = new Client();   c2s.on('error', function(err) {     debug(err)   })   c2s.on('message', function(msg) {     debug(msg)   }) })  xmpp.on('disconnect', function() {   c2s.disconnect() })  xmpp.on('message', function(msg) {   debug(msg) })  xmpp.on('connect', function() {   c2s.connect() })  xmpp.on('disconnect', function() {   c2s.disconnect() })  xmpp.on('connect', function() {   c2s.connect() })  xmpp.on('disconnect', function() {   c2s.disconnect() })  xmpp.on('connect', function() {   c2s.connect() })  xmpp.on('disconnect', function() {   c2s.disconnect() })  xmpp.on('connect', function() {   c2s.connect() })  xmpp.on('disconnect', function() {   c2s.disconnect() })  xmpp.on('connect', function() {   c2s.connect() })  xmpp.on('disconnect', function() {   c2s.disconnect() })  xmpp.on('connect', function() {   c2s.connect() })  xmpp.on('disconnect', function() {   c2s.disconnect() })  xmpp.on('connect', function() {   c2s.connect() })  xmpp.on('disconnect', function() {   c2s.disconnect() })  xmpp.on('connect', function() {   c2s.connect() })  xmpp.on('disconnect', function() {   c2s.disconnect() })  xmpp.on('connect', function() {   c2s.connect() })  xmpp.on('disconnect', function() {   c2s.disconnect() 
<?php  /*  * This file is part of the Symfony package.  *  * (c) Fabien Potencier <fabien@symfony.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace Symfony\Component\Form\Extension\Core\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\Form\FormEvent; use Symfony\Component\Form\FormEvents; use Symfony\Component\Form\FormInterface; use Symfony\Component\Form\FormView; use Symfony\Component\OptionsResolver\OptionsResolverInterface; use Symfony\Component\OptionsResolver\OptionsResolver;  /**  * @author Fabien Potencier <fabien@symfony.com>  */ class TextType extends AbstractType {     /**      * {@inheritdoc}      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('text', 'text')         ;     }      /**      * {@inheritdoc}      */     public function configureOptions(OptionsResolver $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Symfony\Component\Form\Extension\Core\Type\TextType'         ));     }      /**      * {@inheritdoc}      */     public function getBlockPrefix()     {         return 'symfony_form_type_text';     }      /**      * {@inheritdoc}      */     public function getName()     {         return 'symfony_form_type_text';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.functions.IFunctionDescriptorProvider; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.data.accessors.ITupleReference; import org.apache.hyracks.dataflow.common.data
 throw 'constring must not be null or empty'; if (contype == null || contype.trim() === '')         throw 'contype must not be null or empty'; if (contype == null || contype.trim() === '')         throw 'contype must not be null or empty'; if (contype == null || contype.trim() === '')         throw 'contype must not be null or empty'; if (contype == null || contype.trim() === '')         throw 'contype must not be null or empty'; if (contype == null || contype.trim() === '')         throw 'contype must not be null or empty'; if (contype == null || contype.trim() === '')         throw 'contype must not be null or empty'; if (contype == null || contype.trim() === '')         throw 'contype must not be null or empty'; if (contype == null || contype.trim() === '')         throw 'contype must not be null or empty'; if (contype == null || contype.trim() === '')         throw 'contype must not be null or empty'; if (contype == null || contype.trim() === '')         throw 'contype must not be null or empty'; if (contype == null || contype.trim() === '')         throw 'contype must not be null or empty'; if (contype == null || contype.trim() === '')         throw 'contype must not be null or empty'; if (contype == null || contype.trim() === '')         throw 'contype must not be null or empty'; if (contype == null || contype.trim() === '')         throw 'contype must not be null or empty'; if (contype == null || contype.trim() === '')         throw 'contype must not be null or empty'; if (contype == null || contype.trim() === '')         throw 'contype must not be null or empty'; if (contype == null || contype.trim() === '')         throw 'contype must not be null or empty'; if (contype == null || contype.trim() === '')         throw 'contype must not be null or empty'; if (contype == null || contype.trim() ===
 var rect = handle.append('rect')       .attr('class', 'CDB-Chart-axisTipRect CDB-Chart-axisTipTriangle') var rect2 = handle.append('rect')       .attr('class', 'CDB-Chart-axisTipRect CDB-Chart-axisTipTriangle') var rect3 = handle.append('rect')       .attr('class', 'CDB-Chart-axisTipRect CDB-Chart-axisTipTriangle') var rect4 = handle.append('rect')       .attr('class', 'CDB-Chart-axisTipRect CDB-Chart-axisTipTriangle') var rect5 = handle.append('rect')       .attr('class', 'CDB-Chart-axisTipRect CDB-Chart-axisTipTriangle') var rect6 = handle.append('rect')       .attr('class', 'CDB-Chart-axisTipRect CDB-Chart-axisTipTriangle') var rect7 = handle.append('rect')       .attr('class', 'CDB-Chart-axisTipRect CDB-Chart-axisTipTriangle') var rect8 = handle.append('rect')       .attr('class', 'CDB-Chart-axisTipRect CDB-Chart-axisTipTriangle') var rect9 = handle.append('rect')       .attr('class', 'CDB-Chart-axisTipRect CDB-Chart-axisTipTriangle') var rect10 = handle.append('rect')       .attr('class', 'CDB-Chart-axisTipRect CDB-Chart-axisTipTriangle') var rect11 = handle.append('rect')       .attr('class', 'CDB-Chart-axisTipRect CDB-Chart-axisTipTriangle') var rect12 = handle.append('rect')       .attr('class', 'CDB-Chart-axisTipRect CDB-Chart-axisTipTriangle') var rect13 = handle.append('rect')       .attr('class', 'CDB-Chart-axisTipRect CDB-Chart-axisTipTriangle') var rect14 = handle.append('rect')       .attr('class', 'CDB-Chart-axisTipRect CDB-Chart-axisTipTriangle') var rect15 = handle.append('rect')       .attr('class', 'CDB-Chart
 import { connect } from 'react-redux' import { Link } from 'react-router-dom' import { Link } from 'react-router-dom' import { Link } from 'react-router-dom' import { Link } from 'react-router-dom' import { Link } from 'react-router-dom' import { Link } from 'react-router-dom' import { Link } from 'react-router-dom' import { Link } from 'react-router-dom' import { Link } from 'react-router-dom' import { Link } from 'react-router-dom' import { Link } from 'react-router-dom' import { Link } from 'react-router-dom' import { Link } from 'react-router-dom' import { Link } from 'react-router-dom' import { Link } from 'react-router-dom' import { Link } from 'react-router-dom' import { Link } from 'react-router-dom' import { Link } from 'react-router-dom' import { Link } from 'react-router-dom' import { Link } from 'react-router-dom' import { Link } from 'react-router-dom' import { Link } from 'react-router-dom' import { Link } from 'react-router-dom' import { Link } from 'react-router-dom' import { Link } from 'react-router-dom' import { Link } from 'react-router-dom' import { Link } from 'react-router-dom' import { Link } from 'react-router-dom' import { Link } from 'react-router-dom' import { Link } from 'react-router-dom' import { Link } from 'react-router-dom' import { Link } from 'react-router-dom' import { Link } from 'react-router-dom' import { Link } from 'react-router-dom' import { Link } from 'react-router-dom' import { Link } from 'react-router-dom' import { Link } from 'react-router-dom' import { Link } from 'react-router-dom' import { Link }
is_editable = false; is_editable = false; is_editable = false; is_editable = false; is_editable = false; is_editable = false; is_editable = false; is_editable = false; is_editable = false; is_editable = false; is_editable = false; is_editable = false; is_editable = false; is_editable = false; is_editable = false; is_editable = false; is_editable = false; is_editable = false; is_editable = false; is_editable = false; is_editable = false; is_editable = false; is_editable = false; is_editable = false; is_editable = false; is_editable = false; is_editable = false; is_editable = false; is_editable = false; is_editable = false; is_editable = false; is_editable = false; is_editable = false; is_editable = false; is_editable = false; is_editable = false; is_editable = false; is_editable = false; is_editable = false; is_editable = false; is_editable = false; is_editable = false; is_editable = false; is_editable = false; is_editable = false; is_editable = false; is_editable = false; is_editable = false; is_editable = false; is_editable = false; is_editable = false; is_editable = false; is_editable = false; is_editable = false; is_editable = false; is_editable = false; is_editable = false; is_editable = false; is_editable = false; is_editable = false; is_editable = false; is_editable = false; is_editable = false; is_editable = false; is_editable = false; is_editable = false; is_editable = false; is_editable = false; is_editable = false; is_editable = false; is_editable = false; is_editable = false; is_editable = false; 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */  package org.apache.druid.query.aggregation;  import com.fasterxml.jackson.annotation.JsonCreator; import com.fasterxml.jackson.annotation.JsonProperty; import com.fasterxml.jackson.annotation.JsonTypeInfo; import com.fasterxml.jackson.annotation.JsonTypeInfo.Id; import com.fasterxml.jackson.annotation.JsonTypeInfo.As; import com.fasterxml.jackson.annotation.JsonTypeName; import com.google.common.base.Preconditions; import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Iterables; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import org.apache.druid.java.util.common.StringUtils; import org.apache.druid.java.util.common.guava.Sequence; import org.apache.druid.java.util.common.guava.Sequences; import org.apache.druid.java.util.common.logger.Logger; import org.apache.druid.java.util
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.functions.IFunctionDescriptorProvider; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.data.accessors.ITupleReference; import org.apache.hyracks.dataflow.common.data
 import React, {Component} from 'react'; import PropTypes from 'prop-types'; import classNames from 'classnames'; import classNamesFromProps from 'classnames-from-props'; import classNamesFromProps from 'classnames-from-props'; import classNames from 'classnames'; import classNamesFromProps from 'classnames-from-props'; import classNames from 'classnames'; import classNamesFromProps from 'classnames-from-props'; import classNames from 'classnames'; import classNamesFromProps from 'classnames-from-props'; import classNames from 'classnames'; import classNamesFromProps from 'classnames-from-props'; import classNames from 'classnames'; import classNamesFromProps from 'classnames-from-props'; import classNames from 'classnames'; import classNamesFromProps from 'classnames-from-props'; import classNames from 'classnames'; import classNamesFromProps from 'classnames-from-props'; import classNames from 'classnames'; import classNamesFromProps from 'classnames-from-props'; import classNames from 'classnames'; import classNamesFromProps from 'classnames-from-props'; import classNames from 'classnames'; import classNamesFromProps from 'classnames-from-props'; import classNames from 'classnames'; import classNamesFromProps from 'classnames-from-props'; import classNames from 'classnames'; import classNamesFromProps from 'classnames-from-props'; import classNames from 'classnames'; import classNamesFromProps from 'classnames-from-props'; import classNames from 'classnames'; import classNamesFromProps from 'classnames-from-props'; import classNames from 'classnames'; import classNamesFromProps from 'classnames-from-props'; import classNames from 'classnames'; import classNamesFromProps from 'classnames-from-props'; import classNames from 'classnames'; import classNamesFromProps from 'classnames-from-props'; import classNames from 'classnames'; import classNamesFromProps from 'classnames-from-props'; import classNames from 'classnames'; import classNamesFromProps from 'classnames-from-props'; import classNames from 'classnames'; import classNamesFromProps from 'classnames-from-props'; import classNames from 'classnames-from-props'; import
 const db = require('../utils/db')  module.exports = (req, res, next) => {   if (!req.user) {     res.redirect('/login')     return   }    if (!req.user.isAuthenticated) {     res.redirect('/login')     return   }    if (!req.user.isAdmin) {     res.redirect('/admin')     return   }    if (!req.user.isAdmin) {     res.redirect('/admin')     return   }    if (!req.user.isAdmin) {     res.redirect('/admin')     return   }    if (!req.user.isAdmin) {     res.redirect('/admin')     return   }    if (!req.user.isAdmin) {     res.redirect('/admin')     return   }    if (!req.user.isAdmin) {     res.redirect('/admin')     return   }    if (!req.user.isAdmin) {     res.redirect('/admin')     return   }    if (!req.user.isAdmin) {     res.redirect('/admin')     return   }    if (!req.user.isAdmin) {     res.redirect('/admin')     return   }    if (!req.user.isAdmin) {     res.redirect('/admin')     return   }    if (!req.user.isAdmin) {     res.redirect('/admin')     return   }    if (!req.user.isAdmin) {     res.redirect('/admin')     return   }    if (!req.user.isAdmin) {     res.redirect('/admin')     return   }    if (!req.user.isAdmin) {     res.redirect('/admin')     return   }    if (!req.user.isAdmin) {     res.redirect('/admin')     return   }    if (!req.user.isAdmin) {
 var path = require('path'); var webpack = require('webpack'); var HtmlWebpackPlugin = require('html-webpack-plugin'); var ExtractTextPlugin = require('extract-text-webpack-plugin'); var CopyWebpackPlugin = require('copy-webpack-plugin'); var HtmlWebpackPlugin = require('html-webpack-plugin'); var ExtractTextPlugin = require('extract-text-webpack-plugin'); var ExtractTextPlugin = require('extract-text-webpack-plugin'); var ExtractTextPlugin = require('extract-text-webpack-plugin'); var ExtractTextPlugin = require('extract-text-webpack-plugin'); var ExtractTextPlugin = require('extract-text-webpack-plugin'); var ExtractTextPlugin = require('extract-text-webpack-plugin'); var ExtractTextPlugin = require('extract-text-webpack-plugin'); var ExtractTextPlugin = require('extract-text-webpack-plugin'); var ExtractTextPlugin = require('extract-text-webpack-plugin'); var ExtractTextPlugin = require('extract-text-webpack-plugin'); var ExtractTextPlugin = require('extract-text-webpack-plugin'); var ExtractTextPlugin = require('extract-text-webpack-plugin'); var ExtractTextPlugin = require('extract-text-webpack-plugin'); var ExtractTextPlugin = require('extract-text-webpack-plugin'); var ExtractTextPlugin = require('extract-text-webpack-plugin'); var ExtractTextPlugin = require('extract-text-webpack-plugin'); var ExtractTextPlugin = require('extract-text-webpack-plugin'); var ExtractTextPlugin = require('extract-text-webpack-plugin'); var ExtractTextPlugin = require('extract-text-webpack-plugin'); var ExtractTextPlugin = require('extract-text-webpack-plugin'); var ExtractTextPlugin = require('extract-text-webpack-plugin'); var ExtractTextPlugin = require('extract-text-webpack-plugin'); var ExtractTextPlugin = require('extract-text-webpack-plugin'); var ExtractTextPlugin = require('extract-text-webpack-plugin'); var ExtractTextPlugin = require('extract-text-webpack-plugin'); var ExtractTextPlugin = require('extract-text-webpack-plugin'); var ExtractTextPlugin = require('extract-text-webpack-plugin'); var
const array = new Array();       array.push('1'); expect(isEmpty({})).toBe(false, "for empty literal object");       expect(isEmpty([1])).toBe(false, "for empty literal array");       expect(isEmpty({foo: 1})).toBe(false, "for empty literal object");       expect(isEmpty([1])).toBe(false, "for empty literal array");       expect(isEmpty([1])).toBe(false, "for empty literal object");       expect(isEmpty([1])).toBe(false, "for empty literal array");       expect(isEmpty([1])).toBe(false, "for empty literal object");       expect(isEmpty([1])).toBe(false, "for empty literal array");       expect(isEmpty([1])).toBe(false, "for empty literal object");       expect(isEmpty([1])).toBe(false, "for empty literal array");       expect(isEmpty([1])).toBe(false, "for empty literal object");       expect(isEmpty([1])).toBe(false, "for empty literal array");       expect(isEmpty([1])).toBe(false, "for empty literal object");       expect(isEmpty([1])).toBe(false, "for empty literal array");       expect(isEmpty([1])).toBe(false, "for empty literal object");       expect(isEmpty([1])).toBe(false, "for empty literal array");       expect(isEmpty([1])).toBe(false, "for empty literal object");       expect(isEmpty([1])).toBe(false, "for empty literal array");       expect(isEmpty([1])).toBe(false, "for empty literal object");       expect(isEmpty([1])).toBe(false, "for empty literal array");       expect(isEmpty([1])).toBe(false, "for empty literal object");       expect(isEmpty([1])).toBe(false, "for empty literal array");       expect(isEmpty([1])).toBe(false, "for empty literal object");       expect(isEmpty([1])).toBe(false, "for empty literal array");       expect(isEmpty([1])).toBe(false, "for empty
     if (err.message === 'xhr poll error') {     if (loggedXhrPollError) {     if (err.message === 'xhr poll error') {     if (err.message === 'xhr poll error') {     if (err.message === 'xhr poll error') {     if (err.message === 'xhr poll error') {     if (err.message === 'xhr poll error') {     if (err.message === 'xhr poll error') {     if (err.message === 'xhr poll error') {     if (err.message === 'xhr poll error') {     if (err.message === 'xhr poll error') {     if (err.message === 'xhr poll error') {     if (err.message === 'xhr poll error') {     if (err.message === 'xhr poll error') {     if (err.message === 'xhr poll error') {     if (err.message === 'xhr poll error') {     if (err.message === 'xhr poll error') {     if (err.message === 'xhr poll error') {     if (err.message === 'xhr poll error') {     if (err.message === 'xhr poll error') {     if (err.message === 'xhr poll error') {     if (err.message === 'xhr poll error') {     if (err.message === 'xhr poll error') {     if (err.message === 'xhr poll error') {     if (err.message === 'xhr poll error') {     if (err.message === 'xhr poll error') {     if (err.message === 'xhr poll error') {     if (err.message === 'xhr poll error') {     if (err.message === 'xhr poll error') {     if (err.message === 'xhr poll error') {     if (err.message === 'xhr poll error') {     if (err.message === 'xhr poll error') {     if (err.message === 'xhr poll error') {     if (err.message === 'xhr poll error') {     if (err.message === 'xhr poll error') {     if (err.message === 'xhr poll error') {     if (err.message === 'xhr poll
     function handleMouseMove(e) {         var x = e.pageX;         var y = e.pageY;         var dx = x - document.body.scrollLeft;         var dy = y - document.body.scrollTop;         if (dx > 0 && dy > 0) {             document.body.style.left = dx + 'px';             document.body.style.top = dy + 'px';         }     }      function preventDefault(e) {         e.preventDefault();         document.body.style.left = 0;         document.body.style.top = 0;     }      function handleMouseUp(e) {         var x = e.pageX;         var y = e.pageY;         var dx = x - document.body.scrollLeft;         var dy = y - document.body.scrollTop;         if (dx > 0 && dy > 0) {             document.body.style.left = dx + 'px';             document.body.style.top = dy + 'px';         }     }      function handleMouseDown(e) {         var x = e.pageX;         var y = e.pageY;         var dx = x - document.body.scrollLeft;         var dy = y - document.body.scrollTop;         if (dx > 0 && dy > 0) {             document.body.style.left = dx + 'px';             document.body.style.top = dy + 'px';         }     }      function handleMouseUp(e) {         var x = e.pageX;         var y = e.pageY;         var dx = x - document.body.scrollLeft;         var dy = y - document.body.scrollTop;         if (dx > 0 && dy > 0) {             document.body.style.left = dx + 'px';             document.body.style.top = dy + 'px';         }     }      function handleMouseDown(e) {         var x = e.pageX;         var y = e.pageY;         var dx = x
﻿using System.Reflection; using System.Runtime.CompilerServices; using System.Runtime.InteropServices;  // General Information about an assembly is controlled through the following  // set of attributes. Change these attribute values to modify the information // associated with an assembly. [assembly: AssemblyTitle("Neo4j")] [assembly: AssemblyDescription("")] [assembly: AssemblyConfiguration("")] [assembly: AssemblyCompany("")] [assembly: AssemblyProduct("Neo4j")] [assembly: AssemblyCopyright("Copyright ©  2014")] [assembly: AssemblyTrademark("")] [assembly: AssemblyCulture("")]  // Setting ComVisible to false makes the types in this assembly not visible  // to COM components.  If you need to access a type in this assembly from  // COM, set the ComVisible attribute to true on that type. [assembly: ComVisible(false)]  // The following GUID is for the ID of the typelib if this project is exposed to COM [assembly: Guid("e7e7e7e7")]  // Version information for an assembly consists of the following four values: // //      Major Version //      Minor Version  //      Build Number //      Revision // // You can specify all the values or you can default the Build and Revision Numbers  // by using the '*' as shown below: // [assembly: AssemblyVersion("1.0.*")] [assembly: AssemblyVersion("1.0.0.0")] [assembly: AssemblyFileVersion("1.0.0.0")] 
import Baobab from 'baobab';  describe('<Baobab />', () => {   it('should render', () => {     const wrapper = shallow(       <Baobab />     );     expect(wrapper).toMatchSnapshot();   }); });  describe('<Baobab />', () => {   it('should render', () => {     const wrapper = shallow(       <Baobab />     );     expect(wrapper).toMatchSnapshot();   }); });  describe('<Baobab />', () => {   it('should render', () => {     const wrapper = shallow(       <Baobab />     );     expect(wrapper).toMatchSnapshot();   }); });  describe('<Baobab />', () => {   it('should render', () => {     const wrapper = shallow(       <Baobab />     );     expect(wrapper).toMatchSnapshot();   }); });  describe('<Baobab />', () => {   it('should render', () => {     const wrapper = shallow(       <Baobab />     );     expect(wrapper).toMatchSnapshot();   }); });  describe('<Baobab />', () => {   it('should render', () => {     const wrapper = shallow(       <Baobab />     );     expect(wrapper).toMatchSnapshot();   }); });  describe('<Baobab />', () => {   it('should render', () => {     const wrapper = shallow(       <Baobab />     );     expect(wrapper).toMatchSnapshot();   }); });  describe('<Baobab />', () => {   it('should render', () => {     const wrapper = shallow(       <Baobab />     );     expect(wrapper).toMatchSnapshot();   }); });  describe('<Baobab />', () => {   it('should render', () => {     const wrapper = shallow(       <Baobab />     );    
 TextInputUnit.prototype.__proto__ = TextInputUnit.prototype.__proto__;  TextInputUnit.prototype.__proto__ = TextInputUnit.prototype;  TextInputUnit.prototype.__proto__ = TextInputUnit.prototype;  TextInputUnit.prototype.__proto__ = TextInputUnit.prototype;  TextInputUnit.prototype.__proto__ = TextInputUnit.prototype;  TextInputUnit.prototype.__proto__ = TextInputUnit.prototype;  TextInputUnit.prototype.__proto__ = TextInputUnit.prototype;  TextInputUnit.prototype.__proto__ = TextInputUnit.prototype;  TextInputUnit.prototype.__proto__ = TextInputUnit.prototype;  TextInputUnit.prototype.__proto__ = TextInputUnit.prototype;  TextInputUnit.prototype.__proto__ = TextInputUnit.prototype;  TextInputUnit.prototype.__proto__ = TextInputUnit.prototype;  TextInputUnit.prototype.__proto__ = TextInputUnit.prototype;  TextInputUnit.prototype.__proto__ = TextInputUnit.prototype;  TextInputUnit.prototype.__proto__ = TextInputUnit.prototype;  TextInputUnit.prototype.__proto__ = TextInputUnit.prototype;  TextInputUnit.prototype.__proto__ = TextInputUnit.prototype;  TextInputUnit.prototype.__proto__ = TextInputUnit.prototype;  TextInputUnit.prototype.__proto__ = TextInputUnit.prototype;  TextInputUnit.prototype.__proto__ = TextInputUnit.prototype;  TextInputUnit.prototype.__proto__ = TextInputUnit.prototype;  TextInputUnit.prototype.__proto__ = TextInputUnit.prototype;  TextInputUnit.prototype.__proto__ = TextInputUnit.prototype;  TextInputUnit.prototype.__proto__ = TextInputUnit.prototype;  TextInputUnit.prototype.__proto__ = TextInputUnit.prototype;  TextInputUnit.prototype.__proto__ = TextInputUnit.prototype;  TextInputUnit.prototype.__proto__ = TextInputUnit.prototype;  TextInputUnit.prototype.__proto__ = TextInputUnit.prototype;  TextInputUnit.prototype.__proto__ = TextInputUnit.prototype;  TextInputUnit.prototype.__proto__ = TextInputUnit.prototype
 }; Robot.prototype.update = function(dt) { this.time += dt; if (this.time > this.maxTime) { this.time = this.maxTime; } else { this.time = 0; } }; Robot.prototype.reset = function() { this.time = 0; } }; Robot.prototype.update = function(dt) { this.time += dt; if (this.time > this.maxTime) { this.time = this.maxTime; } else { this.time = 0; } }; Robot.prototype.update = function(dt) { this.time += dt; if (this.time > this.maxTime) { this.time = this.maxTime; } else { this.time = 0; } }; Robot.prototype.update = function(dt) { this.time += dt; if (this.time > this.maxTime) { this.time = this.maxTime; } else { this.time = 0; } }; Robot.prototype.update = function(dt) { this.time += dt; if (this.time > this.maxTime) { this.time = this.maxTime; } else { this.time = 0; } }; Robot.prototype.update = function(dt) { this.time += dt; if (this.time > this.maxTime) { this.time = this.maxTime; } else { this.time = 0; } }; Robot.prototype.update = function(dt) { this.time += dt; if (this.time > this.maxTime) { this.time = this.maxTime; } else { this.time = 0; } }; Robot.prototype.update = function(dt) { this.time += dt; if (this.time > this.maxTime) { this.time = this.maxTime; } else { this.time = 0; } }; Robot.prototype.update = function(dt) { this.time += dt; if (this.time > this.maxTime) {
<?php  /*  * This file is part of the Symfony package.  *  * (c) Fabien Potencier <fabien@symfony.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace Symfony\Component\DependencyInjection\Compiler;  use Symfony\Component\DependencyInjection\ContainerBuilder; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\RuntimeException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\RuntimeException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\RuntimeException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\RuntimeException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\RuntimeException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\RuntimeException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\RuntimeException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\RuntimeException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */  package org.apache.ignite.internal.processors.cache;  import org.apache.ignite.IgniteCheckedException; import org.apache.ignite.IgniteException; import org.apache.ignite.configuration.CacheConfiguration; import org.apache.ignite.configuration.IgniteConfiguration; import org.apache.ignite.internal.IgniteEx; import org.apache.ignite.internal.processors.cache.distributed.dht.*; import org.apache.ignite.internal.util.typedef.F; import org.apache.ignite.internal.util.typedef.internal.S; import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi; import org.apache.ignite.spi.discovery.tcp.ipfinder.TcpDiscoveryIpFinder; import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder; import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest; import org.apache.ignite.testframework.junits.common.GridCommonTest; import org.jetbrains.annotations.Nullable;  import static org.apache.ignite.cache.CacheMode.PARTITIONED; import static org.apache.ignite.cache.CacheWriteSynchronization
// Copyright (c) 2012 The Chromium Authors. All rights reserved. // Use of this source code is governed by a BSD-style license that can be // found in the LICENSE file.  #ifndef CHROME_BROWSER_UI_VIEWS_TABS_TAB_CONTENTS_VIEW_H_ #define CHROME_BROWSER_UI_VIEWS_TABS_TAB_CONTENTS_VIEW_H_  #include "base/basictypes.h" #include "base/compiler_specific.h" #include "base/memory/scoped_ptr.h" #include "base/memory/weak_ptr.h" #include "base/observer_list.h" #include "base/time/time.h" #include "content/public/browser/web_contents_observer.h" #include "content/public/browser/web_contents_user_data.h" #include "content/public/browser/web_contents_view.h" #include "content/public/browser/web_contents_view_delegate.h" #include "content/public/browser/web_contents_view_delegate_observer.h" #include "content/public/browser/web_contents_view_observer_delegate.h" #include "content/public/browser/web_contents_view_delegate_observer_observer.h" #include "content/public/browser/web_contents_view_observer_observer_observer.h" #include "content/public/browser/web_contents_view_observer_observer_observer.h" #include "content/public/browser/web_contents_view_observer_observer_observer.h" #include "content/public/browser/web_contents_view_observer_observer_observer.h" #include "content/public/browser/web_contents_view_observer_observer_observer.h" #include "content/public/browser/web_contents_view_observer_observer_observer.h" #include "content/public/browser/web_contents_view_observer_observer_observer.h" #include "content/public/browser/web_contents_
﻿using System.Reflection; using System.Runtime.CompilerServices; using System.Runtime.InteropServices;  // General Information about an assembly is controlled through the following  // set of attributes. Change these attribute values to modify the information // associated with an assembly. [assembly: AssemblyTitle("CSharp.Tests")] [assembly: AssemblyDescription("")] [assembly: AssemblyConfiguration("")] [assembly: AssemblyCompany("")] [assembly: AssemblyProduct("CSharp.Tests")] [assembly: AssemblyCopyright("Copyright ©  2015")] [assembly: AssemblyTrademark("")] [assembly: AssemblyCulture("")]  // Setting ComVisible to false makes the types in this assembly not visible  // to COM components.  If you need to access a type in this assembly from  // COM, set the ComVisible attribute to true on that type. [assembly: ComVisible(false)]  // The following GUID is for the ID of the typelib if this project is exposed to COM [assembly: Guid("8e8e8e8e-8e8e-4e8e-8e8e-8e8e8e8e8e")]  // Version information for an assembly consists of the following four values: // //      Major Version //      Minor Version  //      Build Number //      Revision // // You can specify all the values or you can default the Build and Revision Numbers  // by using the '*' as shown below: // [assembly: AssemblyVersion("1.0.*")] [assembly: AssemblyVersion("1.0.0.0")] [assembly: AssemblyFileVersion("1.0.0.0")] [assembly: InternalsVisibleTo("CSharp.Tests, PublicKey=0024000004800000940000000602000000240000525341310004000001000100b5fc90e7027f67871e773a8fde8938c81dd402ba65b9201d60593e96c492651e889cc13f1415ebb53fac1131ae0bd333c5ee602
 }                 break; }                 break; }                 break; }                 break; }                 break; }                 break; }                 break; }                 break; }                 break; }                 break; }                 break; }                 break; }                 break; }                 break; }                 break; }                 break; }                 break; }                 break; }                 break; }                 break; }                 break; }                 break; }                 break; }                 break; }                 break; }                 break; }                 break; }                 break; }                 break; }                 break; }                 break; }                 break; }                 break; }                 break; }                 break; }                 break; }                 break; }                 break; }                 break; }                 break; }                 break; }                 break; }                 break; }                 break; }                 break; }                 break; }                 break; }                 break; }                 break; }                 break; }                 break; }                 break; }                 break; }                 break; }                 break; }                 break; }                 break; }                 break; }                 break; }                 break; }                 break; }                 break; }                 break; }                 break; }                 break; }                 break; }                 break; }                 break; }                 break; }                 break; }                 break; }                 break; }                 break; }                 break; }                 break; }                 break; }                 break; }                 break; }                 break; }                 break; }                 break; }                 break; }                 break; }                 break; }                 break; }                 break; }                 break; }                 break; }                 break; }                 break; }                 break; }                 break; }                 break; }                 break; }                 break; }                 break; }                 break; }                 break; }                 break; }                 break; }                 break; }                 break; 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.product.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.product.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.product.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.product.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
     }      function handler(e) {         if (e.preventDefault) {             e.preventDefault();         }          if (e.stopPropagation) {             e.stopPropagation();         }          if (e.currentTarget) {             e.currentTarget.removeEventListener('click', handler);         }     }      function handler(e) {         if (e.preventDefault) {             e.preventDefault();         }          if (e.stopPropagation) {             e.stopPropagation();         }          if (e.currentTarget) {             e.currentTarget.removeEventListener('click', handler);         }     }      function handler(e) {         if (e.preventDefault) {             e.preventDefault();         }          if (e.stopPropagation) {             e.stopPropagation();         }          if (e.currentTarget) {             e.currentTarget.removeEventListener('click', handler);         }     }      function handler(e) {         if (e.preventDefault) {             e.preventDefault();         }          if (e.stopPropagation) {             e.stopPropagation();         }          if (e.currentTarget) {             e.currentTarget.removeEventListener('click', handler);         }     }      function handler(e) {         if (e.preventDefault) {             e.preventDefault();         }          if (e.stopPropagation) {             e.stopPropagation();         }          if (e.currentTarget) {             e.currentTarget.removeEventListener('click', handler);         }     }      function handler(e) {         if (e.preventDefault) {             e.preventDefault();         }          if (e.stopPropagation) {             e.stopPropagation();         }          if (e.currentTarget) {             e.currentTarget.removeEventListener('click', handler);         }     }      function handler(e) {         if (e.preventDefault) {            
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
  case GET_CURRENT_USER_FAILURE:         let newLoginValue = isNewLoginValue         isNewLoginValue = false   case GET_CURRENT_USER_CANCELLED:         let newLoginValue = isNewLoginValue         isNewLoginValue = false   case GET_CURRENT_USER_ERROR:         let newLoginValue = isNewLoginValue         isNewLoginValue = false   case GET_CURRENT_USER_LOGGED_IN:         let newLoginValue = isNewLoginValue         isNewLoginValue = false   case GET_CURRENT_USER_LOGGED_OUT:         let newLoginValue = isNewLoginValue         isNewLoginValue = false   case GET_CURRENT_USER_LOGGED_IN_SUCCESS:  let newLoginValue = isNewLoginValue         isNewLoginValue = false   case GET_CURRENT_USER_LOGGED_OUT_SUCCESS:  let newLoginValue = isNewLoginValue         isNewLoginValue = false   case GET_CURRENT_USER_LOGGED_IN_FAILURE:  let newLoginValue = isNewLoginValue         isNewLoginValue = false   case GET_CURRENT_USER_LOGGED_OUT_FAILURE:  let newLoginValue = isNewLoginValue         isNewLoginValue = false   case GET_CURRENT_USER_LOGGED_IN_CANCELLED:  let newLoginValue = isNewLoginValue         isNewLoginValue = false   case GET_CURRENT_USER_LOGGED_OUT_CANCELLED:  let newLoginValue = isNewLoginValue         isNewLoginValue = false   case GET_CURRENT_USER_LOGGED_IN_ERROR:  let newLoginValue = isNewLoginValue         isNewLoginValue = false   case GET_CURRENT_USER_LOGGED_OUT_ERROR:  let newLoginValue = isNewLoginValue         isNewLoginValue = false   case GET_CURRENT_USER_LOGGED_IN_LOGGED_OUT_SUCCESS:  let newLoginValue = isNewLoginValue         isNewLoginValue = false   case GET_CURRENT_USER_LOGGED_OUT_LOGGED_IN_SUCCESS:  let newLoginValue = isNewLoginValue         isNewLoginValue = false   case GET_CURRENT_USER_LOGGED_OUT_LOGGED_IN_FAILURE:  let newLoginValue = isNewLoginValue         isNewLoginValue = false   case GET_CURRENT_USER_LOGGED_OUT_LOGGED_
<?php  /*  * This file is part of the Symfony package.  *  * (c) Fabien Potencier <fabien@symfony.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace Symfony\Component\DependencyInjection\Compiler;  use Symfony\Component\DependencyInjection\ContainerBuilder; use Symfony\Component\DependencyInjection\Definition; use Symfony\Component\DependencyInjection\Reference; use Symfony\Component\DependencyInjection\ContainerInterface; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\InvalidReferenceException; use Symfony\Component\DependencyInjection\Exception\RuntimeException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\RuntimeException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\RuntimeException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use
<?php  /*  * This file is part of PHPExifTool.  *  * (c) 2012 Romain Neutron <imprec@gmail.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace PHPExiftool\Driver\Tag\DICOM;  use JMS\Serializer\Annotation\ExclusionPolicy; use PHPExiftool\Driver\AbstractTag;  /**  * @ExclusionPolicy("all")  */ class Color extends AbstractTag {      protected $Id = '0018,0018';      protected $Name = 'Color';      protected $FullName = 'DICOM::Main';      protected $GroupName = 'DICOM';      protected $g0 = 'DICOM';      protected $g1 = 'DICOM';      protected $g2 = 'Image';      protected $Type = '?';      protected $Writable = false;      protected $Description = 'Color'; } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */ package org.apache.beam.runners.core;  import static org.junit.Assert.assertEquals; import static org.junit.Assert.assertFalse; import static org.junit.Assert.assertNotNull; import static org.junit.Assert.assertNull; import static org.junit.Assert.assertTrue; import static org.junit.Assert.fail;  import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Iterables; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import com.google.common.util.concurrent.Futures; import com.google.common.util.concurrent.ListenableFuture; import com.google.common.util.concurrent.ListeningExecutorService; import com.google.common.util.concurrent.MoreExecutors; import com.google.common.util.concurrent.ThreadFactoryBuilder; import com.google.common.util.concurrent.ThreadFactoryProvider; import com.google.common.util.concurrent.TimeUnit; import com.google.common.util.concurrent.
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */ package org.apache.beam.runners.core;  import static org.junit.Assert.assertEquals; import static org.junit.Assert.assertFalse; import static org.junit.Assert.assertNotNull; import static org.junit.Assert.assertNull; import static org.junit.Assert.assertTrue; import static org.junit.Assert.fail;  import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Iterables; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import com.google.common.util.concurrent.Futures; import com.google.common.util.concurrent.ListenableFuture; import com.google.common.util.concurrent.ListeningExecutorService; import com.google.common.util.concurrent.MoreExecutors; import com.google.common.util.concurrent.ThreadFactoryBuilder; import com.google.common.util.concurrent.ThreadFactory; import com.google.common.util.concurrent.TimeUnit; import com.google.common.util.concurrent.TimeoutException
 import { View } from 'backbone'; import { Router } from 'react-router-dom';  export default View.extend({   tagName: 'div',    initialize: function() {     this.listenTo(this.model, 'change');     this.listenTo(this.model, 'reset');     this.listenTo(this.model, 'destroy');   },    render: function() {     this.$el.html(this.template());     return this;   },    template: function() {     return `       <div class="container">         <div class="row">           <div class="col-md-12">             <div class="panel panel-default">               <div class="panel-heading">                 <h3 class="panel-title">                   <a href="#">                     <i class="fa fa-home"></i>                   </a>                 </h3>               </div>               <div class="panel-body">                 <div class="row">                   <div class="col-md-12">                     <div class="panel-body">                       <div class="row">                         <div class="col-md-12">                           <div class="panel-body">                             <div class="row">                               <div class="col-md-12">                                 <div class="col-md-12">                                   <div class="panel-body">                                     <div class="row">                                       <div class="col-md-12">                                         <div class="col-md-12">                                           <div class="panel-body">                                             <div class="row">                                               <div class="col-md-12">                                                 <div class="col-md-12">                                                   <div class="panel-body">                                                     <div class="row">                                                       <div class="col-md-12">                                                         <div class="col-md-12">                                                           <div class="panel-body">                                                             <div class="row">                                                               <div class="col-md-12">                                                               <div class="panel-body
 }
 for(var h in jsondata.headers) {    var heading = jsondata.headers[h];    ret += textdelim + heading + textdelim +  delim;   }  for(var h in jsondata.data) {    var data = jsondata.data[h];    ret += textdelim + data + textdelim +  delim;   }  for(var h in jsondata.headers) {    var heading = jsondata.headers[h];    ret += textdelim + heading + textdelim +  delim;   }  for(var h in jsondata.data) {    var data = jsondata.data[h];    ret += textdelim + data + textdelim +  delim;   }  for(var h in jsondata.headers) {    var heading = jsondata.headers[h];    ret += textdelim + heading + textdelim +  delim;   }  for(var h in jsondata.data) {    var data = jsondata.data[h];    ret += textdelim + data + textdelim +  delim;   }  for(var h in jsondata.headers) {    var heading = jsondata.headers[h];    ret += textdelim + heading + textdelim +  delim;   }  for(var h in jsondata.data) {    var data = jsondata.data[h];    ret += textdelim + data + textdelim +  delim;   }  for(var h in jsondata.headers) {    var heading = jsondata.headers[h];    ret += textdelim + heading + textdelim +  delim;   }  for(var h in jsondata.data) {    var data = jsondata.data[h];    ret += textdelim + data + textdelim +  delim;   }  for(var h in jsondata.headers) {    var heading = jsondata.headers[h];    ret += textdelim + heading + textdelim +  delim;   }  for(var h in jsondata.data) {    var data = jsondata.data[h];    ret += textdelim + data + textdelim +  delim;   }  for(var h in jsondata.headers) {    var heading = jsondata.headers[h];    ret += textdelim + heading +
    for (var i in globalMatch) {         matchArray[i] = globalMatch[i];     }      return matchArray; };                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            
﻿using System.Reflection; using System.Runtime.CompilerServices; using System.Runtime.InteropServices;  // General Information about an assembly is controlled through the following  // set of attributes. Change these attribute values to modify the information // associated with an assembly. [assembly: AssemblyTitle("01.SumOfTwoNumbers")] [assembly: AssemblyDescription("")] [assembly: AssemblyConfiguration("")] [assembly: AssemblyCompany("")] [assembly: AssemblyProduct("01.SumOfTwoNumbers")] [assembly: AssemblyCopyright("Copyright ©  2015")] [assembly: AssemblyTrademark("")] [assembly: AssemblyCulture("")]  // Setting ComVisible to false makes the types in this assembly not visible  // to COM components.  If you need to access a type in this assembly from  // COM, set the ComVisible attribute to true on that type. [assembly: ComVisible(false)]  // The following GUID is for the ID of the typelib if this project is exposed to COM [assembly: Guid("8e8e8e8e8-8e8e-4e8e-8e8e8e8e8")]  // Version information for an assembly consists of the following four values: // //      Major Version //      Minor Version  //      Build Number //      Revision // // You can specify all the values or you can default the Build and Revision Numbers  // by using the '*' as shown below: // [assembly: AssemblyVersion("1.0.*")] [assembly: AssemblyVersion("1.0.0.0")] [assembly: AssemblyFileVersion("1.0.0.0")] 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name')             ->add('description')         ;     }      /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
 const queryDb = new QueryDBKlass(coreConstants.queryDb) const modelBase = new ModelBaseKlass(coreConstants.modelBase)  module.exports = {   queryDb: queryDb,   modelBase: modelBase,   coreConstants: coreConstants } 
 let tags = []   if (session) tags = tags.filter(_ => thisGroupMap[_.id].data.includes(thisid))  for (let i = 0; i < tags.length; i++) {   exists.push(tags[i].id) }  for (let i = 0; i < exists.length; i++) {   if (exists[i]) {     console.log(exists[i])   } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializer; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializerProvider; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name')             ->add('description')         ;     }      /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name')             ->add('description')         ;     }      /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product';     } } 
 		if (this.username.length > 0) { 			this.username = this.username.substring(0, this.username.length - 1); 		} else { 			this.username = ""; 		} 	}, 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 
<?php /**  * Zend Framework  *  * LICENSE  *  * This source file is subject to the new BSD license that is bundled  * with this package in the file LICENSE.txt.  * It is also available through the world-wide-web at this URL:  * http://framework.zend.com/license/new-bsd  * If you did not receive a copy of the license and are unable to  * obtain it through the world-wide-web, please send an email  * to license@zend.com so we can send you a copy immediately.  *  * @category   Zend  * @package    Zend_Gdata  * @subpackage Gdata  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  * @version    $Id$  */  /**  * @see Zend_Gdata_Extension  */ require_once 'Zend/Gdata/Extension.php';  /**  * Represents the gdata:feed element  *  * @category   Zend  * @package    Zend_Gdata  * @subpackage Gdata  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  */ class Zend_Gdata_Gdata_Feed extends Zend_Gdata_Extension {      protected $_rootElement = 'feed';     protected $_rootNamespace = 'gdata';      public function __construct($text = null)     {         $this->registerAllNamespaces(Zend_Gdata_Gdata::$namespaces);         parent::__construct();         $this->_text = $text;     }      /**      * Gets the text value for this element.      *      * @return string The text value for this element.      */     public function getText()     {         return $this->_text;     }      /**      * Sets the text value for this element.      *     
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */ package org.apache.beam.runners.core;  import static org.junit.Assert.assertEquals; import static org.junit.Assert.assertFalse; import static org.junit.Assert.assertNotNull; import static org.junit.Assert.assertNull; import static org.junit.Assert.assertTrue; import static org.junit.Assert.fail;  import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Iterables; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import com.google.common.util.concurrent.Futures; import com.google.common.util.concurrent.ListenableFuture; import com.google.common.util.concurrent.ListeningExecutorService; import com.google.common.util.concurrent.MoreExecutors; import com.google.common.util.concurrent.ThreadFactoryBuilder; import com.google.common.util.concurrent.ThreadFactory; import com.google.common.util.concurrent.TimeUnit; import com.google.common.util.concurrent.TimeoutException
		this.agentService = ContainerJS.Inject(this.agentService); 		this.agentService = ContainerJS.Inject(this.agentService); 		this.agentService = ContainerJS.Inject(this.agentService); 		this.agentService = ContainerJS.Inject(this.agentService); 		this.agentService = ContainerJS.Inject(this.agentService); 		this.agentService = ContainerJS.Inject(this.agentService); 		this.agentService = ContainerJS.Inject(this.agentService); 		this.agentService = ContainerJS.Inject(this.agentService); 		this.agentService = ContainerJS.Inject(this.agentService); 		this.agentService = ContainerJS.Inject(this.agentService); 		this.agentService = ContainerJS.Inject(this.agentService); 		this.agentService = ContainerJS.Inject(this.agentService); 		this.agentService = ContainerJS.Inject(this.agentService); 		this.agentService = ContainerJS.Inject(this.agentService); 		this.agentService = ContainerJS.Inject(this.agentService); 		this.agentService = ContainerJS.Inject(this.agentService); 		this.agentService = ContainerJS.Inject(this.agentService); 		this.agentService = ContainerJS.Inject(this.agentService); 		this.agentService = ContainerJS.Inject(this.agentService); 		this.agentService = ContainerJS.Inject(this.agentService); 		this.agentService = ContainerJS.Inject(this.agentService); 		this.agentService = ContainerJS.Inject(this.agentService); 		this.agentService = ContainerJS.Inject(this.agentService); 		this.agentService = ContainerJS.Inject(this.agentService); 		this.agentService = ContainerJS.Inject(this.agentService); 		this.agentService = ContainerJS.Inject(this.agentService); 		this.agentService = ContainerJS.Inject(this.agentService); 		this.agentService = ContainerJS.Inject(this.agentService); 		this.agentService
const app = stashedSpecs.app;       app.name = props.name;       app.name = props.name;       app.name = props.name;       app.name = props.name;       app.name = props.name;       app.name = props.name;       app.name = props.name;       app.name = props.name;       app.name = props.name;       app.name = props.name;       app.name = props.name;       app.name = props.name;       app.name = props.name;       app.name = props.name;       app.name = props.name;       app.name = props.name;       app.name = props.name;       app.name = props.name;       app.name = props.name;       app.name = props.name;       app.name = props.name;       app.name = props.name;       app.name = props.name;       app.name = props.name;       app.name = props.name;       app.name = props.name;       app.name = props.name;       app.name = props.name;       app.name = props.name;       app.name = props.name;       app.name = props.name;       app.name = props.name;       app.name = props.name;       app.name = props.name;       app.name = props.name;       app.name = props.name;       app.name = props.name;       app.name = props.name;       app.name = props.name;       app.name = props.name;       app.name = props.name;       app.name = props.name;       app.name = props.name;       app.name = props.name;       app.name = props.name;       app.name = props.name;       app.name = props.name;       app.name = props.name;       app.name = props.name;       app.name = props.name;       app.name = props.name;       app.name = props.name;       app.name = props.name;       app.name = props.name;       app.name = props.name;       app.name = props.
 newValue = this[tail].setIn(tail, value);  this[tail].setIn(tail, newValue);  this[tail].setIn(tail, newValue);  this[tail].setIn(tail, newValue);  this[tail].setIn(tail, newValue);  this[tail].setIn(tail, newValue);  this[tail].setIn(tail, newValue);  this[tail].setIn(tail, newValue);  this[tail].setIn(tail, newValue);  this[tail].setIn(tail, newValue);  this[tail].setIn(tail, newValue);  this[tail].setIn(tail, newValue);  this[tail].setIn(tail, newValue);  this[tail].setIn(tail, newValue);  this[tail].setIn(tail, newValue);  this[tail].setIn(tail, newValue);  this[tail].setIn(tail, newValue);  this[tail].setIn(tail, newValue);  this[tail].setIn(tail, newValue);  this[tail].setIn(tail, newValue);  this[tail].setIn(tail, newValue);  this[tail].setIn(tail, newValue);  this[tail].setIn(tail, newValue);  this[tail].setIn(tail, newValue);  this[tail].setIn(tail, newValue);  this[tail].setIn(tail, newValue);  this[tail].setIn(tail, newValue);  this[tail].setIn(tail, newValue);  this[tail].setIn(tail, newValue);  this[tail].setIn(tail, newValue);  this[tail].setIn(tail, newValue);  this[tail].setIn(tail, newValue);  this[tail].setIn(tail, newValue);  this[tail].setIn(tail, newValue);  this[tail].setIn(tail, newValue);  this[tail].setIn(tail, newValue);  this[tail].setIn(tail, newValue);  this[tail].setIn(tail, newValue);  this[tail].setIn(tail, newValue);  
<?php /**  * Zend Framework  *  * LICENSE  *  * This source file is subject to the new BSD license that is bundled  * with this package in the file LICENSE.txt.  * It is also available through the world-wide-web at this URL:  * http://framework.zend.com/license/new-bsd  * If you did not receive a copy of the license and are unable to  * obtain it through the world-wide-web, please send an email  * to license@zend.com so we can send you a copy immediately.  *  * @category   Zend  * @package    Zend_View  * @subpackage Helper  * @copyright  Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  * @version    $Id$  */  /**  * @see Zend_View_Helper_Abstract  */ require_once 'Zend/View/Helper/Abstract.php';  /**  * @see Zend_View_Helper_File  */ require_once 'Zend/View/Helper/File.php';  /**  * @see Zend_View_Helper_Form  */ require_once 'Zend/View/Helper/Form.php';  /**  * @category   Zend  * @package    Zend_View  * @subpackage Helper  * @copyright  Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  */ class Zend_View_Helper_File extends Zend_View_Helper_Abstract {     /**      * @var Zend_View_Helper_Form      */     protected $_form;      /**      * @var Zend_View_Helper_Form_Element      */     protected $_formElement;      /**      * @var Zend_View_Helper_Form_Element_Collection      */     protected $_formElementCollection;      /**      * @var Zend_View_Helper
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */ package org.apache.beam.runners.core;  import static org.junit.Assert.assertEquals; import static org.junit.Assert.assertFalse; import static org.junit.Assert.assertNotNull; import static org.junit.Assert.assertNull; import static org.junit.Assert.assertTrue; import static org.junit.Assert.fail;  import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Iterables; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import com.google.common.util.concurrent.Futures; import com.google.common.util.concurrent.ListenableFuture; import com.google.common.util.concurrent.ListeningExecutorService; import com.google.common.util.concurrent.MoreExecutors; import com.google.common.util.concurrent.ThreadFactoryBuilder; import com.google.common.util.concurrent.ThreadFactory; import com.google.common.util.concurrent.TimeUnit; import com.google.common.util.concurrent.TimeoutException
if (params.viz.resize) {       console.log('here') if (params.viz.resize) {       console.log('here') if (params.viz.resize) {       console.log('here') if (params.viz.resize) {       console.log('here') if (params.viz.resize) {       console.log('here') if (params.viz.resize) {       console.log('here') if (params.viz.resize) {       console.log('here') if (params.viz.resize) {       console.log('here') if (params.viz.resize) {       console.log('here') if (params.viz.resize) {       console.log('here') if (params.viz.resize) {       console.log('here') if (params.viz.resize) {       console.log('here') if (params.viz.resize) {       console.log('here') if (params.viz.resize) {       console.log('here') if (params.viz.resize) {       console.log('here') if (params.viz.resize) {       console.log('here') if (params.viz.resize) {       console.log('here') if (params.viz.resize) {       console.log('here') if (params.viz.resize) {       console.log('here') if (params.viz.resize) {       console.log('here') if (params.viz.resize) {       console.log('here') if (params.viz.resize) {       console.log('here') if (params.viz.resize) {       console.log('here') if (params.viz.resize) {       console.log('here') if (params.viz.resize) {       console.log('here') if (params.viz.resize) {       console.log('here') if (params.viz.resize) {       console.log('here') if (params.viz.resize) {       console.log('here') if (params.viz.resize) {       console.log('here') if (params.viz.resize) {       console.log('here') if
 from './SparklinesSpots'; import SparklinesReferenceLine from './SparklinesReferenceLine'; import DataProcessor from './DataProcessor';  export default {   SparklinesSpots: SparklinesSpots,   SparklinesReferenceLine: SparklinesReferenceLine,   DataProcessor: DataProcessor, }; 
<?php /**  * Zend Framework  *  * LICENSE  *  * This source file is subject to the new BSD license that is bundled  * with this package in the file LICENSE.txt.  * It is also available through the world-wide-web at this URL:  * http://framework.zend.com/license/new-bsd  * If you did not receive a copy of the license and are unable to  * obtain it through the world-wide-web, please send an email  * to license@zend.com so we can send you a copy immediately.  *  * @category   Zend  * @package    Zend_Service  * @subpackage DeveloperGarden  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  * @version    $Id$  */  /**  * @see Zend_Service_DeveloperGarden_Exception  */ require_once 'Zend/Service/DeveloperGarden/Exception.php';  /**  * @category   Zend  * @package    Zend_Service  * @subpackage DeveloperGarden  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  */ class Zend_Service_DeveloperGarden_Exception extends Zend_Service_DeveloperGarden_Exception { } 
 const mqttClient = require('mqtt') mqtt.connect(process.env.MQTT_HOST, process.env.MQTT_PORT) const mqttClient = mqtt.connect(process.env.MQTT_HOST, process.env.MQTT_PORT) const mqttClient = mqtt.connect(process.env.MQTT_HOST, process.env.MQTT_PORT) const mqttClient = mqtt.connect(process.env.MQTT_HOST, process.env.MQTT_PORT) const mqttClient = mqtt.connect(process.env.MQTT_HOST, process.env.MQTT_PORT) const mqttClient = mqtt.connect(process.env.MQTT_HOST, process.env.MQTT_PORT) const mqttClient = mqtt.connect(process.env.MQTT_HOST, process.env.MQTT_PORT) const mqttClient = mqtt.connect(process.env.MQTT_HOST, process.env.MQTT_PORT) const mqttClient = mqtt.connect(process.env.MQTT_HOST, process.env.MQTT_PORT) const mqttClient = mqtt.connect(process.env.MQTT_HOST, process.env.MQTT_PORT) const mqttClient = mqtt.connect(process.env.MQTT_HOST, process.env.MQTT_PORT) const mqttClient = mqtt.connect(process.env.MQTT_HOST, process.env.MQTT_PORT) const mqttClient = mqtt.connect(process.env.MQTT_HOST, process.env.MQTT_PORT) const mqttClient = mqtt.connect(process.env.MQTT_HOST, process.env.MQTT_PORT) const mqttClient = mqtt.connect(process.env.MQTT_HOST, process.env.MQTT_PORT) const mqttClient = mqtt.connect(process.env.MQTT_HOST, process.env.MQTT_PORT) const mqttClient = mqtt.connect
    case this.OPERATORS.dateOperatorInTheLast:     case this.OPERATORS.dateOperatorInTheLast:     case this.OPERATORS.dateOperatorInTheLast:     case this.OPERATORS.dateOperatorInTheLast:     case this.OPERATORS.dateOperatorInTheLast:     case this.OPERATORS.dateOperatorInTheLast:     case this.OPERATORS.dateOperatorInTheLast:     case this.OPERATORS.dateOperatorInTheLast:     case this.OPERATORS.dateOperatorInTheLast:     case this.OPERATORS.dateOperatorInTheLast:     case this.OPERATORS.dateOperatorInTheLast:     case this.OPERATORS.dateOperatorInTheLast:     case this.OPERATORS.dateOperatorInTheLast:     case this.OPERATORS.dateOperatorInTheLast:     case this.OPERATORS.dateOperatorInTheLast:     case this.OPERATORS.dateOperatorInTheLast:     case this.OPERATORS.dateOperatorInTheLast:     case this.OPERATORS.dateOperatorInTheLast:     case this.OPERATORS.dateOperatorInTheLast:     case this.OPERATORS.dateOperatorInTheLast:     case this.OPERATORS.dateOperatorInTheLast:     case this.OPERATORS.dateOperatorInTheLast:     case this.OPERATORS.dateOperatorInTheLast:     case this.OPERATORS.dateOperatorInTheLast:     case this.OPERATORS.dateOperatorInTheLast:     case this.OPERATORS.dateOperatorInTheLast:     case this.OPERATORS.dateOperatorInTheLast:     case this.OPERATORS.dateOperatorInTheLast:     case this.OPERATORS.dateOperatorInTheLast:     case this.OPERATORS.dateOperatorInTheLast:     case this.OPERATORS.dateOperatorInTheLast:     case this.OPERATORS.dateOperatorInTheLast:     case this.OPERATORS.dateOperatorInTheLast:     case this.OPERATORS.dateOperatorInTheLast:     case this.OPERATORS.dateOperatorInTheLast:     case this.OPERATORS.dateOperatorInTheLast:     case this.OPERATORS.
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.product.name',                 'required' => false,             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.product.description',                 'required' => false,             ))         ;     }      /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
<?php /**  * Zend Framework  *  * LICENSE  *  * This source file is subject to the new BSD license that is bundled  * with this package in the file LICENSE.txt.  * It is also available through the world-wide-web at this URL:  * http://framework.zend.com/license/new-bsd  * If you did not receive a copy of the license and are unable to  * obtain it through the world-wide-web, please send an email  * to license@zend.com so we can send you a copy immediately.  *  * @category   Zend  * @package    Zend_Gdata  * @subpackage Gdata  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  * @version    $Id$  */  /**  * @see Zend_Gdata_Extension  */ require_once 'Zend/Gdata/Extension.php';  /**  * Represents the gdata:feed element  *  * @category   Zend  * @package    Zend_Gdata  * @subpackage Gdata  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  */ class Zend_Gdata_Gdata_Feed extends Zend_Gdata_Extension {      protected $_rootElement = 'feed';     protected $_rootNamespace = 'gdata';      /**      * Constructs a new Zend_Gdata_Gdata_Feed object.      *      * @param DOMElement $element (optional) DOMElement from which this      *          object should be constructed.      */     public function __construct($element = null)     {         $this->registerAllNamespaces(Zend_Gdata_Gdata::$namespaces);         parent::__construct($element);     }  } 
<?php  /*  * This file is part of the Symfony package.  *  * (c) Fabien Potencier <fabien@symfony.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace Symfony\Bundle\FrameworkBundle\DependencyInjection;  use Symfony\Component\Config\Definition\Builder\TreeBuilder; use Symfony\Component\Config\Definition\ConfigurationInterface;  /**  * This is the class that validates and merges configuration from your app/config files  *  * To learn more see {@link http://symfony.com/doc/current/cookbook/bundles/extension.html#cookbook-bundles-extension-config-class}  */ class Configuration implements ConfigurationInterface {     /**      * {@inheritdoc}      */     public function getConfigTreeBuilder()     {         $treeBuilder = new TreeBuilder();         $rootNode = $treeBuilder->root('symfony');          // Here you should define the parameters that are allowed to         // configure your bundle. See the documentation linked above for         // more information on that topic.          return $treeBuilder;     } } 
// Copyright (c) 2012 The Chromium Authors. All rights reserved. // Use of this source code is governed by a BSD-style license that can be // found in the LICENSE file.  #ifndef CHROME_BROWSER_UI_WEBUI_CHROMEOS_LOGIN_SCREEN_H_ #define CHROME_BROWSER_UI_WEBUI_CHROMEOS_LOGIN_SCREEN_H_  #include <string> #include <vector>  #include "base/basictypes.h" #include "base/compiler_specific.h" #include "base/memory/scoped_ptr.h" #include "base/memory/weak_ptr.h" #include "base/observer_list.h" #include "base/observer_list_observer.h" #include "base/time/time.h" #include "chrome/browser/profiles/profile.h" #include "chrome/browser/ui/browser.h" #include "chrome/browser/ui/browser_finder.h" #include "chrome/browser/ui/browser_list.h" #include "chrome/browser/ui/browser_window.h" #include "chrome/browser/ui/tabs/tab_strip_model.h" #include "content/public/browser/notification_observer.h" #include "content/public/browser/notification_registrar.h" #include "content/public/browser/notification_service.h" #include "content/public/browser/notification_source.h" #include "content/public/browser/notification_types.h" #include "content/public/browser/web_contents.h" #include "content/public/browser/web_contents_observer.h" #include "content/public/browser/web_ui.h" #include "content/public/browser/web_ui_data_source.h" #include "grit/generated_resources.h" #include "grit/theme_resources.h" #include "ui/base/l10n/l10n_util.h" 
<?php  /*  * This file is part of the Symfony package.  *  * (c) Fabien Potencier <fabien@symfony.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace Symfony\Component\Form\Extension\Core\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Fabien Potencier <fabien@symfony.com>  */ class TextType extends AbstractType {     /**      * {@inheritdoc}      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('text', 'text')         ;     }      /**      * {@inheritdoc}      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Symfony\Component\Form\Extension\Core\Type\TextType'         ));     }      /**      * {@inheritdoc}      */     public function getName()     {         return 'text';     } } 
if (typeof rows === "undefined") rows = self._rows;         var data = self._data;         if (typeof data === "undefined") data = self._data;         if (typeof rows === "undefined") rows = self._rows;         if (typeof rows === "undefined") rows = self._rows;         if (typeof rows === "undefined") rows = self._rows;         if (typeof rows === "undefined") rows = self._rows;         if (typeof rows === "undefined") rows = self._rows;         if (typeof rows === "undefined") rows = self._rows;         if (typeof rows === "undefined") rows = self._rows;         if (typeof rows === "undefined") rows = self._rows;         if (typeof rows === "undefined") rows = self._rows;         if (typeof rows === "undefined") rows = self._rows;         if (typeof rows === "undefined") rows = self._rows;         if (typeof rows === "undefined") rows = self._rows;         if (typeof rows === "undefined") rows = self._rows;         if (typeof rows === "undefined") rows = self._rows;         if (typeof rows === "undefined") rows = self._rows;         if (typeof rows === "undefined") rows = self._rows;         if (typeof rows === "undefined") rows = self._rows;         if (typeof rows === "undefined") rows = self._rows;         if (typeof rows === "undefined") rows = self._rows;         if (typeof rows === "undefined") rows = self._rows;         if (typeof rows === "undefined") rows = self._rows;         if (typeof rows === "undefined") rows = self._rows;         if (typeof rows === "undefined") rows = self._rows;         if (typeof rows === "undefined") rows = self._rows;         if (typeof rows === "undefined") rows = self._rows;         if (typeof rows === "undefined") rows = self._rows;         if (typeof rows === "undefined") rows = self._rows;         if (typeof rows === "undefined") rows = self._rows;         if (typeof rows === "undefined") rows = self._rows;         if (typeof rows === "undefined") rows = self._rows;         if (typeof rows === "undefined") rows = self._rows;         if (typeof rows === "undefined")
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.functions.IFunctionDescriptorProvider; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.data.accessors.ITupleReference; import org.apache.hyracks.dataflow.common.data
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.functions.IFunctionDescriptorProvider; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.data.accessors.ITupleReference; import org.apache.hyracks.dataflow.common.data
  if (path==null) throw "putDir: Null path";          if (!isDir(path)) throw "Not a directory : "+path;          if (media==MM_RAM) {     if (path==null) throw "putDir: Null path";          if (!isDir(path)) throw "Not a directory : "+path;          if (media==MM_RAM) {       if (path==null) throw "putDir: Null path";          if (!isDir(path)) throw "Not a directory : "+path;          if (media==MM_RAM) {         if (path==null) throw "putDir: Null path";          if (!isDir(path)) throw "Not a directory : "+path;          if (media==MM_RAM) {           if (path==null) throw "putDir: Null path";          if (!isDir(path)) throw "Not a directory : "+path;          if (media==MM_RAM) {             if (path==null) throw "putDir: Null path";          if (!isDir(path)) throw "Not a directory : "+path;          if (media==MM_RAM) {               if (path==null) throw "putDir: Null path";          if (!isDir(path)) throw "Not a directory : "+path;          if (media==MM_RAM) {                 if (path==null) throw "putDir: Null path";          if (!isDir(path)) throw "Not a directory : "+path;          if (media==MM_RAM) {                   if (path==null) throw "putDir: Null path";          if (!isDir(path)) throw "Not a directory : "+path;          if (media==MM_RAM) {                     if (path==null) throw "putDir: Null path";          if (!isDir(path)) throw "Not a directory : "+path;          if (media==MM_RAM) {                       if (path==null) throw "putDir: Null path";          if (!isDir(path)) throw "Not a directory : "+path;          if (media==MM_RAM) {                         if (path==null) throw "putDir: Null path";          if (!isDir(path)) throw "Not a
     }); });  console.log("Dash channel closed.");                 broadcast.call(this, {                    event: "close" });  console.log("Dash channel closed.");                 broadcast.call(this, {                    event: "close" });  console.log("Dash channel closed.");                 broadcast.call(this, {                    event: "close" });  console.log("Dash channel closed.");                 broadcast.call(this, {                    event: "close" });  console.log("Dash channel closed.");                 broadcast.call(this, {                    event: "close" });  console.log("Dash channel closed.");                 broadcast.call(this, {                    event: "close" });  console.log("Dash channel closed.");                 broadcast.call(this, {                    event: "close" });  console.log("Dash channel closed.");                 broadcast.call(this, {                    event: "close" });  console.log("Dash channel closed.");                 broadcast.call(this, {                    event: "close" });  console.log("Dash channel closed.");                 broadcast.call(this, {                    event: "close" });  console.log("Dash channel closed.");                 broadcast.call(this, {                    event: "close" });  console.log("Dash channel closed.");                 broadcast.call(this, {                    event: "close" });  console.log("Dash channel closed.");                 broadcast.call(this, {                    event: "close" });  console.log("Dash channel closed.");                 broadcast.call(this, {                    event: "close" });  console.log("Dash channel closed.");                 broadcast.call(this, {                    event: "close" });  console.log("Dash channel closed.");                 broadcast.call(this, {                    event: "close" });  console.log("Dash channel closed.");                 broadcast.call(this, {                    event: "close" });  console.log("Dash channel closed.");                 broadcast.call(this, {                    event: "close" });  console.log("Dash channel closed.");                 broadcast.call(this, {
<?php /**  * Zend Framework  *  * LICENSE  *  * This source file is subject to the new BSD license that is bundled  * with this package in the file LICENSE.txt.  * It is also available through the world-wide-web at this URL:  * http://framework.zend.com/license/new-bsd  * If you did not receive a copy of the license and are unable to  * obtain it through the world-wide-web, please send an email  * to license@zend.com so we can send you a copy immediately.  *  * @category   Zend  * @package    Zend_Gdata  * @subpackage Gdata  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  * @version    $Id$  */  /**  * @see Zend_Gdata_Extension  */ require_once 'Zend/Gdata/Extension.php';  /**  * Represents the gdata:feed element  *  * @category   Zend  * @package    Zend_Gdata  * @subpackage Gdata  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  */ class Zend_Gdata_Gdata_Feed extends Zend_Gdata_Extension {      protected $_rootElement = 'feed';     protected $_rootNamespace = 'gdata';      /**      * Constructs a new Zend_Gdata_Gdata_Feed object.      *      * @param DOMElement $element (optional) DOMElement from which this      *          object should be constructed.      */     public function __construct($element = null)     {         $this->registerAllNamespaces(Zend_Gdata_Gdata::$namespaces);         parent::__construct($element);     }  } 
 var $item = this.getItemToTheRight(anchor);                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 
     };      /**      * @param {Array} arr      * @return {Array}      */     function first(arr) {         return arr[0];     };      /**      * @param {Array} arr      * @return {Array}      */     function last2(arr) {         return arr[arr.length - 1];     };      /**      * @param {Array} arr      * @return {Array}      */     function last3(arr) {         return arr[arr.length - 2];     };      /**      * @param {Array} arr      * @return {Array}      */     function last4(arr) {         return arr[arr.length - 3];     };      /**      * @param {Array} arr      * @return {Array}      */     function last5(arr) {         return arr[arr.length - 4];     };      /**      * @param {Array} arr      * @return {Array}      */     function last6(arr) {         return arr[arr.length - 5];     };      /**      * @param {Array} arr      * @return {Array}      */     function last7(arr) {         return arr[arr.length - 6];     };      /**      * @param {Array} arr      * @return {Array}      */     function last8(arr) {         return arr[arr.length - 7];     };      /**      * @param {Array} arr      * @return {Array}      */     function last9(arr) {         return arr[arr.length - 8];     };      /**      * @param {Array} arr      * @return {Array}      */     function last10(arr) {         return arr[arr.length - 9];     };      /**      * @param {Array} arr      * @return {Array}      */     function last11(arr
<?php  /*  * This file is part of the Symfony package.  *  * (c) Fabien Potencier <fabien@symfony.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace Symfony\Component\Form\Extension\Core\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\Form\FormEvent; use Symfony\Component\Form\FormEvents; use Symfony\Component\Form\FormInterface; use Symfony\Component\Form\FormView; use Symfony\Component\OptionsResolver\OptionsResolver; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Fabien Potencier <fabien@symfony.com>  */ class SubmitType extends AbstractType {     /**      * {@inheritdoc}      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('submit', 'submit', array('label' => 'Submit'))         ;     }      /**      * {@inheritdoc}      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Symfony\Component\Form\Extension\Core\Type\SubmitType'         ));     }      /**      * {@inheritdoc}      */     public function getName()     {         return 'form_submit';     }      /**      * {@inheritdoc}      */     public function getParent()     {         return 'form';     }      /**      * {@inheritdoc}      */     public function getBlockPrefix()     {         return 'form_submit';     } } 
 /**  * @module ember-jsonapi-resources  * @submodule ember-jsonapi-resources/models/resource  */  /**  * @module ember-jsonapi-resources  * @submodule ember-jsonapi-resources/models/resource  */  /**  * @module ember-jsonapi-resources  * @submodule ember-jsonapi-resources/models/resource  */  /**  * @module ember-jsonapi-resources  * @submodule ember-jsonapi-resources/models/resource  */  /**  * @module ember-jsonapi-resources  * @submodule ember-jsonapi-resources/models/resource  */  /**  * @module ember-jsonapi-resources  * @submodule ember-jsonapi-resources/models/resource  */  /**  * @module ember-jsonapi-resources  * @submodule ember-jsonapi-resources/models/resource  */  /**  * @module ember-jsonapi-resources  * @submodule ember-jsonapi-resources/models/resource  */  /**  * @module ember-jsonapi-resources  * @submodule ember-jsonapi-resources/models/resource  */  /**  * @module ember-jsonapi-resources  * @submodule ember-jsonapi-resources/models/resource  */  /**  * @module ember-jsonapi-resources  * @submodule ember-jsonapi-resources/models/resource  */  /**  * @module ember-jsonapi-resources  * @submodule ember-jsonapi-resources/models/resource  */  /**  * @module ember-jsonapi-resources  * @submodule ember-jsonapi-resources/models/resource  */  /**  * @module ember-jsonapi-resources  * @submodule ember-jsonapi-resources/models/resource  */  /**  * @module ember-jsonapi-resources  * @submodule ember-jsonapi-resources/models/resource  */  /**  * @module ember-jsonapi-resources  * @submodule ember-jsonapi-resources/models/resource  */
<?php /**  * Zend Framework  *  * LICENSE  *  * This source file is subject to the new BSD license that is bundled  * with this package in the file LICENSE.txt.  * It is also available through the world-wide-web at this URL:  * http://framework.zend.com/license/new-bsd  * If you did not receive a copy of the license and are unable to  * obtain it through the world-wide-web, please send an email  * to license@zend.com so we can send you a copy immediately.  *  * @category   Zend  * @package    Zend_Gdata  * @subpackage Gdata  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  * @version    $Id$  */  /**  * @see Zend_Gdata_Extension  */ require_once 'Zend/Gdata/Extension.php';  /**  * Represents the gdata:feed element  *  * @category   Zend  * @package    Zend_Gdata  * @subpackage Gdata  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  */ class Zend_Gdata_Gdata_Feed extends Zend_Gdata_Extension {      protected $_rootElement = 'feed';     protected $_rootNamespace = 'gdata';      /**      * Constructs a new Zend_Gdata_Gdata_Feed object.      *      * @param DOMElement $element (optional) DOMElement from which this      *          object should be constructed.      */     public function __construct($element = null)     {         $this->registerAllNamespaces(Zend_Gdata_Gdata::$namespaces);         parent::__construct($element);     }      /**      * Retrieves a DOMElement which corresponds to this element and all      * child properties.  This is used to build an entry back
.isAlive = false     };      heartbeat.isAlive = false;     heartbeat.isAlive = false;     heartbeat.isAlive = false;     heartbeat.isAlive = false;     heartbeat.isAlive = false;     heartbeat.isAlive = false;     heartbeat.isAlive = false;     heartbeat.isAlive = false;     heartbeat.isAlive = false;     heartbeat.isAlive = false;     heartbeat.isAlive = false;     heartbeat.isAlive = false;     heartbeat.isAlive = false;     heartbeat.isAlive = false;     heartbeat.isAlive = false;     heartbeat.isAlive = false;     heartbeat.isAlive = false;     heartbeat.isAlive = false;     heartbeat.isAlive = false;     heartbeat.isAlive = false;     heartbeat.isAlive = false;     heartbeat.isAlive = false;     heartbeat.isAlive = false;     heartbeat.isAlive = false;     heartbeat.isAlive = false;     heartbeat.isAlive = false;     heartbeat.isAlive = false;     heartbeat.isAlive = false;     heartbeat.isAlive = false;     heartbeat.isAlive = false;     heartbeat.isAlive = false;     heartbeat.isAlive = false;     heartbeat.isAlive = false;     heartbeat.isAlive = false;     heartbeat.isAlive = false;     heartbeat.isAlive = false;     heartbeat.isAlive = false;     heartbeat.isAlive = false;     heartbeat.isAlive = false;     heartbeat.isAlive = false;     heartbeat.isAlive = false;     heartbeat.isAlive = false;     heartbeat.isAlive = false;     heartbeat.isAlive = false;     heartbeat.isAlive = false;     heartbeat.isAlive = false;     heartbeat.isAlive = false;     heartbeat.isAlive = false;     heartbeat.isAlive = false;     heartbeat.isAlive = false;     heartbeat.isAlive = false;     heartbeat.isAlive = false;     heartbeat.isAlive = false;     heartbeat.isAlive = false;     heartbeat.isAlive = false;     heartbeat.isAlive
   header: header,   components: components, };  export default (props) => (   <div className="container">     <header {...props} />     <div className="container">       <div className="container">         <div className="container">           <div className="container">             <div className="container">               <div className="container">                 <div className="container">                   <div className="container">                     <div className="container">                       <div className="container">                         <div className="container">                           <div className="container">                             <div className="container">                               <div className="container">                                 <div className="container">                                   <div className="container">                                     <div className="container">                                       <div className="container">                                         <div className="container">                                           <div className="container">                                             <div className="container">                                               <div className="container">                                                 <div className="container">                                                   <div className="container">                                                     <div className="container">                                                       <div className="container">                                                         <div className="container">                                                           <div className="container">                                                             <div className="container">                                                               <div className="container">                                                                 <div className="container">                                                                   <div className="container">                                                                     <div className="container">                                                                       <div className="container">                                                                 <div className="container">                                                                     <div className="container">                                                                       <div className="container">                                                                         <div className="container">                                                                           <div className="container">                                                                             <div className="container">                                                                               <div className="container">                                                                                 <div className="container">                                                                                   <div className="container">                                                                                     <div className="container">                                                                                       <div className="container">                                                                                         <div className="container">                                                                                           <div className="container">                                                                                             <div className="container">                                                                                               <div className="container">                                                                                                 <div className="container">                                                                                                   <div className="container">                                                                                                     <div className="container">                                                                                                       <div className="container">                                                                                                         <div
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.product.name',                 'required' => false,                 'attr' => array(                     'class' => 'form-control'                 )             ))             ->add('price', 'number', array(                 'label' => 'sylius.form.product.price',                 'required' => false,                 'attr' => array(                     'class' => 'form-control'                 )             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
<?php /**  * Zend Framework  *  * LICENSE  *  * This source file is subject to the new BSD license that is bundled  * with this package in the file LICENSE.txt.  * It is also available through the world-wide-web at this URL:  * http://framework.zend.com/license/new-bsd  * If you did not receive a copy of the license and are unable to  * obtain it through the world-wide-web, please send an email  * to license@zend.com so we can send you a copy immediately.  *  * @category   Zend  * @package    Zend_Gdata  * @subpackage Gdata  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  * @version    $Id$  */  /**  * @see Zend_Gdata_Extension  */ require_once 'Zend/Gdata/Extension.php';  /**  * Represents the gdata:feed element.  *  * @category   Zend  * @package    Zend_Gdata  * @subpackage Gdata  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  */ class Zend_Gdata_Gdata_Feed extends Zend_Gdata_Extension {      protected $_rootElement = 'feed';     protected $_rootNamespace = 'gdata';      /**      * Constructs a new Zend_Gdata_Gdata_Feed object.      *      * @param DOMElement $element (optional) DOMElement from which this      *          object should be constructed.      */     public function __construct($element = null)     {         $this->registerAllNamespaces(Zend_Gdata_Gdata::$namespaces);         parent::__construct($element);     }      /**      * Retrieves a DOMElement which corresponds to this element and all      * child properties.  This is used to build an entry
 = _.isFunction(data.command) ? data.command : function() {}       , data = _.isObject(data) ? data : {}       , data = _.isObject(data) ? data : {}       , data = _.isObject(data) ? data : {}       , data = _.isObject(data) ? data : {}       , data = _.isObject(data) ? data : {}       , data = _.isObject(data) ? data : {}       , data = _.isObject(data) ? data : {}       , data = _.isObject(data) ? data : {}       , data = _.isObject(data) ? data : {}       , data = _.isObject(data) ? data : {}       , data = _.isObject(data) ? data : {}       , data = _.isObject(data) ? data : {}       , data = _.isObject(data) ? data : {}       , data = _.isObject(data) ? data : {}       , data = _.isObject(data) ? data : {}       , data = _.isObject(data) ? data : {}       , data = _.isObject(data) ? data : {}       , data = _.isObject(data) ? data : {}       , data = _.isObject(data) ? data : {}       , data = _.isObject(data) ? data : {}       , data = _.isObject(data) ? data : {}       , data = _.isObject(data) ? data : {}       , data = _.isObject(data) ? data : {}       , data = _.isObject(data) ? data : {}       , data = _.isObject(data) ? data : {}       , data = _.isObject(data) ? data : {}       , data = _.isObject(data) ? data : {}       , data = _.isObject(data) ? data : {}       , data = _.isObject(data) ? data : {}       , data = _.isObject(data) ? data : {}       , data = _.isObject(data) ? data : {}       , data = _.isObject(data) ? data : {}       , data = _.isObject(data) ? data : {}       , data = _.isObject(data) ? data : {}       , data = _.isObject(data) ? data : {}       , data =
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */  package org.apache.druid.query.aggregation;  import com.fasterxml.jackson.annotation.JsonCreator; import com.fasterxml.jackson.annotation.JsonProperty; import com.fasterxml.jackson.annotation.JsonTypeInfo; import com.fasterxml.jackson.annotation.JsonTypeInfo.Id; import com.fasterxml.jackson.annotation.JsonTypeName; import com.google.common.base.Preconditions; import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Iterables; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import org.apache.druid.java.util.common.ISE; import org.apache.druid.java.util.common.logger.Logger; import org.apache.druid.java.util.common.logger.LoggerFactory; import org.apache.druid.query.Query; import org.apache.druid.query.QueryRunner; import org.apache.druid.query.QueryRunnerFactory; import org.apache.druid
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.data.
<?php /**  * Zend Framework  *  * LICENSE  *  * This source file is subject to the new BSD license that is bundled  * with this package in the file LICENSE.txt.  * It is also available through the world-wide-web at this URL:  * http://framework.zend.com/license/new-bsd  * If you did not receive a copy of the license and are unable to  * obtain it through the world-wide-web, please send an email  * to license@zend.com so we can send you a copy immediately.  *  * @category   Zend  * @package    Zend_Service  * @subpackage DeveloperGarden  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  * @version    $Id$  */  /**  * @see Zend_Service_DeveloperGarden_Exception  */ // require_once 'Zend/Service/DeveloperGarden/Exception.php';  /**  * @category   Zend  * @package    Zend_Service  * @subpackage DeveloperGarden  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  */ class Zend_Service_DeveloperGarden_Exception extends Zend_Service_DeveloperGarden_Exception { } 
﻿using System.Reflection; using System.Runtime.CompilerServices; using System.Runtime.InteropServices;  // General Information about an assembly is controlled through the following  // set of attributes. Change these attribute values to modify the information // associated with an assembly. [assembly: AssemblyTitle("01.SumOfTwoNumbers")] [assembly: AssemblyDescription("")] [assembly: AssemblyConfiguration("")] [assembly: AssemblyCompany("")] [assembly: AssemblyProduct("01.SumOfTwoNumbers")] [assembly: AssemblyCopyright("Copyright ©  2015")] [assembly: AssemblyTrademark("")] [assembly: AssemblyCulture("")]  // Setting ComVisible to false makes the types in this assembly not visible  // to COM components.  If you need to access a type in this assembly from  // COM, set the ComVisible attribute to true on that type. [assembly: ComVisible(false)]  // The following GUID is for the ID of the typelib if this project is exposed to COM [assembly: Guid("8d9d9d9d-8d9d-4d9d-8d9d-8d9d9d9d9d9")]  // Version information for an assembly consists of the following four values: // //      Major Version //      Minor Version  //      Build Number //      Revision // // You can specify all the values or you can default the Build and Revision Numbers  // by using the '*' as shown below: // [assembly: AssemblyVersion("1.0.*")] [assembly: AssemblyVersion("1.0.0.0")] [assembly: AssemblyFileVersion("1.0.0.0")] 
var npId2 var npId3 var npId4 var npId5 var npId6 var npId7 var npId8 var npId9 var npId10 var npId11 var npId12 var npId13 var npId14 var npId15 var npId16 var npId17 var npId18 var npId19 var npId1 var npId2 var npId1 var npId2 var npId2 var npId2 var npId2 var npId2 var npId2 var npId2 var npId2 var npId2 var npId2 var npId2 var npId2 var npId2 var npId2 var npId2 var npId2 var npId2 var npId2 var npId2 var npId2 var npId2 var npId2 var npId2 var npId2 var npId2 var npId2 var npId2 var npId2 var npId2 var npId2 var npId2 var npId2 var npId2 var npId2 var npId2 var npId2 var npId2 var npId2 var npId2 var npId2 var npId2 var npId2 var npId2 var npId2 var npId2 var npId2 var npId2 var npId2 var npId2 var npId2 var npId2 var npId2 var npId2 var npId2 var npId2 var npId2 var npId2 var npId2 var npId2 var npId2 var npId2 var npId2 var npId2 var npId2 var npId2 var npId2 var npId2 var npId2 var npId2 var npId2 var npId2 var npId2 var npId2 var npId2 var npId2 var npId2 var npId2 var npId2 var npId2 var npId2 var npId2 var npId2 var npId2 var npId2 var npId2 var npId2 var npId2 var npId2 var npId2 var npId2 var npId2 var npId2 var npId2 var npId2 var npId2 var npId2 var npId2 var npId2 var npId2 var npId2 var npId2 var npId2 var npId2 var npId2 var npId2 var npId2 var npId
<?php  /*  * This file is part of the Symfony package.  *  * (c) Fabien Potencier <fabien@symfony.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace Symfony\Component\Form\Extension\Core\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\Form\FormEvent; use Symfony\Component\Form\FormEvents; use Symfony\Component\Form\FormInterface; use Symfony\Component\Form\FormView; use Symfony\Component\OptionsResolver\OptionsResolverInterface; use Symfony\Component\OptionsResolver\OptionsResolver;  /**  * @author Fabien Potencier <fabien@symfony.com>  */ class TextType extends AbstractType {     /**      * {@inheritdoc}      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('text', 'text', array(                 'label' => 'Symfony\Component\Form\Extension\Core\Type\TextType::label',                 'attr' => array(                     'class' => 'form-control'                 )             ))         ;     }      /**      * {@inheritdoc}      */     public function configureOptions(OptionsResolver $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Symfony\Component\Form\Extension\Core\Type\TextType'         ));     }      /**      * {@inheritdoc}      */     public function getBlockPrefix()     {         return 'symfony_form_type_text';     }      /**      * {@inheritdoc}      */     public function getName()     {         return 'symfony_form_type_text';     } } 
<?php  /*  * This file is part of the Symfony package.  *  * (c) Fabien Potencier <fabien@symfony.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace Symfony\Bundle\FrameworkBundle\DependencyInjection;  use Symfony\Component\DependencyInjection\ContainerBuilder; use Symfony\Component\Config\FileLocator; use Symfony\Component\HttpKernel\DependencyInjection\Extension; use Symfony\Component\DependencyInjection\Loader;  /**  * This is the class that loads and manages your bundle configuration  *  * To learn more see {@link http://symfony.com/doc/current/cookbook/bundles/extension.html}  */ class SymfonyFrameworkExtension extends Extension {     /**      * {@inheritdoc}      */     public function load(array $configs, ContainerBuilder $container)     {         $configuration = new Configuration();         $config = $this->processConfiguration($configuration, $configs);          $loader = new Loader\YamlFileLoader($container, new FileLocator(__DIR__.'/../Resources/config'));         $loader->load('services.yml');     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name')             ->add('description')         ;     }      /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product';     } } 
// Copyright (c) Microsoft Corporation. All rights reserved. // Licensed under the MIT License. See License.txt in the project root for // license information. // // Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0 // Changes may cause incorrect behavior and will be lost if the code is // regenerated.  'use strict';  const models = require('./index');  /**  * @class  * Initializes a new instance of the UserList class.  * @constructor  * A list of users.  *  * @member {string} [nextLink] The URL to the next page of results.  *  * @member {string} [previousLink] The URL to the previous page of results.  *  * @member {string} [nextPageLink] The URL to the next page of results.  *  * @member {string} [previousPageLink] The URL to the previous page of results.  */ class UserList {   constructor() {     this.nextLink = '';     this.previousLink = '';     this.nextPageLink = '';     this.previousPageLink = '';   }    /**    * Defines the metadata of UserList    *    * @returns {object} metadata of UserList    *    */   mapper() {     return {       required: false,       serializedName: 'UserList',       type: {         name: 'Composite',         className: 'UserList',         modelProperties: {           nextLink: {             required: false,             serializedName: 'nextLink',             type: {               name: 'String'             }           },           previousLink: {             required: false,             serializedName: 'previousLink',             type: {               name: 'String'             }           },           nextPageLink: {             required: false,             serializedName: 'nextPageLink',             type: {               name: 'String'             }           },           previousPageLink: {             required: false,             serializedName: 'previousPageLink',             type: {               name: 'String'             }          
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */ package org.apache.beam.runners.core;  import static org.junit.Assert.assertEquals; import static org.junit.Assert.assertFalse; import static org.junit.Assert.assertNotNull; import static org.junit.Assert.assertNull; import static org.junit.Assert.assertTrue; import static org.junit.Assert.fail;  import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Iterables; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import com.google.common.primitives.Ints; import com.google.common.primitives.Longs; import com.google.common.util.concurrent.Futures; import com.google.common.util.concurrent.ListenableFuture; import com.google.common.util.concurrent.ListeningExecutorService; import com.google.common.util.concurrent.MoreExecutors; import com.google.common.util.concurrent.ThreadFactoryBuilder; import com.google.common.util.concurrent.ThreadFactory; import com.
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array('label' => 'sylius.form.product.name'))             ->add('description', 'textarea', array('label' => 'sylius.form.product.description'))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
} else if (name == 'note') { return this.notes; } else if (name == 'note') { return this.notes; } else if (name == 'note') { return this.notes; } else if (name == 'note') { return this.notes; } else if (name == 'note') { return this.notes; } else if (name == 'note') { return this.notes; } else if (name == 'note') { return this.notes; } else if (name == 'note') { return this.notes; } else if (name == 'note') { return this.notes; } else if (name == 'note') { return this.notes; } else if (name == 'note') { return this.notes; } else if (name == 'note') { return this.notes; } else if (name == 'note') { return this.notes; } else if (name == 'note') { return this.notes; } else if (name == 'note') { return this.notes; } else if (name == 'note') { return this.notes; } else if (name == 'note') { return this.notes; } else if (name == 'note') { return this.notes; } else if (name == 'note') { return this.notes; } else if (name == 'note') { return this.notes; } else if (name == 'note') { return this.notes; } else if (name == 'note') { return this.notes; } else if (name == 'note') { return this.notes; } else if (name == 'note') { return this.notes; } else if (name == 'note') { return this.notes; } else if (name == 'note') { return this.notes; } else if (name == 'note') { return this.notes; } else if (name == 'note') { return this.notes; } else if (name == 'note') { return this.notes; } else if (name == 'note') { return this.notes; }
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializer; import org.apache.hyracks.api.dataflow.value.ISerializerSerializer; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.data
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.product.name',                 'required' => false,                 'attr' => array(                     'class' => 'form-control',                 ),             ))             ->add('price', 'text', array(                 'label' => 'sylius.form.product.price',                 'required' => false,                 'attr' => array(                     'class' => 'form-control',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
<?php /**  * Zend Framework  *  * LICENSE  *  * This source file is subject to the new BSD license that is bundled  * with this package in the file LICENSE.txt.  * It is also available through the world-wide-web at this URL:  * http://framework.zend.com/license/new-bsd  * If you did not receive a copy of the license and are unable to  * obtain it through the world-wide-web, please send an email  * to license@zend.com so we can send you a copy immediately.  *  * @category   Zend  * @package    Zend_Service  * @subpackage DeveloperGarden  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  * @version    $Id$  */  /**  * @see Zend_Service_DeveloperGarden_Exception  */ require_once 'Zend/Service/DeveloperGarden/Exception.php';  /**  * @category   Zend  * @package    Zend_Service  * @subpackage DeveloperGarden  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  */ class Zend_Service_DeveloperGarden_Exception extends Zend_Service_DeveloperGarden_Exception { } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */  package org.apache.druid.query.aggregation;  import com.fasterxml.jackson.annotation.JsonCreator; import com.fasterxml.jackson.annotation.JsonProperty; import com.fasterxml.jackson.annotation.JsonTypeInfo; import com.fasterxml.jackson.annotation.JsonTypeInfo.As; import com.fasterxml.jackson.annotation.JsonTypeInfo.Id; import com.fasterxml.jackson.annotation.JsonTypeName; import com.google.common.base.Preconditions; import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Iterables; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import org.apache.druid.java.util.common.ISE; import org.apache.druid.java.util.common.logger.Logger; import org.apache.druid.java.util.common.logger.LoggerFactory; import org.apache.druid.java.util.common.util.concurrent.ThreadFactoryBuilder; import org.apache.druid
}).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); }).call(this); 
, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwoLevel, errorsTwo
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.product.name',                 'attr' => array(                     'class' => 'form-control',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.product.description',                 'attr' => array(                     'class' => 'form-control',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
 var $parent = getParent($(this));         if ($parent.hasClass('open')) {     $parent.addClass('open');     $parent.on('click', function() {         $parent.toggleClass('open');     });     $parent.on('click', function() {         $parent.toggleClass('open');     });     $parent.on('click', function() {         $parent.toggleClass('open');     });     $parent.on('click', function() {         $parent.toggleClass('open');     });     $parent.on('click', function() {         $parent.toggleClass('open');     });     $parent.on('click', function() {         $parent.toggleClass('open');     });     $parent.on('click', function() {         $parent.toggleClass('open');     });     $parent.on('click', function() {         $parent.toggleClass('open');     });     $parent.on('click', function() {         $parent.toggleClass('open');     });     $parent.on('click', function() {         $parent.toggleClass('open');     });     $parent.on('click', function() {         $parent.toggleClass('open');     });     $parent.on('click', function() {         $parent.toggleClass('open');     });     $parent.on('click', function() {         $parent.toggleClass('open');     });     $parent.on('click', function() {         $parent.toggleClass('open');     });     $parent.on('click', function() {         $parent.toggleClass('open');     });     $parent.on('click', function() {         $parent.toggleClass('open');     });     $parent.on('click', function() {         $parent.toggleClass('open');     });     $parent.on('click', function() {         $parent.toggleClass('open');     });     $parent.on('click', function() {         $parent.toggleClass('open');     });     $parent.
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */  package org.apache.ignite.internal.processors.cache;  import org.apache.ignite.IgniteCheckedException; import org.apache.ignite.IgniteException; import org.apache.ignite.IgniteLogger; import org.apache.ignite.IgniteSpiException; import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi; import org.apache.ignite.spi.discovery.tcp.ipfinder.TcpDiscoveryIpFinder; import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder; import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest; import org.apache.ignite.testframework.junits.common.GridCommonTest; import org.jetbrains.annotations.Nullable;  import static org.apache.ignite.cache.CacheAtomicityMode.ATOMIC; import static org.apache.ignite.cache.CacheMode.PARTITIONED; import static org.apache.ignite.cache.CacheMode.REPLICATED; import static org.apache.ignite.cache.CacheWriteSynchronizationMode.FULL_SYNC; import static org.apache.ignite.cache.CacheWriteSynchronizationMode.SYNC; import static org.apache.ignite.cache.Cache
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */  package org.apache.druid.query.aggregation;  import com.fasterxml.jackson.annotation.JsonCreator; import com.fasterxml.jackson.annotation.JsonProperty; import com.fasterxml.jackson.annotation.JsonTypeInfo; import com.fasterxml.jackson.annotation.JsonTypeInfo.Id; import com.fasterxml.jackson.annotation.JsonTypeInfo.IsArray; import com.fasterxml.jackson.annotation.JsonTypeInfo.IsCollection; import com.fasterxml.jackson.annotation.JsonTypeInfo.IsObject; import com.fasterxml.jackson.annotation.JsonTypeInfo.IsString; import com.fasterxml.jackson.annotation.JsonTypeInfo.IsType; import com.fasterxml.jackson.annotation.JsonTypeName; import com.google.common.base.Preconditions; import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import org.apache.druid.java.util.common.ISE; import org.apache.dr
// Copyright (c) Microsoft Corporation. All rights reserved. // Licensed under the MIT License. See License.txt in the project root for // license information. // // Code generated by Microsoft (R) AutoRest Code Generator. // Changes may cause incorrect behavior and will be lost if the code is // regenerated.  namespace Microsoft.Azure.Management.RecoveryServices.Backup.Models {     using Microsoft.Azure;     using Microsoft.Azure.Management;     using Microsoft.Azure.Management.RecoveryServices;     using Microsoft.Azure.Management.RecoveryServices.Backup;     using Newtonsoft.Json;     using System.Collections;     using System.Collections.Generic;     using System.Linq;     using System.Net;     using System.Net.Http;     using System.Net.Http.Headers;     using System.Text;     using System.Text.RegularExpressions;     using System.Collections;     using System.Collections.ObjectModel;     using System.Collections.Specialized;     using Newtonsoft.Json;     using System.Collections;     using System.Collections.Generic;     using System.Collections.ObjectModel.Serialization;     using Newtonsoft.Json.Converters;     using System.ComponentModel.DataAnnotations;     using System.ComponentModel.DataAnnotations.Schema;     using Microsoft.Rest;     using Microsoft.Rest.Serialization;     using Microsoft.Rest.Azure;     using Models;     using Newtonsoft.Json;     using System.Linq;     using System.Collections;     using System.Collections.Generic;     using System.Collections.ObjectModel;     using System.Collections.Specialized;     using System.Collections.Specialized.Json;     using System.Runtime.Serialization;     using System.Text;     using System.Text.RegularExpressions;     using System.Collections;     using System.Collections.Specialized;     using System.Collections.ObjectModel;     using System.Collections.Specialized.Json;     using System.Runtime.Serialization;     using Newtonsoft.Json.Converters;     using System.ComponentModel.DataAnnotations;    

                        this.spriteNombre.setPosition(spriteX, spriteY);                      }                     if (this.spriteNombreNombre) {                         this.spriteNombreNombre.setPosition(spriteX, spriteY);                      }                     if (this.spriteNombreNombreNombre) {                         this.spriteNombreNombreNombre.setPosition(spriteX, spriteY);                      }                     if (this.spriteNombreNombreNombre) {                         this.spriteNombreNombreNombre.setPosition(spriteX, spriteY);                      }                     if (this.spriteNombreNombreNombre) {                         this.spriteNombreNombreNombre.setPosition(spriteX, spriteY);                      }                     if (this.spriteNombreNombreNombre) {                         this.spriteNombreNombreNombre.setPosition(spriteX, spriteY);                      }                     if (this.spriteNombreNombreNombre) {                         this.spriteNombreNombreNombre.setPosition(spriteX, spriteY);                      }                     if (this.spriteNombreNombreNombre) {                         this.spriteNombreNombreNombre.setPosition(spriteX, spriteY);                      }                     if (this.spriteNombreNombreNombre) {                         this.spriteNombreNombreNombre.setPosition(spriteX, spriteY);                      }                     if (this.spriteNombreNombreNombre) {                         this.spriteNombreNombreNombre.setPosition(spriteX, spriteY);                      }                     if (this.spriteNombreNombreNombre) {                         this.spriteNombreNombreNombre.setPosition(spriteX, spriteY);                      }                     if (this.spriteNombreNombreNombre) {                         this.spriteNombreNombreNombre.setPosition(spriteX, spriteY);                      }                     if (this.spriteNombreNombreNombre) {                         this.spriteNombreNombreNombre.setPosition(spriteX, spriteY);                      }                     if
 return cb();             }.bind(this))             .catch(function (err) { return cb(err);             }.bind(this))             .finally(function (cb) { return cb();             }.bind(this))             .finally(function (cb) { return cb();             }.bind(this))             .finally(function (cb) { return cb();             }.bind(this))             .finally(function (cb) { return cb();             }.bind(this))             .finally(function (cb) { return cb();             }.bind(this))             .finally(function (cb) { return cb();             }.bind(this))             .finally(function (cb) { return cb();             }.bind(this))             .finally(function (cb) { return cb();             }.bind(this))             .finally(function (cb) { return cb();             }.bind(this))             .finally(function (cb) { return cb();             }.bind(this))             .finally(function (cb) { return cb();             }.bind(this))             .finally(function (cb) { return cb();             }.bind(this))             .finally(function (cb) { return cb();             }.bind(this))             .finally(function (cb) { return cb();             }.bind(this))             .finally(function (cb) { return cb();             }.bind(this))             .finally(function (cb) { return cb();             }.bind(this))             .finally(function (cb) { return cb();             }.bind(this))             .finally(function (cb) { return cb();             }.bind(this))             .finally(function (cb) { return cb();             }.bind(this))             .finally(function (cb) { return cb();             }.bind(this))             .finally(function (cb) { return cb();             }.bind(this))             .finally(function (cb) { return cb();             }.bind(this))             .finally(function (cb) { return cb();             }.bind(this))             .finally(function (cb) { return cb();             }.bind(
<?php /**  * Zend Framework  *  * LICENSE  *  * This source file is subject to the new BSD license that is bundled  * with this package in the file LICENSE.txt.  * It is also available through the world-wide-web at this URL:  * http://framework.zend.com/license/new-bsd  * If you did not receive a copy of the license and are unable to  * obtain it through the world-wide-web, please send an email  * to license@zend.com so we can send you a copy immediately.  *  * @category   Zend  * @package    Zend_Service  * @subpackage DeveloperGarden  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  * @version    $Id$  */  /**  * @see Zend_Service_DeveloperGarden_Exception  */ require_once 'Zend/Service/DeveloperGarden/Exception.php';  /**  * @category   Zend  * @package    Zend_Service  * @subpackage DeveloperGarden  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  */ class Zend_Service_DeveloperGarden_Exception extends Zend_Service_DeveloperGarden_Exception { } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.functions.IFunctionDescriptorProvider; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.data.accessors.ITupleReference; import org.apache.hyracks.dataflow.common.data
// Copyright (c) 2012 The Chromium Authors. All rights reserved. // Use of this source code is governed by a BSD-style license that can be // found in the LICENSE file.  #ifndef CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_H_ #define CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_H_  #include <string> #include <vector>  #include "base/basictypes.h" #include "base/memory/scoped_ptr.h" #include "base/memory/scoped_vector.h" #include "base/memory/weak_ptr.h" #include "base/memory/weak_vector.h" #include "base/memory/weak_ptr.h" #include "base/memory/scoped_vector.h" #include "base/memory/scoped_vector.h" #include "base/memory/weak_ptr.h" #include "base/memory/scoped_vector.h" #include "base/memory/weak_ptr.h" #include "base/memory/scoped_vector.h" #include "base/memory/weak_ptr.h" #include "base/memory/scoped_vector.h" #include "base/memory/weak_ptr.h" #include "base/memory/scoped_vector.h" #include "base/memory/scoped_vector.h" #include "base/memory/scoped_ptr.h" #include "base/memory/scoped_vector.h" #include "base/memory/scoped_vector.h" #include "base/memory/scoped_vector.h" #include "base/memory/scoped_vector.h" #include "base/memory/scoped_ptr.h" #include "base/memory/scoped_vector.h" #include "base/memory/scoped_vector.h" #include "base/memory/scoped_vector.h" #include "base/memory/scoped_vector.h" #include "base/memory
<?php /**  * Zend Framework  *  * LICENSE  *  * This source file is subject to the new BSD license that is bundled  * with this package in the file LICENSE.txt.  * It is also available through the world-wide-web at this URL:  * http://framework.zend.com/license/new-bsd  * If you did not receive a copy of the license and are unable to  * obtain it through the world-wide-web, please send an email  * to license@zend.com so we can send you a copy immediately.  *  * @category   Zend  * @package    Zend_Gdata  * @subpackage Gdata  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  * @version    $Id$  */  /**  * @see Zend_Gdata_Extension  */ require_once 'Zend/Gdata/Extension.php';  /**  * Represents the gdata:feed element  *  * @category   Zend  * @package    Zend_Gdata  * @subpackage Gdata  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  */ class Zend_Gdata_Gdata_Feed extends Zend_Gdata_Extension {      protected $_rootElement = 'feed';     protected $_rootNamespace = 'gdata';      public function __construct($text = null)     {         $this->registerAllNamespaces(Zend_Gdata_Gdata::$namespaces);         parent::__construct();         $this->_text = $text;     }  } 
<?php /**  * Zend Framework  *  * LICENSE  *  * This source file is subject to the new BSD license that is bundled  * with this package in the file LICENSE.txt.  * It is also available through the world-wide-web at this URL:  * http://framework.zend.com/license/new-bsd  * If you did not receive a copy of the license and are unable to  * obtain it through the world-wide-web, please send an email  * to license@zend.com so we can send you a copy immediately.  *  * @category   Zend  * @package    Zend_Service  * @subpackage DeveloperGarden  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  * @version    $Id$  */  /**  * @see Zend_Service_DeveloperGarden_Exception  */ require_once 'Zend/Service/DeveloperGarden/Exception.php';  /**  * @category   Zend  * @package    Zend_Service  * @subpackage DeveloperGarden  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  */ class Zend_Service_DeveloperGarden_Exception extends Zend_Service_DeveloperGarden_Exception { } 
<?php /**  * Zend Framework  *  * LICENSE  *  * This source file is subject to the new BSD license that is bundled  * with this package in the file LICENSE.txt.  * It is also available through the world-wide-web at this URL:  * http://framework.zend.com/license/new-bsd  * If you did not receive a copy of the license and are unable to  * obtain it through the world-wide-web, please send an email  * to license@zend.com so we can send you a copy immediately.  *  * @category   Zend  * @package    Zend_Service  * @subpackage DeveloperGarden  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  * @version    $Id$  */  /**  * @see Zend_Service_DeveloperGarden_Exception  */ // require_once 'Zend/Service/DeveloperGarden/Exception.php';  /**  * @category   Zend  * @package    Zend_Service  * @subpackage DeveloperGarden  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  */ class Zend_Service_DeveloperGarden_Exception extends Zend_Service_DeveloperGarden_Exception { } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
     }      if (f.length) {         return f.length;     } else {         return 0;     } }  if (f.length) {     return f.length; } else {     return 0; }  if (f.length) {     return f.length; } else {     return 0; }  if (f.length) {     return f.length; } else {     return 0; }  if (f.length) {     return f.length; } else {     return 0; }  if (f.length) {     return f.length; } else {     return 0; }  if (f.length) {     return f.length; } else {     return 0; }  if (f.length) {     return f.length; } else {     return 0; }  if (f.length) {     return f.length; } else {     return 0; }  if (f.length) {     return f.length; } else {     return 0; }  if (f.length) {     return f.length; } else {     return 0; }  if (f.length) {     return f.length; } else {     return 0; }  if (f.length) {     return f.length; } else {     return 0; }  if (f.length) {     return f.length; } else {     return 0; }  if (f.length) {     return f.length; } else {     return 0; }  if (f.length) {     return f.length; } else {     return 0; }  if (f.length) {     return f.length; } else {     return 0; }  if (f.length) {     return f.length; } else {     return 0; }  if (f.length) {     return f.length;
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.product.name',                 'required' => false,                 'attr' => array(                     'placeholder' => 'sylius.form.product.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.product.description',                 'required' => false,                 'attr' => array(                     'placeholder' => 'sylius.form.product.description',                 ),             ))         ;     }      /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.data.accessors.ITupleReference; import org.apache.hyracks
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of the Symfony package.  *  * (c) Fabien Potencier <fabien@symfony.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace Symfony\Component\Form\Extension\Core\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\Form\FormEvent; use Symfony\Component\Form\FormEvents; use Symfony\Component\Form\FormInterface; use Symfony\Component\Form\FormView; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Fabien Potencier <fabien@symfony.com>  */ class TextType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('text', 'text')             ->add('submit', 'submit')         ;     }      /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Symfony\Component\Form\Extension\Core\Type\TextType'         ));     }      /**      * @return string      */     public function getName()     {         return 'Symfony\Component\Form\Extension\Core\Type\TextType';     } } 
 import * as wkx2 from 'wkx2' import * as wkx3 from 'wkx3' import * as wkx4 from 'wkx4' import * as wkx5 from 'wkx5' import * as wkx6 from 'wkx6' import * as wkx7 from 'wkx7' import * as wkx8 from 'wkx8' import * as wkx9 from 'wkx9' import * as wkx10 from 'wkx10' import * as wkx11 from 'wkx11' import * as wkx12 from 'wkx12' import * as wkx13 from 'wkx13' import * as wkx14 from 'wkx14' import * as wkx15 from 'wkx15' import * as wkx16 from 'wkx16' import * as wkx17 from 'wkx17' import * as wkx18 from 'wkx18' import * as wkx19 from 'wkx19' import * as wkx20 from 'wkx20' import * as wkx21 from 'wkx21' import * as wkx22 from 'wkx22' import * as wkx23 from 'wkx23' import * as wkx24 from 'wkx24' import * as wkx25 from 'wkx25' import * as wkx26 from 'wkx26' import * as wkx27 from 'wkx27' import * as wkx28 from 'wkx28' import * as wkx29 from 'wkx29' import * as wkx30 from 'wkx30' import * as wkx31 from 'wkx31' import * as wkx32 from 'wkx32' import * as wkx33 from 'wkx33' import * as wkx34 from 'wkx34' import * as wkx35 from 'wkx35' import * as wkx36 from 'wkx36' import * as wkx37 from 'wkx37' import * as wkx38 from 'wkx38' import * as wkx39 from 'wkx39' import * as wkx40 from 'wkx40' import * as
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name'                 )             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description'                 )             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 

 		var files = []; 		for ( var i = 0; i < data.length; i++ ) { 			var file = data[i]; 			if ( file ) { 				files.push( file ); 			} 		} 		return files; 	}, 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */  package org.apache.druid.query.aggregation;  import com.fasterxml.jackson.annotation.JsonCreator; import com.fasterxml.jackson.annotation.JsonProperty; import com.fasterxml.jackson.annotation.JsonTypeInfo; import com.fasterxml.jackson.annotation.JsonTypeInfo.As; import com.fasterxml.jackson.annotation.JsonTypeInfo.Id; import com.fasterxml.jackson.annotation.JsonTypeName; import com.google.common.base.Preconditions; import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Iterables; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import org.apache.druid.java.util.common.ISE; import org.apache.druid.java.util.common.logger.Logger; import org.apache.druid.java.util.common.logger.LoggerFactory; import org.apache.druid.java.util.common.guava.Sequence; import org.apache.druid.java.util
 }; ClientRequest.prototype.send = function() {   this.proxy.send.apply(this.proxy, arguments); };  }; ClientRequest.prototype.sendAsync = function() {   this.proxy.sendAsync.apply(this.proxy, arguments); };  }; ClientRequest.prototype.send = function() {   this.proxy.send.apply(this.proxy, arguments); };  }; ClientRequest.prototype.sendAsync = function() {   this.proxy.sendAsync.apply(this.proxy, arguments); };  }; ClientRequest.prototype.sendAsync = function() {   this.proxy.sendAsync.apply(this.proxy, arguments); };  }; ClientRequest.prototype.send = function() {   this.proxy.send.apply(this.proxy, arguments); };  }; ClientRequest.prototype.sendAsync = function() {   this.proxy.sendAsync.apply(this.proxy, arguments); };  }; ClientRequest.prototype.send = function() {   this.proxy.send.apply(this.proxy, arguments); };  }; ClientRequest.prototype.sendAsync = function() {   this.proxy.sendAsync.apply(this.proxy, arguments); };  }; ClientRequest.prototype.send = function() {   this.proxy.send.apply(this.proxy, arguments); };  }; ClientRequest.prototype.sendAsync = function() {   this.proxy.sendAsync.apply(this.proxy, arguments); };  }; ClientRequest.prototype.send = function() {   this.proxy.send.apply(this.proxy, arguments); };  }; ClientRequest.prototype.sendAsync = function() {   this.proxy.sendAsync.apply(this.proxy, arguments); };  }; ClientRequest.prototype.send = function() {   this.proxy.send.apply(this.proxy, arguments); };  }; ClientRequest.prototype.sendAsync = function() {   this.proxy.sendAsync.apply(this.proxy, arguments); };  }; ClientRequest.prototype.send = function() {   this.proxy.send.apply(this.proxy, arguments); };  }; ClientRequest.prototype.sendAsync = function() {   this
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
<?php /**  * Zend Framework  *  * LICENSE  *  * This source file is subject to the new BSD license that is bundled  * with this package in the file LICENSE.txt.  * It is also available through the world-wide-web at this URL:  * http://framework.zend.com/license/new-bsd  * If you did not receive a copy of the license and are unable to  * obtain it through the world-wide-web, please send an email  * to license@zend.com so we can send you a copy immediately.  *  * @category   Zend  * @package    Zend_Service  * @subpackage DeveloperGarden  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  * @version    $Id$  */  /**  * @see Zend_Service_DeveloperGarden_Exception  */ // require_once 'Zend/Service/DeveloperGarden/Exception.php';  /**  * @category   Zend  * @package    Zend_Service  * @subpackage DeveloperGarden  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  */ class Zend_Service_DeveloperGarden_Exception extends Zend_Service_DeveloperGarden_Exception { } 
     var el = node.el;      if (typeof name === 'string') {         el.setAttribute(name, val);     } else {         el.setAttribute(name, val);     }      if (typeof asProp === 'string') {         el.setAttribute(asProp, val);     } else {         el.setAttribute(asProp, val);     }      if (typeof initial === 'string') {         el.setAttribute(initial, val);     } else {         el.setAttribute(initial, val);     }      if (typeof asProp === 'string') {         el.setAttribute(asProp, val);     } else {         el.setAttribute(asProp, val);     }      if (typeof initial === 'string') {         el.setAttribute(initial, val);     } else {         el.setAttribute(initial, val);     }      if (typeof asProp === 'string') {         el.setAttribute(asProp, val);     } else {         el.setAttribute(asProp, val);     }      if (typeof initial === 'string') {         el.setAttribute(initial, val);     } else {         el.setAttribute(initial, val);     }      if (typeof asProp === 'string') {         el.setAttribute(asProp, val);     } else {         el.setAttribute(asProp, val);     }      if (typeof initial === 'string') {         el.setAttribute(initial, val);     } else {         el.setAttribute(initial, val);     }      if (typeof asProp === 'string') {         el.setAttribute(asProp, val);     } else {         el.setAttribute(asProp, val);     }      if (typeof initial === 'string') {         el.setAttribute(initial, val);     } else {         el.setAttribute(initial, val);     }      if (typeof asProp === 'string') {         el.setAttribute(asProp, val);
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */  package org.apache.druid.query.aggregation;  import com.fasterxml.jackson.annotation.JsonCreator; import com.fasterxml.jackson.annotation.JsonProperty; import com.fasterxml.jackson.annotation.JsonTypeInfo; import com.fasterxml.jackson.annotation.JsonTypeInfo.Id; import com.fasterxml.jackson.annotation.JsonTypeName; import com.google.common.base.Preconditions; import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Iterables; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import org.apache.druid.java.util.common.ISE; import org.apache.druid.java.util.common.logger.Logger; import org.apache.druid.java.util.common.logger.LoggerFactory; import org.apache.druid.java.util.common.util.concurrent.ThreadFactoryBuilder; import org.apache.druid.java.util.common.util.concurrent.ThreadPoolExecutor; import org
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */  package org.apache.druid.query.aggregation;  import com.fasterxml.jackson.annotation.JsonCreator; import com.fasterxml.jackson.annotation.JsonProperty; import com.fasterxml.jackson.annotation.JsonTypeInfo; import com.fasterxml.jackson.annotation.JsonTypeInfo.Id; import com.fasterxml.jackson.annotation.JsonTypeName; import com.google.common.base.Preconditions; import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Iterables; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import org.apache.druid.java.util.common.ISE; import org.apache.druid.java.util.common.logger.Logger; import org.apache.druid.java.util.common.logger.LoggerFactory; import org.apache.druid.java.util.common.guava.Sequence; import org.apache.druid.java.util.common.guava.Sequences; import org.apache.druid.java
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */  package org.apache.hadoop.hbase.regionserver;  import static org.junit.Assert.assertEquals; import static org.junit.Assert.assertFalse; import static org.junit.Assert.assertTrue;  import java.io.IOException; import java.util.ArrayList; import java.util.List;  import org.apache.hadoop.conf.Configuration; import org.apache.hadoop.hbase.HBaseClassTestRule; import org.apache.hadoop.hbase.HBaseTestingUtility; import org.apache.hadoop.hbase.TableName; import org.apache.hadoop.hbase.testclassification.SmallTests; import org.apache.hadoop.hbase.util.Bytes; import org.junit.AfterClass; import org.junit.BeforeClass; import org.junit.ClassRule; import org.junit.Test; import org.junit.experimental.categories.Category; import org.slf4j.Logger; import org.slf4j.LoggerFactory;  @Category({SmallTests.class, LargeTests.class}) public class TestRegionServer {   private static final Logger LOG = LoggerFactory.getLogger(TestRegionServer.class);    @ClassRule   public static HBase
 { type, errors }; }  function parseShaderErrors(message) {   let errors = parseShaderErrors(message);         throw { type, errors }; }  function parseShaderErrors(message) {   let errors = parseShaderErrors(message);         throw { type, errors }; }  function parseShaderErrors(message) {   let errors = parseShaderErrors(message);         throw { type, errors }; }  function parseShaderErrors(message) {   let errors = parseShaderErrors(message);         throw { type, errors }; }  function parseShaderErrors(message) {   let errors = parseShaderErrors(message);         throw { type, errors }; }  function parseShaderErrors(message) {   let errors = parseShaderErrors(message);         throw { type, errors }; }  function parseShaderErrors(message) {   let errors = parseShaderErrors(message);         throw { type, errors }; }  function parseShaderErrors(message) {   let errors = parseShaderErrors(message);         throw { type, errors }; }  function parseShaderErrors(message) {   let errors = parseShaderErrors(message);         throw { type, errors }; }  function parseShaderErrors(message) {   let errors = parseShaderErrors(message);         throw { type, errors }; }  function parseShaderErrors(message) {   let errors = parseShaderErrors(message);         throw { type, errors }; }  function parseShaderErrors(message) {   let errors = parseShaderErrors(message);         throw { type, errors }; }  function parseShaderErrors(message) {   let errors = parseShaderErrors(message);         throw { type, errors }; }  function parseShaderErrors(message) {   let errors = parseShaderErrors(message);         throw { type, errors }; }  function parseShaderErrors(message) {   let errors = parseShaderErrors(message);         throw { type, errors }; }  function parseShaderErrors(message) {   let errors = parseShaderErrors(message);         throw { type, errors }; }  function parseShaderErrors(message) {   let errors = parseShaderErrors(message);         throw {
     if (traits) {         for (i in traits) {             if (traits.hasOwnProperty(i)) {                 this.traits()[i].setFromArgs( obj, args, ignores );             }         }     }      this.traits().forEach(function (traits) {         if (traits) {             for (i in traits) {                 if (traits.hasOwnProperty(i)) {                     this.traits()[i].setFromArgs( obj, args, ignores );                 }             }         }     });      this.traits().forEach(function (traits) {         if (traits) {             for (i in traits) {                 if (traits.hasOwnProperty(i)) {                     this.traits()[i].setFromArgs( obj, args, ignores );                 }             }         }     });      this.traits().forEach(function (traits) {         if (traits) {             for (i in traits) {                 if (traits.hasOwnProperty(i)) {                     this.traits()[i].setFromArgs( obj, args, ignores );                 }             }         }     });      this.traits().forEach(function (traits) {         if (traits) {             for (i in traits) {                 if (traits.hasOwnProperty(i)) {                     this.traits()[i].setFromArgs( obj, args, ignores );                 }             }         }     });      this.traits().forEach(function (traits) {         if (traits) {             for (i in traits) {                 if (traits.hasOwnProperty(i)) {                     this.traits()[i].setFromArgs( obj, args, ignores );                 }             }         }     });      this.traits().forEach(function (traits) {         if (traits) {             for (i in traits) {                 if (traits.hasOwnProperty(i)) {                     this.traits()[i
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */  package org.apache.druid.server.coordination;  import com.fasterxml.jackson.core.JsonProcessingException; import com.fasterxml.jackson.databind.ObjectMapper; import com.fasterxml.jackson.databind.node.ObjectNode; import com.fasterxml.jackson.databind.node.ArrayNode; import com.fasterxml.jackson.databind.node.ObjectNodeFactory; import com.fasterxml.jackson.databind.node.ObjectNodeWriter; import com.fasterxml.jackson.databind.node.ObjectNodeWriterFactory; import com.fasterxml.jackson.databind.node.ObjectNodeWriterProvider; import com.fasterxml.jackson.databind.node.ObjectNodeWriterProviderFactory; import com.fasterxml.jackson.databind.node.ArrayNodeWriterProvider; import com.fasterxml.jackson.databind.node.ObjectNodeWriterProviderFactory; import com.fasterxml.jackson.databind.node.ObjectNodeWriterProvider; import com.fasterxml.jackson.databind.node.ObjectNodeWriterProviderFactory; import com.fasterxml.jackson.databind.node
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */  package org.apache.jackrabbit.oak.plugins.index;  import org.apache.jackrabbit.oak.spi.state.NodeState; import org.apache.jackrabbit.oak.spi.state.NodeStateListener; import org.apache.jackrabbit.oak.spi.state.NodeStateResolver; import org.apache.jackrabbit.oak.spi.state.NodeStateResolverFactory; import org.apache.jackrabbit.oak.spi.state.NodeStateType; import org.apache.jackrabbit.oak.spi.state.NodeStateTypeFactory; import org.apache.jackrabbit.oak.spi.state.NodeStateTypeResolver; import org.apache.jackrabbit.oak.spi.state.NodeStateTypeResolverFactory; import org.apache.jackrabbit.oak.spi.state.NodeStateTypeResolverFactoryImpl; import org.apache.jackrabbit.oak.spi.state.NodeStateTypeResolverFactoryImpl; import org.apache.jackrabbit.oak.spi.state.NodeStateTypeResolverFactoryImpl; import org.apache.jackrabbit.oak.spi.state.PropertyState; import org.apache.jackrab
 {   warn() {     console.warn.call(console, ...arguments);   } };  module.exports = IgniterConsole; 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control'                 )             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control'                 )             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.functions.IFunctionDescriptorProvider; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.ITupleReference; import org.apache.hyracks.dataflow.common.data.accessors.ITupleReferenceFactory; import org.apache.hyracks.dataflow.common.data
<?php  /*  * This file is part of the Symfony package.  *  * (c) Fabien Potencier <fabien@symfony.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace Symfony\Component\DependencyInjection\Compiler;  use Symfony\Component\DependencyInjection\ContainerBuilder; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\RuntimeException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\RuntimeException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\RuntimeException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\RuntimeException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\RuntimeException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\RuntimeException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\RuntimeException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\RuntimeException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\RuntimeException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\RuntimeException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\RuntimeException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\RuntimeException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\RuntimeException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\RuntimeException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\RuntimeException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\RuntimeException
<?php /**  * Zend Framework  *  * LICENSE  *  * This source file is subject to the new BSD license that is bundled  * with this package in the file LICENSE.txt.  * It is also available through the world-wide-web at this URL:  * http://framework.zend.com/license/new-bsd  * If you did not receive a copy of the license and are unable to  * obtain it through the world-wide-web, please send an email  * to license@zend.com so we can send you a copy immediately.  *  * @category   Zend  * @package    Zend_Service  * @subpackage DeveloperGarden  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  * @version    $Id$  */  /**  * @see Zend_Service_DeveloperGarden_Exception  */ require_once 'Zend/Service/DeveloperGarden/Exception.php';  /**  * @category   Zend  * @package    Zend_Service  * @subpackage DeveloperGarden  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  */ class Zend_Service_DeveloperGarden_Exception extends Zend_Service_DeveloperGarden_Exception { } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */ package org.apache.beam.runners.core;  import static org.junit.Assert.assertEquals; import static org.junit.Assert.assertFalse; import static org.junit.Assert.assertNotNull; import static org.junit.Assert.assertNull; import static org.junit.Assert.assertTrue; import static org.junit.Assert.fail;  import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Iterables; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import com.google.common.util.concurrent.Futures; import com.google.common.util.concurrent.ListenableFuture; import com.google.common.util.concurrent.ListeningExecutorService; import com.google.common.util.concurrent.MoreExecutors; import com.google.common.util.concurrent.ThreadFactoryBuilder; import com.google.common.util.concurrent.TimeUnit; import com.google.common.util.concurrent.TimeoutException; import com.google.common.util.concurrent.TimeoutException.
 var instance = {   rules: [],   ruleMandatoryProperties: [] };  module.exports = {   rules: rules,   ruleMandatoryProperties: ruleMandatoryProperties };                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
// Copyright (c) Microsoft Corporation. All rights reserved. // Licensed under the MIT License.  // <auto-generated/>  #nullable disable  using System; using System.Collections.Generic; using System.Text.Json; using Azure.Core;  namespace Azure.ResourceManager.Network.Models {     public partial class VirtualNetworkGateway : IUtf8JsonSerializable     {         void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)         {             writer.WriteStartObject();             writer.WritePropertyName("id");             writer.WriteStringValue(Id);             writer.WritePropertyName("name");             writer.WriteStringValue(Name);             writer.WritePropertyName("type");             writer.WriteStringValue(Type);             writer.WritePropertyName("properties");             writer.WriteStartArray();             foreach (var item in Properties)             {                 writer.WriteObjectValue(item);             }             writer.WriteEndArray();             writer.WriteEndObject();         }          internal static VirtualNetworkGateway DeserializeVirtualNetworkGateway(JsonElement element)         {             string id = default;             string name = default;             string type = default;             IDictionary<string, object> properties = default;             foreach (var property in element.EnumerateObject())             {                 if (property.NameEquals("id"))                 {                     id = property.Value.GetString();                     continue;                 }                 if (property.NameEquals("name"))                 {                     name = property.Value.GetString();                     continue;                 }                 if (property.NameEquals("type"))                 {                     type = property.Value.GetString();                     continue;                 }                 if (property.NameEquals("properties"))                 {                     if (property.Value.ValueKind == JsonValueKind.Null)                     {                         property.ThrowNonNullablePropertyIsNull();                         continue;                     }                     foreach (var item in property.Value.EnumerateArray())                     {                         if (item.ValueKind == JsonValueKind.Null)                         {                             property.ThrowNonNullablePropertyIsNull();                             continue;                        
    }      this.geometry.faces.push(new THREE.Face3(...indices))     this.geometry.faces.push(new THREE.Face3(...indices))     this.geometry.faces.push(new THREE.Face3(...indices))     this.geometry.faces.push(new THREE.Face3(...indices))     this.geometry.faces.push(new THREE.Face3(...indices))     this.geometry.faces.push(new THREE.Face3(...indices))     this.geometry.faces.push(new THREE.Face3(...indices))     this.geometry.faces.push(new THREE.Face3(...indices))     this.geometry.faces.push(new THREE.Face3(...indices))     this.geometry.faces.push(new THREE.Face3(...indices))     this.geometry.faces.push(new THREE.Face3(...indices))     this.geometry.faces.push(new THREE.Face3(...indices))     this.geometry.faces.push(new THREE.Face3(...indices))     this.geometry.faces.push(new THREE.Face3(...indices))     this.geometry.faces.push(new THREE.Face3(...indices))     this.geometry.faces.push(new THREE.Face3(...indices))     this.geometry.faces.push(new THREE.Face3(...indices))     this.geometry.faces.push(new THREE.Face3(...indices))     this.geometry.faces.push(new THREE.Face3(...indices))     this.geometry.faces.push(new THREE.Face3(...indices))     this.geometry.faces.push(new THREE.Face3(...indices))     this.geometry.faces.push(new THREE.Face3(...indices))     this.geometry.faces.push(new THREE.Face3(...indices))     this.geometry.faces.push(new THREE.Face3(...indices))     this.geometry.faces.push(new THREE.Face3(...indices))     this.geometry.faces.push(new THREE.Face3(...indices))     this.geometry.faces.push(new THREE.Face3(...indices))     this.geometry.faces.push(new THREE.Face3(...indices))     this
 		this.init(); 	};  	DataGrid.DataGridWidget.prototype = { 		init: function() { 			var self = this;  			this.gridWidget = new DataGrid.DataGridWidget(); 			this.gridWidget.init(); 		},  		init: function() { 			var self = this;  			this.gridWidget.init(); 		} 	};  	DataGrid.DataGridWidget.prototype = { 		init: function() { 			var self = this;  			this.gridWidget.init(); 		} 	};  	DataGrid.DataGridWidget.prototype = { 		init: function() { 			this.gridWidget.init(); 		} 	};  	DataGrid.DataGridWidget.prototype = { 		init: function() { 			this.gridWidget.init(); 		} 	};  	DataGrid.DataGridWidget.prototype = { 		init: function() { 			this.gridWidget.init(); 		} 	};  	DataGrid.DataGridWidget.prototype = { 		init: function() { 			this.gridWidget.init(); 		} 	};  	DataGrid.DataGridWidget.prototype = { 		init: function() { 			this.gridWidget.init(); 		} 	};  	DataGrid.DataGridWidget.prototype = { 		init: function() { 			this.gridWidget.init(); 		} 	};  	DataGrid.DataGridWidget.prototype = { 		init: function() { 			this.gridWidget.init(); 		} 	};  	DataGrid.DataGridWidget.prototype = { 		init: function() { 			this.gridWidget.init(); 		} 	};  	DataGrid.DataGridWidget.prototype = { 		init: function() { 			this.gridWidget.init(); 		} 	};  	DataGrid.DataGridWidget.prototype = { 		
 if (this.ponged && reshape) {     this.ponged = false     this.ponged = false     this.ponged = false     this.ponged = false     this.ponged = false     this.ponged = false     this.ponged = false     this.ponged = false     this.ponged = false     this.ponged = false     this.ponged = false     this.ponged = false     this.ponged = false     this.ponged = false     this.ponged = false     this.ponged = false     this.ponged = false     this.ponged = false     this.ponged = false     this.ponged = false     this.ponged = false     this.ponged = false     this.ponged = false     this.ponged = false     this.ponged = false     this.ponged = false     this.ponged = false     this.ponged = false     this.ponged = false     this.ponged = false     this.ponged = false     this.ponged = false     this.ponged = false     this.ponged = false     this.ponged = false     this.ponged = false     this.ponged = false     this.ponged = false     this.ponged = false     this.ponged = false     this.ponged = false     this.ponged = false     this.ponged = false     this.ponged = false     this.ponged = false     this.ponged = false     this.ponged = false     this.ponged = false     this.ponged = false     this.ponged = false     this.ponged = false     this.ponged = false     this.ponged = false     this.ponged = false     this.ponged = false     this.ponged = false     this.ponged = false     this.ponged = false     this.ponged = false     this.ponged = false     this.ponged = false     this.ponged = false     this.
<?php  /*  * This file is part of the Symfony package.  *  * (c) Fabien Potencier <fabien@symfony.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace Symfony\Component\Form\Extension\Core\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface; use Symfony\Component\Validator\Constraints as Assert; use Symfony\Component\Validator\Constraints\NotBlank; use Symfony\Component\Validator\Constraints\Length; use Symfony\Component\Validator\Constraints\Regex; use Symfony\Component\Validator\Exception\UnexpectedTypeException; use Symfony\Component\Validator\Validator; use Symfony\Component\Validator\ValidatorInterface;  /**  * @author Fabien Potencier <fabien@symfony.com>  */ class TextType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'Symfony\Component\Form\Extension\Core\Type\TextType\NameType',                 'required' => false,                 'attr' => array(                     'class' => 'form-control',                 ),             ))             ->add('value', 'text', array(                 'label' => 'Symfony\Component\Form\Extension\Core\Type\TextType\ValueType',                 'required' => false,                 'attr' => array(                     'class' => 'form-control',                 ),             ))         ;     }      /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Symfony\Component\Form\Extension\Core\Type\TextType'         ));     }      /**      *
   test.done() })  test.async('./b', function(b) {   test.done() })  test.async('./c', function(c) {   test.done() })  test.async('./d', function(d) {   test.done() })  test.async('./e', function(e) {   test.done() })  test.async('./f', function(f) {   test.done() })  test.async('./g', function(g) {   test.done() })  test.async('./h', function(h) {   test.done() })  test.async('./i', function(i) {   test.done() })  test.async('./j', function(j) {   test.done() })  test.async('./k', function(k) {   test.done() })  test.async('./l', function(l) {   test.done() })  test.async('./m', function(m) {   test.done() })  test.async('./n', function(n) {   test.done() })  test.async('./o', function(o) {   test.done() })  test.async('./p', function(p) {   test.done() })  test.async('./q', function(q) {   test.done() })  test.async('./r', function(r) {   test.done() })  test.async('./s', function(s) {   test.done() })  test.async('./t', function(t) {   test.done() })  test.async('./u', function(u) {   test.done() })  test.async('./v', function(v) {   test.done() })  test.async('./w', function(w) {   test.done
		this.passthrough('/write-coverage'); 		this.passthrough('/write-coverage'); 		this.passthrough('/write-coverage'); 		this.passthrough('/write-coverage'); 		this.passthrough('/write-coverage'); 		this.passthrough('/write-coverage'); 		this.passthrough('/write-coverage'); 		this.passthrough('/write-coverage'); 		this.passthrough('/write-coverage'); 		this.passthrough('/write-coverage'); 		this.passthrough('/write-coverage'); 		this.passthrough('/write-coverage'); 		this.passthrough('/write-coverage'); 		this.passthrough('/write-coverage'); 		this.passthrough('/write-coverage'); 		this.passthrough('/write-coverage'); 		this.passthrough('/write-coverage'); 		this.passthrough('/write-coverage'); 		this.passthrough('/write-coverage'); 		this.passthrough('/write-coverage'); 		this.passthrough('/write-coverage'); 		this.passthrough('/write-coverage'); 		this.passthrough('/write-coverage'); 		this.passthrough('/write-coverage'); 		this.passthrough('/write-coverage'); 		this.passthrough('/write-coverage'); 		this.passthrough('/write-coverage'); 		this.passthrough('/write-coverage'); 		this.passthrough('/write-coverage'); 		this.passthrough('/write-coverage'); 		this.passthrough('/write-coverage'); 		this.passthrough('/write-coverage'); 		this.passthrough('/write-coverage'); 		this.passthrough('/write-coverage'); 		this.passthrough('/write-coverage'); 		this.passthrough('/write-coverage'); 		this.pas
<?php /**  * Zend Framework  *  * LICENSE  *  * This source file is subject to the new BSD license that is bundled  * with this package in the file LICENSE.txt.  * It is also available through the world-wide-web at this URL:  * http://framework.zend.com/license/new-bsd  * If you did not receive a copy of the license and are unable to  * obtain it through the world-wide-web, please send an email  * to license@zend.com so we can send you a copy immediately.  *  * @category   Zend  * @package    Zend_Service  * @subpackage DeveloperGarden  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  * @version    $Id$  */  /**  * @see Zend_Service_DeveloperGarden_Exception  */ // require_once 'Zend/Service/DeveloperGarden/Exception.php';  /**  * @category   Zend  * @package    Zend_Service  * @subpackage DeveloperGarden  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  */ class Zend_Service_DeveloperGarden_Exception extends Zend_Service_DeveloperGarden_Exception { } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
if (wantedStates.length === 0) {             return q(null);         } if (wantedStates.length === 1) {             return q(null);         } if (wantedStates.length === 2) {             return q(null);         } if (wantedStates.length === 3) {             return q(null);         } if (wantedStates.length === 4) {             return q(null);         } if (wantedStates.length === 5) {             return q(null);         } if (wantedStates.length === 6) {             return q(null);         } if (wantedStates.length === 7) {             return q(null);         } if (wantedStates.length === 8) {             return q(null);         } if (wantedStates.length === 9) {             return q(null);         } if (wantedStates.length === 10) {             return q(null);         } if (wantedStates.length === 11) {             return q(null);         } if (wantedStates.length === 12) {             return q(null);         } if (wantedStates.length === 13) {             return q(null);         } if (wantedStates.length === 14) {             return q(null);         } if (wantedStates.length === 15) {             return q(null);         } if (wantedStates.length === 16) {             return q(null);         } if (wantedStates.length === 17) {             return q(null);         } if (wantedStates.length === 18) {             return q(null);         } if (wantedStates.length === 19) {             return q(null);         } if (wantedStates.length === 20) {             return q(null);         } if (wantedStates.length === 21) {             return q(null);         } if (wantedStates.length === 22) {             return q(null);         } if (wantedStates.length === 23) {             return q(null);         } if (wantedStates.length === 24) {             return q(null);         } if (wantedStates.length === 25) {             return q(null);         } if (wantedStates.length === 26) {             return q(null);        
[key] = options }  function add(key, options) {     if (!this._states[key]) {         this._states[key] = {}     }     this._states[key][options] = options }  function get(key) {     return this._states[key] }  function set(key, options) {     if (!this._states[key]) {         this._states[key] = {}     }     this._states[key][options] = options }  function get(key) {     return this._states[key] }  function set(key, options) {     if (!this._states[key]) {         this._states[key] = {}     }     this._states[key][options] = options }  function get(key) {     return this._states[key] }  function set(key, options) {     if (!this._states[key]) {         this._states[key] = {}     }     this._states[key][options] = options }  function get(key) {     return this._states[key] }  function set(key, options) {     if (!this._states[key]) {         this._states[key] = {}     }     this._states[key][options] = options }  function get(key) {     return this._states[key] }  function set(key, options) {     if (!this._states[key]) {         this._states[key] = {}     }     this._states[key][options] = options }  function get(key) {     return this._states[key] }  function set(key, options) {     if (!this._states[key]) {         this._states[key] = {}     }     this._states[key][options] = options }  function get(key) {     return this._states[key] }  function set(key, options) {     if (!this._states[key]) {         this._states[key] = {}     } 
 this.masksProperties = this.masksProperties || [];  this.masksProperties.forEach(function(mask) {   if (this.masksProperties.indexOf(mask) === -1) {     this.masksProperties.push(mask);   } });  this.masksProperties.forEach(function(mask) {   if (this.masksProperties.indexOf(mask) === -1) {     this.masksProperties.push(mask);   } });  this.masksProperties.forEach(function(mask) {   if (this.masksProperties.indexOf(mask) === -1) {     this.masksProperties.push(mask);   } });  this.masksProperties.forEach(function(mask) {   if (this.masksProperties.indexOf(mask) === -1) {     this.masksProperties.push(mask);   } });  this.masksProperties.forEach(function(mask) {   if (this.masksProperties.indexOf(mask) === -1) {     this.masksProperties.push(mask);   } });  this.masksProperties.forEach(function(mask) {   if (this.masksProperties.indexOf(mask) === -1) {     this.masksProperties.push(mask);   } });  this.masksProperties.forEach(function(mask) {   if (this.masksProperties.indexOf(mask) === -1) {     this.masksProperties.push(mask);   } });  this.masksProperties.forEach(function(mask) {   if (this.masksProperties.indexOf(mask) === -1) {     this.masksProperties.push(mask);   } });  this.masksProperties.forEach(function(mask) {   if (this.masksProperties.indexOf(mask) === -1) {     this.masksProperties.push(mask);   } });  this.masksProperties.forEach(function(mask) {   if (this.masksProperties.indexOf(mask) === -1) {     this.masksProperties.push(mask);   } });  this.masksProperties.for
<?php  /*  * This file is part of the Symfony package.  *  * (c) Fabien Potencier <fabien@symfony.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace Symfony\Bundle\FrameworkBundle\DependencyInjection;  use Symfony\Component\DependencyInjection\ContainerBuilder; use Symfony\Component\Config\FileLocator; use Symfony\Component\HttpKernel\DependencyInjection\Extension; use Symfony\Component\DependencyInjection\Loader;  /**  * This is the class that loads and manages your bundle configuration  *  * To learn more see {@link http://symfony.com/doc/current/cookbook/bundles/extension.html}  */ class SymfonyFrameworkExtension extends Extension {     /**      * {@inheritdoc}      */     public function load(array $configs, ContainerBuilder $container)     {         $configuration = new Configuration();         $config = $this->processConfiguration($configuration, $configs);          $loader = new Loader\YamlFileLoader($container, new FileLocator(__DIR__.'/../Resources/config'));         $loader->load('services.yml');     } } 
﻿using System; using System.Collections.Generic; using System.Linq; using System.Text; using System.Threading.Tasks; using System.Windows; using System.Windows.Controls; using System.Windows.Data; using System.Windows.Documents; using System.Windows.Input; using System.Windows.Media; using System.Windows.Media.Imaging; using System.Windows.Navigation; using System.Windows.Shapes; using System.Windows.Shapes.Primitives; using System.Windows.Shapes.DataAnnotations; using System.Windows.Documents; using System.Windows.Input; using System.Windows.Media; using System.Windows.Media.Imaging; using System.Windows.Navigation; using System.Windows.Shapes.DataAnnotations; using System.Windows.Shapes; using System.Windows.Shapes.DesignerSerialization; using System.Windows.Shapes; using Microsoft.Phone.Controls; using Microsoft.Phone.Shell; using Microsoft.Phone.Shell.Controls; using Microsoft.Phone.Shell.Data; using Microsoft.Phone.Shell.Documents; using Microsoft.Phone.Shell.Input; using Microsoft.Phone.Shell.Media; using Microsoft.Phone.Shell.Navigation; using Microsoft.Phone.Shell.Shapes; using System.Collections; using System.Collections.Generic; using System.Collections.ObjectModel; using System.Collections.Specialized; using System.ComponentModel; using System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema; using Microsoft.Phone.Shell; using Microsoft.Phone.Shell.Controls; using Microsoft.Phone.Shell.Controls.Primitives; using Microsoft.Phone.Shell.Data; using Microsoft.Phone.Shell.Documents; using Microsoft.Phone.Shell.Input; using Microsoft.Phone.Shell.Media; using Microsoft.Phone.Shell.Navigation; using Microsoft.Phone.Shell.Shapes; using System.Diagnostics; using System; using System.Collections; using System.Collections.ObjectModel; using System.Collections.Specialized; using System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema; 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializer; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializerProvider; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name')             ->add('description')         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */  package org.apache.ignite.internal.processors.cache.distributed.dht;  import org.apache.ignite.IgniteCheckedException; import org.apache.ignite.IgniteException; import org.apache.ignite.IgniteLogger; import org.apache.ignite.configuration.CacheConfiguration; import org.apache.ignite.configuration.IgniteConfiguration; import org.apache.ignite.internal.IgniteEx; import org.apache.ignite.internal.processors.cache.GridCacheContext; import org.apache.ignite.internal.processors.cache.GridCacheMode; import org.apache.ignite.internal.processors.cache.GridCacheWriteSynchronizationMode; import org.apache.ignite.internal.util.typedef.F; import org.apache.ignite.internal.util.typedef.internal.S; import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi; import org.apache.ignite.spi.discovery.tcp.ipfinder.TcpDiscoveryIpFinder; import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder; import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest; import org.apache.ignite.testframework.
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.product.name',                 'attr' => array(                     'class' => 'form-control',                 ),             ))             ->add('price', 'number', array(                 'label' => 'sylius.form.product.price',                 'attr' => array(                     'class' => 'form-control',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
<?php /**  * Zend Framework  *  * LICENSE  *  * This source file is subject to the new BSD license that is bundled  * with this package in the file LICENSE.txt.  * It is also available through the world-wide-web at this URL:  * http://framework.zend.com/license/new-bsd  * If you did not receive a copy of the license and are unable to  * obtain it through the world-wide-web, please send an email  * to license@zend.com so we can send you a copy immediately.  *  * @category   Zend  * @package    Zend_Service  * @subpackage DeveloperGarden  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  * @version    $Id$  */  /**  * @see Zend_Service_DeveloperGarden_Exception  */ // require_once 'Zend/Service/DeveloperGarden/Exception.php';  /**  * @category   Zend  * @package    Zend_Service  * @subpackage DeveloperGarden  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  */ class Zend_Service_DeveloperGarden_Exception extends Zend_Service_DeveloperGarden_Exception { } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
     it('2.8 connection request queue (basic functionality)', function(){     this.timeout(0);     function getBlockingSql(secondsToBlock) {         return getBlockingSql(secondsToBlock);     }     it('2.8 connection request queue (basic functionality)', function(){     this.timeout(0);     function getBlockingSql(secondsToBlock) {         return getBlockingSql(secondsToBlock);     }     it('2.8 connection request queue (basic functionality)', function(){     this.timeout(0);     function getBlockingSql(secondsToBlock) {         return getBlockingSql(secondsToBlock);     }     it('2.8 connection request queue (basic functionality)', function(){     this.timeout(0);     function getBlockingSql(secondsToBlock) {         return getBlockingSql(secondsToBlock);     }     it('2.8 connection request queue (basic functionality)', function(){     this.timeout(0);     function getBlockingSql(secondsToBlock) {         return getBlockingSql(secondsToBlock);     }     it('2.8 connection request queue (basic functionality)', function(){     this.timeout(0);     function getBlockingSql(secondsToBlock) {         return getBlockingSql(secondsToBlock);     }     it('2.8 connection request queue (basic functionality)', function(){     this.timeout(0);     function getBlockingSql(secondsToBlock) {         return getBlockingSql(secondsToBlock);     }     it('2.8 connection request queue (basic functionality)', function(){     this.timeout(0);     function getBlockingSql(secondsToBlock) {         return getBlockingSql(secondsToBlock);     }     it('2.8 connection request queue (basic functionality)', function(){     this.timeout(0);     function getBlockingSql(secondsToBlock) {         return getBlockingSql(secondsToBlock);     }     it('2.8 connection request queue (basic functionality)', function(){     this.timeout(0);     function getBlockingSql(secondsToBlock) {         return getBlockingSql(secondsToBlock);     }     it('2.8 connection request queue
            tip = this;             cancelHide = true;         }, function() {             tip = null;             cancelHide = false;         });          this.hover(function() {             tip = this;             cancelHide = true;         }, function() {             tip = null;             cancelHide = false;         });          this.hover(function() {             tip = this;             cancelHide = true;         }, function() {             tip = null;             cancelHide = false;         });          this.hover(function() {             tip = this;             cancelHide = true;         }, function() {             tip = null;             cancelHide = false;         });          this.hover(function() {             tip = this;             cancelHide = true;         }, function() {             tip = null;             cancelHide = false;         });          this.hover(function() {             tip = this;             cancelHide = true;         }, function() {             tip = null;             cancelHide = false;         });          this.hover(function() {             tip = this;             cancelHide = true;         }, function() {             tip = null;             cancelHide = false;         });          this.hover(function() {             tip = this;             cancelHide = true;         }, function() {             tip = null;             cancelHide = false;         });          this.hover(function() {             tip = this;             cancelHide = true;         }, function() {             tip = null;             cancelHide = false;         });          this.hover(function() {             tip = this;             cancelHide = true;         }, function() {             tip = null;             cancelHide = false;         });          this.hover(function() {             tip = this;             cancelHide = true;         }, function() {             tip = null;             cancelHide = false;         });          this.hover(function() {             tip = this;             cancelHide = true;         }, function
<?php /**  * Zend Framework  *  * LICENSE  *  * This source file is subject to the new BSD license that is bundled  * with this package in the file LICENSE.txt.  * It is also available through the world-wide-web at this URL:  * http://framework.zend.com/license/new-bsd  * If you did not receive a copy of the license and are unable to  * obtain it through the world-wide-web, please send an email  * to license@zend.com so we can send you a copy immediately.  *  * @category   Zend  * @package    Zend_Service  * @subpackage DeveloperGarden  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  * @version    $Id$  */  /**  * @see Zend_Service_DeveloperGarden_Exception  */ require_once 'Zend/Service/DeveloperGarden/Exception.php';  /**  * @category   Zend  * @package    Zend_Service  * @subpackage DeveloperGarden  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  */ class Zend_Service_DeveloperGarden_Exception extends Zend_Service_DeveloperGarden_Exception { } 
     if (category == 'tv') {     for (let key in data) {         if (category == 'tv') {     for (let key2 in data) {             if (category == 'tv') {     for (let key3 in data) {                 if (category == 'tv') {     for (let key4 in data) {                     if (category == 'tv') {     for (let key5 in data) {                         if (category == 'tv') {     for (let key6 in data) {                             if (category == 'tv') {     for (let key7 in data) {                                 if (category == 'tv') {     for (let key8 in data) {                                     if (category == 'tv') {     for (let key9 in data) {                                         if (category == 'tv') {     for (let key10 in data) {                                             if (category == 'tv') {     for (let key11 in data) {                                                 if (category == 'tv') {     for (let key12 in data) {                                                     if (category == 'tv') {     for (let key13 in data) {                                                         if (category == 'tv') {     for (let key14 in data) {                                                             if (category == 'tv') {     for (let key15 in data) {                                                                 if (category == 'tv') {     for (let key16 in data) {                                                                     if (category == 'tv') {     for (let key17 in data) {                                                                         if (category == 'tv') {     for (let key18 in data) {                                                                             if (category == 'tv') {     for (let key19 in data) {                                                                                 if (category == 'tv') {     for (let key20 in data) {                                                                                     if (category == 'tv') {     for (let key21 in data) {                                                                                         if (category == 'tv') {     for (let key22 in data) {                                                                                             if (category == 'tv') {     for (let key23 in data) {                                                                                                 if (category == 'tv') {     for (let key24 in data) {                                                                                                     if (category == 'tv') {     for (let
  const instance2 = mount(PageProposal, {       doBefore: ({}) => {} });  const instance3 = mount(PageProposal, {       doBefore: ({}) => {} });  const instance4 = mount(PageProposal, {       doBefore: ({}) => {} });  const instance5 = mount(PageProposal, {       doBefore: ({}) => {} });  const instance6 = mount(PageProposal, {       doBefore: ({}) => {} });  const instance7 = mount(PageProposal, {       doBefore: ({}) => {} });  const instance8 = mount(PageProposal, {       doBefore: ({}) => {} });  const instance9 = mount(PageProposal, {       doBefore: ({}) => {} });  const instance10 = mount(PageProposal, {       doBefore: ({}) => {} });  const instance11 = mount(PageProposal, {       doBefore: ({}) => {} });  const instance12 = mount(PageProposal, {       doBefore: ({}) => {} });  const instance13 = mount(PageProposal, {       doBefore: ({}) => {} });  const instance14 = mount(PageProposal, {       doBefore: ({}) => {} });  const instance15 = mount(PageProposal, {       doBefore: ({}) => {} });  const instance16 = mount(PageProposal, {       doBefore: ({}) => {} });  const instance17 = mount(PageProposal, {       doBefore: ({}) => {} });  const instance18 = mount(PageProposal, {       doBefore: ({}) => {} });  const instance19 = mount(PageProposal, {       doBefore: ({}) => {} });  const instance20 = mount(PageProposal, {       doBefore: ({}) => {} });  const instance21 = mount(PageProposal, {       doBefore: ({}) => {} });  const instance22 = mount(PageProposal, {       doBefore: ({}) => {} });  const instance23 = mount(PageProposal, {       doBefore: ({}) => {} });  const instance24 = mount(PageProposal, {       doBefore: ({}) => {} });  const instance25 = mount(PageProposal, {       doBefore: ({}) => {} });  const instance26 = mount(PageProposal, {       doBefore: ({}) => {} });  const instance27 = mount(PageProposal
// Copyright (c) 2012 The Chromium Authors. All rights reserved. // Use of this source code is governed by a BSD-style license that can be // found in the LICENSE file.  #ifndef CHROME_BROWSER_CHROMEOS_LOGIN_LOGIN_MANAGER_H_ #define CHROME_BROWSER_CHROMEOS_LOGIN_LOGIN_MANAGER_H_  #include <string> #include <vector>  #include "base/basictypes.h" #include "base/compiler_specific.h" #include "base/memory/scoped_ptr.h" #include "base/memory/weak_ptr.h" #include "base/observer_list.h" #include "base/time/time.h" #include "chrome/browser/chromeos/login/login_manager_delegate.h" #include "chrome/browser/chromeos/login/user_manager.h" #include "chrome/browser/chromeos/login/user_manager_factory.h" #include "chrome/browser/profiles/profile.h" #include "content/public/browser/notification_observer.h" #include "content/public/browser/notification_registrar.h" #include "content/public/browser/notification_registrar_observer.h" #include "content/public/browser/notification_source.h" #include "content/public/browser/notification_types.h" #include "content/public/browser/render_view_host.h" #include "content/public/browser/render_widget_host.h" #include "content/public/browser/web_contents.h" #include "content/public/browser/web_contents_observer.h" #include "content/public/browser/web_contents_user_data.h" #include "content/public/browser/web_ui.h" #include "content/public/browser/web_ui_data_source.h" #include "content/public/browser/web_ui_util.h" #include "content/public/browser/web
 "self": { "href": "/orders" },   },   "orders": {  "self": { "href": "/orders" },   },   "orders": {  "self": { "href": "/orders" },   },   "orders": {  "self": { "href": "/orders" },   },   "orders": {  "self": { "href": "/orders" },   },   "orders": {  "self": { "href": "/orders" },   },   "orders": {  "self": { "href": "/orders" },   },   "orders": {  "self": { "href": "/orders" },   },   "orders": {  "self": { "href": "/orders" },   },   "orders": {  "self": { "href": "/orders" },   },   "orders": {  "self": { "href": "/orders" },   },   "orders": {  "self": { "href": "/orders" },   },   "orders": {  "self": { "href": "/orders" },   },   "orders": {  "self": { "href": "/orders" },   },   "orders": {  "self": { "href": "/orders" },   },   "orders": {  "self": { "href": "/orders" },   },   "orders": {  "self": { "href": "/orders" },   },   "orders": {  "self": { "href": "/orders" },   },   "orders": {  "self": { "href": "/orders" },   },   "orders": {  "self": { "href": "/orders" },   },   "orders": {  "self": { "href": "/orders" },   },   "orders": {  "self": { "href": "/orders" },   },   "orders": {  "self": { "href": "/orders" },   },   "orders": {  "self": { "href": "/orders" },   },   "orders": {  "self": { "href": "/orders" },   },   "orders": {  "self": { "href": "/orders"
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.product.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.product.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.product.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.product.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
﻿using System; using System.Collections.Generic; using System.Linq; using System.Text; using System.Threading.Tasks; using System.Windows; using System.Windows.Controls; using System.Windows.Data; using System.Windows.Documents; using System.Windows.Input; using System.Windows.Media; using System.Windows.Media.Imaging; using System.Windows.Navigation; using System.Windows.Shapes; using Microsoft.Phone.Controls; using Microsoft.Phone.Shell; using Microsoft.Phone.Shell.Interop; using System.IO; using System.Collections; using System.Collections.Generic; using System.Collections.ObjectModel; using System.ComponentModel; using System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema; using System.ComponentModel.DataAnnotations.Properties; using System.Diagnostics; using System.Diagnostics.CodeAnalysis; using System.Globalization; using System.IO.Compression; using System.Linq; using System.Net; using System.Net.Http; using System.Net.Http.Formatting; using System.Net.Http.Headers; using System.Web.Http; using System.Web.Http.Controllers; using System.Web.Http.Description; using System.Web.Http.Filters; using System.Web.Http.Routing; using System.Xml.Linq; using System.Xml; using System.Xml.Serialization; using System.Xml.Serialization.Json; using System.Xml.Serialization.XmlDocument; using System.Xml.Serialization.XmlSerializer; using System.Xml.Serialization.XmlSerializerSettings; using System.Xml.Serialization.XmlTypeMapping; using System.Xml; using System.Xml.Serialization.XmlWriter; using System.Xml.Serialization.XmlWriter.Formatting; using System.Xml.Serialization.XmlWriter.Settings; using System.Xml.Serialization.XmlTypeMapping.Attributes; using System.Xml.Serialization.XmlWriter.Settings.Formatting; using System.Xml.Serialization.XmlWriter.Settings.SerializationContext; using System.Xml.Serialization.XmlWriter.Settings.
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */  package org.apache.druid.query.aggregation;  import com.fasterxml.jackson.annotation.JsonCreator; import com.fasterxml.jackson.annotation.JsonProperty; import com.fasterxml.jackson.annotation.JsonTypeInfo; import com.fasterxml.jackson.annotation.JsonTypeInfo.As; import com.fasterxml.jackson.annotation.JsonTypeInfo.Id; import com.fasterxml.jackson.annotation.JsonTypeName; import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Iterables; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import org.apache.druid.java.util.common.ISE; import org.apache.druid.java.util.common.StringUtils; import org.apache.druid.java.util.common.logger.Logger; import org.apache.druid.java.util.common.logger.LoggerFactory; import org.apache.druid.java.util.common.guava.Sequence; import org.apache.dr
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
// Copyright (c) Microsoft Corporation. All rights reserved. // Licensed under the MIT License. See License.txt in the project root for // license information. //  // Code generated by Microsoft (R) AutoRest Code Generator. // Changes may cause incorrect behavior and will be lost if the code is // regenerated.  'use strict';  const models = require('./index');  const logger = require('./logger'); const util = require('./util'); const loggerFactory = require('./logger-factory');  const logger = loggerFactory.getLogger(module.exports);  // Version information for the service. const serviceVersion = '2020-05-01-preview';  // The original name of the service. const serviceName = 'Microsoft Azure';  // The original version of the service. const serviceVersion = '2020-05-01-preview';  // The preferred language for the response. const preferredLanguage = 'en-US';  // The preferred language for the response. const preferredLanguageForResponse = 'en-US';  // The preferred language for the response. const preferredLanguageForResponseForResponse = 'en-US';  // The preferred language for the response. const preferredLanguageForResponseForResponseForResponse = 'en-US';  // The preferred language for the response. const preferredLanguageForResponseForResponseForResponse = 'en-US';  // The preferred language for the response. const preferredLanguageForResponseForResponseForResponse = 'en-US';  // The preferred language for the response. const preferredLanguageForResponseForResponseForResponseForResponse = 'en-US';  // The preferred language for the response. const preferredLanguageForResponseForResponseForResponseForResponseForResponseForResponseForResponseForResponseForResponseForResponseForResponseForResponseForResponseForResponseForResponseForResponseForResponseForResponseForResponseForResponseForResponseForResponseForResponseForResponseForResponseForResponseForResponseForResponseForResponseForResponseForResponseForResponseForResponseForResponseForResponseForResponseForResponseForResponseForResponseForResponseForResponseForResponseForResponseForResponseForResponseForResponseForResponseForResponseForResponseForResponseForResponseForResponseForResponseForResponseForResponseForResponseForResponseFor
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */ package org.apache.beam.runners.core;  import static org.junit.Assert.assertEquals; import static org.junit.Assert.assertFalse; import static org.junit.Assert.assertNotNull; import static org.junit.Assert.assertNull; import static org.junit.Assert.assertTrue; import static org.junit.Assert.fail;  import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Iterables; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import com.google.common.util.concurrent.Futures; import com.google.common.util.concurrent.ListenableFuture; import com.google.common.util.concurrent.ListeningExecutorService; import com.google.common.util.concurrent.MoreExecutors; import com.google.common.util.concurrent.ThreadFactoryBuilder; import com.google.common.util.concurrent.TimeUnit; import com.google.common.util.concurrent.TimeoutException; import com.google.common.util.concurrent.TimeoutException.
/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */  package org.apache.ignite.internal.processors.cache;  import org.apache.ignite.IgniteCheckedException; import org.apache.ignite.IgniteException; import org.apache.ignite.IgniteLogger; import org.apache.ignite.internal.IgniteInternalFuture; import org.apache.ignite.internal.util.typedef.F; import org.apache.ignite.internal.util.typedef.internal.S; import org.apache.ignite.internal.util.typedef.internal.U; import org.apache.ignite.internal.util.typedef.internal.V; import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi; import org.apache.ignite.spi.discovery.tcp.ipfinder.TcpDiscoveryIpFinder; import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder; import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest; import org.apache.ignite.testframework.junits.common.GridCommonTest; import org.junit.Test;  import static org.apache.ignite.cache.CacheAtomicityMode.TRANSACTIONAL; import static org.apache.ignite.cache.CacheMode.
 // Copyright (c) Microsoft Corporation. All rights reserved. // Licensed under the MIT License. See License.txt in the project root for // license information. // // Code generated by Microsoft (R) AutoRest Code Generator. // Changes may cause incorrect behavior and will be lost if the code is // regenerated.  namespace Microsoft.Azure.Management.Network.Models {     using Microsoft.Azure;     using Microsoft.Azure.Management;     using Microsoft.Azure.Management.Network;     using Microsoft.Azure.Management.Network.Models;     using Newtonsoft.Json;     using System.Collections;     using System.Collections.Generic;     using System.Linq;     using System.Net;     using System.Net.Http;     using System.Net.Http.Headers;     using System.Text;     using System.Text.RegularExpressions;     using System.Collections;     using System.Collections.Generic;     using System.Collections.ObjectModel;     using System.Runtime.Serialization;     using Newtonsoft.Json;     using System.Text.RegularExpressions;     using System.Collections;     using System.Collections.ObjectModel;     using System.Runtime.Serialization;     using Newtonsoft.Json.Converters;     using System.Runtime.Serialization;     using System.ComponentModel.DataAnnotations;     using System.ComponentModel.DataAnnotations.Schema;     using System.ComponentModel.DataAnnotations.Schema.Url;     using System.ComponentModel.DataAnnotations;     using System.ComponentModel.DataAnnotations;     using System.ComponentModel.DataAnnotations.Schema;     using System.ComponentModel.DataAnnotations;     using System.ComponentModel.DataAnnotations.Schema.Url;     using System.ComponentModel.DataAnnotations;     using System.ComponentModel.DataAnnotations;     using System.ComponentModel.DataAnnotations;     using System.ComponentModel.DataAnnotations;     using System.ComponentModel.DataAnnotations.Schema;     using System.ComponentModel.DataAnnotations;     using System.ComponentModel.DataAnnotations;     using System.ComponentModel.DataAnnotations;     using System.ComponentModel.
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */ package org.apache.beam.runners.core;  import static org.junit.Assert.assertEquals; import static org.junit.Assert.assertFalse; import static org.junit.Assert.assertNotNull; import static org.junit.Assert.assertNull; import static org.junit.Assert.assertTrue; import static org.junit.Assert.fail;  import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Iterables; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import com.google.common.util.concurrent.Futures; import com.google.common.util.concurrent.ListenableFuture; import com.google.common.util.concurrent.ListeningExecutorService; import com.google.common.util.concurrent.MoreExecutors; import com.google.common.util.concurrent.ThreadFactoryBuilder; import com.google.common.util.concurrent.TimeUnit; import com.google.common.util.concurrent.TimeoutException; import com.google.common.util.concurrent.TimeoutException.
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import java.util.ArrayList; import java.util.List;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.data.accessors.ITupleReference; import org.apache.hyracks.dataflow.common.data.
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryService; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.data.accessors.ITupleReference; import org.apache.hyracks
<?php /**  * Zend Framework  *  * LICENSE  *  * This source file is subject to the new BSD license that is bundled  * with this package in the file LICENSE.txt.  * It is also available through the world-wide-web at this URL:  * http://framework.zend.com/license/new-bsd  * If you did not receive a copy of the license and are unable to  * obtain it through the world-wide-web, please send an email  * to license@zend.com so we can send you a copy immediately.  *  * @category   Zend  * @package    Zend_Service  * @subpackage DeveloperGarden  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  * @version    $Id$  */  /**  * @see Zend_Service_DeveloperGarden_Exception  */ require_once 'Zend/Service/DeveloperGarden/Exception.php';  /**  * @category   Zend  * @package    Zend_Service  * @subpackage DeveloperGarden  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  */ class Zend_Service_DeveloperGarden_Exception extends Zend_Service_DeveloperGarden_Exception { } 
﻿using System.Reflection; using System.Runtime.CompilerServices; using System.Runtime.InteropServices;  // General Information about an assembly is controlled through the following  // set of attributes. Change these attribute values to modify the information // associated with an assembly. [assembly: AssemblyTitle("S")] [assembly: AssemblyDescription("")] [assembly: AssemblyConfiguration("")] [assembly: AssemblyCompany("")] [assembly: AssemblyProduct("S")] [assembly: AssemblyCopyright("Copyright ©  2015")] [assembly: AssemblyTrademark("")] [assembly: AssemblyCulture("")]  // Setting ComVisible to false makes the types in this assembly not visible  // to COM components.  If you need to access a type in this assembly from  // COM, set the ComVisible attribute to true on that type. [assembly: ComVisible(false)]  // The following GUID is for the ID of the typelib if this project is exposed to COM [assembly: Guid("7a7a7a7a7")]  // Version information for an assembly consists of the following four values: // //      Major Version //      Minor Version  //      Build Number //      Revision // // You can specify all the values or you can default the Build and Revision Numbers  // by using the '*' as shown below: // [assembly: AssemblyVersion("1.0.*")] [assembly: AssemblyVersion("1.0.0.0")] [assembly: AssemblyFileVersion("1.0.0.0")] [assembly: AssemblyInformationalVersion("1.0.0.0")] [assembly: AssemblyFileVersion("1.0.0.0")] [assembly: ComVisible(false)]
(function () {   var s = require('../index')     , assert = require('chai').assert     , _ = require('underscore');    describe('rest', function () {     var s = require('../index')     , assert = require('chai').assert     , _ = require('underscore');      describe('get', function () {       var s = require('../index')     , assert = require('chai').assert     , _ = require('underscore');        describe('get', function () {         var s = require('../index')     , assert = require('chai').assert     , _ = require('underscore');          describe('get', function () {           var s = require('../index')     , assert = require('chai').assert     , _ = require('underscore');            describe('get', function () {             var s = require('../index')     , assert = require('chai').assert     , _ = require('underscore');              describe('get', function () {               var s = require('../index')     , assert = require('chai').assert     , _ = require('underscore');                describe('get', function () {                 var s = require('../index')     , assert = require('chai').assert     , _ = require('underscore');                  describe('get', function () {                   var s = require('../index')     , assert = require('chai').assert     , _ = require('underscore');                    describe('get', function () {                     var s = require('../index')     , assert = require('chai').assert     , _ = require('underscore');                    describe('get', function () {                     var s = require('../index')     , assert = require('chai').assert     , _ = require('underscore');                    describe('get', function () {                     var s = require('../index')     , assert = require('chai').assert     , _ = require('underscore');                    describe('get', function () {                     var s = require('../index')     , assert = require('chai').assert     , _ = require('underscore');                    describe('get', function () {
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.functions.IFunctionDescriptorProvider; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.ITupleReference; import org.apache.hyracks.dataflow.common.data.accessors.ITupleReferenceFactory; import org.apache.hyracks.dataflow.common.data
 return this.file; });  $_M(c$, "autoSelectOnSave",   function () { return this.autoSelectOnLoad; });  $_M(c$, "autoSelectOnLoad",   function () { return this.autoSelectOnLoad; });  $_M(c$, "autoSelectOnLoad",   function () { return this.autoSelectOnLoad; });  $_M(c$, "autoSelectOnLoad",   function () { return this.autoSelectOnLoad; });  $_M(c$, "autoSelectOnLoad",   function () { return this.autoSelectOnLoad; });  $_M(c$, "autoSelectOnLoad",   function () { return this.autoSelectOnLoad; });  $_M(c$, "autoSelectOnLoad",   function () { return this.autoSelectOnLoad; });  $_M(c$, "autoSelectOnLoad",   function () { return this.autoSelectOnLoad; });  $_M(c$, "autoSelectOnLoad",   function () { return this.autoSelectOnLoad; });  $_M(c$, "autoSelectOnLoad",   function () { return this.autoSelectOnLoad; });  $_M(c$, "autoSelectOnLoad",   function () { return this.autoSelectOnLoad; });  $_M(c$, "autoSelectOnLoad",   function () { return this.autoSelectOnLoad; });  $_M(c$, "autoSelectOnLoad",   function () { return this.autoSelectOnLoad; });  $_M(c$, "autoSelectOnLoad",   function () { return this.autoSelectOnLoad; });  $_M(c$, "autoSelectOnLoad",   function () { return this.autoSelectOnLoad; });  $_M(c$, "autoSelectOnLoad",   function () { return this.autoSelectOnLoad; });  $_M(c$, "autoSelectOnLoad",   function () { return this.autoSelectOnLoad; });  $_M(c$, "autoSelectOnLoad",   function () { return this.autoSelectOnLoad; 
.dev.warn('Unknown config property `' + key + '` for app, value:', value);     }      /**      * @param {string} key      * @param {string} value      */     set(key, value) {         if (typeof value === 'string') {             this.set(key, value);         } else {             this.set(key, value);         }     }      /**      * @param {string} key      * @param {string} value      */     remove(key, value) {         if (typeof value === 'string') {             this.remove(key, value);         } else {             this.remove(key, value);         }     }      /**      * @param {string} key      * @param {string} value      */     remove(key, value) {         if (typeof value === 'string') {             this.remove(key, value);         } else {             this.remove(key, value);         }     }      /**      * @param {string} key      * @param {string} value      */     set(key, value) {         if (typeof value === 'string') {             this.set(key, value);         } else {             this.set(key, value);         }     }      /**      * @param {string} key      * @param {string} value      */     set(key, value) {         if (typeof value === 'string') {             this.set(key, value);         } else {             this.set(key, value);         }     }      /**      * @param {string} key      * @param {string} value      */     remove(key, value) {         if (typeof value === 'string') {             this.remove(key, value);         } else {             this.remove(key, value);         }     }      /**      * @param {string} key      * @param {string} value      */     remove(key
<?php /**  * Zend Framework  *  * LICENSE  *  * This source file is subject to the new BSD license that is bundled  * with this package in the file LICENSE.txt.  * It is also available through the world-wide-web at this URL:  * http://framework.zend.com/license/new-bsd  * If you did not receive a copy of the license and are unable to  * obtain it through the world-wide-web, please send an email  * to license@zend.com so we can send you a copy immediately.  *  * @category   Zend  * @package    Zend_Service  * @subpackage DeveloperGarden  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  * @version    $Id$  */  /**  * @see Zend_Service_DeveloperGarden_Exception  */ // require_once 'Zend/Service/DeveloperGarden/Exception.php';  /**  * @category   Zend  * @package    Zend_Service  * @subpackage DeveloperGarden  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  */ class Zend_Service_DeveloperGarden_Exception extends Zend_Service_DeveloperGarden_Exception { } 
     it("should concat 3 ports", function *() {     let result = [];     result.push(1);     result.push(2);     result.push(3);     result.push(4);     result.push(5);     result.push(6);     result.push(7);     result.push(8);     result.push(9);     result.push(10);     result.push(11);     result.push(12);     result.push(13);     result.push(14);     result.push(15);     result.push(16);     result.push(17);     result.push(18);     result.push(19);     result.push(20);     result.push(21);     result.push(22);     result.push(23);     result.push(24);     result.push(25);     result.push(26);     result.push(27);     result.push(28);     result.push(29);     result.push(30);     result.push(31);     result.push(32);     result.push(33);     result.push(34);     result.push(35);     result.push(36);     result.push(37);     result.push(38);     result.push(39);     result.push(40);     result.push(41);     result.push(42);     result.push(43);     result.push(44);     result.push(45);     result.push(46);     result.push(47);     result.push(48);     result.push(49);     result.push(50);     result.push(51);     result.push(52);     result.push(53);     result.push(54);     result.push(55);     result.push(56);     result.push(57);     result.push(58);     result.push(59);     result.push(60);     result.push(61);     result
 function isIterable(value) {     return isIterable(value) ? value :       Seq.isIterable(arguments);   } function isIterable(value) {     return isIterable(value) ? value :       Seq.isIterable(arguments);   } function isIterable(value) {     return isIterable(value) ? value :       Seq.isIterable(arguments);   } function isIterable(value) {     return isIterable(value) ? value :       Seq.isIterable(arguments);   } function isIterable(value) {     return isIterable(value) ? value :       Seq.isIterable(arguments);   } function isIterable(value) {     return isIterable(value) ? value :       Seq.isIterable(arguments);   } function isIterable(value) {     return isIterable(value) ? value :       Seq.isIterable(arguments);   } function isIterable(value) {     return isIterable(value) ? value :       Seq.isIterable(arguments);   } function isIterable(value) {     return isIterable(value) ? value :       Seq.isIterable(arguments);   } function isIterable(value) {     return isIterable(value) ? value :       Seq.isIterable(arguments);   } function isIterable(value) {     return isIterable(value) ? value :       Seq.isIterable(arguments);   } function isIterable(value) {     return isIterable(value) ? value :       Seq.isIterable(arguments);   } function isIterable(value) {     return isIterable(value) ? value :       Seq.isIterable(arguments);   } function isIterable(value) {     return isIterable(value) ? value :       Seq.isIterable(arguments);   } function isIterable(value) {     return isIterable(value) ? value :       Seq.isIterable(arguments);   } function isIterable(value) {     return isIterable(value) ? value :       Seq.isIterable(arguments);   } function isIterable(value) {     return isIterable(value) ? value :       Seq.isIterable(arguments);   } function isIterable(value) {     return isIterable(value) ? value :       Seq.isIterable(arguments);   } function isIterable(value)
 // Copyright (c) Microsoft Corporation. All rights reserved. // Licensed under the MIT License. See License.txt in the project root for // license information. // // Code generated by Microsoft (R) AutoRest Code Generator. // Changes may cause incorrect behavior and will be lost if the code is // regenerated.  namespace Microsoft.Azure.Management.Network.Models {     using Microsoft.Rest;     using Microsoft.Rest.Serialization;     using Newtonsoft.Json;     using System.Linq;     using System.Collections;     using System.Collections.Generic;     using System.Collections.ObjectModel;     using Newtonsoft.Json.Converters;     using System.Runtime;     using System.Runtime.Serialization;     using Microsoft.Rest.Serialization;     using Microsoft.Rest.Validation;     using Microsoft.Rest.Azure;     using Models;     using System.Collections;     using System.Collections.Generic;     using System.Collections.ObjectModel;     using System.Linq;     using System.Collections;     using System.Collections.Generic;     using System.Collections.ObjectModel.Serialization;     using Newtonsoft.Json;     using System.Runtime.Serialization;     using System.Net;     using System.Net.Http;     using System.Net.Http.Headers;     using System.Collections;     using System.Collections.Generic;     using System.Collections.ObjectModel;     using System.Runtime.Serialization;     using System.Net.Http.Headers;     using System.Collections;     using System.Collections.Generic;     using System.Collections.ObjectModel;     using System.Runtime.Serialization;     using System.Net.Http.Headers;     using System.Collections;     using System.Collections.Generic;     using System.Collections.ObjectModel;     using System.Runtime.Serialization;     using System.Net.Http;     using System.Net.Http.Headers;     using System.Collections;     using System.Collections.Generic;     using System.Collections.ObjectModel;     using System.Runtime.Serialization;     using System.Net.Http.Headers
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */  package org.apache.ignite.internal.processors.cache;  import org.apache.ignite.IgniteCheckedException; import org.apache.ignite.IgniteException; import org.apache.ignite.IgniteLogger; import org.apache.ignite.configuration.CacheConfiguration; import org.apache.ignite.configuration.IgniteConfiguration; import org.apache.ignite.internal.IgniteEx; import org.apache.ignite.internal.processors.cache.distributed.dht.*; import org.apache.ignite.internal.util.typedef.F; import org.apache.ignite.internal.util.typedef.internal.S; import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi; import org.apache.ignite.spi.discovery.tcp.ipfinder.TcpDiscoveryIpFinder; import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder; import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest; import org.apache.ignite.testframework.junits.common.GridCommonTest; import org.apache.ignite.testframework.junits.common.GridCommonTestUtils; import org.apache.ignite.testframework.
    return function(key) { return key > arguments[1][0] }   case 'LE':     return function(key) { return key <= arguments[1][0] }   case 'GT':     return function(key) { return key > arguments[1][0] }   case 'LE':     return function(key) { return key <= arguments[1][0] }   case 'EQ':     return function(key) { return key == arguments[1][0] }   case 'NE':     return function(key) { return key != arguments[1][0] }   case 'LEQ':     return function(key) { return key <= arguments[1][0] }   case 'GTQ':     return function(key) { return key > arguments[1][0] }   case 'LEQQ':     return function(key) { return key <= arguments[1][0] }   case 'EQQ':     return function(key) { return key == arguments[1][0] }   case 'NEQQ':     return function(key) { return key != arguments[1][0] }   case 'EQQQ':     return function(key) { return key == arguments[1][0] }   case 'NEQQQ':     return function(key) { return key != arguments[1][0] }   case 'NEQQQ':     return function(key) { return key != arguments[1][0] }   case 'NEQQQ':     return function(key) { return key != arguments[1][0] }   case 'NEQQQ':     return function(key) { return key != arguments[1][0] }   case 'NEQQQ':     return function(key) { return key != arguments[1][0] }   case 'NEQQQ':     return function(key) { return key != arguments[1][0] }   case 'NEQQQ':     return function(key) { return key != arguments[1][0] }   case 'NEQQQ':     return function(key) { return key != arguments[1][0] }   case 'NEQQQ':     return function(key) { return key != arguments[1][0
/*  * Copyright (c) 2008-2021, Hazelcast, Inc. All Rights Reserved.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */  package com.hazelcast.client.impl.protocol.codec;  import com.hazelcast.client.impl.protocol.ClientMessage; import com.hazelcast.client.impl.protocol.Generated; import com.hazelcast.client.impl.protocol.codec.builtin.*; import com.hazelcast.client.impl.protocol.codec.custom.*;  import javax.annotation.Nullable;  import static com.hazelcast.client.impl.protocol.ClientMessage.*; import static com.hazelcast.client.impl.protocol.codec.builtin.FixedSizeTypesCodec.*;  /*  * This file is auto-generated by the Hazelcast Client Protocol Code Generator.  * To change this file, edit the templates or the protocol  * definitions on the https://github.com/hazelcast/hazelcast-client-protocol  * and regenerate it.  */  /**  */ @Generated("1.0.0.0") public final class HazelcastMessageCodec {      private HazelcastMessageCodec() {     }      public static void registerAllExtensions(             @Nullable com.google.protobuf.ExtensionRegistryLite registry) {     }      public static void registerAllExtensions(             com.google.protobuf.ExtensionRegistry registry) {         registerAllExtensions(                 (com.google.protobuf.ExtensionRegistryLite) registry);     }      public static void registerAllExtensions(             com.google.protobuf.ExtensionRegistry registry
);  var wasmTapestry; if (wasmTapestry) {   console.log('wasmTapestry');   console.log(wasmTapestry);   console.log(wasmTapestry);   console.log(wasmTapestry);   console.log(wasmTapestry);   console.log(wasmTapestry);   console.log(wasmTapestry);   console.log(wasmTapestry);   console.log(wasmTapestry);   console.log(wasmTapestry);   console.log(wasmTapestry);   console.log(wasmTapestry);   console.log(wasmTapestry);   console.log(wasmTapestry);   console.log(wasmTapestry);   console.log(wasmTapestry);   console.log(wasmTapestry);   console.log(wasmTapestry);   console.log(wasmTapestry);   console.log(wasmTapestry);   console.log(wasmTapestry);   console.log(wasmTapestry);   console.log(wasmTapestry);   console.log(wasmTapestry);   console.log(wasmTapestry);   console.log(wasmTapestry);   console.log(wasmTapestry);   console.log(wasmTapestry);   console.log(wasmTapestry);   console.log(wasmTapestry);   console.log(wasmTapestry);   console.log(wasmTapestry);   console.log(wasmTapestry);   console.log(wasmTapestry);   console.log(wasmTapestry);   console.log(wasmTapestry);   console.log(wasmTapestry);   console.log(wasmTapestry);   console.log(wasmTapestry);   console.log(wasmTapestry);   console.log(wasmTapestry
<?php  /*  * This file is part of the Symfony package.  *  * (c) Fabien Potencier <fabien@symfony.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace Symfony\Component\Form\Extension\Core\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface; use Symfony\Component\Validator\Constraints as Assert; use Symfony\Component\Validator\Constraints\NotBlank; use Symfony\Component\Validator\Constraints\Length; use Symfony\Component\Validator\Constraints\Regex; use Symfony\Component\Validator\Exception\UnexpectedTypeException; use Symfony\Component\Validator\Validator; use Symfony\Component\Validator\ValidatorInterface;  /**  * @author Fabien Potencier <fabien@symfony.com>  */ class EmailType extends AbstractType {     /**      * {@inheritdoc}      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('email')             ->add('subject')             ->add('message')         ;     }      /**      * {@inheritdoc}      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Symfony\Component\Form\Extension\Core\Type\EmailType'         ));     }      /**      * {@inheritdoc}      */     public function getName()     {         return 'symfony_form_email';     }      /**      * {@inheritdoc}      */     public function getParent()     {         return 'form';     }      /**      * {@inheritdoc}      */     public function getBlockPrefix()     {         return 'symfony_form_email';     }      /**      * {@inheritdoc}      */     public function getName()     {         return 'symfony_form_email';     } 
// Copyright (c) Microsoft Corporation. All rights reserved. // Licensed under the MIT License. See License.txt in the project root for // license information. // // Code generated by Microsoft (R) AutoRest Code Generator. // Changes may cause incorrect behavior and will be lost if the code is // regenerated.  namespace Microsoft.Azure.Management.Network.Models {     using Microsoft.Rest;     using Microsoft.Rest.Serialization;     using Newtonsoft.Json;     using System.Collections;     using System.Collections.Generic;     using System.Linq;     using System.Net;     using System.Net.Http;     using System.Text;     using System.Threading;     using System.Threading.Tasks;      /// <summary>     /// Defines headers for ListVpnGateways operation.     /// </summary>     public partial class ListVpnGatewaysHeaders     {         /// <summary>         /// Initializes a new instance of the ListVpnGatewaysHeaders class.         /// </summary>         public ListVpnGatewaysHeaders()         {             CustomInit();         }          /// <summary>         /// Initializes a new instance of the ListVpnGatewaysHeaders class.         /// </summary>         /// <param name="nextLink">The URL to the next set of results.</param>         public ListVpnGatewaysHeaders(string nextPageLink)         {             NextLink = nextPageLink;             CustomInit();         }          /// <summary>         /// An initialization method that performs custom operations like setting defaults         /// </summary>         partial void CustomInit();          /// <summary>         /// Gets or sets the URL to the next set of results.         /// </summary>         [JsonProperty(PropertyName = "nextLink")]         public string NextLink { get; set; }          /// <summary>         /// Validate the object.         /// </summary>         /// <exception cref="ValidationException">         /// Thrown if validation fails         /// </exception>         public virtual void Validate()         {             if (NextLink == null)             {                 throw new ValidationException(ValidationRules.CannotBeNull, "Next
// Copyright (c) 2012 The Chromium Authors. All rights reserved. // Use of this source code is governed by a BSD-style license that can be // found in the LICENSE file.  #ifndef CHROME_BROWSER_UI_VIEWS_VIEWS_VIEWS_H_ #define CHROME_BROWSER_UI_VIEWS_VIEWS_VIEWS_H_  #include "base/basictypes.h" #include "base/compiler_specific.h" #include "base/memory/scoped_ptr.h" #include "base/memory/scoped_vector.h" #include "base/memory/scoped_vector.h" #include "base/memory/scoped_vector.h" #include "base/memory/scoped_vector.h" #include "base/memory/scoped_vector.h" #include "base/memory/scoped_vector.h" #include "base/memory/scoped_vector.h" #include "base/memory/scoped_vector.h" #include "base/memory/scoped_ptr.h" #include "base/memory/scoped_vector.h" #include "base/memory/scoped_vector.h" #include "base/memory/scoped_vector.h" #include "base/memory/scoped_vector.h" #include "base/memory/scoped_vector.h" #include "base/memory/scoped_vector.h" #include "base/memory/scoped_vector.h" #include "base/memory/scoped_vector.h" #include "base/memory/scoped_vector.h" #include "base/memory/scoped_vector.h" #include "base/memory/scoped_vector.h" #include "base/memory/scoped_vector.h" #include "base/memory/scoped_vector.h" #include "base/memory/scoped_vector.h" #include "base/memory/scoped_vector.h" #include "base/memory/scoped_vector.h" #include "base/memory/scoped_vector.h" #include "
<?php  /*  * This file is part of the Symfony package.  *  * (c) Fabien Potencier <fabien@symfony.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace Symfony\Component\DependencyInjection\Compiler;  use Symfony\Component\DependencyInjection\ContainerBuilder; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\RuntimeException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\RuntimeException; use Symfony\Component\DependencyInjection\Exception\RuntimeException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\RuntimeException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\RuntimeException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\RuntimeException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\RuntimeException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\RuntimeException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\RuntimeException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\RuntimeException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\RuntimeException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\RuntimeException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\RuntimeException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\RuntimeException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\RuntimeException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\RuntimeException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'required' => false,                 'attr' => array(                     'class' => 'form-control'                 )             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'required' => false,                 'attr' => array(                     'class' => 'form-control'                 )             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */ package org.apache.beam.runners.core;  import static org.junit.Assert.assertEquals; import static org.junit.Assert.assertFalse; import static org.junit.Assert.assertNotNull; import static org.junit.Assert.assertNull; import static org.junit.Assert.assertTrue; import static org.junit.Assert.fail;  import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Iterables; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import org.apache.beam.sdk.coders.Coder; import org.apache.beam.sdk.coders.CoderException; import org.apache.beam.sdk.coders.StringUtf8Coder; import org.apache.beam.sdk.options.PipelineOptions; import org.apache.beam.sdk.options.PipelineOptionsFactory; import org.apache.beam.sdk.testing.PipelineTestUtils; import org.apache.beam.sdk.testing.TestPipeline; import org.apache.beam.sdk.testing
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.data.
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.product.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.product.name',                 ),             ))             ->add('price', 'number', array(                 'label' => 'sylius.form.product.price',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.product.price',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */  package org.apache.ignite.internal.processors.cache;  import org.apache.ignite.IgniteCheckedException; import org.apache.ignite.IgniteException; import org.apache.ignite.IgniteLogger; import org.apache.ignite.IgniteSpiException; import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi; import org.apache.ignite.spi.discovery.tcp.ipfinder.TcpDiscoveryIpFinder; import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder; import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.VmIpFinder; import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest; import org.apache.ignite.testframework.junits.common.GridCommonTest; import org.junit.Test;  import static org.apache.ignite.cache.CacheAtomicityMode.TRANSACTIONAL; import static org.apache.ignite.cache.CacheMode.PARTITIONED; import static org.apache.ignite.cache.CacheWriteSynchronizationMode.FULL_SYNC; import static org.apache.ignite.cache.CacheWriteSynchronizationMode.SYNC; import static org.apache.ignite.cache.
     }      if (err) {       this.emit('error', err);     } else {       this.emit('success');     }   }
 var from = todo.pop();    if(from) {    vertices[from].neighList.forEach(function(obj) { var r3 = obj.rectangles[2];    var r4 = obj.rectangles[3];    var r5 = obj.rectangles[4];    var r6 = obj.rectangles[5];    var r7 = obj.rectangles[6];    var r8 = obj.rectangles[7];    var r9 = obj.rectangles[8];    var r10 = obj.rectangles[9];    var r11 = obj.rectangles[10];    var r12 = obj.rectangles[11];    var r13 = obj.rectangles[12];    var r14 = obj.rectangles[13];    var r15 = obj.rectangles[14];    var r16 = obj.rectangles[15];    var r17 = obj.rectangles[16];    var r18 = obj.rectangles[17];    var r19 = obj.rectangles[18];    var r20 = obj.rectangles[19];    var r21 = obj.rectangles[20];    var r22 = obj.rectangles[22];    var r23 = obj.rectangles[23];    var r24 = obj.rectangles[24];    var r25 = obj.rectangles[25];    var r26 = obj.rectangles[26];    var r27 = obj.rectangles[27];    var r28 = obj.rectangles[28];    var r29 = obj.rectangles[29];    var r30 = obj.rectangles[30];    var r31 = obj.rectangles[31];    var r32 = obj.rectangles[32];    var r33 = obj.rectangles[33];    var r34 = obj.rectangles[34];    var r35 = obj.rectangles[35];    var r36 = obj.rectangles[36];    var r37 = obj.rectangles[37];    var r38 = obj.rectangles[38];    var r39 = obj.rectangles[39];    var r40 = obj.rectangles[40];    var r41 = obj.rectangles[41];    var r42 = obj.rectangles[42];
  function lenyaLinkTree(doc, treeElement) {     this.doc = doc;     this.treeElement = treeElement; }  lenyaLinkTree.prototype = {     constructor: lenyaLinkTree };  lenyaLinkTree.prototype.addNode = function(node) {     this.treeElement.addNode(node); };  lenyaLinkTree.prototype.removeNode = function(node) {     this.treeElement.removeNode(node); };  lenyaLinkTree.prototype.addChild = function(child) {     this.treeElement.addChild(child); };  lenyaLinkTree.prototype.removeChild = function(child) {     this.treeElement.removeChild(child); };  lenyaLinkTree.prototype.removeAllChildren = function() {     this.treeElement.removeAllChildren(); };  lenyaLinkTree.prototype.removeNode = function(node) {     this.treeElement.removeNode(node); };  lenyaLinkTree.prototype.removeAllChildren = function() {     this.treeElement.removeAllChildren(); };  lenyaLinkTree.prototype.removeNodeFromParent = function(node) {     this.treeElement.removeNodeFromParent(node); };  lenyaLinkTree.prototype.removeChildFromParent = function(child) {     this.treeElement.removeChildFromParent(child); };  lenyaLinkTree.prototype.removeAllChildrenFromParent = function() {     this.treeElement.removeAllChildrenFromParent(); };  lenyaLinkTree.prototype.removeNodeFromParent = function(node) {     this.treeElement.removeNodeFromParent(node); };  lenyaLinkTree.prototype.removeAllChildrenFromParent = function() {     this.treeElement.removeAllChildrenFromParent(); };  lenyaLinkTree.prototype.removeChildFromParent = function(child) {     this.treeElement.removeChildFromParent(child); };  lenyaLinkTree.prototype.removeAllChildrenFromParent = function() {     this
<?php  /*  * This file is part of the Symfony package.  *  * (c) Fabien Potencier <fabien@symfony.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace Symfony\Component\DependencyInjection\Compiler;  use Symfony\Component\DependencyInjection\ContainerBuilder; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\RuntimeException; use Symfony\Component\DependencyInjection\ParameterBag\ParameterBag; use Symfony\Component\DependencyInjection\Reference; use Symfony\Component\DependencyInjection\ParameterBag\ParameterBagInterface; use Symfony\Component\DependencyInjection\ReferenceInterface; use Symfony\Component\DependencyInjection\ReferenceService; use Symfony\Component\DependencyInjection\ReferenceServiceFactory; use Symfony\Component\DependencyInjection\ReferenceServiceFactoryInterface; use Symfony\Component\DependencyInjection\ReferenceService; use Symfony\Component\DependencyInjection\ReferenceServiceFactoryInterface; use Symfony\Component\DependencyInjection\ReferenceServiceFactory; use Symfony\Component\DependencyInjection\ReferenceServiceFactoryInterface; use Symfony\Component\DependencyInjection\ReferenceServiceFactoryInterface; use Symfony\Component\DependencyInjection\ReferenceServiceFactoryInterface; use Symfony\Component\DependencyInjection\ReferenceServiceFactoryInterface; use Symfony\Component\DependencyInjection\ReferenceServiceFactoryInterface; use Symfony\Component\DependencyInjection\ReferenceServiceFactoryInterface; use Symfony\Component\DependencyInjection\ReferenceServiceFactoryInterface; use Symfony\Component\DependencyInjection\ReferenceServiceFactoryInterface; use Symfony\Component\DependencyInjection\ReferenceServiceFactoryInterface; use Symfony\Component\DependencyInjection\ReferenceServiceFactoryInterface; use Symfony\Component\DependencyInjection\ReferenceServiceFactoryInterface; use Symfony\Component\DependencyInjection\ReferenceServiceFactoryInterface; use Symfony\Component\DependencyInjection\ReferenceServiceFactoryInterface; use Symfony\Component\DependencyInjection\ReferenceServiceFactoryInterface; use Symfony\Component\DependencyInjection\ReferenceServiceFactoryInterface; use Symfony\Component\DependencyInjection\ReferenceServiceFactoryInterface; use Symfony\Component\DependencyInjection\ReferenceServiceFactoryInterface; use Symfony\Component\DependencyInjection\ReferenceServiceFactoryInterface; use Symfony\Component
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */  package org.apache.druid.query.aggregation;  import com.fasterxml.jackson.annotation.JsonCreator; import com.fasterxml.jackson.annotation.JsonProperty; import com.fasterxml.jackson.annotation.JsonTypeInfo; import com.fasterxml.jackson.annotation.JsonTypeInfo.As; import com.fasterxml.jackson.annotation.JsonTypeInfo.Id; import com.fasterxml.jackson.annotation.JsonTypeInfo.IsArray; import com.fasterxml.jackson.annotation.JsonTypeInfo.IsObject; import com.fasterxml.jackson.annotation.JsonTypeInfo.IsString; import com.fasterxml.jackson.annotation.JsonTypeName; import com.google.common.base.Preconditions; import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Iterables; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import org.apache.druid.query.aggregation.Aggregator; import org.apache.druid.query.aggregation.AggregatorFactory; 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */ package org.apache.beam.runners.core;  import static org.junit.Assert.assertEquals; import static org.junit.Assert.assertFalse; import static org.junit.Assert.assertNotNull; import static org.junit.Assert.assertNull; import static org.junit.Assert.assertTrue; import static org.junit.Assert.fail;  import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Iterables; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import com.google.common.util.concurrent.Futures; import com.google.common.util.concurrent.ListenableFuture; import com.google.common.util.concurrent.ListeningExecutorService; import com.google.common.util.concurrent.MoreExecutors; import com.google.common.util.concurrent.ThreadFactoryBuilder; import com.google.common.util.concurrent.ThreadFactory; import com.google.common.util.concurrent.TimeUnit; import com.google.common.util.concurrent.TimeoutException
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
/*  * Copyright (c) Facebook, Inc. and its affiliates.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */  package com.facebook.buck.android;  import static org.junit.Assert.assertEquals; import static org.junit.Assert.assertFalse; import static org.junit.Assert.assertNotNull; import static org.junit.Assert.assertNull; import static org.junit.Assert.assertTrue;  import com.facebook.buck.core.model.BuildTarget; import com.facebook.buck.core.model.BuildTargetFactory; import com.facebook.buck.core.rules.BuildRule; import com.facebook.buck.core.rules.BuildRuleParams; import com.facebook.buck.core.rules.BuildRuleResolver; import com.facebook.buck.core.sourcepath.SourcePath; import com.facebook.buck.core.sourcepath.resolver.SourcePathResolver; import com.facebook.buck.core.sourcepath.resolver.impl.DefaultSourcePathResolver; import com.facebook.buck.core.sourcepath.resolver.impl.DefaultSourcePathResolverFactory; import com.facebook.buck.core.sourcepath.resolver.impl.FakeSourcePathResolver; import com.facebook.buck.core.sourcepath.resolver.impl.FakeSourcePathResolverFactory; import com.facebook.buck.core.sourcepath.resolver.impl.TestSourcePathResolver; import com.facebook.buck.core.sourcepath.resolver.impl.TestSourcePathResolverFactory; import
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryService; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.data.accessors.ITupleReference; import org.apache.hyracks
 const fn2 = async function({a1, a2, a3}) {  this.return = a1;  this.log('this.return = a1'); };  const fn3 = async function({a1, a2, a3}) {  this.return = a1;  this.log('this.return = a1'); };  const fn4 = async function({a1, a2, a3}) {  this.return = a1;  this.log('this.return = a1'); };  const fn5 = async function({a1, a2, a3}) {  this.return = a1;  this.log('this.return = a1'); };  const fn6 = async function({a1, a2, a3}) {  this.return = a1;  this.log('this.return = a1'); };  const fn7 = async function({a1, a2, a3}) {  this.return = a1;  this.log('this.return = a1'); };  const fn8 = async function({a1, a2, a3}) {  this.return = a1;  this.log('this.return = a1'); };  const fn9 = async function({a1, a2, a3}) {  this.return = a1;  this.log('this.return = a1'); };  const fn10 = async function({a1, a2, a3}) {  this.return = a1;  this.log('this.return = a1'); };  const fn11 = async function({a1, a2, a3}) {  this.return = a1;  this.log('this.return = a1'); };  const fn12 = async function({a1, a2, a3}) {  this.return = a1;  this.log('this.return = a1'); };  const fn13 = async function({a1, a2, a3}) {  this.return = a1;  this.log('this.return = a1'); };  const fn14 = async function({a1, a2, a3}) { 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */ package org.apache.beam.runners.core;  import static com.google.common.base.Preconditions.checkArgument; import static com.google.common.base.Preconditions.checkNotNull; import static com.google.common.base.Preconditions.checkState; import static java.util.Objects.requireNonNull;  import com.google.common.base.Preconditions; import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Iterables; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import com.google.common.util.concurrent.Futures; import com.google.common.util.concurrent.ListenableFuture; import com.google.common.util.concurrent.ListeningExecutorService; import com.google.common.util.concurrent.MoreExecutors; import com.google.common.util.concurrent.ThreadFactoryBuilder; import com.google.common.util.concurrent.TimeUnit; import com.google.common.util.concurrent.TimeoutException; import com.google.common.util.concurrent.atomic.Atomic
 }           break; }           break; }           break; }           break; }           break; }           break; }           break; }           break; }           break; }           break; }           break; }           break; }           break; }           break; }           break; }           break; }           break; }           break; }           break; }           break; }           break; }           break; }           break; }           break; }           break; }           break; }           break; }           break; }           break; }           break; }           break; }           break; }           break; }           break; }           break; }           break; }           break; }           break; }           break; }           break; }           break; }           break; }           break; }           break; }           break; }           break; }           break; }           break; }           break; }           break; }           break; }           break; }           break; }           break; }           break; }           break; }           break; }           break; }           break; }           break; }           break; }           break; }           break; }           break; }           break; }           break; }           break; }           break; }           break; }           break; }           break; }           break; }           break; }           break; }           break; }           break; }           break; }           break; }           break; }           break; }           break; }           break; }           break; }           break; }           break; }           break; }           break; }           break; }           break; }           break; }           break; }           break; }           break; }           break; }           break; }           break; }           break; }           break; }           break; }           break; }           break; }           break; 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.functions.IFunctionDescriptorProvider; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.data.accessors.ITupleReference; import org.apache.hyracks.dataflow.common.data
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'required' => false,             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'required' => false,             ))         ;     }      /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of the Symfony package.  *  * (c) Fabien Potencier <fabien@symfony.com>  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace Symfony\Component\DependencyInjection\Compiler;  use Symfony\Component\DependencyInjection\ContainerBuilder; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\RuntimeException; use Symfony\Component\DependencyInjection\Reference; use Symfony\Component\DependencyInjection\ParameterBag\ParameterBag; use Symfony\Component\DependencyInjection\ParameterBag\ParameterBagInterface; use Symfony\Component\DependencyInjection\Reference\ParameterReference; use Symfony\Component\DependencyInjection\Reference\ParameterReferenceInterface; use Symfony\Component\DependencyInjection\Reference\Reference; use Symfony\Component\DependencyInjection\Reference\ReferenceInterface; use Symfony\Component\DependencyInjection\Reference\ServiceReference; use Symfony\Component\DependencyInjection\Reference\ServiceReferenceInterface; use Symfony\Component\DependencyInjection\Reference\VariableReference; use Symfony\Component\DependencyInjection\Reference\VariableReferenceInterface; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\RuntimeException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException; use Symfony\Component\DependencyInjection\Exception\LogicException;
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */  package org.apache.druid.segment;  import com.fasterxml.jackson.annotation.JsonCreator; import com.fasterxml.jackson.annotation.JsonProperty; import com.fasterxml.jackson.annotation.JsonTypeInfo; import com.fasterxml.jackson.annotation.JsonTypeInfo.Id; import com.fasterxml.jackson.annotation.JsonTypeName; import com.google.common.base.Preconditions; import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Iterables; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import org.apache.druid.java.util.common.StringUtils; import org.apache.druid.java.util.common.logger.Logger; import org.apache.druid.java.util.common.logger.LoggerFactory; import org.apache.druid.java.util.common.guava.Sequence; import org.apache.druid.java.util.common.guava.Sequences; import org.apache.druid.java.util
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.data.std.api.IPointable; import org.apache.hyracks.data.std.primitive.VoidPointable; import org.apache.hyracks.data.std.util.ArrayBackedValueStorage; import org.apache.hyracks.dataflow.common.data.accessors.
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.product.name',                 'attr' => array(                     'class' => 'form-control'                 )             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.product.description',                 'attr' => array(                     'class' => 'form-control'                 )             ))             ->add('price', 'number', array(                 'label' => 'sylius.form.product.price',                 'attr' => array(                     'class' => 'form-control'                 )             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product';     } } 
<?php /**  * Zend Framework  *  * LICENSE  *  * This source file is subject to the new BSD license that is bundled  * with this package in the file LICENSE.txt.  * It is also available through the world-wide-web at this URL:  * http://framework.zend.com/license/new-bsd  * If you did not receive a copy of the license and are unable to  * obtain it through the world-wide-web, please send an email  * to license@zend.com so we can send you a copy immediately.  *  * @category   Zend  * @package    Zend_Service  * @subpackage DeveloperGarden  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  * @version    $Id$  */  /**  * @see Zend_Service_DeveloperGarden_Exception  */ require_once 'Zend/Service/DeveloperGarden/Exception.php';  /**  * @category   Zend  * @package    Zend_Service  * @subpackage DeveloperGarden  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  */ class Zend_Service_DeveloperGarden_Exception extends Zend_Service_DeveloperGarden_Exception { } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */ package org.apache.beam.runners.core;  import static com.google.common.base.Preconditions.checkArgument; import static com.google.common.base.Preconditions.checkNotNull; import static com.google.common.base.Preconditions.checkState; import static java.util.Objects.requireNonNull;  import com.google.common.annotations.VisibleForTesting; import com.google.common.base.Preconditions; import com.google.common.base.Throwables; import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Iterables; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import com.google.common.util.concurrent.Futures; import com.google.common.util.concurrent.ListenableFuture; import com.google.common.util.concurrent.ListeningExecutorService; import com.google.common.util.concurrent.MoreExecutors; import com.google.common.util.concurrent.ThreadFactoryBuilder; import com.google.common.util.concurrent.TimeUnit; import com.google
/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */  package org.apache.ignite.internal.processors.cache;  import org.apache.ignite.IgniteCheckedException; import org.apache.ignite.IgniteException; import org.apache.ignite.IgniteLogger; import org.apache.ignite.IgniteSpiException; import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi; import org.apache.ignite.spi.discovery.tcp.ipfinder.TcpDiscoveryIpFinder; import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder; import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest; import org.apache.ignite.testframework.junits.common.GridCommonTest; import org.jetbrains.annotations.Nullable;  import static org.apache.ignite.cache.CacheAtomicityMode.ATOMIC; import static org.apache.ignite.cache.CacheMode.PARTITIONED; import static org.apache.ignite.cache.CacheMode.REPLICATED; import static org.apache.ignite.cache.CacheWriteSynchronizationMode.FULL_SYNC; import static org.apache.ignite.cache.CacheWriteSynchronizationMode.SYNC; import static org.apache.ignite.cache.Cache
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class ProductType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name')             ->add('description')         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Product'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_product_type';     } } 
<?php /**  * Zend Framework  *  * LICENSE  *  * This source file is subject to the new BSD license that is bundled  * with this package in the file LICENSE.txt.  * It is also available through the world-wide-web at this URL:  * http://framework.zend.com/license/new-bsd  * If you did not receive a copy of the license and are unable to  * obtain it through the world-wide-web, please send an email  * to license@zend.com so we can send you a copy immediately.  *  * @category   Zend  * @package    Zend_Gdata  * @subpackage Gdata  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  * @version    $Id$  */  /**  * @see Zend_Gdata_Extension  */ require_once 'Zend/Gdata/Extension.php';  /**  * Represents the gdata:feed element  *  * @category   Zend  * @package    Zend_Gdata  * @subpackage Gdata  * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)  * @license    http://framework.zend.com/license/new-bsd     New BSD License  */ class Zend_Gdata_Gdata_Feed extends Zend_Gdata_Extension {      protected $_rootElement = 'feed';     protected $_rootNamespace = 'gdata';      /**      * Constructs a new Zend_Gdata_Gdata_Feed object.      *      * @param DOMElement $element (optional) DOMElement from which this      *          object should be constructed.      */     public function __construct($element = null)     {         $this->registerAllNamespaces(Zend_Gdata_Gdata::$namespaces);         parent::__construct($element);     }  } 
// Copyright (c) 2012 The Chromium Authors. All rights reserved. // Use of this source code is governed by a BSD-style license that can be // found in the LICENSE file.  #ifndef CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_CHROME_BROWSER_UI_VIEWS_CH
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'required' => false,             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'required' => false,             ))         ;     }      /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
 /*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */  package org.apache.ignite.internal.processors.cache;  import org.apache.ignite.IgniteCheckedException; import org.apache.ignite.IgniteException; import org.apache.ignite.configuration.CacheConfiguration; import org.apache.ignite.configuration.IgniteConfiguration; import org.apache.ignite.internal.util.typedef.F; import org.apache.ignite.internal.util.typedef.internal.S; import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi; import org.apache.ignite.spi.discovery.tcp.ipfinder.TcpDiscoveryIpFinder; import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder; import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest; import org.apache.ignite.testframework.junits.common.GridCommonTest; import org.apache.ignite.testframework.junits.common.GridCommonTestUtils; import org.apache.ignite.testframework.junits.common.GridTestUtils; import org.apache.ignite.testframework.junits.common.GridTestUtils.ClusterMode; import org.apache.ignite.testframework.junits.common.GridTest
﻿using System; using System.Collections.Generic; using System.Linq; using System.Text; using System.Threading.Tasks; using System.Windows; using System.Windows.Controls; using System.Windows.Data; using System.Windows.Documents; using System.Windows.Input; using System.Windows.Media; using System.Windows.Media.Imaging; using System.Windows.Navigation; using System.Windows.Shapes; using System.Windows.Shell; using System.IO; using System.Xml; using System.Xml.Linq; using System.Collections; using System.Collections.Generic; using System.Collections.ObjectModel; using System.Collections.Specialized; using System.ComponentModel; using System.ComponentModel.DataAnnotations; using System.ComponentModel.DataAnnotations.Schema; using System.ComponentModel.DataAnnotations.Properties; using System.ComponentModel.DataAnnotations.Schema.SchemaType; using System.Data; using System.Data.Entity; using System.Data.Entity.Infrastructure; using System.Data.Entity.ModelConfiguration; using System.Data.Entity.Migrations; using System.Data.Entity.Migrations.Infrastructure; using System.Linq.Expressions; using System.Linq.Expressions.Linq; using System.Reflection; using System.Runtime.CompilerServices; using System.Runtime.InteropServices;  // General Information about an assembly is controlled through the following  // set of attributes. Change these attribute values to modify the information // associated with an assembly. [assembly: AssemblyTitle("School")] [assembly: AssemblyDescription("")] [assembly: AssemblyConfiguration("")] [assembly: AssemblyCompany("")] [assembly: AssemblyProduct("School")] [assembly: AssemblyCopyright("Copyright ©  2015")] [assembly: AssemblyTrademark("")] [assembly: AssemblyCulture("")]  // Setting ComVisible to false makes the types in this assembly not visible  // to COM components.  If you need to access a type in this assembly from  // COM, set the Com
// Copyright (c) Microsoft Corporation. All rights reserved. // Licensed under the MIT License. See License.txt in the project root for // license information. // // Code generated by Microsoft (R) AutoRest Code Generator. // Changes may cause incorrect behavior and will be lost if the code is // regenerated.  'use strict';  const models = require('./index');  const utils = require('./utils');  const logger = require('./logger'); const loggerFactory = require('./loggerFactory');  const constants = require('./constants'); const constantsFactory = require('./constantsFactory'); const modelsFactory = require('./modelsFactory'); const modelsFactoryFactory = require('./modelsFactoryFactory'); const modelsFactoryFactory = require('./modelsFactoryFactory'); const modelsFactoryFactory = require('./modelsFactoryFactory'); const modelsFactoryFactory = require('./modelsFactoryFactory'); const modelsFactoryFactory = require('./modelsFactoryFactory'); const modelsFactoryFactory = require('./modelsFactoryFactory'); const modelsFactoryFactory = require('./modelsFactory'); const modelsFactoryFactory = require('./modelsFactory'); const modelsFactoryFactory = require('./modelsFactory'); const modelsFactoryFactory = require('./modelsFactory'); const modelsFactoryFactory = require('./modelsFactory'); const modelsFactoryFactory = require('./modelsFactory'); const modelsFactoryFactory = require('./modelsFactory'); const modelsFactoryFactory = require('./modelsFactory'); const modelsFactoryFactory = require('./modelsFactory'); const modelsFactoryFactory = require('./modelsFactory'); const modelsFactoryFactory = require('./modelsFactory'); const modelsFactoryFactory = require('./modelsFactory'); const modelsFactoryFactory = require('./modelsFactory'); const modelsFactoryFactory = require('./modelsFactory'); const modelsFactoryFactory = require('./modelsFactory'); const modelsFactoryFactory = require('./modelsFactory'); const modelsFactoryFactory = require('./modelsFactory'); const modelsFactoryFactory = require('./modelsFactory'); const modelsFactoryFactory = require('./modelsFactory'); const modelsFactoryFactory = require('./modelsFactory'); const modelsFactoryFactory =
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */ package org.apache.beam.runners.dataflow;  import static org.junit.Assert.assertEquals; import static org.junit.Assert.assertFalse; import static org.junit.Assert.assertNotNull; import static org.junit.Assert.assertNull; import static org.junit.Assert.assertTrue; import static org.junit.Assert.fail;  import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Iterables; import com.google.common.util.concurrent.Futures; import com.google.common.util.concurrent.ListenableFuture; import com.google.common.util.concurrent.MoreExecutors; import com.google.common.util.concurrent.ThreadFactoryBuilder; import com.google.common.util.concurrent.ThreadFactory; import com.google.common.util.concurrent.TimeUnit; import com.google.common.util.concurrent.TimeoutException; import com.google.common.util.concurrent.atomic.AtomicInteger; import com.google.common.util.concurrent.atomic.AtomicReference; import com.google.common.util.concurrent.atomic
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */  package org.apache.druid.query.aggregation;  import com.fasterxml.jackson.annotation.JsonCreator; import com.fasterxml.jackson.annotation.JsonProperty; import com.fasterxml.jackson.annotation.JsonTypeInfo; import com.fasterxml.jackson.annotation.JsonTypeInfo.Id; import com.fasterxml.jackson.annotation.JsonTypeName; import com.google.common.base.Preconditions; import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableMap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Iterables; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import org.apache.druid.java.util.common.StringUtils; import org.apache.druid.java.util.common.guava.Sequence; import org.apache.druid.java.util.common.guava.Sequences; import org.apache.druid.java.util.common.logger.Logger; import org.apache.druid.java.util.common.logger.LoggerFactory; import org.apache.druid.java
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name'                 )             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description'                 )             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'required' => false,             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'required' => false,             ))         ;     }      /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
 var sequenceLengthPreInsert = tree.get('$sequenceLength'); var sequenceLengthPostInsert = tree.get('$sequenceLength'); var sequenceLength = sequenceLengthPreInsert.get('$sequenceLength'); var sequenceLengthPreInsert = tree.get('$sequenceLength'); var sequenceLengthPostInsert = tree.get('$sequenceLength'); var sequenceLength = sequenceLengthPreInsert.get('$sequenceLength'); var sequenceLengthPreInsert = tree.get('$sequenceLength'); var sequenceLengthPostInsert = tree.get('$sequenceLength'); var sequenceLength = sequenceLengthPreInsert.get('$sequenceLength'); var sequenceLengthPreInsert = tree.get('$sequenceLength'); var sequenceLengthPostInsert = tree.get('$sequenceLength'); var sequenceLength = sequenceLengthPreInsert.get('$sequenceLength'); var sequenceLengthPreInsert = tree.get('$sequenceLength'); var sequenceLengthPostInsert = tree.get('$sequenceLength'); var sequenceLength = sequenceLengthPreInsert.get('$sequenceLength'); var sequenceLengthPreInsert = tree.get('$sequenceLength'); var sequenceLengthPostInsert = tree.get('$sequenceLength'); var sequenceLength = sequenceLengthPreInsert.get('$sequenceLength'); var sequenceLengthPreInsert = tree.get('$sequenceLength'); var sequenceLengthPostInsert = tree.get('$sequenceLength'); var sequenceLength = sequenceLengthPreInsert.get('$sequenceLength'); var sequenceLengthPreInsert = tree.get('$sequenceLength'); var sequenceLengthPostInsert = tree.get('$sequenceLength'); var sequenceLength = sequenceLengthPreInsert.get('$sequenceLength'); var sequenceLengthPreInsert = tree.get('$sequenceLength'); var sequenceLengthPostInsert = tree.get('$sequenceLength'); var sequenceLength = sequenceLengthPreInsert.get('$sequenceLength'); var sequenceLengthPreInsert = tree.get('$sequenceLength'); var sequenceLengthPostInsert = tree.get('$sequenceLength'); var sequenceLength = sequenceLengthPreInsert.get('$sequenceLength'); var sequenceLengthPreInsert = tree.get('$sequenceLength'); var sequenceLengthPostInsert = tree.get('$sequenceLength'); var sequenceLength = sequenceLengthPreInsert.get('$sequenceLength'); var sequenceLengthPre
var charCode = e.which ? e.which : e.keyCode; case DOMEvents.KEYDOWN:     var charCode = e.which ? e.which : e.keyCode; case DOMEvents.KEYUP:     var charCode = e.which ? e.which : e.keyCode; case DOMEvents.MOUSEMOVE:   var mouseX = e.pageX, mouseY = e.pageY; case DOMEvents.MOUSEDOWN:   var mouseX = e.pageX, mouseY = e.pageY; case DOMEvents.MOUSEMOVE:   var mouseX = e.pageX, mouseY = e.pageY; case DOMEvents.MOUSEUP:    var mouseX = e.pageX, mouseY = e.pageY; case DOMEvents.MOUSEWHEEL:   var mouseX = e.pageX, mouseY = e.pageY; case DOMEvents.MOUSEWHEEL:   var mouseX = e.pageX, mouseY = e.pageY; case DOMEvents.MOUSEMOVE:   var mouseX = e.pageX, mouseY = e.pageY; case DOMEvents.MOUSEWHEEL:   var mouseX = e.pageX, mouseY = e.pageY; case DOMEvents.MOUSEWHEEL:   var mouseX = e.pageX, mouseY = e.pageY; case DOMEvents.MOUSEWHEEL:   var mouseX = e.pageX, mouseY = e.pageY; case DOMEvents.MOUSEWHEEL:   var mouseX = e.pageX, mouseY = e.pageY; case DOMEvents.MOUSEWHEEL:   var mouseX = e.pageX, mouseY = e.pageY; case DOMEvents.MOUSEWHEEL:   var mouseX = e.pageX, mouseY = e.pageY; case DOMEvents.MOUSEWHEEL:   var mouseX = e.pageX, mouseY = e.pageY; case DOMEvents.MOUSEWHEEL:   var mouseX
: return new Action.Other.DeclareVariable(data.name);                     break;                 case actionTypes.other.DECLARE_FUNCTION: return new Action.Other.DeclareFunction(data.name);                     break;                 case actionTypes.other.DECLARE_PARAMETER: return new Action.Other.DeclareParameter(data.name);                     break;                 case actionTypes.other.DECLARE_PARAMETER_LIST: return new Action.Other.DeclareParameterList(data.name);                     break;                 case actionTypes.other.DECLARE_VARIABLE: return new Action.Other.DeclareVariable(data.name);                     break;                 case actionTypes.other.DECLARE_VARIABLE_LIST: return new Action.Other.DeclareVariableList(data.name);                     break;                 case actionTypes.other.DECLARE_TYPE: return new Action.Other.DeclareType(data.name);                     break;                 case actionTypes.other.DECLARE_TYPE_LIST: return new Action.Other.DeclareTypeList(data.name);                     break;                 case actionTypes.other.DECLARE_TYPE_VARIABLE: return new Action.Other.DeclareTypeVariable(data.name);                     break;                 case actionTypes.other.DECLARE_TYPE_VARIABLE_LIST: return new Action.Other.DeclareTypeVariableList(data.name);                     break;                 case actionTypes.other.DECLARE_TYPE_PARAMETER: return new Action.Other.DeclareTypeParameter(data.name);                     break;                 case actionTypes.other.DECLARE_TYPE_PARAMETER_LIST: return new Action.Other.DeclareTypeParameterList(data.name);                     break;                 case actionTypes.other.DECLARE_TYPE: return new Action.Other.DeclareType(data.name);                     break;                 case actionTypes.other.DECLARE_TYPE_LIST: return new Action.Other.DeclareTypeList(data.name);                     break;                 case actionTypes.other.DECLARE_TYPE_VARIABLE: return new Action.Other.DeclareTypeVariable(data.name);                     break;                 case actionTypes.other.DECLARE_TYPE_VARIABLE_LIST: return new Action.Other.DeclareTypeVariableList(data.name);                     break;                 case actionTypes
     if (arguments.length === 0) {         return this;     }      if (arguments.length === 1) {         return this;     }      if (arguments.length === 2) {         return this;     }      if (arguments.length === 3) {         return this;     }      if (arguments.length === 4) {         return this;     }      if (arguments.length === 5) {         return this;     }      if (arguments.length === 6) {         return this;     }      if (arguments.length === 7) {         return this;     }      if (arguments.length === 8) {         return this;     }      if (arguments.length === 9) {         return this;     }      if (arguments.length === 10) {         return this;     }      if (arguments.length === 11) {         return this;     }      if (arguments.length === 12) {         return this;     }      if (arguments.length === 13) {         return this;     }      if (arguments.length === 14) {         return this;     }      if (arguments.length === 15) {         return this;     }      if (arguments.length === 16) {         return this;     }      if (arguments.length === 17) {         return this;     }      if (arguments.length === 18) {         return this;     }      if (arguments.length === 19) {         return this;     }      if (arguments.length === 20) {         return this;     }      if (arguments.length === 21) {         return this;     }      if (arguments.length === 22) {         return this;     }      if (arguments.length === 23) {         return this;     }      if (arguments.length === 24) {         return this;     }      if (arguments.length === 25)
/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */  package org.apache.ignite.internal.processors.cache;  import org.apache.ignite.IgniteCheckedException; import org.apache.ignite.IgniteException; import org.apache.ignite.IgniteLogger; import org.apache.ignite.IgniteSpiException; import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi; import org.apache.ignite.spi.discovery.tcp.ipfinder.TcpDiscoveryIpFinder; import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder; import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.VmIpFinder; import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest; import org.apache.ignite.testframework.junits.common.GridCommonTest; import org.jetbrains.annotations.Nullable;  import static org.apache.ignite.cache.CacheAtomicityMode.TRANSACTIONAL; import static org.apache.ignite.cache.CacheMode.PARTITIONED; import static org.apache.ignite.cache.CacheWriteSynchronizationMode.FULL_SYNC; import static org.apache.ignite.cache.CacheWriteSynchronizationMode.SYNC; import static org.apache.ign
// Copyright (c) Microsoft Corporation. All rights reserved. // Licensed under the MIT License. See License.txt in the project root for // license information. //  // Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0 // Changes may cause incorrect behavior and will be lost if the code is // regenerated.  namespace Microsoft.Azure.Management.Network.Models {     using Newtonsoft.Json;     using System.Collections;     using System.Collections.Generic;     using System.Linq;     using System.Net;     using System.Net.Http;     using System.Text;     using System.Threading;     using System.Threading.Tasks;      /// <summary>     /// Defines headers for ListVpnGateways operation.     /// </summary>     public partial class ListVpnGatewaysHeaders     {         /// <summary>         /// Initializes a new instance of the         /// ListVpnGatewaysHeaders class.         /// </summary>         public ListVpnGatewaysHeaders()         {             CustomInit();         }          /// <summary>         /// Initializes a new instance of the         /// ListVpnGatewaysHeaders class.         /// </summary>         /// <param name="nextLink">The URL to get the next set of results.</param>         public ListVpnGatewaysHeaders(string nextPageLink)         {             NextLink = nextPageLink;             CustomInit();         }          /// <summary>         /// An initialization method that performs custom operations like setting defaults         /// </summary>         partial void CustomInit();          /// <summary>         /// Gets or sets the URL to get the next set of results.         /// </summary>         [JsonProperty(PropertyName = "nextLink")]         public string NextLink { get; set; }          /// <summary>         /// Validate the object.         /// </summary>         /// <exception cref="ValidationException">         /// Thrown if validation fails         /// </exception>         public virtual void Validate()         {             if (NextLink == null)             {                 throw new ValidationException(ValidationRules.CannotBeNull, "NextLink
 function *createComment(postId) {   postId = new ObjectID(postId);   postId = new ObjectID(postId);   postId = new ObjectID(postId);   postId = new ObjectID(postId);   postId = new ObjectID(postId);   postId = new ObjectID(postId);   postId = new ObjectID(postId);   postId = new ObjectID(postId);   postId = new ObjectID(postId);   postId = new ObjectID(postId);   postId = new ObjectID(postId);   postId = new ObjectID(postId);   postId = new ObjectID(postId);   postId = new ObjectID(postId);   postId = new ObjectID(postId);   postId = new ObjectID(postId);   postId = new ObjectID(postId);   postId = new ObjectID(postId);   postId = new ObjectID(postId);   postId = new ObjectID(postId);   postId = new ObjectID(postId);   postId = new ObjectID(postId);   postId = new ObjectID(postId);   postId = new ObjectID(postId);   postId = new ObjectID(postId);   postId = new ObjectID(postId);   postId = new ObjectID(postId);   postId = new ObjectID(postId);   postId = new ObjectID(postId);   postId = new ObjectID(postId);   postId = new ObjectID(postId);   postId = new ObjectID(postId);   postId = new ObjectID(postId);   postId = new ObjectID(postId);   postId = new ObjectID(postId);   postId = new ObjectID(postId);   postId = new ObjectID(postId);   postId = new ObjectID(postId);   postId = new ObjectID(postId);   postId = new ObjectID(postId);   postId = new ObjectID(postId);   postId = new ObjectID(postId);   postId = new ObjectID(postId);   postId = new ObjectID(postId);   postId = new ObjectID(postId);   postId = new ObjectID
]     }   };    grunt.loadNpmTasks('grunt-contrib-jshint');   grunt.loadNpmTasks('grunt-contrib-concat');   grunt.loadNpmTasks('grunt-contrib-uglify');   grunt.loadNpmTasks('grunt-contrib-cssmin');   grunt.loadNpmTasks('grunt-contrib-copy');   grunt.loadNpmTasks('grunt-contrib-watch');   grunt.loadNpmTasks('grunt-contrib-clean');    grunt.registerTask('default', ['jshint', 'concat', 'uglify', 'cssmin', 'copy', 'watch']); }; 
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control'                 )             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control'                 )             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
if ( section.n === SECTION_UNLESS ) { 	if ( child = readElse( parser, tag ) ) { 		if ( section.n === SECTION_UNLESS ) { 			if ( child = readElse( parser, tag ) ) { 				if ( section.n === SECTION_UNLESS ) { 					if ( child = readElse( parser, tag ) ) { 						if ( child = readElse( parser, tag ) ) { 							if ( child = readElse( parser, tag ) ) { 								if ( child = readElse( parser, tag ) ) { 									if ( child = readElse( parser, tag ) ) { 										if ( child = readElse( parser, tag ) ) { 											if ( child = readElse( parser, tag ) ) { 												if ( child = readElse( parser, tag ) ) { 													if ( child = readElse( parser, tag ) ) { 													if ( child = readElse( parser, tag ) ) { 													if ( child = readElse( parser, tag ) ) { 													if ( child = readElse( parser, tag ) ) { 													if ( child = readElse( parser, tag ) ) { 													if ( child = readElse( parser, tag ) ) { 													if ( child = readElse( parser, tag ) ) { 													if ( child = readElse( parser, tag ) ) { 													if ( child = readElse( parser, tag ) ) { 													if ( child = readElse( parser, tag ) ) { 													if ( child = readElse( parser, tag ) ) { 													if ( child = readElse( parser, tag ) ) { 													if ( child = readElse( parser, tag ) ) { 													if ( child = readElse( parser, tag ) ) { 													if ( child = readElse( parser, tag ) ) { 													if ( child = readElse( parser, tag ) ) { 													if ( child = readElse( parser,
<?php  /*  * This file is part of the Sylius package.  *  * (c) Paweł Jędrzejewski  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  declare(strict_types=1);  namespace Sylius\Bundle\CoreBundle\Form\Type;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolverInterface;  /**  * @author Paweł Jędrzejewski <pawel@sylius.org>  */ class OrderType extends AbstractType {     /**      * @param FormBuilderInterface $builder      * @param array $options      */     public function buildForm(FormBuilderInterface $builder, array $options)     {         $builder             ->add('name', 'text', array(                 'label' => 'sylius.form.order.name',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.name',                 ),             ))             ->add('description', 'textarea', array(                 'label' => 'sylius.form.order.description',                 'attr' => array(                     'class' => 'form-control',                     'placeholder' => 'sylius.form.order.description',                 ),             ))         ;     }          /**      * @param OptionsResolverInterface $resolver      */     public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver->setDefaults(array(             'data_class' => 'Sylius\Bundle\CoreBundle\Entity\Order'         ));     }      /**      * @return string      */     public function getName()     {         return 'sylius_order';     } } 
/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */ package org.apache.asterix.runtime.evaluators.functions;  import org.apache.asterix.om.functions.BuiltinFunctions; import org.apache.asterix.om.functions.IFunctionDescriptor; import org.apache.asterix.om.functions.IFunctionDescriptorFactory; import org.apache.asterix.om.types.ATypeTag; import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory; import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactoryProvider; import org.apache.hyracks.api.context.IHyracksTaskContext; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializer; import org.apache.hyracks.api.dataflow.value.ISerializerDeserializerProvider; import org.apache.hyracks.api.exceptions.HyracksDataException; import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference; import org.apache.hyracks.dataflow.common.
