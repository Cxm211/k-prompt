function renderOptVElementToString(optVElement, isRoot, context) {  debugger; }
const _ol_format_WMTSCapabilities_ = function() {   XML.call(this);
var self = this, o = this.options;;          if(BI.isNotNull(configs.group_value)){
var storeNames = Array.prototype.slice.call(arguments, 0);   var result = {};
var resourceRef = sync.dataRef? sync.dataRef.child('resource') : null;         if(sync.isMine &&!this.refLock && resourceRef)    resourceRef.set(this.data.res);
exports.getTestDir = function (testRE) {     if (typeof document!== 'undefined' && document && document.getElementsByTagName) {
this.sandbox.on('husky.column-navigation.edit', function(item) {                 if (!!this.data.ids.indexOf(item.id)) {                     this.data.ids.push(item.id);
return {     type: this.UNLOCK_IN_PROGRESS,   }
this.authorizer.isPermittedAll(permissions);  } };
var path = require('path'); var colours = require('colors'); var PROTRACTOR_CMD = 'node_modules/protractor/bin/protractor';
triggerOutput() {    Node.triggerOutput(...arguments);   }
var model = this.model = {};         function add(name, edgeModel, extensions) {           if (edgeModel) {
throw new Error('stroked round lineJoin not implemented.. add arc/arcTo' );                             break;                         case'miter':
var conf = require('ember-cli/tests/helpers/conf'); var EOL = require('os').EOL; var path = require('path'); var Promise = require('ember-cli/lib/ext/promise');
, sequelize = new Sequelize(config.database, config.username, config.password, {logging: false})  , User = sequelize.define('User', { name: Sequelize.STRING, bio: Sequelize.TEXT })
var editor = npm.config.get("editor")    , cwd = path.resolve(npm.dir, p)   fs.stat(cwd, function (er, s) {
'use strict' var extend = require('util')._extend  , jsonSafeStringify = require('json-stringify-safe')  , crypto = require('crypto')
init: function(init) {     this._super.apply(this, arguments);     if (!this.$) {
return text;     function getTextRect(text, textFont, textAlign, textBaseline) {
$scope.templatesByStatus = $scope.templates[status];             if (typeof $scope.templatesByStatus === 'undefind' ||                 ($scope.templatesByStatus && $scope.templatesByStatus.length === 0)) {
var shared = require('./_shared')('keys')  , uid = require('./_uid'); module.exports = function (key) {
$rootScope.$on('$routeChangeError', function handleMiddlewareRedirects(event, current, previous, rejection) {   var pattern = /redirectTo\:([^\(]*)(\((\{.*\})\))?/;   var match;
create.execute();    conn.addEventListener(air.SQLEvent.OPEN, initListener);
this.dirnames.push(this.locale);     }     this.dirnames.push.apply(this.dirnames, srcDirnames);     if (this.document &&!this.index) {
return conn.connect(config); };
return this._head!= null? this._head : new String ( "" );  }
this.log.http(method, remote.href || "/")   var done = requestDone.call(this, method, where, cb)
(function() {   var SimditorMarkdown,     __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };
console.log("restarting!")              process.exit(0)
(function (){ var me=arguments["0"] || this; var wnr = {
var me = this;         me.flow = new SuperMap.ThemeFlow();         me.offset = new SuperMap.ThemeOffset();         me.style = new SuperMap.ThemeGraduatedSymbolStyle();         if (options) {
.addClass('btn waves-light waves-effect')                 .text('close')   var parentBtn = $('<a/>')                  .addClass('btn waves-light waves-effect')
this.closing = false;   this.loaded = false;   yield this.fire('close'); });
return Falcon.__binding__original_component__['init'].apply(this, arguments);     }
try (error) {     process.exit(1); }
msie: 1,         version: ua.match(/msie ([\d\.]+);/i)[1]       };
i = this.shapes[i];    var newShape = new Object()    for(var j = 0; j < i.length; j++){
tChildren.forEach( function( iChild, iIndex) {               iChild.adjust( { left: kPadding, top: tCurrTop, left: (kCellHeight - iChild.iconExtent.width) / 2 });               iChild.set('isVisible', true);
this.registerNamespaceFriendlyPrefix = registerNamespaceFriendlyPrefix;   this.clearPrefixes = clearPrefixes;   this.$get = function() {
const retVal = formio.hooks.on[name].apply(formio.hooks.on, Array.prototype.slice.call(arguments, 1));         return (retVal!== undefined)?!!retVal : true;       }
ENV.APP.rootElement = '#ember-testing';   if (environment === 'production') {   }
var redis = require("redis");       client = redis.createClient(data.redis.port, data.redis.server);         self.attachList(0,true);
var util = require('util')  , concat = require('concat-stream')  , ImageUtils = require('../imageUtils');
marginBottom: '4px',               marginBottom: '4px',               fontSize: 16,
'use strict' const path = require('path') const db = require('./db')
var EventEmitter = require('events').EventEmitter  , Logger = require('./logger')
return 'pending';         break;       case 2: return 'pending';         break;       case 3: return 'pending';         break;       case 4: return 'pending';         break;       case 5: return 'pending';         break;       case 6: return 'pending';         break;       case 7: return 'pending';         break;       case 8: return 'pending';         break;       case 9: return 'pending';         break;       case 10: return 'pending';         break;       case 11: return 'pending';         break;       case 12: return 'pending';         break;       case 13: return 'pending';         break;       case 14: return 'pending';         break;       case 15: return 'pending';         break;       case 16: return 'pending';         break;       case 17: return 'pending';         break;       case 18: return 'pending';         break;       case 19: return 'pending';         break;       case 20: return 'pending';         break;       case 21: return 'pending';         break;       case 22: return 'pending';         break;       case 23: return 'pending';         break;       case 24: return 'pending';         break;       case 25: return 'pending';         break;       case 26: return 'pending';         break;       case 27: return 'pending';         break;       case 28: return 'pending';         break;       case 29: return 'pending';         break;       case 30: return 'pending';         break;       case 31: return 'pending';         break;       case 32: return 'pending';         break;       case 33: return 'pending';         break;       case 34: return 'pending';         break;       case 35: return 'pending';         break;       case 36: return 'pending';         break;       case 37: return 'pending';         break;       case 38: return 'pending';         break;       case 39: return 'pending';         break;       case 40: return 'pending';         break;       case 41: return 'pending';         break;       case 42: return 'pending';         break;       case 43: return 'pending';         break;       case 44: return 'pending';         break;       case 45: return 'pending';         break;       case 46: return 'pending';         break;       case 47: return 'pending';
method.apply(container, arguments);                 }, this);
var cortex = require('../'); var fs = require('fs-sync'); var node_path = require('path');
kotti = {     dom_changed_handlers: new Array() };
for (prop in a) {                 aLength += 1;                 if (!(prop in b)) {
goog.provide('goog.graphics.ext.Path'); goog.require('goog.array'); goog.require('goog.graphics.AffineTransform');
var support = new Support();
case Syntax.VariableDeclaration:           var name = node.declaration.declarations[0].id.name;           utils.append('var'+ name +'= module.exports.' + name +'= ', state);
break;             case 'user':
it('should only log when pageCloseTimeoutMillis gets exceeded', async () => {         const sources = [
SignatureEngine.prototype.unbox = function(msg, cb, opts) {       var eng, esc, literals, msg, payload, ___iced_passed_deferral, __iced_deferrals, __iced_k;       __iced_k = __iced_k_noop;
var updated = false;   var i, j, input, output, coin, unspent, index, orphan;   var key, orphans, some;
if(!this._isDerived()) {       throw "Can only compute the best prefix for non-derived units, like kg, s, N, and so forth!"; }
, types = require ('./lib/types')  , sourceExtract = require ('./lib/sourceExtract');
fileTypes[dest][config][fileType].push(file);             };           };
if (finished) {             capturedDoc.close();
open_file(this, files, path, flags, check_result);         deferred.promise.then(
return { getIn, includes, assignIn, reduce, concat, find, join, sum, append, setIn, pick, includes, findIndex, includesValue, has, reverse, last, head, compact}; };
samples.push(v);     };     if (samples.length - 1]!== violin.max) {
var globalScope = typeof window.document === "undefined" && navigator.product === "ReactNative"? global : IS_BROWSER? window : null; function time() {
vec = arguments[0];             if (!vec.type.equals(Shade.Types.vec3)) {                 throw "create with 1 parameter requires a vec3";         } else if (arguments.length === 3) {
if (!!value) {               childScope = $scope.$new();
if (str.length <= (i + 1)) {         throw 'High surrogate without following low surrogate'       }
var middleware = _initialize(passport)   return function*(next) {
} else {     debugger; }
gateway.connect(function(err) {
{             String.prototype.isNullOrEmpty = function ()             {                 return (this == null || this === "");             };
this.isFunction = function( obj ) {     return toString.call(obj) === "[object Function]";
throw new Error('TECHNICAL_EXCEPTION_HTML_STRUCTURE_MAY_HAVE_CHANGED')                 break;             default:
var LoaderModule = (function() {   var modules = ['game', 'cookiedata', 'controls'];
if (true || prod) {   delete module.exports.compilers.babel.sourcesMap;
getTagsIndex: function(callback) {         var callback = callback || jsGen.lib.tools.callbackFn;         that.find({}, {
if (oldState) {                 const upgradedState = ['_g'];
import React from'react' import { Route } from'react-router' import { Msg } from './messages'
return res.status(internalError.status).send(createResponseError(internalError)); };
return this._run(command, function (err, data) {          then && then(err,!err && this._parsePull(data));       });
this.setXhr();  this.setWatcher(); };
if (!window.isNormal () ||!window.isMain () ) return;   const name = window.app ().name (),         title = window.title ();   if (!/Terminal/.test ( name ) || false ) return;
this.config = config;             this.lastInsertId = 0;
for (name in this.xhr.callbacks) {   if (this.xhr.callbacks.hasOwnProperty(name)) {    this[name] = function(name) {
openThirdModal: true,         modaltype: action.payload       }       break
process.on('unhandledRejection', (error, promise) => {     console.error('Unhandled promise rejection', {error, promise})     process.exit(1); });
function NextNights(props) {     var opacities = props.nights.map((_, index) => {return {opacity: 0.5 * ((10-index)/10) + 0.5};});     return (
e.target.removeEventListener(e.type, arguments.callee);           return callback(e);
if (disabled) {         } else {
"rotate(" + this.angleDeg + ")";
return result;   var regjsparser = {
typeof define === 'function' && define.amd? define(['https:  (factory(global.external)); }(this, (function (external) { 'use strict';  external = external && external.hasOwnProperty('default')? external['default'] : external;
.overrideMethod (c$, "getBfactor",   function () {  return Float.isNaN (this.atom.bfactor) && this.atom.anisoBorU!= null? this.atom.anisoBorU[7] * 100 : this.atom.bfactor;  });
storeErrors(filterDuplicates(idCounts), this);   this.complete = true;
var self = this;     var server = new mongo.Server(options.host, options.port, options.options);
new CSSModalGallery(window.jQuery); new CSSModalHtml5video(window.jQuery); new CSSModalMaxwidth(window.jQuery); new CSSModalResize(window.jQuery);
, ContentsIdDao = require('../../../../lib/extension/contents/contentsIdDao')  , testSetup = require('../../../fixtures/testSetup')  , ImageUtils = require('../../../../lib/tiles/imageUtils')
it("blank", function (done) {         this.timeout(TIMEOUT);         Augur.blank(
self.drag(e);         }.bind(this));       }
case'manuscript':       return 'unpublished';       break;          case 'paper-conference': return 'unpublished';       break;          case 'paper-conference': return 'unpublished';       break;          case 'paper-conference': return 'unpublished';       break;          case 'paper-conference': return 'unpublished';       break;          case 'paper-conference': return 'unpublished';       break;          case 'paper-conference': return 'unpublished';       break;          case 'paper-conference': return 'unpublished';       break;          case 'paper-conference': return 'unpublished';       break;          case 'paper-conference': return 'unpublished';       break;          case 'paper-conference': return 'unpublished';       break;          case 'paper-conference': return 'unpublished';       break;          case 'paper-conference': return 'unpublished';       break;          case 'paper-conference': return 'unpublished';       break;          case 'paper-conference': return 'unpublished';       break;          case 'paper-conference': return 'unpublished';       break;          case 'paper-conference': return 'unpublished';       break;          case 'paper-conference': return 'unpublished';       break;          case 'paper-conference': return 'unpublished';       break;          case 'paper-conference': return 'unpublished';       break;          case 'paper-conference': return 'unpublished';       break;          case 'paper-conference': return 'unpublished';       break;          case 'paper-conference': return 'unpublished';       break;          case 'paper-conference': return 'unpublished';       break;          case 'paper-conference': return 'unpublished';       break;          case 'paper-conference': return 'unpublished';       break;          case 'paper-conference': return 'unpublished';       break;          case 'paper-conference': return 'unpublished';       break;          case 'paper-conference': return 'unpublished';       break;          case 'paper-conference': return 'unpublished';       break;          case 'paper-conference': return 'unpublished';       break;          case 'paper-conference': return 'unpublished';       break
receiver[p] = {};                     arguments.callee(receiver[p], val);                 } else if (valType === '[object Array]') {
}).call(this);
render(){   console.log('chart',this.state.rank);   return (
}(this, this.document));
idRegex = new RegExp('(\'|")' + oldID + '(\-label)?(\'|")', 'g');
if (getProfile) {      this.setProfile(getProfile, false);     }
const textOrientation = item.text.orientation;     debugger; const stack = itemStack[textOrientation];
define(function (require) {  var restartPlayback = function () {
this.orig_prefset = null;     if (usesDeck) {
var title, _widget, isWidget, _element, isWidget;         for (var widgetName in targets) {
dojox.date.hebrew.numerals.parseYearHebrewLetters  = function( year){
process.exit(1) }
compatibility: 'all',          compatibility: 'none',       },
AUDIO_VIDEO: { i_id: (0x01 << 1) | (0x01 << 2), s_name: "audio/video" },     MSRP: { i_id: ((0x01 << 3) | (0x01 << 4)) | ((0x01 << 1) | (0x01 << 2)) | (0x01 << 5), s_name: "all" };
if (!((this.objectModelDeclaration!= null) && this.objectModelDeclaration)) {           throw "Failed to deep copy (clone) source object model declaration.";
const { EmbeddedDocument } = require('marpat'); const { interceptRequest, handleResponseError } = require('./utilities'); const instance = axios.create(this.configuration); instance.interceptors.request.use(interceptRequest);
}).call(this, typeof window!== 'undefined'? window : typeof global!== 'undefined'? global : typeof self!== 'undefined'? self : {});
}                  else {
default:         var uncompressedData = compressedData;
const getTextBlockRegExp = () => /\\text\{([^}]*)\}/g;
if (elems.length!== 0) {       for (let i = 0; i < elems.length; i++) {         elems[i].style.cssText = "display: none;"
SamplingPerGr: 576,     BytesPerFrame: this.SamplesPerGr * 2 * 4,     SamplingFrequency44100: 0,
var smartChanged = function(index, id, fields) {       var data = this[id].data;       _.each(fields, function(val, key) {
const mod = require(src);     if (args && args.constructor === Array) return mod.apply(null, args);     return mod();
this.actionsMatching = [];     });
class Session extends EventEmitter {   constructor(opts) {     this.authenticated = false     this.server = opts.server
temp = search     replace = new Array()     for (i = 0; i < search.length; i += 1) {
success: function(r) {                  debugger;                  this.grid.reload();
if (!semver.satisfies(pkg.version, that.options.gitbook)) {             throw "GitBook version doesn't satisfy version required by the book: "+that.options.gitbook;
this.pool.acquire(function(err, connection) {     if(err) {     }
function() {         this.stateTransition_(lf.proc.TransactionState_.ACQUIRED_SCOPE);       }, this)); };
if (options.schema && body.schema && body.schema.type && body.schema.type === 'object') {             console.log('body parameter schema to array');             common.schemaToArray(body.schema,1,parameters,false);
this.previousValues = _.tail(this.previousValues);                 }
while (test = me.tests[i++]) {         if (test.cycles) {
pool.trigger(_tick_);         return ticker= setTimeout(tick, max(16, 1000 / leader(_tempo_) - $.reel.cost));         $.reel.cost= (+new Date() + $.reel.cost - start) / 2;       }
case `${ACTION_TYPES.CHECK_SERVICE_EXIST}_FULFILLED`:       const serviceExists =!!action.payload;       return {
};    console.log("total rooms: ",this.map.roomsToExit.length);
, match = regex.exec(string)   else     var seperator = seperator || '---'      , pattern = '^('
} } class KeyValueRecord extends MapKeyValue {   constructor(key) {     this._key = key;
this.moduleId = moduleId;         this.$location = $location;
if (!input) {           throw 'Input does not exist:'+ name;         }
this.checkboxRender = (value, label) => {             const { columnHeight, lineHeight, columnBorderWidth, colAlign, col: { columnAttr = '', editor }, } = this.props;             let justifyContent = '';
$(this).removeClass('active');             });           $(this)            .find('> div').each( function(i) {               $(this).removeAttr('style').css( 'display', _cache_div[i]);
return class TransitionAwareRouter extends RouterClass {     render() {       return <PageContainer>{super.render(...arguments)}</PageContainer>;
default:         throw "Protocol not supported.";
resize25: '25% 크기',         remove: '삭제',         mirrorHorizontal: '좌우 반전',
for (i=0; i < offers.length; i++) {     var rows = orderBookScreen.makeRows(offers[i]);
var transaction = transactionData.transaction;  transaction.operations = transaction.operations;  transaction.lengthDifference = transaction.lengthDifference;  this.dmSurface.change( transaction, this.dmsurface.getSelection() );
(value).forEach(function (item) {      console.log(value);         str_ += item[0] + ':' + item[1] + ', ';
return '[' + typeTransformer(matches[1]) + ']';     break;     case 'list': return '[' + typeTransformer(matches[1]) + ']';     break;     case'map': return '[' + typeTransformer(matches[1]) + ']';     break;     case'map': return '[' + typeTransformer(matches[1]) + ']';     break;     case'set': return '[' + typeTransformer(matches[1]) + ']';     break;     case'set': return '[' + typeTransformer(matches[1]) + ']';     break;     case'set': return '[' + typeTransformer(matches[1]) + ']';     break;     case'set': return '[' + typeTransformer(matches[1]) + ']';     break;     case'set': return '[' + typeTransformer(matches[1]) + ']';     break;     case'set': return '[' + typeTransformer(matches[1]) + ']';     break;     case'set': return '[' + typeTransformer(matches[1]) + ']';     break;     case'set': return '[' + typeTransformer(matches[1]) + ']';     break;     case'set': return '[' + typeTransformer(matches[1]) + ']';     break;     case'set': return '[' + typeTransformer(matches[1]) + ']';     break;     case'set': return '[' + typeTransformer(matches[1]) + ']';     break;     case'set': return '[' + typeTransformer(matches[1]) + ']';     break;     case'set': return '[' + typeTransformer(matches[1]) + ']';     break;     case'set': return '[' + typeTransformer(matches[1]) + ']';     break;     case'set': return '[' + typeTransformer(matches[1]) + ']';     break;     case'set': return '[' + typeTransformer(matches[1]) + ']';     break;     case'set': return '[' + typeTransformer(matches[1]) + ']';     break;     case'set': return '[' + typeTransformer(matches[1]) + ']';     break;     case'set': return '[' + typeTransformer(matches[1]) + ']';     break;     case'set': return '[' + typeTransformer(matches[1]) + ']';     break;     case'set': return '[' + typeTransformer(
var mode = args.mode;         if (window.File && window.FileReader && item.kind === 'folder' && item.data.provider && item.data.permissions && item.data.permissions.edit) {
location.reload();                     default:                         return true;
console.log("CHAN_GET: " + url + " " + res.statusCode);                         stream_cb(this);                 });
debugger;     function loadFile() {
for (i = 0; i < j; i++) {         R = multiply(R, R)
xhr.onreadystatechange = function() {             if (this.readyState === 4 && /^[2]/.test(this.status)) {             }
return false; if (typeof WebSocket!= 'undefined' &&!('__initialize' in WebSocket)) {     return false;
goog.require('ol.render.Event'); goog.require('ol.render.EventType'); goog.require('ol.render.canvas');
getSiteType: function () {         if (CHAT || window.CHAT) {             return 'chat';
document.documentElement.classList[action]("vimiumFindMode");     action === "add"? DomUtils.UI.addElement(this.styleIn) : this.styleIn.remove();   },
var type_text, credit_text, au_text;       if (false) {             type_text = "(" + (credit+au) + ")";
Vex.Flow.durationToTicks.durations = {   "1/2":  Vex.Flow.RESOLUTION * 2,   "1":    Vex.Flow.RESOLUTION / 1,   "2":    Vex.Flow.RESOLUTION / 2,
).find( "div" ).show();; };
XSS.PIXELSIZE = 4;
radius = Base.readNamed(arguments, 'radius');    return createEllipse(new Rectangle(center.subtract(radius),      new Size(radius * 2, radius * 2)), arguments);   },
;(function($, window) {  'use strict';
widgetOk = widget.querySelector('.pf-widget-ok'),       widgetReco = widget.querySelector('.pf-content-unit'),       core = this;
return; };
function defineAssociationAccessors(sourceModel, assocType, targetModel, alias, association) {   var accessors   = this[assocType]    , singular    = inflect.singularize(alias)
d3_geo_transform.prototype = {   point: function() { var s = this.stream; s.point.apply(s, arguments); },   sphere: function() { this.stream.sphere(); },
var cache = this._cache    , json = this.json    , sort = json.sort
this.sock.on('end', function () {   if (!inBrowser) process.exit(0);   });  this.sock.on('close', function () {
if(ctx.resolve('username')) {     out += ctx.resolve('username')   } else {   }
Blockchain.prototype.putBlockOnHold = function(block) {     if (!block['hash'] in this.buffer) {         this.buffer[block['hash']] = {
function jsDAV_iQuota() {     this.REGBASE = this.REGBASE | jsDAV.__IQUOTA__;
class TaskTable extends React.Component {   constructor() {     super(...arguments);
return Math.floor(Math.random() * (max - min + 1)) + min; }    ,     topUpRooms: function () { return Math.floor(Math.random() * (max - min + 1)) + min; }    ,     bottomUpRooms: function () { return Math.floor(Math.random() * (max - min + 1)) + min; }    ,     bottomUpRooms: function () { return Math.floor(Math.random() * (max - min + 1)) + min; }    ,     bottomUpRooms: function () { return Math.floor(Math.random() * (max - min + 1)) + min; }    ,     bottomUpRooms: function () { return Math.floor(Math.random() * (max - min + 1)) + min; }    ,     bottomUpRooms: function () { return Math.floor(Math.random() * (max - min + 1)) + min; }    ,     bottomUpRooms: function () { return Math.floor(Math.random() * (max - min + 1)) + min; }    ,     bottomUpRooms: function () { return Math.floor(Math.random() * (max - min + 1)) + min; }    ,     bottomUpRooms: function () { return Math.floor(Math.random() * (max - min + 1)) + min; }    ,     bottomUpRooms: function () { return Math.floor(Math.random() * (max - min + 1)) + min; }    ,     bottomUpRooms: function () { return Math.floor(Math.random() * (max - min + 1)) + min; }    ,     bottomUpRooms: function () { return Math.floor(Math.random() * (max - min + 1)) + min; }    ,     bottomUpRooms: function () { return Math.floor(Math.random() * (max - min + 1)) + min; }    ,     bottomUpRooms: function () { return Math.floor(Math.random() * (max - min + 1)) + min; }    ,     bottomUpRooms: function () { return Math.floor(Math.random() * (max - min
if (oldMax!== newMax) {       run.scheduleOnce('afterRender', this, function() {         this.element._flatpickr.set('maxDate', newMax);       });     }
describe("Numeric Analysis", function () {     var fft = fidola.numeric.fft,         ifft = fidola.numeric.ifft,
this.nodes[i].RIGHT = this.nodes[i].LEFT = this.nodes[i].UP = this.nodes[i].DOWN=0;
catch (e) {                 var err = new Error(e);                 err.status = 400;                 next(err);             }
var client = new tracker.Client({trackerToken:token});                  client.project(projectId).fileAttachment(attachmentId).download(path, function(error, attachment) {                      if (error) {
import { h, Component } from 'preact'; import { Component } from 'preact-router'; import CSSTransitionGroup from 'preact-css-transition-group'; import './Home.css'; export default class Home extends Component {
load(dumpBasePath, snapshotStoreFolder, config) {     console.log(arguments);   },
this.moveStep = function(id, prev_id) {       console.log("I am looking");       var dataToBeSend = {'prev_id': prev_id},
case "FunctionExpression":             return new astExpression.FunctionExpression(node.loc, transform(node.id), transform(node.params), transform(node.body));
"hierarchy.html":[7,2], "index.html":[], "index.html":0] };
console.log("CLICK ADD");     console.log($(this).attr("data-team"));     updateFavoriteTeams($(this).attr("data-team"), 'add', false);
size: {     width: new Array(),                     height: new Array()                 },
lobby: 'Entrée',           openArea: 'Open space',           staffRoom: 'Salle du personnel',
if (properties) {     for(var name in properties){      var value = properties[name];
_.each(tagName, function(tag) {       ko.components.tagIsComponent(tag, isComponent);     });
for (i = 0; i < this.markers.length; i++) {                             if (this.markers[i].keep) {                             doAdd = false;
var headers = headerTransforms.forRequest(ctx, this);     return {
avoidableParams[5] = avoidFords;                 var truckParams = new Array();                 var truck_length = permaInfo[preferences.value_lengthIdx];
Array.prototype.push.call(newArgs, callbacks);     if(document.body){
this[i].innerHTML = "";       return this;
Minionette.CollectionView = Minionette.View.extend({     constructor: function(options) {         Minionette.View.apply(this, arguments);
pathname_prefix: "",       action_name_black_list: ["super", "init", /^\_[^\_]+/],      app_tag_on: true,
var Sleeping = require('../core/Sleeping'); var Render = require('../render/Render'); var Common = require('../core/Common');
const appliedClassName = className || 'hovering';     const includeClones =!!!excludeClones;     const includeChildren = restriction!== 'directParentsOnly';
{    throw "Error getVersionForNumber";   }
table.push(header)   table.push.apply(table, rows)   return table.toString()
var __call__ = function() { args = Array.prototype.splice.apply(arguments, [0, 0, klass]); return create_object.apply(undefined, args);
expect(Kefir.zip([a, b, c])).toEmit([[1, 0, 3], [4, 2, 5], [6, 9, 8], '<end>'], () => {       send(a, [1])
Polymer({   _template: `     <style>
function _via_metadata(fid, mid, z, xy, metadata) {   this.fid = fid;              this.mid = mid;
function fullResizeVideo() {
Template.sidebarItem.onCreated(function() {  console.log('sidebarItem', this.data); });
}, _callee, this);     }));
arr = new Uint32Array(arrayBuffer, offset, length);      case 'FLOAT':          arr = new Float32Array(arrayBuffer, offset, length);
this.hasUploaded = false;         this.$el.trigger('change');         this.render();
this._setGeneratedUser = function(properties) {       var generatedId = localStorage.getObject(this.generatedIdKey);       var user = { id: generatedId, properties: properties };
break;                 case 'publish':                                          break;
throw new Error("Value for " + data.val + " is smaller than " + data.min);    return false;
var scalingFactor = Math.min(worldSize.x / myWidth, worldSize.y / myHeight);     var desiredPosition = myBounds.topLeft().subPt(worldSize.subPt(this.owner.worldPoint(pt(myWidth, myHeight))).scaleBy(0.5));
module.exports = methods;
const targets = [mainTarget];     let rules = [...initialRules];     while (true) {       const currentTarget = targets[targets.length - 1];
e = '--ecma4'           break       case '--ecma6':           e = '--ecma6'           break       case '--ecma7':           e = '--ecma7'
type        : DataTypes.STRING          , allowNull   : false         }        , COMPANY_URL   : {               type      : DataTypes.STRING
collection = args.OldValue;              var count = collection.GetCount();              for (var i = 0; i < count; i++) {                  this._ElementRemoved(collection.GetValueAt(i));
xmlHttp.setRequestHeader('X-Algolia-Application-Id', this.applicationID);             for (i = 0; i < extraHeaders.length; ++i) {                 xmlHttp.setRequestHeader(extraHeaders[i].key, extraHeaders[i].value);             }
debug( 'Current value: %s.', this._aValue );  oldVal = this._aValue;
undefined, undefined, function (data, p) {           if (p === 404) {
allowed_attributes.each(function(attribute) {             if (value = child.readAttribute(attribute))               new_child.writeAttribute(attribute, value);
case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:             throw("Incomplete framebuffer: FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT"); break;         case gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:             throw("Incomplete framebuffer: FRAMEBUFFER_INCOMPLETE_DIMENSIONS"); break;
return originalPosition[1] === finalPosition[1] && originalPosition[0] > finalPosition[0];       break;     case DIRECTIONS[1]: return originalPosition[1] === finalPosition[1] && originalPosition[0] < finalPosition[0];       break;     case DIRECTIONS[2]: return originalPosition[1] === finalPosition[1] && originalPosition[0] > finalPosition[0];       break;     case DIRECTIONS[2]: return originalPosition[1] === finalPosition[1] && originalPosition[0] < finalPosition[0];       break;     case DIRECTIONS[3]: return originalPosition[1] === finalPosition[1] && originalPosition[0] > finalPosition[0];       break;     case DIRECTIONS[3]: return originalPosition[1] === finalPosition[1] && originalPosition[0] < finalPosition[0];       break;     case DIRECTIONS[4]: return originalPosition[1] === finalPosition[1] && originalPosition[0] > finalPosition[0];       break;     case DIRECTIONS[4]: return originalPosition[1] === finalPosition[1] && originalPosition[0] < finalPosition[0];       break;     case DIRECTIONS[5]: return originalPosition[1] === finalPosition[1] && originalPosition[0] > finalPosition[0];       break;     case DIRECTIONS[5]: return originalPosition[1] === finalPosition[1] && originalPosition[0] < finalPosition[0];       break;     case DIRECTIONS[6]: return originalPosition[1] === finalPosition[1] && originalPosition[0] > finalPosition[0];       break;     case DIRECTIONS[6]: return originalPosition[1] === finalPosition[1] && originalPosition[0] < finalPosition[0];       break;     case DIRECTIONS[7]: return originalPosition[1] === finalPosition[1] && originalPosition[0] > finalPosition[0];       break;     case DIRECTIONS[7]: return originalPosition[1] === finalPosition[1] && originalPosition[0] < finalPosition[0];       break;     case DIRECTIONS[8]: return originalPosition[1] === finalPosition[1] && originalPosition[0] > final
[States.NOT_STARTED, 'Not Started'], [States.IN_PROGRESS, 'In Progress'], [States.COMPLETED,   'Completed'] ]
return this.outerHeight(includeMargin) - this.height();   };
const keys = key.split(',');             _.each(keys, function(k) {                 this.keyListener.simple_combo(k, value.bind(this));             }, this);
to: "Zu",         to: "An",         memo: "Memo",
console.log('PDC:');   console.log(wnt.PDC);    console.log('UserName:');
this.handleMultiMinusButtonTap = e => {     this.multiData.splice(e.item.idx, 1);     this.change(this.multiData);
HTMLMediaElement.prototype.play = function() {       let p = originalPlay.apply(this, arguments);       if (p) {
try (err) {       return console.error(err)     }
$("#github").removeClass('hidden');     }else if (value = 'asn'){         $("#github").addClass('hidden');
} else {       console.log(`${context} key \'${key}\' not found in ${parentKey}`);       error = true;
var currentNode = new Potree.PointCloudOctreeGeometryNode(name, pco, boundingBox);     currentNode.level = level;
console.log(error);     process.exit(0);   }
case 'graphql':       const graphql = stashedSpecs.graphql = stashedSpecs.graphql || {};       graphql.path = graphql.path || '/graphql';
, accepts: ['js', 'css']
this._viewFolder = 'base'   this.controller = 'base'   beforeFilters = []
this.app[verb || 'all'](path, callbacks);
import Button from'react-native-button'; import {analytics, airloy, styles, colors, api, L, toast} from '../../app'; import util from '../../libs/Util';
fn.apply( this, arguments );   this._format();   this._aria();   if ( previous!== this.options.value ) {
args[argIndex] = utils.transformValue(this._path, args[argIndex], utils.encrypt);     return this._originalOnDisconnect[methodName].apply(this._originalOnDisconnect, args);   };
appliedFilters = this.getUpdatedAppliedFilters(payload, appliedFilters);       console.log('>>><>', payload, appliedFilters);     });
var xmpp = require('../index')  , c2s = require('../index')  , debug = require('debug')('server-and-client')  , Client = require('node-xmpp-client')
} })(typeof window === "object"? window : this, typeof CSSwhat === "undefined"? require("CSSwhat") : CSSwhat);
orsRouteService.addHeightgraph = (geometry) => {             console.log(geometry);             const heightgraph = orsObjectsFactory.createMapAction(-1, undefined, geometry, undefined, undefined);
if (constring == null || constring.trim() === '')         throw 'constring must not be null or empty';     if (contype == null || contype.trim() === '')
var triangle = handle.append('path')      .attr('class', 'CDB-Chart-axisTipRect CDB-Chart-axisTipTriangle')
import React from'react' import { Grid, Cell } from 'rgx' import ConnectedInstanceCard from '../containers/ConnectedInstanceCard'
is_editable = true; } else if (window.hasOwnProperty(is_admin) && is_admin) {
topRange(startDate, endDate, timeGranularity, direction, startingAt, limit, callback) {     const args = Array.prototype.slice.call(arguments);
leftPx += parseFloat($tab_t.eq(_i).outerWidth(true));      $(e).css({
import ObjectComponent from './ObjectComponent'; import {normalize,map} from '../util/math-utils'; import {attachMouseListenersDocumentExtended} from '../util/listener-utils';
const { changeShort, getShort } = require('../utils/db')  const os = require('os')
fs.ensureDirSync(root + "/static"); process.exit();
expect(isEmpty([1])).toBe(false, "for empty literal array");       expect(isEmpty({foo: 1})).toBe(false, "for empty literal array");       const array = new Array();       array.push('1');
socket.on('connect_error', err => {     if (err.message = 'xhr poll error') {     if (loggedXhrPollError) {
document.removeEventListener('mousemove', handleMouseMove);       document.removeEventListener('selectstart', preventDefault);     }
return /iPad|iPhone|iPod/.test(navigator.platform); };
import React from'react'; import {mount, shallow} from 'enzyme'; import Baobab from 'baobab';
TextInputUnit.prototype.__proto__ = new Object();
this.time = 0; }; Robot.prototype.geom = {
'use strict'; var Utils = require('./utils')  , util = require('util');
$('input[name=show_unread_counts_in_title]', $modal).each(function() {             if (NEWSBLUR.Preferences.show_unread_counts_in_title) {                 $(this).attr('checked', true);                 return false;
if (_.isUndefined(value)) {                 throw "parameter " + key + " has not been set.";             }
tag_input.keypress(function(event){     keyCode = event.keyCode || event.which;     if (keyCode == BACKSPACE) {
for (var i = 0; i < this._editorTextPlusPlacements.length; i++)     on(this._editorTextPlusPlacements[i], "click", this.onEditorTextPlusPlacementClick);
break;             case 14:
google.maps.event.addListener(e.overlay.getPath(), 'insert_at', function () {         console.log(arguments);                }.bind(this));
debugger             window.addEventListener('showAdvertising', handler);
if (typeof interval == "undefined") {        this.stopObserving();        var el = $j(this);
switch (action.type) {       case GET_CURRENT_USER_SUCCESS:         let newLoginValue = isNewLoginValue         isNewLoginValue = false
Array.prototype.copyOf = function() {     return this.clone(); };
for (tag in tags) {             attribute = tags[tag];             urls[tag] = [].map.call(document.querySelectorAll(tag), function(item) { return item.getAttribute(attribute); });         }
try {     send.apply(this, arguments);    }
_.each(fieldsValues, function(setValue, fieldName) {     this.setOne(doc, fieldName, setValue, options);   }, this); };
import { View } from 'backbone'; import app from '../../app';
} else {       debugger;       throw new State.DefinitionError();
for(var h = 0; h < jsondata.headers.length; h++) {    var heading = jsondata.headers[h];    ret += textdelim + heading + textdelim +  delim;   }
var globalMatch = haystack.match(globalRegex);    matchArray = new Array();    for (var i = 0; i < globalMatch.length; i++) {
if (typeof console === "undefined") { console = { log: print }; } var arr = ["hello world"]; console.log (arr[0]);
onDragStop: function() {             Garnish.requestAnimationFrame($.proxy(function() {                 this.trigger('dragStop');                 this.settings.onDragStop();
result = this.multiply(result, m.flat);         this.matrixCache_[m] = result.slice();          m.addListener(this.matrixChange);       }
const rootPrefix = '../..'  , coreConstants = require(rootPrefix + '/config/core_constants')  , QueryDBKlass = require(rootPrefix + '/app/models/queryDb')  , ModelBaseKlass = require(rootPrefix + '/app/models/base')
let exists = []   if (session) {   if (thisid) tags = tags.filter(_ => thisGroupMap[_.id].data.includes(thisid))
} else {         return this.get('isDefaultExpanded');       }
if (precision) return r.substr(0, precision);             case '%':                 return '%';
var newFire = building.fire + fireSpread;             building.fire = Math.min(this.maxFire, newFire);         })
if (true || options.debug) {       data.debug = steal.toJSON(deepExtendWithoutBody(currentData));
onCheckUsername: function(event, input, form) {
Text = require('./methods/tag')(Text); Text = require('./methods/termFns')(Text); Text.prototype.normalize = require('./methods/normalize');
options = options || {};   options.defaultValue = (!!options.defaultValue? options.defaultValue : c.SUPPRESS);   options.dest = (options.dest || c.SUPPRESS);
constructor() {     this.agentService = ContainerJS.Inject;
case 'app':       const app = stashedSpecs.app;       app.name = props.name;
newValue = this[head].setIn(tail, value);     } else {
if (options.backdrop) {           if (!!destroy ) options.backdrop.remove();           else              $animate.leave(options.backdrop);
return;   document.addEventListener("backbutton", function() {       alert("backbutton");   }, false);   map.addKmlOverlay({
if (params.viz.resize) {       console.log('here')
import SparklinesSpots from './SparklinesSpots'; import SparklinesReferenceLine from './SparklinesReferenceLine'; import DataProcessor from './DataProcessor';
this.text = false;      this.save((("" + (this.prepareOutput(desc$0.key, true) + '=' + this.prepareOutput(desc$0.value, true))) + ";"));      return;
const mqtt = require('mqtt') opt.broker = opt.broker || opt.broker
return false;           break;         case this.OPERATORS.dateOperatorInTheLast:
this.menuText.anchor.setTo(0.5,0.5);         this.startkey = this.game.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR);     },
Color.fromHsl = function(hsl) {     return null;     if (hsl.indexOf('hsl(')!== 0) return null;     var result = Color.HSL_RE.exec(hsl);
var item = document.getElementById(dlLink.id + '-link');       if (!! item) {         var img = document.createElement('img');
return $.when.apply($, promises);     },
this.input += '<option value="' + value + '"'+ attrs + '>' + name + '</option>';           }, this);         }
if (typeof rows === "undefined") rows = self._rows;         var item, index, item;         if (data!== null) {
{       if (document.getElementsByClassName('qr-button') [0]!== undefined)       {       }       if (document.getElementsByClassName('widget-login-qr-imgWrapper widget-login-qr-loading') [0]!== null)
layers[baseLayer].addTo(map);     if (baseLayer = 'Bing Satellite') contextLayer.addTo(map).bringToFront();     L.control.layers(layers).addTo(map);
if (path==null) throw "putDir: Null path";          if (!isDir(path)) throw "Not a directory : "+path;          if (media==MM_RAM) {
console.log("Dash channel opened.");                 broadcast.call(this, {                    event: "ready" });
var args = Array.prototype.slice.call(arguments);       args.unshift('progress');       this.emit.apply(this, args);
else {                             var $item = this.getItemToTheRight(anchor);                         }
} ; function last(arr) {
this.transitionToAdminPage('.preview', {             path: this.getUrlRecordPathWithAlt(path) }, function() {           this.transitionToAdminPage('.preview', {             path: this.getUrlRecordPathWithAlt(path) }, function() {           this.transitionToAdminPage('.preview', {             path: this.getUrlRecordPathWithAlt(path) }, function() {           this.transitionToAdminPage('.preview', {             path: this.getUrlRecordPathWithAlt(path) }, function() {           this.transitionToAdminPage('.preview', {             path: this.getUrlRecordPathWithAlt(path) }, function() {           this.transitionToAdminPage('.preview', {             path: this.getUrlRecordPathWithAlt(path) }, function() {           this.transitionToAdminPage('.preview', {             path: this.getUrlRecordPathWithAlt(path) }, function() {           this.transitionToAdminPage('.preview', {             path: this.getUrlRecordPathWithAlt(path) }, function() {           this.transitionToAdminPage('.preview', {             path: this.getUrlRecordPathWithAlt(path) }, function() {           this.transitionToAdminPage('.preview', {             path: this.getUrlRecordPathWithAlt(path) }, function() {           this.transitionToAdminPage('.preview', {             path: this.getUrlRecordPathWithAlt(path) }, function() {           this.transitionToAdminPage('.preview', {             path: this.getUrlRecordPathWithAlt(path) }, function() {           this.transitionToAdminPage('.preview', {             path: this.getUrlRecordPathWithAlt(path) }, function() {           this.transitionToAdminPage('.preview', {             path: this.getUrlRecordPathWithAlt(path) }, function() {           this.transitionToAdminPage('.preview', {             path: this.getUrlRecordPathWithAlt(path) }, function() {           this.transitionToAdminPage('.preview', {             path: this.getUrlRecordPathWithAlt(path) }, function() {           this.transitionToAdminPage('.preview', {             path: this.getUrlRecordPathWithAlt(path) }, function() {
import Resource from './resource'; import { attr, hasOne, hasMany } from 'ember-jsonapi-resources/models/resource';
return $.grep(this._pages, $.proxy(function(page, index) {    return current === this._core.maximum() &&!this._core.settings.loop    ? index === this._pages.length - 1     : page.start <= current && page.end >= current;   }, this)).pop();
const heartbeat = function () {       this.isAlive = true     }
const header = props => <div className="anchor"><a name={`${props.children.replace(/[\ -]/g, ``).toLowerCase()}`}></a><h2 className="" {...props} /></div> const components = {
console.log("Didn't remove the device " + err);     process.exit(1);    });  },
result = true;         mathML = mathML;         if (isSuperscriptAtom(stream)) {
, callback = _.isFunction(data.callback)? data.callback : function() {}      , exitCode = data.exitCode || 0      , exitCodes = exitCode.length? exitCode : [exitCode]      , command
wait: function(data, callback){         waitAsync.setTimeout.call(window, callback, timeout);     },
console.warn('OSjs::Core::WindowManager::removeWindow()', 'Got', w);       throw ('removeWindow() expects a "Window" class');     }
thisMonth = this.value.getMonth();     var monthLength = this.getMonthLength(thisYear, thisMonth);     var dates = this.$.dates.getControls();
(function () {     if (!'Element' in global || Element.prototype.matches) {       return
var npId1 var npId2 const NUMBER_PROTOCOLS = 4
this._eventInput.on('clean', function(){             this._dirtyLock--;             if (this._dirty && this._dirtyLock == 0) {                 this._dirty = false;
res.end();   });
item.opacity = parseFloat(value, 10);   case 'visibility':    item.visibility = (value == 'visible')? true : false;
.then(response => response.json())      .then(json => dispatch(userMarkedAsAttended(event, user)))      .then(() => dispatch(stopLoading()));
describe('94.binding_procedureBindInout.js', function() {   this.timeout(5000);   var connection = null;
if (_.isUndefined(obj.data)) throw "data is a required field";     if (_.isUndefined(obj.data)) throw "columns is a required field";     function table() {
return this.notes; } else if (name == 'todo') {
if (typeof func === 'function') { return func.apply(null, evalList(flags, scope, locator, this.args, part));             }
let i = isTail? this.items.length - 1 : 0;   while (item = this.items[i]) {    idx = this._getColIdx(item);
this.close = function(callback){     if(!!server){       server.close(callback);
DataAccessObject.prototype[i] = dataSource.constructor.DataAccessObject.prototype[i];         }
}, function (next) {     this.push('\n');     this.push(footer);     next();
module.exports['internal/streams/pipeline.js'] = [  , errorsTwoLevel
function _encapsulateTwoParam (context, cb) {     if (func.length === 0 || func.length === 1) {       func(this)       process.nextTick(cb)
var $parent = getParent($(this));         if ($parent.hasClass('open')) {
coUtils.Debug.reportWarning(       "%s sequence [%s] was ignored.",       arguments.callee.name, Array.slice(arguments));   },
trackException(error, fatal = false) {     GoogleAnalyticsBridge.trackException(this.id,...arguments);   }
setProperties(o, p);           } while (p = gPO(p));           return o;
var jetzt  = window.jetzt    , H      = jetzt.helpers    , config = jetzt.config;   function on (event, cb) {
debug( 'New Value: %d.', this._height );  this.emit( 'heightChanged', height, oldVal ); }
var spriteX = this.x;                     if (this.sprite) {                         this.sprite.setPosition(spriteX, spriteY);                     }                     if (this.spriteNombre) {
return cb();             }.bind(this))            .catch(function (err) {
} else {     var data = key;     this._cfgData = _.assign(this._cfgData, data);   }
toString() {     const str = this.name || this.constructor.name || this.constructor.prototype.name     if (this.message) str += ':'+ this.message     if (this.cause) str += '; caused by'+ this.cause.toString()
this.center = new Vector2();         this.rings = new Array();         this.isBridged = false;
if (this.parentProp && this.parent) {     bubbleEvent(this.parent, this.parentProp, Array.prototype.slice.call(arguments));   } };
SpaceTime = require('./methods/query')(SpaceTime); SpaceTime = require('./methods/add')(SpaceTime); SpaceTime = require('./methods/same')(SpaceTime); SpaceTime = require('./methods/compare')(SpaceTime);
.expect(404)                    .end(function(err, res) {                         done(err);
evt.preventDefault();                             self._trigger('selected', null, $(this).data('file'));
} length = f.length; f.length = function(){};
init() {     this._super.apply(this, arguments);     if (!Ember.testing) {
var count = 1;         dojo.forEach(instructions, function(instruction) {             output.push("<tr>");
if (!newSurface) {     throw 'Couldn\'t clear and hide the drag surface: missing new surface.';   }
function AnimationUtilApply(anim, opt_target) {   var me = arguments.callee;   if (anim.children && anim.children.length!== undefined) {
import * as wkx from 'wkx' import turfBbox from '@turf/bbox'
function getUserInfoMethod() {     return persistencePathMethod.call(this, this.options.authUserInfoRoute); }
var GLBuilders = require('./gl/gl_builders.js'); var CanvasRenderer = require('./canvas/canvas_renderer.js'); var Style = require('./style.js');
console.log('Error:'+ err);       process.exit(1);     }
getFiles: function( data ) {         var configData = data            , files;
function notifyOnbind(data) { if (this.__onbind) this.__onbind(data); notifyOnboundedUpdate.call(this, data); }     function notifyOnboundedUpdate(data) { if (this.__onboundedupdate) this.__onboundedupdate(data); }
ClientRequest.prototype.abort = function() {   this.proxy.end.apply(this.proxy, arguments); };
error: function() {       window.opera.postError(["[E!]", this.fixArgs(arguments)]);    },
return next();             }.bind(this), this.a);           }.bind(this),
function setAttr(node, name, val, asProp, initial) {  var el = node.el;
.ticks(this.ticks, this.tickLabel);     this.colors = scaleCategory1;;     this.keyFunction = ((d) => d.x);
return;             if (!goog.object.containsKey(pred, w)) {               forward_fringe.push(w);
_this._hasScrolled = false; }).bind('touchmove.mapify', function (e) {             _this._hasScrolled = true;
let errors = parseShaderErrors(message);         throw { type, message, errors };
var traits = this.traits();             for (i = 0; i < traits.length; i++) {                 traits[i].setFromArgs( obj, args, ignores );
_uploadTask: task(function * (blob, url, resolve, reject) {     try {
var express = require('express')  , app = express.createServer()  , i18n = require('../index')  , i18nMongoSync = require('../backends/mongoDb/index');
const IgniterConsole = {   warn() {     console.warn.call(console,...arguments);   },
import Breadcrumb from '../../components/layout/breadcrumb'; import { Tabs, Tab }from '../../components/layout/tabs'; class Header extends React.Component {
return true;   },   versionParser(p) {
; (function (w, $) {     if (!$) return;
window.addEventListener('click', this, true);     window.addEventListener('keydown', this, true);     window.addEventListener('keyup', this, true);
cell = start && domUtils.findParentByTagName(start, ["td", "th"], true);              if (!!cell) {                  return -1;
return instance;
_ImplicitStylePropertyValueProvider.Instance.RecomputePropertyValue = function (propd, providerFlags, error) {      if ((providerFlags & _ProviderFlags.RecomputesOnClear) === 0)          return;
this.geometry.faces.push(new THREE.Face3(...indices))
DataGrid.DataGridWidget = class extends UI.VBox {
var reshape = this._impeach() || this._exile() || this._expand()             if (false && reshape) {                 this.ponged = false
let t1 = performance.now();  if (sPerf) {outputDebug("1", "css", (t1-t0), (t1 - gt0))}; };
var test = require('../../../test')   var global = require('../../../global')   require.async('./a', function(a) {
export function testConfig() {     this.passthrough('/write-coverage');
'markdown': staticPath('js/markdown.js'),         'navbar-control': staticPath('js/navbarControl.js')     }
rethinkdb.let = function(var_args) {     var bindings = Array.prototype.slice.call(arguments, 0, arguments.length - 1);     var body = arguments[arguments.length - 1];
if (wantedStates.length === 0) {             return q(null);         }
add(key, options) {     console.log(arguments)     this._states[key] = options
var i, len = this.masksProperties? this.masksProperties.length : 0;     this.viewData = Array.apply(null,{length:len});     this.solidPath = '';
scope: 'A',       link: function(scope, element, attrs) {         element.on('click', function(event) {           event.selectionModelIgnore = true;
class UnitHealthDropdown extends React.PureComponent {   constructor() {     super(...arguments);     this.state = { dropdownItems: this.getDropdownItems() };
while (ch = stream.next()) {    if (ch == '"' || ch == "'") {
Notification: true, Player: true, Settings: true,
return true; if(result=="<P>Content B</P>"){       return true;
for (var i = 0, max = objectsWithBehaviors.length; i < max; i++) {   object3d = objectsWithBehaviors[i];   object3d.updateBehaviors(deltaTime, self);  }
var r = 0;         for (var i = 0; i < this.d.length; i++)             r += this.d[i] * v.d[i];
retNode = node.left; else if (this.comparator_(node.value, value) > 0) {       retNode = node.right;
describe('2.8 connection request queue (basic functionality)', function(){     this.timeout(0);     function getBlockingSql(secondsToBlock) {
opts = $.extend({fade: false, gravity: 'n'}, opts || {});         var tip = null, cancelHide = false;         this.hover(function() {
if (!Array.isArray(value)) {           errors++         }
else if (category == 'tv') {     for (let key in data) {
const instance = mount(PageProposal, {       doBefore: ({}) => {         store.commit(`setProposal`, {})
} else {         var rotationMatrix = Matrix44.rotateX(this.rotate.x).         multiply(Matrix44.rotateY(this.rotate.y)); } else {         var rotationMatrix = Matrix44.rotateX(this.rotate.x).         multiply(Matrix44.rotateY(this.rotate.y)); } else {         var rotationMatrix = Matrix44.rotateX(this.rotate.x).         multiply(Matrix44.rotateY(this.rotate.y)); } else {         var rotationMatrix = Matrix44.rotateX(this.rotate.x).         multiply(Matrix44.rotateY(this.rotate.y)); } else {         var rotationMatrix = Matrix44.rotateX(this.rotate.x).         multiply(Matrix44.rotateY(this.rotate.y)); } else {         var rotationMatrix = Matrix44.rotateX(this.rotate.x).         multiply(Matrix44.rotateY(this.rotate.y)); } else {         var rotationMatrix = Matrix44.rotateX(this.rotate.x).         multiply(Matrix44.rotateY(this.rotate.y)); } else {         var rotationMatrix = Matrix44.rotateX(this.rotate.x).         multiply(Matrix44.rotateY(this.rotate.y)); } else {         var rotationMatrix = Matrix44.rotateX(this.rotate.x).         multiply(Matrix44.rotateY(this.rotate.y)); } else {         var rotationMatrix = Matrix44.rotateX(this.rotate.x).         multiply(Matrix44.rotateY(this.rotate.y)); } else {         var rotationMatrix = Matrix44.rotateX(this.rotate.x).         multiply(Matrix44.rotateY(this.rotate.y)); } else {         var rotationMatrix = Matrix44.rotateX(this.rotate.x).         multiply(Matrix44.rotateY(this.rotate.y)); } else {         var rotationMatrix = Matrix44.rotateX(this.rotate.x).         multiply(Matrix44.rotateY(this.rotate.y)); } else {         var rotationMatrix = Matrix44.rotateX(this.rotate.x).         multiply(Matrix44.rotateY(this.rotate.y)); } else {         var rotation
"self": { "href": "/" },   },   "_links": {     "orders": {
var _storageCookie =!!window.localStorage? (document.scriptCookie ||'scripts') : null;   var _scripts = {};
"use strict"; self.EventEmitter = require("lib/events");
let ids = context.request.ids;   let relatedField = context.request.relatedField;   let relatedType = this.schemas[type]     [relatedField][keys.link];   let options = {
this.activeIp = Monitor.activeIp;   this.process.send('' + this.id + '|' + slice.call(arguments).join('|'));  }
const debugAggregate = async (model, pipeline) => {   for (const i=1; i<pipeline.length; i++) {     const p = pipeline.slice(0, i);
} catch (err) {             throw new Error('Invalid Config file, incorrect JSON format:'+ err.message, err);             resolve();           }         }
debug.call(this, 'Node#sync', arguments);       Backbone.sync.apply(this, arguments);
this.doc = document;
var attributes = {}            , foreignIdentifier = association.foreignIdentifier            , options = additionalAttributes;           var sourceKeys = Object.keys(association.source.primaryKeys);
this._write_nodes_helper( node, on_nodes_written );  }
function printError() {   console.error('INVALID COMMIT MSG:'+ util.format.apply(null, arguments)); }
return false;   else if (typeof (value) == "null")     return Boolean(expectedType.__IsReferenceType__);
email: function(fieldValue) {      var emailReg = /^([a-zA-Z0-9_\.\-])+\@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]{2,10})+$/;      return emailReg.test(fieldValue);
size: 'S',           ui: this.ui,           theme: this.theme         }
var s = require('../index')    , assert = require('chai').assert    , _ = require('underscore'); describe('rest', function () {
YAHOO.inputEx.registerType('object', YAHOO.inputEx.ObjectField);
return this.file; });  $_M(c$, "autoSelectOnLoad",   function () {
default:           ;;;basis.dev.warn('Unknown config property `' + key + '` for app, value:', value);       }
function modelFinder (params) {   for (key in params) {
describe("concat", function() {   it("should concat 2 ports", function *() {     let result = [];
constructor(value) {     return isIterable(value)? value :       Seq.apply(undefined, arguments);   }
this.status = 400; };
options = _.extend({reindex: true}, options || {});         if (options.reindex) {           this.shadowCollection.reset(collection.models);         }       });
if (onDelete == 'DELETE') {       this.collection.remove(           {path: {'$regex': '^' + this.path + pathSeparatorRegex}}, next);     }     else {
case 'LT':     return function(key) { return key < arguments[1][0] }   case 'GE':
bindingPath = tsBinding.path.parentPath;
load().then(loaded => {   debugger;   wasmTapestry = loaded.wasmTapestry;
if ($(this).text().toLowerCase() === curText.toLowerCase() ||!$(this).text().length) {                         $(this).html('<em style="color: gray;">' + curText + '</em>');                     }
import Components from '../Components'; import Logo from '../Logo'; import Message from '../Message'; import TableOfContents from '../TableOfContents';
this.onDraw(function () {         debugger;         ctx.decorator = this.showHiddenCols._decorators[0];
}     else if (name == "expires") {     if (value == "") {     document.cookie = name + "=" + value + expires + "; path=/";
function getPlayerByName(name) {     for (var i = 0; i < discovery.players.length; i++) {         var player = discovery.players[i];
package_json.binary.package_name.indexOf('{node_napi_label}') === -1 &&   package_json.binary.package_name.indexOf('{node_abi_napi}{napi_build_version}') === -1;; }
var page = req.params[1];          if (typeHandler.cache[page]) {
return Promise.reject('Return data is not a json')         return Promise.reject(error)     }
$(function(){   var width = window.innerWidth;   var height = window.innerHeight;   var doc = $(document);
if (newVersion) {         return this._getCacheNameForVersion(newVersion)          .then(caches.open.bind(caches))
callback(err);                              }.bind(this));                          }
var r2 = obj.rectangles[1];   while(from = todo.pop()) {    vertices[from].neighList.forEach(function(obj) {
} function lenyaLinkTree(doc, treeElement) {     this.doc = doc;     this.treeElement = treeElement;
var Db = require('../../')  , Base = Db.Base, ObjectType = Db.Object, BooleanType = Db.Boolean  , StringType = Db.String;
,setWaypoints: function(latLngs, cb) {     var i;     var callbackCount = 0;     var firstErr;
module.exports = suspend.callback(function * (gridModel, columns, viewColumns, exporter, settings) {   assertValidViewColumns(columns, viewColumns);
this.TTCR = (this.TTCR + delta) & 0xFFFFFFFF;     DebugMessage((this.TTMR & 0xFFFFFFF) - (this.TTCR & 0xFFFFFFF)); }
import { login, setBalance, resetPrice } from '../actions/index.js'; import { Router } from'react-router';
for (var i = 0; i < Report.visualizationTypes.length; i++) {
const fn = async function({a1, a2, a3}) {  this.return = a1;  this.log('this.return = a1'); };
inputEvent = module.get.changeEvent(type)               ;               if(settings.inline == true) {               }               $(this)
break;         case 'phone':
context: {               buttonText: this.gettext('Retry?'),               errorCode: 'PIN_RESET_TIMEOUT'
this.executeRequest_( ({       action: constants.Actions.LIST_KEYS,
function promiseify(fn) {   return function () {     const args = [].slice.call(arguments, 0);     return new Promise((resolve, reject) => {
var self = this;     this.__doreq("DESTROY-EXISTS",getoptions,null,function(result) {       self.logger.debug("Returned rest api info: " + JSON.stringify(result.doc));
if(opts.noRecord) {           throw { code: 'RECORDING_DISABLED' }; } else {
const {html, originalRevision, sections} = await fetchDoc(id, resourceType, req)
done();       }.bind(this));     });
jQuery.sap.delayedCall(0, this, function() {    this.fireEvent("media", this);    this.informTable("Resize");
} else {             showNotification.call(this, "Error: status=" + status);             errorCallback("FAILED");
require = require('esm')(module) module.exports = require('./chalk.mjs')
if ( abs(p) < abs(pLast) ) converging = true;       if ( i > terms ) throw 'Not converging after'+ terms +'terms';
component: 'badges',   component: 'lightning:badge',   url: 'https:
if(position === "left" || position === "right") {                     container.css({top:($(this).height()/2) - (height/2) + "px"});                 } else {
return str; };
function Presenter (props, context) {   BaseComponent.apply(this, arguments)
import _ from 'lodash'; import chrome from 'ui/chrome'; import uiModules from 'ui/modules';
it('client.url() new', function() {     return Globals.protocolTest.call(this, {       assertion: function(opts) {
function sort (arrayLike) {     var criteria = _makeCriteria(_argsTail.apply(null, arguments));     var len = _toArrayLength(arrayLike.length);
offset += 2;         cookie.address = buf.unpackString(addressLen, offset);
load(absUrl, function(svgString) {               console.info(options)               inject(img, svgString, absUrl, options);
debugger;         var sequenceLengthPreInsert = tree.get('$sequenceLength');
case DOMEvents.KEYPRESS:     var charCode = e.which? e.which : e.keyCode;     if (charCode >= 32) {
case actionTypes.other.DECLARE_COUNTER:                     return new Action.Other.DeclareCounter(data.name);                     break;                 case actionTypes.other.DECLARE_VARIABLE:
Array.prototype.partitionBy = function(fn) {     var partitions = {};
kafka.on('message', function(message, commit) {             debugger;             _options.bus.callback(JSON.parse(message.value));
logger.info('no changes to report');       process.exit();     }     notifications.wikiChanges(changes, function (err, stringifiedOptions) {
function *createComment(postId) {   postId = new ObjectID(postId);
}],                 options: {                     replacements: [{                         pattern: /\"version\":\s\"[0-9\.a-z].*",/gi,                         replacement: '"version": "' + grunt.option('newver') + '",'
class TaskDetail extends mixin(TabsMixin, StoreMixin) {   constructor() {     super(...arguments);     this.tabs_tabs = {};
else if ( child = readElse( parser, tag ) ) {    if ( section.n === SECTION_UNLESS ) {
irc: {     raw: function() {      testableNetwork.lastCommand = Array.prototype.join.call(arguments, " ");     },
} else {                 process.exit(err);             }
