Namespace(log_name='./RQ5/bugsinpy_32_1/codet5p_220m.log', model_name='Salesforce/codet5p-220m', lang='python', output_dir='RQ5/bugsinpy_32_1/codet5p_220m', data_dir='./data/RQ5/bugsinpy_32_1', choice=0, no_cuda=False, visible_gpu='0', num_train_epochs=10, num_test_epochs=1, train_batch_size=8, eval_batch_size=4, gradient_accumulation_steps=1, load_model_path=None, config_name='', tokenizer_name='', max_source_length=512, max_target_length=512, warm_up_ratio=0.1, do_train=True, do_eval=True, do_test=True, freeze=False, learning_rate=5e-05, beam_size=10, weight_decay=0.0, adam_epsilon=1e-08, local_rank=-1, seed=42, early_stop_threshold=3)
Process rank: -1, device: cuda, n_gpu: 1, distributed training: False
Model created!!
[[{'text': 'def jsonable_encoder(      custom_encoder: dict = {},  ) -> Any:      if isinstance(obj, BaseModel):         if not obj.Config.json_encoders:             return jsonable_encoder(                 obj.dict(include=include, exclude=exclude, by_alias=by_alias),                 include_none=include_none,             )         else:             return jsonable_encoder(                 obj.dict(include=include, exclude=exclude, by_alias=by_alias),                 include_none=include_none,                 custom_encoder=obj.Config.json_encoders,             )      if isinstance(obj, Enum):          return obj.value      if isinstance(obj, (str, int, float, type(None))):', 'loss_ids': 0, 'shortenable_ids': 1}, {'text': '<mask>', 'loss_ids': 1, 'shortenable_ids': 0}, {'text': 'is the fixed version', 'loss_ids': 0, 'shortenable_ids': 0}], {'guid': 0, 'tgt_text': 'def jsonable_encoder(      custom_encoder: dict = {},  ) -> Any:      if isinstance(obj, BaseModel):         encoder = getattr(obj.Config, "json_encoders", custom_encoder)         return jsonable_encoder(             obj.dict(include=include, exclude=exclude, by_alias=by_alias),             include_none=include_none,             custom_encoder=encoder,         )      if isinstance(obj, Enum):          return obj.value      if isinstance(obj, (str, int, float, type(None))):'}]
***** Running training *****
  Num examples = 32
  Batch size = 8
  Num epoch = 10

***** Running evaluation *****
  Num examples = 100
  Batch size = 4
  epoch = 0
  eval_ppl = 6.007252742613998e+275
  global_step = 5
  train_loss = 102.5353
  ********************
Previous best ppl:inf
Achieve Best ppl:6.007252742613998e+275
  ********************
BLEU file: ./data/RQ5/bugsinpy_32_1/validation.jsonl
  codebleu-4 = 29.1 	 Previous best codebleu 0
  ********************
 Achieve Best bleu:29.1
  ********************

***** Running evaluation *****
  Num examples = 100
  Batch size = 4
  epoch = 1
  eval_ppl = 3.0266095627375372e+289
  global_step = 9
  train_loss = 62.949
  ********************
Previous best ppl:6.007252742613998e+275
BLEU file: ./data/RQ5/bugsinpy_32_1/validation.jsonl
  codebleu-4 = 46.87 	 Previous best codebleu 29.1
  ********************
 Achieve Best bleu:46.87
  ********************

***** Running evaluation *****
  Num examples = 100
  Batch size = 4
  epoch = 2
  eval_ppl = inf
  global_step = 13
  train_loss = 44.6785
  ********************
Previous best ppl:6.007252742613998e+275
BLEU file: ./data/RQ5/bugsinpy_32_1/validation.jsonl
  codebleu-4 = 75.11 	 Previous best codebleu 46.87
  ********************
 Achieve Best bleu:75.11
  ********************

***** Running evaluation *****
  Num examples = 100
  Batch size = 4
  epoch = 3
  eval_ppl = inf
  global_step = 17
  train_loss = 31.3433
  ********************
Previous best ppl:6.007252742613998e+275
BLEU file: ./data/RQ5/bugsinpy_32_1/validation.jsonl
  codebleu-4 = 75.46 	 Previous best codebleu 75.11
  ********************
 Achieve Best bleu:75.46
  ********************

***** Running evaluation *****
  Num examples = 100
  Batch size = 4
  epoch = 4
  eval_ppl = inf
  global_step = 21
  train_loss = 24.3588
  ********************
Previous best ppl:6.007252742613998e+275
BLEU file: ./data/RQ5/bugsinpy_32_1/validation.jsonl
  codebleu-4 = 75.5 	 Previous best codebleu 75.46
  ********************
 Achieve Best bleu:75.5
  ********************

***** Running evaluation *****
  Num examples = 100
  Batch size = 4
  epoch = 5
  eval_ppl = inf
  global_step = 25
  train_loss = 19.9054
  ********************
Previous best ppl:6.007252742613998e+275
BLEU file: ./data/RQ5/bugsinpy_32_1/validation.jsonl
  codebleu-4 = 74.91 	 Previous best codebleu 75.5
  ********************

***** Running evaluation *****
  Num examples = 100
  Batch size = 4
  epoch = 6
  eval_ppl = inf
  global_step = 29
  train_loss = 15.5219
  ********************
Previous best ppl:6.007252742613998e+275
BLEU file: ./data/RQ5/bugsinpy_32_1/validation.jsonl
  codebleu-4 = 75.38 	 Previous best codebleu 75.5
  ********************

***** Running evaluation *****
  Num examples = 100
  Batch size = 4
  epoch = 7
  eval_ppl = inf
  global_step = 33
  train_loss = 13.0949
  ********************
Previous best ppl:6.007252742613998e+275
BLEU file: ./data/RQ5/bugsinpy_32_1/validation.jsonl
  codebleu-4 = 75.38 	 Previous best codebleu 75.5
  ********************
early stopping!!!
reload model from RQ5/bugsinpy_32_1/codet5p_220m/checkpoint-best-bleu
BLEU file: ./data/RQ5/bugsinpy_32_1/test.jsonl
  codebleu = 75.59 
  Total = 117 
  Exact Fixed = 0 
[]
  Syntax Fixed = 0 
[]
  Cleaned Fixed = 0 
[]
  ********************
  Total = 117 
  Exact Fixed = 0 
[]
  Syntax Fixed = 0 
[]
  Cleaned Fixed = 0 
[]
  codebleu = 75.59 
[0.7768711691119308, 0.7585846389475988, 0.2909718763883706, 0.878865255109752, 0.9063467386633746, 0.782053171927164, 0.8096114788906146, 0.6883720951974961, 0.860117164263619, 0.8573638305228279, 0.6728230800934798, 0.8703246706459902, 0.9472873156881443, 0.8884573785188872, 0.7715012035371895, 0.7332519354895861, 0.8441782169344423, 0.7449734989717058, 0.8871978499693505, 0.568803606953774, 0.7572098935987482, 0.5936056097912514, 0.8674433454759134, 0.7318286091585733, 0.7225931341121177, 0.8856389378075658, 0.8077895563342797, 0.8773104352365284, 0.8834630241782442, 0.7507982187182929, 0.8195330229945343, 0.6441425627537012, 0.9474759345795825, 0.8358395384567638, 0.6853803599169206, 0.7711221670600811, 0.7884485258508804, 0.6936199831009335, 0.676525822803221, 0.8300101016746005, 0.5117566728908322, 0.27280442542315864, 0.6439391185600173, 0.49150427670545643, 0.7639654153934541, 0.583933634540305, 0.7042953619649426, 0.8234479137638847, 0.4545507520171642, 0.848034624064077, 0.884250182279102, 0.8086254987195756, 0.9056583090096291, 0.7443181170763433, 0.8974592792813174, 0.7531797171538064, 0.8611544762176193, 0.8231560738418289, 0.6939112308588368, 0.725598015348109, 0.6374410208386678, 0.6356257812621184, 0.8107806147142924, 0.47166395418323315, 0.8484585607242681, 0.8923125000332248, 0.8362747318435784, 0.7093853536262804, 0.8789801838086921, 0.8834124216164225, 0.8814955038434287, 0.8594942629236695, 0.8475864225311183, 0.8853004704636518, 0.5911195501972704, 0.8631855387221548, 0.8352894783834772, 0.5750974938187585, 0.6601281703247908, 0.8736270526063763, 0.8971695160234401, 0.788050295413492, 0.9411542454583528, 0.6508693332230462, 0.621240758456996, 0.8808919461147899, 0.8475332565755729, 0.9204219587780458, 0.8300638244826566, 0.8548397899287874, 0.7680104457345107, 0.8754861943073293, 0.2802987511943521, 0.7420541780659815, 0.8068413656728535, 0.8399114554115357, 0.9178662308912058, 0.8782734899756608, 0.5037077119806818, 0.8962096929024133, 0.6413921957402942, 0.39686614731832626, 0.8052050509144788, 0.8021170040829606, 0.5571314709024371, 0.9142445273649933, 0.6530224530296921, 0.7840584321049944, 0.4740532618616287, 0.5681295751079041, 0.7953587603777192, 0.8807926879441415, 0.6493367645086796, 0.7714650156104186, 0.7738279988463377, 0.610067068626702, 0.8385834949297515]
Finish training and take 21m
