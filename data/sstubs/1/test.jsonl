{"fixCommitSHA1": "b8a9afc28a44b40c612f972230a8f10b201a8b5d", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "     @Test\n     public void testCamel() throws Exception {\n        results.expectedMessageCount(2);\n         dataset.setExpectedMessageCount(1);\n         results.assertIsSatisfied();\n         dataset.assertIsSatisfied();", "fixed": "     @Test\n     public void testCamel() throws Exception {\n        results.expectedMessageCount(3);\n         dataset.setExpectedMessageCount(1);\n         results.assertIsSatisfied();\n         dataset.assertIsSatisfied();", "sourceBeforeFix": "results.expectedMessageCount(2)", "sourceAfterFix": "results.expectedMessageCount(3)"}
{"fixCommitSHA1": "419fb4a4dee3cd001631daa06fe6b8c30095b468", "projectName": "apache.hadoop", "bugType": "Change Identifier Used", "problem": "                                                   ) throws IOException {\n     try {\n      ugi.reloginFromKeytab();\n       return ugi.doAs(new PrivilegedExceptionAction<Token<?>>() {\n         @Override\n         public Token<?> run() throws IOException {", "fixed": "                                                   ) throws IOException {\n     try {\n      ugi.checkTGTAndReloginFromKeytab();\n       return ugi.doAs(new PrivilegedExceptionAction<Token<?>>() {\n         @Override\n         public Token<?> run() throws IOException {", "sourceBeforeFix": "UserGroupInformation.getLoginUser().reloginFromKeytab()", "sourceAfterFix": "UserGroupInformation.getLoginUser().checkTGTAndReloginFromKeytab()"}
{"fixCommitSHA1": "cca814afdb1449e3bfc309dc892c0185c783622c", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "         int queueSize = -1;\n         if (maxQueueSize != null) {\n            queueSize = CamelContextHelper.parseInteger(getCamelContext(), keepAliveTime);\n         }\n         ExecutorService answer = getCamelContext().getExecutorServiceStrategy().newThreadPool(getId(), getThreadName(),", "fixed": "         int queueSize = -1;\n         if (maxQueueSize != null) {\n            queueSize = CamelContextHelper.parseInteger(getCamelContext(), maxQueueSize);\n         }\n         ExecutorService answer = getCamelContext().getExecutorServiceStrategy().newThreadPool(getId(), getThreadName(),", "sourceBeforeFix": "CamelContextHelper.parseInteger(getCamelContext(),keepAliveTime)", "sourceAfterFix": "CamelContextHelper.parseInteger(getCamelContext(),maxQueueSize)"}
{"fixCommitSHA1": "854af53a74b461754392f0b9e854e8fefe8c0ade", "projectName": "Atmosphere.atmosphere", "bugType": "More Specific If", "problem": "                 }\n                 logger.trace(\"About to close AtmosphereResource for {} with code {}\", resource, closeCode);\n                if (!resource.getAtmosphereResourceEvent().isClosedByApplication() && !resource.isCancelled()) {\n                     if (allowedToClose) {", "fixed": "                 }\n                 logger.trace(\"About to close AtmosphereResource for {} with code {}\", resource, closeCode);\n                if (!resource.getAtmosphereResourceEvent().isClosedByClient() && !resource.getAtmosphereResourceEvent().isClosedByApplication() && !resource.isCancelled()) {\n                     if (allowedToClose) {", "sourceBeforeFix": "!resource.getAtmosphereResourceEvent().isClosedByApplication() && !resource.isCancelled()", "sourceAfterFix": "!resource.getAtmosphereResourceEvent().isClosedByClient() && !resource.getAtmosphereResourceEvent().isClosedByApplication() && !resource.isCancelled()"}
{"fixCommitSHA1": "5d6b0ad639f597e0245d7b4591f383f4f12c23d7", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "                     invocation.nodeEngine, invocation.serviceName, isStillRunningOperation,\n                     invocation.getTarget(), 0, 0, IS_EXECUTING_CALL_TIMEOUT, callback, true);\n            invocation.logger.warning(\"Asking if operation execution has been started: \" + invocation);\n             inv.invoke();\n         }\n     }", "fixed": "                     invocation.nodeEngine, invocation.serviceName, isStillRunningOperation,\n                     invocation.getTarget(), 0, 0, IS_EXECUTING_CALL_TIMEOUT, callback, true);\n            invocation.logger.finest(\"Asking if operation execution has been started: \" + invocation);\n             inv.invoke();\n         }\n     }", "sourceBeforeFix": "invocation.logger.warning(\"'is-executing': \" + executing + \" -> \"+ invocation)", "sourceAfterFix": "invocation.logger.finest(\"'is-executing': \" + executing + \" -> \"+ invocation)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<Status> getFriendsTimeline(Paging paging) throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\",null, paging.asPostParameterList(), true));\n     }\n     /**", "fixed": "      */\n     public ResponseList<Status> getFriendsTimeline(Paging paging) throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\",null, paging.asPostParameterList(), true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweets/\" + statusId+ \".json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweets/\" + statusId+ \".json\",true))"}
{"fixCommitSHA1": "907ddc126cd19f6a1c464608faa6da739483e682", "projectName": "swagger-api.swagger-core", "bugType": "Same Function Swap Args", "problem": "         final Model model = read.get(GenericModel.class.getSimpleName());\n         assertTrue(model.getProperties().containsKey(NAME));\n        assertEquals(model.getProperties().get(NAME).getType(), \"string\");\n         assertTrue(model.getProperties().containsKey(COUNT));\n        assertEquals(model.getProperties().get(COUNT).getType(), \"integer\");\n     }\n }", "fixed": "         final Model model = read.get(GenericModel.class.getSimpleName());\n         assertTrue(model.getProperties().containsKey(NAME));\n        assertEquals(\"string\", model.getProperties().get(NAME).getType());\n         assertTrue(model.getProperties().containsKey(COUNT));\n        assertEquals(\"integer\", model.getProperties().get(COUNT).getType());\n     }\n }", "sourceBeforeFix": "assertEquals(model.getProperties().get(NAME).getType(),\"string\")", "sourceAfterFix": "assertEquals(\"string\",model.getProperties().get(NAME).getType())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "cd699c562ec26d3909af08afb04de6080e4ad18f", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t}\n \tpublic static TaskManager createTaskManager(JobManager jm) throws Exception {\n\t\tInetAddress localhost = InetAddress.getLoopbackAddress();\n \t\tInetSocketAddress jmMockAddress = new InetSocketAddress(localhost, 55443);\n \t\tConfiguration cfg = new Configuration();", "fixed": " \t}\n \tpublic static TaskManager createTaskManager(JobManager jm) throws Exception {\n\t\tInetAddress localhost = InetAddress.getLocalHost();\n \t\tInetSocketAddress jmMockAddress = new InetSocketAddress(localhost, 55443);\n \t\tConfiguration cfg = new Configuration();", "sourceBeforeFix": "InetAddress.getLoopbackAddress()", "sourceAfterFix": "InetAddress.getLocalHost()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "c2d5b41fb48cc2b913a2a04d2b68aa4369acac6a", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "      *\n      * @return the list selection model\n      */\n    final ListSelectionModel getListSelectionModel() {\n         return listSelectionModel;\n     }", "fixed": "      *\n      * @return the list selection model\n      */\n    protected final ListSelectionModel getListSelectionModel() {\n         return listSelectionModel;\n     }", "sourceBeforeFix": "16", "sourceAfterFix": "20"}
{"fixCommitSHA1": "46fa8090954480eecdeb6e7367f0e30655853f42", "projectName": "checkstyle.checkstyle", "bugType": "Same Function More Args", "problem": "         final Map<String, MapDifference.ValueDifference<List<String>>> differingViolations =\n                 violationDifferences.entriesDiffering();\n        final StringBuilder message = new StringBuilder();\n         if (!missingViolations.isEmpty()) {\n             message.append(\"missing violations: \").append(missingViolations);\n         }", "fixed": "         final Map<String, MapDifference.ValueDifference<List<String>>> differingViolations =\n                 violationDifferences.entriesDiffering();\n        final StringBuilder message = new StringBuilder(256);\n         if (!missingViolations.isEmpty()) {\n             message.append(\"missing violations: \").append(missingViolations);\n         }", "sourceBeforeFix": "new StringBuilder()", "sourceAfterFix": "new StringBuilder(256)"}
{"fixCommitSHA1": "d251856fc9062d7abcdb5b4e48e7385d8e978b9b", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t@Override\r\n \tpublic String getString (String key) {\r\n\t\tNSString value = (NSString)nsDictionary.get(convertKey(key));\r\n \t\tif (value == null) return \"\";\r\n \t\treturn value.toString();\r\n \t}\r", "fixed": " \t@Override\r\n \tpublic String getString (String key) {\r\n\t\tObject value = nsDictionary.get(convertKey(key));\r\n \t\tif (value == null) return \"\";\r\n \t\treturn value.toString();\r\n \t}\r", "sourceBeforeFix": "NSString value=(NSString)nsDictionary.get(convertKey(key)); ", "sourceAfterFix": "Object value=nsDictionary.get(convertKey(key)); "}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "fixed": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4fv(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4fv(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "sourceBeforeFix": "GL20.glGetUniform(program,location,params)", "sourceAfterFix": "GL20.glGetUniformiv(program,location,params)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites(String id) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"favorites/\" + id + \".json\", new PostParameter[0], true));\n     }\n     /**", "fixed": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites(String id) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"favorites/\" + id + \".json\", new PostParameter[0], true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/public_timeline.json\",false))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/public_timeline.json\",false))"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface BeanstalkEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedBeanstalkEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface BeanstalkEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedBeanstalkEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "ff34b04700d0417df1049e4d749fdf430076965b", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "         }\n     }\n    private static boolean shouldAppendSpace(StringBuffer text, char firstCharToAppend) {\n         final boolean result;\n         if (text.length() == 0) {", "fixed": "         }\n     }\n    private static boolean shouldAppendSpace(StringBuilder text, char firstCharToAppend) {\n         final boolean result;\n         if (text.length() == 0) {", "sourceBeforeFix": "StringBuffer result", "sourceAfterFix": "StringBuilder result"}
{"fixCommitSHA1": "0258fcc52329833429a7c745c610f3b8aaf57ce7", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "         public FastStringCreator(Constructor<String> constructor) {\n             this.constructor = constructor;\n            this.useOldStringConstructor = constructor.getTypeParameters().length == 3;\n         }\n         @Override", "fixed": "         public FastStringCreator(Constructor<String> constructor) {\n             this.constructor = constructor;\n            this.useOldStringConstructor = constructor.getParameterTypes().length == 3;\n         }\n         @Override", "sourceBeforeFix": "constructor.getTypeParameters()", "sourceAfterFix": "constructor.getParameterTypes()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  private final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "f64bf581e7987690846b820cb4e2af554d49165e", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "                 .multicast(new BankResponseAggregationStrategy())\n                    .setParallelProcessing(true)\n                     .to(Constants.BANK1_URI, Constants.BANK2_URI, Constants.BANK3_URI);", "fixed": "                 .multicast(new BankResponseAggregationStrategy())\n                    .parallelProcessing(true)\n                     .to(Constants.BANK1_URI, Constants.BANK2_URI, Constants.BANK3_URI);", "sourceBeforeFix": "from(Constants.PARALLEL_LOANBROKER_URI).process(new CreditScoreProcessor(Constants.CREDITAGENCY_ADDRESS)).multicast(new BankResponseAggregationStrategy()).setParallelProcessing(true)", "sourceAfterFix": "from(Constants.PARALLEL_LOANBROKER_URI).process(new CreditScoreProcessor(Constants.CREDITAGENCY_ADDRESS)).multicast(new BankResponseAggregationStrategy()).parallelProcessing(true)"}
{"fixCommitSHA1": "53694f29adf8c68992e1b966c86380219f438c14", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         String uri = getScpUri() + \"?username=admin&password=admin&chmod=640&knownHostsFile=\" + getKnownHostsFile();\n         template.sendBodyAndHeader(uri, \"Bonjour Monde\", Exchange.FILE_NAME, \"monde.txt\");\n        Thread.sleep(100);\n         File file = new File(getScpPath() + \"/monde.txt\");\n         assertFileExists(file.getAbsolutePath());", "fixed": "         String uri = getScpUri() + \"?username=admin&password=admin&chmod=640&knownHostsFile=\" + getKnownHostsFile();\n         template.sendBodyAndHeader(uri, \"Bonjour Monde\", Exchange.FILE_NAME, \"monde.txt\");\n        Thread.sleep(200);\n         File file = new File(getScpPath() + \"/monde.txt\");\n         assertFileExists(file.getAbsolutePath());", "sourceBeforeFix": "Thread.sleep(100)", "sourceAfterFix": "Thread.sleep(200)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedLdapEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default LdapEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedLdapEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default LdapEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsText(String path, long millis) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), millis, null);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsText(String path, long millis) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), millis, null);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public List<Trends> getDailyTrends(Date date, boolean excludeHashTags) throws TwitterException {\n        return Trends.constructTrendsList(get(getSearchBaseURL()\n                 + \"trends/daily.json?date=\" + toDateStr(date)\n                 + (excludeHashTags ? \"&exclude=hashtags\" : \"\"), false));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public List<Trends> getDailyTrends(Date date, boolean excludeHashTags) throws TwitterException {\n        return Trends.createTrendsList(get(getSearchBaseURL()\n                 + \"trends/daily.json?date=\" + toDateStr(date)\n                 + (excludeHashTags ? \"&exclude=hashtags\" : \"\"), false));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     return additionalReplacements;\n   }\n  private final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     return additionalReplacements;\n   }\n  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites(String id) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"favorites/\" + id + \".json\", new PostParameter[0], true));\n     }\n     /**", "fixed": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites(String id) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"favorites/\" + id + \".json\", new PostParameter[0], true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\",null,paging.asPostParameterList(),true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\",null,paging.asPostParameterList(),true))"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedApnsEndpointBuilder\n             extends\n                 AdvancedApnsEndpointConsumerBuilder, AdvancedApnsEndpointProducerBuilder {\n         default ApnsEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedApnsEndpointBuilder\n             extends\n                 AdvancedApnsEndpointConsumerBuilder, AdvancedApnsEndpointProducerBuilder {\n         default ApnsEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15857, value = \"Only 1 piece of content is currently supported (AS7-431)\")\n     String as7431();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10857, value = \"Only 1 piece of content is currently supported (AS7-431)\")\n     String as7431();\n     /**", "sourceBeforeFix": "id=15860", "sourceAfterFix": "id=10860"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public List<Trends> getDailyTrends(Date date, boolean excludeHashTags) throws TwitterException {\n        return Trends.constructTrendsList(get(getSearchBaseURL()\n                 + \"trends/daily.json?date=\" + toDateStr(date)\n                 + (excludeHashTags ? \"&exclude=hashtags\" : \"\"), false));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public List<Trends> getDailyTrends(Date date, boolean excludeHashTags) throws TwitterException {\n        return Trends.createTrendsList(get(getSearchBaseURL()\n                 + \"trends/daily.json?date=\" + toDateStr(date)\n                 + (excludeHashTags ? \"&exclude=hashtags\" : \"\"), false));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  private final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
