{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "dafd2b77ff53cafd6860919aa74afb7c9b296466", "projectName": "code4craft.webmagic", "bugType": "Change Numeric Literal", "problem": "  */\n public class GithubRepoPageProcessor implements PageProcessor {\n    private Site site = Site.me().setRetryTimes(3).setSleepTime(0);\n     @Override\n     public void process(Page page) {\npage.addTargetRequests(page.getHtml().links().regex(\"(https:\npage.addTargetRequests(page.getHtml().links().regex(\"(https:\npage.putField(\"author\", page.getUrl().regex(\"https:\npage.putField(\"name\", page.getHtml().xpath(\"", "fixed": "  */\n public class GithubRepoPageProcessor implements PageProcessor {\n    private Site site = Site.me().setRetryTimes(3).setSleepTime(1000);\n     @Override\n     public void process(Page page) {\npage.addTargetRequests(page.getHtml().links().regex(\"(https:\npage.addTargetRequests(page.getHtml().links().regex(\"(https:\npage.putField(\"author\", page.getUrl().regex(\"https:\npage.putField(\"name\", page.getHtml().xpath(\"", "sourceBeforeFix": "Site.me().setRetryTimes(3).setSleepTime(0)", "sourceAfterFix": "Site.me().setRetryTimes(3).setSleepTime(1000)"}
{"fixCommitSHA1": "e0bd630e8adb61a9085a2cc3eb1302fcba9a47fd", "projectName": "alibaba.dubbo", "bugType": "Change Numeric Literal", "problem": "URL publishUrl = URL.valueOf(\"dubbo:\n         metadataReportService1.publishProvider(publishUrl);\n        Thread.sleep(100);\n         Assert.assertTrue(metadataReportService1.metadataReport instanceof JTestMetadataReport4Test);", "fixed": "URL publishUrl = URL.valueOf(\"dubbo:\n         metadataReportService1.publishProvider(publishUrl);\n        Thread.sleep(300);\n         Assert.assertTrue(metadataReportService1.metadataReport instanceof JTestMetadataReport4Test);", "sourceBeforeFix": "Thread.sleep(100)", "sourceAfterFix": "Thread.sleep(300)"}
{"fixCommitSHA1": "70c31b498c5083f9efc1914b679737235826149f", "projectName": "facebook.presto", "bugType": "Wrong Function Name", "problem": "         this.functionManager = functionManager;\n         Optional<Duration> totalCpuTime = stats.map(s -> new Duration(s.values().stream()\n                .mapToLong(planNode -> planNode.getPlanNodeScheduledTime().toMillis())\n                 .sum(), MILLISECONDS));\n         Optional<Duration> totalScheduledTime = stats.map(s -> new Duration(s.values().stream()\n                .mapToLong(planNode -> planNode.getPlanNodeCpuTime().toMillis())\n                 .sum(), MILLISECONDS));\n         this.representation = new PlanRepresentation(planRoot, types, totalCpuTime, totalScheduledTime);", "fixed": "         this.functionManager = functionManager;\n         Optional<Duration> totalCpuTime = stats.map(s -> new Duration(s.values().stream()\n                .mapToLong(planNode -> planNode.getPlanNodeCpuTime().toMillis())\n                 .sum(), MILLISECONDS));\n         Optional<Duration> totalScheduledTime = stats.map(s -> new Duration(s.values().stream()\n                .mapToLong(planNode -> planNode.getPlanNodeScheduledTime().toMillis())\n                 .sum(), MILLISECONDS));\n         this.representation = new PlanRepresentation(planRoot, types, totalCpuTime, totalScheduledTime);", "sourceBeforeFix": "planNode.getPlanNodeCpuTime()", "sourceAfterFix": "planNode.getPlanNodeScheduledTime()"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "fixed": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2fv(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2fv(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "sourceBeforeFix": "GL20.glUniform4(location,v)", "sourceAfterFix": "GL20.glUniform4iv(location,v)"}
{"fixCommitSHA1": "bd3a6e9e31b2153ea00e964eed4a56a52e5ad57e", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t * object. The <code>to</code> object must have at least all the fields of the <code>from</code> object with the same name and\n \t * type. */\n \tpublic void copyFields (Object from, Object to) {\n\t\tOrderedMap<String, FieldMetadata> toFields = getFields(from.getClass());\n \t\tfor (ObjectMap.Entry<String, FieldMetadata> entry : getFields(from.getClass())) {\n \t\t\tFieldMetadata toField = toFields.get(entry.key);\n \t\t\tField fromField = entry.value.field;\n\t\t\tif (toField == null) throw new SerializationException(\"To object is missing field\" + entry.key);\n \t\t\ttry {\n \t\t\t\ttoField.field.set(to, fromField.get(from));\n \t\t\t} catch (ReflectionException ex) {", "fixed": " \t * object. The <code>to</code> object must have at least all the fields of the <code>from</code> object with the same name and\n \t * type. */\n \tpublic void copyFields (Object from, Object to) {\n\t\tOrderedMap<String, FieldMetadata> toFields = getFields(to.getClass());\n \t\tfor (ObjectMap.Entry<String, FieldMetadata> entry : getFields(from.getClass())) {\n \t\t\tFieldMetadata toField = toFields.get(entry.key);\n \t\t\tField fromField = entry.value.field;\n\t\t\tif (toField == null) throw new SerializationException(\"To object is missing field: \" + entry.key);\n \t\t\ttry {\n \t\t\t\ttoField.field.set(to, fromField.get(from));\n \t\t\t} catch (ReflectionException ex) {", "sourceBeforeFix": "from.getClass()", "sourceAfterFix": "to.getClass()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15852, value = \"Caught %s storing deployment content -- %s\")\n     String caughtExceptionStoringDeploymentContent(String exceptionName, Throwable exception);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10852, value = \"Caught %s storing deployment content -- %s\")\n     String caughtExceptionStoringDeploymentContent(String exceptionName, Throwable exception);\n     /**", "sourceBeforeFix": "id=15859", "sourceAfterFix": "id=10859"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "1f4466a7a54f26f78f47d4fa3f5b6e6d786aefcc", "projectName": "clojure.clojure", "bugType": "Change Numeric Literal", "problem": " \t}\n \tvoid emitClearLocals(GeneratorAdapter gen){\n\t\tfor(int i = 0; i < numParams(); i++)\n \t\t\t{\n \t\t\tif(!localsUsedInCatchFinally.contains(i))\n \t\t\t\t{\n \t\t\t\tgen.visitInsn(Opcodes.ACONST_NULL);\n\t\t\t\tgen.storeArg(i);\n \t\t\t\t}\n \t\t\t}\n \t\tfor(int i = numParams() + 1; i < maxLocal + 1; i++)", "fixed": " \t}\n \tvoid emitClearLocals(GeneratorAdapter gen){\n\t\tfor(int i = 1; i < numParams()+1; i++)\n \t\t\t{\n \t\t\tif(!localsUsedInCatchFinally.contains(i))\n \t\t\t\t{\n \t\t\t\tgen.visitInsn(Opcodes.ACONST_NULL);\n\t\t\t\tgen.visitVarInsn(OBJECT_TYPE.getOpcode(Opcodes.ISTORE), i);\n \t\t\t\t}\n \t\t\t}\n \t\tfor(int i = numParams() + 1; i < maxLocal + 1; i++)", "sourceBeforeFix": "i=0", "sourceAfterFix": "i=1"}
{"fixCommitSHA1": "038ea1803bae1cf3be279b36395b4de4e0ff39b5", "projectName": "openhab.openhab", "bugType": "Change Identifier Used", "problem": " \t * Validates Username and Password then saved sercurityToken to a variable\n \t */\n \tprivate void login() throws InvalidLoginException, IOException {\n\t\tlogger.debug(\"attempting to login\");\n \t\tString url = String\n \t\t\t\t.format(\"%s/api/user/validate?appId=%s&SecurityToken=null&username=%s&password=%s\",\n \t\t\t\t\t\tWEBSITE, enc(appId), enc(userName), enc(password));", "fixed": " \t * Validates Username and Password then saved sercurityToken to a variable\n \t */\n \tprivate void login() throws InvalidLoginException, IOException {\n\t\tlogger.trace(\"attempting to login\");\n \t\tString url = String\n \t\t\t\t.format(\"%s/api/user/validate?appId=%s&SecurityToken=null&username=%s&password=%s\",\n \t\t\t\t\t\tWEBSITE, enc(appId), enc(userName), enc(password));", "sourceBeforeFix": "logger.debug(\"Retreiveing door data\")", "sourceAfterFix": "logger.trace(\"Retreiveing door data\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedMockEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default MockEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedMockEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default MockEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15859, value = \"A slave domain controller cannot accept deployment content uploads\")\n     String slaveCannotAcceptUploads();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10859, value = \"A slave domain controller cannot accept deployment content uploads\")\n     String slaveCannotAcceptUploads();\n     /**", "sourceBeforeFix": "id=15839", "sourceAfterFix": "id=10839"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedNettyEndpointBuilder\n             extends\n                 AdvancedNettyEndpointConsumerBuilder, AdvancedNettyEndpointProducerBuilder {\n         default NettyEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedNettyEndpointBuilder\n             extends\n                 AdvancedNettyEndpointConsumerBuilder, AdvancedNettyEndpointProducerBuilder {\n         default NettyEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "761d3ff3b19109715644ebc2bfa0396f3148d772", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "                 } catch (InterruptedException e) {\n                     e.printStackTrace();\n                 }\n                hz1.getLifecycleService().terminate();\n             }\n         };", "fixed": "                 } catch (InterruptedException e) {\n                     e.printStackTrace();\n                 }\n                hz1.getLifecycleService().shutdown();\n             }\n         };", "sourceBeforeFix": "hz1.getLifecycleService().terminate()", "sourceAfterFix": "hz1.getLifecycleService().shutdown()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "35dc7982d28800b4fecdf0772236a2d8e054aa77", "projectName": "spring-projects.spring-boot", "bugType": "Change Modifier", "problem": " \t}\n \t@Test\n\tpublic void testHealth() throws Exception {\nString url = \"http:\n \t\tSystem.out.println(url);\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);", "fixed": " \t}\n \t@Test\n\tvoid testHealth() throws Exception {\nString url = \"http:\n \t\tSystem.out.println(url);\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15865, value = \"Invalid content declaration\")\n     String invalidContentDeclaration();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10865, value = \"Invalid content declaration\")\n     String invalidContentDeclaration();\n     /**", "sourceBeforeFix": "id=15846", "sourceAfterFix": "id=10846"}
{"fixCommitSHA1": "3dddcc4cdf4a74ddbd4607c6aaee5bdd8ac46c27", "projectName": "gephi.gephi", "bugType": "Change Modifier", "problem": "     }\n     @Override\n    public void resetSelection() {\n         resetNodesSelection();\n         resetEdgesSelection();", "fixed": "     }\n     @Override\n    public synchronized void resetSelection() {\n         resetNodesSelection();\n         resetEdgesSelection();", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "6618cef776cf1c9ce67ff8ee461412110ca5ada7", "projectName": "apache.flink", "bugType": "Wrong Function Name", "problem": " \t\t\t\ttaskManagerQueryServiceGatewaysFuture.whenCompleteAsync(\n \t\t\t\t\t(Collection<Tuple2<ResourceID, String>> queryServiceGateways, Throwable throwable) -> {\n \t\t\t\t\t\tif (throwable != null) {\n\t\t\t\t\t\t\tLOG.warn(\"Requesting TaskManager's path for query services failed.\", throwable);\n \t\t\t\t\t\t} else {\n \t\t\t\t\t\t\tList<String> taskManagersToRetain = queryServiceGateways\n \t\t\t\t\t\t\t\t.stream()", "fixed": " \t\t\t\ttaskManagerQueryServiceGatewaysFuture.whenCompleteAsync(\n \t\t\t\t\t(Collection<Tuple2<ResourceID, String>> queryServiceGateways, Throwable throwable) -> {\n \t\t\t\t\t\tif (throwable != null) {\n\t\t\t\t\t\t\tLOG.debug(\"Requesting TaskManager's path for query services failed.\", throwable);\n \t\t\t\t\t\t} else {\n \t\t\t\t\t\t\tList<String> taskManagersToRetain = queryServiceGateways\n \t\t\t\t\t\t\t\t.stream()", "sourceBeforeFix": "LOG.warn(\"Exception while fetching metrics.\",e)", "sourceAfterFix": "LOG.debug(\"Exception while fetching metrics.\",e)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "fixed": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "sourceBeforeFix": "EXTFramebufferObject.glGetRenderbufferParameterEXT(target,pname,params)", "sourceAfterFix": "EXTFramebufferObject.glGetRenderbufferParameterivEXT(target,pname,params)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedHazelcastReplicatedmapEndpointBuilder\n             extends\n                 AdvancedHazelcastReplicatedmapEndpointConsumerBuilder, AdvancedHazelcastReplicatedmapEndpointProducerBuilder {\n         default HazelcastReplicatedmapEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedHazelcastReplicatedmapEndpointBuilder\n             extends\n                 AdvancedHazelcastReplicatedmapEndpointConsumerBuilder, AdvancedHazelcastReplicatedmapEndpointProducerBuilder {\n         default HazelcastReplicatedmapEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "0cb756acf8ee44c28bee8b9ea626e2a65cee5880", "projectName": "google.guava", "bugType": "Change Identifier Used", "problem": "     rng.nextBytes(bytes);\n     ByteBuffer littleEndian = ByteBuffer.wrap(bytes).order(ByteOrder.LITTLE_ENDIAN);\n     ByteBuffer bigEndian = ByteBuffer.wrap(bytes).order(ByteOrder.BIG_ENDIAN);\n    assertEquals(hashFunction.hashBytes(littleEndian), hashFunction.hashBytes(littleEndian));\n     assertEquals(ByteOrder.LITTLE_ENDIAN, littleEndian.order());\n    assertEquals(ByteOrder.BIG_ENDIAN, littleEndian.order());\n   }\n   static void assertHasherByteBufferPreservesByteOrder(HashFunction hashFunction) {", "fixed": "     rng.nextBytes(bytes);\n     ByteBuffer littleEndian = ByteBuffer.wrap(bytes).order(ByteOrder.LITTLE_ENDIAN);\n     ByteBuffer bigEndian = ByteBuffer.wrap(bytes).order(ByteOrder.BIG_ENDIAN);\n    assertEquals(hashFunction.hashBytes(littleEndian), hashFunction.hashBytes(bigEndian));\n     assertEquals(ByteOrder.LITTLE_ENDIAN, littleEndian.order());\n    assertEquals(ByteOrder.BIG_ENDIAN, bigEndian.order());\n   }\n   static void assertHasherByteBufferPreservesByteOrder(HashFunction hashFunction) {", "sourceBeforeFix": "hashFunction.hashBytes(littleEndian)", "sourceAfterFix": "hashFunction.hashBytes(bigEndian)"}
{"fixCommitSHA1": "37a968f250d8e6b6cfadebb046f2eb1295cd95e4", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": " \t\t\tif (!Context.isRefreshingContext())\n \t\t\t\tmementos.put(key, Context.getSchedulerService().saveToMemento());\n \t\t}\n\t\tcatch (Throwable t) {\n \t\t}\n \t}", "fixed": " \t\t\tif (!Context.isRefreshingContext())\n \t\t\t\tmementos.put(key, Context.getSchedulerService().saveToMemento());\n \t\t}\n\t\tcatch (Exception t) {\n \t\t}\n \t}", "sourceBeforeFix": "Throwable t", "sourceAfterFix": "Exception t"}
{"fixCommitSHA1": "91ce0abe48c7670f567f7b6584883d56fd3306cf", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t\t@Bean\n \t\t@ConditionalOnMissingBean(name = \"redisTemplate\")\n\t\tpublic RedisOperations<Object, Object> redisTemplate(\n \t\t\t\tRedisConnectionFactory redisConnectionFactory)\n \t\t\t\tthrows UnknownHostException {\n \t\t\tRedisTemplate<Object, Object> template = new RedisTemplate<Object, Object>();", "fixed": " \t\t@Bean\n \t\t@ConditionalOnMissingBean(name = \"redisTemplate\")\n\t\tpublic RedisTemplate<Object, Object> redisTemplate(\n \t\t\t\tRedisConnectionFactory redisConnectionFactory)\n \t\t\t\tthrows UnknownHostException {\n \t\t\tRedisTemplate<Object, Object> template = new RedisTemplate<Object, Object>();", "sourceBeforeFix": "RedisOperations<Object,Object>", "sourceAfterFix": "RedisTemplate<Object,Object>"}
{"fixCommitSHA1": "b3a3ca71bfb8db277af6bf27d6034b799320cce4", "projectName": "eclipse.vert.x", "bugType": "Change Identifier Used", "problem": "   @Test\n   public void testTLSRevokedClientCertServer() throws Exception {\n    testTLS(Cert.CLIENT_PEM_ROOT_CA, Trust.SERVER_JKS, Cert.SERVER_JKS, Trust.CLIENT_PEM_ROOT_CA).requiresClientAuth().clientUsesCrl().fail();\n   }\n   @Test", "fixed": "   @Test\n   public void testTLSRevokedClientCertServer() throws Exception {\n    testTLS(Cert.CLIENT_PEM_ROOT_CA, Trust.SERVER_JKS, Cert.SERVER_JKS, Trust.CLIENT_PEM_ROOT_CA).requiresClientAuth().serverUsesCrl().fail();\n   }\n   @Test", "sourceBeforeFix": "testTLS(Cert.CLIENT_PEM_ROOT_CA,Trust.SERVER_JKS,Cert.SERVER_JKS,Trust.CLIENT_PEM_ROOT_CA).requiresClientAuth().clientUsesCrl()", "sourceAfterFix": "testTLS(Cert.CLIENT_PEM_ROOT_CA,Trust.SERVER_JKS,Cert.SERVER_JKS,Trust.CLIENT_PEM_ROOT_CA).requiresClientAuth().serverUsesCrl()"}
{"fixCommitSHA1": "c97c55c5fe3bd7a54b9f36cf68f17b5cf19ecaf3", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Change Identifier Used", "problem": "     private final AsyncHttpClientConfig config;\n    private final ConcurrentHashMap<Url, Channel> connectionsPool = new ConcurrentHashMap<Url, Channel>();\n     private volatile int maxConnectionsPerHost;\n     private final HashedWheelTimer timer = new HashedWheelTimer();", "fixed": "     private final AsyncHttpClientConfig config;\n    private final ConcurrentHashMap<String, Channel> connectionsPool = new ConcurrentHashMap<String, Channel>();\n     private volatile int maxConnectionsPerHost;\n     private final HashedWheelTimer timer = new HashedWheelTimer();", "sourceBeforeFix": "ConcurrentHashMap<Url,Channel>", "sourceAfterFix": "ConcurrentHashMap<String,Channel>"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface KubernetesJobEndpointBuilder\n             extends\n                 KubernetesJobEndpointConsumerBuilder, KubernetesJobEndpointProducerBuilder {\n         default AdvancedKubernetesJobEndpointBuilder advanced() {", "fixed": "     \n    public interface KubernetesJobEndpointBuilder\n             extends\n                 KubernetesJobEndpointConsumerBuilder, KubernetesJobEndpointProducerBuilder {\n         default AdvancedKubernetesJobEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  private final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "1841a0dde698ed6d828aaf92d616fe16fe432868", "projectName": "gephi.gephi", "bugType": "More Specific If", "problem": "         markTime++;\n        if (vizConfig.isShowArrows() && dataBridge.isDirected()) {\n             gl.glBegin(GL2.GL_TRIANGLES);\n             for (Iterator<EdgeModel> itr = octree.getEdgeIterator(); itr.hasNext();) {\n                 EdgeModel obj = itr.next();", "fixed": "         markTime++;\n        if (edgeClass.isEnabled() && vizConfig.isShowArrows() && dataBridge.isDirected()) {\n             gl.glBegin(GL2.GL_TRIANGLES);\n             for (Iterator<EdgeModel> itr = octree.getEdgeIterator(); itr.hasNext();) {\n                 EdgeModel obj = itr.next();", "sourceBeforeFix": "vizConfig.isShowArrows() && dataBridge.isDirected()", "sourceAfterFix": "edgeClass.isEnabled() && vizConfig.isShowArrows() && dataBridge.isDirected()"}
