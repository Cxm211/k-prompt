{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n* @see NormalizableKey\n \t */\n\tpublic void putNormalizedKey(T record, byte[] target, int offset, int numBytes);\n \t/**\n \t * Writes the record in such a fashion that all keys are normalizing and at the beginning of the serialized data.", "fixed": " \t * \n* @see NormalizableKey\n \t */\n\tpublic abstract void putNormalizedKey(T record, byte[] target, int offset, int numBytes);\n \t/**\n \t * Writes the record in such a fashion that all keys are normalizing and at the beginning of the serialized data.", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "fixed": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "sourceBeforeFix": "GL11.glTexParameter(target,pname,params)", "sourceAfterFix": "GL11.glTexParameterfv(target,pname,params)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8018d1af58330b6d21c858fa5ebfee6a66cd10b3", "projectName": "apache.hadoop", "bugType": "Wrong Function Name", "problem": "             + options.toString() + \".\");\n         printProviderWritten();\n       } catch (InvalidParameterException e) {\n        out.println(keyName + \" has not been created. \" + e.getMessage());\n         throw e;\n       } catch (IOException e) {\n        out.println(keyName + \" has not been created. \" + e.getMessage());\n         throw e;\n       } catch (NoSuchAlgorithmException e) {\n        out.println(keyName + \" has not been created. \" + e.getMessage());\n         throw e;\n       }\n     }", "fixed": "             + options.toString() + \".\");\n         printProviderWritten();\n       } catch (InvalidParameterException e) {\n        out.println(keyName + \" has not been created. \" + e.toString());\n         throw e;\n       } catch (IOException e) {\n        out.println(keyName + \" has not been created. \" + e.toString());\n         throw e;\n       } catch (NoSuchAlgorithmException e) {\n        out.println(keyName + \" has not been created. \" + e.toString());\n         throw e;\n       }\n     }", "sourceBeforeFix": "e.getMessage()", "sourceAfterFix": "e.toString()"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public List<Trends> getWeeklyTrends() throws TwitterException {\n        return Trends.constructTrendsList(get(getSearchBaseURL()\n                 + \"trends/weekly.json\", false));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public List<Trends> getWeeklyTrends() throws TwitterException {\n        return Trends.createTrendsList(get(getSearchBaseURL()\n                 + \"trends/weekly.json\", false));\n     }", "sourceBeforeFix": "twitter4j.List.constructListOfLists(get(getApiBaseURL() + V1 + user+ \"/lists.json?cursor=\"+ cursor,true))", "sourceAfterFix": "twitter4j.List.createListList(get(getApiBaseURL() + V1 + user+ \"/lists.json?cursor=\"+ cursor,true))"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      * @param servers the servers that need to restart.\n      */\n     @LogMessage(level = Level.INFO)\n    @Message(id = 15807, value = \"Domain model has changed on re-connect. The following servers will need to be restarted for changes to take affect: %s\")\n     void domainModelChangedOnReConnect(Set<ServerIdentity> servers);\n     /**", "fixed": "      * @param servers the servers that need to restart.\n      */\n     @LogMessage(level = Level.INFO)\n    @Message(id = 10807, value = \"Domain model has changed on re-connect. The following servers will need to be restarted for changes to take affect: %s\")\n     void domainModelChangedOnReConnect(Set<ServerIdentity> servers);\n     /**", "sourceBeforeFix": "id=15804", "sourceAfterFix": "id=10804"}
{"fixCommitSHA1": "b7a9f743db97d9925edf634525a7c8e6a6cc1dd1", "projectName": "openhab.openhab", "bugType": "Same Function More Args", "problem": " \t\t\t\t\tif(currentStage.isStaticComplete()) {\n\t\t\t\t\t\tlogger.debug(\"NODE {}: Retry timout: Advancing\");\n \t\t\t\t\t\tsetCurrentStage(currentStage.getNextStage());\n \t\t\t\t\t}\n \t\t\t\t\telse {", "fixed": " \t\t\t\t\tif(currentStage.isStaticComplete()) {\n\t\t\t\t\t\tlogger.debug(\"NODE {}: Retry timout: Advancing\", node.getNodeId());\n \t\t\t\t\t\tsetCurrentStage(currentStage.getNextStage());\n \t\t\t\t\t}\n \t\t\t\t\telse {", "sourceBeforeFix": "logger.debug(\"NODE {}: Retry timout: Can't advance\")", "sourceAfterFix": "logger.debug(\"NODE {}: Retry timout: Can't advance\",node.getNodeId())"}
{"fixCommitSHA1": "e3a42e5c99e0f930a89fe267cb7cb141d421ddf0", "projectName": "libgdx.libgdx", "bugType": "Change Unary Operator\t", "problem": " \t\tsplit.total = 3;\n\t\tsplit.numFront = (r1 ? 1 : 0) + (r2 ? 1 : 0) + (r3 ? 1 : 0);\n \t\tsplit.numBack = split.total - split.numFront;\n\t\tsplit.setSide(r1);\n \t\tint first = 0;", "fixed": " \t\tsplit.total = 3;\n\t\tsplit.numFront = (r1 ? 0 : 1) + (r2 ? 0 : 1) + (r3 ? 0 : 1);\n \t\tsplit.numBack = split.total - split.numFront;\n\t\tsplit.setSide(!r1);\n \t\tint first = 0;", "sourceBeforeFix": "r1", "sourceAfterFix": "!r1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "f8c20919f9c2e18e48142c2712e34298f98b983e", "projectName": "spring-projects.spring-boot", "bugType": "Wrong Function Name", "problem": " \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tfinal Date[] date = new Date[1];\n \t\tthis.container = factory\n\t\t\t\t.getEmbdeddedServletContainer(new ServletContextInitializer() {\n \t\t\t\t\t@Override\n \t\t\t\t\tpublic void onStartup(ServletContext servletContext)\n \t\t\t\t\t\t\tthrows ServletException {", "fixed": " \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tfinal Date[] date = new Date[1];\n \t\tthis.container = factory\n\t\t\t\t.getEmbeddedServletContainer(new ServletContextInitializer() {\n \t\t\t\t\t@Override\n \t\t\t\t\tpublic void onStartup(ServletContext servletContext)\n \t\t\t\t\t\t\tthrows ServletException {", "sourceBeforeFix": "factory.getEmbdeddedServletContainer()", "sourceAfterFix": "factory.getEmbeddedServletContainer()"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedCxfEndpointBuilder\n             extends\n                 AdvancedCxfEndpointConsumerBuilder, AdvancedCxfEndpointProducerBuilder {\n         default CxfEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedCxfEndpointBuilder\n             extends\n                 AdvancedCxfEndpointConsumerBuilder, AdvancedCxfEndpointProducerBuilder {\n         default CxfEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "           \"functions are set.\");\n   \n  private final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "           \"functions are set.\");\n   \n  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "c0a69490d71f7d61b34faefcfe06ae8c082116a3", "projectName": "checkstyle.checkstyle", "bugType": "Same Function More Args", "problem": "                         ResourceBundle.getBundle(\"checkstylecompilation\");\n                 String version = compilationProperties.getString(\"checkstyle.compile.version\");\n                 assertEquals(String.format(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>%n\"\n                        + \"<checkstyle version=\\\"\" + version + \"\\\">%n\"\n                        + \"<file name=\\\"\"\n                        + expectedPath\n                        + \"\\\">%n\"\n                         + \"</file>%n\"\n                        + \"</checkstyle>%n\"), systemOut.getLog());\n                 assertEquals(\"\", systemErr.getLog());\n             }\n         });", "fixed": "                         ResourceBundle.getBundle(\"checkstylecompilation\");\n                 String version = compilationProperties.getString(\"checkstyle.compile.version\");\n                 assertEquals(String.format(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>%n\"\n                        + \"<checkstyle version=\\\"%s\\\">%n\"\n                        + \"<file name=\\\"%s\\\">%n\"\n                         + \"</file>%n\"\n                        + \"</checkstyle>%n\", version, expectedPath), systemOut.getLog());\n                 assertEquals(\"\", systemErr.getLog());\n             }\n         });", "sourceBeforeFix": "String.format(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>%n\" + \"<checkstyle version=\\\"\" + version + \"\\\">%n\"+ \"<file name=\\\"\"+ expectedPath+ \"\\\">%n\"+ \"</file>%n\"+ \"</checkstyle>%n\")", "sourceAfterFix": "String.format(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>%n\" + \"<checkstyle version=\\\"\" + version + \"\\\">%n\"+ \"<file name=\\\"\"+ expectedPath+ \"\\\">%n\"+ \"</file>%n\"+ \"</checkstyle>%n\",version,expectedPath)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "0a1836b22646342828e96b1d0e7dad9c8bfdabfe", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         bar.expectedMessageCount(0);\n         MockEndpoint start = getMockEndpoint(\"mock:start\");\n        start.expectedMessageCount(6);\n         template.sendBody(\"activemq:queue:foo\", \"Hello World\");", "fixed": "         bar.expectedMessageCount(0);\n         MockEndpoint start = getMockEndpoint(\"mock:start\");\nstart.expectedMessageCount(7);\n         template.sendBody(\"activemq:queue:foo\", \"Hello World\");", "sourceBeforeFix": "start.expectedMessageCount(6)", "sourceAfterFix": "start.expectedMessageCount(7)"}
{"fixCommitSHA1": "bc53fc00817adf77d0e25d07ae0aaea0f16dddd7", "projectName": "Alluxio.alluxio", "bugType": "Same Function More Args", "problem": "    * @param manager a block metadata manager handle\n    */\n   private BlockStoreMeta(BlockMetadataManager manager, boolean shouldIncludeBlockIds) {\n    Preconditions.checkNotNull(manager);\n     for (StorageTier tier : manager.getTiers()) {\n       Long capacityBytes = mCapacityBytesOnTiers.get(tier.getTierAlias());\n       Long usedBytes = mUsedBytesOnTiers.get(tier.getTierAlias());", "fixed": "    * @param manager a block metadata manager handle\n    */\n   private BlockStoreMeta(BlockMetadataManager manager, boolean shouldIncludeBlockIds) {\n    Preconditions.checkNotNull(manager,\"manager\");\n     for (StorageTier tier : manager.getTiers()) {\n       Long capacityBytes = mCapacityBytesOnTiers.get(tier.getTierAlias());\n       Long usedBytes = mUsedBytesOnTiers.get(tier.getTierAlias());", "sourceBeforeFix": "Preconditions.checkNotNull(manager)", "sourceAfterFix": "Preconditions.checkNotNull(manager,\"manager\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15850, value = \"No handler for operation %s at address %s\")\n     String noHandlerForOperation(String operationName, PathAddress address);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10850, value = \"No handler for operation %s at address %s\")\n     String noHandlerForOperation(String operationName, PathAddress address);\n     /**", "sourceBeforeFix": "id=15849", "sourceAfterFix": "id=10849"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  private final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "af233c9c353322adf1fa91d5e6ca706b9d9d98b7", "projectName": "dropwizard.dropwizard", "bugType": "Change Identifier Used", "problem": "         final PrintWriter output = mock(PrintWriter.class);\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getServletPath()).thenReturn(\"/tasks/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.of(\"runs\")));\n         when(request.getParameterValues(\"runs\")).thenReturn(new String[]{\"1\"});\n         when(response.getWriter()).thenReturn(output);", "fixed": "         final PrintWriter output = mock(PrintWriter.class);\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getPathInfo()).thenReturn(\"/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.of(\"runs\")));\n         when(request.getParameterValues(\"runs\")).thenReturn(new String[]{\"1\"});\n         when(response.getWriter()).thenReturn(output);", "sourceBeforeFix": "request.getServletPath()", "sourceAfterFix": "request.getPathInfo()"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface BeanstalkEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedBeanstalkEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface BeanstalkEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedBeanstalkEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "98ae1cc238ec8c541d02203fe1b5dd668ca777f5", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     String dumpTracedMessagesAsXml(String nodeId);\n     @ManagedAttribute(description = \"Number of total debugged messages\")\n    public long getDebugCounter();\n     @ManagedOperation(description = \"Resets the debug counter\")\n    public void resetDebugCounter();\n }", "fixed": "     String dumpTracedMessagesAsXml(String nodeId);\n     @ManagedAttribute(description = \"Number of total debugged messages\")\n    long getDebugCounter();\n     @ManagedOperation(description = \"Resets the debug counter\")\n    void resetDebugCounter();\n }", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n  private final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "2921e7bf0d74a65fdcc71d3ce3053037d14e4d44", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "             return new ErrorCommand(ERROR_CLIENT);\n         }\n         if (st.hasMoreTokens()) {\n            flag = Integer.valueOf(st.nextToken());\n         } else {\n             return new ErrorCommand(ERROR_CLIENT);\n         }", "fixed": "             return new ErrorCommand(ERROR_CLIENT);\n         }\n         if (st.hasMoreTokens()) {\n            flag = Integer.parseInt(st.nextToken());\n         } else {\n             return new ErrorCommand(ERROR_CLIENT);\n         }", "sourceBeforeFix": "Integer.valueOf(st.nextToken())", "sourceAfterFix": "Integer.parseInt(st.nextToken())"}
{"fixCommitSHA1": "f9c863f126519ad2cfd7af4cef3eed04e8f87ea3", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "         mw.visitVarInsn(ALOAD, context.var(\"out\"));\n         mw.visitVarInsn(ILOAD, context.var(\"seperator\"));\n         mw.visitVarInsn(ALOAD, context.fieldName());\n        mw.visitVarInsn(LLOAD, context.var(\"long\"));\n         mw.visitMethodInsn(INVOKEVIRTUAL, getType(SerializeWriter.class), \"writeFieldValue\", \"(CLjava/lang/String;J)V\");\n         _seperator(mw, context);", "fixed": "         mw.visitVarInsn(ALOAD, context.var(\"out\"));\n         mw.visitVarInsn(ILOAD, context.var(\"seperator\"));\n         mw.visitVarInsn(ALOAD, context.fieldName());\n        mw.visitVarInsn(LLOAD, context.var(\"long\", 2));\n         mw.visitMethodInsn(INVOKEVIRTUAL, getType(SerializeWriter.class), \"writeFieldValue\", \"(CLjava/lang/String;J)V\");\n         _seperator(mw, context);", "sourceBeforeFix": "context.var(\"long\")", "sourceAfterFix": "context.var(\"long\",2)"}
{"fixCommitSHA1": "2c434d09d831b7fcb8e0f4d22047637520d11be3", "projectName": "google.closure-compiler", "bugType": "Wrong Function Name", "problem": "       \"JSC_REFERENCE_BEFORE_DECLARE\",\n       \"Variable referenced before declaration: {0}\");\n  static final DiagnosticType REDECLARED_VARIABLE = DiagnosticType.error(\n       \"JSC_REDECLARED_VARIABLE\",\n       \"Redeclared variable: {0}\");", "fixed": "       \"JSC_REFERENCE_BEFORE_DECLARE\",\n       \"Variable referenced before declaration: {0}\");\n  static final DiagnosticType REDECLARED_VARIABLE = DiagnosticType.warning(\n       \"JSC_REDECLARED_VARIABLE\",\n       \"Redeclared variable: {0}\");", "sourceBeforeFix": "DiagnosticType.error(\"JSC_REDECLARED_VARIABLE\",\"Redeclared variable: {0}\")", "sourceAfterFix": "DiagnosticType.warning(\"JSC_REDECLARED_VARIABLE\",\"Redeclared variable: {0}\")"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedLdapEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default LdapEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedLdapEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default LdapEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     return additionalReplacements;\n   }\n  private final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     return additionalReplacements;\n   }\n  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should return null if no implementation id is defined yet\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)\n\tpublic ImplementationId getImplementationId() throws APIException;\n \t/**\n \t * Set the given <code>implementationId</code> as this implementation's unique id", "fixed": " \t * @should return null if no implementation id is defined yet\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)\n\tpublic ImplementationId getImplementationId();\n \t/**\n \t * Set the given <code>implementationId</code> as this implementation's unique id", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "facc9c51d37dad77ba2908c32b8ff43f405b7421", "projectName": "druid-io.druid", "bugType": "Change Binary Operator", "problem": "     this.rejectionPolicyFactory = new ServerTimeRejectionPolicyFactory();\n     this.maxPendingPersists = (maxPendingPersists > 0) ? maxPendingPersists : defaultPending;\n    Preconditions.checkArgument(maxPendingPersists > 0, \"RealtimePlumberSchool requires maxPendingPersists > 0\");\n     Preconditions.checkNotNull(windowPeriod, \"RealtimePlumberSchool requires a windowPeriod.\");\n     Preconditions.checkNotNull(basePersistDirectory, \"RealtimePlumberSchool requires a basePersistDirectory.\");\n     Preconditions.checkNotNull(segmentGranularity, \"RealtimePlumberSchool requires a segmentGranularity.\");", "fixed": "     this.rejectionPolicyFactory = new ServerTimeRejectionPolicyFactory();\n     this.maxPendingPersists = (maxPendingPersists > 0) ? maxPendingPersists : defaultPending;\n    Preconditions.checkArgument(maxPendingPersists <= 0, \"RealtimePlumberSchool requires maxPendingPersists > 0\");\n     Preconditions.checkNotNull(windowPeriod, \"RealtimePlumberSchool requires a windowPeriod.\");\n     Preconditions.checkNotNull(basePersistDirectory, \"RealtimePlumberSchool requires a basePersistDirectory.\");\n     Preconditions.checkNotNull(segmentGranularity, \"RealtimePlumberSchool requires a segmentGranularity.\");", "sourceBeforeFix": "maxPendingPersists > 0", "sourceAfterFix": "maxPendingPersists <= 0"}
{"fixCommitSHA1": "deebc98a0cad2ee5bba5c0fcf8c5da4d666ff3c4", "projectName": "wildfly.wildfly", "bugType": "Change Modifier", "problem": "      *\n      * @param context The start context\n      */\n    public void start(StartContext context) throws StartException {\n         classifyingModuleLoader = new ClassifyingModuleLoader(delegates, Module.getCurrentLoader());\n         Module.setModuleLoaderSelector(new SimpleModuleLoaderSelector(classifyingModuleLoader));\n     }", "fixed": "      *\n      * @param context The start context\n      */\n    public synchronized void start(StartContext context) throws StartException {\n         classifyingModuleLoader = new ClassifyingModuleLoader(delegates, Module.getCurrentLoader());\n         Module.setModuleLoaderSelector(new SimpleModuleLoaderSelector(classifyingModuleLoader));\n     }", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
