{"fixCommitSHA1": "a35860eadb4400f069e306ccd76f1a19ecfb3ba1", "projectName": "google.guava", "bugType": "Change Identifier Used", "problem": "   @SuppressWarnings(\"unchecked\")\n   @Override\n  public V value(Object node) {\n     Object value = adjacentNodeValues.get(node);\n     if (value == PRED) {\n       return null;", "fixed": "   @SuppressWarnings(\"unchecked\")\n   @Override\n  public V value(N node) {\n     Object value = adjacentNodeValues.get(node);\n     if (value == PRED) {\n       return null;", "sourceBeforeFix": "Object node", "sourceAfterFix": "N node"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 15832, value = \"There is already a registered host named '%s'\")\n     String slaveAlreadyRegistered(String slaveName);\n     /**", "fixed": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 10832, value = \"There is already a registered host named '%s'\")\n     String slaveAlreadyRegistered(String slaveName);\n     /**", "sourceBeforeFix": "id=15842", "sourceAfterFix": "id=10842"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedHdfsEndpointBuilder\n             extends\n                 AdvancedHdfsEndpointConsumerBuilder, AdvancedHdfsEndpointProducerBuilder {\n         default HdfsEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedHdfsEndpointBuilder\n             extends\n                 AdvancedHdfsEndpointConsumerBuilder, AdvancedHdfsEndpointProducerBuilder {\n         default HdfsEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   }\n   \n  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform3(location, v);\r\n \t}\r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform3(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r", "fixed": " \t}\r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform3iv(location, v);\r\n \t}\r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform3iv(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r", "sourceBeforeFix": "EXTFramebufferObject.glGetFramebufferAttachmentParameterEXT(target,attachment,pname,params)", "sourceAfterFix": "EXTFramebufferObject.glGetFramebufferAttachmentParameterivEXT(target,attachment,pname,params)"}
{"fixCommitSHA1": "4dd18ed5c3188be2cfb14efce62e71ae6f19243a", "projectName": "dropwizard.dropwizard", "bugType": "Wrong Function Name", "problem": "     public TaskServlet(Iterable<Task> tasks) {\n         final ImmutableMap.Builder<String, Task> builder = ImmutableMap.builder();\n         for (Task task : tasks) {\n            builder.put(\"/tasks/\" + task.getName(), task);\n         }\n         this.tasks = builder.build();\n     }", "fixed": "     public TaskServlet(Iterable<Task> tasks) {\n         final ImmutableMap.Builder<String, Task> builder = ImmutableMap.builder();\n         for (Task task : tasks) {\n            builder.put(\"/\" + task.getName(), task);\n         }\n         this.tasks = builder.build();\n     }", "sourceBeforeFix": "req.getServletPath()", "sourceAfterFix": "req.getPathInfo()"}
{"fixCommitSHA1": "4665dcf9ab41c3c61cd42aad296ebfe518bfa003", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\n \tpublic void glCopyTexImage2D (int target, int level, int internalformat, int x, int y, int width, int height, int border) {\n\t\tGL.glCopyTexImage2DEXT(target, level, internalformat, x, y, width, height, border);\n \t}\n \tpublic void glCopyTexSubImage2D (int target, int level, int xoffset, int yoffset, int x, int y, int width, int height) {\n\t\tGL.glCopyTexSubImage2DEXT(target, level, xoffset, yoffset, x, y, width, height);\n \t}\n \tpublic void glCullFace (int mode) {", "fixed": " \t}\n \tpublic void glCopyTexImage2D (int target, int level, int internalformat, int x, int y, int width, int height, int border) {\n\t\tGL.glCopyTexImage2D(target, level, internalformat, x, y, width, height, border);\n \t}\n \tpublic void glCopyTexSubImage2D (int target, int level, int xoffset, int yoffset, int x, int y, int width, int height) {\n\t\tGL.glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height);\n \t}\n \tpublic void glCullFace (int mode) {", "sourceBeforeFix": "GL.glCopyTexSubImage2DEXT(target,level,xoffset,yoffset,x,y,width,height)", "sourceAfterFix": "GL.glCopyTexSubImage2D(target,level,xoffset,yoffset,x,y,width,height)"}
{"fixCommitSHA1": "a36966d96196f3d64daa2809b7bc6077eedc5a9d", "projectName": "swagger-api.swagger-codegen", "bugType": "Same Function More Args", "problem": "         \"Bool\",\n         \"Void\",\n         \"String\",\n        \"Character\")\n     );\n     defaultIncludes = new HashSet<String>(\n       Arrays.asList(", "fixed": "         \"Bool\",\n         \"Void\",\n         \"String\",\n        \"Character\",\n        \"AnyObject\")\n     );\n     defaultIncludes = new HashSet<String>(\n       Arrays.asList(", "sourceBeforeFix": "Arrays.asList(\"Int\",\"Float\",\"Double\",\"Bool\",\"Void\",\"String\",\"Character\")", "sourceAfterFix": "Arrays.asList(\"Int\",\"Float\",\"Double\",\"Bool\",\"Void\",\"String\",\"Character\",\"AnyObject\")"}
{"fixCommitSHA1": "fc78d3384d12c17b4a4234a1d8f1568bf4dd3bc4", "projectName": "swagger-api.swagger-core", "bugType": "Change Identifier Used", "problem": "                 if (getter != null) {\n                     if (paramType == null) {\n                        paramType = getter.getRawReturnType();\n                     }\n                     for (final Annotation fieldAnnotation : getter.annotations()) {", "fixed": "                 if (getter != null) {\n                     if (paramType == null) {\n                        paramType = getter.getType();\n                     }\n                     for (final Annotation fieldAnnotation : getter.annotations()) {", "sourceBeforeFix": "field.getRawType()", "sourceAfterFix": "field.getType()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   }\n   \n  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "f135cc4188dd173e8fc175bc5d26cf1a970ac39e", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "                 ModelNode oldResponse = response;\n                 try {\n                     flags = EnumSet.noneOf(Flag.class);\n                    response = step.response;\n                     ModelNode newOperation = operation = step.operation;\n                     modelAddress = PathAddress.pathAddress(newOperation.get(ADDRESS));\n                     step.handler.execute(this, newOperation);", "fixed": "                 ModelNode oldResponse = response;\n                 try {\n                     flags = EnumSet.noneOf(Flag.class);\n                    response = this.response = step.response;\n                     ModelNode newOperation = operation = step.operation;\n                     modelAddress = PathAddress.pathAddress(newOperation.get(ADDRESS));\n                     step.handler.execute(this, newOperation);", "sourceBeforeFix": "response.set(ROLLED_BACK)", "sourceAfterFix": "response.get(ROLLED_BACK)"}
{"fixCommitSHA1": "55ed50c4975cf694828d46ee9ca32ce72a9ef913", "projectName": "clojure.clojure", "bugType": "Wrong Function Name", "problem": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 9:\r\n\t\t\treturn invoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "fixed": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 9:\r\n\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "sourceBeforeFix": "invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())", "sourceAfterFix": "doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())"}
{"fixCommitSHA1": "20bc74dff0cf1e1834e99d1f2499a3f5e4c38a36", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "     }\n     for (AsyncCall call : toCleanup) {\n       call.setFailed(new CallTimeoutException(\"Call id=\" + call.id + \", waitTime=\"\n          + (currentTime - call.getRpcTimeout()) + \", rpcTimeout=\" + call.getRpcTimeout()));\n     }\n   }", "fixed": "     }\n     for (AsyncCall call : toCleanup) {\n       call.setFailed(new CallTimeoutException(\"Call id=\" + call.id + \", waitTime=\"\n          + (currentTime - call.getStartTime()) + \", rpcTimeout=\" + call.getRpcTimeout()));\n     }\n   }", "sourceBeforeFix": "call.getRpcTimeout()", "sourceAfterFix": "call.getStartTime()"}
{"fixCommitSHA1": "e7bf415427b37bbc760ff9b9c69650db8ec477e4", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnBean(MongoTemplate.class)\n\t@ConditionalOnEnablednHealthIndicator(\"mongo\")\n \tpublic static class MongoHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<MongoHealthIndicator, MongoTemplate> {", "fixed": " \t@Configuration\n \t@ConditionalOnBean(MongoTemplate.class)\n\t@ConditionalOnEnabledHealthIndicator(\"mongo\")\n \tpublic static class MongoHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<MongoHealthIndicator, MongoTemplate> {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"solr\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"solr\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     return additionalReplacements;\n   }\n  private final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     return additionalReplacements;\n   }\n  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "f652e2465b9f44d024cbb1a91f5793c147a50471", "projectName": "Graylog2.graylog2-server", "bugType": "Change Numeric Literal", "problem": "         reader.join();\n         writer.join();\n        await().atMost(5, TimeUnit.SECONDS).until(new Callable<Boolean>() {\n             @Override\n             public Boolean call() throws Exception {\n                 return stream.isDone();", "fixed": "         reader.join();\n         writer.join();\n        await().atMost(20, TimeUnit.SECONDS).until(new Callable<Boolean>() {\n             @Override\n             public Boolean call() throws Exception {\n                 return stream.isDone();", "sourceBeforeFix": "await().atMost(5,TimeUnit.SECONDS)", "sourceAfterFix": "await().atMost(20,TimeUnit.SECONDS)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedToMe(Paging paging) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_to_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedToMe(Paging paging) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_to_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\",true))"}
{"fixCommitSHA1": "4eae69e20692a697a12a705155e972ddf448ca48", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": " @RunWith(HazelcastParallelClassRunner.class)\n @Category({QuickTest.class, ParallelTest.class})\npublic class CountDownLatchBasicLocalTest extends CountDownLatchBasicTest {\n     @Override\n     protected HazelcastInstance[] newInstances() {", "fixed": " @RunWith(HazelcastParallelClassRunner.class)\n @Category({QuickTest.class, ParallelTest.class})\npublic class CountDownLatchBasicLocalTest extends CountDownLatchAbstractTest {\n     @Override\n     protected HazelcastInstance[] newInstances() {", "sourceBeforeFix": "@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class CountDownLatchBasicLocalTest extends CountDownLatchBasicTest {   @Override protected HazelcastInstance[] newInstances(){     return createHazelcastInstanceFactory(1).newInstances();   } } ", "sourceAfterFix": "@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class CountDownLatchBasicLocalTest extends CountDownLatchAbstractTest {   @Override protected HazelcastInstance[] newInstances(){     return createHazelcastInstanceFactory(1).newInstances();   } } "}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsCsv(String path, int batchSize) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), batchSize, null);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsCsv(String path, int batchSize) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), batchSize, null);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedAtmosEndpointBuilder\n             extends\n                 AdvancedAtmosEndpointConsumerBuilder, AdvancedAtmosEndpointProducerBuilder {\n         default AtmosEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedAtmosEndpointBuilder\n             extends\n                 AdvancedAtmosEndpointConsumerBuilder, AdvancedAtmosEndpointProducerBuilder {\n         default AtmosEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "a0f2bac065232855e4f8bb1221a60b0cbf7fd2a9", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "         checkConfig.addAttribute(\"allowThrowsTagsForSubclasses\", \"true\");\n         checkConfig.addAttribute(\"allowUndeclaredRTE\", \"true\");\n         final String[] expected = {};\n        verify(checkConfig, getSrcPath(\"checks/javadoc/Input_03.java\"), expected);\n     }\n     @Test", "fixed": "         checkConfig.addAttribute(\"allowThrowsTagsForSubclasses\", \"true\");\n         checkConfig.addAttribute(\"allowUndeclaredRTE\", \"true\");\n         final String[] expected = {};\n        verify(checkConfig, getPath(\"checks/javadoc/Input_03.java\"), expected);\n     }\n     @Test", "sourceBeforeFix": "getSrcPath(\"checks/javadoc/Input_02.java\")", "sourceAfterFix": "getPath(\"checks/javadoc/Input_02.java\")"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface JoltEndpointBuilder\n            extends\n                EndpointProducerBuilder {\n         default AdvancedJoltEndpointBuilder advanced() {\n             return (AdvancedJoltEndpointBuilder) this;\n         }", "fixed": "     \n    public interface JoltEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedJoltEndpointBuilder advanced() {\n             return (AdvancedJoltEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetsOfMe() throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweets_of_me.json\",\n                 null, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetsOfMe() throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweets_of_me.json\",\n                 null, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/home_timeline.json\",null,paging.asPostParameterList(),true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/home_timeline.json\",null,paging.asPostParameterList(),true))"}
{"fixCommitSHA1": "1daccd54d2ff2ecdb21d8c60268600c37febbb70", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n            file = new RandomAccessFile(FOLDER + (mWorkerId + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n            mBuf.array()[0] = (byte) (k + mWorkerId);\n             dst.put(mBuf.array());\n           }\n           dst.clear();", "fixed": "         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n            file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n            mBuf.putInt(0, k + mWorkerId);\n             dst.put(mBuf.array());\n           }\n           dst.clear();", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "pId + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15859, value = \"A slave domain controller cannot accept deployment content uploads\")\n     String slaveCannotAcceptUploads();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10859, value = \"A slave domain controller cannot accept deployment content uploads\")\n     String slaveCannotAcceptUploads();\n     /**", "sourceBeforeFix": "id=15838", "sourceAfterFix": "id=10838"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<Status> getFriendsTimeline() throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\", true));\n     }\n     /**", "fixed": "      */\n     public ResponseList<Status> getFriendsTimeline() throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\", true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/home_timeline.json\",null,paging.asPostParameterList(),true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/home_timeline.json\",null,paging.asPostParameterList(),true))"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetsOfMe() throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweets_of_me.json\",\n                 null, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetsOfMe() throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweets_of_me.json\",\n                 null, true));\n     }", "sourceBeforeFix": "SavedSearch.constructSavedSearches(get(getBaseURL() + \"saved_searches.json\",true))", "sourceAfterFix": "SavedSearch.createSavedSearchList(get(getBaseURL() + \"saved_searches.json\",true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "ef11886bf2190370a0f3fd287616763826239c48", "projectName": "openmrs.openmrs-core", "bugType": "Wrong Function Name", "problem": " \t\tVector<RelationshipListItem> ret = new Vector<RelationshipListItem>();\r\n \t\tList<Relationship> rels = Context.getPersonService()\r\n\t\t        .getRelationships(Context.getPersonService().getPerson(personId));\r\n \t\tfor (Relationship rel : rels) {\r\n \t\t\tif (!rel.isVoided()\r\n \t\t\t        && (relationshipTypeId == null || rel.getRelationshipType().getRelationshipTypeId().equals(\r", "fixed": " \t\tVector<RelationshipListItem> ret = new Vector<RelationshipListItem>();\r\n \t\tList<Relationship> rels = Context.getPersonService()\r\n\t\t        .getRelationshipsByPerson(Context.getPersonService().getPerson(personId));\r\n \t\tfor (Relationship rel : rels) {\r\n \t\t\tif (!rel.isVoided()\r\n \t\t\t        && (relationshipTypeId == null || rel.getRelationshipType().getRelationshipTypeId().equals(\r", "sourceBeforeFix": "Context.getPersonService().getRelationships(Context.getPersonService().getPerson(personId))", "sourceAfterFix": "Context.getPersonService().getRelationshipsByPerson(Context.getPersonService().getPerson(personId))"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15833, value = \"%s is missing %s: %s\")\n     String requiredChildIsMissing(String parent, String child, String parentSpec);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10833, value = \"%s is missing %s: %s\")\n     String requiredChildIsMissing(String parent, String child, String parentSpec);\n     /**", "sourceBeforeFix": "id=15857", "sourceAfterFix": "id=10857"}
{"fixCommitSHA1": "e2854295f7c484671ce69bff7ec37fcb0c413a32", "projectName": "perwendel.spark", "bugType": "Change Identifier Used", "problem": "  */\n package spark;\npublic abstract class ExceptionHandlerImpl implements ExceptionHandler {\n     \n    protected Class<? extends Exception> exceptionClass;\n     \n    public ExceptionHandlerImpl(Class<? extends Exception> exceptionClass) {\n         this.exceptionClass = exceptionClass;\n     }", "fixed": "  */\n package spark;\npublic abstract class ExceptionHandlerImpl<T extends Exception> implements ExceptionHandler<T> {\n     \n    protected Class<? extends T> exceptionClass;\n     \n    public ExceptionHandlerImpl(Class<T> exceptionClass) {\n         this.exceptionClass = exceptionClass;\n     }", "sourceBeforeFix": "? extends Exception", "sourceAfterFix": "? extends T"}
{"fixCommitSHA1": "37a968f250d8e6b6cfadebb046f2eb1295cd95e4", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": "if (mod.getModuleActivator() != null)\n \t\t\t\t\tmod.getModuleActivator().willStop();\n \t\t\t}\n\t\t\tcatch (Throwable t) {\n \t\t\t\tlog.warn(\"Unable to call module's Activator.willStop() method\", t);\n \t\t\t}", "fixed": "if (mod.getModuleActivator() != null)\n \t\t\t\t\tmod.getModuleActivator().willStop();\n \t\t\t}\n\t\t\tcatch (Exception t) {\n \t\t\t\tlog.warn(\"Unable to call module's Activator.willStop() method\", t);\n \t\t\t}", "sourceBeforeFix": "Throwable t", "sourceAfterFix": "Exception t"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface FhirEndpointBuilder\n             extends\n                 FhirEndpointConsumerBuilder, FhirEndpointProducerBuilder {\n         default AdvancedFhirEndpointBuilder advanced() {", "fixed": "     \n    public interface FhirEndpointBuilder\n             extends\n                 FhirEndpointConsumerBuilder, FhirEndpointProducerBuilder {\n         default AdvancedFhirEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     return additionalReplacements;\n   }\n  private final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     return additionalReplacements;\n   }\n  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "55ed50c4975cf694828d46ee9ca32ce72a9ef913", "projectName": "clojure.clojure", "bugType": "Change Identifier Used", "problem": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 11:\r\n\t\t\treturn invoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "fixed": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 11:\r\n\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "sourceBeforeFix": "invoke(args)", "sourceAfterFix": "doInvoke(args)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "84d6e4785ecad972742bb1bb869cfc3a5efa731d", "projectName": "cucumber.cucumber-jvm", "bugType": "Change Modifier", "problem": "         Executable testMethod = injectorSourceFactory::create;\n         InjectorSourceInstantiationFailed actualThrown = assertThrows(InjectorSourceInstantiationFailed.class, testMethod);\n         assertAll(\"Checking Exception including cause\",\n            () -> assertThat(\"Unexpected exception message\", actualThrown.getMessage(), is(equalTo(\"Instantiation of 'some.bogus.Class' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a   zero args constructor.\"))),\n             () -> assertThat(\"Unexpected exception cause class\", actualThrown.getCause(), isA(ClassNotFoundException.class))\n         );\n     }", "fixed": "         Executable testMethod = injectorSourceFactory::create;\n         InjectorSourceInstantiationFailed actualThrown = assertThrows(InjectorSourceInstantiationFailed.class, testMethod);\n         assertAll(\"Checking Exception including cause\",\n            () -> assertThat(\"Unexpected exception message\", actualThrown.getMessage(), is(equalTo(\"Instantiation of 'some.bogus.Class' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a public zero args constructor.\"))),\n             () -> assertThat(\"Unexpected exception cause class\", actualThrown.getCause(), isA(ClassNotFoundException.class))\n         );\n     }", "sourceBeforeFix": "0", "sourceAfterFix": "1"}
{"fixCommitSHA1": "bd97504fb632151d8e6abc1f9f860232bc1d78fa", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "         };\n         for (ModelNode update : updates) {\n             count.incrementAndGet();\n            controller.execute(ExecutionContextBuilder.Factory.create(update).build(), resultHandler);\n         }\n         if (count.decrementAndGet() == 0) {", "fixed": "         };\n         for (ModelNode update : updates) {\n             count.incrementAndGet();\n            domainModel.execute(ExecutionContextBuilder.Factory.create(update).build(), resultHandler);\n         }\n         if (count.decrementAndGet() == 0) {", "sourceBeforeFix": "controller.execute(ExecutionContextBuilder.Factory.create(update).build(),resultHandler)", "sourceAfterFix": "domainModel.execute(ExecutionContextBuilder.Factory.create(update).build(),resultHandler)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform3fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform3(location, v);\r\n \t}\r\n \tpublic void glUniform3fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform3(location, toFloatBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform3i (int location, int x, int y, int z) {\r", "fixed": " \t}\r\n \tpublic void glUniform3fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform3fv(location, v);\r\n \t}\r\n \tpublic void glUniform3fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform3fv(location, toFloatBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform3i (int location, int x, int y, int z) {\r", "sourceBeforeFix": "GL20.glUniform3(location,toFloatBuffer(v,offset,count * 3))", "sourceAfterFix": "GL20.glUniform3fv(location,toFloatBuffer(v,offset,count * 3))"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedServiceNowEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default ServiceNowEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedServiceNowEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default ServiceNowEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15870, value = \"Unknown server group %s\")\n     IllegalStateException unknownServerGroup(String serverGroup);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10870, value = \"Unknown server group %s\")\n     IllegalStateException unknownServerGroup(String serverGroup);\n     /**", "sourceBeforeFix": "id=15851", "sourceAfterFix": "id=10851"}
{"fixCommitSHA1": "f8c20919f9c2e18e48142c2712e34298f98b983e", "projectName": "spring-projects.spring-boot", "bugType": "Wrong Function Name", "problem": " \tpublic void startServlet() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tthis.container = factory\n\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\nassertThat(getResponse(\"http:\n \t}", "fixed": " \tpublic void startServlet() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tthis.container = factory\n\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\nassertThat(getResponse(\"http:\n \t}", "sourceBeforeFix": "factory.getEmbdeddedServletContainer(exampleServletRegistration(),new FilterRegistrationBean(new ExampleFilter()))", "sourceAfterFix": "factory.getEmbeddedServletContainer(exampleServletRegistration(),new FilterRegistrationBean(new ExampleFilter()))"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedIgniteSetEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default IgniteSetEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedIgniteSetEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default IgniteSetEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "4281cc1c5d3aa51b56db9d9e251c761c52a855e3", "projectName": "libgdx.libgdx", "bugType": "Change Operand ", "problem": " \t * before growing the backing table. */\n \tpublic IntIntMap (int initialCapacity, float loadFactor) {\n \t\tif (initialCapacity < 0) throw new IllegalArgumentException(\"initialCapacity must be >= 0: \" + initialCapacity);\n\t\tif (capacity > 1 << 30) throw new IllegalArgumentException(\"initialCapacity is too large: \" + initialCapacity);\n \t\tcapacity = MathUtils.nextPowerOfTwo(initialCapacity);\n \t\tif (loadFactor <= 0) throw new IllegalArgumentException(\"loadFactor must be > 0: \" + loadFactor);", "fixed": " \t * before growing the backing table. */\n \tpublic IntIntMap (int initialCapacity, float loadFactor) {\n \t\tif (initialCapacity < 0) throw new IllegalArgumentException(\"initialCapacity must be >= 0: \" + initialCapacity);\n\t\tif (initialCapacity > 1 << 30) throw new IllegalArgumentException(\"initialCapacity is too large: \" + initialCapacity);\n \t\tcapacity = MathUtils.nextPowerOfTwo(initialCapacity);\n \t\tif (loadFactor <= 0) throw new IllegalArgumentException(\"loadFactor must be > 0: \" + loadFactor);", "sourceBeforeFix": "capacity > 1 << 30", "sourceAfterFix": "initialCapacity > 1 << 30"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   }\n   \n  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "35dc7982d28800b4fecdf0772236a2d8e054aa77", "projectName": "spring-projects.spring-boot", "bugType": "Change Modifier", "problem": " \tprivate int port = Integer.valueOf(System.getProperty(\"port\"));\n \t@Test\n\tpublic void testHome() throws Exception {\nString url = \"http:\n \t\tResponseEntity<String> entity = this.rest.getForEntity(url, String.class);\n \t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);", "fixed": " \tprivate int port = Integer.valueOf(System.getProperty(\"port\"));\n \t@Test\n\tvoid testHome() throws Exception {\nString url = \"http:\n \t\tResponseEntity<String> entity = this.rest.getForEntity(url, String.class);\n \t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "2230a91829f39b72973e6fecf275d9c664911ca0", "projectName": "clojure.clojure", "bugType": "Change Identifier Used", "problem": " \t\t}\n \tcatch(LispReader.ReaderException e)\n \t\t{\n\t\tthrow new CompilerException(sourceName, e.line, e.getCause());\n \t\t}\n \tfinally\n \t\t{", "fixed": " \t\t}\n \tcatch(LispReader.ReaderException e)\n \t\t{\n\t\tthrow new CompilerException(sourcePath, e.line, e.getCause());\n \t\t}\n \tfinally\n \t\t{", "sourceBeforeFix": "SOURCE.deref()", "sourceAfterFix": "SOURCE_PATH.deref()"}
{"fixCommitSHA1": "0656040933973f55afa8b6e8f53140b6f76b7446", "projectName": "apache.hive", "bugType": "Change Unary Operator\t", "problem": "     \n     public enum _Fields implements org.apache.thrift.TFieldIdEnum {\n      RQST((short)-1, \"rqst\");\n       private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();", "fixed": "     \n     public enum _Fields implements org.apache.thrift.TFieldIdEnum {\n      RQST((short)1, \"rqst\");\n       private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();", "sourceBeforeFix": "-1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "5e7873ebd45790d9d72eb9d312de4611dc97f796", "projectName": "Activiti.Activiti", "bugType": "Change Numeric Literal", "problem": "     assertEquals(0, historyService.createHistoricActivityInstanceQuery().unfinished().list().size());\n     if (processEngineConfiguration.getHistoryLevel()==ProcessEngineConfigurationImpl.HISTORYLEVEL_FULL) {\n      assertEquals(2, historyService.createHistoricActivityInstanceQuery().finished().list().size());\n     } else if (processEngineConfiguration.getHistoryLevel()>=ProcessEngineConfigurationImpl.HISTORYLEVEL_ACTIVITY) {\n      assertEquals(1, historyService.createHistoricActivityInstanceQuery().finished().list().size());\n     } else {\n       assertEquals(0, historyService.createHistoricActivityInstanceQuery().finished().list().size());\n     }", "fixed": "     assertEquals(0, historyService.createHistoricActivityInstanceQuery().unfinished().list().size());\n     if (processEngineConfiguration.getHistoryLevel()==ProcessEngineConfigurationImpl.HISTORYLEVEL_FULL) {\n      assertEquals(3, historyService.createHistoricActivityInstanceQuery().finished().list().size());\n     } else if (processEngineConfiguration.getHistoryLevel()>=ProcessEngineConfigurationImpl.HISTORYLEVEL_ACTIVITY) {\n      assertEquals(3, historyService.createHistoricActivityInstanceQuery().finished().list().size());\n     } else {\n       assertEquals(0, historyService.createHistoricActivityInstanceQuery().finished().list().size());\n     }", "sourceBeforeFix": "assertEquals(1,historyService.createHistoricActivityInstanceQuery().processDefinitionId(processInstance.getProcessDefinitionId()).list().size())", "sourceAfterFix": "assertEquals(3,historyService.createHistoricActivityInstanceQuery().processDefinitionId(processInstance.getProcessDefinitionId()).list().size())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     return additionalReplacements;\n   }\n  private final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     return additionalReplacements;\n   }\n  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "7c7309b5fb6276e4098921915a8e0c39a5cd3450", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "     Whitebox.setInternalState(NetworkAddressUtils.class, \"sLocalHost\", \"localhost\");\n    BlockMasterClient masterClientMock = PowerMockito.mock(BlockMasterClient.class);\n     List<WorkerInfo> list = new ArrayList<>();\n     list.add(new WorkerInfo().setAddress(new WorkerNetAddress().setHost(\"localhost\")));\n     PowerMockito.doReturn(list).when(masterClientMock).getWorkerInfoList();\n    PowerMockito.whenNew(BlockMasterClient.class).withArguments(Mockito.any())\n         .thenReturn(masterClientMock);", "fixed": "     Whitebox.setInternalState(NetworkAddressUtils.class, \"sLocalHost\", \"localhost\");\n    RetryHandlingBlockMasterClient masterClientMock =\n        PowerMockito.mock(RetryHandlingBlockMasterClient.class);\n     List<WorkerInfo> list = new ArrayList<>();\n     list.add(new WorkerInfo().setAddress(new WorkerNetAddress().setHost(\"localhost\")));\n     PowerMockito.doReturn(list).when(masterClientMock).getWorkerInfoList();\n    PowerMockito.whenNew(RetryHandlingBlockMasterClient.class).withArguments(Mockito.any())\n         .thenReturn(masterClientMock);", "sourceBeforeFix": "BlockMasterClient.class", "sourceAfterFix": "RetryHandlingBlockMasterClient.class"}
{"fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "projectName": "Alluxio.alluxio", "bugType": "Change Operand ", "problem": "       if (TACHYON_STREAMING_READ) {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n           InputStream is = file.getInStream(ReadType.CACHE);\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;", "fixed": "       if (TACHYON_STREAMING_READ) {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           InputStream is = file.getInStream(ReadType.CACHE);\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "4e1cc538aaa75a9d0e9514effa6e3f3beeab3985", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t\t\t\tfor (int i = 0, n = handles.length; i < n; i++) {\r\n \t\t\t\t\tString path = relativePaths[i];\r\n \t\t\t\t\tif (!path.endsWith(suffix)) continue;\r\n\t\t\t\t\thandles[i] = new AndroidFileHandle(assets, new File(file, path), type);\r\n \t\t\t\t\tcount++;\r\n \t\t\t\t}\r\n \t\t\t\tif (count < relativePaths.length) {\r", "fixed": " \t\t\t\tfor (int i = 0, n = handles.length; i < n; i++) {\r\n \t\t\t\t\tString path = relativePaths[i];\r\n \t\t\t\t\tif (!path.endsWith(suffix)) continue;\r\n\t\t\t\t\thandles[count] = new AndroidFileHandle(assets, new File(file, path), type);\r\n \t\t\t\t\tcount++;\r\n \t\t\t\t}\r\n \t\t\t\tif (count < relativePaths.length) {\r", "sourceBeforeFix": "handles[i]", "sourceAfterFix": "handles[count]"}
{"fixCommitSHA1": "618a5b9c8d211763f94a6be08b589b28fef48f49", "projectName": "facebook.presto", "bugType": "Change Numeric Literal", "problem": " public class TestClusterMemoryManager\n {\n    @Test(timeOut = 30_000, expectedExceptions = RuntimeException.class, expectedExceptionsMessageRegExp = \".*Query exceeded max memory size of 1kB.*\")\n     public void testQueryMemoryLimit()\n             throws Exception\n     {", "fixed": " public class TestClusterMemoryManager\n {\n    @Test(timeOut = 240_000, expectedExceptions = RuntimeException.class, expectedExceptionsMessageRegExp = \".*Query exceeded max memory size of 1kB.*\")\n     public void testQueryMemoryLimit()\n             throws Exception\n     {", "sourceBeforeFix": "timeOut=30_000", "sourceAfterFix": "timeOut=240_000"}
{"fixCommitSHA1": "0c04572d3c4dfd164456a085aaa9782541c8d718", "projectName": "openhab.openhab", "bugType": "Same Function More Args", "problem": " \t */\n \tstatic public DecimalType evolutionRate(Item item, AbstractInstant timestamp, String serviceName) {\n \t\tDecimalType result = null;\n\t\tHistoricItem itemThen = historicState(item, timestamp);\n \t\tif (itemThen != null) {\n \t\t\tDecimalType valueThen = (DecimalType) itemThen.getState();\n \t\t\tDecimalType valueNow = (DecimalType) item.getStateAs(DecimalType.class);", "fixed": " \t */\n \tstatic public DecimalType evolutionRate(Item item, AbstractInstant timestamp, String serviceName) {\n \t\tDecimalType result = null;\n\t\tHistoricItem itemThen = historicState(item, timestamp, serviceName);\n \t\tif (itemThen != null) {\n \t\t\tDecimalType valueThen = (DecimalType) itemThen.getState();\n \t\t\tDecimalType valueNow = (DecimalType) item.getStateAs(DecimalType.class);", "sourceBeforeFix": "historicState(item,timestamp)", "sourceAfterFix": "historicState(item,timestamp,serviceName)"}
{"fixCommitSHA1": "cd942ae2ade297bb5f578260bcc2189c9bae7ddc", "projectName": "Bukkit.Bukkit", "bugType": "Change Identifier Used", "problem": "     BREWING_STAND(117),\n     CAULDRON(118),\n     ENDER_PORTAL(119),\n    ENTER_PORTAL_FRAME(120),\n     ENDER_STONE(121),\n     DRAGON_EGG(122),", "fixed": "     BREWING_STAND(117),\n     CAULDRON(118),\n     ENDER_PORTAL(119),\n    ENDER_PORTAL_FRAME(120),\n     ENDER_STONE(121),\n     DRAGON_EGG(122),", "sourceBeforeFix": "ENTER_PORTAL_FRAME(120)", "sourceAfterFix": "ENDER_PORTAL_FRAME(120)"}
{"fixCommitSHA1": "62bc0b861423b8764f479d9d50d29ff82daf2d8f", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "         Map map = ExchangeHelper.convertToMandatoryType(exchange, Map.class, object);\n         OutputStreamWriter out = new OutputStreamWriter(outputStream);\n         try {\n            CSVConfig conf = createConfig();\n             Set set = map.keySet();\n             for (Object value : set) {", "fixed": "         Map map = ExchangeHelper.convertToMandatoryType(exchange, Map.class, object);\n         OutputStreamWriter out = new OutputStreamWriter(outputStream);\n         try {\n            CSVConfig conf = getConfig();\n             Set set = map.keySet();\n             for (Object value : set) {", "sourceBeforeFix": "createConfig()", "sourceAfterFix": "getConfig()"}
{"fixCommitSHA1": "19c2a076c25faf94ae9e8f4072f2a4590c9ee1fe", "projectName": "spring-projects.spring-boot", "bugType": "Wrong Function Name", "problem": " \t\tthis.container.stop();\n \t\tthis.container = factory\n\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\nGetMethod get2 = new GetMethod(\"http:\n \t\tassertThat(client.executeMethod(get2), equalTo(200));", "fixed": " \t\tthis.container.stop();\n \t\tthis.container = factory\n\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\nGetMethod get2 = new GetMethod(\"http:\n \t\tassertThat(client.executeMethod(get2), equalTo(200));", "sourceBeforeFix": "factory.getEmbdeddedServletContainer()", "sourceAfterFix": "factory.getEmbeddedServletContainer()"}
{"fixCommitSHA1": "af6a4908c4dd38c0f935803ab6b8ed99387219f2", "projectName": "openhab.openhab", "bugType": "Wrong Function Name", "problem": " \t\t\t} else if (e instanceof TimeoutException) {\n \t\t\t\tlogger.debug(\"[{}]: Websocket timeout error\", connection.getHost());\n \t\t\t} else {\n\t\t\t\tlogger.error(\"[{}]: Websocket error: {}\", connection.getHost(), e.getMessage());\n \t\t\t}\n \t\t}", "fixed": " \t\t\t} else if (e instanceof TimeoutException) {\n \t\t\t\tlogger.debug(\"[{}]: Websocket timeout error\", connection.getHost());\n \t\t\t} else {\n\t\t\t\tlogger.debug(\"[{}]: Websocket error: {}\", connection.getHost(), e.getMessage());\n \t\t\t}\n \t\t}", "sourceBeforeFix": "logger.error(\"[{}]: Websocket error: {}\",connection.getHost(),e.getMessage())", "sourceAfterFix": "logger.debug(\"[{}]: Websocket error: {}\",connection.getHost(),e.getMessage())"}
{"fixCommitSHA1": "d3c1b463af6f7259958aec9da12da8f349250ae3", "projectName": "bauerca.drag-sort-listview", "bugType": "Change Binary Operator", "problem": " \t\t\t\t\tvisItemTop += mItemHeightCollapsed + divHeight;\n \t\t\t\t}\n\t\t\t\tif (position < mSrcDragPos && position >= mExpDragPos) {\n \t\t\t\t\tvisItemPos = position + 1;\n \t\t\t\t} else {\n \t\t\t\t\tvisItemPos = position;", "fixed": " \t\t\t\t\tvisItemTop += mItemHeightCollapsed + divHeight;\n \t\t\t\t}\n\t\t\t\tif (position <= mSrcDragPos && position > mExpDragPos) {\n \t\t\t\t\tvisItemPos = position + 1;\n \t\t\t\t} else {\n \t\t\t\t\tvisItemPos = position;", "sourceBeforeFix": "position < mSrcDragPos", "sourceAfterFix": "position <= mSrcDragPos"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "41bf1b7459905a8201b5d60bb6545fbbb502d59d", "projectName": "alibaba.druid", "bugType": "Change Identifier Used", "problem": "             map.put(\"ActiveCount\", this.getActiveCount());\n             map.put(\"PoolingCount\", this.getPoolingCount());\n             map.put(\"LockQueueLength\", this.getLockQueueLength());\n            map.put(\"WaitThreadCount\", this.getNotEmptyWaitThreadPeak());\n             map.put(\"InitialSize\", this.getInitialSize());", "fixed": "             map.put(\"ActiveCount\", this.getActiveCount());\n             map.put(\"PoolingCount\", this.getPoolingCount());\n             map.put(\"LockQueueLength\", this.getLockQueueLength());\n            map.put(\"WaitThreadCount\", this.getNotEmptyWaitThreadCount());\n             map.put(\"InitialSize\", this.getInitialSize());", "sourceBeforeFix": "this.getNotEmptyWaitThreadPeak()", "sourceAfterFix": "this.getNotEmptyWaitThreadCount()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  private final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "1daccd54d2ff2ecdb21d8c60268600c37febbb70", "projectName": "Alluxio.alluxio", "bugType": "Change Operand ", "problem": "         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n            file = new RandomAccessFile(FOLDER + (mWorkerId + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n            mBuf.array()[0] = (byte) (k + mWorkerId);\n             dst.put(mBuf.array());\n           }\n           dst.clear();", "fixed": "         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n            file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n            mBuf.putInt(0, k + mWorkerId);\n             dst.put(mBuf.array());\n           }\n           dst.clear();", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform3(location, v);\r\n \t}\r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform3(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r", "fixed": " \t}\r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform3iv(location, v);\r\n \t}\r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform3iv(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r", "sourceBeforeFix": "EXTFramebufferObject.glGetRenderbufferParameterEXT(target,pname,params)", "sourceAfterFix": "EXTFramebufferObject.glGetRenderbufferParameterivEXT(target,pname,params)"}
{"fixCommitSHA1": "79946366e1ab141ef2b595e0079dcac7b913da2b", "projectName": "checkstyle.checkstyle", "bugType": "Wrong Function Name", "problem": "         };\n         verify(checkConfig,\n                getPath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\"), expected);\n     }\n     @Test", "fixed": "         };\n         verify(checkConfig,\n                getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\"),\n                expected);\n     }\n     @Test", "sourceBeforeFix": "getPath(\"InputPackageDeclarationDiffDirectoryAtParent.java\")", "sourceAfterFix": "getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtParent.java\")"}
{"fixCommitSHA1": "e4ce636e7fd9b892e3a696366c1981d3fae46ab4", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "         MockEndpoint mock = context.getEndpoint(\"mock:result\", MockEndpoint.class);\n        mock.expectedMessageCount(2);", "fixed": "         MockEndpoint mock = context.getEndpoint(\"mock:result\", MockEndpoint.class);\n        mock.expectedMinimumMessageCount(2);", "sourceBeforeFix": "mock.expectedMessageCount(2)", "sourceAfterFix": "mock.expectedMinimumMessageCount(2)"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should find object given valid uuid\n \t * @should return null if no object found with given uuid\n \t */\n\tpublic GlobalProperty getGlobalPropertyByUuid(String uuid) throws APIException;\n \t/**\n \t * Get a listing or important variables used in openmrs", "fixed": " \t * @should find object given valid uuid\n \t * @should return null if no object found with given uuid\n \t */\n\tpublic GlobalProperty getGlobalPropertyByUuid(String uuid);\n \t/**\n \t * Get a listing or important variables used in openmrs", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  private final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "cb6f6e26c12839e59243f25bfb142ec5e5b71135", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "     public void testRecipientListParallelTimeout() throws Exception {\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedBodiesReceived(\"BC\");\n         template.sendBodyAndHeader(\"direct:start\", \"Hello\", \"slip\", \"direct:a,direct:b,direct:c\");", "fixed": "     public void testRecipientListParallelTimeout() throws Exception {\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.message(0).body().not(body().contains(\"A\"));\n         template.sendBodyAndHeader(\"direct:start\", \"Hello\", \"slip\", \"direct:a,direct:b,direct:c\");", "sourceBeforeFix": "from(\"direct:start\").recipientList(header(\"slip\")).aggregationStrategy(new AggregationStrategy(){   public Exchange aggregate(  Exchange oldExchange,  Exchange newExchange){     if (oldExchange == null) {       return newExchange;     }     String body=oldExchange.getIn().getBody(String.class);     oldExchange.getIn().setBody(body + newExchange.getIn().getBody(String.class));     return oldExchange;   } } ).parallelProcessing().timeout(2000)", "sourceAfterFix": "from(\"direct:start\").recipientList(header(\"slip\")).aggregationStrategy(new AggregationStrategy(){   public Exchange aggregate(  Exchange oldExchange,  Exchange newExchange){     if (oldExchange == null) {       return newExchange;     }     String body=oldExchange.getIn().getBody(String.class);     oldExchange.getIn().setBody(body + newExchange.getIn().getBody(String.class));     return oldExchange;   } } ).parallelProcessing().timeout(1000)"}
{"fixCommitSHA1": "1b93a2f8d9a40a28615c3acc0c6415d678e26466", "projectName": "facebook.presto", "bugType": "Wrong Function Name", "problem": "         failureCause.compareAndSet(null, toFailure(throwable));\n         boolean failed = queryState.setIf(FAILED, currentState -> !currentState.isDone());\n         if (failed) {\n            log.error(throwable, \"Query %s failed\", queryId);\n         }\n         else {\n             log.debug(throwable, \"Failure after query %s finished\", queryId);", "fixed": "         failureCause.compareAndSet(null, toFailure(throwable));\n         boolean failed = queryState.setIf(FAILED, currentState -> !currentState.isDone());\n         if (failed) {\n            log.debug(throwable, \"Query %s failed\", queryId);\n         }\n         else {\n             log.debug(throwable, \"Failure after query %s finished\", queryId);", "sourceBeforeFix": "log.error(throwable,\"Query %s failed\",queryId)", "sourceAfterFix": "log.debug(throwable,\"Query %s failed\",queryId)"}
{"fixCommitSHA1": "998d200618f6c6699f8bacd059ffda7c54f4d39e", "projectName": "facebook.presto", "bugType": "Wrong Function Name", "problem": "     public static Rule<ExchangeNode> checkRulesAreFiredBeforeAddExchangesRule()\n     {\n        return checkPlanDoNotMatch(exchange(), \"Expected rules to be fired before 'AddExchanges' optimizer\");\n     }\n    public static <T extends PlanNode> Rule<T> checkPlanDoNotMatch(Pattern<T> pattern, String message)\n     {\n         return new CheckNoPlanNodeMatchesRule<>(pattern, message);\n     }", "fixed": "     public static Rule<ExchangeNode> checkRulesAreFiredBeforeAddExchangesRule()\n     {\n        return checkNoPlanNodeMatches(exchange(), \"Expected rules to be fired before 'AddExchanges' optimizer\");\n     }\n    private static <T extends PlanNode> Rule<T> checkNoPlanNodeMatches(Pattern<T> pattern, String message)\n     {\n         return new CheckNoPlanNodeMatchesRule<>(pattern, message);\n     }", "sourceBeforeFix": "checkPlanDoNotMatch(exchange(),\"Expected rules to be fired before 'AddExchanges' optimizer\")", "sourceAfterFix": "checkNoPlanNodeMatches(exchange(),\"Expected rules to be fired before 'AddExchanges' optimizer\")"}
{"fixCommitSHA1": "bdd386e699e23c48524b822b9b890b077f294c69", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     invert = false;\n   }\n  private String wrapInFunction(String s) {\n     return \"function f(){\" + s + \"}\";\n   }", "fixed": "     invert = false;\n   }\n  private static String wrapInFunction(String s) {\n     return \"function f(){\" + s + \"}\";\n   }", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15861, value = \"Cannot remove deployment %s from the domain as it is still used by server groups %s\")\n     String cannotRemoveDeploymentInUse(String name, List<String> groups);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10861, value = \"Cannot remove deployment %s from the domain as it is still used by server groups %s\")\n     String cannotRemoveDeploymentInUse(String name, List<String> groups);\n     /**", "sourceBeforeFix": "id=15844", "sourceAfterFix": "id=10844"}
{"fixCommitSHA1": "194a3d4413de06e4f57f2c2bdb001fcd1fd4385b", "projectName": "facebook.presto", "bugType": "Less Specific If", "problem": "     private String formatDataRate(long inputDataSize, Duration duration)\n     {\n         double rate = inputDataSize / duration.convertTo(TimeUnit.SECONDS);\n        if (Double.isNaN(rate)) {\n             return \"0Bps\";\n         }\n         DataSize dataSize = new DataSize(rate, Unit.BYTE).convertToMostSuccinctDataSize();", "fixed": "     private String formatDataRate(long inputDataSize, Duration duration)\n     {\n         double rate = inputDataSize / duration.convertTo(TimeUnit.SECONDS);\n        if (Double.isNaN(rate) || Double.isInfinite(rate)) {\n             return \"0Bps\";\n         }\n         DataSize dataSize = new DataSize(rate, Unit.BYTE).convertToMostSuccinctDataSize();", "sourceBeforeFix": "Double.isNaN(rate)", "sourceAfterFix": "Double.isNaN(rate) || Double.isInfinite(rate)"}
{"fixCommitSHA1": "f8c20919f9c2e18e48142c2712e34298f98b983e", "projectName": "spring-projects.spring-boot", "bugType": "Wrong Function Name", "problem": " \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tfinal Date[] date = new Date[1];\n \t\tthis.container = factory\n\t\t\t\t.getEmbdeddedServletContainer(new ServletContextInitializer() {\n \t\t\t\t\t@Override\n \t\t\t\t\tpublic void onStartup(ServletContext servletContext)\n \t\t\t\t\t\t\tthrows ServletException {", "fixed": " \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tfinal Date[] date = new Date[1];\n \t\tthis.container = factory\n\t\t\t\t.getEmbeddedServletContainer(new ServletContextInitializer() {\n \t\t\t\t\t@Override\n \t\t\t\t\tpublic void onStartup(ServletContext servletContext)\n \t\t\t\t\t\t\tthrows ServletException {", "sourceBeforeFix": "factory.getEmbdeddedServletContainer(exampleServletRegistration(),new FilterRegistrationBean(new ExampleFilter()))", "sourceAfterFix": "factory.getEmbeddedServletContainer(exampleServletRegistration(),new FilterRegistrationBean(new ExampleFilter()))"}
{"fixCommitSHA1": "bbdd2fa3a4265b88096ab6f85bcfb1df7fc037a3", "projectName": "dropwizard.dropwizard", "bugType": "Wrong Function Name", "problem": "         final HttpConnectionFactory http1 = buildHttpConnectionFactory(httpConfig);\n         final HTTP2ServerConnectionFactory http2 = new HTTP2ServerConnectionFactory(httpConfig);\n         http2.setMaxConcurrentStreams(maxConcurrentStreams);\n        http2.setInitialStreamSendWindow(initialStreamSendWindow);\n         final NegotiatingServerConnectionFactory alpn = new ALPNServerConnectionFactory(H2, H2_17);\nalpn.setDefaultProtocol(HTTP_1_1);", "fixed": "         final HttpConnectionFactory http1 = buildHttpConnectionFactory(httpConfig);\n         final HTTP2ServerConnectionFactory http2 = new HTTP2ServerConnectionFactory(httpConfig);\n         http2.setMaxConcurrentStreams(maxConcurrentStreams);\n        http2.setInitialStreamRecvWindow(initialStreamSendWindow);\n         final NegotiatingServerConnectionFactory alpn = new ALPNServerConnectionFactory(H2, H2_17);\nalpn.setDefaultProtocol(HTTP_1_1);", "sourceBeforeFix": "http2.setInitialStreamSendWindow(initialStreamSendWindow)", "sourceAfterFix": "http2.setInitialStreamRecvWindow(initialStreamSendWindow)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "a35860eadb4400f069e306ccd76f1a19ecfb3ba1", "projectName": "google.guava", "bugType": "Change Identifier Used", "problem": "   }\n   @Override\n  public N removeOutEdge(Object edge) {\n     N node = super.removeOutEdge(edge);\n     Multiset<N> successors = getReference(successorsReference);\n     if (successors != null) {", "fixed": "   }\n   @Override\n  public N removeOutEdge(E edge) {\n     N node = super.removeOutEdge(edge);\n     Multiset<N> successors = getReference(successorsReference);\n     if (successors != null) {", "sourceBeforeFix": "Object edge", "sourceAfterFix": "E edge"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetsOfMe(Paging paging) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweets_of_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetsOfMe(Paging paging) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweets_of_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,paging.asPostParameterList(),true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,paging.asPostParameterList(),true))"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getUserTimeline(String id) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline/\" + id + \".json\", http.isAuthenticationEnabled()));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getUserTimeline(String id) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline/\" + id + \".json\", http.isAuthenticationEnabled()));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweets_of_me.json\",null,paging.asPostParameterList(),true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweets_of_me.json\",null,paging.asPostParameterList(),true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15849, value = \"Operation %s for address %s can only be handled by the \" +\n             \"master Domain Controller; this host is not the master Domain Controller\")\n     String masterDomainControllerOnlyOperation(String operation, PathAddress address);", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10849, value = \"Operation %s for address %s can only be handled by the \" +\n             \"master Domain Controller; this host is not the master Domain Controller\")\n     String masterDomainControllerOnlyOperation(String operation, PathAddress address);", "sourceBeforeFix": "id=15867", "sourceAfterFix": "id=10867"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "         @ApiResponse(code = 200, message = \"successful operation\", response = Pet.class),\n         @ApiResponse(code = 400, message = \"Invalid ID supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"Pet not found\", response = Void.class) })\n    Pet getPetById(@PathParam(\"petId\") @ApiParam(\"ID of pet to return\") Long petId);\n     @PUT\n     @Consumes({ \"application/json\", \"application/xml\" })", "fixed": "         @ApiResponse(code = 200, message = \"successful operation\", response = Pet.class),\n         @ApiResponse(code = 400, message = \"Invalid ID supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"Pet not found\", response = Void.class) })\n    Pet getPetById(@PathParam(\"petId\") @ApiParam(\"ID of pet to return\") Long petId) throws Exception;\n     @PUT\n     @Consumes({ \"application/json\", \"application/xml\" })", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "eba21442eb7ab27514cf82240bb443955c5e52c4", "projectName": "Alluxio.alluxio", "bugType": "Wrong Function Name", "problem": "       URIStatus status = statuses.get(k);\n       ret[k] = new FileStatus(status.getLength(), status.isFolder(), 3, status.getBlockSizeBytes(),\n          status.getCreationTimeMs(), status.getCreationTimeMs(), null, null, null,\n           new Path(mAlluxioHeader + status.getPath()));\n     }\n     return ret;", "fixed": "       URIStatus status = statuses.get(k);\n       ret[k] = new FileStatus(status.getLength(), status.isFolder(), 3, status.getBlockSizeBytes(),\n          status.getLastModificationTimeMs(), status.getCreationTimeMs(), null, null, null,\n           new Path(mAlluxioHeader + status.getPath()));\n     }\n     return ret;", "sourceBeforeFix": "status.getCreationTimeMs()", "sourceAfterFix": "status.getLastModificationTimeMs()"}
{"fixCommitSHA1": "2bc44fae7b27d9582212e1fdc7f830a1441b0cc4", "projectName": "wildfly.wildfly", "bugType": "Change Binary Operator", "problem": "     @Override\n     public boolean isExpired() {\n         long maxInactiveInterval = this.getMaxInactiveInterval(TimeUnit.MILLISECONDS);\n        return (maxInactiveInterval > 0) ? (System.currentTimeMillis() - this.lastAccessedTime.getTime()) > maxInactiveInterval : false;\n     }\n     @Override", "fixed": "     @Override\n     public boolean isExpired() {\n         long maxInactiveInterval = this.getMaxInactiveInterval(TimeUnit.MILLISECONDS);\n        return (maxInactiveInterval > 0) ? (System.currentTimeMillis() - this.lastAccessedTime.getTime()) >= maxInactiveInterval : false;\n     }\n     @Override", "sourceBeforeFix": "(System.currentTimeMillis() - this.lastAccessedTime.getTime()) > maxInactiveInterval", "sourceAfterFix": "(System.currentTimeMillis() - this.lastAccessedTime.getTime()) >= maxInactiveInterval"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "fixed": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttribfv(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttribiv(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "sourceBeforeFix": "GL11.glGetTexParameter(target,pname,params)", "sourceAfterFix": "GL11.glGetTexParameterfv(target,pname,params)"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n \t * @return The number of bytes that the normalized key would maximally take.\n \t */\n\tpublic int getNormalizeKeyLen();\n \t/**\n \t * Checks, whether the given number of bytes for a normalized suffice to determine the order of elements", "fixed": " \t * \n \t * @return The number of bytes that the normalized key would maximally take.\n \t */\n\tpublic abstract int getNormalizeKeyLen();\n \t/**\n \t * Checks, whether the given number of bytes for a normalized suffice to determine the order of elements", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "2956fca2f1fd1c8609d682fa58e72e3ccc54826a", "projectName": "apache.camel", "bugType": "Same Function More Args", "problem": "             detach();\n             ReactiveStreamsBackpressureStrategy strategy = producer.getEndpoint().getBackpressureStrategy();\n            Flux<Exchange> flux = Flux.create(camelSink::set);\n             if (ObjectHelper.equal(strategy, ReactiveStreamsBackpressureStrategy.OLDEST)) {", "fixed": "             detach();\n             ReactiveStreamsBackpressureStrategy strategy = producer.getEndpoint().getBackpressureStrategy();\n            Flux<Exchange> flux = Flux.create(camelSink::set, FluxSink.OverflowStrategy.IGNORE);\n             if (ObjectHelper.equal(strategy, ReactiveStreamsBackpressureStrategy.OLDEST)) {", "sourceBeforeFix": "Flux.create(camelSink::set)", "sourceAfterFix": "Flux.create(camelSink::set,FluxSink.OverflowStrategy.IGNORE)"}
{"fixCommitSHA1": "d8d9e5711a908603f73f92872b127fe4d7ab4a15", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "  */\n public class ManagedProducerRouteAddRemoveRegisterAlwaysTest extends ManagementTestSupport {\n    private int services = 8;\n     @Override\n     protected CamelContext createCamelContext() throws Exception {", "fixed": "  */\n public class ManagedProducerRouteAddRemoveRegisterAlwaysTest extends ManagementTestSupport {\n    private int services = 9;\n     @Override\n     protected CamelContext createCamelContext() throws Exception {", "sourceBeforeFix": "services=8", "sourceAfterFix": "services=9"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n*  @see java.util.Comparator\n \t */\n\tpublic int compare(DataInputView firstSource, DataInputView secondSource) throws IOException;", "fixed": " \t * \n*  @see java.util.Comparator\n \t */\n\tpublic abstract int compare(DataInputView firstSource, DataInputView secondSource) throws IOException;", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getFavorites(String id, int page) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"favorites/\" + id + \".json\", \"page\", String.valueOf(page), true));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getFavorites(String id, int page) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"favorites/\" + id + \".json\", \"page\", String.valueOf(page), true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites/\" + id+ \".json\",\"page\",String.valueOf(page),true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites/\" + id+ \".json\",\"page\",String.valueOf(page),true))"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedApnsEndpointBuilder\n             extends\n                 AdvancedApnsEndpointConsumerBuilder, AdvancedApnsEndpointProducerBuilder {\n         default ApnsEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedApnsEndpointBuilder\n             extends\n                 AdvancedApnsEndpointConsumerBuilder, AdvancedApnsEndpointProducerBuilder {\n         default ApnsEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweets(long statusId) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL()\n                 + \"statuses/retweets/\" + statusId + \".json\", true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweets(long statusId) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL()\n                 + \"statuses/retweets/\" + statusId + \".json\", true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/home_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/home_timeline.json\",true))"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getFavorites(String id, int page) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"favorites/\" + id + \".json\", \"page\", String.valueOf(page), true));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getFavorites(String id, int page) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"favorites/\" + id + \".json\", \"page\", String.valueOf(page), true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline/\" + id+ \".json\",null,paging.asPostParameterList(),http.isAuthenticationEnabled()))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline/\" + id+ \".json\",null,paging.asPostParameterList(),http.isAuthenticationEnabled()))"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedByMe(Paging paging) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedByMe(Paging paging) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",null,true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15840, value = \"Interrupted waiting for result from server %s\")\n     String interruptedAwaitingResultFromServer(ServerIdentity server);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10840, value = \"Interrupted waiting for result from server %s\")\n     String interruptedAwaitingResultFromServer(ServerIdentity server);\n     /**", "sourceBeforeFix": "id=15855", "sourceAfterFix": "id=10855"}
{"fixCommitSHA1": "73627df082ff499af4ca1c482f79e304905007eb", "projectName": "alibaba.canal", "bugType": "Same Function More Args", "problem": "             long key_length = m_data.getUint16();\n            return m_data.rewind().forward((int) key_offset).getFixString((int) key_length);\n         }\n        public Json_Value element(int i) {\n             m_data.rewind();\n             int offset_size = m_large ? LARGE_OFFSET_SIZE : SMALL_OFFSET_SIZE;\n             int key_entry_size = m_large ? KEY_ENTRY_SIZE_LARGE : KEY_ENTRY_SIZE_SMALL;", "fixed": "             long key_length = m_data.getUint16();\n            return m_data.rewind().forward((int) key_offset).getFixString((int) key_length, charsetName);\n         }\n        public Json_Value element(int i, String charsetName) {\n             m_data.rewind();\n             int offset_size = m_large ? LARGE_OFFSET_SIZE : SMALL_OFFSET_SIZE;\n             int key_entry_size = m_large ? KEY_ENTRY_SIZE_LARGE : KEY_ENTRY_SIZE_SMALL;", "sourceBeforeFix": "m_data.rewind().forward((int)key_offset).getFixString((int)key_length)", "sourceAfterFix": "m_data.rewind().forward((int)key_offset).getFixString((int)key_length,charsetName)"}
{"fixCommitSHA1": "8018d1af58330b6d21c858fa5ebfee6a66cd10b3", "projectName": "apache.hadoop", "bugType": "Change Identifier Used", "problem": "           printProviderWritten();\n         } catch (NoSuchAlgorithmException e) {\n           out.println(\"Cannot roll key: \" + keyName + \" within KeyProvider: \"\n              + provider);\n           throw e;\n         }\n       } catch (IOException e1) {\n         out.println(\"Cannot roll key: \" + keyName + \" within KeyProvider: \"\n            + provider);\n         throw e1;\n       }\n     }", "fixed": "           printProviderWritten();\n         } catch (NoSuchAlgorithmException e) {\n           out.println(\"Cannot roll key: \" + keyName + \" within KeyProvider: \"\n              + provider + \". \" + e.toString());\n           throw e;\n         }\n       } catch (IOException e1) {\n         out.println(\"Cannot roll key: \" + keyName + \" within KeyProvider: \"\n            + provider + \". \" + e1.toString());\n         throw e1;\n       }\n     }", "sourceBeforeFix": "e.getMessage()", "sourceAfterFix": "e.toString()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fd37bb87cc8aa1cf713c2f4ddfd2ec95be096d70", "projectName": "stanfordnlp.CoreNLP", "bugType": "Change Identifier Used", "problem": "         Class[] argsClass = { String.class };\n         Object[] arguments = { op.testOptions.taggerSerializedFile };\n         System.err.printf(\"Loading tagger from serialized file %s ...\\n\",op.testOptions.taggerSerializedFile);\n        tagger = (Function<List<? extends HasWord>,ArrayList<TaggedWord>>) Class.forName(\"edu.stanford.nlp.tagger.maxent.MaxentTagger\").getConstructor(argsClass).newInstance(arguments);\n       } catch (RuntimeException e) {\n         throw e;\n       } catch (Exception e) {", "fixed": "         Class[] argsClass = { String.class };\n         Object[] arguments = { op.testOptions.taggerSerializedFile };\n         System.err.printf(\"Loading tagger from serialized file %s ...\\n\",op.testOptions.taggerSerializedFile);\n        tagger = (Function<List<? extends HasWord>,List<TaggedWord>>) Class.forName(\"edu.stanford.nlp.tagger.maxent.MaxentTagger\").getConstructor(argsClass).newInstance(arguments);\n       } catch (RuntimeException e) {\n         throw e;\n       } catch (Exception e) {", "sourceBeforeFix": "ArrayList<TaggedWord>", "sourceAfterFix": "List<TaggedWord>"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(741);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {Console.WriteLine($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "fixed": " \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(740);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {Console.WriteLine($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "sourceBeforeFix": "new StringBuilder(741)", "sourceAfterFix": "new StringBuilder(740)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15855, value = \"Invalid byte stream.\")\n     String invalidByteStream();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10855, value = \"Invalid byte stream.\")\n     String invalidByteStream();\n     /**", "sourceBeforeFix": "id=15848", "sourceAfterFix": "id=10848"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedIronMQEndpointBuilder\n             extends\n                 AdvancedIronMQEndpointConsumerBuilder, AdvancedIronMQEndpointProducerBuilder {\n         default IronMQEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedIronMQEndpointBuilder\n             extends\n                 AdvancedIronMQEndpointConsumerBuilder, AdvancedIronMQEndpointProducerBuilder {\n         default IronMQEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "abf2f457b12dcb128ebc437d7b8cc5a3e37c20a5", "projectName": "druid-io.druid", "bugType": "Change Modifier", "problem": "    * @return The lookup, or null key cannot have the lookup applied to it and should be treated as missing.\n    */\n   @Nullable\n  abstract String apply(@NotNull String key);\n   /**\n    * @param keys set of keys to apply lookup for each element", "fixed": "    * @return The lookup, or null key cannot have the lookup applied to it and should be treated as missing.\n    */\n   @Nullable\n  public abstract String apply(@NotNull String key);\n   /**\n    * @param keys set of keys to apply lookup for each element", "sourceBeforeFix": "1024", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface BraintreeEndpointBuilder\n             extends\n                 BraintreeEndpointConsumerBuilder, BraintreeEndpointProducerBuilder {\n         default AdvancedBraintreeEndpointBuilder advanced() {", "fixed": "     \n    public interface BraintreeEndpointBuilder\n             extends\n                 BraintreeEndpointConsumerBuilder, BraintreeEndpointProducerBuilder {\n         default AdvancedBraintreeEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "c131546eaadd07baf950bd6a44d07ee42d109e4c", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t\tfinal DummyRpcEndpoint rpcEndpoint = new DummyRpcEndpoint(akkaRpcService);\n \t\trpcEndpoint.start();\n\t\tCompletableFuture<Boolean> terminationFuture = rpcEndpoint.getTerminationFuture();\n \t\tassertFalse(terminationFuture.isDone());", "fixed": " \t\tfinal DummyRpcEndpoint rpcEndpoint = new DummyRpcEndpoint(akkaRpcService);\n \t\trpcEndpoint.start();\n\t\tCompletableFuture<Void> terminationFuture = rpcEndpoint.getTerminationFuture();\n \t\tassertFalse(terminationFuture.isDone());", "sourceBeforeFix": "CompletableFuture<Boolean>", "sourceAfterFix": "CompletableFuture<Void>"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserLists(String user, long cursor) throws TwitterException {\n        return twitter4j.List.constructListOfLists(get(getApiBaseURL() + V1 +\n                 user + \"/lists.json?cursor=\" + cursor, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserLists(String user, long cursor) throws TwitterException {\n        return twitter4j.List.createListList(get(getApiBaseURL() + V1 +\n                 user + \"/lists.json?cursor=\" + cursor, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/public_timeline.json\",false))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/public_timeline.json\",false))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "038c9b6d6103052795b6d6e1175cd964c7461bb2", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Change Modifier", "problem": "         }\n         \n        protected int readULong(final int position) throws NtlmEngineException {\n             return NtlmEngine.readULong(messageContents, position);\n         }\n         \n        protected byte[] readSecurityBuffer(final int position) throws NtlmEngineException {\n             return NtlmEngine.readSecurityBuffer(messageContents, position);\n         }", "fixed": "         }\n         \n        protected final int readULong(final int position) throws NtlmEngineException {\n             return NtlmEngine.readULong(messageContents, position);\n         }\n         \n        protected final byte[] readSecurityBuffer(final int position) throws NtlmEngineException {\n             return NtlmEngine.readSecurityBuffer(messageContents, position);\n         }", "sourceBeforeFix": "4", "sourceAfterFix": "20"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "3fdb366559bc846f2dad1965dab940dfa49b2801", "projectName": "Bukkit.Bukkit", "bugType": "Change Identifier Used", "problem": "             Constructor<? extends JavaPlugin> constructor = plugin.getConstructor(PluginLoader.class, Server.class, PluginDescriptionFile.class, File.class, ClassLoader.class);\n             result = constructor.newInstance(this, server, description, file, loader);\n        } catch (Exception ex) {\n             throw new InvalidPluginException(ex);\n         }", "fixed": "             Constructor<? extends JavaPlugin> constructor = plugin.getConstructor(PluginLoader.class, Server.class, PluginDescriptionFile.class, File.class, ClassLoader.class);\n             result = constructor.newInstance(this, server, description, file, loader);\n        } catch (Throwable ex) {\n             throw new InvalidPluginException(ex);\n         }", "sourceBeforeFix": "Exception ex", "sourceAfterFix": "Throwable ex"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     return additionalReplacements;\n   }\n  private final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     return additionalReplacements;\n   }\n  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<Status> getPublicTimeline(long sinceID) throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() +\n                 \"statuses/public_timeline.json\", null, new Paging((long) sinceID).asPostParameterList(Paging.S)\n                 , false));\n     }", "fixed": "      */\n     public ResponseList<Status> getPublicTimeline(long sinceID) throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() +\n                 \"statuses/public_timeline.json\", null, new Paging((long) sinceID).asPostParameterList(Paging.S)\n                 , false));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline/\" + id+ \".json\",null,paging.asPostParameterList(),http.isAuthenticationEnabled()))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline/\" + id+ \".json\",null,paging.asPostParameterList(),http.isAuthenticationEnabled()))"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedNettyHttpEndpointBuilder\n             extends\n                 AdvancedNettyHttpEndpointConsumerBuilder, AdvancedNettyHttpEndpointProducerBuilder {\n         default NettyHttpEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedNettyHttpEndpointBuilder\n             extends\n                 AdvancedNettyHttpEndpointConsumerBuilder, AdvancedNettyHttpEndpointProducerBuilder {\n         default NettyHttpEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "fixed": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4fv(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4fv(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "sourceBeforeFix": "GL20.glUniform2(location,toFloatBuffer(v,offset,count << 1))", "sourceAfterFix": "GL20.glUniform2fv(location,toFloatBuffer(v,offset,count << 1))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "5289280d8c8e7000d450c4f1ae3e3193dfb0d14f", "projectName": "aws.aws-sdk-java", "bugType": "Change Caller in Function Call", "problem": "                 startChildWorkflowExecutionParameters.setTaskPriority(taskPriority);\n             }\n            String lambdaRole = options.getLambdaRole();\n             if (lambdaRole != null) {\n                 startChildWorkflowExecutionParameters.setLambdaRole(lambdaRole);\n             }", "fixed": "                 startChildWorkflowExecutionParameters.setTaskPriority(taskPriority);\n             }\n            String lambdaRole = optionsOverride.getLambdaRole();\n             if (lambdaRole != null) {\n                 startChildWorkflowExecutionParameters.setLambdaRole(lambdaRole);\n             }", "sourceBeforeFix": "options.getLambdaRole()", "sourceAfterFix": "optionsOverride.getLambdaRole()"}
{"fixCommitSHA1": "6bae902bd35ed4f57e7a5d612b7ad9b72f4559bc", "projectName": "google.closure-compiler", "bugType": "Wrong Function Name", "problem": "     JSTypeRegistry registry = new JSTypeRegistry(testErrorReporter);\n     Node node1 = Node.newString(Token.NAME, \"f\");\n     Node node2 = Node.newString(Token.NAME, \"f\");\n    assertTrue(node1.checkTreeTypeAwareEqualsSilent(node2));\n   }\n   public void testCheckTreeTypeAwareEqualsDifferent() {", "fixed": "     JSTypeRegistry registry = new JSTypeRegistry(testErrorReporter);\n     Node node1 = Node.newString(Token.NAME, \"f\");\n     Node node2 = Node.newString(Token.NAME, \"f\");\n    assertTrue(node1.isEquivalentToTyped(node2));\n   }\n   public void testCheckTreeTypeAwareEqualsDifferent() {", "sourceBeforeFix": "node1.checkTreeEqualsSilent(node2)", "sourceAfterFix": "node1.isEquivalentTo(node2)"}
{"fixCommitSHA1": "9467bef8ea9a62658b32dd43a76f4f98087d1986", "projectName": "apache.hadoop", "bugType": "Change Unary Operator\t", "problem": "    * % hadoop key list [-provider providerPath]\n    * % hadoop key delete keyName [--provider providerPath] [-i]\n    * </pre>\n   * @param args\n   * @return\n    * @throws IOException\n    */\n   private int init(String[] args) throws IOException {", "fixed": "    * % hadoop key list [-provider providerPath]\n    * % hadoop key delete keyName [--provider providerPath] [-i]\n    * </pre>\n   * @param args Command line arguments.\n   * @return 0 on success, 1 on failure.\n    * @throws IOException\n    */\n   private int init(String[] args) throws IOException {", "sourceBeforeFix": "-1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "79946366e1ab141ef2b595e0079dcac7b913da2b", "projectName": "checkstyle.checkstyle", "bugType": "Wrong Function Name", "problem": "             \"1: \" + getCheckMessage(MSG_KEY_MISMATCH),\n         };\n        verify(checkConfig, getPath(\"InputPackageDeclarationDiffDirectory.java\"), expected);\n     }\n     @Test", "fixed": "             \"1: \" + getCheckMessage(MSG_KEY_MISMATCH),\n         };\n        verify(checkConfig,\n                getNonCompilablePath(\"InputPackageDeclarationDiffDirectory.java\"), expected);\n     }\n     @Test", "sourceBeforeFix": "getPath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\")", "sourceAfterFix": "getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\")"}
{"fixCommitSHA1": "19c2a076c25faf94ae9e8f4072f2a4590c9ee1fe", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \tpublic void doubleStop() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tthis.container = factory\n\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n \t\tthis.container.stop();\n \t\tthis.container.stop();\n \t}", "fixed": " \tpublic void doubleStop() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tthis.container = factory\n\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \t\tthis.container.stop();\n \t\tthis.container.stop();\n \t}", "sourceBeforeFix": "factory.getEmbdeddedServletContainer(exampleServletRegistration(),new FilterRegistrationBean(new ExampleFilter()))", "sourceAfterFix": "factory.getEmbeddedServletContainer(exampleServletRegistration(),new FilterRegistrationBean(new ExampleFilter()))"}
{"fixCommitSHA1": "34df86db858d325c9ae6951ae9e69c2fae914be7", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t\t\t\t}\r\n \t\t\t\tx += layerTileWidth;\r\n \t\t\t}\r\n\t\t\ty += layerTileHeight;\r\n \t\t}\r\n \t}\r\n }\r", "fixed": " \t\t\t\t}\r\n \t\t\t\tx += layerTileWidth;\r\n \t\t\t}\r\n\t\t\ty -= layerTileHeight;\r\n \t\t}\r\n \t}\r\n }\r", "sourceBeforeFix": "row1 * layerTileHeight", "sourceAfterFix": "row2 * layerTileHeight"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "5221c15e183cb7029a305766d137d909f77e8941", "projectName": "google.guice", "bugType": "Wrong Function Name", "problem": "   }\n   public Injector createChildInjector(Module... modules) {\n    return createChildInjector(ImmutableList.of(modules));\n   }\n   /**", "fixed": "   }\n   public Injector createChildInjector(Module... modules) {\n    return createChildInjector(ImmutableList.copyOf(modules));\n   }\n   /**", "sourceBeforeFix": "ImmutableList.of(modules)", "sourceAfterFix": "ImmutableList.copyOf(modules)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<Status> getUserTimeline(Paging paging) throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline.json\"\n                 , null, paging.asPostParameterList(), true));\n     }", "fixed": "      */\n     public ResponseList<Status> getUserTimeline(Paging paging) throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline.json\"\n                 , null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "DirectMessage.constructDirectMessages(get(getBaseURL() + \"direct_messages/sent.json\",new PostParameter[0],true))", "sourceAfterFix": "DirectMessage.createDirectMessageList(get(getBaseURL() + \"direct_messages/sent.json\",new PostParameter[0],true))"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_cn_4() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e7405\u670806\u65e5\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_cn_4() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e7405\u670806\u65e5\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserLists(String user, long cursor) throws TwitterException {\n        return twitter4j.List.constructListOfLists(get(getApiBaseURL() + V1 +\n                 user + \"/lists.json?cursor=\" + cursor, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserLists(String user, long cursor) throws TwitterException {\n        return twitter4j.List.createListList(get(getApiBaseURL() + V1 +\n                 user + \"/lists.json?cursor=\" + cursor, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getApiBaseURL() + V1 + user+ \"/lists/\"+ id+ \"/statuses.json\",new PostParameter[0],paging.asPostParameterList(Paging.SMCP,Paging.PER_PAGE),true))", "sourceAfterFix": "Status.createStatuseList(get(getApiBaseURL() + V1 + user+ \"/lists/\"+ id+ \"/statuses.json\",new PostParameter[0],paging.asPostParameterList(Paging.SMCP,Paging.PER_PAGE),true))"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \t@Test\n \tpublic void testMultipleActionsPredicatesOptions_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {Console.WriteLine($ctx.ToStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");", "fixed": " \t@Test\n \tpublic void testMultipleActionsPredicatesOptions_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(245);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {Console.WriteLine($ctx.ToStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");", "sourceBeforeFix": "new StringBuilder(246)", "sourceAfterFix": "new StringBuilder(245)"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsCsv(String path, int batchSize, OUT endTuple) {\n \t\tif (this instanceof SingleOutputStreamOperator) {\n \t\t\t((SingleOutputStreamOperator<?, ?>) this).setMutability(false);\n \t\t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsCsv(String path, int batchSize, OUT endTuple) {\n \t\tif (this instanceof SingleOutputStreamOperator) {\n \t\t\t((SingleOutputStreamOperator<?, ?>) this).setMutability(false);\n \t\t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "5ab2a833f50c61a5322778a38dbfdd33c9b478d0", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": " /*\n * Copyright 2007 Yusuke Yamamoto\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.", "fixed": " /*\n * Copyright (C) 2007 Yusuke Yamamoto\n * Copyright (C) 2011 Twitter, Inc.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.", "sourceBeforeFix": "assertSame(conf,(Configuration)serializeDeserialize(conf))", "sourceAfterFix": "assertEquals(conf,(Configuration)serializeDeserialize(conf))"}
{"fixCommitSHA1": "038ea1803bae1cf3be279b36395b4de4e0ff39b5", "projectName": "openhab.openhab", "bugType": "Wrong Function Name", "problem": " \t */\n \tprivate void poll() {\n \t\tif (invalidCredentials || this.myqOnlineData == null) {\n\t\t\tlogger.debug(\"Invalid Account Credentials\");\n \t\t\treturn;\n \t\t}", "fixed": " \t */\n \tprivate void poll() {\n \t\tif (invalidCredentials || this.myqOnlineData == null) {\n\t\t\tlogger.trace(\"Invalid Account Credentials\");\n \t\t\treturn;\n \t\t}", "sourceBeforeFix": "logger.debug(\"Invalid Account Credentials\")", "sourceAfterFix": "logger.trace(\"Invalid Account Credentials\")"}
{"fixCommitSHA1": "ed13d3007bbe9cb7df8641d2e287bf94c314fb86", "projectName": "facebook.presto", "bugType": "Change Identifier Used", "problem": "                 }\n             });\n         }\n        long newReservation = memoryReservation.getAndAdd(bytes);\n         if (newReservation > maxMemoryReservation) {\n             memoryReservation.getAndAdd(-bytes);\n             throw new ExceededMemoryLimitException(getMaxMemorySize());", "fixed": "                 }\n             });\n         }\n        long newReservation = memoryReservation.addAndGet(bytes);\n         if (newReservation > maxMemoryReservation) {\n             memoryReservation.getAndAdd(-bytes);\n             throw new ExceededMemoryLimitException(getMaxMemorySize());", "sourceBeforeFix": "memoryReservation.getAndAdd(bytes)", "sourceAfterFix": "memoryReservation.addAndGet(bytes)"}
{"fixCommitSHA1": "dfb43299a88507211e9acb9a9f21a8ba54f0205a", "projectName": "iluwatar.java-design-patterns", "bugType": "Change Identifier Used", "problem": "   \n  private final Prototype testedPrototype;\n   /**\n* The expected {@link Prototype", "fixed": "   \n  private final P testedPrototype;\n   /**\n* The expected {@link Prototype", "sourceBeforeFix": "final Prototype testedPrototype", "sourceAfterFix": "final P testedPrototype"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "f135cc4188dd173e8fc175bc5d26cf1a970ac39e", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "                                 response.get(FAILURE_DESCRIPTION).set(\"Operation handler failed to complete\");\n                             }\n                             response.get(OUTCOME).set(FAILED);\n                            response.set(ROLLED_BACK).set(true);\n                             return resultAction = ResultAction.ROLLBACK;", "fixed": "                                 response.get(FAILURE_DESCRIPTION).set(\"Operation handler failed to complete\");\n                             }\n                             response.get(OUTCOME).set(FAILED);\n                            response.get(ROLLED_BACK).set(true);\n                             return resultAction = ResultAction.ROLLBACK;", "sourceBeforeFix": "response.set(ROLLED_BACK)", "sourceAfterFix": "response.get(ROLLED_BACK)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  private final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "           \"functions are set.\");\n   \n  private final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "           \"functions are set.\");\n   \n  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "35dc7982d28800b4fecdf0772236a2d8e054aa77", "projectName": "spring-projects.spring-boot", "bugType": "Change Modifier", "problem": " \tprivate int port = Integer.valueOf(System.getProperty(\"port\"));\n \t@Test\n\tpublic void testHome() throws Exception {\nString url = \"http:\n \t\tResponseEntity<String> entity = this.rest.getForEntity(url, String.class);\n \t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);", "fixed": " \tprivate int port = Integer.valueOf(System.getProperty(\"port\"));\n \t@Test\n\tvoid testHome() throws Exception {\nString url = \"http:\n \t\tResponseEntity<String> entity = this.rest.getForEntity(url, String.class);\n \t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<DirectMessage> getDirectMessages(Paging paging) throws TwitterException {\n        return DirectMessage.constructDirectMessages(get(getBaseURL()\n                 + \"direct_messages.json\", null, paging.asPostParameterList(), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<DirectMessage> getDirectMessages(Paging paging) throws TwitterException {\n        return DirectMessage.createDirectMessageList(get(getBaseURL()\n                 + \"direct_messages.json\", null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "DirectMessage.constructDirectMessages(get(getBaseURL() + \"direct_messages.json\",true))", "sourceAfterFix": "DirectMessage.createDirectMessageList(get(getBaseURL() + \"direct_messages.json\",true))"}
{"fixCommitSHA1": "e2119d33293008fcc876f5fcd58ede2993eb24d6", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnBean(Client.class)\n\t@ConditionalOnEnablednHealthIndicator(\"elasticsearch\")\n \t@EnableConfigurationProperties(ElasticsearchHealthIndicatorProperties.class)\n \tpublic static class ElasticsearchHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<ElasticsearchHealthIndicator, Client> {", "fixed": " \t@Configuration\n \t@ConditionalOnBean(Client.class)\n\t@ConditionalOnEnabledHealthIndicator(\"elasticsearch\")\n \t@EnableConfigurationProperties(ElasticsearchHealthIndicatorProperties.class)\n \tpublic static class ElasticsearchHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<ElasticsearchHealthIndicator, Client> {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"rabbit\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"rabbit\")"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15863, value = \"%s is not a valid URL -- %s\")\n     String invalidUrl(String url, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10863, value = \"%s is not a valid URL -- %s\")\n     String invalidUrl(String url, String message);\n     /**", "sourceBeforeFix": "id=15863", "sourceAfterFix": "id=10863"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "62e3bf2543fe2bbde6a0e939c3f219e07b06c8cc", "projectName": "swagger-api.swagger-codegen", "bugType": "Less Specific If", "problem": "   @Override\n   public String escapeReservedWord(String name) {\nreturn \"Swagger\" + name;\n   }\n   @Override", "fixed": "   @Override\n   public String escapeReservedWord(String name) {\nreturn \"_\" + name;\n   }\n   @Override", "sourceBeforeFix": "reservedWords.contains(codegenProperty.datatypeWithEnum)", "sourceAfterFix": "reservedWords.contains(codegenProperty.datatypeWithEnum) || name.equals(codegenProperty.datatypeWithEnum)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedCordaEndpointBuilder\n             extends\n                 AdvancedCordaEndpointConsumerBuilder, AdvancedCordaEndpointProducerBuilder {\n         default CordaEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedCordaEndpointBuilder\n             extends\n                 AdvancedCordaEndpointConsumerBuilder, AdvancedCordaEndpointProducerBuilder {\n         default CordaEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "97814491bc0e383e136612dea07af841c0121681", "projectName": "Alluxio.alluxio", "bugType": "Same Function More Args", "problem": "    * @return A mapping from storage tier alias to blocks\n    */\n   public Map<String, List<Long>> getBlockList() {\n    Preconditions.checkNotNull(mBlockIdsOnTiers);\n     return mBlockIdsOnTiers;\n   }", "fixed": "    * @return A mapping from storage tier alias to blocks\n    */\n   public Map<String, List<Long>> getBlockList() {\n    Preconditions.checkNotNull(mBlockIdsOnTiers, \"mBlockIdsOnTiers\");\n     return mBlockIdsOnTiers;\n   }", "sourceBeforeFix": "Preconditions.checkNotNull(mBlockIdsOnTiers)", "sourceAfterFix": "Preconditions.checkNotNull(mBlockIdsOnTiers,\"mBlockIdsOnTiers\")"}
{"fixCommitSHA1": "435805f612bf78ee0d2fd93cd90fa6c6740e17c2", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         String uri = getScpUri() + \"?username=admin&password=admin&knownHostsFile=\" + getKnownHostsFile();\n         template.sendBodyAndHeader(uri, \"Farewell World\", Exchange.FILE_NAME, \"mysub/mysubsub/farewell.txt\");\n        Thread.sleep(200);\n         File file = new File(getScpPath() + \"/mysub/mysubsub/farewell.txt\");\n         assertFileExists(file.getAbsolutePath());", "fixed": "         String uri = getScpUri() + \"?username=admin&password=admin&knownHostsFile=\" + getKnownHostsFile();\n         template.sendBodyAndHeader(uri, \"Farewell World\", Exchange.FILE_NAME, \"mysub/mysubsub/farewell.txt\");\n        Thread.sleep(500);\n         File file = new File(getScpPath() + \"/mysub/mysubsub/farewell.txt\");\n         assertFileExists(file.getAbsolutePath());", "sourceBeforeFix": "Thread.sleep(200)", "sourceAfterFix": "Thread.sleep(500)"}
{"fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "projectName": "Alluxio.alluxio", "bugType": "Change Operand ", "problem": "   public static void createFiles() throws IOException {\n     long startTimeMs = CommonUtils.getCurrentMs();\n    for (int k = 0; k < THREADS; k ++) {\n       int fileId = MTC.createFile(FILE_NAME + (k + BASE_FILE_NUMBER));\n       CommonUtils.printTimeTakenMs(startTimeMs, LOG, \"user_createFiles with fileId \" + fileId);\n     }", "fixed": "   public static void createFiles() throws IOException {\n     long startTimeMs = CommonUtils.getCurrentMs();\n    for (int k = 0; k < FILES; k++) {\n       int fileId = MTC.createFile(FILE_NAME + (k + BASE_FILE_NUMBER));\n       CommonUtils.printTimeTakenMs(startTimeMs, LOG, \"user_createFiles with fileId \" + fileId);\n     }", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should fail for an invalid object\n \t * @should throw throw APIException if the input is null\n \t */\n\tpublic void validate(Object object, Errors errors) throws APIException;\n \t/**\n \t * Returns a list of locales used by the user when searching.", "fixed": " \t * @should fail for an invalid object\n \t * @should throw throw APIException if the input is null\n \t */\n\tpublic void validate(Object object, Errors errors);\n \t/**\n \t * Returns a list of locales used by the user when searching.", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "6ed3c275fc3f67ecc814a1cb838915661f782f22", "projectName": "wildfly.wildfly", "bugType": "Change Caller in Function Call", "problem": "     @Test\n     public void testNoAuthSingleSignOn(@ArquillianResource URL baseURLNoAuth) throws Exception {\n         log.info(\"+++ testNoAuthSingleSignOn\");\n        SSOBaseCase.executeNoAuthSingleSignOnTest(baseURLNoAuth, baseURLNoAuth, log);\n     }\n }", "fixed": "     @Test\n     public void testNoAuthSingleSignOn(@ArquillianResource URL baseURLNoAuth) throws Exception {\n         log.info(\"+++ testNoAuthSingleSignOn\");\n        SSOTestBase.executeNoAuthSingleSignOnTest(baseURLNoAuth, baseURLNoAuth, log);\n     }\n }", "sourceBeforeFix": "SSOBaseCase.executeFormAuthSingleSignOnTest(baseURLNoAuth,baseURLNoAuth,log)", "sourceAfterFix": "SSOTestBase.executeFormAuthSingleSignOnTest(baseURLNoAuth,baseURLNoAuth,log)"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "                 } else {\n                     statistics.increaseCacheHits(1);\n                 }\n                statistics.addGetTimeNano(System.nanoTime() - start);\n             }\n         }\n     }", "fixed": "                 } else {\n                     statistics.increaseCacheHits(1);\n                 }\n                statistics.addGetTimeNanos(System.nanoTime() - start);\n             }\n         }\n     }", "sourceBeforeFix": "statistics.addGetTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addGetTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "e7d4575d49668d1877d9ecdccb9f5d422b2b1a49", "projectName": "naver.pinpoint", "bugType": "Change Numeric Literal", "problem": "             return -1;\r\n         }\r\n         int newId = nextId();\r\n        if (newId > max) {\r\n             throw new IndexOutOfBoundsException(\"size=\" + index.length + \" id=\" + id);\r\n         }\r", "fixed": "             return -1;\r\n         }\r\n         int newId = nextId();\r\n        if (newId >= max) {\n             throw new IndexOutOfBoundsException(\"size=\" + index.length + \" id=\" + id);\r\n         }\r", "sourceBeforeFix": "DEFAULT_MAX=1024", "sourceAfterFix": "DEFAULT_MAX=4096"}
{"fixCommitSHA1": "55afa119b8685a70ea6335e973814a345e99e2bb", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Change Modifier", "problem": " import java.util.Collections;\n import java.util.List;\nclass Parameters {\n   private List<Parameter> parameters = new ArrayList<>();\n  Parameters add(String key, String value) {\n     parameters.add(new Parameter(key, value));\n     return this;\n   }\n  void reset() {\n     parameters.clear();\n   }", "fixed": " import java.util.Collections;\n import java.util.List;\nfinal class Parameters {\n   private List<Parameter> parameters = new ArrayList<>();\n  public Parameters add(String key, String value) {\n     parameters.add(new Parameter(key, value));\n     return this;\n   }\n  public void reset() {\n     parameters.clear();\n   }", "sourceBeforeFix": "0", "sourceAfterFix": "16"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleActionsPredicatesOptions_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(239);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");", "fixed": " \tpublic void testMultipleActionsPredicatesOptions_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(238);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");", "sourceBeforeFix": "new StringBuilder(239)", "sourceAfterFix": "new StringBuilder(238)"}
{"fixCommitSHA1": "3757a700a89638e5747d966bdaa8266b62c974c8", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "  */\n @GwtCompatible(emulated = true)\n public class BaseEncodingTest extends TestCase {\n  public void assertEquals(byte[] expected, byte[] actual) {\n     assertEquals(expected.length, actual.length);\n     for (int i = 0; i < expected.length; i++) {\n       assertEquals(expected[i], actual[i]);", "fixed": "  */\n @GwtCompatible(emulated = true)\n public class BaseEncodingTest extends TestCase {\n  public static void assertEquals(byte[] expected, byte[] actual) {\n     assertEquals(expected.length, actual.length);\n     for (int i = 0; i < expected.length; i++) {\n       assertEquals(expected[i], actual[i]);", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedJcloudsEndpointBuilder\n             extends\n                 AdvancedJcloudsEndpointConsumerBuilder, AdvancedJcloudsEndpointProducerBuilder {\n         default JcloudsEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedJcloudsEndpointBuilder\n             extends\n                 AdvancedJcloudsEndpointConsumerBuilder, AdvancedJcloudsEndpointProducerBuilder {\n         default JcloudsEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "55ed50c4975cf694828d46ee9ca32ce72a9ef913", "projectName": "clojure.clojure", "bugType": "Wrong Function Name", "problem": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 13:\r\n\t\t\treturn invoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "fixed": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 13:\r\n\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "sourceBeforeFix": "invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())", "sourceAfterFix": "doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())"}
{"fixCommitSHA1": "24749f1b18508de151e892dbb756c721bec29f1b", "projectName": "apache.storm", "bugType": "Same Function Swap Args", "problem": "                 .sessionTimeoutMs(Utils.getInt(conf.get(Config.STORM_ZOOKEEPER_SESSION_TIMEOUT)))\n                 .retryPolicy(new StormBoundedExponentialBackoffRetry(\n                             Utils.getInt(conf.get(Config.STORM_ZOOKEEPER_RETRY_INTERVAL)),\n                            Utils.getInt(conf.get(Config.STORM_ZOOKEEPER_RETRY_TIMES)),\n                            Utils.getInt(conf.get(Config.STORM_ZOOKEEPER_RETRY_INTERVAL_CEILING))));\n         if(auth!=null && auth.scheme!=null) {\n             builder = builder.authorization(auth.scheme, auth.payload);\n         }", "fixed": "                 .sessionTimeoutMs(Utils.getInt(conf.get(Config.STORM_ZOOKEEPER_SESSION_TIMEOUT)))\n                 .retryPolicy(new StormBoundedExponentialBackoffRetry(\n                             Utils.getInt(conf.get(Config.STORM_ZOOKEEPER_RETRY_INTERVAL)),\n                            Utils.getInt(conf.get(Config.STORM_ZOOKEEPER_RETRY_INTERVAL_CEILING)),\n                            Utils.getInt(conf.get(Config.STORM_ZOOKEEPER_RETRY_TIMES))));\n         if(auth!=null && auth.scheme!=null) {\n             builder = builder.authorization(auth.scheme, auth.payload);\n         }", "sourceBeforeFix": "new StormBoundedExponentialBackoffRetry(Utils.getInt(conf.get(Config.STORM_ZOOKEEPER_RETRY_INTERVAL)),Utils.getInt(conf.get(Config.STORM_ZOOKEEPER_RETRY_TIMES)),Utils.getInt(conf.get(Config.STORM_ZOOKEEPER_RETRY_INTERVAL_CEILING)))", "sourceAfterFix": "new StormBoundedExponentialBackoffRetry(Utils.getInt(conf.get(Config.STORM_ZOOKEEPER_RETRY_INTERVAL)),Utils.getInt(conf.get(Config.STORM_ZOOKEEPER_RETRY_INTERVAL_CEILING)),Utils.getInt(conf.get(Config.STORM_ZOOKEEPER_RETRY_TIMES)))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "378e87f1e3bf8b2451ca511668954b707680b843", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "     }\n     \n    String getMessage()\n     {\n         final ResourceBundle bundle =", "fixed": "     }\n     \n    public String getMessage()\n     {\n         final ResourceBundle bundle =", "sourceBeforeFix": "0", "sourceAfterFix": "1"}
{"fixCommitSHA1": "34a77d610669e59e9d5ab77c47908f907806e05f", "projectName": "Alluxio.alluxio", "bugType": "Change Numeric Literal", "problem": "         LsCommand.STATE_FILE_IN_MEMORY, testUser, testUser, files[0].getPermission(),\n         files[0].isFolder());\n     expected +=\n        getLsResultStr(\"/testRoot/testDir\", files[1].getCreationTimeMs(), 0, LsCommand.STATE_FOLDER,\n             testUser, testUser, files[1].getPermission(), files[1].isFolder());\n     expected += getLsResultStr(\"/testRoot/testDir/testFileB\", files[2].getCreationTimeMs(), 20,\n         LsCommand.STATE_FILE_IN_MEMORY, testUser, testUser, files[2].getPermission(),", "fixed": "         LsCommand.STATE_FILE_IN_MEMORY, testUser, testUser, files[0].getPermission(),\n         files[0].isFolder());\n     expected +=\n        getLsResultStr(\"/testRoot/testDir\", files[1].getCreationTimeMs(), 1, LsCommand.STATE_FOLDER,\n             testUser, testUser, files[1].getPermission(), files[1].isFolder());\n     expected += getLsResultStr(\"/testRoot/testDir/testFileB\", files[2].getCreationTimeMs(), 20,\n         LsCommand.STATE_FILE_IN_MEMORY, testUser, testUser, files[2].getPermission(),", "sourceBeforeFix": "getLsResultStr(\"/testRoot/testDir\",files[1].getCreationTimeMs(),0,LsCommand.STATE_FOLDER,testUser,testUser,files[1].getPermission(),files[1].isFolder())", "sourceAfterFix": "getLsResultStr(\"/testRoot/testDir\",files[1].getCreationTimeMs(),1,LsCommand.STATE_FOLDER,testUser,testUser,files[1].getPermission(),files[1].isFolder())"}
{"fixCommitSHA1": "a4662237bc467310f0dc1c28aa621f84571225b1", "projectName": "Activiti.Activiti", "bugType": "Change Numeric Literal", "problem": "     processEngineConfiguration.setClock(testClock);\n    testClock.setCurrentTime(new Date(0));\n     ProcessInstance processInstance = runtimeService.startProcessInstanceByKey(\"testRepetitionJobEvents\");\n     Job theJob = managementService.createJobQuery().processInstanceId(processInstance.getId()).singleResult();\n     assertNotNull(theJob);", "fixed": "     processEngineConfiguration.setClock(testClock);\n    testClock.setCurrentTime(new Date(1));\n     ProcessInstance processInstance = runtimeService.startProcessInstanceByKey(\"testRepetitionJobEvents\");\n     Job theJob = managementService.createJobQuery().processInstanceId(processInstance.getId()).singleResult();\n     assertNotNull(theJob);", "sourceBeforeFix": "new Date(0)", "sourceAfterFix": "new Date(1)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      * @param cause the cause of the error.\n      */\n     @LogMessage(level = Level.WARN)\n    @Message(id = 15806, value = \"Caught exception closing input stream\")\n     void caughtExceptionClosingInputStream(@Cause Throwable cause);\n     /**", "fixed": "      * @param cause the cause of the error.\n      */\n     @LogMessage(level = Level.WARN)\n    @Message(id = 10806, value = \"Caught exception closing input stream\")\n     void caughtExceptionClosingInputStream(@Cause Throwable cause);\n     /**", "sourceBeforeFix": "id=15805", "sourceAfterFix": "id=10805"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "fixed": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "sourceBeforeFix": "GL15.glGetBufferParameter(target,pname,params)", "sourceAfterFix": "GL15.glGetBufferParameteriv(target,pname,params)"}
{"fixCommitSHA1": "e1d89ddbf6028369fd3117ff648fc6f16a1786fe", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "                     managedSpan.deactivate();\n                 }\n             } catch (Throwable t) {\n                LOG.error(\"OpenTracing: Failed to capture tracing data\", t);\n             }\n         }", "fixed": "                     managedSpan.deactivate();\n                 }\n             } catch (Throwable t) {\n                LOG.warn(\"OpenTracing: Failed to capture tracing data\", t);\n             }\n         }", "sourceBeforeFix": "LOG.error(\"OpenTracing: Failed to capture tracing data\",t)", "sourceAfterFix": "LOG.warn(\"OpenTracing: Failed to capture tracing data\",t)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface FtpEndpointBuilder\n             extends\n                 FtpEndpointConsumerBuilder, FtpEndpointProducerBuilder {\n         default AdvancedFtpEndpointBuilder advanced() {", "fixed": "     \n    public interface FtpEndpointBuilder\n             extends\n                 FtpEndpointConsumerBuilder, FtpEndpointProducerBuilder {\n         default AdvancedFtpEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleAlternativesWithCommonLabel_4() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(730);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {System.out.println($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "fixed": " \tpublic void testMultipleAlternativesWithCommonLabel_4() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(729);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {System.out.println($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "sourceBeforeFix": "new StringBuilder(730)", "sourceAfterFix": "new StringBuilder(729)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15861, value = \"Cannot remove deployment %s from the domain as it is still used by server groups %s\")\n     String cannotRemoveDeploymentInUse(String name, List<String> groups);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10861, value = \"Cannot remove deployment %s from the domain as it is still used by server groups %s\")\n     String cannotRemoveDeploymentInUse(String name, List<String> groups);\n     /**", "sourceBeforeFix": "id=15851", "sourceAfterFix": "id=10851"}
{"fixCommitSHA1": "e07a7b8bcd1e3abc3f3ea5559c8c74a6f8f8ccdc", "projectName": "openmrs.openmrs-core", "bugType": "Change Numeric Literal", "problem": " \t\texecuteDataSet(PROGRAM_WITH_OUTCOMES_XML);\r\n \t\tList<Concept> possibleOutcomes = Context.getProgramWorkflowService().getPossibleOutcomes(4);\r\n\t\tassertEquals(2, possibleOutcomes.size());\r\n \t}\r\n \t@Test\r", "fixed": " \t\texecuteDataSet(PROGRAM_WITH_OUTCOMES_XML);\r\n \t\tList<Concept> possibleOutcomes = Context.getProgramWorkflowService().getPossibleOutcomes(4);\r\n\t\tassertEquals(4, possibleOutcomes.size());\r\n \t}\r\n \t@Test\r", "sourceBeforeFix": "assertEquals(2,possibleOutcomes.size())", "sourceAfterFix": "assertEquals(4,possibleOutcomes.size())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedByMe(Paging paging) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedByMe(Paging paging) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "DirectMessage.constructDirectMessages(get(getBaseURL() + \"direct_messages.json\",true))", "sourceAfterFix": "DirectMessage.createDirectMessageList(get(getBaseURL() + \"direct_messages.json\",true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  private final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "b8108a370b039dbeccffad8c9b634f6ac85ed4a5", "projectName": "naver.pinpoint", "bugType": "Change Identifier Used", "problem": "  */\n public class TFAgentStatBatchMapper {\n     private final Logger logger = LoggerFactory.getLogger(this.getClass());\n    public final TFAgentStatMappter tFAgentStatMappter = new TFAgentStatMappter();\n     public TFAgentStatBatch map(AgentStatBo agentStatBo) {\n         try {\n            List<TFAgentStat> tFAgentstatList = tFAgentStatMappter.map(agentStatBo);\n             long startTimestamp = getStartTimestamp(agentStatBo);\n             TFAgentStatBatch tFAgentStatBatch = new TFAgentStatBatch(agentStatBo.getAgentId(), startTimestamp, tFAgentstatList);\n             return tFAgentStatBatch;", "fixed": "  */\n public class TFAgentStatBatchMapper {\n     private final Logger logger = LoggerFactory.getLogger(this.getClass());\n    public final TFAgentStatMapper tFAgentStatMapper = new TFAgentStatMapper();\n     public TFAgentStatBatch map(AgentStatBo agentStatBo) {\n         try {\n            List<TFAgentStat> tFAgentstatList = tFAgentStatMapper.map(agentStatBo);\n             long startTimestamp = getStartTimestamp(agentStatBo);\n             TFAgentStatBatch tFAgentStatBatch = new TFAgentStatBatch(agentStatBo.getAgentId(), startTimestamp, tFAgentstatList);\n             return tFAgentStatBatch;", "sourceBeforeFix": "public final TFAgentStatMappter tFAgentStatMappter=new TFAgentStatMappter(); ", "sourceAfterFix": "public final TFAgentStatMapper tFAgentStatMapper=new TFAgentStatMapper(); "}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "04a010c8499fbc96b1e5a99bdbebaf0b38d24586", "projectName": "libgdx.libgdx", "bugType": "Change Binary Operator", "problem": " \tpublic void addAll (short[] array, int offset, int length) {\r\n \t\tshort[] items = this.items;\r\n \t\tint sizeNeeded = size + length;\r\n\t\tif (sizeNeeded >= items.length) items = resize(Math.max(8, (int)(sizeNeeded * 1.75f)));\r\n \t\tSystem.arraycopy(array, offset, items, size, length);\r\n \t\tsize += length;\r\n \t}\r", "fixed": " \tpublic void addAll (short[] array, int offset, int length) {\r\n \t\tshort[] items = this.items;\r\n \t\tint sizeNeeded = size + length;\r\n\t\tif (sizeNeeded > items.length) items = resize(Math.max(8, (int)(sizeNeeded * 1.75f)));\r\n \t\tSystem.arraycopy(array, offset, items, size, length);\r\n \t\tsize += length;\r\n \t}\r", "sourceBeforeFix": "sizeNeeded >= items.length", "sourceAfterFix": "sizeNeeded > items.length"}
{"fixCommitSHA1": "6b61905020b584c7e2e7bd5b0b059c166cfb05b2", "projectName": "swagger-api.swagger-core", "bugType": "Change Numeric Literal", "problem": "         final ModelImpl model = Json.mapper().readValue(json, ModelImpl.class);\n         assertNotNull(model.getEnum());\n        assertTrue(model.getEnum().size() == 2);\n     }\n }\n\\ No newline at end of file", "fixed": "         final ModelImpl model = Json.mapper().readValue(json, ModelImpl.class);\n         assertNotNull(model.getEnum());\n        assertTrue(model.getEnum().size() == 3);\n     }\n }\n\\ No newline at end of file", "sourceBeforeFix": "model.getEnum().size() == 2", "sourceAfterFix": "model.getEnum().size() == 3"}
{"fixCommitSHA1": "0d28e2c39fb2fb0b3f12716ae5cd7caef3b12b06", "projectName": "Alluxio.alluxio", "bugType": "Change Boolean Literal", "problem": "         for (Inode<?> inode : inodeChildren) {\n           tempInodePath.setDescendant(inode, mInodeTree.getPath(inode));\n          List<Inode<?>> persistedInodes = setAttributeInternal(tempInodePath, true, opTimeMs,\n               options);\n           journalPersistedInodes(persistedInodes);\n           journalSetAttribute(tempInodePath, opTimeMs, options);\n         }\n       }\n     }\n    List<Inode<?>> persistedInodes = setAttributeInternal(inodePath, true, opTimeMs, options);\n     journalPersistedInodes(persistedInodes);\n     return journalSetAttribute(inodePath, opTimeMs, options);\n   }", "fixed": "         for (Inode<?> inode : inodeChildren) {\n           tempInodePath.setDescendant(inode, mInodeTree.getPath(inode));\n          List<Inode<?>> persistedInodes = setAttributeInternal(tempInodePath, false, opTimeMs,\n               options);\n           journalPersistedInodes(persistedInodes);\n           journalSetAttribute(tempInodePath, opTimeMs, options);\n         }\n       }\n     }\n    List<Inode<?>> persistedInodes = setAttributeInternal(inodePath, false, opTimeMs, options);\n     journalPersistedInodes(persistedInodes);\n     return journalSetAttribute(inodePath, opTimeMs, options);\n   }", "sourceBeforeFix": "setAttributeInternal(inodePath,false,entry.getOpTimeMs(),options)", "sourceAfterFix": "setAttributeInternal(inodePath,true,entry.getOpTimeMs(),options)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<Status> getFriendsTimeline() throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\", true));\n     }\n     /**", "fixed": "      */\n     public ResponseList<Status> getFriendsTimeline() throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\", true));\n     }\n     /**", "sourceBeforeFix": "twitter4j.List.constructListOfLists(get(getApiBaseURL() + V1 + user+ \"/lists/subscriptions.json?cursor=\"+ cursor,true))", "sourceAfterFix": "twitter4j.List.createListList(get(getApiBaseURL() + V1 + user+ \"/lists/subscriptions.json?cursor=\"+ cursor,true))"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform1iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform1(location, v);\r\n \t}\r\n \t@Override\r\n \tpublic void glUniform1iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform1(location, toIntBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform2f (int location, float x, float y) {\r", "fixed": " \t}\r\n \tpublic void glUniform1iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform1iv(location, v);\r\n \t}\r\n \t@Override\r\n \tpublic void glUniform1iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform1iv(location, toIntBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform2f (int location, float x, float y) {\r", "sourceBeforeFix": "GL20.glGetVertexAttrib(index,pname,params)", "sourceAfterFix": "GL20.glGetVertexAttribiv(index,pname,params)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15850, value = \"No handler for operation %s at address %s\")\n     String noHandlerForOperation(String operationName, PathAddress address);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10850, value = \"No handler for operation %s at address %s\")\n     String noHandlerForOperation(String operationName, PathAddress address);\n     /**", "sourceBeforeFix": "id=15854", "sourceAfterFix": "id=10854"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_tw() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016/05/06\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_tw() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016/05/06\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15833, value = \"%s is missing %s: %s\")\n     String requiredChildIsMissing(String parent, String child, String parentSpec);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10833, value = \"%s is missing %s: %s\")\n     String requiredChildIsMissing(String parent, String child, String parentSpec);\n     /**", "sourceBeforeFix": "id=15865", "sourceAfterFix": "id=10865"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public List<Trends> getDailyTrends() throws TwitterException {\n        return Trends.constructTrendsList(get(getSearchBaseURL() + \"trends/daily.json\", false));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n      */\n     public List<Trends> getDailyTrends() throws TwitterException {\n        return Trends.createTrendsList(get(getSearchBaseURL() + \"trends/daily.json\", false));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",null,paging.asPostParameterList(),true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",null,paging.asPostParameterList(),true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15849, value = \"Operation %s for address %s can only be handled by the \" +\n             \"master Domain Controller; this host is not the master Domain Controller\")\n     String masterDomainControllerOnlyOperation(String operation, PathAddress address);", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10849, value = \"Operation %s for address %s can only be handled by the \" +\n             \"master Domain Controller; this host is not the master Domain Controller\")\n     String masterDomainControllerOnlyOperation(String operation, PathAddress address);", "sourceBeforeFix": "id=15831", "sourceAfterFix": "id=10831"}
{"fixCommitSHA1": "35dc7982d28800b4fecdf0772236a2d8e054aa77", "projectName": "spring-projects.spring-boot", "bugType": "Change Modifier", "problem": " \t}\n \t@Test\n\tpublic void testHealth() throws Exception {\nString url = \"http:\n \t\tSystem.out.println(url);\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);", "fixed": " \t}\n \t@Test\n\tvoid testHealth() throws Exception {\nString url = \"http:\n \t\tSystem.out.println(url);\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites() throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"favorites.json\", new PostParameter[0], true));\n     }\n     /**", "fixed": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites() throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"favorites.json\", new PostParameter[0], true));\n     }\n     /**", "sourceBeforeFix": "DirectMessage.constructDirectMessages(get(getBaseURL() + \"direct_messages.json\",null,paging.asPostParameterList(),true))", "sourceAfterFix": "DirectMessage.createDirectMessageList(get(getBaseURL() + \"direct_messages.json\",null,paging.asPostParameterList(),true))"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         if (isStatisticsEnabled()) {\n             if (result) {\n                 statistics.increaseCachePuts(1);\n                statistics.addPutTimeNano(System.nanoTime() - start);\n             }\n            statistics.addGetTimeNano(System.nanoTime() - start);\n             if (isHit) {\n                 statistics.increaseCacheHits(1);\n             } else {", "fixed": "         if (isStatisticsEnabled()) {\n             if (result) {\n                 statistics.increaseCachePuts(1);\n                statistics.addPutTimeNanos(System.nanoTime() - start);\n             }\n            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (isHit) {\n                 statistics.increaseCacheHits(1);\n             } else {", "sourceBeforeFix": "statistics.addGetTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addGetTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "             result = updateRecordWithExpiry(key, value, record, localExpiryPolicy, now, false);\n         }\n         if (isStatisticsEnabled()) {\n            statistics.addGetTimeNano(System.nanoTime() - start);\n             if (result) {\n                 statistics.increaseCachePuts(1);\n                 statistics.increaseCacheHits(1);\n                statistics.addPutTimeNano(System.nanoTime() - start);\n             } else {\n                 statistics.increaseCacheMisses(1);\n             }", "fixed": "             result = updateRecordWithExpiry(key, value, record, localExpiryPolicy, now, false);\n         }\n         if (isStatisticsEnabled()) {\n            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (result) {\n                 statistics.increaseCachePuts(1);\n                 statistics.increaseCacheHits(1);\n                statistics.addPutTimeNanos(System.nanoTime() - start);\n             } else {\n                 statistics.increaseCacheMisses(1);\n             }", "sourceBeforeFix": "statistics.addGetTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addGetTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "26604fde31e9f4586c18209285b7b5c3bc80d51e", "projectName": "facebook.presto", "bugType": "Change Modifier", "problem": "         }\n     }\n    private boolean isSchedulingSource(PlanNodeId sourceId)\n     {\n         return !sourceStartOrder.isEmpty() && sourceStartOrder.peek().equals(sourceId);\n     }\n    private void scheduleUnpartitionedSource(TaskSource source, Map<PlanNodeId, TaskSource> updatedUnpartitionedSources)\n     {\n         TaskSource newSource;", "fixed": "         }\n     }\n    private synchronized boolean isSchedulingSource(PlanNodeId sourceId)\n     {\n         return !sourceStartOrder.isEmpty() && sourceStartOrder.peek().equals(sourceId);\n     }\n    private synchronized void scheduleUnpartitionedSource(TaskSource source, Map<PlanNodeId, TaskSource> updatedUnpartitionedSources)\n     {\n         TaskSource newSource;", "sourceBeforeFix": "2", "sourceAfterFix": "34"}
{"fixCommitSHA1": "2706742224ec0e89dee98a7b99e91d4c2853a63c", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": " @InterfaceAudience.Public\n @InterfaceStability.Evolving\n public class OfflineMetaRepair {\n  private static final Log LOG = LogFactory.getLog(HBaseFsck.class.getName());\n   protected static void printUsageAndExit() {\n     StringBuilder sb = new StringBuilder();", "fixed": " @InterfaceAudience.Public\n @InterfaceStability.Evolving\n public class OfflineMetaRepair {\n  private static final Log LOG = LogFactory.getLog(OfflineMetaRepair.class.getName());\n   protected static void printUsageAndExit() {\n     StringBuilder sb = new StringBuilder();", "sourceBeforeFix": "HBaseFsck.class", "sourceAfterFix": "OfflineMetaRepair.class"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface EC2EndpointBuilder\n            extends\n                EndpointProducerBuilder {\n         default AdvancedEC2EndpointBuilder advanced() {\n             return (AdvancedEC2EndpointBuilder) this;\n         }", "fixed": "     \n    public interface EC2EndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedEC2EndpointBuilder advanced() {\n             return (AdvancedEC2EndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "1adccc7a5bdc515f01ae6bd644097ab85336bd84", "projectName": "hazelcast.hazelcast", "bugType": "Same Function More Args", "problem": "         ((NearCachedClientMapProxy) clientMap).addNearCacheInvalidateListener(handler);\n        HazelcastInstance anotherClient = hazelcastFactory.newHazelcastClient();\n         IMap<Object, Object> anotherClientMap = anotherClient.getMap(clientMap.getName());\n         anotherClientMap.evictAll();", "fixed": "         ((NearCachedClientMapProxy) clientMap).addNearCacheInvalidateListener(handler);\n        HazelcastInstance anotherClient = hazelcastFactory.newHazelcastClient(newClientConfig());\n         IMap<Object, Object> anotherClientMap = anotherClient.getMap(clientMap.getName());\n         anotherClientMap.evictAll();", "sourceBeforeFix": "hazelcastFactory.newHazelcastClient()", "sourceAfterFix": "hazelcastFactory.newHazelcastClient(newClientConfig())"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedToMe(Paging paging) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_to_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedToMe(Paging paging) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_to_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n \t * @param toCompare The element to set as the comparison reference.\n \t */\n\tpublic void setReference(T toCompare);\n \t/**\n \t * Checks, whether the given element is equal to the element that has been set as the comparison", "fixed": " \t * \n \t * @param toCompare The element to set as the comparison reference.\n \t */\n\tpublic abstract void setReference(T toCompare);\n \t/**\n \t * Checks, whether the given element is equal to the element that has been set as the comparison", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "f78f74f5a2cf1f73f974487816f998a6e37a9cf1", "projectName": "square.okhttp", "bugType": "Wrong Function Name", "problem": "   }\n   void writeWindowUpdateLater(final int streamId, final long unacknowledgedBytesRead) {\n    executor.submit(new NamedRunnable(\"OkHttp Window Update %s stream %d\", hostName, streamId) {\n       @Override public void execute() {\n         try {\n           frameWriter.windowUpdate(streamId, unacknowledgedBytesRead);", "fixed": "   }\n   void writeWindowUpdateLater(final int streamId, final long unacknowledgedBytesRead) {\n    executor.execute(new NamedRunnable(\"OkHttp Window Update %s stream %d\", hostName, streamId) {\n       @Override public void execute() {\n         try {\n           frameWriter.windowUpdate(streamId, unacknowledgedBytesRead);", "sourceBeforeFix": "executor.submit(new NamedRunnable(\"OkHttp %s ping %08x%08x\",hostName,payload1,payload2){   @Override public void execute(){     try {       writePing(reply,payload1,payload2,ping);     }  catch (    IOException ignored) {     }   } } )", "sourceAfterFix": "executor.execute(new NamedRunnable(\"OkHttp %s ping %08x%08x\",hostName,payload1,payload2){   @Override public void execute(){     try {       writePing(reply,payload1,payload2,ping);     }  catch (    IOException ignored) {     }   } } )"}
{"fixCommitSHA1": "e04cbbf23e9273cca31b1cc12142e34fae753542", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "          * @param nameToFind the name we're looking for\n          * @return whether it was found\n          */\n        LexicalFrame getIfContains(String nameToFind) {\n             LexicalFrame frame = null;\n             if (contains(nameToFind)) {", "fixed": "          * @param nameToFind the name we're looking for\n          * @return whether it was found\n          */\n        private LexicalFrame getIfContains(String nameToFind) {\n             LexicalFrame frame = null;\n             if (contains(nameToFind)) {", "sourceBeforeFix": "0", "sourceAfterFix": "2"}
{"fixCommitSHA1": "f1a7ba261addf3aa2610546d76cdea5ddfd14574", "projectName": "openmrs.openmrs-core", "bugType": "Change Numeric Literal", "problem": " \tpublic void validate_shouldFailValidationIfBirthdateMakesPatient120YearsOldOrOlder() throws Exception {\r\n \t\tPatient p = ps.getPatient(2);\r\n \t\tCalendar c = Calendar.getInstance();\r\n\t\tc.roll(Calendar.YEAR, -120);\r\n \t\tp.setBirthdate(c.getTime());\r\n \t\tShortPatientModel model = new ShortPatientModel(p);\r\n \t\tErrors errors = new BindException(model, \"patientModel\");\r", "fixed": " \tpublic void validate_shouldFailValidationIfBirthdateMakesPatient120YearsOldOrOlder() throws Exception {\r\n \t\tPatient p = ps.getPatient(2);\r\n \t\tCalendar c = Calendar.getInstance();\r\n\t\tc.roll(Calendar.YEAR, -121);\r\n \t\tp.setBirthdate(c.getTime());\r\n \t\tShortPatientModel model = new ShortPatientModel(p);\r\n \t\tErrors errors = new BindException(model, \"patientModel\");\r", "sourceBeforeFix": "-120", "sourceAfterFix": "-121"}
{"fixCommitSHA1": "e981384cc21ca3c1958acd4b494a6ddd147c0a60", "projectName": "wildfly.wildfly", "bugType": "Wrong Function Name", "problem": "             if (ssl.has(CommonAttributes.CIPHER_SUITE))\n                 config.setSslCiphers(ssl.get(CommonAttributes.CIPHER_SUITE).asString());\n             if (ssl.has(CommonAttributes.PROTOCOL))\n                config.setSslKeyAlias(ssl.get(CommonAttributes.PROTOCOL).asString());\n             if (ssl.has(CommonAttributes.CA_CERTIFICATE_FILE))\n                 config.setSslTrustStore(ssl.get(CommonAttributes.CA_CERTIFICATE_FILE).asString());\n             if (ssl.has(CommonAttributes.CA_REVOCATION_URL))", "fixed": "             if (ssl.has(CommonAttributes.CIPHER_SUITE))\n                 config.setSslCiphers(ssl.get(CommonAttributes.CIPHER_SUITE).asString());\n             if (ssl.has(CommonAttributes.PROTOCOL))\n                config.setSslProtocol(ssl.get(CommonAttributes.PROTOCOL).asString());\n             if (ssl.has(CommonAttributes.CA_CERTIFICATE_FILE))\n                 config.setSslTrustStore(ssl.get(CommonAttributes.CA_CERTIFICATE_FILE).asString());\n             if (ssl.has(CommonAttributes.CA_REVOCATION_URL))", "sourceBeforeFix": "config.setProxyList(modelconf.get(CommonAttributes.ADVERTISE_SECURITY_KEY).asString())", "sourceAfterFix": "config.setAdvertiseSecurityKey(modelconf.get(CommonAttributes.ADVERTISE_SECURITY_KEY).asString())"}
{"fixCommitSHA1": "9a861785b36e0b1132737bd8fa1f7caac5a41c87", "projectName": "hazelcast.hazelcast", "bugType": "Change Binary Operator", "problem": "         Thread.sleep(5);\n         replicatedMap.put(key, \"value2\");\n         long lastUpdateTime2 = replicatedMap.getReplicatedMapStats().getLastUpdateTime();\n        assertTrue(lastUpdateTime2 > lastUpdateTime);\n     }\n     @Test", "fixed": "         Thread.sleep(5);\n         replicatedMap.put(key, \"value2\");\n         long lastUpdateTime2 = replicatedMap.getReplicatedMapStats().getLastUpdateTime();\n        assertTrue(lastUpdateTime2 >= lastUpdateTime);\n     }\n     @Test", "sourceBeforeFix": "stats.getLastUpdateTime() > lastUpdateTime", "sourceAfterFix": "stats.getLastUpdateTime() >= lastUpdateTime"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<DirectMessage> getSentDirectMessages(Paging paging) throws\n             TwitterException {\n        return DirectMessage.constructDirectMessages(get(getBaseURL() +\n                 \"direct_messages/sent.json\", new PostParameter[0],\n                 paging.asPostParameterList(), true));\n     }", "fixed": "      */\n     public ResponseList<DirectMessage> getSentDirectMessages(Paging paging) throws\n             TwitterException {\n        return DirectMessage.createDirectMessageList(get(getBaseURL() +\n                 \"direct_messages/sent.json\", new PostParameter[0],\n                 paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/public_timeline.json\",null,new Paging((long)sinceID).asPostParameterList(Paging.S),false))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/public_timeline.json\",null,new Paging((long)sinceID).asPostParameterList(Paging.S),false))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "79946366e1ab141ef2b595e0079dcac7b913da2b", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "         checkConfig.addAttribute(\"matchDirectoryStructure\", \"false\");\n         final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;\n        verify(checkConfig, getPath(\"InputPackageDeclarationDiffDirectoryAtParent.java\"), expected);\n     }\n     @Test", "fixed": "         checkConfig.addAttribute(\"matchDirectoryStructure\", \"false\");\n         final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;\n        verify(checkConfig,\n                getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtParent.java\"),\n                expected);\n     }\n     @Test", "sourceBeforeFix": "getPath(\"InputPackageDeclarationDiffDirectoryAtParent.java\")", "sourceAfterFix": "getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtParent.java\")"}
{"fixCommitSHA1": "2d246f764791db7d2b3fc654c8410b7d51dd83f2", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": " \npublic class Main {\n     ", "fixed": " \npublic final class Main {\n     ", "sourceBeforeFix": "1", "sourceAfterFix": "17"}
{"fixCommitSHA1": "ab9e3d6dccc21be8ca37754617969a86fa568673", "projectName": "google.guice", "bugType": "Change Identifier Used", "problem": " \n public class MapBinderTest extends TestCase {\n  private static final Set<Key<?>> FRAMEWORK_KEYS =\n       ImmutableSet.of(\n           Key.get(java.util.logging.Logger.class), Key.get(Stage.class), Key.get(Injector.class));", "fixed": " \n public class MapBinderTest extends TestCase {\n  private static final ImmutableSet<Key<?>> FRAMEWORK_KEYS =\n       ImmutableSet.of(\n           Key.get(java.util.logging.Logger.class), Key.get(Stage.class), Key.get(Injector.class));", "sourceBeforeFix": "Set<Key<?>>", "sourceAfterFix": "ImmutableSet<Key<?>>"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedGlanceEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default GlanceEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedGlanceEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default GlanceEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedRssEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default RssEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedRssEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default RssEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should return all system information\n \t */\n \t@Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)\n\tpublic Map<String, Map<String, String>> getSystemInformation() throws APIException;\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>.", "fixed": " \t * @should return all system information\n \t */\n \t@Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)\n\tpublic Map<String, Map<String, String>> getSystemInformation();\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>.", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "734c7a8318f516e4825fd72ab53699f96fabbe68", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "     @Test\n     public void testNoConcurrentProducers() throws Exception {\n        Thread.sleep(1000);\n         doSendMessages(1, 1);\n     }", "fixed": "     @Test\n     public void testNoConcurrentProducers() throws Exception {\n        Thread.sleep(2000);\n         doSendMessages(1, 1);\n     }", "sourceBeforeFix": "Thread.sleep(1000)", "sourceAfterFix": "Thread.sleep(2000)"}
{"fixCommitSHA1": "6a6e67b3003df3da728a2366f951b7efe857a6e7", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "     public void testRecipientListParallel() throws Exception {\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedBodiesReceived(\"c\", \"b\", \"a\");\n         template.sendBodyAndHeader(\"direct:start\", \"Hello World\", \"foo\", \"direct:a,direct:b,direct:c\");", "fixed": "     public void testRecipientListParallel() throws Exception {\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedBodiesReceivedInAnyOrder(\"c\", \"b\", \"a\");\n         template.sendBodyAndHeader(\"direct:start\", \"Hello World\", \"foo\", \"direct:a,direct:b,direct:c\");", "sourceBeforeFix": "mock.expectedBodiesReceived(\"c\",\"b\",\"a\")", "sourceAfterFix": "mock.expectedBodiesReceivedInAnyOrder(\"c\",\"b\",\"a\")"}
{"fixCommitSHA1": "10c93df27435ffbc037cde5e6063c9dbc6c0eb3f", "projectName": "facebook.presto", "bugType": "Wrong Function Name", "problem": "         HostAndPort host = HostAndPort.fromString(server);\n         try {\n            return new URI(\"http\", null, host.getHostText(), host.getPortOrDefault(80), null, null, null);\n         }\n         catch (URISyntaxException e) {\n             throw new IllegalArgumentException(e);", "fixed": "         HostAndPort host = HostAndPort.fromString(server);\n         try {\n            return new URI(\"http\", null, host.getHost(), host.getPortOrDefault(80), null, null, null);\n         }\n         catch (URISyntaxException e) {\n             throw new IllegalArgumentException(e);", "sourceBeforeFix": "host.getHostText()", "sourceAfterFix": "host.getHost()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15833, value = \"%s is missing %s: %s\")\n     String requiredChildIsMissing(String parent, String child, String parentSpec);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10833, value = \"%s is missing %s: %s\")\n     String requiredChildIsMissing(String parent, String child, String parentSpec);\n     /**", "sourceBeforeFix": "id=15844", "sourceAfterFix": "id=10844"}
{"fixCommitSHA1": "1adccc7a5bdc515f01ae6bd644097ab85336bd84", "projectName": "hazelcast.hazelcast", "bugType": "Same Function More Args", "problem": "         populateNearCache(clientMap, 1000);\n        HazelcastInstance member = hazelcastFactory.newHazelcastInstance();\n         final ClearEventCounterEventHandler handler = new ClearEventCounterEventHandler();", "fixed": "         populateNearCache(clientMap, 1000);\n        HazelcastInstance member = hazelcastFactory.newHazelcastInstance(newConfig());\n         final ClearEventCounterEventHandler handler = new ClearEventCounterEventHandler();", "sourceBeforeFix": "hazelcastFactory.newHazelcastClient()", "sourceAfterFix": "hazelcastFactory.newHazelcastClient(newClientConfig())"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedToMe(Paging paging) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_to_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedToMe(Paging paging) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_to_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline/\" + id+ \".json\",http.isAuthenticationEnabled()))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline/\" + id+ \".json\",http.isAuthenticationEnabled()))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getUserListStatuses(String user, int id, Paging paging) throws TwitterException {\n        return Status.constructStatuses(get(getApiBaseURL() + V1 + user +\n                 \"/lists/\" + id + \"/statuses.json\", new PostParameter[0],\n                 paging.asPostParameterList(Paging.SMCP, Paging.PER_PAGE), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getUserListStatuses(String user, int id, Paging paging) throws TwitterException {\n        return Status.createStatuseList(get(getApiBaseURL() + V1 + user +\n                 \"/lists/\" + id + \"/statuses.json\", new PostParameter[0],\n                 paging.asPostParameterList(Paging.SMCP, Paging.PER_PAGE), true));\n     }", "sourceBeforeFix": "DirectMessage.constructDirectMessages(get(getBaseURL() + \"direct_messages/sent.json\",new PostParameter[0],true))", "sourceAfterFix": "DirectMessage.createDirectMessageList(get(getBaseURL() + \"direct_messages/sent.json\",new PostParameter[0],true))"}
{"fixCommitSHA1": "6618cef776cf1c9ce67ff8ee461412110ca5ada7", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t\t\t\ttaskManagerQueryServiceGatewaysFuture.whenCompleteAsync(\n \t\t\t\t\t(Collection<Tuple2<ResourceID, String>> queryServiceGateways, Throwable throwable) -> {\n \t\t\t\t\t\tif (throwable != null) {\n\t\t\t\t\t\t\tLOG.warn(\"Requesting TaskManager's path for query services failed.\", throwable);\n \t\t\t\t\t\t} else {\n \t\t\t\t\t\t\tList<String> taskManagersToRetain = queryServiceGateways\n \t\t\t\t\t\t\t\t.stream()", "fixed": " \t\t\t\ttaskManagerQueryServiceGatewaysFuture.whenCompleteAsync(\n \t\t\t\t\t(Collection<Tuple2<ResourceID, String>> queryServiceGateways, Throwable throwable) -> {\n \t\t\t\t\t\tif (throwable != null) {\n\t\t\t\t\t\t\tLOG.debug(\"Requesting TaskManager's path for query services failed.\", throwable);\n \t\t\t\t\t\t} else {\n \t\t\t\t\t\t\tList<String> taskManagersToRetain = queryServiceGateways\n \t\t\t\t\t\t\t\t.stream()", "sourceBeforeFix": "LOG.warn(\"Requesting TaskManager's path for query services failed.\",throwable)", "sourceAfterFix": "LOG.debug(\"Requesting TaskManager's path for query services failed.\",throwable)"}
{"fixCommitSHA1": "7346f16a2b9513dabebfdbec521bbf520ad63d2b", "projectName": "gephi.gephi", "bugType": "Wrong Function Name", "problem": "         Graph graph;\n         if (mDirected) {\n            graph = graphModel.getDirectedGraph();\n         } else {\n            graph = graphModel.getUndirectedGraph();\n         }\n         this.mGraphRevision = \"(\" + graph.getNodeVersion() + \", \" + graph.getEdgeVersion() + \")\";", "fixed": "         Graph graph;\n         if (mDirected) {\n            graph = graphModel.getDirectedGraphVisible();\n         } else {\n            graph = graphModel.getUndirectedGraphVisible();\n         }\n         this.mGraphRevision = \"(\" + graph.getNodeVersion() + \", \" + graph.getEdgeVersion() + \")\";", "sourceBeforeFix": "graphModel.getDirectedGraph()", "sourceAfterFix": "graphModel.getDirectedGraphVisible()"}
{"fixCommitSHA1": "eb51c8806e1e415162b7999c4d9b39e952fccc61", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": "private TypeSerializer<T> serializer;\n\tprivate ClassLoader loader;\n \tprivate Class<T> clazz;", "fixed": "private TypeSerializer<T> serializer;\n\tprivate transient ClassLoader loader;\n \tprivate Class<T> clazz;", "sourceBeforeFix": "2", "sourceAfterFix": "130"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface XsltEndpointBuilder\n            extends\n                EndpointProducerBuilder {\n         default AdvancedXsltEndpointBuilder advanced() {\n             return (AdvancedXsltEndpointBuilder) this;\n         }", "fixed": "     \n    public interface XsltEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedXsltEndpointBuilder advanced() {\n             return (AdvancedXsltEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface WebhookEndpointBuilder\n            extends\n                EndpointConsumerBuilder {\n         default AdvancedWebhookEndpointBuilder advanced() {\n             return (AdvancedWebhookEndpointBuilder) this;\n         }", "fixed": "     \n    public interface WebhookEndpointBuilder extends EndpointConsumerBuilder {\n         default AdvancedWebhookEndpointBuilder advanced() {\n             return (AdvancedWebhookEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "6b7a9eb44a285097eee57a08732ce247ca8e3bc3", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t@Override\n \tpublic <R> R accept(ExpressionVisitor<R> visitor) {\n\t\treturn visitor.visit(this);\n \t}\n \t@Override", "fixed": " \t@Override\n \tpublic <R> R accept(ExpressionVisitor<R> visitor) {\n\t\treturn visitor.visitTypeLiteral(this);\n \t}\n \t@Override", "sourceBeforeFix": "visitor.visit(this)", "sourceAfterFix": "visitor.visitTypeLiteral(this)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites() throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"favorites.json\", new PostParameter[0], true));\n     }\n     /**", "fixed": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites() throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"favorites.json\", new PostParameter[0], true));\n     }\n     /**", "sourceBeforeFix": "twitter4j.List.constructListOfLists(get(getApiBaseURL() + V1 + user+ \"/lists/subscriptions.json?cursor=\"+ cursor,true))", "sourceAfterFix": "twitter4j.List.createListList(get(getApiBaseURL() + V1 + user+ \"/lists/subscriptions.json?cursor=\"+ cursor,true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "88ab3f29c17cb38e01cfa655876b7627558c6de1", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "         Node rhsValue = ref.getNext();\n         Node newName = IR.name(moduleName).srcref(ref);\n        newName.putProp(Node.ORIGINALNAME_PROP, rhsValue);\n         Node parent = ref.getParent();\n         parent.replaceChild(ref, newName);", "fixed": "         Node rhsValue = ref.getNext();\n         Node newName = IR.name(moduleName).srcref(ref);\n        newName.putProp(Node.ORIGINALNAME_PROP, qName);\n         Node parent = ref.getParent();\n         parent.replaceChild(ref, newName);", "sourceBeforeFix": "newName.putProp(Node.ORIGINALNAME_PROP,rhsValue)", "sourceAfterFix": "newName.putProp(Node.ORIGINALNAME_PROP,qName)"}
{"fixCommitSHA1": "18c46487add2b1c32060bb9c1fc8e6e36a3d44b0", "projectName": "Bukkit.Bukkit", "bugType": "Change Numeric Literal", "problem": "                         noTeam.add(sender.getName());\n                     }\n                 } else {\n                    for (int i = 3; i < args.length; i++) {\n                         String playerName = args[i];\n                         OfflinePlayer offlinePlayer;\n                         Player player = Bukkit.getPlayerExact(playerName);", "fixed": "                         noTeam.add(sender.getName());\n                     }\n                 } else {\n                    for (int i = 2; i < args.length; i++) {\n                         String playerName = args[i];\n                         OfflinePlayer offlinePlayer;\n                         Player player = Bukkit.getPlayerExact(playerName);", "sourceBeforeFix": "i=3", "sourceAfterFix": "i=2"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweets(long statusId) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL()\n                 + \"statuses/retweets/\" + statusId + \".json\", true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweets(long statusId) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL()\n                 + \"statuses/retweets/\" + statusId + \".json\", true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites/\" + id+ \".json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites/\" + id+ \".json\",new PostParameter[0],true))"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getUserTimeline(String id) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline/\" + id + \".json\", http.isAuthenticationEnabled()));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getUserTimeline(String id) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline/\" + id + \".json\", http.isAuthenticationEnabled()));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_to_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_to_me.json\",null,true))"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<Status> getHomeTimeline() throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/home_timeline.json\", true));\n     }", "fixed": "      */\n     public ResponseList<Status> getHomeTimeline() throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/home_timeline.json\", true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))"}
{"fixCommitSHA1": "1adccc7a5bdc515f01ae6bd644097ab85336bd84", "projectName": "hazelcast.hazelcast", "bugType": "Same Function More Args", "problem": "         ((NearCachedClientMapProxy) clientMap).addNearCacheInvalidateListener(handler);\n        HazelcastInstance anotherClient = hazelcastFactory.newHazelcastClient();\n         IMap<Object, Object> anotherClientMap = anotherClient.getMap(clientMap.getName());\n         anotherClientMap.loadAll(true);", "fixed": "         ((NearCachedClientMapProxy) clientMap).addNearCacheInvalidateListener(handler);\n        HazelcastInstance anotherClient = hazelcastFactory.newHazelcastClient(newClientConfig());\n         IMap<Object, Object> anotherClientMap = anotherClient.getMap(clientMap.getName());\n         anotherClientMap.loadAll(true);", "sourceBeforeFix": "hazelcastFactory.newHazelcastInstance()", "sourceAfterFix": "hazelcastFactory.newHazelcastInstance(newConfig())"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_4() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(741);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {Console.WriteLine($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "fixed": " \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_4() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(740);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {Console.WriteLine($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "sourceBeforeFix": "new StringBuilder(741)", "sourceAfterFix": "new StringBuilder(740)"}
{"fixCommitSHA1": "92e7da30dab93cf23bcf64084f660426a0d9da85", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \tpublic void read(final Kryo kryo, final Input input) {\n\t\tthis.jobID = kryo.readObjectOrNull(input, JobID.class);\n \t\tthis.jobName = input.readString();", "fixed": " \tpublic void read(final Kryo kryo, final Input input) {\n\t\tthis.jobID = kryo.readObject(input, JobID.class);\n \t\tthis.jobName = input.readString();", "sourceBeforeFix": "kryo.readObjectOrNull(input,JobID.class)", "sourceAfterFix": "kryo.readObject(input,JobID.class)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
