{"fixCommitSHA1": "890fa79f6486f5dbffd3c4270a42b7deceeaa765", "projectName": "facebook.presto", "bugType": "Change Modifier", "problem": "         }\n         @Override\n        public int getQueuedPartitionedSplitCount()\n         {\n             if (taskStateMachine.getState().isDone()) {\n                 return 0;", "fixed": "         }\n         @Override\n        public synchronized int getQueuedPartitionedSplitCount()\n         {\n             if (taskStateMachine.getState().isDone()) {\n                 return 0;", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15856, value = \"Invalid url stream.\")\n     String invalidUrlStream();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10856, value = \"Invalid url stream.\")\n     String invalidUrlStream();\n     /**", "sourceBeforeFix": "id=15837", "sourceAfterFix": "id=10837"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface TwitterTimelineEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedTwitterTimelineEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface TwitterTimelineEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedTwitterTimelineEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedJCacheEndpointBuilder\n             extends\n                 AdvancedJCacheEndpointConsumerBuilder, AdvancedJCacheEndpointProducerBuilder {\n         default JCacheEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedJCacheEndpointBuilder\n             extends\n                 AdvancedJCacheEndpointConsumerBuilder, AdvancedJCacheEndpointProducerBuilder {\n         default JCacheEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 15830, value = \"Registration of remote hosts is not supported on slave host controllers\")\n     String slaveControllerCannotAcceptOtherSlaves();\n     /**", "fixed": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 10830, value = \"Registration of remote hosts is not supported on slave host controllers\")\n     String slaveControllerCannotAcceptOtherSlaves();\n     /**", "sourceBeforeFix": "id=15842", "sourceAfterFix": "id=10842"}
{"fixCommitSHA1": "f3a240337ca4534b2a61fc9f004b56472c0e1371", "projectName": "openhab.openhab", "bugType": "Change Identifier Used", "problem": "       logger\n           .error(\n              \"database connection error may be wrong password, username or dbname: {}\",\n               e.getMessage());\n     }\n   }", "fixed": "       logger\n           .error(\n              \"database error: {}\",\n               e.getMessage());\n     }\n   }", "sourceBeforeFix": "logger.error(\"Configuration for influxdb not yet loaded or broken.\")", "sourceAfterFix": "logger.warn(\"Configuration for influxdb not yet loaded or broken.\")"}
{"fixCommitSHA1": "55ed50c4975cf694828d46ee9ca32ce72a9ef913", "projectName": "clojure.clojure", "bugType": "Change Identifier Used", "problem": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 14:\r\n\t\t\treturn invoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "fixed": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 14:\r\n\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "sourceBeforeFix": "invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())", "sourceAfterFix": "doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())"}
{"fixCommitSHA1": "9599bfd5699ae2d525a016592eb5de3f7dd681b9", "projectName": "netty.netty", "bugType": "Change Identifier Used", "problem": "     }\n     private void invokeExceptionCaught0(Throwable cause) {\n        ChannelStateHandler handler = (ChannelStateHandler) handler();\n         try {\n             handler.exceptionCaught(this, cause);\n         } catch (Throwable t) {", "fixed": "     }\n     private void invokeExceptionCaught0(Throwable cause) {\n        ChannelHandler handler = handler();\n         try {\n             handler.exceptionCaught(this, cause);\n         } catch (Throwable t) {", "sourceBeforeFix": "ChannelStateHandler handler=(ChannelStateHandler)handler(); ", "sourceAfterFix": "ChannelHandler handler=handler(); "}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites(String id) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"favorites/\" + id + \".json\", new PostParameter[0], true));\n     }\n     /**", "fixed": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites(String id) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"favorites/\" + id + \".json\", new PostParameter[0], true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\",null,paging.asPostParameterList(),true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\",null,paging.asPostParameterList(),true))"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleActionsPredicatesOptions_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(239);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");", "fixed": " \tpublic void testMultipleActionsPredicatesOptions_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(238);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");", "sourceBeforeFix": "new StringBuilder(239)", "sourceAfterFix": "new StringBuilder(238)"}
{"fixCommitSHA1": "b3f9135548ce836c0480bbf1dfe3b358904c1b86", "projectName": "facebook.presto", "bugType": "Change Modifier", "problem": "         assertInvalidFunction(\"ARRAY_SORT(ARRAY[color('red'), color('blue')])\", FUNCTION_NOT_FOUND);\n     }\n    @Test void testDistinct()\n             throws Exception\n     {\n         assertFunction(\"ARRAY_DISTINCT(ARRAY [])\", new ArrayType(UNKNOWN), ImmutableList.of());", "fixed": "         assertInvalidFunction(\"ARRAY_SORT(ARRAY[color('red'), color('blue')])\", FUNCTION_NOT_FOUND);\n     }\n    @Test\n    public void testDistinct()\n             throws Exception\n     {\n         assertFunction(\"ARRAY_DISTINCT(ARRAY [])\", new ArrayType(UNKNOWN), ImmutableList.of());", "sourceBeforeFix": "0", "sourceAfterFix": "1"}
{"fixCommitSHA1": "1dd50dfae2c7d4853f7d04351d8cbfc77cfc922f", "projectName": "dropwizard.dropwizard", "bugType": "Change Numeric Literal", "problem": "     @NotNull\n     @JsonProperty\n    private Size requestBufferSize = Size.kilobytes(32);\n     @NotNull\n     @JsonProperty\n    private Size requestHeaderBufferSize = Size.kilobytes(3);\n     @NotNull\n     @JsonProperty", "fixed": "     @NotNull\n     @JsonProperty\n    private Size requestBufferSize = Size.kilobytes(16);\n     @NotNull\n     @JsonProperty\n    private Size requestHeaderBufferSize = Size.kilobytes(6);\n     @NotNull\n     @JsonProperty", "sourceBeforeFix": "Size.kilobytes(32)", "sourceAfterFix": "Size.kilobytes(16)"}
{"fixCommitSHA1": "540a344557f0e7819dbddaff77b36df823b356bd", "projectName": "mybatis.mybatis-3", "bugType": "Change Modifier", "problem": " /**\n *    Copyright 2009-2016 the original author or authors.\n  *\n  *    Licensed under the Apache License, Version 2.0 (the \"License\");\n  *    you may not use this file except in compliance with the License.", "fixed": " /**\n *    Copyright 2009-2017 the original author or authors.\n  *\n  *    Licensed under the Apache License, Version 2.0 (the \"License\");\n  *    you may not use this file except in compliance with the License.", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "a6dc024ed1176e0a4c523b1a64e8e907e1394d7b", "projectName": "openhab.openhab", "bugType": "Change Identifier Used", "problem": "     \t\t}\n     \t\trecvQueue.add(recvMessage);\n\t\t\tlogger.trace(\"Receive queue ADD: Length={}\", recvQueue.size());\n         }\n \t\t/**", "fixed": "     \t\t}\n     \t\trecvQueue.add(recvMessage);\n\t\t\tlogger.debug(\"Receive queue ADD: Length={}\", recvQueue.size());\n         }\n \t\t/**", "sourceBeforeFix": "logger.trace(\"Receive queue ADD: Length={}\",recvQueue.size())", "sourceAfterFix": "logger.debug(\"Receive queue ADD: Length={}\",recvQueue.size())"}
{"fixCommitSHA1": "d2314c583d3463e3fa020e9d42aecf91b55c582c", "projectName": "apache.hadoop", "bugType": "Wrong Function Name", "problem": "   private void setTrackingUrlToRMAppPage() {\n     originalTrackingUrl = pjoin(\n        WebAppUtils.getResolvedRMWebAppURLWithoutScheme(conf),\n         \"cluster\", \"app\", getAppAttemptId().getApplicationId());\n     proxiedTrackingUrl = originalTrackingUrl;\n   }", "fixed": "   private void setTrackingUrlToRMAppPage() {\n     originalTrackingUrl = pjoin(\n        WebAppUtils.getResolvedRMWebAppURLWithScheme(conf),\n         \"cluster\", \"app\", getAppAttemptId().getApplicationId());\n     proxiedTrackingUrl = originalTrackingUrl;\n   }", "sourceBeforeFix": "WebAppUtils.getResolvedRMWebAppURLWithoutScheme(conf)", "sourceAfterFix": "WebAppUtils.getResolvedRMWebAppURLWithScheme(conf)"}
{"fixCommitSHA1": "1b93a2f8d9a40a28615c3acc0c6415d678e26466", "projectName": "facebook.presto", "bugType": "Change Identifier Used", "problem": "         failureCause.compareAndSet(null, toFailure(throwable));\n         boolean failed = queryState.setIf(FAILED, currentState -> !currentState.isDone());\n         if (failed) {\n            log.error(throwable, \"Query %s failed\", queryId);\n         }\n         else {\n             log.debug(throwable, \"Failure after query %s finished\", queryId);", "fixed": "         failureCause.compareAndSet(null, toFailure(throwable));\n         boolean failed = queryState.setIf(FAILED, currentState -> !currentState.isDone());\n         if (failed) {\n            log.debug(throwable, \"Query %s failed\", queryId);\n         }\n         else {\n             log.debug(throwable, \"Failure after query %s finished\", queryId);", "sourceBeforeFix": "log.error(throwable,\"Query %s failed\",queryId)", "sourceAfterFix": "log.debug(throwable,\"Query %s failed\",queryId)"}
{"fixCommitSHA1": "30c46ed134b6660f4099973832074ab809ffa0d1", "projectName": "apache.flink", "bugType": "Wrong Function Name", "problem": " \t\tString name = NettyConfig.CLIENT_THREAD_GROUP_NAME + \" (\" + config.getServerPort() + \")\";\n\t\tEpollEventLoopGroup epollGroup = new EpollEventLoopGroup(config.getServerNumThreads(), NettyServer.getNamedThreadFactory(name));\n \t\tbootstrap.group(epollGroup).channel(EpollSocketChannel.class);\n \t}", "fixed": " \t\tString name = NettyConfig.CLIENT_THREAD_GROUP_NAME + \" (\" + config.getServerPort() + \")\";\n\t\tEpollEventLoopGroup epollGroup = new EpollEventLoopGroup(config.getClientNumThreads(), NettyServer.getNamedThreadFactory(name));\n \t\tbootstrap.group(epollGroup).channel(EpollSocketChannel.class);\n \t}", "sourceBeforeFix": "config.getServerNumThreads()", "sourceAfterFix": "config.getClientNumThreads()"}
{"fixCommitSHA1": "0d0ab352fa9a8ac9cb2dcb543ba1705a4e187eb1", "projectName": "openhab.openhab", "bugType": "Change Identifier Used", "problem": "                 if (batteryLevel == 255) {\n                     batteryLevel = 0;\n                     batteryLow = true;\n                    logger.warn(\"NODE {}: BATTERY LOW!\", this.getNode().getNodeId());\n                 } else {\n                     batteryLow = false;\n                 }", "fixed": "                 if (batteryLevel == 255) {\n                     batteryLevel = 0;\n                     batteryLow = true;\n                    logger.debug(\"NODE {}: BATTERY LOW!\", this.getNode().getNodeId());\n                 } else {\n                     batteryLow = false;\n                 }", "sourceBeforeFix": "logger.warn(\"NODE {}: BATTERY LOW!\",this.getNode().getNodeId())", "sourceAfterFix": "logger.debug(\"NODE {}: BATTERY LOW!\",this.getNode().getNodeId())"}
{"fixCommitSHA1": "55ed50c4975cf694828d46ee9ca32ce72a9ef913", "projectName": "clojure.clojure", "bugType": "Change Identifier Used", "problem": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 17:\r\n\t\t\treturn invoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "fixed": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 17:\r\n\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "sourceBeforeFix": "invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())", "sourceAfterFix": "doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())"}
{"fixCommitSHA1": "013bd22eb4848763ee8281e51109b6e98e071cdf", "projectName": "dropwizard.dropwizard", "bugType": "Change Modifier", "problem": "         when(uriInfo.getMatchedResourceMethod()).thenReturn(resourceMethod);\n     }\n    private boolean methodDefinedOnInterface(String methodName, Method[] methods) {\n         for (Method method : methods) {\n             if (method.getName().equals(methodName)) {\n                 return true;", "fixed": "         when(uriInfo.getMatchedResourceMethod()).thenReturn(resourceMethod);\n     }\n    private static boolean methodDefinedOnInterface(String methodName, Method[] methods) {\n         for (Method method : methods) {\n             if (method.getName().equals(methodName)) {\n                 return true;", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedDozerEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default DozerEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedDozerEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default DozerEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform3(location, v);\r\n \t}\r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform3(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r", "fixed": " \t}\r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform3iv(location, v);\r\n \t}\r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform3iv(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r", "sourceBeforeFix": "GL20.glGetVertexAttrib(index,pname,params)", "sourceAfterFix": "GL20.glGetVertexAttribfv(index,pname,params)"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should return all system information\n \t */\n \t@Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)\n\tpublic Map<String, Map<String, String>> getSystemInformation() throws APIException;\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>.", "fixed": " \t * @should return all system information\n \t */\n \t@Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)\n\tpublic Map<String, Map<String, String>> getSystemInformation();\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>.", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleAlternativesWithCommonLabel_1() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(561);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "fixed": " \tpublic void testMultipleAlternativesWithCommonLabel_1() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(560);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "sourceBeforeFix": "new StringBuilder(561)", "sourceAfterFix": "new StringBuilder(560)"}
{"fixCommitSHA1": "55afb8268fa23107749ab8fc0feac49724afe751", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "      *\n      * @param resource the resource\n      */\n    public ResourceInternal(T resource) {\n       mResource = resource;\n       mLastAccessTimeMs = mClock.millis();\n     }", "fixed": "      *\n      * @param resource the resource\n      */\n    public ResourceInternal(R resource) {\n       mResource = resource;\n       mLastAccessTimeMs = mClock.millis();\n     }", "sourceBeforeFix": "/**   * The resource.   */ private T mResource; ", "sourceAfterFix": "/**   * The resource.   */ private R mResource; "}
{"fixCommitSHA1": "96961c021dc60e796dbf823d29db5f62c70356b7", "projectName": "yusuke.twitter4j", "bugType": "Change Caller in Function Call", "problem": "         numberId = p.getProperty(\"numberid.user\");\n         numberPass = p.getProperty(\"numberid.password\");\n        numberIdId = Integer.valueOf(p.getProperty(\"numberid.id\"));\n         twitter1 = new TwitterFactory(conf1).getInstance();", "fixed": "         numberId = p.getProperty(\"numberid.user\");\n         numberPass = p.getProperty(\"numberid.password\");\n        numberIdId = Long.valueOf(p.getProperty(\"numberid.id\"));\n         twitter1 = new TwitterFactory(conf1).getInstance();", "sourceBeforeFix": "Integer.valueOf(p.getProperty(\"numberid.id\"))", "sourceAfterFix": "Long.valueOf(p.getProperty(\"numberid.id\"))"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "             }\n         }\n         if (isStatisticsEnabled()) {\n            statistics.addGetTimeNano(System.nanoTime() - start);\n         }\n         CacheEntryProcessorEntry entry = new CacheEntryProcessorEntry(key, record, this, now);\n         final Object process = entryProcessor.process(entry, arguments);", "fixed": "             }\n         }\n         if (isStatisticsEnabled()) {\n            statistics.addGetTimeNanos(System.nanoTime() - start);\n         }\n         CacheEntryProcessorEntry entry = new CacheEntryProcessorEntry(key, record, this, now);\n         final Object process = entryProcessor.process(entry, arguments);", "sourceBeforeFix": "statistics.addGetTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addGetTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "219647385ab87ee13107a9f4e571964f5527ebf5", "projectName": "netty.netty", "bugType": "Missing Throws Exception", "problem": "     \n    public void channelIdle(ChannelHandlerContext ctx, IdleStateEvent e) {\n         ctx.sendUpstream(e);\n     }\n }", "fixed": "     \n    public void channelIdle(ChannelHandlerContext ctx, IdleStateEvent e) throws Exception {\n         ctx.sendUpstream(e);\n     }\n }", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15858, value = \"No deployment content with hash %s is available in the deployment content repository.\")\n     String noDeploymentContentWithHash(String hash);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10858, value = \"No deployment content with hash %s is available in the deployment content repository.\")\n     String noDeploymentContentWithHash(String hash);\n     /**", "sourceBeforeFix": "id=15840", "sourceAfterFix": "id=10840"}
{"fixCommitSHA1": "5ac2955ff4451c72db1e157dda76786f30511679", "projectName": "eclipse.vert.x", "bugType": "Change Numeric Literal", "problem": "     int receiverBufferSize = TestUtils.randomPortInt();\n     Random rand = new Random();\n     boolean reuseAddress = rand.nextBoolean();\n    int trafficClass = TestUtils.randomByte() + 127;\n     boolean tcpNoDelay = rand.nextBoolean();\n     boolean tcpKeepAlive = rand.nextBoolean();\n     int soLinger = TestUtils.randomPositiveInt();", "fixed": "     int receiverBufferSize = TestUtils.randomPortInt();\n     Random rand = new Random();\n     boolean reuseAddress = rand.nextBoolean();\n    int trafficClass = TestUtils.randomByte() + 128;\n     boolean tcpNoDelay = rand.nextBoolean();\n     boolean tcpKeepAlive = rand.nextBoolean();\n     int soLinger = TestUtils.randomPositiveInt();", "sourceBeforeFix": "TestUtils.randomByte() + 127", "sourceAfterFix": "TestUtils.randomByte() + 128"}
