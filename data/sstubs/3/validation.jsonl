{"fixCommitSHA1": "7d6e8e06aac1ca273f180c38456922e77443811b", "projectName": "hazelcast.hazelcast", "bugType": "Change Numeric Literal", "problem": "      */\n     @Test\n     public void async_whenMultipleAndThenOnSameFuture() throws Exception {\n        int callTimeout = 1000;\n         Config config = new Config().setProperty(OPERATION_CALL_TIMEOUT_MILLIS.getName(), \"\" + callTimeout);\n         TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(2);", "fixed": "      */\n     @Test\n     public void async_whenMultipleAndThenOnSameFuture() throws Exception {\n        int callTimeout = 5000;\n         Config config = new Config().setProperty(OPERATION_CALL_TIMEOUT_MILLIS.getName(), \"\" + callTimeout);\n         TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(2);", "sourceBeforeFix": "callTimeout=1000", "sourceAfterFix": "callTimeout=5000"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15862, value = \"Invalid '%s' value: %d, the maximum index is %d\")\n     String invalidValue(String name, int value, int maxIndex);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10862, value = \"Invalid '%s' value: %d, the maximum index is %d\")\n     String invalidValue(String name, int value, int maxIndex);\n     /**", "sourceBeforeFix": "id=15851", "sourceAfterFix": "id=10851"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedKubernetesServicesEndpointBuilder\n             extends\n                 AdvancedKubernetesServicesEndpointConsumerBuilder, AdvancedKubernetesServicesEndpointProducerBuilder {\n         default KubernetesServicesEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedKubernetesServicesEndpointBuilder\n             extends\n                 AdvancedKubernetesServicesEndpointConsumerBuilder, AdvancedKubernetesServicesEndpointProducerBuilder {\n         default KubernetesServicesEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedSpringBatchEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default SpringBatchEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedSpringBatchEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default SpringBatchEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getUserListStatuses(String user, int id, Paging paging) throws TwitterException {\n        return Status.constructStatuses(get(getApiBaseURL() + V1 + user +\n                 \"/lists/\" + id + \"/statuses.json\", new PostParameter[0],\n                 paging.asPostParameterList(Paging.SMCP, Paging.PER_PAGE), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getUserListStatuses(String user, int id, Paging paging) throws TwitterException {\n        return Status.createStatuseList(get(getApiBaseURL() + V1 + user +\n                 \"/lists/\" + id + \"/statuses.json\", new PostParameter[0],\n                 paging.asPostParameterList(Paging.SMCP, Paging.PER_PAGE), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline.json\",null,paging.asPostParameterList(),true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline.json\",null,paging.asPostParameterList(),true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "26f1133593498a87216f0dd4954ff7c07313b740", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "    * Expects the JS to generate one bad-read warning.\n    */\n   private void assertRedeclare(String js) {\n    testWarning(js, VariableReferenceCheck.REDECLARED_VARIABLE);\n   }\n   /**", "fixed": "    * Expects the JS to generate one bad-read warning.\n    */\n   private void assertRedeclare(String js) {\n    testError(js, VariableReferenceCheck.REDECLARED_VARIABLE);\n   }\n   /**", "sourceBeforeFix": "testWarning(js,VariableReferenceCheck.REDECLARED_VARIABLE)", "sourceAfterFix": "testError(js,VariableReferenceCheck.REDECLARED_VARIABLE)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15847, value = \"Interrupted waiting for result from host %s\")\n     String interruptedAwaitingResultFromHost(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10847, value = \"Interrupted waiting for result from host %s\")\n     String interruptedAwaitingResultFromHost(String name);\n     /**", "sourceBeforeFix": "id=15830", "sourceAfterFix": "id=10830"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<DirectMessage> getSentDirectMessages(Paging paging) throws\n             TwitterException {\n        return DirectMessage.constructDirectMessages(get(getBaseURL() +\n                 \"direct_messages/sent.json\", new PostParameter[0],\n                 paging.asPostParameterList(), true));\n     }", "fixed": "      */\n     public ResponseList<DirectMessage> getSentDirectMessages(Paging paging) throws\n             TwitterException {\n        return DirectMessage.createDirectMessageList(get(getBaseURL() +\n                 \"direct_messages/sent.json\", new PostParameter[0],\n                 paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "9e6f96dbfc8bf1ae1ffbe0115f53f1de0fc86ffc", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         }\n         doRemoveRecord(key, source);\n         if (isEventsEnabled()) {\n            publishEvent(createCacheExpiredEvent(key, toEventData(record), CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                  origin, IGNORE_COMPLETION));\n         }\n         return true;", "fixed": "         }\n         doRemoveRecord(key, source);\n         if (isEventsEnabled()) {\n            publishEvent(createCacheExpiredEvent(toEventData(key), toEventData(record),\n                                                 CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                  origin, IGNORE_COMPLETION));\n         }\n         return true;", "sourceBeforeFix": "toHeapData(key)", "sourceAfterFix": "toEventData(key)"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "         if (isStatisticsEnabled()) {\n             if (isPutSucceed) {\n                 statistics.increaseCachePuts(1);\n                statistics.addPutTimeNano(System.nanoTime() - start);\n             }\n             if (getValue) {\n                 if (oldValueNull) {", "fixed": "         if (isStatisticsEnabled()) {\n             if (isPutSucceed) {\n                 statistics.increaseCachePuts(1);\n                statistics.addPutTimeNanos(System.nanoTime() - start);\n             }\n             if (getValue) {\n                 if (oldValueNull) {", "sourceBeforeFix": "statistics.addGetTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addGetTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "fixed": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniformfv(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniformiv(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "sourceBeforeFix": "GL20.glUniformMatrix2(location,transpose,value)", "sourceAfterFix": "GL20.glUniformMatrix2fv(location,transpose,value)"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     @ApiOperation(value = \"To test special tags\", notes = \"To test special tags\", tags={ \"$another-fake?\" })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Client.class) })\n    Client testSpecialTags(@Valid Client body);\n }", "fixed": "     @ApiOperation(value = \"To test special tags\", notes = \"To test special tags\", tags={ \"$another-fake?\" })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Client.class) })\n    Client testSpecialTags(@Valid Client body) throws Exception;\n }", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "787e87270e6cf8aca4728e3c938e6ee2f8c11fca", "projectName": "square.okhttp", "bugType": "Change Numeric Literal", "problem": "     assertThat(cookie.getCommentURL()).isNull();\n     assertThat(cookie.getDiscard()).isFalse();\n    assertThat((double) cookie.getMaxAge()).isCloseTo(60.0, offset(1.0));\n     assertThat(cookie.getPath()).isEqualTo(\"/path\");\n     assertThat(cookie.getSecure()).isTrue();\n   }", "fixed": "     assertThat(cookie.getCommentURL()).isNull();\n     assertThat(cookie.getDiscard()).isFalse();\n    assertThat((double) cookie.getMaxAge()).isCloseTo(60.0, offset(5.0));\n     assertThat(cookie.getPath()).isEqualTo(\"/path\");\n     assertThat(cookie.getSecure()).isTrue();\n   }", "sourceBeforeFix": "offset(1.0)", "sourceAfterFix": "offset(5.0)"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsCsv(String path, int batchSize, OUT endTuple) {\n \t\tif (this instanceof SingleOutputStreamOperator) {\n \t\t\t((SingleOutputStreamOperator<?, ?>) this).setMutability(false);\n \t\t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsCsv(String path, int batchSize, OUT endTuple) {\n \t\tif (this instanceof SingleOutputStreamOperator) {\n \t\t\t((SingleOutputStreamOperator<?, ?>) this).setMutability(false);\n \t\t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "1c93b2a8d7e7dc8d7a1620c5566e7eb20df8f0ec", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         long taken = watch.stop();\n         assertEquals(taken, watch.taken());\n        assertTrue(\"Should take approx 200 millis, was: \" + taken, taken > 190);\n     }\n     public void testStopWatchNotStarted() throws Exception {", "fixed": "         long taken = watch.stop();\n         assertEquals(taken, watch.taken());\n        assertTrue(\"Should take approx 200 millis, was: \" + taken, taken > 150);\n     }\n     public void testStopWatchNotStarted() throws Exception {", "sourceBeforeFix": "taken > 190", "sourceAfterFix": "taken > 150"}
{"fixCommitSHA1": "98a8875db1735c4a60bf1989fd727217a739baf0", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "template.sendBodyAndHeader(\"file:\n         MockEndpoint mock = getMockEndpoint(\"mock:result3\");\n        mock.expectedBodiesReceived(\"Hello World 2\", \"Hello World 4\");\n         assertMockEndpointsSatisfied();\n         oneExchangeDone.matchesMockWaitTime();", "fixed": "template.sendBodyAndHeader(\"file:\n         MockEndpoint mock = getMockEndpoint(\"mock:result3\");\n        mock.expectedBodiesReceivedInAnyOrder(\"Hello World 2\", \"Hello World 4\");\n         assertMockEndpointsSatisfied();\n         oneExchangeDone.matchesMockWaitTime();", "sourceBeforeFix": "mock.expectedBodiesReceived(\"Hello World 2\")", "sourceAfterFix": "mock.expectedBodiesReceivedInAnyOrder(\"Hello World 2\")"}
{"fixCommitSHA1": "79946366e1ab141ef2b595e0079dcac7b913da2b", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "         final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;\n         verify(checkConfig,\n                getPath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\"), expected);\n     }\n     @Test", "fixed": "         final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;\n         verify(checkConfig,\n                getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\"),\n                expected);\n     }\n     @Test", "sourceBeforeFix": "getPath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\")", "sourceAfterFix": "getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\")"}
{"fixCommitSHA1": "40e6bbe55f7141bd66a52261e108a1f3b575ca6f", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "                 obj = null;\n                 removed = false;\n                 if (isEventsEnabled()) {\n                    publishEvent(createCacheCompleteEvent(key, CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                           origin, completionId));\n                 }\n             } else {", "fixed": "                 obj = null;\n                 removed = false;\n                 if (isEventsEnabled()) {\n                    publishEvent(createCacheCompleteEvent(toEventData(key), CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                           origin, completionId));\n                 }\n             } else {", "sourceBeforeFix": "toHeapData(key)", "sourceAfterFix": "toEventData(key)"}
{"fixCommitSHA1": "febea8d12b9e1df1e9239101d23fa0f8c5dd6dfd", "projectName": "Activiti.Activiti", "bugType": "Wrong Function Name", "problem": "   @Deployment\n   public void testParallelSubProcessCompletionCondition() {\n     String procId = runtimeService.startProcessInstanceByKey(\"miParallelSubprocessCompletionCondition\").getId();\n    List<Task> tasks = taskService.createTaskQuery().orderByTaskId().asc().list();\n     assertEquals(4, tasks.size());\n     for (int i=0; i<2; i++) {", "fixed": "   @Deployment\n   public void testParallelSubProcessCompletionCondition() {\n     String procId = runtimeService.startProcessInstanceByKey(\"miParallelSubprocessCompletionCondition\").getId();\n    List<Task> tasks = taskService.createTaskQuery().orderByExecutionId().asc().list();\n     assertEquals(4, tasks.size());\n     for (int i=0; i<2; i++) {", "sourceBeforeFix": "taskService.createTaskQuery().orderByTaskId()", "sourceAfterFix": "taskService.createTaskQuery().orderByExecutionId()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  private final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "46941b16a30e493238924701f938cbf3318eb355", "projectName": "Alluxio.alluxio", "bugType": "Same Function More Args", "problem": "    * @return the number of blocks\n    */\n   public int getNumberOfBlocks() {\n    Preconditions.checkNotNull(mBlockIdsOnTiers);\n     int numberOfBlocks = 0;\n     for (List<Long> blockIds : mBlockIdsOnTiers.values()) {", "fixed": "    * @return the number of blocks\n    */\n   public int getNumberOfBlocks() {\n    Preconditions.checkNotNull(mBlockIdsOnTiers, \"mBlockIdsOnTiers\");\n     int numberOfBlocks = 0;\n     for (List<Long> blockIds : mBlockIdsOnTiers.values()) {", "sourceBeforeFix": "Preconditions.checkNotNull(mBlockIdsOnTiers)", "sourceAfterFix": "Preconditions.checkNotNull(mBlockIdsOnTiers,\"mBlockIdsOnTiers\")"}
{"fixCommitSHA1": "19dac46f389eff0af027d9d11176db6eec0cdbc3", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "         MBeanServerPlugin delegate = null;\n         final boolean readOnly = false;\n         try {\n            delegate = findDelegate(name);\n             if (delegate.shouldAuthorize()) {\n                 authorizeSensitiveOperation(CREATE_MBEAN, readOnly, true);\n             }", "fixed": "         MBeanServerPlugin delegate = null;\n         final boolean readOnly = false;\n         try {\n            delegate = findDelegateForNewObject(name);\n             if (delegate.shouldAuthorize()) {\n                 authorizeSensitiveOperation(CREATE_MBEAN, readOnly, true);\n             }", "sourceBeforeFix": "findDelegate(name)", "sourceAfterFix": "findDelegateForNewObject(name)"}
{"fixCommitSHA1": "2921e7bf0d74a65fdcc71d3ce3053037d14e4d44", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "             if (timeout == null) {\n                 println(lock.tryLock());\n             } else {\n                long time = Long.valueOf(timeout);\n                 try {\n                     println(lock.tryLock(time, TimeUnit.SECONDS));\n                 } catch (InterruptedException e) {", "fixed": "             if (timeout == null) {\n                 println(lock.tryLock());\n             } else {\n                long time = Long.parseLong(timeout);\n                 try {\n                     println(lock.tryLock(time, TimeUnit.SECONDS));\n                 } catch (InterruptedException e) {", "sourceBeforeFix": "Long.valueOf(args[2])", "sourceAfterFix": "Long.parseLong(args[2])"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface ServerEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedServerEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface ServerEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedServerEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "1d5647b92215f0ceabced59275225ad829061663", "projectName": "spring-projects.spring-boot", "bugType": "Change Modifier", "problem": " \tprivate int port = Integer.valueOf(System.getProperty(\"port\"));\n \t@Test\n\tpublic void testHome() throws Exception {\nString url = \"http:\n \t\tSystem.out.println(url);\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);", "fixed": " \tprivate int port = Integer.valueOf(System.getProperty(\"port\"));\n \t@Test\n\tvoid testHome() throws Exception {\nString url = \"http:\n \t\tSystem.out.println(url);\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "fixed": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "sourceBeforeFix": "GL20.glUniform1(location,toIntBuffer(v,offset,count))", "sourceAfterFix": "GL20.glUniform1iv(location,toIntBuffer(v,offset,count))"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStream<OUT> writeAsCsv(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsCsv<OUT> format, long millis, OUT endTuple) {\n\t\tDataStream<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByMillis<OUT>(\n \t\t\t\tpath, format, millis, endTuple));\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "fixed": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStreamSink<OUT> writeAsCsv(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsCsv<OUT> format, long millis, OUT endTuple) {\n\t\tDataStreamSink<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByMillis<OUT>(\n \t\t\t\tpath, format, millis, endTuple));\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
