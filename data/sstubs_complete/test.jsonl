{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedIgniteEventsEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default IgniteEventsEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedIgniteEventsEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default IgniteEventsEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "3a1be8e56587d0c4665f54f0cc2536cbe0a375f7", "projectName": "openhab.openhab", "bugType": "Change Identifier Used", "problem": " \tprivate boolean mKNXConnectionEstablished;\n \tpublic void activate(ComponentContext componentContext) {\n\t\tlogger.info(\"Calimero library version {}\", Settings.getLibraryVersion());\n \t\tlogger.trace(\"KNXBinding: activating\");\n \t\tKNXConnection.addConnectionListener(this);\n \t\tmKNXBusReaderScheduler.start();", "fixed": " \tprivate boolean mKNXConnectionEstablished;\n \tpublic void activate(ComponentContext componentContext) {\n\t\tlogger.debug(\"Calimero library version {}\", Settings.getLibraryVersion());\n \t\tlogger.trace(\"KNXBinding: activating\");\n \t\tKNXConnection.addConnectionListener(this);\n \t\tmKNXBusReaderScheduler.start();", "sourceBeforeFix": "logger.info(\"Calimero library version {}\",Settings.getLibraryVersion())", "sourceAfterFix": "logger.debug(\"Calimero library version {}\",Settings.getLibraryVersion())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "73b39f0f9d0221f0e932ea27f9ba779d6f5bb71b", "projectName": "Alluxio.alluxio", "bugType": "Same Function Less Args", "problem": "                      NetworkAddressUtils.getLocalHostName(ClientContext.getConf()));\n         } catch (IOException ioe) {\n           LOG.warn(\"Failed to get TachyonStore stream, the block \" + currentBlockId\n              + \" will not be in TachyonStorage\", ioe);\n           mShouldCacheCurrentBlock = false;\n         }\n       }", "fixed": "                      NetworkAddressUtils.getLocalHostName(ClientContext.getConf()));\n         } catch (IOException ioe) {\n           LOG.warn(\"Failed to get TachyonStore stream, the block \" + currentBlockId\n              + \" will not be in TachyonStorage\");\n           mShouldCacheCurrentBlock = false;\n         }\n       }", "sourceBeforeFix": "LOG.warn(\"Promotion of block \" + blockId + \" failed.\",ioe)", "sourceAfterFix": "LOG.warn(\"Promotion of block \" + blockId + \" failed.\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  private final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "ea98386dfd18da047c877a2320cfdcf15df2ea06", "projectName": "facebook.presto", "bugType": "Change Modifier", "problem": "         appendToBody.ret();\n     }\n    private void generateHashPositionMethod(ClassDefinition classDefinition, CallSiteBinder callSiteBinder, List<Type> joinChannelTypes, List<FieldDefinition> joinChannelFields, FieldDefinition hashChannelField)\n     {\n         Parameter blockIndex = arg(\"blockIndex\", int.class);\n         Parameter blockPosition = arg(\"blockPosition\", int.class);", "fixed": "         appendToBody.ret();\n     }\n    private static void generateHashPositionMethod(ClassDefinition classDefinition, CallSiteBinder callSiteBinder, List<Type> joinChannelTypes, List<FieldDefinition> joinChannelFields, FieldDefinition hashChannelField)\n     {\n         Parameter blockIndex = arg(\"blockIndex\", int.class);\n         Parameter blockPosition = arg(\"blockPosition\", int.class);", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "2c3e641f9f9b847eb609a575107ad67a63edc09b", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "                         future.cancel(true);\n                         throw ExceptionUtil.rethrow(e, IOException.class);\n                     }\n                    ClientConnection current = connections.putIfAbsent(address, clientConnection);\n                     if (current != null) {\n                         clientConnection.close();\n                         clientConnection = current;", "fixed": "                         future.cancel(true);\n                         throw ExceptionUtil.rethrow(e, IOException.class);\n                     }\n                    ClientConnection current = connections.putIfAbsent(clientConnection.getRemoteEndpoint(), clientConnection);\n                     if (current != null) {\n                         clientConnection.close();\n                         clientConnection = current;", "sourceBeforeFix": "getLock(address)", "sourceAfterFix": "getLock(target)"}
{"fixCommitSHA1": "e7bf415427b37bbc760ff9b9c69650db8ec477e4", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnBean(JavaMailSenderImpl.class)\n\t@ConditionalOnEnablednHealthIndicator(\"mail\")\n \tpublic static class MailHealthIndicatorConfiguration\n \t\t\textends\n \t\t\tCompositeHealthIndicatorConfiguration<MailHealthIndicator, JavaMailSenderImpl> {", "fixed": " \t@Configuration\n \t@ConditionalOnBean(JavaMailSenderImpl.class)\n\t@ConditionalOnEnabledHealthIndicator(\"mail\")\n \tpublic static class MailHealthIndicatorConfiguration\n \t\t\textends\n \t\t\tCompositeHealthIndicatorConfiguration<MailHealthIndicator, JavaMailSenderImpl> {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"redis\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"redis\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": " };\n   \n  private final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler", "fixed": " };\n   \n  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "d251856fc9062d7abcdb5b4e48e7385d8e978b9b", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t\tif (!nsDictionary.writeToFileAtomically(file.getAbsolutePath(), false)) {\r\n \t\t\tGdx.app.debug(\"IOSPreferences\", \"Failed to write NSDictionary to file \" + file);\r\n \t\t}\r\n\t\tpool.dealloc();\r\n \t}\r\n }\r", "fixed": " \t\tif (!nsDictionary.writeToFileAtomically(file.getAbsolutePath(), false)) {\r\n \t\t\tGdx.app.debug(\"IOSPreferences\", \"Failed to write NSDictionary to file \" + file);\r\n \t\t}\r\n\t\tpool.drain();\r\n \t}\r\n }\r", "sourceBeforeFix": "pool.dealloc()", "sourceAfterFix": "pool.drain()"}
{"fixCommitSHA1": "08c13211146864ab9cbc8a79fef118eb3aa3e0e4", "projectName": "facebook.presto", "bugType": "Change Modifier", "problem": "         assertEquals(nodeTaskMap.getPartitionedSplitsOnNode(chosenNode), 0);\n     }\n    private class TestSplitLocal\n             implements ConnectorSplit\n     {\n         @Override", "fixed": "         assertEquals(nodeTaskMap.getPartitionedSplitsOnNode(chosenNode), 0);\n     }\n    private static class TestSplitLocal\n             implements ConnectorSplit\n     {\n         @Override", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "d1cb70710f70a129598e92a638d536b9207aa01f", "projectName": "swagger-api.swagger-core", "bugType": "Change Identifier Used", "problem": "  * Created by russellb337 on 7/9/15.\n  */\n public interface Response {\n    ResponseImpl schema(Property property);\n    ResponseImpl description(String description);\n    ResponseImpl example(String type, Object example);\n    ResponseImpl header(String name, Property property);\n    ResponseImpl headers(Map<String, Property> headers);\n     String getDescription();", "fixed": "  * Created by russellb337 on 7/9/15.\n  */\n public interface Response {\n    Response schema(Property property);\n    Response description(String description);\n    Response example(String type, Object example);\n    Response header(String name, Property property);\n    Response headers(Map<String, Property> headers);\n     String getDescription();", "sourceBeforeFix": "ResponseImpl headers(Map<String,Property> headers); ", "sourceAfterFix": "Response headers(Map<String,Property> headers); "}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform1iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform1(location, v);\r\n \t}\r\n \t@Override\r\n \tpublic void glUniform1iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform1(location, toIntBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform2f (int location, float x, float y) {\r", "fixed": " \t}\r\n \tpublic void glUniform1iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform1iv(location, v);\r\n \t}\r\n \t@Override\r\n \tpublic void glUniform1iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform1iv(location, toIntBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform2f (int location, float x, float y) {\r", "sourceBeforeFix": "GL20.glUniform3(location,toFloatBuffer(v,offset,count * 3))", "sourceAfterFix": "GL20.glUniform3fv(location,toFloatBuffer(v,offset,count * 3))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedByMe() throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",\n                 null, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedByMe() throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",\n                 null, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweets_of_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweets_of_me.json\",null,true))"}
{"fixCommitSHA1": "9d87dbad9f0c649c8244586cfea3ca25731da893", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "       traverseBranch(root, scopeRoot);\n       popScope();\n    } catch (Exception unexpectedException) {\n       throwUnexpectedException(unexpectedException);\n     }\n   }", "fixed": "       traverseBranch(root, scopeRoot);\n       popScope();\n    } catch (Error | Exception unexpectedException) {\n       throwUnexpectedException(unexpectedException);\n     }\n   }", "sourceBeforeFix": "Exception unexpectedException", "sourceAfterFix": "Throwable unexpectedException"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShader(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "fixed": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShaderiv(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "sourceBeforeFix": "GL20.glUniform2(location,toFloatBuffer(v,offset,count << 1))", "sourceAfterFix": "GL20.glUniform2fv(location,toFloatBuffer(v,offset,count << 1))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15844, value = \"Invalid rollout plan. Server group %s appears more than once in the plan.\")\n     String invalidRolloutPlanGroupAlreadyExists(String group);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10844, value = \"Invalid rollout plan. Server group %s appears more than once in the plan.\")\n     String invalidRolloutPlanGroupAlreadyExists(String group);\n     /**", "sourceBeforeFix": "id=15868", "sourceAfterFix": "id=10868"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  private final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "fixed": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "sourceBeforeFix": "GL11.glTexParameter(target,pname,params)", "sourceAfterFix": "GL11.glTexParameterfv(target,pname,params)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15857, value = \"Only 1 piece of content is currently supported (AS7-431)\")\n     String as7431();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10857, value = \"Only 1 piece of content is currently supported (AS7-431)\")\n     String as7431();\n     /**", "sourceBeforeFix": "id=15859", "sourceAfterFix": "id=10859"}
{"fixCommitSHA1": "c9c1e8b5173d3dd69475f7a1711606ffaf7f88a8", "projectName": "spring-projects.spring-boot", "bugType": "Same Function More Args", "problem": " \t\t\tInterruptedException {\n \t\tInvocation cli = this.cli.invoke(\"hint\");\n \t\tassertThat(cli.await(), equalTo(0));\n\t\tassertThat(cli.getErrorOutput().length(), equalTo(0));\n \t\tassertThat(cli.getStandardOutputLines().size(), equalTo(10));\n \t}", "fixed": " \t\t\tInterruptedException {\n \t\tInvocation cli = this.cli.invoke(\"hint\");\n \t\tassertThat(cli.await(), equalTo(0));\n\t\tassertThat(\"Unexpected error: \\n\" + cli.getErrorOutput(), cli.getErrorOutput().length(), equalTo(0));\n \t\tassertThat(cli.getStandardOutputLines().size(), equalTo(10));\n \t}", "sourceBeforeFix": "assertThat(cli.getErrorOutput().length(),equalTo(0))", "sourceAfterFix": "assertThat(\"Unexpected error: \\n\" + cli.getErrorOutput(),cli.getErrorOutput().length(),equalTo(0))"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface SqlEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedSqlEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface SqlEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedSqlEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "1a9bb447fd14415ef270f3dd7af8a0d4e0017177", "projectName": "Atmosphere.atmosphere", "bugType": "Change Caller in Function Call", "problem": "     @Override\n     public final AtmosphereResource create(AtmosphereConfig config,\n                                            Broadcaster broadcaster,\n                                           DefaultAtmosphereRequest request,\n                                            AtmosphereResponse response,\n                                            AsyncSupport<?> a,\n                                            AtmosphereHandler handler) {", "fixed": "     @Override\n     public final AtmosphereResource create(AtmosphereConfig config,\n                                            Broadcaster broadcaster,\n                                           AtmosphereRequest request,\n                                            AtmosphereResponse response,\n                                            AsyncSupport<?> a,\n                                            AtmosphereHandler handler) {", "sourceBeforeFix": "DefaultAtmosphereRequest.newInstance()", "sourceAfterFix": "AtmosphereRequest.newInstance()"}
{"fixCommitSHA1": "544b0ed025cdea88bec8a5dd4ff5462242442eca", "projectName": "Atmosphere.atmosphere", "bugType": "Change Numeric Literal", "problem": "             if (!headerContainsToken(req, \"sec-websocket-version\", \"13\")) {\n                 logger.debug(\"WebSocket version not supported. Downgrading to Comet\");\n                res.sendError(202, \"Websocket protocol not supported\");\n                 return new AtmosphereFramework.Action(AtmosphereFramework.Action.TYPE.CANCELLED);\n             }", "fixed": "             if (!headerContainsToken(req, \"sec-websocket-version\", \"13\")) {\n                 logger.debug(\"WebSocket version not supported. Downgrading to Comet\");\n                res.sendError(501, \"Websocket protocol not supported\");\n                 return new AtmosphereFramework.Action(AtmosphereFramework.Action.TYPE.CANCELLED);\n             }", "sourceBeforeFix": "res.sendError(202,\"Websocket protocol not supported\")", "sourceAfterFix": "res.sendError(501,\"Websocket protocol not supported\")"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites() throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"favorites.json\", new PostParameter[0], true));\n     }\n     /**", "fixed": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites() throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"favorites.json\", new PostParameter[0], true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\",true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 15866, value = \"%s is null\")\n     IllegalArgumentException nullVar(String name);\n     /**", "fixed": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 10866, value = \"%s is null\")\n     IllegalArgumentException nullVar(String name);\n     /**", "sourceBeforeFix": "id=15849", "sourceAfterFix": "id=10849"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStream<OUT> writeAsText(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsText<OUT> format, int batchSize, OUT endTuple) {\n\t\tDataStream<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByBatches<OUT>(\n \t\t\t\tpath, format, batchSize, endTuple), null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "fixed": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStreamSink<OUT> writeAsText(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsText<OUT> format, int batchSize, OUT endTuple) {\n\t\tDataStreamSink<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByBatches<OUT>(\n \t\t\t\tpath, format, batchSize, endTuple), null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface XmppEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedXmppEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface XmppEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedXmppEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "     DomainControllerLogger HOST_CONTROLLER_LOGGER = Logger.getMessageLogger(DomainControllerLogger.class, \"org.jboss.as.host.controller\");\n     @LogMessage(level = Level.WARN)\n    @Message(id = 15800, value = \"Ignoring 'include' child of 'socket-binding-group' %s\")\n     void warnIgnoringSocketBindingGroupInclude(Location location);\n     @LogMessage(level = Level.WARN)\n    @Message(id = 15801, value = \"Ignoring 'include' child of 'profile' %s\")\n     void warnIgnoringProfileInclude(Location location);\n     /**", "fixed": "     DomainControllerLogger HOST_CONTROLLER_LOGGER = Logger.getMessageLogger(DomainControllerLogger.class, \"org.jboss.as.host.controller\");\n     @LogMessage(level = Level.WARN)\n    @Message(id = 10800, value = \"Ignoring 'include' child of 'socket-binding-group' %s\")\n     void warnIgnoringSocketBindingGroupInclude(Location location);\n     @LogMessage(level = Level.WARN)\n    @Message(id = 10801, value = \"Ignoring 'include' child of 'profile' %s\")\n     void warnIgnoringProfileInclude(Location location);\n     /**", "sourceBeforeFix": "id=15809", "sourceAfterFix": "id=10809"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "0d3c78b6f28fb3cad00c12605209c524702adb0a", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "                 obj = null;\n                 replaced = false;\n                 if (isEventsEnabled()) {\n                    publishEvent(createCacheCompleteEvent(key, completionId));\n                 }\n             } else {\n                 replaced = updateRecordWithExpiry(key, value, record, expiryPolicy,", "fixed": "                 obj = null;\n                 replaced = false;\n                 if (isEventsEnabled()) {\n                    publishEvent(createCacheCompleteEvent(toEventData(key), completionId));\n                 }\n             } else {\n                 replaced = updateRecordWithExpiry(key, value, record, expiryPolicy,", "sourceBeforeFix": "toHeapData(key)", "sourceAfterFix": "toEventData(key)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedDropboxEndpointBuilder\n             extends\n                 AdvancedDropboxEndpointConsumerBuilder, AdvancedDropboxEndpointProducerBuilder {\n         default DropboxEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedDropboxEndpointBuilder\n             extends\n                 AdvancedDropboxEndpointConsumerBuilder, AdvancedDropboxEndpointProducerBuilder {\n         default DropboxEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface QuickfixjEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedQuickfixjEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface QuickfixjEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedQuickfixjEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface KubernetesServiceAccountsEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedKubernetesServiceAccountsEndpointBuilder advanced() {", "fixed": "     \n    public interface KubernetesServiceAccountsEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedKubernetesServiceAccountsEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "fixed": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2fv(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2fv(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "sourceBeforeFix": "GL20.glUniform1(location,toIntBuffer(v,offset,count))", "sourceAfterFix": "GL20.glUniform1iv(location,toIntBuffer(v,offset,count))"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t */\n \t@Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)\n\tpublic SortedMap<String, String> getSystemVariables() throws APIException;\n \t/**\n \t * Get a map of all the System Information. Java, user, time, runtime properties, etc", "fixed": " \t */\n \t@Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)\n\tpublic SortedMap<String, String> getSystemVariables();\n \t/**\n \t * Get a map of all the System Information. Java, user, time, runtime properties, etc", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "a8513817db3153d638e818e9a27b0e2e1eed3bdc", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "             beanMethodMap.put(op.getIDLName(), new SkeletonStrategy(method));\n             final OperationAnalysis setop = remoteAttrs[i].getMutatorAnalysis();\n             if (setop != null) {\n                logger.debug(\"    \" + op.getJavaName() + \"\\n                \" + op.getIDLName());\n                 final Method realSetmethod = translateMethod(deploymentReflectionIndex, setop);\n                beanMethodMap.put(op.getIDLName(), new SkeletonStrategy(realSetmethod));\n             }\n         }", "fixed": "             beanMethodMap.put(op.getIDLName(), new SkeletonStrategy(method));\n             final OperationAnalysis setop = remoteAttrs[i].getMutatorAnalysis();\n             if (setop != null) {\n                logger.debug(\"    \" + setop.getJavaName() + \"\\n                \" + setop.getIDLName());\n                 final Method realSetmethod = translateMethod(deploymentReflectionIndex, setop);\n                beanMethodMap.put(setop.getIDLName(), new SkeletonStrategy(realSetmethod));\n             }\n         }", "sourceBeforeFix": "op.getIDLName()", "sourceAfterFix": "setop.getIDLName()"}
{"fixCommitSHA1": "a60da8f05a3a6a5389207f43b2d9c6b013936d4f", "projectName": "dropwizard.dropwizard", "bugType": "Same Function Less Args", "problem": "         this.pool = pool;\n         this.ping = onDemand(Ping.class);\n         setSQLLog(new Log4JLog(LOGGER, Level.TRACE));\n        setTimingCollector(new InstrumentedTimingCollector(Metrics.defaultRegistry(), Database.class));\n         setStatementRewriter(new NamePrependingStatementRewriter());\n         setStatementLocator(new ScopedStatementLocator());\n         registerArgumentFactory(new OptionalArgumentFactory());", "fixed": "         this.pool = pool;\n         this.ping = onDemand(Ping.class);\n         setSQLLog(new Log4JLog(LOGGER, Level.TRACE));\n        setTimingCollector(new InstrumentedTimingCollector(Metrics.defaultRegistry()));\n         setStatementRewriter(new NamePrependingStatementRewriter());\n         setStatementLocator(new ScopedStatementLocator());\n         registerArgumentFactory(new OptionalArgumentFactory());", "sourceBeforeFix": "new InstrumentedTimingCollector(Metrics.defaultRegistry(),Database.class)", "sourceAfterFix": "new InstrumentedTimingCollector(Metrics.defaultRegistry())"}
{"fixCommitSHA1": "4af3d1f01144d5a959934641e66abfcb94644b0a", "projectName": "hazelcast.hazelcast", "bugType": "Delete Throws Exception", "problem": "     HazelcastInstance server1;\n     @Before\n    public void setUp() throws Exception {\n         NearCacheConfig nearCacheConfig = newNearCacheConfig();\n         nearCacheConfig.setInvalidateOnChange(true);", "fixed": "     HazelcastInstance server1;\n     @Before\n    public void setUp() {\n         NearCacheConfig nearCacheConfig = newNearCacheConfig();\n         nearCacheConfig.setInvalidateOnChange(true);", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15865, value = \"Invalid content declaration\")\n     String invalidContentDeclaration();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10865, value = \"Invalid content declaration\")\n     String invalidContentDeclaration();\n     /**", "sourceBeforeFix": "id=15836", "sourceAfterFix": "id=10836"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  private final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(741);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {Console.WriteLine($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "fixed": " \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(740);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {Console.WriteLine($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "sourceBeforeFix": "new StringBuilder(246)", "sourceAfterFix": "new StringBuilder(245)"}
{"fixCommitSHA1": "626cf14a6e42fa0a2d144e8e16940e09bafd754a", "projectName": "druid-io.druid", "bugType": "Change Identifier Used", "problem": "         }\n     );\n    log.info(\"Performing lookup: %s --> %s\", nodeIds, retVal);\n     return retVal;\n   }", "fixed": "         }\n     );\n    log.debug(\"Performing lookup: %s --> %s\", nodeIds, retVal);\n     return retVal;\n   }", "sourceBeforeFix": "log.info(\"Performing lookup: %s --> %s\",ips,retVal)", "sourceAfterFix": "log.debug(\"Performing lookup: %s --> %s\",ips,retVal)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public List<SavedSearch> getSavedSearches() throws TwitterException {\n        return SavedSearch.constructSavedSearches(get(getBaseURL() + \"saved_searches.json\", true));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n      */\n     public List<SavedSearch> getSavedSearches() throws TwitterException {\n        return SavedSearch.createSavedSearchList(get(getBaseURL() + \"saved_searches.json\", true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "           \"functions are set.\");\n   \n  private final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "           \"functions are set.\");\n   \n  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStream<OUT> writeAsCsv(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsCsv<OUT> format, long millis, OUT endTuple) {\n\t\tDataStream<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByMillis<OUT>(\n \t\t\t\tpath, format, millis, endTuple));\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "fixed": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStreamSink<OUT> writeAsCsv(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsCsv<OUT> format, long millis, OUT endTuple) {\n\t\tDataStreamSink<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByMillis<OUT>(\n \t\t\t\tpath, format, millis, endTuple));\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "00644912992eceb3de7d2dc0213a05bf2844c1b2", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "                 } catch (InterruptedException e) {\n                     e.printStackTrace();\n                 }\n                hz1.getLifecycleService().terminate();\n             }\n         };", "fixed": "                 } catch (InterruptedException e) {\n                     e.printStackTrace();\n                 }\n                hz1.getLifecycleService().shutdown();\n             }\n         };", "sourceBeforeFix": "hz1.getLifecycleService().terminate()", "sourceAfterFix": "hz1.getLifecycleService().shutdown()"}
{"fixCommitSHA1": "73a03b5e232d8f7049a03361e0454cb2eecb90c7", "projectName": "hazelcast.hazelcast", "bugType": "Change Modifier", "problem": "             initialPermits += rand;\n             assertEquals(initialPermits, semaphore.availablePermits());\n            instances[i].getLifecycleService().shutdown();\n             semaphore.acquire(rand);\n             initialPermits -= rand;", "fixed": "             initialPermits += rand;\n             assertEquals(initialPermits, semaphore.availablePermits());\n            instances[i].shutdown();\n             semaphore.acquire(rand);\n             initialPermits -= rand;", "sourceBeforeFix": "0", "sourceAfterFix": "16"}
{"fixCommitSHA1": "f47d4f07970a09a1aaf5b0e94eb5fe53c2e4b14f", "projectName": "Graylog2.graylog2-server", "bugType": "Change Identifier Used", "problem": "     }\n     public Map<String, String> getInputTypes() throws IOException, APIException {\n        return api.path(routes.InputsResource().types(), InputTypesResponse.class).node(this).execute().types;\n     }\n     public InputTypeSummaryResponse getInputTypeInformation(String type) throws IOException, APIException {\n        return api.path(routes.InputsResource().info(type), InputTypeSummaryResponse.class).node(this).execute();\n     }\n     public Map<String, InputTypeSummaryResponse> getAllInputTypeInformation() throws IOException, APIException {", "fixed": "     }\n     public Map<String, String> getInputTypes() throws IOException, APIException {\n        return api.path(routes.InputTypesResource().types(), InputTypesResponse.class).node(this).execute().types;\n     }\n     public InputTypeSummaryResponse getInputTypeInformation(String type) throws IOException, APIException {\n        return api.path(routes.InputTypesResource().info(type), InputTypeSummaryResponse.class).node(this).execute();\n     }\n     public Map<String, InputTypeSummaryResponse> getAllInputTypeInformation() throws IOException, APIException {", "sourceBeforeFix": "routes.InputsResource()", "sourceAfterFix": "routes.InputTypesResource()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  private final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "475938ec477d1d0d357fb0f586a57650d9ee78c0", "projectName": "Atmosphere.atmosphere", "bugType": "Same Function More Args", "problem": "             throws IOException, ServletException {\n         if (!req.isAsyncStarted()) {\n            AsyncContext asyncContext = req.startAsync();\n             asyncContext.addListener(new CometListener(this));\n             if (action.timeout() != -1) {", "fixed": "             throws IOException, ServletException {\n         if (!req.isAsyncStarted()) {\n            AsyncContext asyncContext = req.startAsync(req, res);\n             asyncContext.addListener(new CometListener(this));\n             if (action.timeout() != -1) {", "sourceBeforeFix": "req.startAsync()", "sourceAfterFix": "req.startAsync(req,res)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15848, value = \"Exception getting result from host %s: %s\")\n     String exceptionAwaitingResultFromHost(String name, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10848, value = \"Exception getting result from host %s: %s\")\n     String exceptionAwaitingResultFromHost(String name, String message);\n     /**", "sourceBeforeFix": "id=15836", "sourceAfterFix": "id=10836"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15837, value = \"One of the groups does not define neither \" + SERVER_GROUP + \" nor \" + CONCURRENT_GROUPS + \": %s\")\n     String unexpectedInSeriesGroup(String rolloutPlan);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10837, value = \"One of the groups does not define neither \" + SERVER_GROUP + \" nor \" + CONCURRENT_GROUPS + \": %s\")\n     String unexpectedInSeriesGroup(String rolloutPlan);\n     /**", "sourceBeforeFix": "id=15869", "sourceAfterFix": "id=10869"}
{"fixCommitSHA1": "c2cfe6ff21e76d8c7f1ac185ba7538ef993f2733", "projectName": "stanfordnlp.CoreNLP", "bugType": "Change Numeric Literal", "problem": "public String KBP_DOCS_DIR = \"/scr/nlp/data/kbp-benchmark\n   public String GOLD_RELATIONS_PATH = \"/scr/nlp/data/kbp-benchmark/kbp-gold-relations.txt\";\n  public double KBP_MINIMUM_SCORE = 45.30;\n   private String convertRelationName(String relationName) {\n     /*if (relationName.equals(\"org:top_members/employees\")) {", "fixed": "public String KBP_DOCS_DIR = \"/scr/nlp/data/kbp-benchmark\n   public String GOLD_RELATIONS_PATH = \"/scr/nlp/data/kbp-benchmark/kbp-gold-relations.txt\";\n  public double KBP_MINIMUM_SCORE = .453;\n   private String convertRelationName(String relationName) {\n     /*if (relationName.equals(\"org:top_members/employees\")) {", "sourceBeforeFix": "KBP_MINIMUM_SCORE=45.30", "sourceAfterFix": "KBP_MINIMUM_SCORE=.453"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<Status> getUserTimeline(String id, Paging paging)\n             throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline/\" + id + \".json\",\n                 null, paging.asPostParameterList(), http.isAuthenticationEnabled()));\n     }", "fixed": "      */\n     public ResponseList<Status> getUserTimeline(String id, Paging paging)\n             throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline/\" + id + \".json\",\n                 null, paging.asPostParameterList(), http.isAuthenticationEnabled()));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweets/\" + statusId+ \".json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweets/\" + statusId+ \".json\",true))"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface Sjms2EndpointBuilder\n             extends\n                 Sjms2EndpointConsumerBuilder, Sjms2EndpointProducerBuilder {\n         default AdvancedSjms2EndpointBuilder advanced() {", "fixed": "     \n    public interface Sjms2EndpointBuilder\n             extends\n                 Sjms2EndpointConsumerBuilder, Sjms2EndpointProducerBuilder {\n         default AdvancedSjms2EndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "           \"functions are set.\");\n   \n  private final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "           \"functions are set.\");\n   \n  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedHazelcastSetEndpointBuilder\n             extends\n                 AdvancedHazelcastSetEndpointConsumerBuilder, AdvancedHazelcastSetEndpointProducerBuilder {\n         default HazelcastSetEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedHazelcastSetEndpointBuilder\n             extends\n                 AdvancedHazelcastSetEndpointConsumerBuilder, AdvancedHazelcastSetEndpointProducerBuilder {\n         default HazelcastSetEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "42ac2cd8be79d12d0cccf164ef9876a7770fdc70", "projectName": "Alluxio.alluxio", "bugType": "Missing Throws Exception", "problem": "    * Tests getting and setting fields.\n    */\n   @Test\n  public void fields() {\n     Random random = new Random();\n     boolean isPrimary = random.nextBoolean();\n     long sequenceNumber = random.nextLong();", "fixed": "    * Tests getting and setting fields.\n    */\n   @Test\n  public void fields() throws Exception {\n     Random random = new Random();\n     boolean isPrimary = random.nextBoolean();\n     long sequenceNumber = random.nextLong();", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "f1409f751a94e935f116cf2eb3732b56c128b501", "projectName": "druid-io.druid", "bugType": "Change Numeric Literal", "problem": "       @JsonProperty(\"maxPriority\") Integer maxPriority\n   )\n   {\n    this.minPriority = minPriority == null ? 1 : minPriority;\n     this.maxPriority = maxPriority == null ? 1 : maxPriority;\n   }", "fixed": "       @JsonProperty(\"maxPriority\") Integer maxPriority\n   )\n   {\n    this.minPriority = minPriority == null ? 0 : minPriority;\n     this.maxPriority = maxPriority == null ? 1 : maxPriority;\n   }", "sourceBeforeFix": "minPriority == null ? 1 : minPriority", "sourceAfterFix": "minPriority == null ? 0 : minPriority"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "038ea1803bae1cf3be279b36395b4de4e0ff39b5", "projectName": "openhab.openhab", "bugType": "Change Identifier Used", "problem": " \t\t\tObjectMapper mapper = new ObjectMapper();\n \t\t\tJsonNode rootNode = mapper.readTree(dataString);\n \t\t\tint returnCode = rootNode.get(\"ReturnCode\").asInt();\n\t\t\tlogger.debug(\"myq ReturnCode: {}\", returnCode);\n \t\t\tMyQResponseCode rc = MyQResponseCode.fromCode(returnCode);", "fixed": " \t\t\tObjectMapper mapper = new ObjectMapper();\n \t\t\tJsonNode rootNode = mapper.readTree(dataString);\n \t\t\tint returnCode = rootNode.get(\"ReturnCode\").asInt();\n\t\t\tlogger.trace(\"myq ReturnCode: {}\", returnCode);\n \t\t\tMyQResponseCode rc = MyQResponseCode.fromCode(returnCode);", "sourceBeforeFix": "logger.debug(\"attempting to login\")", "sourceAfterFix": "logger.trace(\"attempting to login\")"}
{"fixCommitSHA1": "a9a99c32bd2041a42b365b97c3cdd8642e0f1662", "projectName": "neo4j.neo4j", "bugType": "Change Modifier", "problem": "         this.base = base.getAbsoluteFile();\n     }\n    private void recursiveDelete( File file )\n     {\n         File[] files = file.listFiles();\n         if ( files != null ) for ( File each : files )", "fixed": "         this.base = base.getAbsoluteFile();\n     }\n    public static void recursiveDelete( File file )\n     {\n         File[] files = file.listFiles();\n         if ( files != null ) for ( File each : files )", "sourceBeforeFix": "2", "sourceAfterFix": "9"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShader(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "fixed": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShaderiv(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "sourceBeforeFix": "GL11.glGetInteger(pname,params)", "sourceAfterFix": "GL11.glGetIntegerv(pname,params)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "34aa92dca9aee7ee6e0ba551e69639f853df15d3", "projectName": "dropwizard.metrics", "bugType": "Less Specific If", "problem": " \t@Override\n \tprotected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n \t\tfinal String uri = req.getPathInfo();\n\t\tif (uri.equals(\"/\")) {\n \t\t\thandleHome(resp);\n \t\t} else if (uri.startsWith(metricsUri)) {\n \t\t\thandleMetrics(req.getParameter(\"class\"), Boolean.parseBoolean(req.getParameter(\"full-samples\")), resp);", "fixed": " \t@Override\n \tprotected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n \t\tfinal String uri = req.getPathInfo();\n\t\tif (uri == null || uri.equals(\"/\")) {\n \t\t\thandleHome(resp);\n \t\t} else if (uri.startsWith(metricsUri)) {\n \t\t\thandleMetrics(req.getParameter(\"class\"), Boolean.parseBoolean(req.getParameter(\"full-samples\")), resp);", "sourceBeforeFix": "uri.equals(\"/\")", "sourceAfterFix": "uri == null || uri.equals(\"/\")"}
{"fixCommitSHA1": "a41f4fbfcbbcf4b7e075666e2897271b7c8fa34e", "projectName": "Graylog2.graylog2-server", "bugType": "Same Function More Args", "problem": "         DBObject modify = new BasicDBObject(\"$pull\", new BasicDBObject(StreamImpl.FIELD_OUTPUTS, outputId));\n         collection(StreamImpl.class).update(\n                match,\n                modify\n         );\n     }\n }", "fixed": "         DBObject modify = new BasicDBObject(\"$pull\", new BasicDBObject(StreamImpl.FIELD_OUTPUTS, outputId));\n         collection(StreamImpl.class).update(\n                match, modify, false, true\n         );\n     }\n }", "sourceBeforeFix": "collection(StreamImpl.class).update(match,modify)", "sourceAfterFix": "collection(StreamImpl.class).update(match,modify,false,true)"}
{"fixCommitSHA1": "4bf80610fd2a67d952312e808edebdb74ebc26bb", "projectName": "Graylog2.graylog2-server", "bugType": "Change Numeric Literal", "problem": "         final PaginatedList<TestDTO> page1reverse = dbService.findPaginatedWithQueryFilterAndSort(DBQuery.empty(), filter, DBSort.desc(\"title\"), 1, 2);\n         assertThat(page1reverse.pagination().getCount()).isEqualTo(2);\n        assertThat(page1reverse.pagination().getGlobalTotal()).isEqualTo(7);\n         assertThat(page1reverse.delegate())\n                 .extracting(\"title\")\n                 .containsExactly(\"hello6\", \"hello5\");", "fixed": "         final PaginatedList<TestDTO> page1reverse = dbService.findPaginatedWithQueryFilterAndSort(DBQuery.empty(), filter, DBSort.desc(\"title\"), 1, 2);\n         assertThat(page1reverse.pagination().getCount()).isEqualTo(2);\n        assertThat(page1reverse.pagination().getGlobalTotal()).isEqualTo(5);\n         assertThat(page1reverse.delegate())\n                 .extracting(\"title\")\n                 .containsExactly(\"hello6\", \"hello5\");", "sourceBeforeFix": "assertThat(page1.pagination().getGlobalTotal()).isEqualTo(7)", "sourceAfterFix": "assertThat(page1.pagination().getGlobalTotal()).isEqualTo(5)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "fixed": "   }\n   \n  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "83b016ec7fc76f8f293c25b6438995f135cf8723", "projectName": "javaee-samples.javaee7-samples", "bugType": "Change Identifier Used", "problem": "             .addAsResource(\"META-INF/persistence.xml\")\n             .addAsResource(\"META-INF/load.sql\")\n             .addAsWebInfResource(\n                new StringAsset(beansXml.createAlternatives()\n                     .clazz(MovieBeanAlternative.class.getName()).up().exportAsString()),\n                 beansXml.getDescriptorName());\n         System.out.println(war.toString(true));", "fixed": "             .addAsResource(\"META-INF/persistence.xml\")\n             .addAsResource(\"META-INF/load.sql\")\n             .addAsWebInfResource(\n                new StringAsset(beansXml.getOrCreateAlternatives()\n                     .clazz(MovieBeanAlternative.class.getName()).up().exportAsString()),\n                 beansXml.getDescriptorName());\n         System.out.println(war.toString(true));", "sourceBeforeFix": "beansXml.createAlternatives()", "sourceAfterFix": "beansXml.getOrCreateAlternatives()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15841, value = \"Exception getting result from server %s: %s\")\n     String exceptionAwaitingResultFromServer(ServerIdentity server, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10841, value = \"Exception getting result from server %s: %s\")\n     String exceptionAwaitingResultFromServer(ServerIdentity server, String message);\n     /**", "sourceBeforeFix": "id=15862", "sourceAfterFix": "id=10862"}
{"fixCommitSHA1": "ddfab2213db771b738d1f971e36e664f5a02f4ab", "projectName": "apache.hive", "bugType": "Wrong Function Name", "problem": "     ExecDriverTaskHandle th = (ExecDriverTaskHandle)t;\n     RunningJob rj = th.getRunningJob();\n     this.mapProgress = Math.round(rj.mapProgress() * 100);\n    this.reduceProgress = Math.round(rj.mapProgress() * 100);\n     taskCounters.put(\"CNTR_NAME_\" + getId() + \"_MAP_PROGRESS\", Long.valueOf(this.mapProgress));\n     taskCounters.put(\"CNTR_NAME_\" + getId() + \"_REDUCE_PROGRESS\", Long.valueOf(this.reduceProgress));\n     Counters ctrs = th.getCounters();", "fixed": "     ExecDriverTaskHandle th = (ExecDriverTaskHandle)t;\n     RunningJob rj = th.getRunningJob();\n     this.mapProgress = Math.round(rj.mapProgress() * 100);\n    this.reduceProgress = Math.round(rj.reduceProgress() * 100);\n     taskCounters.put(\"CNTR_NAME_\" + getId() + \"_MAP_PROGRESS\", Long.valueOf(this.mapProgress));\n     taskCounters.put(\"CNTR_NAME_\" + getId() + \"_REDUCE_PROGRESS\", Long.valueOf(this.reduceProgress));\n     Counters ctrs = th.getCounters();", "sourceBeforeFix": "rj.mapProgress()", "sourceAfterFix": "rj.reduceProgress()"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<Status> getFriendsTimeline(Paging paging) throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\",null, paging.asPostParameterList(), true));\n     }\n     /**", "fixed": "      */\n     public ResponseList<Status> getFriendsTimeline(Paging paging) throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\",null, paging.asPostParameterList(), true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweets/\" + statusId+ \".json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweets/\" + statusId+ \".json\",true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  private final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface CaffeineLoadCacheEndpointBuilder\n             extends\n                 CaffeineLoadCacheEndpointConsumerBuilder, CaffeineLoadCacheEndpointProducerBuilder {\n         default AdvancedCaffeineLoadCacheEndpointBuilder advanced() {", "fixed": "     \n    public interface CaffeineLoadCacheEndpointBuilder\n             extends\n                 CaffeineLoadCacheEndpointConsumerBuilder, CaffeineLoadCacheEndpointProducerBuilder {\n         default AdvancedCaffeineLoadCacheEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "1daccd54d2ff2ecdb21d8c60268600c37febbb70", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "   public static void createFiles() throws IOException {\n     long startTimeMs = CommonUtils.getCurrentMs();\n    for (int k = 0; k < THREADS; k ++) {\n       int fileId = MTC.createFile(FILE_NAME + (k + BASE_FILE_NUMBER));\n       CommonUtils.printTimeTakenMs(startTimeMs, LOG, \"user_createFiles with fileId \" + fileId);\n     }", "fixed": "   public static void createFiles() throws IOException {\n     long startTimeMs = CommonUtils.getCurrentMs();\n    for (int k = 0; k < FILES; k++) {\n       int fileId = MTC.createFile(FILE_NAME + (k + BASE_FILE_NUMBER));\n       CommonUtils.printTimeTakenMs(startTimeMs, LOG, \"user_createFiles with fileId \" + fileId);\n     }", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "pId + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "3dddcc4cdf4a74ddbd4607c6aaee5bdd8ac46c27", "projectName": "gephi.gephi", "bugType": "Change Modifier", "problem": "     }\n     @Override\n    public void updateLOD() {\n         Iterator<NodeModel> iterator = octree.getNodeIterator();\n         for (; iterator.hasNext();) {\n             NodeModel obj = iterator.next();", "fixed": "     }\n     @Override\n    public synchronized void updateLOD() {\n         Iterator<NodeModel> iterator = octree.getNodeIterator();\n         for (; iterator.hasNext();) {\n             NodeModel obj = iterator.next();", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  private final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "17657bf3a6a679b6d203c9c915c5a7f4c7752ae5", "projectName": "apache.camel", "bugType": "Same Function Swap Args", "problem": "         if (id != null) {\n             builder.getAdviceWithTasks().add(AdviceWithTasks.removeById(route, id, selectFirst, selectLast, selectFrom, selectTo, maxDeep));\n         } else if (toString != null) {\n            builder.getAdviceWithTasks().add(AdviceWithTasks.removeByToString(route, toString, selectLast, selectFirst, selectFrom, selectTo, maxDeep));\n         } else if (type != null) {\n             builder.getAdviceWithTasks().add(AdviceWithTasks.removeByType(route, type, selectFirst, selectLast, selectFrom, selectTo, maxDeep));\n         }", "fixed": "         if (id != null) {\n             builder.getAdviceWithTasks().add(AdviceWithTasks.removeById(route, id, selectFirst, selectLast, selectFrom, selectTo, maxDeep));\n         } else if (toString != null) {\n            builder.getAdviceWithTasks().add(AdviceWithTasks.removeByToString(route, toString, selectFirst, selectLast, selectFrom, selectTo, maxDeep));\n         } else if (type != null) {\n             builder.getAdviceWithTasks().add(AdviceWithTasks.removeByType(route, type, selectFirst, selectLast, selectFrom, selectTo, maxDeep));\n         }", "sourceBeforeFix": "AdviceWithTasks.removeByToString(route,toString,selectLast,selectFirst,selectFrom,selectTo,maxDeep)", "sourceAfterFix": "AdviceWithTasks.removeByToString(route,toString,selectFirst,selectLast,selectFrom,selectTo,maxDeep)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15871, value = \"Unknown server %s\")\n     IllegalStateException unknownServer(ServerIdentity server);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10871, value = \"Unknown server %s\")\n     IllegalStateException unknownServer(ServerIdentity server);\n     /**", "sourceBeforeFix": "id=15853", "sourceAfterFix": "id=10853"}
{"fixCommitSHA1": "0360fb968378b3439c9c8724e5f3183de06d3c80", "projectName": "apache.flink", "bugType": "Change Numeric Literal", "problem": "\tpublic static final int MAXIMUM_BLOCK_COUNT = 1 << 20;", "fixed": "\tpublic static final int MAXIMUM_BLOCK_COUNT = 1 << 15;", "sourceBeforeFix": "1 << 20", "sourceAfterFix": "1 << 15"}
{"fixCommitSHA1": "b3ac3b95006a90e62773cda8943c5395895b4a10", "projectName": "gephi.gephi", "bugType": "Change Numeric Literal", "problem": "     public static final Color DEFAULT_NODE_SELECTED_UNIQUE_COLOR = new Color(0.8f, 0.2f, 0.2f);\n     public static final Color DEFAULT_NODE_NEIGHBOR_SELECTED_UNIQUE_COLOR = new Color(0.2f, 1f, 0.3f);\n     public static final int DEFAULT_OCTREE_DEPTH = 5;\n    public static final int DEFAULT_OCTREE_WIDTH = 10000;\n     public static final boolean DEFAULT_CLEAN_DELETED_MODELS = true;\n     public static final boolean DEFAULT_LABEL_MIPMAP = true;\n     public static final boolean DEFAULT_LABEL_ANTIALIASED = true;", "fixed": "     public static final Color DEFAULT_NODE_SELECTED_UNIQUE_COLOR = new Color(0.8f, 0.2f, 0.2f);\n     public static final Color DEFAULT_NODE_NEIGHBOR_SELECTED_UNIQUE_COLOR = new Color(0.2f, 1f, 0.3f);\n     public static final int DEFAULT_OCTREE_DEPTH = 5;\n    public static final int DEFAULT_OCTREE_WIDTH = 50000;\n     public static final boolean DEFAULT_CLEAN_DELETED_MODELS = true;\n     public static final boolean DEFAULT_LABEL_MIPMAP = true;\n     public static final boolean DEFAULT_LABEL_ANTIALIASED = true;", "sourceBeforeFix": "DEFAULT_OCTREE_WIDTH=10000", "sourceAfterFix": "DEFAULT_OCTREE_WIDTH=50000"}
{"fixCommitSHA1": "83b9dd427535bce39be43a9e8224cdbc352d7427", "projectName": "square.okhttp", "bugType": "Change Modifier", "problem": "   class ApacheHttpClientRequest implements Runnable {\n     private final HttpUrl url;\n    public ApacheHttpClientRequest(HttpUrl url) {\n       this.url = url;\n     }", "fixed": "   class ApacheHttpClientRequest implements Runnable {\n     private final HttpUrl url;\n    ApacheHttpClientRequest(HttpUrl url) {\n       this.url = url;\n     }", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "2921e7bf0d74a65fdcc71d3ce3053037d14e4d44", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "     protected void handleMultiMapTryLock(String[] args) {\n         String key = args[1];\n        long time = (args.length > 2) ? Long.valueOf(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMultiMap().tryLock(key);", "fixed": "     protected void handleMultiMapTryLock(String[] args) {\n         String key = args[1];\n        long time = (args.length > 2) ? Long.parseLong(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMultiMap().tryLock(key);", "sourceBeforeFix": "Long.valueOf(args[1])", "sourceAfterFix": "Long.parseLong(args[1])"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "d924b8d91076346aef4e311cc4a16dbac4c23d5a", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "                 from(\"direct:a\").setBody(constant(\"A\"));\n                from(\"direct:b\").delay(3000).setBody(constant(\"B\"));\n                 from(\"direct:c\").delay(500).setBody(constant(\"C\"));\n             }", "fixed": "                 from(\"direct:a\").setBody(constant(\"A\"));\n                from(\"direct:b\").delay(4000).setBody(constant(\"B\"));\n                 from(\"direct:c\").delay(500).setBody(constant(\"C\"));\n             }", "sourceBeforeFix": "from(\"direct:b\").delay(3000)", "sourceAfterFix": "from(\"direct:b\").delay(4000)"}
{"fixCommitSHA1": "ff34b04700d0417df1049e4d749fdf430076965b", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "     }\n     private static String getNodeText(Node node, boolean fixLinks) {\n        final StringBuffer result = new StringBuffer(20);\n         for (Node child = node.getFirstChild(); child != null; child = child.getNextSibling()) {\n             if (child.getNodeType() == Node.TEXT_NODE) {", "fixed": "     }\n     private static String getNodeText(Node node, boolean fixLinks) {\n        final StringBuilder result = new StringBuilder(20);\n         for (Node child = node.getFirstChild(); child != null; child = child.getNextSibling()) {\n             if (child.getNodeType() == Node.TEXT_NODE) {", "sourceBeforeFix": "StringBuffer text", "sourceAfterFix": "StringBuilder text"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShader(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "fixed": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShaderiv(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "sourceBeforeFix": "GL20.glUniform3(location,v)", "sourceAfterFix": "GL20.glUniform3fv(location,v)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fdd0b31d828c2e0d50f64ef8713a99ceeb8ffa03", "projectName": "eclipse.vert.x", "bugType": "Same Function More Args", "problem": " \npublic class SucceededFuture<T> implements Future<T> {\n   private final T result;\n  public SucceededFuture(T result) {\n     this.result = result;\n   }", "fixed": " \nclass SucceededFuture<T> implements Future<T> {\n   private final T result;\n  SucceededFuture(T result) {\n     this.result = result;\n   }", "sourceBeforeFix": "new IllegalStateException()", "sourceAfterFix": "new IllegalStateException(\"Result is already complete: succeeded\")"}
{"fixCommitSHA1": "31a360700bc11b55dc64e89c7b6f8b660b50bddb", "projectName": "Graylog2.graylog2-server", "bugType": "Change Identifier Used", "problem": "     }\n     protected List<ResultMessageSummary> resultMessageListtoValueList(List<ResultMessage> resultMessages) {\n        final List<ResultMessageSummary> result = Lists.newArrayListWithExpectedSize(resultMessages.size());\n         for (ResultMessage resultMessage : resultMessages) {\n             result.add(ResultMessageSummary.create(resultMessage.highlightRanges, resultMessage.getMessage(), resultMessage.getIndex()));", "fixed": "     }\n     protected List<ResultMessageSummary> resultMessageListtoValueList(List<ResultMessage> resultMessages) {\n        final List<ResultMessageSummary> result = Lists.newArrayListWithCapacity(resultMessages.size());\n         for (ResultMessage resultMessage : resultMessages) {\n             result.add(ResultMessageSummary.create(resultMessage.highlightRanges, resultMessage.getMessage(), resultMessage.getIndex()));", "sourceBeforeFix": "Lists.newArrayListWithExpectedSize(resultMessages.size())", "sourceAfterFix": "Lists.newArrayListWithCapacity(resultMessages.size())"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface DropboxEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedDropboxEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface DropboxEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedDropboxEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedTwitterTimelineEndpointBuilder\n             extends\n                 AdvancedTwitterTimelineEndpointConsumerBuilder, AdvancedTwitterTimelineEndpointProducerBuilder {\n         default TwitterTimelineEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedTwitterTimelineEndpointBuilder\n             extends\n                 AdvancedTwitterTimelineEndpointConsumerBuilder, AdvancedTwitterTimelineEndpointProducerBuilder {\n         default TwitterTimelineEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<Status> getUserTimeline(Paging paging) throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline.json\"\n                 , null, paging.asPostParameterList(), true));\n     }", "fixed": "      */\n     public ResponseList<Status> getUserTimeline(Paging paging) throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline.json\"\n                 , null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "2230a91829f39b72973e6fecf275d9c664911ca0", "projectName": "clojure.clojure", "bugType": "Change Identifier Used", "problem": " \t\t}\n \tcatch(LispReader.ReaderException e)\n \t\t{\n\t\tthrow new CompilerException(sourceName, e.line, e.getCause());\n \t\t}\n \tfinally\n \t\t{", "fixed": " \t\t}\n \tcatch(LispReader.ReaderException e)\n \t\t{\n\t\tthrow new CompilerException(sourcePath, e.line, e.getCause());\n \t\t}\n \tfinally\n \t\t{", "sourceBeforeFix": "new CompilerException(sourceName,e.line,e.getCause())", "sourceAfterFix": "new CompilerException(sourcePath,e.line,e.getCause())"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedMllpEndpointBuilder\n             extends\n                 AdvancedMllpEndpointConsumerBuilder, AdvancedMllpEndpointProducerBuilder {\n         default MllpEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedMllpEndpointBuilder\n             extends\n                 AdvancedMllpEndpointConsumerBuilder, AdvancedMllpEndpointProducerBuilder {\n         default MllpEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "370ead7395fc9194a3dc2d05afc4b3409f6b27da", "projectName": "apache.hive", "bugType": "Change Identifier Used", "problem": "     this.destToSortby = new HashMap<String, ASTNode>();\n     this.destToLimit = new HashMap<String, Integer>();\n    this.destToAggregationExprs = new HashMap<String, HashMap<String, ASTNode> >();\n     this.destToDistinctFuncExpr = new HashMap<String, ASTNode>();\n     this.alias = alias;", "fixed": "     this.destToSortby = new HashMap<String, ASTNode>();\n     this.destToLimit = new HashMap<String, Integer>();\n    this.destToAggregationExprs = new LinkedHashMap<String, LinkedHashMap<String, ASTNode> >();\n     this.destToDistinctFuncExpr = new HashMap<String, ASTNode>();\n     this.alias = alias;", "sourceBeforeFix": "HashMap<String,ASTNode>", "sourceAfterFix": "LinkedHashMap<String,ASTNode>"}
{"fixCommitSHA1": "425403eeed99d409a1c49ad5243a3a0bd86ed66c", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "             \"JSCompiler_StaticMethods_bar(o, 2);\",\n             \"JSCompiler_StaticMethods_baz(o)\");\n    static final List<String> EXPECTED_TYPE_CHECKING_OFF = ImmutableList.of(\n         \"FUNCTION a = null\",\n         \"NAME JSCompiler_StaticMethods_foo$self = null\",\n         \"FUNCTION JSCompiler_StaticMethods_foo = null\",", "fixed": "             \"JSCompiler_StaticMethods_bar(o, 2);\",\n             \"JSCompiler_StaticMethods_baz(o)\");\n    static final ImmutableList<String> EXPECTED_TYPE_CHECKING_OFF =\n        ImmutableList.of(\n         \"FUNCTION a = null\",\n         \"NAME JSCompiler_StaticMethods_foo$self = null\",\n         \"FUNCTION JSCompiler_StaticMethods_foo = null\",", "sourceBeforeFix": "List<String>", "sourceAfterFix": "ImmutableList<String>"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedHazelcastMapEndpointBuilder\n             extends\n                 AdvancedHazelcastMapEndpointConsumerBuilder, AdvancedHazelcastMapEndpointProducerBuilder {\n         default HazelcastMapEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedHazelcastMapEndpointBuilder\n             extends\n                 AdvancedHazelcastMapEndpointConsumerBuilder, AdvancedHazelcastMapEndpointProducerBuilder {\n         default HazelcastMapEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 15832, value = \"There is already a registered host named '%s'\")\n     String slaveAlreadyRegistered(String slaveName);\n     /**", "fixed": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 10832, value = \"There is already a registered host named '%s'\")\n     String slaveAlreadyRegistered(String slaveName);\n     /**", "sourceBeforeFix": "id=15848", "sourceAfterFix": "id=10848"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15857, value = \"Only 1 piece of content is currently supported (AS7-431)\")\n     String as7431();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10857, value = \"Only 1 piece of content is currently supported (AS7-431)\")\n     String as7431();\n     /**", "sourceBeforeFix": "id=15867", "sourceAfterFix": "id=10867"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 15831, value = \"The master host controller cannot register slave host controllers as it's current running mode is '%s'\")\n     String adminOnlyModeCannotAcceptSlaves(RunningMode runningMode);\n     /**", "fixed": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 10831, value = \"The master host controller cannot register slave host controllers as it's current running mode is '%s'\")\n     String adminOnlyModeCannotAcceptSlaves(RunningMode runningMode);\n     /**", "sourceBeforeFix": "id=15834", "sourceAfterFix": "id=10834"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedRssEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default RssEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedRssEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default RssEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15847, value = \"Interrupted waiting for result from host %s\")\n     String interruptedAwaitingResultFromHost(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10847, value = \"Interrupted waiting for result from host %s\")\n     String interruptedAwaitingResultFromHost(String name);\n     /**", "sourceBeforeFix": "id=15864", "sourceAfterFix": "id=10864"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = String.class),\n         @ApiResponse(code = 400, message = \"Invalid username/password supplied\", response = Void.class) })\n    String loginUser(@QueryParam(\"username\") @NotNull   @ApiParam(\"The user name for login\")  String username,@QueryParam(\"password\") @NotNull   @ApiParam(\"The password for login in clear text\")  String password);\n     @GET\n     @Path(\"/logout\")", "fixed": "     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = String.class),\n         @ApiResponse(code = 400, message = \"Invalid username/password supplied\", response = Void.class) })\n    String loginUser(@QueryParam(\"username\") @NotNull   @ApiParam(\"The user name for login\")  String username,@QueryParam(\"password\") @NotNull   @ApiParam(\"The password for login in clear text\")  String password) throws Exception;\n     @GET\n     @Path(\"/logout\")", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "5ceeb7cd804870a241b6943b37b295f37578abde", "projectName": "google.closure-compiler", "bugType": "Change Binary Operator", "problem": "     int index = (int) params.get(1).getDouble();\n     ImmutableList<JSType> templateTypes =\n         ((TemplatizedType) type).getTemplateTypes();\n    if (index > templateTypes.size()) {\n       reportWarning(ttlAst, INDEX_OUTOFBOUNDS,\n           Integer.toString(index), Integer.toString(templateTypes.size()));\n       return getUnknownType();", "fixed": "     int index = (int) params.get(1).getDouble();\n     ImmutableList<JSType> templateTypes =\n         ((TemplatizedType) type).getTemplateTypes();\n    if (index >= templateTypes.size()) {\n       reportWarning(ttlAst, INDEX_OUTOFBOUNDS,\n           Integer.toString(index), Integer.toString(templateTypes.size()));\n       return getUnknownType();", "sourceBeforeFix": "index > templateTypes.size()", "sourceAfterFix": "index >= templateTypes.size()"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<Status> getHomeTimeline(Paging paging) throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/home_timeline.json\", null, paging.asPostParameterList(), true));\n     }\n     /**", "fixed": "      */\n     public ResponseList<Status> getHomeTimeline(Paging paging) throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/home_timeline.json\", null, paging.asPostParameterList(), true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\",true))"}
{"fixCommitSHA1": "8b0fec4451e8147bbe5bdbf29d235744c9aca01a", "projectName": "gephi.gephi", "bugType": "Change Binary Operator", "problem": "             nodeE.appendChild(positionXE);\n             Element positionYE = createNodePositionY(document, n);\n             nodeE.appendChild(positionYE);\n            if (minZ != 0f && maxZ != 0f) {\n                 Element positionZE = createNodePositionZ(document, n);\n                 nodeE.appendChild(positionZE);\n             }", "fixed": "             nodeE.appendChild(positionXE);\n             Element positionYE = createNodePositionY(document, n);\n             nodeE.appendChild(positionYE);\n            if (minZ != 0f || maxZ != 0f) {\n                 Element positionZE = createNodePositionZ(document, n);\n                 nodeE.appendChild(positionZE);\n             }", "sourceBeforeFix": "minZ != 0f && maxZ != 0f", "sourceAfterFix": "minZ != 0f || maxZ != 0f"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedXChangeEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default XChangeEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedXChangeEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default XChangeEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<Status> getHomeTimeline(Paging paging) throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/home_timeline.json\", null, paging.asPostParameterList(), true));\n     }\n     /**", "fixed": "      */\n     public ResponseList<Status> getHomeTimeline(Paging paging) throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/home_timeline.json\", null, paging.asPostParameterList(), true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n \t * @param toCompare The element to set as the comparison reference.\n \t */\n\tpublic void setReference(T toCompare);\n \t/**\n \t * Checks, whether the given element is equal to the element that has been set as the comparison", "fixed": " \t * \n \t * @param toCompare The element to set as the comparison reference.\n \t */\n\tpublic abstract void setReference(T toCompare);\n \t/**\n \t * Checks, whether the given element is equal to the element that has been set as the comparison", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  private final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   }\n   \n  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  private final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "9e756fefbb053926754108335e3ad78b586439ac", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         WebsocketEndpoint websocketEndpoint = (WebsocketEndpoint)context.getEndpoint(uri);\n         WebsocketComponent component = websocketEndpoint.getComponent();\n         component.setMinThreads(1);\n        component.setMaxThreads(11);\n         Consumer consumer = websocketEndpoint.createConsumer(processor);\n         component.connect((WebsocketProducerConsumer) consumer);", "fixed": "         WebsocketEndpoint websocketEndpoint = (WebsocketEndpoint)context.getEndpoint(uri);\n         WebsocketComponent component = websocketEndpoint.getComponent();\n         component.setMinThreads(1);\n        component.setMaxThreads(20);\n         Consumer consumer = websocketEndpoint.createConsumer(processor);\n         component.connect((WebsocketProducerConsumer) consumer);", "sourceBeforeFix": "component.setMaxThreads(11)", "sourceAfterFix": "component.setMaxThreads(20)"}
{"fixCommitSHA1": "bcb6eeec1d978d6d572ebec875d34dc64aeb5121", "projectName": "alibaba.dubbo", "bugType": "Wrong Function Name", "problem": "         String methodKey = method + \".\" + key;\r\n         Number n = getNumbers().get(methodKey);\r\n         if (n != null) {\r\n            return n.intValue();\r\n         }\r\n         String value = getMethodParameter(method, key);\r\n         if (StringUtils.isEmpty(value)) {\r", "fixed": "         String methodKey = method + \".\" + key;\r\n         Number n = getNumbers().get(methodKey);\r\n         if (n != null) {\r\n            return n.longValue();\r\n         }\r\n         String value = getMethodParameter(method, key);\r\n         if (StringUtils.isEmpty(value)) {\r", "sourceBeforeFix": "n.intValue()", "sourceAfterFix": "n.doubleValue()"}
{"fixCommitSHA1": "37a968f250d8e6b6cfadebb046f2eb1295cd95e4", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": " \t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t}\n\t\t\t\tcatch (Throwable t) {\n \t\t\t\t\tlog.warn(\"Error while getting extensions from module: \" + moduleId, t);\n \t\t\t\t}\n \t\t\t}", "fixed": " \t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t}\n\t\t\t\tcatch (Exception t) {\n \t\t\t\t\tlog.warn(\"Error while getting extensions from module: \" + moduleId, t);\n \t\t\t\t}\n \t\t\t}", "sourceBeforeFix": "Throwable t", "sourceAfterFix": "Exception t"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleActionsPredicatesOptions_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(254);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {std::cout << $ctx->toStringTree(this) << std::endl;} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");", "fixed": " \tpublic void testMultipleActionsPredicatesOptions_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(253);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {std::cout << $ctx->toStringTree(this) << std::endl;} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");", "sourceBeforeFix": "new StringBuilder(254)", "sourceAfterFix": "new StringBuilder(253)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "d725e4c654270636bc7de92cc6d74683b1de29fe", "projectName": "facebook.presto", "bugType": "Wrong Function Name", "problem": "         boolean needPostProjectionCoercion = false;\n         for (FunctionCall aggregate : analysis.getAggregates(node)) {\n             Expression rewritten = subPlan.rewrite(aggregate);\n            Symbol newSymbol = symbolAllocator.newSymbol(rewritten, analysis.getType(aggregate));", "fixed": "         boolean needPostProjectionCoercion = false;\n         for (FunctionCall aggregate : analysis.getAggregates(node)) {\n             Expression rewritten = subPlan.rewrite(aggregate);\n            Symbol newSymbol = symbolAllocator.newSymbol(rewritten, analysis.getTypeWithCoercions(aggregate));", "sourceBeforeFix": "analysis.getType(windowFunction)", "sourceAfterFix": "analysis.getTypeWithCoercions(windowFunction)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedByMe(Paging paging) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedByMe(Paging paging) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should delete global property from database\n \t */\n \t@Authorized(PrivilegeConstants.PURGE_GLOBAL_PROPERTIES)\n\tpublic void purgeGlobalProperty(GlobalProperty globalProperty) throws APIException;\n \t/**\n \t * Completely remove the given global properties from the database", "fixed": " \t * @should delete global property from database\n \t */\n \t@Authorized(PrivilegeConstants.PURGE_GLOBAL_PROPERTIES)\n\tpublic void purgeGlobalProperty(GlobalProperty globalProperty);\n \t/**\n \t * Completely remove the given global properties from the database", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15841, value = \"Exception getting result from server %s: %s\")\n     String exceptionAwaitingResultFromServer(ServerIdentity server, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10841, value = \"Exception getting result from server %s: %s\")\n     String exceptionAwaitingResultFromServer(ServerIdentity server, String message);\n     /**", "sourceBeforeFix": "id=15871", "sourceAfterFix": "id=10871"}
{"fixCommitSHA1": "d78e066362deca6a9112d9330524825539db447f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \tpublic void draw (SpriteBatch batch, float x, float y, float width, float height) {\r\n \t\tTextureRegion region = getRegion();\r\n\t\tfloat regionWidth = region.getRegionWidth(), regionHeight = region.getRegionWidth();\r\n \t\tfloat remainingX = width % regionWidth, remainingY = height % regionHeight;\r\n \t\tfloat startX = x, startY = y;\r\n \t\tfloat endX = x + width - remainingX, endY = y + height - remainingY;\r", "fixed": " \tpublic void draw (SpriteBatch batch, float x, float y, float width, float height) {\r\n \t\tTextureRegion region = getRegion();\r\n\t\tfloat regionWidth = region.getRegionWidth(), regionHeight = region.getRegionHeight();\r\n \t\tfloat remainingX = width % regionWidth, remainingY = height % regionHeight;\r\n \t\tfloat startX = x, startY = y;\r\n \t\tfloat endX = x + width - remainingX, endY = y + height - remainingY;\r", "sourceBeforeFix": "region.getRegionWidth()", "sourceAfterFix": "region.getRegionHeight()"}
{"fixCommitSHA1": "c72cd791d1b2073240e2a9a7da80030823bcc331", "projectName": "eclipse.vert.x", "bugType": "Change Modifier", "problem": "   private ByteBuf buffer;\n  BufferImpl() {\n     this(0);\n   }", "fixed": "   private ByteBuf buffer;\n  public BufferImpl() {\n     this(0);\n   }", "sourceBeforeFix": "0", "sourceAfterFix": "1"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<Status> getPublicTimeline(long sinceID) throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() +\n                 \"statuses/public_timeline.json\", null, new Paging((long) sinceID).asPostParameterList(Paging.S)\n                 , false));\n     }", "fixed": "      */\n     public ResponseList<Status> getPublicTimeline(long sinceID) throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() +\n                 \"statuses/public_timeline.json\", null, new Paging((long) sinceID).asPostParameterList(Paging.S)\n                 , false));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweets_of_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweets_of_me.json\",null,true))"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform3(location, v);\r\n \t}\r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform3(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r", "fixed": " \t}\r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform3iv(location, v);\r\n \t}\r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform3iv(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r", "sourceBeforeFix": "GL20.glUniformMatrix4(location,transpose,value)", "sourceAfterFix": "GL20.glUniformMatrix4fv(location,transpose,value)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "2f880c73edb600ab92cdd580ac74f7388b5c6135", "projectName": "Alluxio.alluxio", "bugType": "Change Modifier", "problem": "     }\n   }\n  public void delete(int fileId, boolean recursive) {\n     if (INACTIVE) {\n       return;\n     }", "fixed": "     }\n   }\n  public synchronized void delete(int fileId, boolean recursive) {\n     if (INACTIVE) {\n       return;\n     }", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "4665dcf9ab41c3c61cd42aad296ebfe518bfa003", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\n \tpublic void glGenTextures (int n, IntBuffer textures) {\n\t\tGL.glGenTexturesEXT(n, textures, Memory.getPosition(textures));\n \t}\n \tpublic int glGetError () {", "fixed": " \t}\n \tpublic void glGenTextures (int n, IntBuffer textures) {\n\t\tGL.glGenTextures(n, textures, Memory.getPosition(textures));\n \t}\n \tpublic int glGetError () {", "sourceBeforeFix": "GL.glDrawArraysEXT(mode,first,count)", "sourceAfterFix": "GL.glDrawArrays(mode,first,count)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 15831, value = \"The master host controller cannot register slave host controllers as it's current running mode is '%s'\")\n     String adminOnlyModeCannotAcceptSlaves(RunningMode runningMode);\n     /**", "fixed": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 10831, value = \"The master host controller cannot register slave host controllers as it's current running mode is '%s'\")\n     String adminOnlyModeCannotAcceptSlaves(RunningMode runningMode);\n     /**", "sourceBeforeFix": "id=15860", "sourceAfterFix": "id=10860"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15833, value = \"%s is missing %s: %s\")\n     String requiredChildIsMissing(String parent, String child, String parentSpec);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10833, value = \"%s is missing %s: %s\")\n     String requiredChildIsMissing(String parent, String child, String parentSpec);\n     /**", "sourceBeforeFix": "id=15852", "sourceAfterFix": "id=10852"}
{"fixCommitSHA1": "93facb514e158589060eacc69e50cc7ff76082b2", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "     }\n    private <K> Collection<Data> convertKeysToData(Set<K> keys) {\n         if (keys == null || keys.isEmpty()) {\n             return Collections.emptyList();\n         }", "fixed": "     }\n    private <K> List<Data> convertKeysToData(Set<K> keys) {\n         if (keys == null || keys.isEmpty()) {\n             return Collections.emptyList();\n         }", "sourceBeforeFix": "Collection<Data>", "sourceAfterFix": "List<Data>"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15861, value = \"Cannot remove deployment %s from the domain as it is still used by server groups %s\")\n     String cannotRemoveDeploymentInUse(String name, List<String> groups);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10861, value = \"Cannot remove deployment %s from the domain as it is still used by server groups %s\")\n     String cannotRemoveDeploymentInUse(String name, List<String> groups);\n     /**", "sourceBeforeFix": "id=15838", "sourceAfterFix": "id=10838"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n \t * @throws IOException Thrown if any of the two views raises an exception.\n \t */\n\tpublic void copy(DataInputView source, DataOutputView target) throws IOException;\n }", "fixed": " \t * \n \t * @throws IOException Thrown if any of the two views raises an exception.\n \t */\n\tpublic abstract void copy(DataInputView source, DataOutputView target) throws IOException;\n }", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "051f6ab285eb21d16afeb87ed5bd9cfacfc67e47", "projectName": "neo4j.neo4j", "bugType": "Wrong Function Name", "problem": "      */\n     public int getDeletedRelationships()\n     {\n        return inner.deletedNodes();\n     }\n     /**", "fixed": "      */\n     public int getDeletedRelationships()\n     {\n        return inner.deletedRelationships();\n     }\n     /**", "sourceBeforeFix": "inner.deletedNodes()", "sourceAfterFix": "inner.deletedRelationships()"}
{"fixCommitSHA1": "7d5e825abd68a4ffcb86865149b917edf76a47b6", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "         String annotation)\n     {\n         if (ast == null) {\n            throw new NullPointerException(\"the ast is null\");\n         }\n         if (annotation == null) {\n            throw new NullPointerException(\"the annotation is null\");\n         }\n         if (StringUtils.isBlank(annotation)) {", "fixed": "         String annotation)\n     {\n         if (ast == null) {\n            throw new IllegalArgumentException(\"the ast is null\");\n         }\n         if (annotation == null) {\n            throw new IllegalArgumentException(\"the annotation is null\");\n         }\n         if (StringUtils.isBlank(annotation)) {", "sourceBeforeFix": "new NullPointerException(\"the ast is null\")", "sourceAfterFix": "new IllegalArgumentException(\"the ast is null\")"}
{"fixCommitSHA1": "2921e7bf0d74a65fdcc71d3ce3053037d14e4d44", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "     protected void handleMultiMapTryLock(String[] args) {\n         String key = args[1];\n        long time = (args.length > 2) ? Long.valueOf(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMultiMap().tryLock(key);", "fixed": "     protected void handleMultiMapTryLock(String[] args) {\n         String key = args[1];\n        long time = (args.length > 2) ? Long.parseLong(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMultiMap().tryLock(key);", "sourceBeforeFix": "Long.valueOf(args[2])", "sourceAfterFix": "Long.parseLong(args[2])"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15862, value = \"Invalid '%s' value: %d, the maximum index is %d\")\n     String invalidValue(String name, int value, int maxIndex);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10862, value = \"Invalid '%s' value: %d, the maximum index is %d\")\n     String invalidValue(String name, int value, int maxIndex);\n     /**", "sourceBeforeFix": "id=15841", "sourceAfterFix": "id=10841"}
{"fixCommitSHA1": "291fedc4f37709813c3544740c0563ee79358e65", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t\t\treturn;\n \t\t}\n\t\ttime.put(delta);\n \t\tfinal float currentLoad = delta == 0f ? 0f : current / delta;\n \t\tload.put((delta > 1f) ? currentLoad : delta * currentLoad + (1f - delta) * load.latest);", "fixed": " \t\t\treturn;\n \t\t}\n\t\ttime.put(current);\n \t\tfinal float currentLoad = delta == 0f ? 0f : current / delta;\n \t\tload.put((delta > 1f) ? currentLoad : delta * currentLoad + (1f - delta) * load.latest);", "sourceBeforeFix": "time.put(delta)", "sourceAfterFix": "time.put(current)"}
{"fixCommitSHA1": "0b302cf93edee0e2ab3c9998f380ede8e8ea7727", "projectName": "Atmosphere.atmosphere", "bugType": "Change Identifier Used", "problem": "                 }\n             }\n         }\n        return r;\n     }\n     private boolean isAtmosphereResourceValid(AtmosphereResource r) {", "fixed": "                 }\n             }\n         }\n        return this;\n     }\n     private boolean isAtmosphereResourceValid(AtmosphereResource r) {", "sourceBeforeFix": "return r; ", "sourceAfterFix": "return this; "}
{"fixCommitSHA1": "8abe81aaa656d78ac8b9e1a631a849025c9560b0", "projectName": "antlr.antlr4", "bugType": "Wrong Function Name", "problem": " \t\tchar[] serializedAtn = ATNSerializer.getSerializedAsChars(atn);\n \t\tATN deserialized = new ATNDeserializer().deserialize(serializedAtn);\n\t\treturn new ParserInterpreter(fileName, Arrays.asList(getTokenNames()), Arrays.asList(getRuleNames()), deserialized, tokenStream);\n \t}\n }", "fixed": " \t\tchar[] serializedAtn = ATNSerializer.getSerializedAsChars(atn);\n \t\tATN deserialized = new ATNDeserializer().deserialize(serializedAtn);\n\t\treturn new ParserInterpreter(fileName, Arrays.asList(getTokenDisplayNames()), Arrays.asList(getRuleNames()), deserialized, tokenStream);\n \t}\n }", "sourceBeforeFix": "getTokenNames()", "sourceAfterFix": "getTokenDisplayNames()"}
{"fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "       } else {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n           InputStream is = mHdfsFs.open(new Path(filePath));\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;", "fixed": "       } else {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           InputStream is = mHdfsFs.open(new Path(filePath));\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "5cf710f1b72db6a8413d42668b0e878243217165", "projectName": "Atmosphere.atmosphere", "bugType": "Change Identifier Used", "problem": "                         l.onSuspend(request, response);\n                         break;\n                     case RESUME:\n                        l.onSuspend(request, response);\n                         break;\n                     case DESTROYED:\n                         l.onDestroyed(request, response);", "fixed": "                         l.onSuspend(request, response);\n                         break;\n                     case RESUME:\n                        l.onResume(request, response);\n                         break;\n                     case DESTROYED:\n                         l.onDestroyed(request, response);", "sourceBeforeFix": "l.onSuspend(request,response)", "sourceAfterFix": "l.onResume(request,response)"}
{"fixCommitSHA1": "d9510ff4ae62d30d49f80749d8ab1f0d3c16d9a4", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         out.writeInt(migrationData.size());\n         for (Map.Entry<String, Data> entry : migrationData.entrySet()) {\n             out.writeUTF(entry.getKey());\n            out.writeObject(entry.getValue());\n         }\n     }", "fixed": "         out.writeInt(migrationData.size());\n         for (Map.Entry<String, Data> entry : migrationData.entrySet()) {\n             out.writeUTF(entry.getKey());\n            out.writeData(entry.getValue());\n         }\n     }", "sourceBeforeFix": "out.writeObject(entry.getValue())", "sourceAfterFix": "out.writeData(entry.getValue())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  private final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform3fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform3(location, v);\r\n \t}\r\n \tpublic void glUniform3fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform3(location, toFloatBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform3i (int location, int x, int y, int z) {\r", "fixed": " \t}\r\n \tpublic void glUniform3fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform3fv(location, v);\r\n \t}\r\n \tpublic void glUniform3fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform3fv(location, toFloatBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform3i (int location, int x, int y, int z) {\r", "sourceBeforeFix": "GL20.glGetVertexAttrib(index,pname,params)", "sourceAfterFix": "GL20.glGetVertexAttribfv(index,pname,params)"}
{"fixCommitSHA1": "3deba86fbc98387501b2076b82c35ac78a56de21", "projectName": "square.javapoet", "bugType": "Wrong Function Name", "problem": "     javaWriter.emitPackage(\"com.squareup\");\n     javaWriter.beginType(\"com.squareup.Foo\", \"class\", 0);\n     javaWriter.beginMethod(\"int\", \"foo\", 0, \"java.lang.String\", \"s\");\n    javaWriter.emitSingleLineCOmment(\"foo\");\n     javaWriter.emitStatement(\"int j = s.length() + %s\", 13);\n     javaWriter.endMethod();\n     javaWriter.endType();", "fixed": "     javaWriter.emitPackage(\"com.squareup\");\n     javaWriter.beginType(\"com.squareup.Foo\", \"class\", 0);\n     javaWriter.beginMethod(\"int\", \"foo\", 0, \"java.lang.String\", \"s\");\n    javaWriter.emitSingleLineComment(\"foo\");\n     javaWriter.emitStatement(\"int j = s.length() + %s\", 13);\n     javaWriter.endMethod();\n     javaWriter.endType();", "sourceBeforeFix": "javaWriter.emitSingleLineCOmment(\"foo\")", "sourceAfterFix": "javaWriter.emitSingleLineComment(\"foo\")"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "fixed": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "sourceBeforeFix": "GL20.glUniformMatrix3(location,transpose,value)", "sourceAfterFix": "GL20.glUniformMatrix3fv(location,transpose,value)"}
{"fixCommitSHA1": "8c68c5a3ae4d3d907528b64ec4b3daa5512d4be6", "projectName": "netty.netty", "bugType": "Change Unary Operator\t", "problem": "                if (config.isAutoRead() && !readPending) {\n                     clearEpollIn();\n                 }\n             }", "fixed": "                if (!config.isAutoRead() && !readPending) {\n                     clearEpollIn();\n                 }\n             }", "sourceBeforeFix": "config.isAutoRead()", "sourceAfterFix": "!config.isAutoRead()"}
{"fixCommitSHA1": "98a8875db1735c4a60bf1989fd727217a739baf0", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "template.sendBodyAndHeader(\"file:\n         MockEndpoint mock = getMockEndpoint(\"mock:result4\");\n        mock.expectedBodiesReceived(\"Hello World 3\");\n         assertMockEndpointsSatisfied();\n         oneExchangeDone.matchesMockWaitTime();", "fixed": "template.sendBodyAndHeader(\"file:\n         MockEndpoint mock = getMockEndpoint(\"mock:result4\");\n        mock.expectedBodiesReceivedInAnyOrder(\"Hello World 3\");\n         assertMockEndpointsSatisfied();\n         oneExchangeDone.matchesMockWaitTime();", "sourceBeforeFix": "mock.expectedBodiesReceived(\"Hello World 3\")", "sourceAfterFix": "mock.expectedBodiesReceivedInAnyOrder(\"Hello World 3\")"}
{"fixCommitSHA1": "e1d89ddbf6028369fd3117ff648fc6f16a1786fe", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "                     span.log(fields);\n                 }\n             } catch (Throwable t) {\n                LOG.error(\"OpenTracing: Failed to capture tracing data\", t);\n             }\n             return message;\n         }", "fixed": "                     span.log(fields);\n                 }\n             } catch (Throwable t) {\n                LOG.warn(\"OpenTracing: Failed to capture tracing data\", t);\n             }\n             return message;\n         }", "sourceBeforeFix": "LOG.error(\"OpenTracing: Failed to capture tracing data\",t)", "sourceAfterFix": "LOG.warn(\"OpenTracing: Failed to capture tracing data\",t)"}
{"fixCommitSHA1": "032efde651a14f8175861d96a10a26b8948f5a54", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "     public void shutdown() {\n         synchronized (lifecycleLock) {\n             fireLifecycleEvent(SHUTTING_DOWN);\n            instance.managementService.unregister();\n             instance.node.shutdown(false, true);\n             HazelcastInstanceFactory.remove(instance);\n             fireLifecycleEvent(SHUTDOWN);", "fixed": "     public void shutdown() {\n         synchronized (lifecycleLock) {\n             fireLifecycleEvent(SHUTTING_DOWN);\n            instance.managementService.destroy();\n             instance.node.shutdown(false, true);\n             HazelcastInstanceFactory.remove(instance);\n             fireLifecycleEvent(SHUTDOWN);", "sourceBeforeFix": "instance.managementService.unregister()", "sourceAfterFix": "instance.managementService.destroy()"}
{"fixCommitSHA1": "a6e7fb22578c900a5b806d2a429a05d81a722635", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t\r\n \tpublic void setOriginBasedPosition (float x, float y) {\r\n\t\tsetPosition(x - this.originX, y - this.originX);\r\n \t}\r\n \t/** Sets the x position where the sprite will be drawn. If origin, rotation, or scale are changed, it is slightly more efficient\r", "fixed": " \t\r\n \tpublic void setOriginBasedPosition (float x, float y) {\r\n\t\tsetPosition(x - this.originX, y - this.originY);\r\n \t}\r\n \t/** Sets the x position where the sprite will be drawn. If origin, rotation, or scale are changed, it is slightly more efficient\r", "sourceBeforeFix": "this.originX", "sourceAfterFix": "this.originY"}
{"fixCommitSHA1": "53694f29adf8c68992e1b966c86380219f438c14", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         String uri = getScpUri() + \"?username=admin&password=admin&knownHostsFile=\" + getKnownHostsFile();\n         template.sendBodyAndHeader(uri, \"Bye World\", Exchange.FILE_NAME, \"mysub/bye.txt\");\n        Thread.sleep(100);\n         File file = new File(getScpPath() + \"/mysub/bye.txt\");\n         assertFileExists(file.getAbsolutePath());", "fixed": "         String uri = getScpUri() + \"?username=admin&password=admin&knownHostsFile=\" + getKnownHostsFile();\n         template.sendBodyAndHeader(uri, \"Bye World\", Exchange.FILE_NAME, \"mysub/bye.txt\");\n        Thread.sleep(200);\n         File file = new File(getScpPath() + \"/mysub/bye.txt\");\n         assertFileExists(file.getAbsolutePath());", "sourceBeforeFix": "Thread.sleep(100)", "sourceAfterFix": "Thread.sleep(200)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getMentions() throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",\n                 null, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getMentions() throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",\n                 null, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface CxfEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedCxfEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface CxfEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedCxfEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetProgramiv (int program, int pname, IntBuffer params) {\r\n\t\tGL20.glGetProgram(program, pname, params);\r\n \t}\r\n \tpublic void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tEXTFramebufferObject.glGetRenderbufferParameterEXT(target, pname, params);\r\n \t}\r\n \tpublic String glGetShaderInfoLog (int shader) {\r", "fixed": " \t}\r\n \tpublic void glGetProgramiv (int program, int pname, IntBuffer params) {\r\n\t\tGL20.glGetProgramiv(program, pname, params);\r\n \t}\r\n \tpublic void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tEXTFramebufferObject.glGetRenderbufferParameterivEXT(target, pname, params);\r\n \t}\r\n \tpublic String glGetShaderInfoLog (int shader) {\r", "sourceBeforeFix": "GL20.glUniform2(location,toIntBuffer(v,offset,count << 1))", "sourceAfterFix": "GL20.glUniform2iv(location,toIntBuffer(v,offset,count << 1))"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15849, value = \"Operation %s for address %s can only be handled by the \" +\n             \"master Domain Controller; this host is not the master Domain Controller\")\n     String masterDomainControllerOnlyOperation(String operation, PathAddress address);", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10849, value = \"Operation %s for address %s can only be handled by the \" +\n             \"master Domain Controller; this host is not the master Domain Controller\")\n     String masterDomainControllerOnlyOperation(String operation, PathAddress address);", "sourceBeforeFix": "id=15858", "sourceAfterFix": "id=10858"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "fixed": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "sourceBeforeFix": "GL20.glUniformMatrix3(location,transpose,value)", "sourceAfterFix": "GL20.glUniformMatrix3fv(location,transpose,value)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedNsqEndpointBuilder\n             extends\n                 AdvancedNsqEndpointConsumerBuilder, AdvancedNsqEndpointProducerBuilder {\n         default NsqEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedNsqEndpointBuilder\n             extends\n                 AdvancedNsqEndpointConsumerBuilder, AdvancedNsqEndpointProducerBuilder {\n         default NsqEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "63b7cec3050338899e04957cbc7039cd509cd214", "projectName": "cucumber.cucumber-jvm", "bugType": "Change Identifier Used", "problem": "         RuntimeOptionsFactory runtimeOptionsFactory = new RuntimeOptionsFactory(SubClassWithMonoChromeTrue.class);\n         RuntimeOptions runtimeOptions = runtimeOptionsFactory.create();\n        assertFalse(runtimeOptions.isMonochrome());\n     }", "fixed": "         RuntimeOptionsFactory runtimeOptionsFactory = new RuntimeOptionsFactory(SubClassWithMonoChromeTrue.class);\n         RuntimeOptions runtimeOptions = runtimeOptionsFactory.create();\n        assertTrue(runtimeOptions.isMonochrome());\n     }", "sourceBeforeFix": "assertFalse(runtimeOptions.isMonochrome())", "sourceAfterFix": "assertTrue(runtimeOptions.isMonochrome())"}
{"fixCommitSHA1": "d9ce8ddd35f22bba791a97e17d14ce4ff0a9f87c", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "     }\n     static String[] aliases(final ModelNode node) {\n        if(node.has(Constants.ALIAS)) {\n             final ModelNode aliases = node.require(Constants.ALIAS);\n             final int size = aliases.asInt();\n             final String[] array = new String[size];", "fixed": "     }\n     static String[] aliases(final ModelNode node) {\n        if(node.hasDefined(Constants.ALIAS)) {\n             final ModelNode aliases = node.require(Constants.ALIAS);\n             final int size = aliases.asInt();\n             final String[] array = new String[size];", "sourceBeforeFix": "node.has(Constants.ALIAS)", "sourceAfterFix": "node.hasDefined(Constants.ALIAS)"}
{"fixCommitSHA1": "780a95c41d5d9ddafe1a237628183020746825a8", "projectName": "libgdx.libgdx", "bugType": "Change Operand ", "problem": " \t * before growing the backing table. */\n \tpublic IntSet (int initialCapacity, float loadFactor) {\n \t\tif (initialCapacity < 0) throw new IllegalArgumentException(\"initialCapacity must be >= 0: \" + initialCapacity);\n\t\tif (capacity > 1 << 30) throw new IllegalArgumentException(\"initialCapacity is too large: \" + initialCapacity);\n \t\tcapacity = MathUtils.nextPowerOfTwo(initialCapacity);\n \t\tif (loadFactor <= 0) throw new IllegalArgumentException(\"loadFactor must be > 0: \" + loadFactor);", "fixed": " \t * before growing the backing table. */\n \tpublic IntSet (int initialCapacity, float loadFactor) {\n \t\tif (initialCapacity < 0) throw new IllegalArgumentException(\"initialCapacity must be >= 0: \" + initialCapacity);\n\t\tif (initialCapacity > 1 << 30) throw new IllegalArgumentException(\"initialCapacity is too large: \" + initialCapacity);\n \t\tcapacity = MathUtils.nextPowerOfTwo(initialCapacity);\n \t\tif (loadFactor <= 0) throw new IllegalArgumentException(\"loadFactor must be > 0: \" + loadFactor);", "sourceBeforeFix": "capacity > 1 << 30", "sourceAfterFix": "initialCapacity > 1 << 30"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStream<OUT> writeAsText(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsText<OUT> format, int batchSize, OUT endTuple) {\n\t\tDataStream<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByBatches<OUT>(\n \t\t\t\tpath, format, batchSize, endTuple), null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "fixed": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStreamSink<OUT> writeAsText(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsText<OUT> format, int batchSize, OUT endTuple) {\n\t\tDataStreamSink<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByBatches<OUT>(\n \t\t\t\tpath, format, batchSize, endTuple), null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "f94694c2231e5c1025b76bcfe0337304a76ec94a", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "                     if (getColumnClass(counter) == ParseTreeTableModel.class) {\n                         final MouseEvent mouseEvent = (MouseEvent) event;\n                         final MouseEvent newMouseEvent = new MouseEvent(tree, mouseEvent.getID(),\n                                mouseEvent.getWhen(), mouseEvent.getModifiers(),\n                                 mouseEvent.getX() - getCellRect(0, counter, true).x,\n                                 mouseEvent.getY(), mouseEvent.getClickCount(),\n                                 mouseEvent.isPopupTrigger());", "fixed": "                     if (getColumnClass(counter) == ParseTreeTableModel.class) {\n                         final MouseEvent mouseEvent = (MouseEvent) event;\n                         final MouseEvent newMouseEvent = new MouseEvent(tree, mouseEvent.getID(),\n                                mouseEvent.getWhen(), mouseEvent.getModifiersEx(),\n                                 mouseEvent.getX() - getCellRect(0, counter, true).x,\n                                 mouseEvent.getY(), mouseEvent.getClickCount(),\n                                 mouseEvent.isPopupTrigger());", "sourceBeforeFix": "mouseEvent.getModifiers()", "sourceAfterFix": "mouseEvent.getModifiersEx()"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleAlternativesWithCommonLabel_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(561);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "fixed": " \tpublic void testMultipleAlternativesWithCommonLabel_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(560);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "sourceBeforeFix": "new StringBuilder(561)", "sourceAfterFix": "new StringBuilder(560)"}
{"fixCommitSHA1": "780e4a27f74b52de0a0fff72c71d0006c60a2165", "projectName": "druid-io.druid", "bugType": "Change Numeric Literal", "problem": "       notifyLatch.countDown();\n       try {\n        waitYieldLatch.await(25, TimeUnit.MILLISECONDS);\n       }\n       catch (Exception e) {\n         throw Throwables.propagate(e);", "fixed": "       notifyLatch.countDown();\n       try {\n        waitYieldLatch.await(1000, TimeUnit.MILLISECONDS);\n       }\n       catch (Exception e) {\n         throw Throwables.propagate(e);", "sourceBeforeFix": "queryNotifyLatch.await(25,TimeUnit.MILLISECONDS)", "sourceAfterFix": "queryNotifyLatch.await(1000,TimeUnit.MILLISECONDS)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fc13cf7d7843029d807878869e3c64cace5640dd", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "     }\n     @Override\n    public Cell deepClone() {\n       throw new UnsupportedOperationException();\n     }", "fixed": "     }\n     @Override\n    public ExtendedCell deepClone() {\n       throw new UnsupportedOperationException();\n     }", "sourceBeforeFix": "@Override public Cell deepClone(){   throw new UnsupportedOperationException(); } ", "sourceAfterFix": "@Override public ExtendedCell deepClone(){   throw new UnsupportedOperationException(); } "}
{"fixCommitSHA1": "e7bf415427b37bbc760ff9b9c69650db8ec477e4", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnBean(Client.class)\n\t@ConditionalOnEnablednHealthIndicator(\"elasticsearch\")\n \t@EnableConfigurationProperties(ElasticsearchHealthIndicatorProperties.class)\n \tpublic static class ElasticsearchHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<ElasticsearchHealthIndicator, Client> {", "fixed": " \t@Configuration\n \t@ConditionalOnBean(Client.class)\n\t@ConditionalOnEnabledHealthIndicator(\"elasticsearch\")\n \t@EnableConfigurationProperties(ElasticsearchHealthIndicatorProperties.class)\n \tpublic static class ElasticsearchHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<ElasticsearchHealthIndicator, Client> {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"solr\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"solr\")"}
{"fixCommitSHA1": "818764ab9f6ca06949b523f32080719c520c926b", "projectName": "google.closure-compiler", "bugType": "Change Numeric Literal", "problem": " class UnionTypeBuilder implements Serializable {\n   private static final long serialVersionUID = 1L;\n  private static final int DEFAULT_MAX_UNION_SIZE = 20;\n   private final JSTypeRegistry registry;\n   private final List<JSType> alternates = Lists.newArrayList();", "fixed": " class UnionTypeBuilder implements Serializable {\n   private static final long serialVersionUID = 1L;\n  private static final int DEFAULT_MAX_UNION_SIZE = 30;\n   private final JSTypeRegistry registry;\n   private final List<JSType> alternates = Lists.newArrayList();", "sourceBeforeFix": "DEFAULT_MAX_UNION_SIZE=20", "sourceAfterFix": "DEFAULT_MAX_UNION_SIZE=30"}
{"fixCommitSHA1": "4be7f3630491ebbb716abb50233b7b453c39eb53", "projectName": "apache.camel", "bugType": "Same Function Less Args", "problem": "             String messageSelector, \n             boolean topic, \n             String durableSubscriptionId) throws Exception {\n        return createMessageConsumer(session, destinationName, messageSelector, topic, durableSubscriptionId, true);\n     }\n     public static MessageConsumer createMessageConsumer(", "fixed": "             String messageSelector, \n             boolean topic, \n             String durableSubscriptionId) throws Exception {\n        return createMessageConsumer(session, destinationName, messageSelector, topic, durableSubscriptionId, false);\n     }\n     public static MessageConsumer createMessageConsumer(", "sourceBeforeFix": "createMessageConsumer(session,destinationName,null,false,null,true)", "sourceAfterFix": "createMessageConsumer(session,destinationName,null,false,null)"}
{"fixCommitSHA1": "435805f612bf78ee0d2fd93cd90fa6c6740e17c2", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         String uri = getScpUri() + \"?username=admin&privateKeyFile=src/test/resources/camel-key.priv&privateKeyFilePassphrase=password&knownHostsFile=\" + getKnownHostsFile();\n         template.sendBodyAndHeader(uri, \"Hallo Welt\", Exchange.FILE_NAME, \"welt.txt\");\n        Thread.sleep(200);\n         File file = new File(getScpPath() + \"/welt.txt\");\n         assertFileExists(file.getAbsolutePath());", "fixed": "         String uri = getScpUri() + \"?username=admin&privateKeyFile=src/test/resources/camel-key.priv&privateKeyFilePassphrase=password&knownHostsFile=\" + getKnownHostsFile();\n         template.sendBodyAndHeader(uri, \"Hallo Welt\", Exchange.FILE_NAME, \"welt.txt\");\n        Thread.sleep(500);\n         File file = new File(getScpPath() + \"/welt.txt\");\n         assertFileExists(file.getAbsolutePath());", "sourceBeforeFix": "Thread.sleep(200)", "sourceAfterFix": "Thread.sleep(500)"}
{"fixCommitSHA1": "678913db7377dc67b3cbe92f6c9c9e401b777d97", "projectName": "facebook.presto", "bugType": "Wrong Function Name", "problem": "                 else {\n                     callback.process(entry.getFileStatus(), entry.getBlockLocations());\n                 }\n                if (future.isCancelled()) {\n                     return;\n                 }\n             }", "fixed": "                 else {\n                     callback.process(entry.getFileStatus(), entry.getBlockLocations());\n                 }\n                if (future.isDone()) {\n                     return;\n                 }\n             }", "sourceBeforeFix": "future.isCancelled()", "sourceAfterFix": "future.isDone()"}
{"fixCommitSHA1": "22d5241b5f75631e9cfda82a6912a2555eecb165", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "         if (channel == null) {\n             initializeChannel();\n             if (endpoint.isSynchronous()) {\n                LOG.info(\"Getting synchronous method stub from channel\");\n                 grpcStub = GrpcUtils.constructGrpcBlockingStub(configuration.getServicePackage(), configuration.getServiceName(), channel, endpoint.getCamelContext());\n             } else {\n                LOG.info(\"Getting asynchronous method stub from channel\");\n                 grpcStub = GrpcUtils.constructGrpcAsyncStub(configuration.getServicePackage(), configuration.getServiceName(), channel, endpoint.getCamelContext());\n             }\n         }", "fixed": "         if (channel == null) {\n             initializeChannel();\n             if (endpoint.isSynchronous()) {\n                LOG.debug(\"Getting synchronous method stub from channel\");\n                 grpcStub = GrpcUtils.constructGrpcBlockingStub(configuration.getServicePackage(), configuration.getServiceName(), channel, endpoint.getCamelContext());\n             } else {\n                LOG.debug(\"Getting asynchronous method stub from channel\");\n                 grpcStub = GrpcUtils.constructGrpcAsyncStub(configuration.getServicePackage(), configuration.getServiceName(), channel, endpoint.getCamelContext());\n             }\n         }", "sourceBeforeFix": "LOG.info(\"Getting asynchronous method stub from channel\")", "sourceAfterFix": "LOG.debug(\"Getting asynchronous method stub from channel\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  private final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface NetWeaverEndpointBuilder\n            extends\n                EndpointProducerBuilder {\n         default AdvancedNetWeaverEndpointBuilder advanced() {\n             return (AdvancedNetWeaverEndpointBuilder) this;\n         }", "fixed": "     \n    public interface NetWeaverEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedNetWeaverEndpointBuilder advanced() {\n             return (AdvancedNetWeaverEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "c66b6a0f0f3eba00529ca81d9392805767c361e3", "projectName": "alibaba.canal", "bugType": "Change Numeric Literal", "problem": "         putEntry(70, \"greek\", \"greek_bin\", \"ISO8859_7\");\r\n         putEntry(71, \"hebrew\", \"hebrew_bin\", \"ISO8859_8\");\r\n         putEntry(72, \"hp8\", \"hp8_bin\", \"US-ASCII\");\r\n        putEntry(73, \"keybcs2\", \"keybcs2_bin\", \"Cp895\");\r\n         putEntry(74, \"koi8r\", \"koi8r_bin\", \"KOI8_R\");\r\n         putEntry(75, \"koi8u\", \"koi8u_bin\", \"KOI8_U\");\r\n         putEntry(77, \"latin2\", \"latin2_bin\", \"ISO8859_2\");\r", "fixed": "         putEntry(70, \"greek\", \"greek_bin\", \"ISO8859_7\");\r\n         putEntry(71, \"hebrew\", \"hebrew_bin\", \"ISO8859_8\");\r\n         putEntry(72, \"hp8\", \"hp8_bin\", \"US-ASCII\");\r\n        putEntry(73, \"keybcs2\", \"keybcs2_bin\", \"Cp852\");\r\n         putEntry(74, \"koi8r\", \"koi8r_bin\", \"KOI8_R\");\r\n         putEntry(75, \"koi8u\", \"koi8u_bin\", \"KOI8_U\");\r\n         putEntry(77, \"latin2\", \"latin2_bin\", \"ISO8859_2\");\r", "sourceBeforeFix": "new Entry[0xff]", "sourceAfterFix": "new Entry[2048]"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<Status> getFriendsTimeline(Paging paging) throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\",null, paging.asPostParameterList(), true));\n     }\n     /**", "fixed": "      */\n     public ResponseList<Status> getFriendsTimeline(Paging paging) throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\",null, paging.asPostParameterList(), true));\n     }\n     /**", "sourceBeforeFix": "DirectMessage.constructDirectMessages(get(getBaseURL() + \"direct_messages.json\",true))", "sourceAfterFix": "DirectMessage.createDirectMessageList(get(getBaseURL() + \"direct_messages.json\",true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface ReactiveStreamsEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedReactiveStreamsEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface ReactiveStreamsEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedReactiveStreamsEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15844, value = \"Invalid rollout plan. Server group %s appears more than once in the plan.\")\n     String invalidRolloutPlanGroupAlreadyExists(String group);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10844, value = \"Invalid rollout plan. Server group %s appears more than once in the plan.\")\n     String invalidRolloutPlanGroupAlreadyExists(String group);\n     /**", "sourceBeforeFix": "id=15839", "sourceAfterFix": "id=10839"}
{"fixCommitSHA1": "492fd118d4902c730fc8619851a7135b623631e2", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "         MockEndpoint result = getMockEndpoint(\"mock:result\");\r\n        result.expectedMessageCount(3);\r\n         result.expectedBodiesReceived(\"Message 1c\", \"Message 2b\", \"Message 3a\");\r", "fixed": "         MockEndpoint result = getMockEndpoint(\"mock:result\");\r\n        result.expectedMinimumMessageCount(3);\r\n         result.expectedBodiesReceived(\"Message 1c\", \"Message 2b\", \"Message 3a\");\r", "sourceBeforeFix": "result.expectedMessageCount(2)", "sourceAfterFix": "result.expectedMinimumMessageCount(2)"}
{"fixCommitSHA1": "cac8c34ac61668aa269366408e613ac0ed5db729", "projectName": "junit-team.junit", "bugType": "Change Modifier", "problem": "     }\n     @FixMethodOrder(MethodSorters.JVM)\n    private static class DummySortJvm {\n         Object alpha(int i, double d, Thread t) {return null;}\n         void beta(int[][] x) {}\n         int gamma() {return 0;}", "fixed": "     }\n     @FixMethodOrder(MethodSorters.JVM)\n    static class DummySortJvm {\n         Object alpha(int i, double d, Thread t) {return null;}\n         void beta(int[][] x) {}\n         int gamma() {return 0;}", "sourceBeforeFix": "10", "sourceAfterFix": "8"}
{"fixCommitSHA1": "4665dcf9ab41c3c61cd42aad296ebfe518bfa003", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\n \t\tBuffer pixels) {\n\t\tGL.glTexSubImage2DEXT(target, level, xoffset, yoffset, width, height, format, type, pixels, Memory.getPosition(pixels));\n \t}\n \tpublic void glViewport (int x, int y, int width, int height) {", "fixed": " \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\n \t\tBuffer pixels) {\n\t\tGL.glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels, Memory.getPosition(pixels));\n \t}\n \tpublic void glViewport (int x, int y, int width, int height) {", "sourceBeforeFix": "GL.glGenTexturesEXT(n,textures,Memory.getPosition(textures))", "sourceAfterFix": "GL.glGenTextures(n,textures,Memory.getPosition(textures))"}
{"fixCommitSHA1": "1adccc7a5bdc515f01ae6bd644097ab85336bd84", "projectName": "hazelcast.hazelcast", "bugType": "Same Function More Args", "problem": "         populateNearCache(clientMap, 1000);\n        HazelcastInstance member = hazelcastFactory.newHazelcastInstance();\n         final ClearEventCounterEventHandler handler = new ClearEventCounterEventHandler();", "fixed": "         populateNearCache(clientMap, 1000);\n        HazelcastInstance member = hazelcastFactory.newHazelcastInstance(newConfig());\n         final ClearEventCounterEventHandler handler = new ClearEventCounterEventHandler();", "sourceBeforeFix": "hazelcastFactory.newHazelcastClient()", "sourceAfterFix": "hazelcastFactory.newHazelcastClient(newClientConfig())"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface QueueServiceEndpointBuilder\n             extends\n                 QueueServiceEndpointConsumerBuilder, QueueServiceEndpointProducerBuilder {\n         default AdvancedQueueServiceEndpointBuilder advanced() {", "fixed": "     \n    public interface QueueServiceEndpointBuilder\n             extends\n                 QueueServiceEndpointConsumerBuilder, QueueServiceEndpointProducerBuilder {\n         default AdvancedQueueServiceEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should fail if global property being updated does not already exist\n \t * @should update a global property whose typed value is handled by a custom datatype\n \t */\n\tpublic void updateGlobalProperty(String propertyName, String propertyValue) throws IllegalStateException;\n \t/**\n \t * Save the given global property to the database", "fixed": " \t * @should fail if global property being updated does not already exist\n \t * @should update a global property whose typed value is handled by a custom datatype\n \t */\n\tpublic void updateGlobalProperty(String propertyName, String propertyValue);\n \t/**\n \t * Save the given global property to the database", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(741);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {Console.WriteLine($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "fixed": " \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(740);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {Console.WriteLine($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "sourceBeforeFix": "new StringBuilder(741)", "sourceAfterFix": "new StringBuilder(740)"}
{"fixCommitSHA1": "e6bf561b6532c12c8bb202ba7e03aa3f2e6b8a2b", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \tpublic Skin loadSync (AssetManager manager, String fileName, SkinParameter parameter) {\r\n \t\tString texturePath;\r\n \t\tif (parameter == null)\r\n\t\t\ttexturePath = Gdx.files.internal(fileName).nameWithoutExtension() + \".png\";\r\n \t\telse\r\n \t\t\ttexturePath = parameter.texturePath;\r\n \t\tTexture texture = manager.get(texturePath, Texture.class);\r", "fixed": " \tpublic Skin loadSync (AssetManager manager, String fileName, SkinParameter parameter) {\r\n \t\tString texturePath;\r\n \t\tif (parameter == null)\r\n\t\t\ttexturePath = Gdx.files.internal(fileName).pathWithoutExtension() + \".png\";\r\n \t\telse\r\n \t\t\ttexturePath = parameter.texturePath;\r\n \t\tTexture texture = manager.get(texturePath, Texture.class);\r", "sourceBeforeFix": "Gdx.files.internal(fileName).nameWithoutExtension()", "sourceAfterFix": "Gdx.files.internal(fileName).pathWithoutExtension()"}
{"fixCommitSHA1": "bbe22e599c7516a08f1a0c5aff540d4ef5a02eb3", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "         lineNo = sourceMapping.getLineNumber();\n         charNo = sourceMapping.getColumnPosition();\n         String identifier = sourceMapping.getIdentifier();\n        if (sourceMapping != null && !identifier.isEmpty()) {\n           originalName = identifier;\n         }\n       }", "fixed": "         lineNo = sourceMapping.getLineNumber();\n         charNo = sourceMapping.getColumnPosition();\n         String identifier = sourceMapping.getIdentifier();\n        if (identifier != null && !identifier.isEmpty()) {\n           originalName = identifier;\n         }\n       }", "sourceBeforeFix": "sourceMapping != null", "sourceAfterFix": "identifier != null"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface Olingo2EndpointBuilder\n             extends\n                 Olingo2EndpointConsumerBuilder, Olingo2EndpointProducerBuilder {\n         default AdvancedOlingo2EndpointBuilder advanced() {", "fixed": "     \n    public interface Olingo2EndpointBuilder\n             extends\n                 Olingo2EndpointConsumerBuilder, Olingo2EndpointProducerBuilder {\n         default AdvancedOlingo2EndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(741);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {Console.WriteLine($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "fixed": " \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(740);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {Console.WriteLine($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "sourceBeforeFix": "new StringBuilder(246)", "sourceAfterFix": "new StringBuilder(245)"}
{"fixCommitSHA1": "a295b91c37f681199a83fdb963344c19e0d015c0", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "     protected void handleMapTryLock(String[] args) {\n         String key = args[1];\n        long time = (args.length > 2) ? Long.valueOf(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMap().tryLock(key);", "fixed": "     protected void handleMapTryLock(String[] args) {\n         String key = args[1];\n        long time = (args.length > 2) ? Long.parseLong(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMap().tryLock(key);", "sourceBeforeFix": "Long.valueOf(args[2])", "sourceAfterFix": "Long.parseLong(args[2])"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15845, value = \"Invalid rollout plan. Server group %s has a %s value of %s; must be between 0 and 100.\")\n     String invalidRolloutPlanRange(String name, String propertyName, int value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10845, value = \"Invalid rollout plan. Server group %s has a %s value of %s; must be between 0 and 100.\")\n     String invalidRolloutPlanRange(String name, String propertyName, int value);\n     /**", "sourceBeforeFix": "id=15840", "sourceAfterFix": "id=10840"}
{"fixCommitSHA1": "ac2d51d28fd28794371073b7009abd88f31cbedf", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "                 + \"    </test:setState>\"\n                 + \"  </soapenv:Body>\"\n                 + \"</soapenv:Envelope>\";\nString result = HttpRequest.put(\"http:\n         System.out.println(result);\n     }", "fixed": "                 + \"    </test:setState>\"\n                 + \"  </soapenv:Body>\"\n                 + \"</soapenv:Envelope>\";\nString result = HttpRequest.post(\"http:\n         System.out.println(result);\n     }", "sourceBeforeFix": "HttpRequest.put(\"http://localhost:8080/ejbws-example/SingletonEndpoint\",message,10,SECONDS)", "sourceAfterFix": "HttpRequest.post(\"http://localhost:8080/ejbws-example/SingletonEndpoint\",message,10,SECONDS)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "f8c20919f9c2e18e48142c2712e34298f98b983e", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t\t}\n \t\tfactory.setInitializers(Arrays.asList(initializers[2], initializers[3]));\n \t\tfactory.addInitializers(initializers[4], initializers[5]);\n\t\tthis.container = factory.getEmbdeddedServletContainer(initializers[0],\n \t\t\t\tinitializers[1]);\n \t\tInOrder ordered = inOrder((Object[]) initializers);\n \t\tfor (ServletContextInitializer initializer : initializers) {", "fixed": " \t\t}\n \t\tfactory.setInitializers(Arrays.asList(initializers[2], initializers[3]));\n \t\tfactory.addInitializers(initializers[4], initializers[5]);\n\t\tthis.container = factory.getEmbeddedServletContainer(initializers[0],\n \t\t\t\tinitializers[1]);\n \t\tInOrder ordered = inOrder((Object[]) initializers);\n \t\tfor (ServletContextInitializer initializer : initializers) {", "sourceBeforeFix": "factory.getEmbdeddedServletContainer()", "sourceAfterFix": "factory.getEmbeddedServletContainer()"}
{"fixCommitSHA1": "19c2a076c25faf94ae9e8f4072f2a4590c9ee1fe", "projectName": "spring-projects.spring-boot", "bugType": "Wrong Function Name", "problem": " \t\t\t\tnew FileWriter(this.temporaryFolder.newFile(\"test.txt\")));\n \t\tAbstractEmbeddedServletContainerFactory factory = getFactory();\n \t\tfactory.setDocumentRoot(this.temporaryFolder.getRoot());\n\t\tthis.container = factory.getEmbdeddedServletContainer();\nassertThat(getResponse(\"http:\n \t}", "fixed": " \t\t\t\tnew FileWriter(this.temporaryFolder.newFile(\"test.txt\")));\n \t\tAbstractEmbeddedServletContainerFactory factory = getFactory();\n \t\tfactory.setDocumentRoot(this.temporaryFolder.getRoot());\n\t\tthis.container = factory.getEmbeddedServletContainer();\nassertThat(getResponse(\"http:\n \t}", "sourceBeforeFix": "factory.getEmbdeddedServletContainer()", "sourceAfterFix": "factory.getEmbeddedServletContainer()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15844, value = \"Invalid rollout plan. Server group %s appears more than once in the plan.\")\n     String invalidRolloutPlanGroupAlreadyExists(String group);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10844, value = \"Invalid rollout plan. Server group %s appears more than once in the plan.\")\n     String invalidRolloutPlanGroupAlreadyExists(String group);\n     /**", "sourceBeforeFix": "id=15867", "sourceAfterFix": "id=10867"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public Trends getTrends() throws TwitterException {\n        return Trends.constructTrends(get(getSearchBaseURL() + \"trends.json\", false));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n      */\n     public Trends getTrends() throws TwitterException {\n        return Trends.createTrends(get(getSearchBaseURL() + \"trends.json\", false));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_to_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_to_me.json\",null,true))"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_kr_1() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub1445\uc6d46\uc77c\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_kr_1() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub1445\uc6d46\uc77c\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AtomixMessagingEndpointBuilder\n             extends\n                 AtomixMessagingEndpointConsumerBuilder, AtomixMessagingEndpointProducerBuilder {\n         default AdvancedAtomixMessagingEndpointBuilder advanced() {", "fixed": "     \n    public interface AtomixMessagingEndpointBuilder\n             extends\n                 AtomixMessagingEndpointConsumerBuilder, AtomixMessagingEndpointProducerBuilder {\n         default AdvancedAtomixMessagingEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "fixed": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2fv(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2fv(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "sourceBeforeFix": "GL20.glUniform2(location,v)", "sourceAfterFix": "GL20.glUniform2fv(location,v)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface RefEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedRefEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface RefEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedRefEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "1adccc7a5bdc515f01ae6bd644097ab85336bd84", "projectName": "hazelcast.hazelcast", "bugType": "Same Function More Args", "problem": "         ((NearCachedClientMapProxy) clientMap).addNearCacheInvalidateListener(handler);\n        HazelcastInstance anotherClient = hazelcastFactory.newHazelcastClient();\n         IMap<Object, Object> anotherClientMap = anotherClient.getMap(clientMap.getName());\n         anotherClientMap.evictAll();", "fixed": "         ((NearCachedClientMapProxy) clientMap).addNearCacheInvalidateListener(handler);\n        HazelcastInstance anotherClient = hazelcastFactory.newHazelcastClient(newClientConfig());\n         IMap<Object, Object> anotherClientMap = anotherClient.getMap(clientMap.getName());\n         anotherClientMap.evictAll();", "sourceBeforeFix": "hazelcastFactory.newHazelcastClient()", "sourceAfterFix": "hazelcastFactory.newHazelcastClient(newClientConfig())"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getFavorites(String id, int page) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"favorites/\" + id + \".json\", \"page\", String.valueOf(page), true));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getFavorites(String id, int page) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"favorites/\" + id + \".json\", \"page\", String.valueOf(page), true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline.json\",true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "0c76b564cffde70b893bc9135c0acc03fcbe69ee", "projectName": "hazelcast.hazelcast", "bugType": "Change Numeric Literal", "problem": "     }\n     public static long combineToLong(int x, int y) {\n        return ((long) x << 32) | ((long) y & 0xFFFFFFFL);\n     }\n     public static int extractInt(long value, boolean lowerBits) {", "fixed": "     }\n     public static long combineToLong(int x, int y) {\n        return ((long) x << 32) | ((long) y & 0xFFFFFFFFL);\n     }\n     public static int extractInt(long value, boolean lowerBits) {", "sourceBeforeFix": "(long)y & 0xFFFFFFFL", "sourceAfterFix": "(long)y & 0xFFFFFFFFL"}
{"fixCommitSHA1": "bc5195afc618906a469840ca6f51315e7342b56a", "projectName": "hazelcast.hazelcast", "bugType": "Change Numeric Literal", "problem": "      */\n     @Test\n     public void sync_whenManyGettersAndLotsOfWaiting() throws Exception {\n        int callTimeout = 5000;\n         Config config = new Config().setProperty(OPERATION_CALL_TIMEOUT_MILLIS.getName(), \"\" + callTimeout);\n         TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(2);", "fixed": "      */\n     @Test\n     public void sync_whenManyGettersAndLotsOfWaiting() throws Exception {\n        int callTimeout = 10000;\n         Config config = new Config().setProperty(OPERATION_CALL_TIMEOUT_MILLIS.getName(), \"\" + callTimeout);\n         TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(2);", "sourceBeforeFix": "callTimeout=5000", "sourceAfterFix": "callTimeout=10000"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public List<SavedSearch> getSavedSearches() throws TwitterException {\n        return SavedSearch.constructSavedSearches(get(getBaseURL() + \"saved_searches.json\", true));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n      */\n     public List<SavedSearch> getSavedSearches() throws TwitterException {\n        return SavedSearch.createSavedSearchList(get(getBaseURL() + \"saved_searches.json\", true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/public_timeline.json\",false))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/public_timeline.json\",false))"}
{"fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "projectName": "Alluxio.alluxio", "bugType": "Change Operand ", "problem": "       mBuf.flip();\n       for (int pId = mLeft; pId < mRight; pId ++) {\n         long startTimeMs = System.currentTimeMillis();\n        TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n         OutStream os = file.getOutStream(WriteType.MUST_CACHE);\n         for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n           mBuf.putInt(0, k + mWorkerId);", "fixed": "       mBuf.flip();\n       for (int pId = mLeft; pId < mRight; pId ++) {\n         long startTimeMs = System.currentTimeMillis();\n        TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n         OutStream os = file.getOutStream(WriteType.MUST_CACHE);\n         for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n           mBuf.putInt(0, k + mWorkerId);", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "pId + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedByMe(Paging paging) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedByMe(Paging paging) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweets_of_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweets_of_me.json\",null,true))"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface SwiftEndpointBuilder\n            extends\n                EndpointProducerBuilder {\n         default AdvancedSwiftEndpointBuilder advanced() {\n             return (AdvancedSwiftEndpointBuilder) this;\n         }", "fixed": "     \n    public interface SwiftEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedSwiftEndpointBuilder advanced() {\n             return (AdvancedSwiftEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsCsv(String path, int batchSize) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), batchSize, null);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsCsv(String path, int batchSize) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), batchSize, null);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedByMe(Paging paging) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedByMe(Paging paging) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",null,true))"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public Trends getTrends() throws TwitterException {\n        return Trends.constructTrends(get(getSearchBaseURL() + \"trends.json\", false));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n      */\n     public Trends getTrends() throws TwitterException {\n        return Trends.createTrends(get(getSearchBaseURL() + \"trends.json\", false));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline.json\",true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "cb6f6e26c12839e59243f25bfb142ec5e5b71135", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "     public void testMulticastParallelTimeoutAware() throws Exception {\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedBodiesReceived(\"BC\");\n         template.sendBody(\"direct:start\", \"Hello\");", "fixed": "     public void testMulticastParallelTimeoutAware() throws Exception {\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.message(0).body().not(body().contains(\"A\"));\n         template.sendBody(\"direct:start\", \"Hello\");", "sourceBeforeFix": "from(\"direct:start\").multicast(new MyAggregationStrategy()).parallelProcessing().timeout(2000)", "sourceAfterFix": "from(\"direct:start\").multicast(new MyAggregationStrategy()).parallelProcessing().timeout(1000)"}
{"fixCommitSHA1": "4665dcf9ab41c3c61cd42aad296ebfe518bfa003", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\n \tpublic void glDeleteTextures (int n, IntBuffer textures) {\n\t\tGL.glDeleteTexturesEXT(n, textures, Memory.getPosition(textures));\n \t}\n \tpublic void glDepthFunc (int func) {", "fixed": " \t}\n \tpublic void glDeleteTextures (int n, IntBuffer textures) {\n\t\tGL.glDeleteTextures(n, textures, Memory.getPosition(textures));\n \t}\n \tpublic void glDepthFunc (int func) {", "sourceBeforeFix": "GL.glCopyTexImage2DEXT(target,level,internalformat,x,y,width,height,border)", "sourceAfterFix": "GL.glCopyTexImage2D(target,level,internalformat,x,y,width,height,border)"}
{"fixCommitSHA1": "ec57f0c31f8c41db175aa7dcaab5089c22b2a8a8", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t\tRSocketWebSocketNettyRouteProvider rSocketWebsocketRouteProvider(RSocketProperties properties,\n \t\t\t\tRSocketMessageHandler messageHandler) {\n \t\t\treturn new RSocketWebSocketNettyRouteProvider(properties.getServer().getMappingPath(),\n\t\t\t\t\tmessageHandler.serverResponder());\n \t\t}\n \t}", "fixed": " \t\tRSocketWebSocketNettyRouteProvider rSocketWebsocketRouteProvider(RSocketProperties properties,\n \t\t\t\tRSocketMessageHandler messageHandler) {\n \t\t\treturn new RSocketWebSocketNettyRouteProvider(properties.getServer().getMappingPath(),\n\t\t\t\t\tmessageHandler.responder());\n \t\t}\n \t}", "sourceBeforeFix": "messageHandler.serverResponder()", "sourceAfterFix": "messageHandler.responder()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15851, value = \"Operation targets host %s but that host is not registered\")\n     String invalidOperationTargetHost(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10851, value = \"Operation targets host %s but that host is not registered\")\n     String invalidOperationTargetHost(String name);\n     /**", "sourceBeforeFix": "id=15847", "sourceAfterFix": "id=10847"}
{"fixCommitSHA1": "e2119d33293008fcc876f5fcd58ede2993eb24d6", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnBean(ConnectionFactory.class)\n\t@ConditionalOnEnablednHealthIndicator(\"jms\")\n \tpublic static class JmsHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<JmsHealthIndicator, ConnectionFactory> {", "fixed": " \t@Configuration\n \t@ConditionalOnBean(ConnectionFactory.class)\n\t@ConditionalOnEnabledHealthIndicator(\"jms\")\n \tpublic static class JmsHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<JmsHealthIndicator, ConnectionFactory> {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"solr\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"solr\")"}
{"fixCommitSHA1": "8b9791f8b4b1154d6a053de901a5efd2105409e5", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "         this.bufferMemorySize = bufferMemorySize;\n     }\n    public Integer getRequestRequiredAcks() {\n         return requestRequiredAcks;\n     }", "fixed": "         this.bufferMemorySize = bufferMemorySize;\n     }\n    public String getRequestRequiredAcks() {\n         return requestRequiredAcks;\n     }", "sourceBeforeFix": "public Integer getRequestRequiredAcks(){   return requestRequiredAcks; } ", "sourceAfterFix": "public String getRequestRequiredAcks(){   return requestRequiredAcks; } "}
{"fixCommitSHA1": "ea98386dfd18da047c877a2320cfdcf15df2ea06", "projectName": "facebook.presto", "bugType": "Change Modifier", "problem": "         return defineClass(classDefinition, PagesHashStrategy.class, callSiteBinder.getBindings(), getClass().getClassLoader());\n     }\n    private void generateConstructor(ClassDefinition classDefinition,\n             List<Integer> joinChannels,\n             FieldDefinition sizeField,\n             List<FieldDefinition> channelFields,", "fixed": "         return defineClass(classDefinition, PagesHashStrategy.class, callSiteBinder.getBindings(), getClass().getClassLoader());\n     }\n    private static void generateConstructor(ClassDefinition classDefinition,\n             List<Integer> joinChannels,\n             FieldDefinition sizeField,\n             List<FieldDefinition> channelFields,", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "f3c01ca3b39c23758a34d711579a567a5f841944", "projectName": "eclipse.vert.x", "bugType": "Change Numeric Literal", "problem": "       Process process = startExternalNode(i);\n       externalNodes.add(process);\n     }\n    waitUntil(() -> externalNodesStarted.get() == NODE_COUNT, 30_000);\n     JsonArray message1 = new JsonArray();\n     IntStream.range(0, NODE_COUNT).forEach(message1::add);\n     vertx.eventBus().publish(\"ping\", message1);\n    waitUntil(() -> pongsReceived.get() == NODE_COUNT * NODE_COUNT * ADDRESSES_COUNT, 30_000);\n     for (int i = 0; i < NODE_COUNT - 1; i++) {\n       externalNodes.get(i).destroyForcibly();", "fixed": "       Process process = startExternalNode(i);\n       externalNodes.add(process);\n     }\n    waitUntil(() -> externalNodesStarted.get() == NODE_COUNT, 60_000);\n     JsonArray message1 = new JsonArray();\n     IntStream.range(0, NODE_COUNT).forEach(message1::add);\n     vertx.eventBus().publish(\"ping\", message1);\n    waitUntil(() -> pongsReceived.get() == NODE_COUNT * NODE_COUNT * ADDRESSES_COUNT, 60_000);\n     for (int i = 0; i < NODE_COUNT - 1; i++) {\n       externalNodes.get(i).destroyForcibly();", "sourceBeforeFix": "waitUntil(() -> noHandlersErrors.get() == (NODE_COUNT - 1) * ADDRESSES_COUNT,30_000)", "sourceAfterFix": "waitUntil(() -> noHandlersErrors.get() == (NODE_COUNT - 1) * ADDRESSES_COUNT,60_000)"}
{"fixCommitSHA1": "a35860eadb4400f069e306ccd76f1a19ecfb3ba1", "projectName": "google.guava", "bugType": "Change Identifier Used", "problem": "    * <p>In the undirected case, returns {@code null} if {@code isSelfLoop} is true.\n    */\n   @CanIgnoreReturnValue\n  N removeInEdge(Object edge, boolean isSelfLoop);\n   \n   @CanIgnoreReturnValue\n  N removeOutEdge(Object edge);\n   /**\n    * Add {@code edge} to the set of incoming edges. Implicitly adds {@code node} as a predecessor.", "fixed": "    * <p>In the undirected case, returns {@code null} if {@code isSelfLoop} is true.\n    */\n   @CanIgnoreReturnValue\n  N removeInEdge(E edge, boolean isSelfLoop);\n   \n   @CanIgnoreReturnValue\n  N removeOutEdge(E edge);\n   /**\n    * Add {@code edge} to the set of incoming edges. Implicitly adds {@code node} as a predecessor.", "sourceBeforeFix": "Object edge", "sourceAfterFix": "E edge"}
{"fixCommitSHA1": "bf2975b37015a967a0a0c76028e78245905df614", "projectName": "hazelcast.hazelcast", "bugType": "Change Modifier", "problem": "     private StringBuilder stringBuilder = new StringBuilder();\n    DiagnosticsLogWriterImpl() {\n         this(false);\n     }\n    DiagnosticsLogWriterImpl(boolean includeEpochTime) {\n         this.includeEpochTime = includeEpochTime;\n     }", "fixed": "     private StringBuilder stringBuilder = new StringBuilder();\n    public DiagnosticsLogWriterImpl() {\n         this(false);\n     }\n    public DiagnosticsLogWriterImpl(boolean includeEpochTime) {\n         this.includeEpochTime = includeEpochTime;\n     }", "sourceBeforeFix": "0", "sourceAfterFix": "1"}
{"fixCommitSHA1": "f7236ba0d5a866d31b194e22c2a0fccc6f238f9d", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "                 String[] paramNames = null;\n                 if (kotlin && constructors.length > 0) {\n                     paramNames = TypeUtils.getKoltinConstructorParameters(clazz);\n                    creatorConstructor = TypeUtils.getKoltinConstructor(constructors);\n                     TypeUtils.setAccessible(creatorConstructor);\n                 } else {", "fixed": "                 String[] paramNames = null;\n                 if (kotlin && constructors.length > 0) {\n                     paramNames = TypeUtils.getKoltinConstructorParameters(clazz);\n                    creatorConstructor = TypeUtils.getKoltinConstructor(constructors, paramNames);\n                     TypeUtils.setAccessible(creatorConstructor);\n                 } else {", "sourceBeforeFix": "TypeUtils.getKoltinConstructor(constructors)", "sourceAfterFix": "TypeUtils.getKoltinConstructor(constructors,paramNames)"}
{"fixCommitSHA1": "e7bf415427b37bbc760ff9b9c69650db8ec477e4", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnBean(JavaMailSenderImpl.class)\n\t@ConditionalOnEnablednHealthIndicator(\"mail\")\n \tpublic static class MailHealthIndicatorConfiguration\n \t\t\textends\n \t\t\tCompositeHealthIndicatorConfiguration<MailHealthIndicator, JavaMailSenderImpl> {", "fixed": " \t@Configuration\n \t@ConditionalOnBean(JavaMailSenderImpl.class)\n\t@ConditionalOnEnabledHealthIndicator(\"mail\")\n \tpublic static class MailHealthIndicatorConfiguration\n \t\t\textends\n \t\t\tCompositeHealthIndicatorConfiguration<MailHealthIndicator, JavaMailSenderImpl> {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"diskspace\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"diskspace\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "9f0d922f042d7342252ad2e1476ae45002c89cfd", "projectName": "openhab.openhab", "bugType": "Change Numeric Literal", "problem": "             }\r\n             if (bulb > 5) {\r\n                 sendOn(bulb, bridgeId);\r\n                Thread.sleep(50);\r\n                 String messageBytes = \"40:\" + Integer.toHexString(milightColorNo) + \":55\";\r\n                 sendMessage(messageBytes, bridgeId);\r\n             }\r", "fixed": "             }\r\n             if (bulb > 5) {\r\n                 sendOn(bulb, bridgeId);\r\n                Thread.sleep(100);\r\n                 String messageBytes = \"40:\" + Integer.toHexString(milightColorNo) + \":55\";\r\n                 sendMessage(messageBytes, bridgeId);\r\n             }\r", "sourceBeforeFix": "Thread.sleep(50)", "sourceAfterFix": "Thread.sleep(100)"}
{"fixCommitSHA1": "125e26bde0269dd286e8088a7b232e5c931664db", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "             IR.assign(\n                 IR.getprop(IR.thisNode(), IR.string(\"stack\")),\n                 IR.getprop(IR.name(TMP_ERROR), IR.string(\"stack\"))));\n     Node superErrorExpr =\n        IR.comma(IR.comma(IR.comma(getTmpError, copyMessage), setStack), IR.name(TMP_ERROR))\n             .useSourceInfoIfMissingFromForTree(superCall);\n     superCall.replaceWith(superErrorExpr);\n   }", "fixed": "             IR.assign(\n                 IR.getprop(IR.thisNode(), IR.string(\"stack\")),\n                 IR.getprop(IR.name(TMP_ERROR), IR.string(\"stack\"))));\n     Node superErrorExpr =\n        IR.comma(IR.comma(IR.comma(getTmpError, copyMessage), setStack), IR.thisNode())\n             .useSourceInfoIfMissingFromForTree(superCall);\n     superCall.replaceWith(superErrorExpr);\n   }", "sourceBeforeFix": "IR.name(TMP_ERROR)", "sourceAfterFix": "IR.thisNode()"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should fail for an invalid object\n \t * @should throw throw APIException if the input is null\n \t */\n\tpublic void validate(Object object, Errors errors) throws APIException;\n \t/**\n \t * Returns a list of locales used by the user when searching.", "fixed": " \t * @should fail for an invalid object\n \t * @should throw throw APIException if the input is null\n \t */\n\tpublic void validate(Object object, Errors errors);\n \t/**\n \t * Returns a list of locales used by the user when searching.", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface BeanValidatorEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedBeanValidatorEndpointBuilder advanced() {", "fixed": "     \n    public interface BeanValidatorEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedBeanValidatorEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "bbb27cf272ba5d2dc74f8f21d1d3a92486e27ee1", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": "  */\n class HornetQEmbeddedConfigurationFactory {\n\tprivate Log logger = LogFactory.getLog(HornetQAutoConfiguration.class);\n \tprivate final Embedded properties;", "fixed": "  */\n class HornetQEmbeddedConfigurationFactory {\n\tprivate Log logger = LogFactory.getLog(HornetQEmbeddedConfigurationFactory.class);\n \tprivate final Embedded properties;", "sourceBeforeFix": "HornetQAutoConfiguration.class", "sourceAfterFix": "HornetQEmbeddedConfigurationFactory.class"}
{"fixCommitSHA1": "0a1836b22646342828e96b1d0e7dad9c8bfdabfe", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         bar.expectedMessageCount(0);\n         MockEndpoint start = getMockEndpoint(\"mock:start\");\nstart.expectedMessageCount(6);\n         template.sendBody(\"activemq:queue:foo\", \"Hello World\");", "fixed": "         bar.expectedMessageCount(0);\n         MockEndpoint start = getMockEndpoint(\"mock:start\");\nstart.expectedMessageCount(7);\n         template.sendBody(\"activemq:queue:foo\", \"Hello World\");", "sourceBeforeFix": "start.expectedMessageCount(6)", "sourceAfterFix": "start.expectedMessageCount(7)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \t@Test\n \tpublic void testMultipleActionsPredicatesOptions_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {Console.WriteLine($ctx.ToStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");", "fixed": " \t@Test\n \tpublic void testMultipleActionsPredicatesOptions_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(245);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {Console.WriteLine($ctx.ToStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");", "sourceBeforeFix": "new StringBuilder(741)", "sourceAfterFix": "new StringBuilder(740)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface SparkEndpointBuilder\n            extends\n                EndpointConsumerBuilder {\n         default AdvancedSparkEndpointBuilder advanced() {\n             return (AdvancedSparkEndpointBuilder) this;\n         }", "fixed": "     \n    public interface SparkEndpointBuilder extends EndpointConsumerBuilder {\n         default AdvancedSparkEndpointBuilder advanced() {\n             return (AdvancedSparkEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedMockEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default MockEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedMockEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default MockEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStream<OUT> writeAsCsv(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsCsv<OUT> format, int batchSize, OUT endTuple) {\n\t\tDataStream<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByBatches<OUT>(\n \t\t\t\tpath, format, batchSize, endTuple), null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "fixed": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStreamSink<OUT> writeAsCsv(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsCsv<OUT> format, int batchSize, OUT endTuple) {\n\t\tDataStreamSink<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByBatches<OUT>(\n \t\t\t\tpath, format, batchSize, endTuple), null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e2efffc72002968f835a0ea6a70f8e7762752b15", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": " \t\tConceptName anotherConceptName = ConceptNameTest.createMockConceptName(3, Context.getLocale(), null, true);\r\n \t\tanotherConceptName.setName(duplicateName);\r\n \t\tnewConcept.addName(anotherConceptName);\r\n\t\tErrors errors = new BindException(concept, \"concept\");\r\n \t\tnew ConceptValidator().validate(newConcept, errors);\r\n \t}\r", "fixed": " \t\tConceptName anotherConceptName = ConceptNameTest.createMockConceptName(3, Context.getLocale(), null, true);\r\n \t\tanotherConceptName.setName(duplicateName);\r\n \t\tnewConcept.addName(anotherConceptName);\r\n\t\tErrors errors = new BindException(newConcept, \"concept\");\r\n \t\tnew ConceptValidator().validate(newConcept, errors);\r\n \t}\r", "sourceBeforeFix": "new BindException(concept,\"concept\")", "sourceAfterFix": "new BindException(newConcept,\"concept\")"}
{"fixCommitSHA1": "48b99e43fca1306ba54dad61bdacd4259673552b", "projectName": "druid-io.druid", "bugType": "Change Identifier Used", "problem": "     synchronized (lock) {\n       if (segmentsToDrop.contains(holder)) {\n         if (callback != null) {\n          currentlyProcessing.addCallback(callback);\n         }\n         return;\n       }", "fixed": "     synchronized (lock) {\n       if (segmentsToDrop.contains(holder)) {\n         if (callback != null) {\n          holder.addCallback(callback);\n         }\n         return;\n       }", "sourceBeforeFix": "currentlyProcessing.addCallback(callback)", "sourceAfterFix": "holder.addCallback(callback)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r", "fixed": " \t}\r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r", "sourceBeforeFix": "GL20.glUniform2(location,v)", "sourceAfterFix": "GL20.glUniform2fv(location,v)"}
{"fixCommitSHA1": "e9fbd7f493863da1e68776473d8b5d03861daa6f", "projectName": "apache.flink", "bugType": "Change Numeric Literal", "problem": " \t\t\tLOG.debug(\"Initializing sortmerger...\");\n \t\t\tSorter<PactRecord> sorter = new AsynchronousPartialSorter<PactRecord>(this.memoryManager, source,\n\t\t\t\tthis.parentTask, this.serializer, this.comparator, 32 * 1024 * 1024);\n \t\t\trunPartialSorter(sorter, NUM_RECORDS, 2);\n \t\t}", "fixed": " \t\t\tLOG.debug(\"Initializing sortmerger...\");\n \t\t\tSorter<PactRecord> sorter = new AsynchronousPartialSorter<PactRecord>(this.memoryManager, source,\n\t\t\t\tthis.parentTask, this.serializer, this.comparator, 10 * 1024 * 1024);\n \t\t\trunPartialSorter(sorter, NUM_RECORDS, 2);\n \t\t}", "sourceBeforeFix": "32 * 1024 * 1024", "sourceAfterFix": "10 * 1024 * 1024"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  private final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "6556bb2e8912717a00e781b483c8d83f72a69571", "projectName": "spring-projects.spring-boot", "bugType": "Change Modifier", "problem": " \t\n\tprivate static abstract class AbstractRequestMatcher\n \t\t\textends ApplicationContextRequestMatcher<WebApplicationContext> {\n \t\tprivate volatile RequestMatcher delegate;\n\t\tpublic AbstractRequestMatcher() {\n \t\t\tsuper(WebApplicationContext.class);\n \t\t}", "fixed": " \t\n\tprivate abstract static class AbstractRequestMatcher\n \t\t\textends ApplicationContextRequestMatcher<WebApplicationContext> {\n \t\tprivate volatile RequestMatcher delegate;\n\t\tAbstractRequestMatcher() {\n \t\t\tsuper(WebApplicationContext.class);\n \t\t}", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "1ab08ad4abff024bdd3fbeb6f08a1a4a61c49b65", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": " @PrepareForTest({ ConfigurationLoader.class, ConfigurationLoaderTest.class })\n public class ConfigurationLoaderTest {\n    private Configuration loadConfiguration(String name)\n         throws CheckstyleException {\n         return loadConfiguration(name, new Properties());\n     }\n    private Configuration loadConfiguration(\n         String name, Properties props) throws CheckstyleException {\n         final String fName =\n             \"src/test/resources/com/puppycrawl/tools/checkstyle/configs/\" + name;", "fixed": " @PrepareForTest({ ConfigurationLoader.class, ConfigurationLoaderTest.class })\n public class ConfigurationLoaderTest {\n    private static Configuration loadConfiguration(String name)\n         throws CheckstyleException {\n         return loadConfiguration(name, new Properties());\n     }\n    private static Configuration loadConfiguration(\n         String name, Properties props) throws CheckstyleException {\n         final String fName =\n             \"src/test/resources/com/puppycrawl/tools/checkstyle/configs/\" + name;", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15860, value = \"No deployment with name %s found\")\n     String noDeploymentContentWithName(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10860, value = \"No deployment with name %s found\")\n     String noDeploymentContentWithName(String name);\n     /**", "sourceBeforeFix": "id=15844", "sourceAfterFix": "id=10844"}
{"fixCommitSHA1": "e70960913c07d921dea470857f9bcdb67f38959f", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "          * @param isStatic\n          *        if import is static.\n          */\n        public void setStaticImport(boolean isStatic) {\n             this.staticImport = isStatic;\n         }\n     }", "fixed": "          * @param isStatic\n          *        if import is static.\n          */\n        public final void setStaticImport(boolean isStatic) {\n             this.staticImport = isStatic;\n         }\n     }", "sourceBeforeFix": "1", "sourceAfterFix": "17"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "      * Advanced builder for endpoint for the Kubernetes Persistent Volume Claim\n      * component.\n      */\n    public static interface AdvancedKubernetesPersistentVolumesClaimsEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default KubernetesPersistentVolumesClaimsEndpointBuilder basic() {", "fixed": "      * Advanced builder for endpoint for the Kubernetes Persistent Volume Claim\n      * component.\n      */\n    public interface AdvancedKubernetesPersistentVolumesClaimsEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default KubernetesPersistentVolumesClaimsEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "00644912992eceb3de7d2dc0213a05bf2844c1b2", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "                 } catch (InterruptedException e) {\n                     e.printStackTrace();\n                 }\n                hz1.getLifecycleService().terminate();\n             }\n         };", "fixed": "                 } catch (InterruptedException e) {\n                     e.printStackTrace();\n                 }\n                hz1.getLifecycleService().shutdown();\n             }\n         };", "sourceBeforeFix": "hz1.getLifecycleService().terminate()", "sourceAfterFix": "hz1.getLifecycleService().shutdown()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "ce4fe6e385fca71f097d6ed5dd694251403e15c5", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t\t}\n \t}\n\tprivate static class ShippingPriorityItem extends Tuple4<Long, Double, String, Long> {\n \t\tpublic ShippingPriorityItem() {}", "fixed": " \t\t}\n \t}\n\t\n\tpublic static class ShippingPriorityItem extends Tuple4<Long, Double, String, Long> {\n \t\tpublic ShippingPriorityItem() {}", "sourceBeforeFix": "10", "sourceAfterFix": "9"}
{"fixCommitSHA1": "cc848a1c24959c2f6941234b77399fbd58ecd3ca", "projectName": "swagger-api.swagger-codegen", "bugType": "Change Identifier Used", "problem": "     @Override\n     public String apiFileFolder() {\n        return (outputFolder + File.separator + apiFolder).replaceAll(\"/\", File.separator);\n     }\n     public String modelFileFolder() {\n        return (outputFolder + File.separator + modelFolder).replaceAll(\"/\", File.separator);\n     }\n     @Override", "fixed": "     @Override\n     public String apiFileFolder() {\n        return (outputFolder + File.separator + apiFolder).replace(\"/\", File.separator);\n     }\n     public String modelFileFolder() {\n        return (outputFolder + File.separator + modelFolder).replace(\"/\", File.separator);\n     }\n     @Override", "sourceBeforeFix": "(outputFolder + File.separator + modelFolder).replaceAll(\"/\",File.separator)", "sourceAfterFix": "(outputFolder + File.separator + modelFolder).replace(\"/\",File.separator)"}
{"fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "   public static void createFiles() throws IOException {\n     long startTimeMs = CommonUtils.getCurrentMs();\n    for (int k = 0; k < THREADS; k ++) {\n       int fileId = MTC.createFile(FILE_NAME + (k + BASE_FILE_NUMBER));\n       CommonUtils.printTimeTakenMs(startTimeMs, LOG, \"user_createFiles with fileId \" + fileId);\n     }", "fixed": "   public static void createFiles() throws IOException {\n     long startTimeMs = CommonUtils.getCurrentMs();\n    for (int k = 0; k < FILES; k++) {\n       int fileId = MTC.createFile(FILE_NAME + (k + BASE_FILE_NUMBER));\n       CommonUtils.printTimeTakenMs(startTimeMs, LOG, \"user_createFiles with fileId \" + fileId);\n     }", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "e9a969f81e8e7e9f0e7529da9a81a810ad07f766", "projectName": "wildfly.wildfly", "bugType": "Wrong Function Name", "problem": "         attr = bindingGroup.get(DEFAULT_INTERFACE);\n         writeAttribute(writer, Attribute.DEFAULT_INTERFACE, attr.asString());\n        if (fromServer && bindingGroup.has(PORT_OFFSET) && bindingGroup.get(PORT_OFFSET).asInt() != 0) {\n             attr = bindingGroup.get(PORT_OFFSET);\n             writeAttribute(writer, Attribute.PORT_OFFSET, attr.asString());\n         }", "fixed": "         attr = bindingGroup.get(DEFAULT_INTERFACE);\n         writeAttribute(writer, Attribute.DEFAULT_INTERFACE, attr.asString());\n        if (fromServer && bindingGroup.hasDefined(PORT_OFFSET) && bindingGroup.get(PORT_OFFSET).asInt() >= 0) {\n             attr = bindingGroup.get(PORT_OFFSET);\n             writeAttribute(writer, Attribute.PORT_OFFSET, attr.asString());\n         }", "sourceBeforeFix": "bindingGroup.has(PORT_OFFSET)", "sourceAfterFix": "bindingGroup.hasDefined(PORT_OFFSET)"}
{"fixCommitSHA1": "79946366e1ab141ef2b595e0079dcac7b913da2b", "projectName": "checkstyle.checkstyle", "bugType": "Wrong Function Name", "problem": "         final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;\n         verify(checkConfig,\n                getPath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\"), expected);\n     }\n     @Test", "fixed": "         final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;\n         verify(checkConfig,\n                getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\"),\n                expected);\n     }\n     @Test", "sourceBeforeFix": "getPath(\"InputPackageDeclarationDiffDirectory.java\")", "sourceAfterFix": "getNonCompilablePath(\"InputPackageDeclarationDiffDirectory.java\")"}
{"fixCommitSHA1": "c30e67b81a0d9ac45c4151d20a960e542ad97b4f", "projectName": "dropwizard.dropwizard", "bugType": "Change Identifier Used", "problem": "         final PrintWriter output = mock(PrintWriter.class);\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getRequestURI()).thenReturn(\"/tasks/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.of(\"runs\")));\n         when(request.getParameterValues(\"runs\")).thenReturn(new String[]{\"1\"});\n         when(response.getWriter()).thenReturn(output);", "fixed": "         final PrintWriter output = mock(PrintWriter.class);\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getServletPath()).thenReturn(\"/tasks/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.of(\"runs\")));\n         when(request.getParameterValues(\"runs\")).thenReturn(new String[]{\"1\"});\n         when(response.getWriter()).thenReturn(output);", "sourceBeforeFix": "request.getRequestURI()", "sourceAfterFix": "request.getServletPath()"}
{"fixCommitSHA1": "322fa14393f4ab34e22f0e3ad569afe12415ad1d", "projectName": "naver.pinpoint", "bugType": "Change Numeric Literal", "problem": "             return -1;\r\n         }\r\n         int newId = nextId();\r\n        if (newId > max) {\r\n             throw new IndexOutOfBoundsException(\"size=\" + index.length + \" id=\" + id);\r\n         }\r", "fixed": "             return -1;\r\n         }\r\n         int newId = nextId();\r\n        if (newId >= max) {\n             throw new IndexOutOfBoundsException(\"size=\" + index.length + \" id=\" + id);\r\n         }\r", "sourceBeforeFix": "DEFAULT_MAX=1024", "sourceAfterFix": "DEFAULT_MAX=4096"}
{"fixCommitSHA1": "c0637a44dab4b0fddd4c2e0b9794db9864ecb580", "projectName": "google.auto", "bugType": "Change Identifier Used", "problem": "    * Returns a {@link WildcardType} if the {@link TypeMirror} represents a wildcard type or throws\n    * an {@link IllegalArgumentException}.\n    */\n  public static WildcardType asWildcard(WildcardType maybeWildcardType) {\n     return maybeWildcardType.accept(WildcardTypeVisitor.INSTANCE, null);\n   }", "fixed": "    * Returns a {@link WildcardType} if the {@link TypeMirror} represents a wildcard type or throws\n    * an {@link IllegalArgumentException}.\n    */\n  public static WildcardType asWildcard(TypeMirror maybeWildcardType) {\n     return maybeWildcardType.accept(WildcardTypeVisitor.INSTANCE, null);\n   }", "sourceBeforeFix": "WildcardType maybeWildcardType", "sourceAfterFix": "TypeMirror maybeWildcardType"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedSshEndpointBuilder\n             extends\n                 AdvancedSshEndpointConsumerBuilder, AdvancedSshEndpointProducerBuilder {\n         default SshEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedSshEndpointBuilder\n             extends\n                 AdvancedSshEndpointConsumerBuilder, AdvancedSshEndpointProducerBuilder {\n         default SshEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "a295b91c37f681199a83fdb963344c19e0d015c0", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "     protected void handleQPoll(String[] args) {\n         long timeout = 0;\n         if (args.length > 1) {\n            timeout = Long.valueOf(args[1]);\n         }\n         try {\n             println(getQueue().poll(timeout, TimeUnit.SECONDS));", "fixed": "     protected void handleQPoll(String[] args) {\n         long timeout = 0;\n         if (args.length > 1) {\n            timeout = Long.parseLong(args[1]);\n         }\n         try {\n             println(getQueue().poll(timeout, TimeUnit.SECONDS));", "sourceBeforeFix": "Long.valueOf(args[2])", "sourceAfterFix": "Long.parseLong(args[2])"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_1() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(639);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {console.log($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "fixed": " \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_1() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(638);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {console.log($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "sourceBeforeFix": "new StringBuilder(246)", "sourceAfterFix": "new StringBuilder(245)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 15866, value = \"%s is null\")\n     IllegalArgumentException nullVar(String name);\n     /**", "fixed": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 10866, value = \"%s is null\")\n     IllegalArgumentException nullVar(String name);\n     /**", "sourceBeforeFix": "id=15835", "sourceAfterFix": "id=10835"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should execute sql containing group by\n \t */\n \t@Authorized(PrivilegeConstants.SQL_LEVEL_ACCESS)\n\tpublic List<List<Object>> executeSQL(String sql, boolean selectOnly) throws APIException;\n \t/**\n \t * Get the implementation id stored for this server Returns null if no implementation id has", "fixed": " \t * @should execute sql containing group by\n \t */\n \t@Authorized(PrivilegeConstants.SQL_LEVEL_ACCESS)\n\tpublic List<List<Object>> executeSQL(String sql, boolean selectOnly);\n \t/**\n \t * Get the implementation id stored for this server Returns null if no implementation id has", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "93ec35952feb5bdcd58a7ac6ad0f07307ed0d367", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "                 prop.getField().getJavaDoc().setFullText(option.getDescription());\n             }\n             if (!Strings.isBlank(option.getDefaultValue())) {\n                if (\"java.lang.String\".equals(option.getType())) {\n                     prop.getField().setStringInitializer(option.getDefaultValue());\n                 } else if (\"long\".equals(option.getJavaType()) || \"java.lang.Long\".equals(option.getJavaType())) {", "fixed": "                 prop.getField().getJavaDoc().setFullText(option.getDescription());\n             }\n             if (!Strings.isBlank(option.getDefaultValue())) {\n                if (\"java.lang.String\".equals(option.getJavaType())) {\n                     prop.getField().setStringInitializer(option.getDefaultValue());\n                 } else if (\"long\".equals(option.getJavaType()) || \"java.lang.Long\".equals(option.getJavaType())) {", "sourceBeforeFix": "option.getType()", "sourceAfterFix": "option.getJavaType()"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "fixed": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2fv(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2fv(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "sourceBeforeFix": "GL20.glGetVertexAttrib(index,pname,params)", "sourceAfterFix": "GL20.glGetVertexAttribfv(index,pname,params)"}
{"fixCommitSHA1": "55afa119b8685a70ea6335e973814a345e99e2bb", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Change Modifier", "problem": "   private final String secret;\n   private final String percentEncodedKey;\n  RequestToken(String key, String token) {\n     this.key = key;\n     this.secret = token;\n     this.percentEncodedKey = Utf8UrlEncoder.percentEncodeQueryElement(key);", "fixed": "   private final String secret;\n   private final String percentEncodedKey;\n  public RequestToken(String key, String token) {\n     this.key = key;\n     this.secret = token;\n     this.percentEncodedKey = Utf8UrlEncoder.percentEncodeQueryElement(key);", "sourceBeforeFix": "0", "sourceAfterFix": "1"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "         if (isStatisticsEnabled()) {\n             if (result) {\n                 statistics.increaseCachePuts(1);\n                statistics.addPutTimeNano(System.nanoTime() - start);\n             }\n            statistics.addGetTimeNano(System.nanoTime() - start);\n             if (isHit) {\n                 statistics.increaseCacheHits(1);\n             } else {", "fixed": "         if (isStatisticsEnabled()) {\n             if (result) {\n                 statistics.increaseCachePuts(1);\n                statistics.addPutTimeNanos(System.nanoTime() - start);\n             }\n            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (isHit) {\n                 statistics.increaseCacheHits(1);\n             } else {", "sourceBeforeFix": "statistics.addGetTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addGetTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  private final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "338d4a036b25526d2e5bf53c5e49f56ccbbf356f", "projectName": "libgdx.libgdx", "bugType": "Change Numeric Literal", "problem": " \t\tif (!drawing) throw new IllegalStateException(\"SpriteCache.begin must be called before draw.\");\r\n \t\tCache cache = caches.get(cacheID);\r\n\t\toffset = offset * 12 + cache.offset;\r\n \t\tlength *= 6;\r\n \t\tTexture[] textures = cache.textures;\r\n \t\tint[] counts = cache.counts;\r", "fixed": " \t\tif (!drawing) throw new IllegalStateException(\"SpriteCache.begin must be called before draw.\");\r\n \t\tCache cache = caches.get(cacheID);\r\n\t\toffset = offset * 6 + cache.offset;\r\n \t\tlength *= 6;\r\n \t\tTexture[] textures = cache.textures;\r\n \t\tint[] counts = cache.counts;\r", "sourceBeforeFix": "mesh.getNumVertices() / 2", "sourceAfterFix": "mesh.getNumVertices() / 4"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15844, value = \"Invalid rollout plan. Server group %s appears more than once in the plan.\")\n     String invalidRolloutPlanGroupAlreadyExists(String group);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10844, value = \"Invalid rollout plan. Server group %s appears more than once in the plan.\")\n     String invalidRolloutPlanGroupAlreadyExists(String group);\n     /**", "sourceBeforeFix": "id=15847", "sourceAfterFix": "id=10847"}
{"fixCommitSHA1": "0656040933973f55afa8b6e8f53140b6f76b7446", "projectName": "apache.hive", "bugType": "Change Unary Operator\t", "problem": "             break;\n           }\n           switch (schemeField.id) {\ncase -1:\n               if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {\n                 struct.rqst = new WriteNotificationLogRequest();\n                 struct.rqst.read(iprot);", "fixed": "             break;\n           }\n           switch (schemeField.id) {\ncase 1:\n               if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {\n                 struct.rqst = new WriteNotificationLogRequest();\n                 struct.rqst.read(iprot);", "sourceBeforeFix": "-1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_kr_2() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub1445\uc6d406\uc77c\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_kr_2() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub1445\uc6d406\uc77c\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "315a7ab26e5b9cbe1aba47ed1c574c0630be8248", "projectName": "wildfly.wildfly", "bugType": "Same Function Swap Args", "problem": "                 }\n             }\n             if (requiredMessageListener == null) {\n                throw MESSAGES.unknownMessageListenerType(resourceAdapterName, messageListenerInterface.getName());\n             }\n             final Activation activation = requiredMessageListener.getActivation();", "fixed": "                 }\n             }\n             if (requiredMessageListener == null) {\n                throw MESSAGES.unknownMessageListenerType(messageListenerInterface.getName(), resourceAdapterName);\n             }\n             final Activation activation = requiredMessageListener.getActivation();", "sourceBeforeFix": "MESSAGES.unknownMessageListenerType(resourceAdapterName,messageListenerInterface.getName())", "sourceAfterFix": "MESSAGES.unknownMessageListenerType(messageListenerInterface.getName(),resourceAdapterName)"}
{"fixCommitSHA1": "b8ce4659cfb5ebbd26566cf5eef5c3181ef9f1d9", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Wrong Function Name", "problem": "         public long read(ByteBuffer buffer) throws IOException {\n            chunk = new byte[buffer.capacity() - 10];\n             int read = -1;", "fixed": "         public long read(ByteBuffer buffer) throws IOException {\n            chunk = new byte[buffer.remaining() - 10];\n             int read = -1;", "sourceBeforeFix": "buffer.capacity()", "sourceAfterFix": "buffer.remaining()"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n     */\n     public ResponseList<DirectMessage> getDirectMessages() throws TwitterException {\n        return DirectMessage.constructDirectMessages(get(getBaseURL() + \"direct_messages.json\", true));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n     */\n     public ResponseList<DirectMessage> getDirectMessages() throws TwitterException {\n        return DirectMessage.createDirectMessageList(get(getBaseURL() + \"direct_messages.json\", true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweets/\" + statusId+ \".json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweets/\" + statusId+ \".json\",true))"}
{"fixCommitSHA1": "73a9aed3e2382dff82904b83f1ceb3fa52484889", "projectName": "openhab.openhab", "bugType": "Change Modifier", "problem": " \t\tnotifyListeners(oldState, state);\n \t}\n\tprivate void notifyListeners(State oldState, State newState) {\n \t\tif(oldState.equals(newState)) return;", "fixed": " \t\tnotifyListeners(oldState, state);\n \t}\n\tprivate synchronized void notifyListeners(State oldState, State newState) {\n \t\tif(oldState.equals(newState)) return;", "sourceBeforeFix": "2", "sourceAfterFix": "34"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetProgramiv (int program, int pname, IntBuffer params) {\r\n\t\tGL20.glGetProgram(program, pname, params);\r\n \t}\r\n \tpublic void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tEXTFramebufferObject.glGetRenderbufferParameterEXT(target, pname, params);\r\n \t}\r\n \tpublic String glGetShaderInfoLog (int shader) {\r", "fixed": " \t}\r\n \tpublic void glGetProgramiv (int program, int pname, IntBuffer params) {\r\n\t\tGL20.glGetProgramiv(program, pname, params);\r\n \t}\r\n \tpublic void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tEXTFramebufferObject.glGetRenderbufferParameterivEXT(target, pname, params);\r\n \t}\r\n \tpublic String glGetShaderInfoLog (int shader) {\r", "sourceBeforeFix": "GL11.glTexParameter(target,pname,params)", "sourceAfterFix": "GL11.glTexParameteriv(target,pname,params)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface WebsocketEndpointBuilder\n             extends\n                 WebsocketEndpointConsumerBuilder, WebsocketEndpointProducerBuilder {\n         default AdvancedWebsocketEndpointBuilder advanced() {", "fixed": "     \n    public interface WebsocketEndpointBuilder\n             extends\n                 WebsocketEndpointConsumerBuilder, WebsocketEndpointProducerBuilder {\n         default AdvancedWebsocketEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15851, value = \"Operation targets host %s but that host is not registered\")\n     String invalidOperationTargetHost(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10851, value = \"Operation targets host %s but that host is not registered\")\n     String invalidOperationTargetHost(String name);\n     /**", "sourceBeforeFix": "id=15865", "sourceAfterFix": "id=10865"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public Trends getTrends() throws TwitterException {\n        return Trends.constructTrends(get(getSearchBaseURL() + \"trends.json\", false));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n      */\n     public Trends getTrends() throws TwitterException {\n        return Trends.createTrends(get(getSearchBaseURL() + \"trends.json\", false));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites/\" + id+ \".json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites/\" + id+ \".json\",new PostParameter[0],true))"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should return default value if property name does not exist\n \t * @should not fail with null default value\n \t */\n\tpublic String getGlobalProperty(String propertyName, String defaultValue) throws APIException;\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>", "fixed": " \t * @should return default value if property name does not exist\n \t * @should not fail with null default value\n \t */\n\tpublic String getGlobalProperty(String propertyName, String defaultValue);\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "6ed3c275fc3f67ecc814a1cb838915661f782f22", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "     @Test\n     public void testFormAuthSingleSignOn(@ArquillianResource URL baseURLNoAuth) throws Exception {\n         log.info(\"+++ testFormAuthSingleSignOn\");\n        SSOBaseCase.executeFormAuthSingleSignOnTest(baseURLNoAuth, baseURLNoAuth, log);\n     }\n     /**", "fixed": "     @Test\n     public void testFormAuthSingleSignOn(@ArquillianResource URL baseURLNoAuth) throws Exception {\n         log.info(\"+++ testFormAuthSingleSignOn\");\n        SSOTestBase.executeFormAuthSingleSignOnTest(baseURLNoAuth, baseURLNoAuth, log);\n     }\n     /**", "sourceBeforeFix": "SSOBaseCase.executeNoAuthSingleSignOnTest(baseURLNoAuth,baseURLNoAuth,log)", "sourceAfterFix": "SSOTestBase.executeNoAuthSingleSignOnTest(baseURLNoAuth,baseURLNoAuth,log)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  private final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "4665dcf9ab41c3c61cd42aad296ebfe518bfa003", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\n \tpublic void glGenTextures (int n, IntBuffer textures) {\n\t\tGL.glGenTexturesEXT(n, textures, Memory.getPosition(textures));\n \t}\n \tpublic int glGetError () {", "fixed": " \t}\n \tpublic void glGenTextures (int n, IntBuffer textures) {\n\t\tGL.glGenTextures(n, textures, Memory.getPosition(textures));\n \t}\n \tpublic int glGetError () {", "sourceBeforeFix": "GL.glCopyTexImage2DEXT(target,level,internalformat,x,y,width,height,border)", "sourceAfterFix": "GL.glCopyTexImage2D(target,level,internalformat,x,y,width,height,border)"}
{"fixCommitSHA1": "038ea1803bae1cf3be279b36395b4de4e0ff39b5", "projectName": "openhab.openhab", "bugType": "Wrong Function Name", "problem": " \t\tpollResetFuture = pollService.schedule(new Runnable() {\n \t\t\tpublic void run() {\n\t\t\t\tlogger.debug(\"rapidRefreshFutureEnd stopping\");\n \t\t\t\tschedulePoll(refreshInterval);\n \t\t\t}\n \t\t}, MAX_RAPID_REFRESH, TimeUnit.MILLISECONDS);", "fixed": " \t\tpollResetFuture = pollService.schedule(new Runnable() {\n \t\t\tpublic void run() {\n\t\t\t\tlogger.trace(\"rapidRefreshFutureEnd stopping\");\n \t\t\t\tschedulePoll(refreshInterval);\n \t\t\t}\n \t\t}, MAX_RAPID_REFRESH, TimeUnit.MILLISECONDS);", "sourceBeforeFix": "logger.debug(\"Invalid Account Credentials\")", "sourceAfterFix": "logger.trace(\"Invalid Account Credentials\")"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleAlternativesWithCommonLabel_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(730);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {System.out.println($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "fixed": " \tpublic void testMultipleAlternativesWithCommonLabel_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(729);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {System.out.println($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "sourceBeforeFix": "new StringBuilder(247)", "sourceAfterFix": "new StringBuilder(246)"}
{"fixCommitSHA1": "09524a8829309cecf1f5446395451ccd012a5c8d", "projectName": "alibaba.druid", "bugType": "Change Numeric Literal", "problem": "     public final static int MajorVersion    = 1;\n     public final static int MinorVersion    = 1;\n    public final static int RevisionVersion = 2;\n     public static String getVersionNumber() {\n         return VERSION.MajorVersion + \".\" + VERSION.MinorVersion + \".\" + VERSION.RevisionVersion;", "fixed": "     public final static int MajorVersion    = 1;\n     public final static int MinorVersion    = 1;\n    public final static int RevisionVersion = 3;\n     public static String getVersionNumber() {\n         return VERSION.MajorVersion + \".\" + VERSION.MinorVersion + \".\" + VERSION.RevisionVersion;", "sourceBeforeFix": "RevisionVersion=2", "sourceAfterFix": "RevisionVersion=3"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15835, value = IN_SERIES + \" is missing groups: %s\")\n     String inSeriesIsMissingGroups(String rolloutPlan);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10835, value = IN_SERIES + \" is missing groups: %s\")\n     String inSeriesIsMissingGroups(String rolloutPlan);\n     /**", "sourceBeforeFix": "id=15867", "sourceAfterFix": "id=10867"}
{"fixCommitSHA1": "63b7cec3050338899e04957cbc7039cd509cd214", "projectName": "cucumber.cucumber-jvm", "bugType": "Change Boolean Literal", "problem": "     }\n    @Cucumber.Options(monochrome = false)\n     static class SubClassWithMonoChromeTrue extends BaseClassWithMonoChromeFalse {\n     }\n    @Cucumber.Options(monochrome = true)\n     static class BaseClassWithMonoChromeFalse {\n     }", "fixed": "     }\n    @Cucumber.Options(monochrome = true)\n     static class SubClassWithMonoChromeTrue extends BaseClassWithMonoChromeFalse {\n     }\n    @Cucumber.Options(monochrome = false)\n     static class BaseClassWithMonoChromeFalse {\n     }", "sourceBeforeFix": "monochrome=false", "sourceAfterFix": "monochrome=true"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "fixed": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "sourceBeforeFix": "GL20.glUniform2(location,toIntBuffer(v,offset,count << 1))", "sourceAfterFix": "GL20.glUniform2iv(location,toIntBuffer(v,offset,count << 1))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  private final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "a599db297dce998b49821c76fef2e711b8962cab", "projectName": "stanfordnlp.CoreNLP", "bugType": "Change Numeric Literal", "problem": "     assertTrue(\"\" + compressedProto.length, compressedProto.length < 395000);\n    assertTrue(\"\" + uncompressedProto.length, uncompressedProto.length < 2560000);\n   }\n   @Test", "fixed": "     assertTrue(\"\" + compressedProto.length, compressedProto.length < 395000);\n    assertTrue(\"\" + uncompressedProto.length, uncompressedProto.length < 2570000);\n   }\n   @Test", "sourceBeforeFix": "uncompressedProto.length < 2560000", "sourceAfterFix": "uncompressedProto.length < 2570000"}
{"fixCommitSHA1": "4831c0257971d6dd9a7cda4a8d9e1ded8c2a77a7", "projectName": "Atmosphere.atmosphere", "bugType": "Change Identifier Used", "problem": "         if (e.getMessage() instanceof List && !((List) e.getMessage()).isEmpty()) {\n            List<Object> filteredMessage = new ArrayList<Object>();\n             for (Object o : ((List) e.getMessage())) {\n                filteredMessage.add(perRequestFilter(r, new Entry(o, r, f, o), false));\n             }\n             e.setMessage(filteredMessage);", "fixed": "         if (e.getMessage() instanceof List && !((List) e.getMessage()).isEmpty()) {\n            LinkedList<Object> filteredMessage = new LinkedList<Object>();\n             for (Object o : ((List) e.getMessage())) {\n                filteredMessage.addLast(perRequestFilter(r, new Entry(o, r, f, o), false));\n             }\n             e.setMessage(filteredMessage);", "sourceBeforeFix": "List<Object>", "sourceAfterFix": "LinkedList<Object>"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  private final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "36f71405ee04602e76844b255e44f146bb476161", "projectName": "openmrs.openmrs-core", "bugType": "Wrong Function Name", "problem": " \t\tthis.setConceptSets(new TreeSet<ConceptSet>(c.getConceptSets()));\r\n \t\tfor (ConceptSet cSet : this.getConceptSets()) {\r\n\t\t\tcSet.setConcept(this);\r\n \t\t}\r\n \t\tthis.setDescriptions(new HashSet<ConceptDescription>(c.getDescriptions()));\r", "fixed": " \t\tthis.setConceptSets(new TreeSet<ConceptSet>(c.getConceptSets()));\r\n \t\tfor (ConceptSet cSet : this.getConceptSets()) {\r\n\t\t\tcSet.setConceptSet(this);\r\n \t\t}\r\n \t\tthis.setDescriptions(new HashSet<ConceptDescription>(c.getDescriptions()));\r", "sourceBeforeFix": "cSet.setConcept(this)", "sourceAfterFix": "cSet.setConceptSet(this)"}
{"fixCommitSHA1": "9771ba62390a56363b20e52f12a8b9b34c51da62", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "     public void testSamplingUsingmessageFrequency() throws Exception {\n         long totalMessages = 100;\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedMessageCount(10);\n         mock.setResultWaitTime(100);\n         for (int i = 0; i < totalMessages; i++) {", "fixed": "     public void testSamplingUsingmessageFrequency() throws Exception {\n         long totalMessages = 100;\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedMinimumMessageCount(10);\n         mock.setResultWaitTime(100);\n         for (int i = 0; i < totalMessages; i++) {", "sourceBeforeFix": "mock.expectedMessageCount(3)", "sourceAfterFix": "mock.expectedMinimumMessageCount(3)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "f8c20919f9c2e18e48142c2712e34298f98b983e", "projectName": "spring-projects.spring-boot", "bugType": "Wrong Function Name", "problem": " \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tfactory.setPort(8081);\n \t\tthis.container = factory\n\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\nassertThat(getResponse(\"http:\n \t}", "fixed": " \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tfactory.setPort(8081);\n \t\tthis.container = factory\n\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\nassertThat(getResponse(\"http:\n \t}", "sourceBeforeFix": "factory.getEmbdeddedServletContainer(initializers[0],initializers[1])", "sourceAfterFix": "factory.getEmbeddedServletContainer(initializers[0],initializers[1])"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "fixed": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniformfv(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniformiv(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "sourceBeforeFix": "GL20.glGetUniform(program,location,params)", "sourceAfterFix": "GL20.glGetUniformfv(program,location,params)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public Trends getCurrentTrends() throws TwitterException {\n        return Trends.constructTrendsList(get(getSearchBaseURL() + \"trends/current.json\"\n                 , false)).get(0);\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public Trends getCurrentTrends() throws TwitterException {\n        return Trends.createTrendsList(get(getSearchBaseURL() + \"trends/current.json\"\n                 , false)).get(0);\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",null,true))"}
{"fixCommitSHA1": "3dddcc4cdf4a74ddbd4607c6aaee5bdd8ac46c27", "projectName": "gephi.gephi", "bugType": "Change Modifier", "problem": "     }\n     @Override\n    public void mouseMove() {\n         if (vizConfig.isSelectionEnable() && rectangleSelection) {\n             Rectangle rectangle = (Rectangle) currentSelectionArea;", "fixed": "     }\n     @Override\n    public synchronized void mouseMove() {\n         if (vizConfig.isSelectionEnable() && rectangleSelection) {\n             Rectangle rectangle = (Rectangle) currentSelectionArea;", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "8e9c4a899c3532b3a6866525a5977129f4af78ea", "projectName": "facebook.presto", "bugType": "Change Identifier Used", "problem": "     HIVE_SERDE_NOT_FOUND(18, EXTERNAL),\n     HIVE_UNSUPPORTED_FORMAT(19, EXTERNAL),\n    HIVE_PARTITION_READ_ONLY(20, EXTERNAL),\n    HIVE_TOO_MANY_OPEN_PARTITIONS(21, EXTERNAL),\n     HIVE_CONCURRENT_MODIFICATION_DETECTED(22, EXTERNAL),\n     HIVE_COLUMN_ORDER_MISMATCH(23, USER_ERROR),\n     HIVE_FILE_MISSING_COLUMN_NAMES(24, EXTERNAL),", "fixed": "     HIVE_SERDE_NOT_FOUND(18, EXTERNAL),\n     HIVE_UNSUPPORTED_FORMAT(19, EXTERNAL),\n    HIVE_PARTITION_READ_ONLY(20, USER_ERROR),\n    HIVE_TOO_MANY_OPEN_PARTITIONS(21, USER_ERROR),\n     HIVE_CONCURRENT_MODIFICATION_DETECTED(22, EXTERNAL),\n     HIVE_COLUMN_ORDER_MISMATCH(23, USER_ERROR),\n     HIVE_FILE_MISSING_COLUMN_NAMES(24, EXTERNAL),", "sourceBeforeFix": "HIVE_TABLE_OFFLINE(2,EXTERNAL)", "sourceAfterFix": "HIVE_TABLE_OFFLINE(2,USER_ERROR)"}
{"fixCommitSHA1": "a4c66dc2824221d05e1fcfd54e4f1f4e2c125c40", "projectName": "netty.netty", "bugType": "Change Identifier Used", "problem": "                 cancelledKeys = 0;\n                runAllTasks();\n                 selector = this.selector;\n                processSelectedKeys();\n                 selector = this.selector;\n                 if (isShutdown()) {", "fixed": "                 cancelledKeys = 0;\n                processSelectedKeys();\n                 selector = this.selector;\n                runAllTasks();\n                 selector = this.selector;\n                 if (isShutdown()) {", "sourceBeforeFix": "runAllTasks()", "sourceAfterFix": "processSelectedKeys()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleActionsPredicatesOptions_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(239);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");", "fixed": " \tpublic void testMultipleActionsPredicatesOptions_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(238);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");", "sourceBeforeFix": "new StringBuilder(561)", "sourceAfterFix": "new StringBuilder(560)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15833, value = \"%s is missing %s: %s\")\n     String requiredChildIsMissing(String parent, String child, String parentSpec);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10833, value = \"%s is missing %s: %s\")\n     String requiredChildIsMissing(String parent, String child, String parentSpec);\n     /**", "sourceBeforeFix": "id=15854", "sourceAfterFix": "id=10854"}
{"fixCommitSHA1": "bdd386e699e23c48524b822b9b890b077f294c69", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     return result;\n   }\n  private String rule(String rule) {\n     return \"com.google.javascript.jscomp.ConformanceRules$\" + rule;\n   }\n  private String value(String value) {\n     return \"  value: '\" + value + \"'\\n\";\n   }", "fixed": "     return result;\n   }\n  private static String rule(String rule) {\n     return \"com.google.javascript.jscomp.ConformanceRules$\" + rule;\n   }\n  private static String value(String value) {\n     return \"  value: '\" + value + \"'\\n\";\n   }", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "c81c6ad44ba6bd2ff42c9fe7d336b863f3574405", "projectName": "facebook.presto", "bugType": "Change Identifier Used", "problem": "         this.reservedBytes = reservedBytes;\n         this.reservedRevocableBytes = reservedRevocableBytes;\n         this.queryMemoryReservations = unmodifiableMap(new HashMap<>(queryMemoryReservations));\n        this.queryMemoryRevocableReservations = unmodifiableMap(new HashMap<>(queryMemoryReservations));\n     }\n     @JsonProperty", "fixed": "         this.reservedBytes = reservedBytes;\n         this.reservedRevocableBytes = reservedRevocableBytes;\n         this.queryMemoryReservations = unmodifiableMap(new HashMap<>(queryMemoryReservations));\n        this.queryMemoryRevocableReservations = unmodifiableMap(new HashMap<>(queryMemoryRevocableReservations));\n     }\n     @JsonProperty", "sourceBeforeFix": "new HashMap<>(queryMemoryReservations)", "sourceAfterFix": "new HashMap<>(queryMemoryRevocableReservations)"}
{"fixCommitSHA1": "3757a700a89638e5747d966bdaa8266b62c974c8", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "     assertEquals(encoded, encoding.encode(bytes));\n   }\n  private void testDecodes(BaseEncoding encoding, String encoded, String decoded) {\n     byte[] bytes;\n     try {\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();", "fixed": "     assertEquals(encoded, encoding.encode(bytes));\n   }\n  private static void testDecodes(BaseEncoding encoding, String encoded, String decoded) {\n     byte[] bytes;\n     try {\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "8b59afeaaa4458b6d21d88b2edc0d22ed04d9798", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "         });\n         context.start();\n        resultEndpoint.expectedBodiesReceived(\"one\", \"two\", \"three\");\n         sendMessage(\"1\", \"one\");\n         sendMessage(\"2\", \"two\");", "fixed": "         });\n         context.start();\n        resultEndpoint.expectedBodiesReceivedInAnyOrder(\"one\", \"two\", \"three\");\n         sendMessage(\"1\", \"one\");\n         sendMessage(\"2\", \"two\");", "sourceBeforeFix": "resultEndpoint.expectedBodiesReceived(\"one\",\"three\")", "sourceAfterFix": "resultEndpoint.expectedBodiesReceivedInAnyOrder(\"one\",\"three\")"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "fixed": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4fv(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4fv(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "sourceBeforeFix": "GL11.glGetTexParameter(target,pname,params)", "sourceAfterFix": "GL11.glGetTexParameteriv(target,pname,params)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleActionsPredicatesOptions_1() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(239);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");", "fixed": " \tpublic void testMultipleActionsPredicatesOptions_1() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(238);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");", "sourceBeforeFix": "new StringBuilder(561)", "sourceAfterFix": "new StringBuilder(560)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "f521ac79d4dfc08f8ef542e06ce0bbc3e9ac833b", "projectName": "stanfordnlp.CoreNLP", "bugType": "Change Identifier Used", "problem": "   }\n  protected Pair<double[][][], double[][][]> getCondProbs(CRFCliqueTree cTree, int[][][] docData) {\n     double[][][] prevGivenCurr = new double[docData.length][][];", "fixed": "   }\n  protected Pair<double[][][], double[][][]> getCondProbs(CRFCliqueTree<String> cTree, int[][][] docData) {\n     double[][][] prevGivenCurr = new double[docData.length][][];", "sourceBeforeFix": "initial(rand)", "sourceAfterFix": "initial(randToUse)"}
{"fixCommitSHA1": "78bc92d81bf9815f4a4c27a5af7cdb88e119b734", "projectName": "antlr.antlr4", "bugType": "Change Identifier Used", "problem": " \t\tthis.fontSize = fontSize;\n \t\ttry {\n \t\t\tClass c = Class.forName(\"org.antlr.v4.runtime.tree.gui.\" + fontName);\n\t\t\tthis.fontMetrics = (FontMetrics)c.newInstance();\n \t\t}\n \t\tcatch (Exception e) {\n \t\t\tthrow new UnsupportedOperationException(\"No font metrics for \"+fontName);", "fixed": " \t\tthis.fontSize = fontSize;\n \t\ttry {\n \t\t\tClass c = Class.forName(\"org.antlr.v4.runtime.tree.gui.\" + fontName);\n\t\t\tthis.fontMetrics = (BasicFontMetrics)c.newInstance();\n \t\t}\n \t\tcatch (Exception e) {\n \t\t\tthrow new UnsupportedOperationException(\"No font metrics for \"+fontName);", "sourceBeforeFix": "protected FontMetrics fontMetrics; ", "sourceAfterFix": "protected BasicFontMetrics fontMetrics; "}
{"fixCommitSHA1": "0ec847b3cad89d473c6e5b272244d7e9a1b382e7", "projectName": "chrisbanes.Android-PullToRefresh", "bugType": "Change Identifier Used", "problem": " \t@Override\n \tpublic void setReleaseLabel(CharSequence label) {\n \t\tfor (LoadingLayout layout : mLoadingLayouts) {\n\t\t\tlayout.setRefreshingLabel(label);\n \t\t}\n \t}", "fixed": " \t@Override\n \tpublic void setReleaseLabel(CharSequence label) {\n \t\tfor (LoadingLayout layout : mLoadingLayouts) {\n\t\t\tlayout.setReleaseLabel(label);\n \t\t}\n \t}", "sourceBeforeFix": "layout.setRefreshingLabel(label)", "sourceAfterFix": "layout.setReleaseLabel(label)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8e3096cae54b7a772e6ad94cc45dae6344e92ab7", "projectName": "openmrs.openmrs-core", "bugType": "Same Function Less Args", "problem": " \t@ModelAttribute(\"visitTypes\")\r\n \tpublic List<VisitType> getVisitTypes() throws Exception {\r\n\t\treturn Context.getVisitService().getAllVisitTypes(true);\r\n \t}\r\n \t@ModelAttribute(\"attributeTypes\")\r", "fixed": " \t@ModelAttribute(\"visitTypes\")\r\n \tpublic List<VisitType> getVisitTypes() throws Exception {\r\n\t\treturn Context.getVisitService().getAllVisitTypes();\r\n \t}\r\n \t@ModelAttribute(\"attributeTypes\")\r", "sourceBeforeFix": "Context.getVisitService().getAllVisitTypes(true)", "sourceAfterFix": "Context.getVisitService().getAllVisitTypes()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n  private final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e04a3bf7703544cf5012eb2f55626af8e0a2cb8c", "projectName": "apache.flink", "bugType": "Delete Throws Exception", "problem": " \t\t}\n \t\t@Override\n\t\tpublic List<Integer> snapshotState(long checkpointId, long timestamp) throws Exception {\n \t\t\treturn Collections.singletonList(saveRecordCnt);\n \t\t}\n \t\t@Override\n\t\tpublic void restoreState(List<Integer> state) throws Exception {\n \t\t\tfor (Integer i : state) {\n \t\t\t\tsaveRecordCnt += i;\n \t\t\t}", "fixed": " \t\t}\n \t\t@Override\n\t\tpublic List<Integer> snapshotState(long checkpointId, long timestamp) {\n \t\t\treturn Collections.singletonList(saveRecordCnt);\n \t\t}\n \t\t@Override\n\t\tpublic void restoreState(List<Integer> state) {\n \t\t\tfor (Integer i : state) {\n \t\t\t\tsaveRecordCnt += i;\n \t\t\t}", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "37a84a496977d92ca3c93f4f2a33f88b909791db", "projectName": "wildfly.wildfly", "bugType": "More Specific If", "problem": "             final String server = SERVER.resolveModelAttribute(context, subModel).asString();\n             final ServiceController<?> controller = context.getServiceRegistry(false).getService(UndertowService.deploymentServiceName(server, host, path));\nif (controller.getState() != ServiceController.State.UP){\n                 return;\n             }", "fixed": "             final String server = SERVER.resolveModelAttribute(context, subModel).asString();\n             final ServiceController<?> controller = context.getServiceRegistry(false).getService(UndertowService.deploymentServiceName(server, host, path));\nif (controller != null && controller.getState() != ServiceController.State.UP){\n                 return;\n             }", "sourceBeforeFix": "controller.getState() != ServiceController.State.UP", "sourceAfterFix": "controller != null && controller.getState() != ServiceController.State.UP"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  private final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedNettyEndpointBuilder\n             extends\n                 AdvancedNettyEndpointConsumerBuilder, AdvancedNettyEndpointProducerBuilder {\n         default NettyEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedNettyEndpointBuilder\n             extends\n                 AdvancedNettyEndpointConsumerBuilder, AdvancedNettyEndpointProducerBuilder {\n         default NettyEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "84d6e4785ecad972742bb1bb869cfc3a5efa731d", "projectName": "cucumber.cucumber-jvm", "bugType": "Change Modifier", "problem": "         Executable testMethod = injectorSourceFactory::create;\n         InjectorSourceInstantiationFailed actualThrown = assertThrows(InjectorSourceInstantiationFailed.class, testMethod);\n         assertAll(\"Checking Exception including cause\",\n            () -> assertThat(\"Unexpected exception message\", actualThrown.getMessage(), is(equalTo(\"Instantiation of 'io.cucumber.guice.InjectorSourceFactoryTest$NoDefaultConstructor' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a   zero args constructor.\"))),\n             () -> assertThat(\"Unexpected exception cause class\", actualThrown.getCause(), isA(InstantiationException.class))\n         );\n     }", "fixed": "         Executable testMethod = injectorSourceFactory::create;\n         InjectorSourceInstantiationFailed actualThrown = assertThrows(InjectorSourceInstantiationFailed.class, testMethod);\n         assertAll(\"Checking Exception including cause\",\n            () -> assertThat(\"Unexpected exception message\", actualThrown.getMessage(), is(equalTo(\"Instantiation of 'io.cucumber.guice.InjectorSourceFactoryTest$NoDefaultConstructor' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a public zero args constructor.\"))),\n             () -> assertThat(\"Unexpected exception cause class\", actualThrown.getCause(), isA(InstantiationException.class))\n         );\n     }", "sourceBeforeFix": "8", "sourceAfterFix": "9"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "f4c635d30b23be6ce51866704c178232e98015e7", "projectName": "netty.netty", "bugType": "Change Modifier", "problem": "      * Exposed Used for testing only! Default values used in the initial settings frame are overriden intentionally\n      * for testing but violate the RFC if used outside the scope of testing.\n      */\n    HpackDecoder(long maxHeaderListSize, int initialHuffmanDecodeCapacity, int maxHeaderTableSize) {\n         this.maxHeaderListSize = checkPositive(maxHeaderListSize, \"maxHeaderListSize\");\n         this.maxHeaderListSizeGoAway = Http2CodecUtil.calculateMaxHeaderListSizeGoAway(maxHeaderListSize);", "fixed": "      * Exposed Used for testing only! Default values used in the initial settings frame are overriden intentionally\n      * for testing but violate the RFC if used outside the scope of testing.\n      */\n    public HpackDecoder(long maxHeaderListSize, int initialHuffmanDecodeCapacity, int maxHeaderTableSize) {\n         this.maxHeaderListSize = checkPositive(maxHeaderListSize, \"maxHeaderListSize\");\n         this.maxHeaderListSizeGoAway = Http2CodecUtil.calculateMaxHeaderListSizeGoAway(maxHeaderListSize);", "sourceBeforeFix": "0", "sourceAfterFix": "1"}
{"fixCommitSHA1": "5a71e9e18726a4ccd1f83e8a2c7c7f5d4a57411d", "projectName": "Bukkit.Bukkit", "bugType": "Change Numeric Literal", "problem": "     SNOW_BALL(332, 16),\n     BOAT(333, 1),\n     LEATHER(334),\n    MILK_BUCKET(335),\n     CLAY_BRICK(336),\n     CLAY_BALL(337),\n     SUGAR_CANE(338),", "fixed": "     SNOW_BALL(332, 16),\n     BOAT(333, 1),\n     LEATHER(334),\n    MILK_BUCKET(335, 1),\n     CLAY_BRICK(336),\n     CLAY_BALL(337),\n     SUGAR_CANE(338),", "sourceBeforeFix": "FISHING_ROD(346,1,32)", "sourceAfterFix": "FISHING_ROD(346,1,64)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 15832, value = \"There is already a registered host named '%s'\")\n     String slaveAlreadyRegistered(String slaveName);\n     /**", "fixed": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 10832, value = \"There is already a registered host named '%s'\")\n     String slaveAlreadyRegistered(String slaveName);\n     /**", "sourceBeforeFix": "id=15849", "sourceAfterFix": "id=10849"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  private final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "642897dca3aabcd38f0aec1047ba593599cf03da", "projectName": "druid-io.druid", "bugType": "Change Boolean Literal", "problem": "   @Override\n   public boolean preservesOrdering()\n   {\n    return false;\n   }\n   @Override", "fixed": "   @Override\n   public boolean preservesOrdering()\n   {\n    return true;\n   }\n   @Override", "sourceBeforeFix": "return false; ", "sourceAfterFix": "return true; "}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsText(String path, long millis) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), millis, null);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsText(String path, long millis) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), millis, null);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "d5c862121cf783f4e79ee5b6300c0aa2ee8cdfdd", "projectName": "naver.pinpoint", "bugType": "Change Numeric Literal", "problem": "     public void requestTest() {\r\n         RecordedStreamObserver<PCmdRequest> recordedStreamObserver = new RecordedStreamObserver<PCmdRequest>();\r\n        PinpointGrpcServer pinpointGrpcServer = new PinpointGrpcServer(Mockito.mock(InetSocketAddress.class), agentInfo, new RequestManager(testTimer, 300), recordedStreamObserver);\r\n         pinpointGrpcServer.connected();\r\n         List<Integer> supportCommandList = Arrays.asList(Short.toUnsignedInt(TCommandType.ECHO.getCode()));\r", "fixed": "     public void requestTest() {\r\n         RecordedStreamObserver<PCmdRequest> recordedStreamObserver = new RecordedStreamObserver<PCmdRequest>();\r\n        PinpointGrpcServer pinpointGrpcServer = new PinpointGrpcServer(Mockito.mock(InetSocketAddress.class), agentInfo, new RequestManager(testTimer, 3000), recordedStreamObserver);\r\n         pinpointGrpcServer.connected();\r\n         List<Integer> supportCommandList = Arrays.asList(Short.toUnsignedInt(TCommandType.ECHO.getCode()));\r", "sourceBeforeFix": "new RequestManager(testTimer,300)", "sourceAfterFix": "new RequestManager(testTimer,3000)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      * @param cause the cause of the error.\n      */\n     @LogMessage(level = Level.WARN)\n    @Message(id = 15806, value = \"Caught exception closing input stream\")\n     void caughtExceptionClosingInputStream(@Cause Throwable cause);\n     /**", "fixed": "      * @param cause the cause of the error.\n      */\n     @LogMessage(level = Level.WARN)\n    @Message(id = 10806, value = \"Caught exception closing input stream\")\n     void caughtExceptionClosingInputStream(@Cause Throwable cause);\n     /**", "sourceBeforeFix": "id=15803", "sourceAfterFix": "id=10803"}
{"fixCommitSHA1": "0c587bb3062930d4ce05fbd5924efa1d3ff5aaa0", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Change Boolean Literal", "problem": "     \n    @Test(groups = {\"standalone\", \"default_provider\"}, enabled = false)\n     public void testPutZeroBytesFileTest() throws Throwable {\n         System.err.println(\"setting up client\");\n         SimpleAsyncHttpClient client = new SimpleAsyncHttpClient.Builder()", "fixed": "     \n    @Test(groups = {\"standalone\", \"default_provider\"}, enabled = true)\n     public void testPutZeroBytesFileTest() throws Throwable {\n         System.err.println(\"setting up client\");\n         SimpleAsyncHttpClient client = new SimpleAsyncHttpClient.Builder()", "sourceBeforeFix": "enabled=false", "sourceAfterFix": "enabled=true"}
{"fixCommitSHA1": "5530d4c27d508c513b68af67aadede84b4cfa102", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "     \n     private static final String ALLOW_ELEMENT_NAME = \"allow\";\n    \n    private final Deque<PkgControl> stack = new ArrayDeque<>();\n     static {\n         DTD_RESOURCE_BY_ID.put(DTD_PUBLIC_ID_1_0, DTD_RESOURCE_NAME_1_0);", "fixed": "     \n     private static final String ALLOW_ELEMENT_NAME = \"allow\";\n    \n    private final Deque<ImportControl> stack = new ArrayDeque<>();\n     static {\n         DTD_RESOURCE_BY_ID.put(DTD_PUBLIC_ID_1_0, DTD_RESOURCE_NAME_1_0);", "sourceBeforeFix": "new PkgControl(stack.peek(),name,regex)", "sourceAfterFix": "new ImportControl(stack.peek(),name,regex)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n  private final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "bd0ff5e4fdb97904fca84d57792fddc3f7d96862", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "     lockAndUnlock(factory.newReentrantLock(\"foo\"), reps);\n   }\n  private void lockAndUnlock(Lock lock, int reps) {\n     for (int i = 0; i < reps; i++) {\n       lock.lock();\n       lock.unlock();", "fixed": "     lockAndUnlock(factory.newReentrantLock(\"foo\"), reps);\n   }\n  private static void lockAndUnlock(Lock lock, int reps) {\n     for (int i = 0; i < reps; i++) {\n       lock.lock();\n       lock.unlock();", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "4a6e698536006e6ea9b0680756d9390b96ba278b", "projectName": "gephi.gephi", "bugType": "Less Specific If", "problem": "         if (streamTokenizer.ttype == ']' || streamTokenizer.ttype == StreamTokenizer.TT_EOF) {\n             return;\n        } else if (streamTokenizer.ttype == StreamTokenizer.TT_WORD) {\n             if (streamTokenizer.sval.equalsIgnoreCase(\"label\")) {\n                 streamTokenizer.nextToken();", "fixed": "         if (streamTokenizer.ttype == ']' || streamTokenizer.ttype == StreamTokenizer.TT_EOF) {\n             return;\n        } else if (streamTokenizer.ttype == StreamTokenizer.TT_WORD || streamTokenizer.ttype == '\"') {\n             if (streamTokenizer.sval.equalsIgnoreCase(\"label\")) {\n                 streamTokenizer.nextToken();", "sourceBeforeFix": "streamTokenizer.ttype == StreamTokenizer.TT_WORD", "sourceAfterFix": "streamTokenizer.ttype == StreamTokenizer.TT_WORD || streamTokenizer.ttype == '\"'"}
{"fixCommitSHA1": "a421ca3133ddf727a147e87455a5511444d8d4bb", "projectName": "google.auto", "bugType": "Change Identifier Used", "problem": "     return methodDescriptors;\n   }\n  ImmutableSet<ImplemetationMethodDescriptor> implementationMethodDescriptors() {\n     return implementationMethodDescriptors;\n   }", "fixed": "     return methodDescriptors;\n   }\n  ImmutableSet<ImplementationMethodDescriptor> implementationMethodDescriptors() {\n     return implementationMethodDescriptors;\n   }", "sourceBeforeFix": "ImmutableSet<ImplemetationMethodDescriptor>", "sourceAfterFix": "ImmutableSet<ImplementationMethodDescriptor>"}
{"fixCommitSHA1": "9754de49878983bf090655203e0c880cccad7b2e", "projectName": "Atmosphere.atmosphere", "bugType": "Change Identifier Used", "problem": "             logger.debug(\"Active clients {}\", activeClients());\n         }\n        long now = System.nanoTime();\n         String messageId = UUID.randomUUID().toString();\n         CacheMessage cacheMessage = new CacheMessage(messageId, e);\n         synchronized (messages) {", "fixed": "             logger.debug(\"Active clients {}\", activeClients());\n         }\n        long now = System.currentTimeMillis();\n         String messageId = UUID.randomUUID().toString();\n         CacheMessage cacheMessage = new CacheMessage(messageId, e);\n         synchronized (messages) {", "sourceBeforeFix": "System.nanoTime()", "sourceAfterFix": "System.currentTimeMillis()"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStream<OUT> writeAsText(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsText<OUT> format, long millis, OUT endTuple) {\n\t\tDataStream<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByMillis<OUT>(\n \t\t\t\tpath, format, millis, endTuple), null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "fixed": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStreamSink<OUT> writeAsText(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsText<OUT> format, long millis, OUT endTuple) {\n\t\tDataStreamSink<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByMillis<OUT>(\n \t\t\t\tpath, format, millis, endTuple), null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "65f815b3aaa4ca2aff782b35c1fa0d318f10387c", "projectName": "Atmosphere.atmosphere", "bugType": "Wrong Function Name", "problem": "             final Map<String, String> m = new HashMap<String, String>();\n             for (Map.Entry<String, U> e : handlers.entrySet()) {\n                 UriTemplate t = new UriTemplate(e.getKey());\n                logger.debug(\"Trying to map {} to {}\", t, path);\n                 if (t.match(path, m)) {\n                     handler = e.getValue();\n                    logger.debug(\"Mapped {} to {}\", t, e.getValue());\n                     break;\n                 }\n             }", "fixed": "             final Map<String, String> m = new HashMap<String, String>();\n             for (Map.Entry<String, U> e : handlers.entrySet()) {\n                 UriTemplate t = new UriTemplate(e.getKey());\n                logger.trace(\"Trying to map {} to {}\", t, path);\n                 if (t.match(path, m)) {\n                     handler = e.getValue();\n                    logger.trace(\"Mapped {} to {}\", t, e.getValue());\n                     break;\n                 }\n             }", "sourceBeforeFix": "logger.debug(\"Mapped {} to {}\",t,e.getValue())", "sourceAfterFix": "logger.trace(\"Mapped {} to {}\",t,e.getValue())"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream.\n \t */\n\tpublic DataStream<OUT> print() {\n \t\tDataStream<OUT> inputStream = this.copy();\n \t\tPrintSinkFunction<OUT> printFunction = new PrintSinkFunction<OUT>();\n\t\tDataStream<OUT> returnStream = addSink(inputStream, printFunction, null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());", "fixed": " \t * \n \t * @return The closed DataStream.\n \t */\n\tpublic DataStreamSink<OUT> print() {\n \t\tDataStream<OUT> inputStream = this.copy();\n \t\tPrintSinkFunction<OUT> printFunction = new PrintSinkFunction<OUT>();\n\t\tDataStreamSink<OUT> returnStream = addSink(inputStream, printFunction, null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "998d200618f6c6699f8bacd059ffda7c54f4d39e", "projectName": "facebook.presto", "bugType": "Wrong Function Name", "problem": "     public static Rule<ExchangeNode> checkRulesAreFiredBeforeAddExchangesRule()\n     {\n        return checkPlanDoNotMatch(exchange(), \"Expected rules to be fired before 'AddExchanges' optimizer\");\n     }\n    public static <T extends PlanNode> Rule<T> checkPlanDoNotMatch(Pattern<T> pattern, String message)\n     {\n         return new CheckNoPlanNodeMatchesRule<>(pattern, message);\n     }", "fixed": "     public static Rule<ExchangeNode> checkRulesAreFiredBeforeAddExchangesRule()\n     {\n        return checkNoPlanNodeMatches(exchange(), \"Expected rules to be fired before 'AddExchanges' optimizer\");\n     }\n    private static <T extends PlanNode> Rule<T> checkNoPlanNodeMatches(Pattern<T> pattern, String message)\n     {\n         return new CheckNoPlanNodeMatchesRule<>(pattern, message);\n     }", "sourceBeforeFix": "checkPlanDoNotMatch(exchange(),\"Expected rules to be fired before 'AddExchanges' optimizer\")", "sourceAfterFix": "checkNoPlanNodeMatches(exchange(),\"Expected rules to be fired before 'AddExchanges' optimizer\")"}
{"fixCommitSHA1": "5e22e43ab5b4e6d43fc3ae7400f5860363428937", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Change Identifier Used", "problem": "     }\n     /**\n     * On windows, there is scenario where the connection get broken and the only way we can find it is by inspecting\n      * the stack trace in order to catch the following exception:\n     *\n      *\n      * java.io.IOException: An established connection was aborted by the software in your host machine\n         at sun.nio.ch.SocketDispatcher.read0(Native Method)", "fixed": "     }\n     /**\n     * On Windows, there is scenario where the connection get broken and the only way we can find it is by inspecting\n      * the stack trace in order to catch the following exception:\n      *\n      * java.io.IOException: An established connection was aborted by the software in your host machine\n         at sun.nio.ch.SocketDispatcher.read0(Native Method)", "sourceBeforeFix": "log.error(currentThread() + String.format(\"Trying to recover from dead Channel: %s \",channel))", "sourceAfterFix": "log.debug(currentThread() + String.format(\"Trying to recover from dead Channel: %s \",channel))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15856, value = \"Invalid url stream.\")\n     String invalidUrlStream();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10856, value = \"Invalid url stream.\")\n     String invalidUrlStream();\n     /**", "sourceBeforeFix": "id=15845", "sourceAfterFix": "id=10845"}
{"fixCommitSHA1": "19c2a076c25faf94ae9e8f4072f2a4590c9ee1fe", "projectName": "spring-projects.spring-boot", "bugType": "Wrong Function Name", "problem": " \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tfinal Date[] date = new Date[1];\n \t\tthis.container = factory\n\t\t\t\t.getEmbdeddedServletContainer(new ServletContextInitializer() {\n \t\t\t\t\t@Override\n \t\t\t\t\tpublic void onStartup(ServletContext servletContext)\n \t\t\t\t\t\t\tthrows ServletException {", "fixed": " \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tfinal Date[] date = new Date[1];\n \t\tthis.container = factory\n\t\t\t\t.getEmbeddedServletContainer(new ServletContextInitializer() {\n \t\t\t\t\t@Override\n \t\t\t\t\tpublic void onStartup(ServletContext servletContext)\n \t\t\t\t\t\t\tthrows ServletException {", "sourceBeforeFix": "factory.getEmbdeddedServletContainer(initializers[0],initializers[1])", "sourceAfterFix": "factory.getEmbeddedServletContainer(initializers[0],initializers[1])"}
{"fixCommitSHA1": "38eb6222bddaf49c3c9ae73ddef0cfe4ff5efa48", "projectName": "alibaba.dubbo", "bugType": "Change Numeric Literal", "problem": "     @Test\n     public void test_Decode_Return_Request_Object() throws IOException {\n        byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, (byte) 0xdf, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n         Person person = new Person();\n         byte[] request = getRequestBytes(person, header);", "fixed": "     @Test\n     public void test_Decode_Return_Request_Object() throws IOException {\n        byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, (byte) 0xe2, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n         Person person = new Person();\n         byte[] request = getRequestBytes(person, header);", "sourceBeforeFix": "(byte)0xff", "sourceAfterFix": "(byte)0xe2"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface SmppEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedSmppEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface SmppEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedSmppEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "492fd118d4902c730fc8619851a7135b623631e2", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "         MockEndpoint result = getMockEndpoint(\"mock:result\");\r\n        result.expectedMessageCount(3);\r\n         result.expectedBodiesReceived(\"Message 1c\", \"Message 2b\", \"Message 3a\");\r", "fixed": "         MockEndpoint result = getMockEndpoint(\"mock:result\");\r\n        result.expectedMinimumMessageCount(3);\r\n         result.expectedBodiesReceived(\"Message 1c\", \"Message 2b\", \"Message 3a\");\r", "sourceBeforeFix": "result.expectedMessageCount(3)", "sourceAfterFix": "result.expectedMinimumMessageCount(3)"}
{"fixCommitSHA1": "34df86db858d325c9ae6951ae9e69c2fae914be7", "projectName": "libgdx.libgdx", "bugType": "Change Operand ", "problem": " \t\tfinal int row1 = Math.max(0, (int)(viewBounds.y / layerTileHeight));\r\n \t\tfinal int row2 = Math.min(layerHeight, (int)((viewBounds.y + viewBounds.height + layerTileHeight) / layerTileHeight));\r\n\t\tfloat y = row1 * layerTileHeight;\r\n \t\tfloat xStart = col1 * layerTileWidth;\r\n \t\tfinal float[] vertices = this.vertices;\r\n\t\tfor (int row = row1; row < row2; row++) {\r\n \t\t\tfloat x = xStart;\r\n \t\t\tfor (int col = col1; col < col2; col++) {\r\n \t\t\t\tfinal TiledMapTileLayer.Cell cell = layer.getCell(col, row);\r", "fixed": " \t\tfinal int row1 = Math.max(0, (int)(viewBounds.y / layerTileHeight));\r\n \t\tfinal int row2 = Math.min(layerHeight, (int)((viewBounds.y + viewBounds.height + layerTileHeight) / layerTileHeight));\r\n\t\tfloat y = row2 * layerTileHeight;\r\n \t\tfloat xStart = col1 * layerTileWidth;\r\n \t\tfinal float[] vertices = this.vertices;\r\n\t\tfor (int row = row2; row >= row1; row--) {\r\n \t\t\tfloat x = xStart;\r\n \t\t\tfor (int col = col1; col < col2; col++) {\r\n \t\t\t\tfinal TiledMapTileLayer.Cell cell = layer.getCell(col, row);\r", "sourceBeforeFix": "row1 * layerTileHeight", "sourceAfterFix": "row2 * layerTileHeight"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "ef11886bf2190370a0f3fd287616763826239c48", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": " \t\tVector<RelationshipListItem> ret = new Vector<RelationshipListItem>();\r\n \t\tList<Relationship> rels = Context.getPersonService()\r\n\t\t        .getRelationships(Context.getPersonService().getPerson(personId));\r\n \t\tfor (Relationship rel : rels) {\r\n \t\t\tif (!rel.isVoided()\r\n \t\t\t        && (relationshipTypeId == null || rel.getRelationshipType().getRelationshipTypeId().equals(\r", "fixed": " \t\tVector<RelationshipListItem> ret = new Vector<RelationshipListItem>();\r\n \t\tList<Relationship> rels = Context.getPersonService()\r\n\t\t        .getRelationshipsByPerson(Context.getPersonService().getPerson(personId));\r\n \t\tfor (Relationship rel : rels) {\r\n \t\t\tif (!rel.isVoided()\r\n \t\t\t        && (relationshipTypeId == null || rel.getRelationshipType().getRelationshipTypeId().equals(\r", "sourceBeforeFix": "Context.getPersonService().getRelationships(Context.getPersonService().getPerson(personId))", "sourceAfterFix": "Context.getPersonService().getRelationshipsByPerson(Context.getPersonService().getPerson(personId))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should fail for an invalid object\n \t * @should throw throw APIException if the input is null\n \t */\n\tpublic void validate(Object object, Errors errors) throws APIException;\n \t/**\n \t * Returns a list of locales used by the user when searching.", "fixed": " \t * @should fail for an invalid object\n \t * @should throw throw APIException if the input is null\n \t */\n\tpublic void validate(Object object, Errors errors);\n \t/**\n \t * Returns a list of locales used by the user when searching.", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15856, value = \"Invalid url stream.\")\n     String invalidUrlStream();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10856, value = \"Invalid url stream.\")\n     String invalidUrlStream();\n     /**", "sourceBeforeFix": "id=15859", "sourceAfterFix": "id=10859"}
{"fixCommitSHA1": "e60c32d2f4826f2d0e7ef41acad13f0d6bac4d35", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "                     log.trace(\"URL from classloader: \" + url);\n                 }\n                url = customerResourceLocator(url);\n                 String urlPath = url.getFile();\n                 urlPath = URLDecoder.decode(urlPath, \"UTF-8\");", "fixed": "                     log.trace(\"URL from classloader: \" + url);\n                 }\n                url = customResourceLocator(url);\n                 String urlPath = url.getFile();\n                 urlPath = URLDecoder.decode(urlPath, \"UTF-8\");", "sourceBeforeFix": "customerResourceLocator(url)", "sourceAfterFix": "customResourceLocator(url)"}
{"fixCommitSHA1": "43b2fa49ca351c05c453c8cd0eec32ce6277c830", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t\tinvalidateHierarchy();\r\n \t}\r\n\tpublic String getText () {\r\n \t\treturn text;\r\n \t}\r", "fixed": " \t\tinvalidateHierarchy();\r\n \t}\r\n\tpublic CharSequence getText () {\r\n \t\treturn text;\r\n \t}\r", "sourceBeforeFix": "String text", "sourceAfterFix": "CharSequence text"}
{"fixCommitSHA1": "b9c0d31c3c2d6d6e91791308db92fd6a1cb5db43", "projectName": "wildfly.wildfly", "bugType": "Wrong Function Name", "problem": "             Assert.assertEquals(HttpServletResponse.SC_OK, response.getStatusLine().getStatusCode());\n             Assert.assertEquals(2, Integer.parseInt(response.getFirstHeader(\"value\").getValue()));\n            Assert.assertFalse(Boolean.valueOf(response.getFirstHeader(\"serialized\").getValue()));\n             response.getEntity().getContent().close();\n         } finally {\n             client.getConnectionManager().shutdown();", "fixed": "             Assert.assertEquals(HttpServletResponse.SC_OK, response.getStatusLine().getStatusCode());\n             Assert.assertEquals(2, Integer.parseInt(response.getFirstHeader(\"value\").getValue()));\n            Assert.assertTrue(Boolean.valueOf(response.getFirstHeader(\"serialized\").getValue()));\n             response.getEntity().getContent().close();\n         } finally {\n             client.getConnectionManager().shutdown();", "sourceBeforeFix": "Assert.assertFalse(Boolean.valueOf(response.getFirstHeader(\"serialized\").getValue()))", "sourceAfterFix": "Assert.assertTrue(Boolean.valueOf(response.getFirstHeader(\"serialized\").getValue()))"}
{"fixCommitSHA1": "3757a700a89638e5747d966bdaa8266b62c974c8", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "  */\n @GwtCompatible(emulated = true)\n public class BaseEncodingTest extends TestCase {\n  public void assertEquals(byte[] expected, byte[] actual) {\n     assertEquals(expected.length, actual.length);\n     for (int i = 0; i < expected.length; i++) {\n       assertEquals(expected[i], actual[i]);", "fixed": "  */\n @GwtCompatible(emulated = true)\n public class BaseEncodingTest extends TestCase {\n  public static void assertEquals(byte[] expected, byte[] actual) {\n     assertEquals(expected.length, actual.length);\n     for (int i = 0; i < expected.length; i++) {\n       assertEquals(expected[i], actual[i]);", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15853, value = \"Unexpected initial path key %s\")\n     IllegalStateException unexpectedInitialPathKey(String key);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10853, value = \"Unexpected initial path key %s\")\n     IllegalStateException unexpectedInitialPathKey(String key);\n     /**", "sourceBeforeFix": "id=15870", "sourceAfterFix": "id=10870"}
{"fixCommitSHA1": "ae434b1f61ef3cf1fffeaa482b5ed2fd9462e2cd", "projectName": "Atmosphere.atmosphere", "bugType": "Change Identifier Used", "problem": "      */\n     public void destroy() {\n         isDestroyed.set(true);\n        cache.remove(this);\n     }\n     private boolean destroyed(){", "fixed": "      */\n     public void destroy() {\n         isDestroyed.set(true);\n        cache.remove(r);\n     }\n     private boolean destroyed(){", "sourceBeforeFix": "cache.remove(this)", "sourceAfterFix": "cache.remove(r)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedSftpEndpointBuilder\n             extends\n                 AdvancedSftpEndpointConsumerBuilder, AdvancedSftpEndpointProducerBuilder {\n         default SftpEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedSftpEndpointBuilder\n             extends\n                 AdvancedSftpEndpointConsumerBuilder, AdvancedSftpEndpointProducerBuilder {\n         default SftpEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 15832, value = \"There is already a registered host named '%s'\")\n     String slaveAlreadyRegistered(String slaveName);\n     /**", "fixed": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 10832, value = \"There is already a registered host named '%s'\")\n     String slaveAlreadyRegistered(String slaveName);\n     /**", "sourceBeforeFix": "id=15831", "sourceAfterFix": "id=10831"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = String.class),\n         @ApiResponse(code = 400, message = \"Invalid username/password supplied\", response = Void.class) })\n    String loginUser(@QueryParam(\"username\") @NotNull   @ApiParam(\"The user name for login\")  String username,@QueryParam(\"password\") @NotNull   @ApiParam(\"The password for login in clear text\")  String password);\n     @GET\n     @Path(\"/logout\")", "fixed": "     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = String.class),\n         @ApiResponse(code = 400, message = \"Invalid username/password supplied\", response = Void.class) })\n    String loginUser(@QueryParam(\"username\") @NotNull   @ApiParam(\"The user name for login\")  String username,@QueryParam(\"password\") @NotNull   @ApiParam(\"The password for login in clear text\")  String password) throws Exception;\n     @GET\n     @Path(\"/logout\")", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "781f153ed21f62ab877ebb9e75cdff7330370cc4", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         assertFalse(valueCollection.retainAll(new ArrayList()));\n     }\n    @Test(expected = UnsupportedOperationException.class)\n     public void testToArrayWithArgument() throws Exception {\n         EntryHolder entryHolder = mock(EntryHolder.class);\n         Set set = new HashSet();", "fixed": "         assertFalse(valueCollection.retainAll(new ArrayList()));\n     }\n    @Test(expected = NullPointerException.class)\n     public void testToArrayWithArgument() throws Exception {\n         EntryHolder entryHolder = mock(EntryHolder.class);\n         Set set = new HashSet();", "sourceBeforeFix": "UnsupportedOperationException.class", "sourceAfterFix": "NullPointerException.class"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15834, value = \"%s recognizes only %s as children: %s\")\n     String unrecognizedChildren(String parent, String children, String parentSpec);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10834, value = \"%s recognizes only %s as children: %s\")\n     String unrecognizedChildren(String parent, String children, String parentSpec);\n     /**", "sourceBeforeFix": "id=15842", "sourceAfterFix": "id=10842"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface GoogleSheetsEndpointBuilder\n             extends\n                 GoogleSheetsEndpointConsumerBuilder, GoogleSheetsEndpointProducerBuilder {\n         default AdvancedGoogleSheetsEndpointBuilder advanced() {", "fixed": "     \n    public interface GoogleSheetsEndpointBuilder\n             extends\n                 GoogleSheetsEndpointConsumerBuilder, GoogleSheetsEndpointProducerBuilder {\n         default AdvancedGoogleSheetsEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15840, value = \"Interrupted waiting for result from server %s\")\n     String interruptedAwaitingResultFromServer(ServerIdentity server);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10840, value = \"Interrupted waiting for result from server %s\")\n     String interruptedAwaitingResultFromServer(ServerIdentity server);\n     /**", "sourceBeforeFix": "id=15870", "sourceAfterFix": "id=10870"}
{"fixCommitSHA1": "4652223dec1e4cd9f9a2978e4a0e6d4086c3b24a", "projectName": "netty.netty", "bugType": "Wrong Function Name", "problem": "         assertEquals(CONTENT_LENGTH, c.content().readableBytes());\n         assertEquals(\n                 Unpooled.wrappedBuffer(content, content.length - CONTENT_LENGTH, CONTENT_LENGTH),\n                c.content().readBytes(CONTENT_LENGTH));\n         c.release();\n         assertFalse(channel.finish());", "fixed": "         assertEquals(CONTENT_LENGTH, c.content().readableBytes());\n         assertEquals(\n                 Unpooled.wrappedBuffer(content, content.length - CONTENT_LENGTH, CONTENT_LENGTH),\n                c.content().readSlice(CONTENT_LENGTH));\n         c.release();\n         assertFalse(channel.finish());", "sourceBeforeFix": "c.content().readBytes(CONTENT_LENGTH)", "sourceAfterFix": "c.content().readSlice(CONTENT_LENGTH)"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     }, tags={ \"pet\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 405, message = \"Invalid input\", response = Void.class) })\n    void addPet(@Valid Pet body);\n     @DELETE\n     @Path(\"/{petId}\")", "fixed": "     }, tags={ \"pet\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 405, message = \"Invalid input\", response = Void.class) })\n    void addPet(@Valid Pet body) throws Exception;\n     @DELETE\n     @Path(\"/{petId}\")", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "ec5961a27122b228cb8adb634ee183eebcefa98c", "projectName": "apache.hive", "bugType": "Change Identifier Used", "problem": "   private LinkedHashMap<String,partitionDesc> pathToPartitionInfo;\n  private HashMap<String,Operator<? extends Serializable>> aliasToWork;", "fixed": "   private LinkedHashMap<String,partitionDesc> pathToPartitionInfo;\n  private LinkedHashMap<String,Operator<? extends Serializable>> aliasToWork;", "sourceBeforeFix": "HashMap<String,Operator<? extends Serializable>>", "sourceAfterFix": "LinkedHashMap<String,Operator<? extends Serializable>>"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "           \"functions are set.\");\n   \n  private final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "           \"functions are set.\");\n   \n  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_cn_4() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e7405\u670806\u65e5\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_cn_4() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e7405\u670806\u65e5\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "15a26dc6061cd3162d9bea82d0b1cf10beca07e2", "projectName": "Alluxio.alluxio", "bugType": "Missing Throws Exception", "problem": "   }\n   @Test\n  public void reportLostFileTest() {\n     long fileId = 1;\n     mThrown.expect(LineageDoesNotExistException.class);\n     mThrown.expectMessage(ExceptionMessage.LINEAGE_OUTPUT_FILE_NOT_EXIST.getMessage(fileId));\n    mLineageStore.requestFilePersistence(fileId);\n   }\n   @Test", "fixed": "   }\n   @Test\n  public void reportLostFileTest() throws LineageDoesNotExistException {\n     long fileId = 1;\n     mThrown.expect(LineageDoesNotExistException.class);\n     mThrown.expectMessage(ExceptionMessage.LINEAGE_OUTPUT_FILE_NOT_EXIST.getMessage(fileId));\n    mLineageStore.reportLostFile(fileId);\n   }\n   @Test", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "d1e4c8ba1c3d7799998b523ab8822dee96615718", "projectName": "wildfly.wildfly", "bugType": "Change Unary Operator\t", "problem": "         config.lock();\n         try {\n             AuditLogHandler existing = config.getConfiguredHandler(handler.getName());\n            if (!handler.isDifferent(existing)){\n                 if (handlerUpdateTask == null){\n                     handlerUpdateTask = new HandlerUpdateTask();\n                 }", "fixed": "         config.lock();\n         try {\n             AuditLogHandler existing = config.getConfiguredHandler(handler.getName());\n            if (handler.isDifferent(existing)){\n                 if (handlerUpdateTask == null){\n                     handlerUpdateTask = new HandlerUpdateTask();\n                 }", "sourceBeforeFix": "!handler.isDifferent(existing)", "sourceAfterFix": "handler.isDifferent(existing)"}
{"fixCommitSHA1": "3c136fbd9f79b179f010322aff8ed2b829209db8", "projectName": "checkstyle.checkstyle", "bugType": "Same Function Swap Args", "problem": "         final FilterSet fc =\n             SuppressionsLoader.loadSuppressions(getPath(\"suppressions_none.xml\"));\n         final FilterSet fc2 = new FilterSet();\n        assertEquals(fc, fc2);\n     }\n     @Test", "fixed": "         final FilterSet fc =\n             SuppressionsLoader.loadSuppressions(getPath(\"suppressions_none.xml\"));\n         final FilterSet fc2 = new FilterSet();\n        assertEquals(fc2, fc);\n     }\n     @Test", "sourceBeforeFix": "assertEquals(fc,fc2)", "sourceAfterFix": "assertEquals(fc2,fc)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "4281cc1c5d3aa51b56db9d9e251c761c52a855e3", "projectName": "libgdx.libgdx", "bugType": "Change Operand ", "problem": " \t * before growing the backing table. */\n \tpublic IntSet (int initialCapacity, float loadFactor) {\n \t\tif (initialCapacity < 0) throw new IllegalArgumentException(\"initialCapacity must be >= 0: \" + initialCapacity);\n\t\tif (capacity > 1 << 30) throw new IllegalArgumentException(\"initialCapacity is too large: \" + initialCapacity);\n \t\tcapacity = MathUtils.nextPowerOfTwo(initialCapacity);\n \t\tif (loadFactor <= 0) throw new IllegalArgumentException(\"loadFactor must be > 0: \" + loadFactor);", "fixed": " \t * before growing the backing table. */\n \tpublic IntSet (int initialCapacity, float loadFactor) {\n \t\tif (initialCapacity < 0) throw new IllegalArgumentException(\"initialCapacity must be >= 0: \" + initialCapacity);\n\t\tif (initialCapacity > 1 << 30) throw new IllegalArgumentException(\"initialCapacity is too large: \" + initialCapacity);\n \t\tcapacity = MathUtils.nextPowerOfTwo(initialCapacity);\n \t\tif (loadFactor <= 0) throw new IllegalArgumentException(\"loadFactor must be > 0: \" + loadFactor);", "sourceBeforeFix": "capacity > 1 << 30", "sourceAfterFix": "initialCapacity > 1 << 30"}
{"fixCommitSHA1": "994da4e53abe98a0f0004d7bb8c57e08c621570d", "projectName": "Atmosphere.atmosphere", "bugType": "Same Function More Args", "problem": "         c.add(new Cookie(\"yo\", \"man\"));\n         AtmosphereRequest request = new AtmosphereRequest.Builder().cookies(c).pathInfo(\"/a\").build();\n        processor.open(w, request);\n         r.get().getBroadcaster().broadcast(\"yo\").get();\n         assertNotNull(cValue.get());", "fixed": "         c.add(new Cookie(\"yo\", \"man\"));\n         AtmosphereRequest request = new AtmosphereRequest.Builder().cookies(c).pathInfo(\"/a\").build();\n        processor.open(w, request, AtmosphereResponse.newInstance(framework.getAtmosphereConfig(), request, w));\n         r.get().getBroadcaster().broadcast(\"yo\").get();\n         assertNotNull(cValue.get());", "sourceBeforeFix": "processor.open(w,request)", "sourceAfterFix": "processor.open(w,request,AtmosphereResponse.newInstance(framework.getAtmosphereConfig(),request,w))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  private final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "1daccd54d2ff2ecdb21d8c60268600c37febbb70", "projectName": "Alluxio.alluxio", "bugType": "Change Operand ", "problem": "           sum += mBuf.get(pId % 16);\n           if (DEBUG_MODE) {\n            buf.DATA.flip();\n             CommonUtils.printByteBuffer(LOG, buf.DATA);\n           }\n           buf.DATA.clear();", "fixed": "           sum += mBuf.get(pId % 16);\n           if (DEBUG_MODE) {\n            buf.DATA.order(ByteOrder.nativeOrder()).flip();\n             CommonUtils.printByteBuffer(LOG, buf.DATA);\n           }\n           buf.DATA.clear();", "sourceBeforeFix": "k < THREADS", "sourceAfterFix": "k < FILES"}
{"fixCommitSHA1": "62cba9fe2c42bbaea8fef30c85a9e5d7e9bcdb19", "projectName": "hazelcast.hazelcast", "bugType": "Change Numeric Literal", "problem": "         new Thread() {\n             public void run() {\n                 try {\n                    if (mm.tryLock(key, 4, TimeUnit.SECONDS)) {\n                         tryLockSuccess.countDown();\n                     }\n                 } catch (InterruptedException e) {", "fixed": "         new Thread() {\n             public void run() {\n                 try {\n                    if (mm.tryLock(key, 10, TimeUnit.SECONDS)) {\n                         tryLockSuccess.countDown();\n                     }\n                 } catch (InterruptedException e) {", "sourceBeforeFix": "mm.tryLock(key,4,TimeUnit.SECONDS)", "sourceAfterFix": "mm.tryLock(key,10,TimeUnit.SECONDS)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15844, value = \"Invalid rollout plan. Server group %s appears more than once in the plan.\")\n     String invalidRolloutPlanGroupAlreadyExists(String group);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10844, value = \"Invalid rollout plan. Server group %s appears more than once in the plan.\")\n     String invalidRolloutPlanGroupAlreadyExists(String group);\n     /**", "sourceBeforeFix": "id=15858", "sourceAfterFix": "id=10858"}
{"fixCommitSHA1": "3757a700a89638e5747d966bdaa8266b62c974c8", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "  */\n @GwtCompatible(emulated = true)\n public class BaseEncodingTest extends TestCase {\n  public void assertEquals(byte[] expected, byte[] actual) {\n     assertEquals(expected.length, actual.length);\n     for (int i = 0; i < expected.length; i++) {\n       assertEquals(expected[i], actual[i]);", "fixed": "  */\n @GwtCompatible(emulated = true)\n public class BaseEncodingTest extends TestCase {\n  public static void assertEquals(byte[] expected, byte[] actual) {\n     assertEquals(expected.length, actual.length);\n     for (int i = 0; i < expected.length; i++) {\n       assertEquals(expected[i], actual[i]);", "sourceBeforeFix": "1", "sourceAfterFix": "9"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_kr_4() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub14405\uc6d406\uc77c\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_kr_4() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub14405\uc6d406\uc77c\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserLists(String user, long cursor) throws TwitterException {\n        return twitter4j.List.constructListOfLists(get(getApiBaseURL() + V1 +\n                 user + \"/lists.json?cursor=\" + cursor, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserLists(String user, long cursor) throws TwitterException {\n        return twitter4j.List.createListList(get(getApiBaseURL() + V1 +\n                 user + \"/lists.json?cursor=\" + cursor, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/home_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/home_timeline.json\",true))"}
{"fixCommitSHA1": "25923003ecdba4ed236618b917dadeb36e74addf", "projectName": "openhab.openhab", "bugType": "Change Numeric Literal", "problem": "                     }\r\n                 } else if (command.compareTo(oldPercent) < 0) {\r\n                     for (int i = 0; i < repeatCount; i++) {\r\n                        Thread.sleep(50);\r\n                         if (BindingType.brightness.equals(type)) {\r\n                             sendDecrease(bulb, rgbwSteps, bridgeId);\r\n                         } else if (BindingType.colorTemperature.equals(type)) {\r", "fixed": "                     }\r\n                 } else if (command.compareTo(oldPercent) < 0) {\r\n                     for (int i = 0; i < repeatCount; i++) {\r\n                        Thread.sleep(100);\r\n                         if (BindingType.brightness.equals(type)) {\r\n                             sendDecrease(bulb, rgbwSteps, bridgeId);\r\n                         } else if (BindingType.colorTemperature.equals(type)) {\r", "sourceBeforeFix": "Thread.sleep(50)", "sourceAfterFix": "Thread.sleep(100)"}
{"fixCommitSHA1": "4b0219ee9bdb5c1a1e5c1809ce40b8d0031a773b", "projectName": "netty.netty", "bugType": "Less Specific If", "problem": "     }\n     private void handleRenegotiation(HandshakeStatus handshakeStatus) {\n        if (handshakeStatus == HandshakeStatus.NOT_HANDSHAKING) {\n             return;\n         }", "fixed": "     }\n     private void handleRenegotiation(HandshakeStatus handshakeStatus) {\n        if (handshakeStatus == HandshakeStatus.NOT_HANDSHAKING ||\n            handshakeStatus == HandshakeStatus.FINISHED) {\n             return;\n         }", "sourceBeforeFix": "handshakeStatus == HandshakeStatus.NOT_HANDSHAKING", "sourceAfterFix": "handshakeStatus == HandshakeStatus.NOT_HANDSHAKING || handshakeStatus == HandshakeStatus.FINISHED"}
{"fixCommitSHA1": "c131546eaadd07baf950bd6a44d07ee42d109e4c", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t *\n \t * @return Future indicating when the rpc endpoint has been terminated\n \t */\n\tCompletableFuture<Boolean> getTerminationFuture();\n }", "fixed": " \t *\n \t * @return Future indicating when the rpc endpoint has been terminated\n \t */\n\tCompletableFuture<Void> getTerminationFuture();\n }", "sourceBeforeFix": "CompletableFuture<Boolean>", "sourceAfterFix": "CompletableFuture<Void>"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "73a03b5e232d8f7049a03361e0454cb2eecb90c7", "projectName": "hazelcast.hazelcast", "bugType": "Change Numeric Literal", "problem": "     }\n    @Test(timeout = 30000)\n     public void testMutex() throws InterruptedException {\n         final int threadCount = 2;\n         final HazelcastInstance[] instances = createHazelcastInstanceFactory(threadCount).newInstances();", "fixed": "     }\n    @Test(timeout = 120000)\n     public void testMutex() throws InterruptedException {\n         final int threadCount = 2;\n         final HazelcastInstance[] instances = createHazelcastInstanceFactory(threadCount).newInstances();", "sourceBeforeFix": "timeout=30000", "sourceAfterFix": "timeout=120000"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  private final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "fixed": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4fv(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4fv(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "sourceBeforeFix": "GL20.glUniform2(location,toIntBuffer(v,offset,count << 1))", "sourceAfterFix": "GL20.glUniform2iv(location,toIntBuffer(v,offset,count << 1))"}
{"fixCommitSHA1": "a4662237bc467310f0dc1c28aa621f84571225b1", "projectName": "Activiti.Activiti", "bugType": "Change Numeric Literal", "problem": "     processEngineConfiguration.setClock(testClock);\n    testClock.setCurrentTime(new Date(0));\n     ProcessInstance processInstance = runtimeService.startProcessInstanceByKey(\"testRepetitionJobEvents\");\n     Job theJob = managementService.createJobQuery().processInstanceId(processInstance.getId()).singleResult();\n     assertNotNull(theJob);", "fixed": "     processEngineConfiguration.setClock(testClock);\n    testClock.setCurrentTime(new Date(1));\n     ProcessInstance processInstance = runtimeService.startProcessInstanceByKey(\"testRepetitionJobEvents\");\n     Job theJob = managementService.createJobQuery().processInstanceId(processInstance.getId()).singleResult();\n     assertNotNull(theJob);", "sourceBeforeFix": "new Date(0)", "sourceAfterFix": "new Date(1)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "4c66566e398558597a5058384d85a020b2418dab", "projectName": "eclipse.vert.x", "bugType": "Same Function Less Args", "problem": "   @Test\n   public void testListenOnWildcardPort() throws Exception {\n    startTest(getMethodName(), false);\n   }\n   @Test", "fixed": "   @Test\n   public void testListenOnWildcardPort() throws Exception {\n    startTest(getMethodName());\n   }\n   @Test", "sourceBeforeFix": "startTest(getMethodName(),false)", "sourceAfterFix": "startTest(getMethodName())"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface XChangeEndpointBuilder\n            extends\n                EndpointProducerBuilder {\n         default AdvancedXChangeEndpointBuilder advanced() {\n             return (AdvancedXChangeEndpointBuilder) this;\n         }", "fixed": "     \n    public interface XChangeEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedXChangeEndpointBuilder advanced() {\n             return (AdvancedXChangeEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "f8c20919f9c2e18e48142c2712e34298f98b983e", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \tpublic void startServlet() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tthis.container = factory\n\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\nassertThat(getResponse(\"http:\n \t}", "fixed": " \tpublic void startServlet() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tthis.container = factory\n\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\nassertThat(getResponse(\"http:\n \t}", "sourceBeforeFix": "factory.getEmbdeddedServletContainer()", "sourceAfterFix": "factory.getEmbeddedServletContainer()"}
{"fixCommitSHA1": "370ead7395fc9194a3dc2d05afc4b3409f6b27da", "projectName": "apache.hive", "bugType": "Change Identifier Used", "problem": "        (!destToClusterby.isEmpty()))\n       return false;\n    Iterator<Map.Entry<String, HashMap<String, ASTNode>>> aggrIter = destToAggregationExprs.entrySet().iterator();\n     while (aggrIter.hasNext()) {\n       HashMap<String, ASTNode> h = aggrIter.next().getValue();\n       if ((h != null) && (!h.isEmpty()))", "fixed": "        (!destToClusterby.isEmpty()))\n       return false;\n    Iterator<Map.Entry<String, LinkedHashMap<String, ASTNode>>> aggrIter = destToAggregationExprs.entrySet().iterator();\n     while (aggrIter.hasNext()) {\n       HashMap<String, ASTNode> h = aggrIter.next().getValue();\n       if ((h != null) && (!h.isEmpty()))", "sourceBeforeFix": "HashMap<String,ASTNode>", "sourceAfterFix": "LinkedHashMap<String,ASTNode>"}
{"fixCommitSHA1": "a295b91c37f681199a83fdb963344c19e0d015c0", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "     private void handleAtomicNumberSet(String[] args) {\n         long v = 0;\n         if (args.length > 1) {\n            v = Long.valueOf(args[1]);\n         }\n         getAtomicNumber().set(v);\n         println(getAtomicNumber().get());", "fixed": "     private void handleAtomicNumberSet(String[] args) {\n         long v = 0;\n         if (args.length > 1) {\n            v = Long.parseLong(args[1]);\n         }\n         getAtomicNumber().set(v);\n         println(getAtomicNumber().get());", "sourceBeforeFix": "Long.valueOf(args[2])", "sourceAfterFix": "Long.parseLong(args[2])"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "07b041b58bd8c0780c744e672e9dd256a933b841", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t\r\n \tstatic public String getSimpleName (Class c) {\r\n\t\treturn c.getName();\r\n \t}\r\n \t\r", "fixed": " \t\r\n \tstatic public String getSimpleName (Class c) {\r\n\t\treturn c.getSimpleName();\r\n \t}\r\n \t\r", "sourceBeforeFix": "c.getName()", "sourceAfterFix": "c.getSimpleName()"}
{"fixCommitSHA1": "cdd0fd89f2781fae8b868c7f11b73179d8847cf3", "projectName": "Alluxio.alluxio", "bugType": "Same Function Less Args", "problem": "         socketSelector.close();\n       } catch (IOException ex) {\n        LOG.warn(\"Unable to close socket selector\", ex);\n       }\n       throw e;\n     }", "fixed": "         socketSelector.close();\n       } catch (IOException ex) {\n        LOG.warn(\"Unable to close socket selector\");\n       }\n       throw e;\n     }", "sourceBeforeFix": "LOG.warn(\"Unable to close socket selector\",ex)", "sourceAfterFix": "LOG.warn(\"Unable to close socket selector\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "fixed": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "sourceBeforeFix": "EXTFramebufferObject.glGetFramebufferAttachmentParameterEXT(target,attachment,pname,params)", "sourceAfterFix": "EXTFramebufferObject.glGetFramebufferAttachmentParameterivEXT(target,attachment,pname,params)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface IrcEndpointBuilder\n             extends\n                 IrcEndpointConsumerBuilder, IrcEndpointProducerBuilder {\n         default AdvancedIrcEndpointBuilder advanced() {", "fixed": "     \n    public interface IrcEndpointBuilder\n             extends\n                 IrcEndpointConsumerBuilder, IrcEndpointProducerBuilder {\n         default AdvancedIrcEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "38eb6222bddaf49c3c9ae73ddef0cfe4ff5efa48", "projectName": "alibaba.dubbo", "bugType": "Change Numeric Literal", "problem": "     @Test\n     public void test_Decode_Return_Request_Object() throws IOException {\n        byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, (byte) 0xdf, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n         Person person = new Person();\n         byte[] request = getRequestBytes(person, header);", "fixed": "     @Test\n     public void test_Decode_Return_Request_Object() throws IOException {\n        byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, (byte) 0xe2, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n         Person person = new Person();\n         byte[] request = getRequestBytes(person, header);", "sourceBeforeFix": "(byte)0xff", "sourceAfterFix": "(byte)0xe2"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "fixed": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "sourceBeforeFix": "GL20.glUniformMatrix2(location,transpose,value)", "sourceAfterFix": "GL20.glUniformMatrix2fv(location,transpose,value)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getFavorites(String id, int page) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"favorites/\" + id + \".json\", \"page\", String.valueOf(page), true));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getFavorites(String id, int page) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"favorites/\" + id + \".json\", \"page\", String.valueOf(page), true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "39c82b017cbbc7239c90e792acd9d0e4efdb44de", "projectName": "apache.hive", "bugType": "Less Specific If", "problem": "       rowsRet = work.getLimit() >= 0 ? Math.min(work.getLimit() - totalRows, maxRows) : maxRows;\n     }\n     try {\n      if (rowsRet <= 0) {\n         fetch.clearFetchContext();\n         return false;\n       }", "fixed": "       rowsRet = work.getLimit() >= 0 ? Math.min(work.getLimit() - totalRows, maxRows) : maxRows;\n     }\n     try {\n      if (rowsRet <= 0 || work.getLimit() == totalRows) {\n         fetch.clearFetchContext();\n         return false;\n       }", "sourceBeforeFix": "rowsRet <= 0", "sourceAfterFix": "rowsRet <= 0 || work.getLimit() == totalRows"}
{"fixCommitSHA1": "cd942ae2ade297bb5f578260bcc2189c9bae7ddc", "projectName": "Bukkit.Bukkit", "bugType": "Change Identifier Used", "problem": "     BREWING_STAND(117),\n     CAULDRON(118),\n     ENDER_PORTAL(119),\n    ENTER_PORTAL_FRAME(120),\n     ENDER_STONE(121),\n     DRAGON_EGG(122),", "fixed": "     BREWING_STAND(117),\n     CAULDRON(118),\n     ENDER_PORTAL(119),\n    ENDER_PORTAL_FRAME(120),\n     ENDER_STONE(121),\n     DRAGON_EGG(122),", "sourceBeforeFix": "ENTER_PORTAL_FRAME(120)", "sourceAfterFix": "ENDER_PORTAL_FRAME(120)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface MiloServerEndpointBuilder\n             extends\n                 MiloServerEndpointConsumerBuilder, MiloServerEndpointProducerBuilder {\n         default AdvancedMiloServerEndpointBuilder advanced() {", "fixed": "     \n    public interface MiloServerEndpointBuilder\n             extends\n                 MiloServerEndpointConsumerBuilder, MiloServerEndpointProducerBuilder {\n         default AdvancedMiloServerEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "ea98386dfd18da047c877a2320cfdcf15df2ea06", "projectName": "facebook.presto", "bugType": "Change Modifier", "problem": "         appendToBody.ret();\n     }\n    private void generateHashPositionMethod(ClassDefinition classDefinition, CallSiteBinder callSiteBinder, List<Type> joinChannelTypes, List<FieldDefinition> joinChannelFields, FieldDefinition hashChannelField)\n     {\n         Parameter blockIndex = arg(\"blockIndex\", int.class);\n         Parameter blockPosition = arg(\"blockPosition\", int.class);", "fixed": "         appendToBody.ret();\n     }\n    private static void generateHashPositionMethod(ClassDefinition classDefinition, CallSiteBinder callSiteBinder, List<Type> joinChannelTypes, List<FieldDefinition> joinChannelFields, FieldDefinition hashChannelField)\n     {\n         Parameter blockIndex = arg(\"blockIndex\", int.class);\n         Parameter blockPosition = arg(\"blockPosition\", int.class);", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "e1626ef3aeecb1ccf7acf4056fb7bcf23243be25", "projectName": "apache.hive", "bugType": "Change Numeric Literal", "problem": " public class TestConverters {\n  @Test(timeout = 5000)\n   public void testTaskSpecToFragmentSpec() {\n     ByteBuffer procBb = ByteBuffer.allocate(4);\n     procBb.putInt(0, 200);", "fixed": " public class TestConverters {\n  @Test(timeout = 10000)\n   public void testTaskSpecToFragmentSpec() {\n     ByteBuffer procBb = ByteBuffer.allocate(4);\n     procBb.putInt(0, 200);", "sourceBeforeFix": "timeout=5000", "sourceAfterFix": "timeout=10000"}
{"fixCommitSHA1": "a10a471f4cb04226367516267fa636f257ef9807", "projectName": "yusuke.twitter4j", "bugType": "Change Numeric Literal", "problem": "         String reset = res.getResponseHeader(\"X-Rate-Limit-Reset\");\n         if (reset != null) {\n             long longReset = Long.parseLong(reset);\n            resetTimeInSeconds = (int) (longReset / 1000);\n         } else {\n             return null;\n         }", "fixed": "         String reset = res.getResponseHeader(\"X-Rate-Limit-Reset\");\n         if (reset != null) {\n             long longReset = Long.parseLong(reset);\n            resetTimeInSeconds = (int) longReset;\n         } else {\n             return null;\n         }", "sourceBeforeFix": "resetTimeInSeconds * 1000", "sourceAfterFix": "resetTimeInSeconds * 1000L"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15855, value = \"Invalid byte stream.\")\n     String invalidByteStream();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10855, value = \"Invalid byte stream.\")\n     String invalidByteStream();\n     /**", "sourceBeforeFix": "id=15845", "sourceAfterFix": "id=10845"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface IronMQEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedIronMQEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface IronMQEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedIronMQEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<DirectMessage> getSentDirectMessages() throws\n             TwitterException {\n        return DirectMessage.constructDirectMessages(get(getBaseURL() +\n                 \"direct_messages/sent.json\", new PostParameter[0], true));\n     }", "fixed": "      */\n     public ResponseList<DirectMessage> getSentDirectMessages() throws\n             TwitterException {\n        return DirectMessage.createDirectMessageList(get(getBaseURL() +\n                 \"direct_messages/sent.json\", new PostParameter[0], true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_to_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_to_me.json\",null,true))"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15858, value = \"No deployment content with hash %s is available in the deployment content repository.\")\n     String noDeploymentContentWithHash(String hash);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10858, value = \"No deployment content with hash %s is available in the deployment content repository.\")\n     String noDeploymentContentWithHash(String hash);\n     /**", "sourceBeforeFix": "id=15865", "sourceAfterFix": "id=10865"}
{"fixCommitSHA1": "f7c8057681e53272f09a59ab04acd07407727470", "projectName": "hazelcast.hazelcast", "bugType": "Change Numeric Literal", "problem": "         IMap<Object, Object> map2 = h2.getMap(mapName);\n         map1.put(\"key1\", \"value\");\n        sleepAtLeastMillis(1);\n         map2.put(\"key1\", \"LatestUpdatedValue\");\n         map2.put(\"key2\", \"value2\");\n        sleepAtLeastMillis(1);\n         map1.put(\"key2\", \"LatestUpdatedValue2\");", "fixed": "         IMap<Object, Object> map2 = h2.getMap(mapName);\n         map1.put(\"key1\", \"value\");\n        sleepAtLeastMillis(1000);\n         map2.put(\"key1\", \"LatestUpdatedValue\");\n         map2.put(\"key2\", \"value2\");\n        sleepAtLeastMillis(1000);\n         map1.put(\"key2\", \"LatestUpdatedValue2\");", "sourceBeforeFix": "sleepAtLeastMillis(1)", "sourceAfterFix": "sleepAtLeastMillis(1000)"}
{"fixCommitSHA1": "3a45f84e3ea25e96bd89d48b8e5ddb145e4a3815", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t\t\t}\n \t\t}\n\t\tAssert.assertTrue(\"Resultset size was \"+aggMap.size()+\". Expected was \"+keyCnt, outList.size() == keyCnt);\n \t\tfor (PactInteger integer : aggMap.values()) {\n \t\t\tAssert.assertTrue(\"Incorrect result\", integer.getValue() == expSum);", "fixed": " \t\t\t}\n \t\t}\n\t\tAssert.assertTrue(\"Resultset size was \"+aggMap.size()+\". Expected was \"+keyCnt, aggMap.size() == keyCnt);\n \t\tfor (PactInteger integer : aggMap.values()) {\n \t\t\tAssert.assertTrue(\"Incorrect result\", integer.getValue() == expSum);", "sourceBeforeFix": "outList.size()", "sourceAfterFix": "aggMap.size()"}
{"fixCommitSHA1": "e04cbbf23e9273cca31b1cc12142e34fae753542", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "          *  Is class declared as final.\n          *  @return true if class is declared as final\n          */\n        boolean isDeclaredAsFinal() {\n             return declaredAsFinal;\n         }", "fixed": "          *  Is class declared as final.\n          *  @return true if class is declared as final\n          */\n        private boolean isDeclaredAsFinal() {\n             return declaredAsFinal;\n         }", "sourceBeforeFix": "0", "sourceAfterFix": "2"}
{"fixCommitSHA1": "9c4101722a079fedba88c9a35d9d838e94396e15", "projectName": "Alluxio.alluxio", "bugType": "Wrong Function Name", "problem": "     mThriftServer = createThriftServer();\n     mWorkerNetAddress =\n         new NetAddress(BlockWorkerUtils.getWorkerAddress(mTachyonConf).getAddress()\n            .getCanonicalHostName(), thriftServerPort, mDataServer.getPort());\n     int webPort = mTachyonConf.getInt(Constants.WORKER_WEB_PORT, Constants.DEFAULT_WORKER_WEB_PORT);", "fixed": "     mThriftServer = createThriftServer();\n     mWorkerNetAddress =\n         new NetAddress(BlockWorkerUtils.getWorkerAddress(mTachyonConf).getAddress()\n            .getHostAddress(), thriftServerPort, mDataServer.getPort());\n     int webPort = mTachyonConf.getInt(Constants.WORKER_WEB_PORT, Constants.DEFAULT_WORKER_WEB_PORT);", "sourceBeforeFix": "BlockWorkerUtils.getWorkerAddress(mTachyonConf).getAddress().getCanonicalHostName()", "sourceAfterFix": "BlockWorkerUtils.getWorkerAddress(mTachyonConf).getAddress().getHostAddress()"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleAlternativesWithCommonLabel_1() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(561);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "fixed": " \tpublic void testMultipleAlternativesWithCommonLabel_1() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(560);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "sourceBeforeFix": "new StringBuilder(561)", "sourceAfterFix": "new StringBuilder(560)"}
{"fixCommitSHA1": "097a6b00c39c7dee3b2d6d321a7fe5b3eb626fb0", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "         && !NettyUtils.isDomainSocketSupported(address)\n         && blockSource == BlockInStreamSource.LOCAL) {\n       try {\n        LOG.info(\"Creating short circuit input stream for block {} @ {}\", blockId, address);\n         return createLocalBlockInStream(context, address, blockId, blockSize, options);\n       } catch (NotFoundException e) {", "fixed": "         && !NettyUtils.isDomainSocketSupported(address)\n         && blockSource == BlockInStreamSource.LOCAL) {\n       try {\n        LOG.debug(\"Creating short circuit input stream for block {} @ {}\", blockId, address);\n         return createLocalBlockInStream(context, address, blockId, blockSize, options);\n       } catch (NotFoundException e) {", "sourceBeforeFix": "LOG.info(\"Creating short circuit input stream for block {} @ {}\",blockId,address)", "sourceAfterFix": "LOG.debug(\"Creating short circuit input stream for block {} @ {}\",blockId,address)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetProgramiv (int program, int pname, IntBuffer params) {\r\n\t\tGL20.glGetProgram(program, pname, params);\r\n \t}\r\n \tpublic void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tEXTFramebufferObject.glGetRenderbufferParameterEXT(target, pname, params);\r\n \t}\r\n \tpublic String glGetShaderInfoLog (int shader) {\r", "fixed": " \t}\r\n \tpublic void glGetProgramiv (int program, int pname, IntBuffer params) {\r\n\t\tGL20.glGetProgramiv(program, pname, params);\r\n \t}\r\n \tpublic void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tEXTFramebufferObject.glGetRenderbufferParameterivEXT(target, pname, params);\r\n \t}\r\n \tpublic String glGetShaderInfoLog (int shader) {\r", "sourceBeforeFix": "GL20.glUniform3(location,v)", "sourceAfterFix": "GL20.glUniform3fv(location,v)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8c31000efa3e7745855734a2babc18fc0ab20bed", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t}\n \t@ImportAutoConfiguration(classes = ThymeleafAutoConfiguration.class)\n\t@UnrelatedOne\n \tstatic class ImportAutoConfigurationWithItemsTwo {\n \t}", "fixed": " \t}\n \t@ImportAutoConfiguration(classes = ThymeleafAutoConfiguration.class)\n\t@UnrelatedTwo\n \tstatic class ImportAutoConfigurationWithItemsTwo {\n \t}", "sourceBeforeFix": "ImportAutoConfigurationWithItemsOne.class", "sourceAfterFix": "ImportAutoConfigurationWithItemsTwo.class"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15859, value = \"A slave domain controller cannot accept deployment content uploads\")\n     String slaveCannotAcceptUploads();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10859, value = \"A slave domain controller cannot accept deployment content uploads\")\n     String slaveCannotAcceptUploads();\n     /**", "sourceBeforeFix": "id=15832", "sourceAfterFix": "id=10832"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface StubEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedStubEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface StubEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedStubEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "8d8e6b726ed729117504c85b0aa08f45af9e0010", "projectName": "openmrs.openmrs-core", "bugType": "Less Specific If", "problem": " \t\t\t\t\t\tsetIdToUse = \"*\";\r\n \t\t\t\t\tif (setIdToUse != null) {\r\n \t\t\t\t\t\thelper(patientDrugOrderSets, setIdToUse, order);\r\n\t\t\t\t\t\tif (order.isCurrent())\r\n \t\t\t\t\t\t\thelper(currentDrugOrderSets, setIdToUse, order);\r\n \t\t\t\t\t\telse\r\n \t\t\t\t\t\t\thelper(completedDrugOrderSets, setIdToUse, order);\r", "fixed": " \t\t\t\t\t\tsetIdToUse = \"*\";\r\n \t\t\t\t\tif (setIdToUse != null) {\r\n \t\t\t\t\t\thelper(patientDrugOrderSets, setIdToUse, order);\r\n\t\t\t\t\t\tif (order.isCurrent() || order.isFuture())\r\n \t\t\t\t\t\t\thelper(currentDrugOrderSets, setIdToUse, order);\r\n \t\t\t\t\t\telse\r\n \t\t\t\t\t\t\thelper(completedDrugOrderSets, setIdToUse, order);\r", "sourceBeforeFix": "order.isCurrent()", "sourceAfterFix": "order.isCurrent() || order.isFuture()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  private final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "c46a39b13e1bfccdc09301b26f9cc4804d417c3b", "projectName": "druid-io.druid", "bugType": "Same Function More Args", "problem": "   public void testMoveException() throws Exception\n   {\n     MockStorageService mockS3Client = new MockStorageService();\n    S3DataSegmentMover mover = new S3DataSegmentMover(mockS3Client);\n     mover.move(\n         sourceSegment,", "fixed": "   public void testMoveException() throws Exception\n   {\n     MockStorageService mockS3Client = new MockStorageService();\n    S3DataSegmentMover mover = new S3DataSegmentMover(mockS3Client, new S3DataSegmentPusherConfig());\n     mover.move(\n         sourceSegment,", "sourceBeforeFix": "new S3DataSegmentMover(mockS3Client)", "sourceAfterFix": "new S3DataSegmentMover(mockS3Client,new S3DataSegmentPusherConfig())"}
{"fixCommitSHA1": "7692923b6fe8b8ef72ebd628e28fa1aeaf11861d", "projectName": "Atmosphere.atmosphere", "bugType": "Change Identifier Used", "problem": "     @Override\n     public PoolableProvider returnBroadcaster(Broadcaster b) {\n        logger.info(\"Return Object {} now at size {}\", b, count.getAndDecrement());\n         try {\n             genericObjectPool.returnObject(b);\n         } catch (IllegalStateException ex) {", "fixed": "     @Override\n     public PoolableProvider returnBroadcaster(Broadcaster b) {\n        logger.trace(\"Return Object {} now at size {}\", b, count.getAndDecrement());\n         try {\n             genericObjectPool.returnObject(b);\n         } catch (IllegalStateException ex) {", "sourceBeforeFix": "logger.info(\"Creating Object {}\",count.getAndIncrement())", "sourceAfterFix": "logger.trace(\"Creating Object {}\",count.getAndIncrement())"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedSshEndpointBuilder\n             extends\n                 AdvancedSshEndpointConsumerBuilder, AdvancedSshEndpointProducerBuilder {\n         default SshEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedSshEndpointBuilder\n             extends\n                 AdvancedSshEndpointConsumerBuilder, AdvancedSshEndpointProducerBuilder {\n         default SshEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "83f58a38a06e424cc74c9d4035bf552df731fe65", "projectName": "apache.camel", "bugType": "Change Boolean Literal", "problem": "         super.doStop();\n         if (configuration.isWebhookAutoRegister()) {\n            log.info(\"Unregistering webhook for endpoint \" + delegateEndpoint);\n             delegateEndpoint.unregisterWebhook();\n         }\n     }", "fixed": "         super.doStop();\n         if (configuration.isWebhookAutoRegister()) {\n            log.info(\"Unregistering webhook for endpoint {}\", delegateEndpoint);\n             delegateEndpoint.unregisterWebhook();\n         }\n     }", "sourceBeforeFix": "return false; ", "sourceAfterFix": "return true; "}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "46296923ac903da634d4789804c84e289ae91297", "projectName": "neo4j.neo4j", "bugType": "Same Function Less Args", "problem": "     @Test\n     public void shouldAllowExplainAsStartForACypherQuery() throws Exception\n     {\n        executeCommand( \"EXPLAIN OPTIONAL MATCH (n) RETURN n;\", \"DbHits\", \"No data returned\" );\n     }\n     @Test", "fixed": "     @Test\n     public void shouldAllowExplainAsStartForACypherQuery() throws Exception\n     {\n        executeCommand( \"EXPLAIN OPTIONAL MATCH (n) RETURN n;\", \"No data returned\" );\n     }\n     @Test", "sourceBeforeFix": "executeCommand(\"EXPLAIN OPTIONAL MATCH (n) RETURN n;\",\"DbHits\",\"No data returned\")", "sourceAfterFix": "executeCommand(\"EXPLAIN OPTIONAL MATCH (n) RETURN n;\",\"No data returned\")"}
{"fixCommitSHA1": "fae9ab4140b56123177d498845b738b3bb53808d", "projectName": "spring-projects.spring-boot", "bugType": "Change Numeric Literal", "problem": " \t\tthis.context.refresh();\n \t\tassertNotNull(this.context.getBean(AuthenticationManagerBuilder.class));\n\t\tassertEquals(9, this.context.getBean(FilterChainProxy.class).getFilterChains()\n \t\t\t\t.size());\n \t}", "fixed": " \t\tthis.context.refresh();\n \t\tassertNotNull(this.context.getBean(AuthenticationManagerBuilder.class));\n\t\tassertEquals(8, this.context.getBean(FilterChainProxy.class).getFilterChains()\n \t\t\t\t.size());\n \t}", "sourceBeforeFix": "assertEquals(9,this.context.getBean(FilterChainProxy.class).getFilterChains().size())", "sourceAfterFix": "assertEquals(8,this.context.getBean(FilterChainProxy.class).getFilterChains().size())"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedFacebookEndpointBuilder\n             extends\n                 AdvancedFacebookEndpointConsumerBuilder, AdvancedFacebookEndpointProducerBuilder {\n         default FacebookEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedFacebookEndpointBuilder\n             extends\n                 AdvancedFacebookEndpointConsumerBuilder, AdvancedFacebookEndpointProducerBuilder {\n         default FacebookEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "daef17d4bb38e7a7961121288f1ef4ae3c56ec71", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "     Node caught = n.getFirstChild();\n     if (caught.isName()) {\n       validateName(caught);\n    } else if (n.isArrayPattern()) {\n       validateArrayPattern(Token.CATCH, caught);\n     } else {\n       validateObjectPattern(Token.CATCH, caught);", "fixed": "     Node caught = n.getFirstChild();\n     if (caught.isName()) {\n       validateName(caught);\n    } else if (caught.isArrayPattern()) {\n       validateArrayPattern(Token.CATCH, caught);\n     } else {\n       validateObjectPattern(Token.CATCH, caught);", "sourceBeforeFix": "n.isArrayPattern()", "sourceAfterFix": "caught.isArrayPattern()"}
{"fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n            file = new RandomAccessFile(FOLDER + (mWorkerId + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());", "fixed": "         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n            file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "8fffaa7778e75625710adc9e458e7a549c525ce9", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "       priorRange = ranges[i];\n       cumNum = val;\n     }\n    long val = histogram.getCount();\n     if (val - cumNum > 0) {\n       metricsRecordBuilder.addCounter(\n           Interns.info(name + \"_\" + rangeType + \"_\" + ranges[ranges.length - 1] + \"-inf\", desc),", "fixed": "       priorRange = ranges[i];\n       cumNum = val;\n     }\n    long val = snapshot.getCount();\n     if (val - cumNum > 0) {\n       metricsRecordBuilder.addCounter(\n           Interns.info(name + \"_\" + rangeType + \"_\" + ranges[ranges.length - 1] + \"-inf\", desc),", "sourceBeforeFix": "histogram.getCount()", "sourceAfterFix": "snapshot.getCount()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "0355f17f04738ad9315d0c8ecad1b282f836e7f3", "projectName": "antlr.antlr4", "bugType": "Change Identifier Used", "problem": " \t\t\t\t\tSetTransition set = (SetTransition)edge;\n \t\t\t\t\tString label = set.label().toString();\n \t\t\t\t\tif ( isLexer ) label = set.label().toString(true);\n\t\t\t\t\telse if ( grammar!=null ) label = set.label().toString(grammar.getTokenNames());\n \t\t\t\t\tif ( edge instanceof NotSetTransition ) label = \"~\"+label;\n \t\t\t\t\tedgeST.add(\"label\", getEdgeLabel(label));\n \t\t\t\t}", "fixed": " \t\t\t\t\tSetTransition set = (SetTransition)edge;\n \t\t\t\t\tString label = set.label().toString();\n \t\t\t\t\tif ( isLexer ) label = set.label().toString(true);\n\t\t\t\t\telse if ( grammar!=null ) label = set.label().toString(grammar.getTokenDisplayNames());\n \t\t\t\t\tif ( edge instanceof NotSetTransition ) label = \"~\"+label;\n \t\t\t\t\tedgeST.add(\"label\", getEdgeLabel(label));\n \t\t\t\t}", "sourceBeforeFix": "grammar.getTokenNames()", "sourceAfterFix": "grammar.getTokenDisplayNames()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "198ab0e862cdf33e8dff37bf24676ffcb392ed82", "projectName": "apache.hive", "bugType": "Wrong Function Name", "problem": "     for (String poolName : poolsToRedistribute) {\n       if (LOG.isDebugEnabled()) {\n        LOG.info(\"Processing changes for pool \" + poolName + \": \" + pools.get(poolName));\n       }\n       processPoolChangesOnMasterThread(poolName, hasRequeues, syncWork);\n     }", "fixed": "     for (String poolName : poolsToRedistribute) {\n       if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Processing changes for pool \" + poolName + \": \" + pools.get(poolName));\n       }\n       processPoolChangesOnMasterThread(poolName, hasRequeues, syncWork);\n     }", "sourceBeforeFix": "LOG.info(\"Processing changes for pool \" + poolName + \": \"+ pools.get(poolName))", "sourceAfterFix": "LOG.debug(\"Processing changes for pool \" + poolName + \": \"+ pools.get(poolName))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  private final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  private final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "5b4979166050e553fd967e5094509de7975651ec", "projectName": "Graylog2.graylog2-server", "bugType": "Wrong Function Name", "problem": "             chunks.get(chunk.getId()).put(chunk.getSequenceNumber(), chunk);\n         } else {\n            Map<Integer, GELFMessageChunk> c = Maps.newHashMap();\n             c.put(chunk.getSequenceNumber(), chunk);\n             chunks.put(chunk.getId(), c);\n         }", "fixed": "             chunks.get(chunk.getId()).put(chunk.getSequenceNumber(), chunk);\n         } else {\n            Map<Integer, GELFMessageChunk> c = Maps.newTreeMap();\n             c.put(chunk.getSequenceNumber(), chunk);\n             chunks.put(chunk.getId(), c);\n         }", "sourceBeforeFix": "Maps.newHashMap()", "sourceAfterFix": "Maps.newTreeMap()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "       } else {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           for (int i = 0; i < BLOCKS_PER_FILE; i ++) {\n             buf.DATA.get(mBuf.array());", "fixed": "       } else {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           for (int i = 0; i < BLOCKS_PER_FILE; i ++) {\n             buf.DATA.get(mBuf.array());", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "pId + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "af07edf1ab9024a78cb280e85982b1d6661a09ad", "projectName": "apache.hadoop", "bugType": "Change Modifier", "problem": "    * \n    * @param schedulingInfo\n    */\n  protected void setSchedulingInfo(String schedulingInfo) {\n     super.setSchedulingInfo(schedulingInfo);\n   }", "fixed": "    * \n    * @param schedulingInfo\n    */\n  @InterfaceAudience.Private\n  public void setSchedulingInfo(String schedulingInfo) {\n     super.setSchedulingInfo(schedulingInfo);\n   }", "sourceBeforeFix": "4", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface CometdEndpointBuilder\n             extends\n                 CometdEndpointConsumerBuilder, CometdEndpointProducerBuilder {\n         default AdvancedCometdEndpointBuilder advanced() {", "fixed": "     \n    public interface CometdEndpointBuilder\n             extends\n                 CometdEndpointConsumerBuilder, CometdEndpointProducerBuilder {\n         default AdvancedCometdEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getMentions(Paging paging) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getMentions(Paging paging) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "55ed50c4975cf694828d46ee9ca32ce72a9ef913", "projectName": "clojure.clojure", "bugType": "Change Identifier Used", "problem": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 20:\r\n\t\t\treturn invoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "fixed": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 20:\r\n\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "sourceBeforeFix": "invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())", "sourceAfterFix": "doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())"}
{"fixCommitSHA1": "e007ca9e7d3692b65de28d1018d2d7f8228ed112", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "         }\n         public void shutdown() {\n            channel.close();\n             bossGroup.shutdownGracefully();\n             workerGroup.shutdownGracefully();\n         }", "fixed": "         }\n         public void shutdown() {\n            channel.disconnect();\n             bossGroup.shutdownGracefully();\n             workerGroup.shutdownGracefully();\n         }", "sourceBeforeFix": "channel.close()", "sourceAfterFix": "channel.disconnect()"}
{"fixCommitSHA1": "bd79617dcf4a6de30069484736cb556705d1ca8f", "projectName": "xetorthio.jedis", "bugType": "Wrong Function Name", "problem": "     return new JedisClusterCommand<Set<byte[]>>(connectionHandler, maxRedirections) {\n       @Override\n       public Set<byte[]> execute(Jedis connection) {\n        return connection.zrangeByLex(key, max, min);\n       }\n     }.runBinary(key);\n   }", "fixed": "     return new JedisClusterCommand<Set<byte[]>>(connectionHandler, maxRedirections) {\n       @Override\n       public Set<byte[]> execute(Jedis connection) {\n        return connection.zrevrangeByLex(key, max, min);\n       }\n     }.runBinary(key);\n   }", "sourceBeforeFix": "connection.zrangeByLex(key,max,min)", "sourceAfterFix": "connection.zrevrangeByLex(key,max,min)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AMQPEndpointBuilder\n             extends\n                 AMQPEndpointConsumerBuilder, AMQPEndpointProducerBuilder {\n         default AdvancedAMQPEndpointBuilder advanced() {", "fixed": "     \n    public interface AMQPEndpointBuilder\n             extends\n                 AMQPEndpointConsumerBuilder, AMQPEndpointProducerBuilder {\n         default AdvancedAMQPEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "575d51b0ce4182cb6712001e121358c103dfd26c", "projectName": "druid-io.druid", "bugType": "Change Identifier Used", "problem": "     this.config = config;\n   }\n  public Optional<ZkWorker> findWorkerForTask(\n       final ImmutableMap<String, ImmutableZkWorker> zkWorkers,\n       final Task task\n   )", "fixed": "     this.config = config;\n   }\n  public Optional<ImmutableZkWorker> findWorkerForTask(\n       final ImmutableMap<String, ImmutableZkWorker> zkWorkers,\n       final Task task\n   )", "sourceBeforeFix": "Optional<ZkWorker>", "sourceAfterFix": "Optional<ImmutableZkWorker>"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface NettyHttpEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedNettyHttpEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface NettyHttpEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedNettyHttpEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e2119d33293008fcc876f5fcd58ede2993eb24d6", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnBean(RabbitTemplate.class)\n\t@ConditionalOnEnablednHealthIndicator(\"rabbit\")\n \tpublic static class RabbitHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<RabbitHealthIndicator, RabbitTemplate> {", "fixed": " \t@Configuration\n \t@ConditionalOnBean(RabbitTemplate.class)\n\t@ConditionalOnEnabledHealthIndicator(\"rabbit\")\n \tpublic static class RabbitHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<RabbitHealthIndicator, RabbitTemplate> {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"rabbit\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"rabbit\")"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedToMe() throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_to_me.json\",\n                 null, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedToMe() throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_to_me.json\",\n                 null, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/public_timeline.json\",false))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/public_timeline.json\",false))"}
{"fixCommitSHA1": "0a2b272cb8cb45faafd95a3bbc9e9af813620e09", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "     }\n     public void destroy() {\n        final LockService lockService = nodeEngine.getService(LockService.SERVICE_NAME);\n         if (lockService != null) {\n             lockService.clearLockStore(partitionId, lockNamespace);\n         }", "fixed": "     }\n     public void destroy() {\n        final LockService lockService = nodeEngine.getSharedService(LockService.SERVICE_NAME);\n         if (lockService != null) {\n             lockService.clearLockStore(partitionId, lockNamespace);\n         }", "sourceBeforeFix": "nodeEngine.getService(LockService.SERVICE_NAME)", "sourceAfterFix": "nodeEngine.getSharedService(LockService.SERVICE_NAME)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  private final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "0256c6ceff897814a8d532fc43d6006c8b9bd7b6", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t\tfinal float b = y - this.y;\r\n \t\tfinal float c = z - this.z;\r\n\t\treturn a * a + b * b + c * b;\r\n \t}\r\n \t\r", "fixed": " \t\tfinal float b = y - this.y;\r\n \t\tfinal float c = z - this.z;\r\n\t\treturn a * a + b * b + c * c;\r\n \t}\r\n \t\r", "sourceBeforeFix": "c * b", "sourceAfterFix": "c * c"}
{"fixCommitSHA1": "652af1ee3ffbb286cf8b4ee1ecf2312566cf7ec5", "projectName": "Graylog2.graylog2-server", "bugType": "Less Specific If", "problem": "                 .expect(200, 404)\n                 .execute();\n            if (response == null) {\n                 return -1L;\n             } else {\n                 return response.value;", "fixed": "                 .expect(200, 404)\n                 .execute();\n            if (response == null || response.value == null) {\n                 return -1L;\n             } else {\n                 return response.value;", "sourceBeforeFix": "response == null", "sourceAfterFix": "response == null || response.value == null"}
{"fixCommitSHA1": "79946366e1ab141ef2b595e0079dcac7b913da2b", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "             \"1: \" + getCheckMessage(MSG_KEY_MISMATCH),\n         };\n        verify(checkConfig, getPath(\"InputPackageDeclarationDiffDirectory.java\"), expected);\n     }\n     @Test", "fixed": "             \"1: \" + getCheckMessage(MSG_KEY_MISMATCH),\n         };\n        verify(checkConfig,\n                getNonCompilablePath(\"InputPackageDeclarationDiffDirectory.java\"), expected);\n     }\n     @Test", "sourceBeforeFix": "getPath(\"InputPackageDeclarationDiffDirectoryAtParent.java\")", "sourceAfterFix": "getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtParent.java\")"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface StreamEndpointBuilder\n             extends\n                 StreamEndpointConsumerBuilder, StreamEndpointProducerBuilder {\n         default AdvancedStreamEndpointBuilder advanced() {", "fixed": "     \n    public interface StreamEndpointBuilder\n             extends\n                 StreamEndpointConsumerBuilder, StreamEndpointProducerBuilder {\n         default AdvancedStreamEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform2iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toIntBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform3f (int location, float x, float y, float z) {\r", "fixed": " \t}\r\n \tpublic void glUniform2iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform2iv(location, v);\r\n \t}\r\n \tpublic void glUniform2iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform2iv(location, toIntBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform3f (int location, float x, float y, float z) {\r", "sourceBeforeFix": "GL20.glGetVertexAttrib(index,pname,params)", "sourceAfterFix": "GL20.glGetVertexAttribfv(index,pname,params)"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStream<OUT> writeAsCsv(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsCsv<OUT> format, long millis, OUT endTuple) {\n\t\tDataStream<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByMillis<OUT>(\n \t\t\t\tpath, format, millis, endTuple));\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "fixed": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStreamSink<OUT> writeAsCsv(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsCsv<OUT> format, long millis, OUT endTuple) {\n\t\tDataStreamSink<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByMillis<OUT>(\n \t\t\t\tpath, format, millis, endTuple));\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "4be7f3630491ebbb716abb50233b7b453c39eb53", "projectName": "apache.camel", "bugType": "Change Boolean Literal", "problem": "             String messageSelector, \n             boolean topic, \n             String durableSubscriptionId) throws Exception {\n        return createMessageConsumer(session, destinationName, messageSelector, topic, durableSubscriptionId, true);\n     }\n     public static MessageConsumer createMessageConsumer(", "fixed": "             String messageSelector, \n             boolean topic, \n             String durableSubscriptionId) throws Exception {\n        return createMessageConsumer(session, destinationName, messageSelector, topic, durableSubscriptionId, false);\n     }\n     public static MessageConsumer createMessageConsumer(", "sourceBeforeFix": "createMessageConsumer(session,destinationName,messageSelector,topic,durableSubscriptionId,true)", "sourceAfterFix": "createMessageConsumer(session,destinationName,messageSelector,topic,durableSubscriptionId,false)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": " };\n   \n  private final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler", "fixed": " };\n   \n  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  private final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 15831, value = \"The master host controller cannot register slave host controllers as it's current running mode is '%s'\")\n     String adminOnlyModeCannotAcceptSlaves(RunningMode runningMode);\n     /**", "fixed": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 10831, value = \"The master host controller cannot register slave host controllers as it's current running mode is '%s'\")\n     String adminOnlyModeCannotAcceptSlaves(RunningMode runningMode);\n     /**", "sourceBeforeFix": "id=15847", "sourceAfterFix": "id=10847"}
{"fixCommitSHA1": "6207b66e20a807c1cc74c914f2734c5dab5bfea7", "projectName": "druid-io.druid", "bugType": "Same Function More Args", "problem": "     final PlannerConfig plannerConfig = new PlannerConfig();\n     final DruidSchema druidSchema = CalciteTests.createMockSchema(conglomerate, walker, plannerConfig);\n    final SystemSchema systemSchema = CalciteTests.createMockSystemSchema(druidSchema, walker);\n     final DruidOperatorTable operatorTable = new DruidOperatorTable(\n         ImmutableSet.of(new ThetaSketchSqlAggregator()),\n         ImmutableSet.of()", "fixed": "     final PlannerConfig plannerConfig = new PlannerConfig();\n     final DruidSchema druidSchema = CalciteTests.createMockSchema(conglomerate, walker, plannerConfig);\n    final SystemSchema systemSchema = CalciteTests.createMockSystemSchema(druidSchema, walker, plannerConfig);\n     final DruidOperatorTable operatorTable = new DruidOperatorTable(\n         ImmutableSet.of(new ThetaSketchSqlAggregator()),\n         ImmutableSet.of()", "sourceBeforeFix": "CalciteTests.createMockSystemSchema(druidSchema,walker)", "sourceAfterFix": "CalciteTests.createMockSystemSchema(druidSchema,walker,plannerConfig)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15854, value = \"Null stream at index %d\")\n     String nullStream(int index);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10854, value = \"Null stream at index %d\")\n     String nullStream(int index);\n     /**", "sourceBeforeFix": "id=15840", "sourceAfterFix": "id=10840"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetsOfMe() throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweets_of_me.json\",\n                 null, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetsOfMe() throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweets_of_me.json\",\n                 null, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline.json\",true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "73a03b5e232d8f7049a03361e0454cb2eecb90c7", "projectName": "hazelcast.hazelcast", "bugType": "Change Numeric Literal", "problem": "             initialPermits += rand;\n             assertEquals(initialPermits, semaphore.availablePermits());\n            instances[i].getLifecycleService().shutdown();\n             semaphore.acquire(rand);\n             initialPermits -= rand;", "fixed": "             initialPermits += rand;\n             assertEquals(initialPermits, semaphore.availablePermits());\n            instances[i].shutdown();\n             semaphore.acquire(rand);\n             initialPermits -= rand;", "sourceBeforeFix": "timeout=30000", "sourceAfterFix": "timeout=120000"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should return default value if property name does not exist\n \t * @should not fail with null default value\n \t */\n\tpublic String getGlobalProperty(String propertyName, String defaultValue) throws APIException;\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>", "fixed": " \t * @should return default value if property name does not exist\n \t * @should not fail with null default value\n \t */\n\tpublic String getGlobalProperty(String propertyName, String defaultValue);\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStream<OUT> writeAsText(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsText<OUT> format, int batchSize, OUT endTuple) {\n\t\tDataStream<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByBatches<OUT>(\n \t\t\t\tpath, format, batchSize, endTuple), null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "fixed": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStreamSink<OUT> writeAsText(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsText<OUT> format, int batchSize, OUT endTuple) {\n\t\tDataStreamSink<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByBatches<OUT>(\n \t\t\t\tpath, format, batchSize, endTuple), null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15860, value = \"No deployment with name %s found\")\n     String noDeploymentContentWithName(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10860, value = \"No deployment with name %s found\")\n     String noDeploymentContentWithName(String name);\n     /**", "sourceBeforeFix": "id=15851", "sourceAfterFix": "id=10851"}
{"fixCommitSHA1": "99ed41cc78fe7dbc36ea17d9a6a1a56b51bcb12d", "projectName": "gephi.gephi", "bugType": "Change Numeric Literal", "problem": "         assertEquals(inDegree1, 0);\r\n         assertEquals(inDegree2, 1);\r\n         assertEquals(outDegree1, 1);\r\n        assertEquals(avDegree, 1.0);\r\n     }\r\n     @Test\r", "fixed": "         assertEquals(inDegree1, 0);\r\n         assertEquals(inDegree2, 1);\r\n         assertEquals(outDegree1, 1);\r\n        assertEquals(avDegree, 0.5);\r\n     }\r\n     @Test\r", "sourceBeforeFix": "assertEquals(avDegree,1.0)", "sourceAfterFix": "assertEquals(avDegree,0.5)"}
{"fixCommitSHA1": "fc9a05a1e4ace9cce5940b7dc606a8bea763a3f9", "projectName": "apache.hive", "bugType": "Change Identifier Used", "problem": "   }\n   public void testMetaDataGetTables() throws SQLException {\n    getTablesTest(TableType.MANAGED_TABLE.toString(), TableType.VIRTUAL_VIEW.toString());\n   }\n   public  void testMetaDataGetTablesHive() throws SQLException {", "fixed": "   }\n   public void testMetaDataGetTables() throws SQLException {\n    getTablesTest(ClassicTableTypes.TABLE.toString(), ClassicTableTypes.VIEW.toString());\n   }\n   public  void testMetaDataGetTablesHive() throws SQLException {", "sourceBeforeFix": "new HiveTableTypeMapping()", "sourceAfterFix": "new ClassicTableTypeMapping()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "509beae1e2d9a01e952f9eaf0c4a88037076fc63", "projectName": "apache.hbase", "bugType": "Missing Throws Exception", "problem": "   @Override\n  public void openRegion(HRegionInfo region) {\n     LOG.info(\"Received request to open region: \" +\n       region.getRegionNameAsString());\n     if (this.stopped) throw new RegionServerStoppedException();", "fixed": "   @Override\n  public void openRegion(HRegionInfo region)\n  throws RegionServerStoppedException {\n     LOG.info(\"Received request to open region: \" +\n       region.getRegionNameAsString());\n     if (this.stopped) throw new RegionServerStoppedException();", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15841, value = \"Exception getting result from server %s: %s\")\n     String exceptionAwaitingResultFromServer(ServerIdentity server, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10841, value = \"Exception getting result from server %s: %s\")\n     String exceptionAwaitingResultFromServer(ServerIdentity server, String message);\n     /**", "sourceBeforeFix": "id=15851", "sourceAfterFix": "id=10851"}
{"fixCommitSHA1": "e38662958d7db7030bf961d25341586cedea5f1f", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "     @Message(id = 14238, value = \"More than one timer found in database with id %s\")\n     RuntimeException moreThanOneTimerFoundWithId(String id);\n    @Message(id = 14238, value = \"The timer service has been disabled. Please add a <timer-service> entry into the ejb section of the server configuration to enable it.\")\n     String timerServiceIsNotActive();\n    @Message(id = 14239, value = \"This EJB does not have any timeout methods\")\n     String ejbHasNoTimerMethods();\n }", "fixed": "     @Message(id = 14238, value = \"More than one timer found in database with id %s\")\n     RuntimeException moreThanOneTimerFoundWithId(String id);\n    @Message(id = 14239, value = \"The timer service has been disabled. Please add a <timer-service> entry into the ejb section of the server configuration to enable it.\")\n     String timerServiceIsNotActive();\n    @Message(id = 14240, value = \"This EJB does not have any timeout methods\")\n     String ejbHasNoTimerMethods();\n }", "sourceBeforeFix": "id=14238", "sourceAfterFix": "id=14239"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      * @param servers the servers that need to restart.\n      */\n     @LogMessage(level = Level.INFO)\n    @Message(id = 15807, value = \"Domain model has changed on re-connect. The following servers will need to be restarted for changes to take affect: %s\")\n     void domainModelChangedOnReConnect(Set<ServerIdentity> servers);\n     /**", "fixed": "      * @param servers the servers that need to restart.\n      */\n     @LogMessage(level = Level.INFO)\n    @Message(id = 10807, value = \"Domain model has changed on re-connect. The following servers will need to be restarted for changes to take affect: %s\")\n     void domainModelChangedOnReConnect(Set<ServerIdentity> servers);\n     /**", "sourceBeforeFix": "id=15800", "sourceAfterFix": "id=10800"}
{"fixCommitSHA1": "ba442b98826fc79e2ff536c269eb7f8df9916b3a", "projectName": "druid-io.druid", "bugType": "Change Identifier Used", "problem": " \n@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = \"type\", defaultImpl = SingleServerInventoryProvider.class)\n @JsonSubTypes(value = {\n     @JsonSubTypes.Type(name = \"legacy\", value = SingleServerInventoryProvider.class),\n     @JsonSubTypes.Type(name = \"batch\", value = BatchServerInventoryViewProvider.class)", "fixed": " \n@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = \"type\", defaultImpl = BatchServerInventoryViewProvider.class)\n @JsonSubTypes(value = {\n     @JsonSubTypes.Type(name = \"legacy\", value = SingleServerInventoryProvider.class),\n     @JsonSubTypes.Type(name = \"batch\", value = BatchServerInventoryViewProvider.class)", "sourceBeforeFix": "SingleServerInventoryProvider.class", "sourceAfterFix": "BatchServerInventoryViewProvider.class"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "fixed": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2fv(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2fv(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "sourceBeforeFix": "GL20.glUniform1(location,v)", "sourceAfterFix": "GL20.glUniform1iv(location,v)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e1626ef3aeecb1ccf7acf4056fb7bcf23243be25", "projectName": "apache.hive", "bugType": "Change Numeric Literal", "problem": " public class TestConverters {\n  @Test(timeout = 5000)\n   public void testTaskSpecToFragmentSpec() {\n     ByteBuffer procBb = ByteBuffer.allocate(4);\n     procBb.putInt(0, 200);", "fixed": " public class TestConverters {\n  @Test(timeout = 10000)\n   public void testTaskSpecToFragmentSpec() {\n     ByteBuffer procBb = ByteBuffer.allocate(4);\n     procBb.putInt(0, 200);", "sourceBeforeFix": "timeout=5000", "sourceAfterFix": "timeout=10000"}
{"fixCommitSHA1": "b847c8f134aa71f74efe3098fff6d4c095d63c3c", "projectName": "spring-projects.spring-security-oauth", "bugType": "Change Identifier Used", "problem": " \t\t\t\t\t}, key);\n \t\t}\n \t\tcatch (EmptyResultDataAccessException e) {\n\t\t\tif (LOG.isInfoEnabled()) {\n \t\t\t\tLOG.debug(\"Failed to find access token for authentication \" + authentication);\n \t\t\t}\n \t\t}", "fixed": " \t\t\t\t\t}, key);\n \t\t}\n \t\tcatch (EmptyResultDataAccessException e) {\n\t\t\tif (LOG.isDebugEnabled()) {\n \t\t\t\tLOG.debug(\"Failed to find access token for authentication \" + authentication);\n \t\t\t}\n \t\t}", "sourceBeforeFix": "LOG.isInfoEnabled()", "sourceAfterFix": "LOG.isDebugEnabled()"}
{"fixCommitSHA1": "b0500e90373a5e606758f857329d576a4a1a3265", "projectName": "openhab.openhab", "bugType": "Change Identifier Used", "problem": " \t\tCalendar cal = DateTimeUtils.truncateToMidnight(calendar);\n \t\tSun sun = new Sun();\n \t\tfor (int minutes = 0; minutes <= MINUTES_PER_DAY; minutes += CURVE_TIME_INTERVAL) {\n\t\t\tsetSunPosition(calendar, latitude, longitude, sun);\n \t\t\tif (sun.getPosition().getElevation() < SUN_ANGLE) {\n \t\t\t\treturn false;\n \t\t\t}", "fixed": " \t\tCalendar cal = DateTimeUtils.truncateToMidnight(calendar);\n \t\tSun sun = new Sun();\n \t\tfor (int minutes = 0; minutes <= MINUTES_PER_DAY; minutes += CURVE_TIME_INTERVAL) {\n\t\t\tsetSunPosition(cal, latitude, longitude, sun);\n \t\t\tif (sun.getPosition().getElevation() < SUN_ANGLE) {\n \t\t\t\treturn false;\n \t\t\t}", "sourceBeforeFix": "setSunPosition(calendar,latitude,longitude,sun)", "sourceAfterFix": "setSunPosition(cal,latitude,longitude,sun)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "994da4e53abe98a0f0004d7bb8c57e08c621570d", "projectName": "Atmosphere.atmosphere", "bugType": "Same Function More Args", "problem": "         });\n         AtmosphereRequest request = new AtmosphereRequest.Builder().destroyable(false).body(\"yoComet\").pathInfo(\"/a\").build();\n        processor.open(w, request);\n         processor.invokeWebSocketProtocol(w, \"yoWebSocket\");\n         processor.notifyListener(w, new WebSocketEventListener.WebSocketEvent(\"Disconnect\", DISCONNECT, w));", "fixed": "         });\n         AtmosphereRequest request = new AtmosphereRequest.Builder().destroyable(false).body(\"yoComet\").pathInfo(\"/a\").build();\n        processor.open(w, request, AtmosphereResponse.newInstance(framework.getAtmosphereConfig(), request, w));\n         processor.invokeWebSocketProtocol(w, \"yoWebSocket\");\n         processor.notifyListener(w, new WebSocketEventListener.WebSocketEvent(\"Disconnect\", DISCONNECT, w));", "sourceBeforeFix": "processor.open(w,request)", "sourceAfterFix": "processor.open(w,request,AtmosphereResponse.newInstance(framework.getAtmosphereConfig(),request,w))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "83b9dd427535bce39be43a9e8224cdbc352d7427", "projectName": "square.okhttp", "bugType": "Change Modifier", "problem": "   class OkHttpRequest implements Runnable {\n     private final Call call;\n    public OkHttpRequest(Call call) {\n       this.call = call;\n     }", "fixed": "   class OkHttpRequest implements Runnable {\n     private final Call call;\n    OkHttpRequest(Call call) {\n       this.call = call;\n     }", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform1iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform1(location, v);\r\n \t}\r\n \t@Override\r\n \tpublic void glUniform1iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform1(location, toIntBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform2f (int location, float x, float y) {\r", "fixed": " \t}\r\n \tpublic void glUniform1iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform1iv(location, v);\r\n \t}\r\n \t@Override\r\n \tpublic void glUniform1iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform1iv(location, toIntBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform2f (int location, float x, float y) {\r", "sourceBeforeFix": "GL20.glUniformMatrix3(location,transpose,value)", "sourceAfterFix": "GL20.glUniformMatrix3fv(location,transpose,value)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15865, value = \"Invalid content declaration\")\n     String invalidContentDeclaration();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10865, value = \"Invalid content declaration\")\n     String invalidContentDeclaration();\n     /**", "sourceBeforeFix": "id=15841", "sourceAfterFix": "id=10841"}
{"fixCommitSHA1": "b4723946075075539850d266a732e1f4dfca1dbd", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": " \t\t\t\tif (InitializationWizardModel.INSTALL_METHOD_SIMPLE.equals(wizardModel.installMethod)) {\r\n \t\t\t\t\tpage = SIMPLE_SETUP;\r\n \t\t\t\t} else if (InitializationWizardModel.INSTALL_METHOD_TESTING.equals(wizardModel.installMethod)) {\r\n\t\t\t\t\tpage = TESTING_AUTHENTICATION_SETUP;\r\n \t\t\t\t} else {\r\n \t\t\t\t\tpage = IMPLEMENTATION_ID_SETUP;\r\n \t\t\t\t}\r", "fixed": " \t\t\t\tif (InitializationWizardModel.INSTALL_METHOD_SIMPLE.equals(wizardModel.installMethod)) {\r\n \t\t\t\t\tpage = SIMPLE_SETUP;\r\n \t\t\t\t} else if (InitializationWizardModel.INSTALL_METHOD_TESTING.equals(wizardModel.installMethod)) {\r\n\t\t\t\t\tpage = DATABASE_TABLES_AND_USER;\r\n \t\t\t\t} else {\r\n \t\t\t\t\tpage = IMPLEMENTATION_ID_SETUP;\r\n \t\t\t\t}\r", "sourceBeforeFix": "page=TESTING_AUTHENTICATION_SETUP", "sourceAfterFix": "page=DATABASE_TABLES_AND_USER"}
{"fixCommitSHA1": "8c1933ecbf207bce05820d0c440f26e3240a6d41", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "     public void testSendLotsOfMessagesButOnly3GetThrough() throws Exception {\n         MockEndpoint resultEndpoint = resolveMandatoryEndpoint(\"mock:result\", MockEndpoint.class);\n         resultEndpoint.expectedMessageCount(3);\n        resultEndpoint.setResultWaitTime(1000);\n         for (int i = 0; i < messageCount; i++) {\n             template.sendBody(\"seda:a\", \"<message>\" + i + \"</message>\");", "fixed": "     public void testSendLotsOfMessagesButOnly3GetThrough() throws Exception {\n         MockEndpoint resultEndpoint = resolveMandatoryEndpoint(\"mock:result\", MockEndpoint.class);\n         resultEndpoint.expectedMessageCount(3);\n        resultEndpoint.setResultWaitTime(5000);\n         for (int i = 0; i < messageCount; i++) {\n             template.sendBody(\"seda:a\", \"<message>\" + i + \"</message>\");", "sourceBeforeFix": "resultEndpoint.setResultWaitTime(1000)", "sourceAfterFix": "resultEndpoint.setResultWaitTime(5000)"}
{"fixCommitSHA1": "bf0147af96c7a48511e897e106c1d5885194c1d7", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         template.sendBody(\"direct:start.timeoutAndCompletionAware\", \"AGGREGATE1\");\n        assertTrue(timeoutLatch.await(1200, TimeUnit.MILLISECONDS));\n         template.sendBody(\"direct:start.timeoutAndCompletionAware\", \"AGGREGATE2\");\n         template.sendBody(\"direct:start.timeoutAndCompletionAware\", \"AGGREGATE3\");\n        assertTrue(completionLatch.await(1200, TimeUnit.MILLISECONDS));\n         getMockEndpoint(\"mock:result.timeoutAndCompletionAware\").getReceivedExchanges();\n         assertMockEndpointsSatisfied();", "fixed": "         template.sendBody(\"direct:start.timeoutAndCompletionAware\", \"AGGREGATE1\");\n        assertTrue(timeoutLatch.await(2500, TimeUnit.MILLISECONDS));\n         template.sendBody(\"direct:start.timeoutAndCompletionAware\", \"AGGREGATE2\");\n         template.sendBody(\"direct:start.timeoutAndCompletionAware\", \"AGGREGATE3\");\n        assertTrue(completionLatch.await(2500, TimeUnit.MILLISECONDS));\n         getMockEndpoint(\"mock:result.timeoutAndCompletionAware\").getReceivedExchanges();\n         assertMockEndpointsSatisfied();", "sourceBeforeFix": "completionLatch.await(1200,TimeUnit.MILLISECONDS)", "sourceAfterFix": "completionLatch.await(2500,TimeUnit.MILLISECONDS)"}
{"fixCommitSHA1": "e1d89ddbf6028369fd3117ff648fc6f16a1786fe", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "                     LOG.trace(\"OpenTracing: start server span=\" + span);\n                 }\n             } catch (Throwable t) {\n                LOG.error(\"OpenTracing: Failed to capture tracing data\", t);\n             }\n         }", "fixed": "                     LOG.trace(\"OpenTracing: start server span=\" + span);\n                 }\n             } catch (Throwable t) {\n                LOG.warn(\"OpenTracing: Failed to capture tracing data\", t);\n             }\n         }", "sourceBeforeFix": "LOG.error(\"OpenTracing: Failed to capture tracing data\",t)", "sourceAfterFix": "LOG.warn(\"OpenTracing: Failed to capture tracing data\",t)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "2", "sourceAfterFix": "0"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform1fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform1(location, v);\r\n \t}\r\n \tpublic void glUniform1fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform1(location, toFloatBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform1i (int location, int x) {\r", "fixed": " \t}\r\n \tpublic void glUniform1fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform1fv(location, v);\r\n \t}\r\n \tpublic void glUniform1fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform1fv(location, toFloatBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform1i (int location, int x) {\r", "sourceBeforeFix": "GL11.glGetInteger(pname,params)", "sourceAfterFix": "GL11.glGetIntegerv(pname,params)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface SWFEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedSWFEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface SWFEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedSWFEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "fixed": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4fv(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4fv(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "sourceBeforeFix": "GL20.glUniform3(location,v)", "sourceAfterFix": "GL20.glUniform3iv(location,v)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15840, value = \"Interrupted waiting for result from server %s\")\n     String interruptedAwaitingResultFromServer(ServerIdentity server);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10840, value = \"Interrupted waiting for result from server %s\")\n     String interruptedAwaitingResultFromServer(ServerIdentity server);\n     /**", "sourceBeforeFix": "id=15838", "sourceAfterFix": "id=10838"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getFavorites(String id, int page) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"favorites/\" + id + \".json\", \"page\", String.valueOf(page), true));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getFavorites(String id, int page) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"favorites/\" + id + \".json\", \"page\", String.valueOf(page), true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/home_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/home_timeline.json\",true))"}
{"fixCommitSHA1": "42fa2f2fa4a95d30263d4f69a7d8f792c3591368", "projectName": "Atmosphere.atmosphere", "bugType": "Change Modifier", "problem": "     protected void loadMetaService() {\n         try {\n            final Map<String, MetaServiceAction> config = (Map<String, MetaServiceAction>) servletConfig.getServletContext().getAttribute(AtmosphereFramework.MetaServiceAction.class.getName());\n             if (config == null) {\n                IOUtils.readServiceFile(AtmosphereFramework.class.getName());\n             }\n             for (final Map.Entry<String, MetaServiceAction> action : config.entrySet()) {", "fixed": "     protected void loadMetaService() {\n         try {\n            Map<String, MetaServiceAction> config = (Map<String, MetaServiceAction>) servletConfig.getServletContext().getAttribute(AtmosphereFramework.MetaServiceAction.class.getName());\n             if (config == null) {\n                config = IOUtils.readServiceFile(AtmosphereFramework.class.getName());\n             }\n             for (final Map.Entry<String, MetaServiceAction> action : config.entrySet()) {", "sourceBeforeFix": "16", "sourceAfterFix": "0"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "4597da262b00311e03c657db986f712387def622", "projectName": "swagger-api.swagger-core", "bugType": "Wrong Function Name", "problem": "         final ModelImpl model = Json.mapper().readValue(json, ModelImpl.class);\n        assertTrue(model.getUniqueItems());\n     }\n     @Test", "fixed": "         final ModelImpl model = Json.mapper().readValue(json, ModelImpl.class);\n        assertFalse(model.getUniqueItems());\n     }\n     @Test", "sourceBeforeFix": "assertFalse(model.getUniqueItems())", "sourceAfterFix": "assertTrue(model.getUniqueItems())"}
{"fixCommitSHA1": "0cb756acf8ee44c28bee8b9ea626e2a65cee5880", "projectName": "google.guava", "bugType": "Change Caller in Function Call", "problem": "     ByteBuffer bigEndian = ByteBuffer.wrap(bytes).order(ByteOrder.BIG_ENDIAN);\n     assertEquals(\n         hashFunction.newHasher().putBytes(littleEndian).hash(),\n        hashFunction.newHasher().putBytes(littleEndian).hash());\n     assertEquals(ByteOrder.LITTLE_ENDIAN, littleEndian.order());\n    assertEquals(ByteOrder.BIG_ENDIAN, littleEndian.order());\n   }\n   static void assertHashBytesThrowsCorrectExceptions(HashFunction hashFunction) {", "fixed": "     ByteBuffer bigEndian = ByteBuffer.wrap(bytes).order(ByteOrder.BIG_ENDIAN);\n     assertEquals(\n         hashFunction.newHasher().putBytes(littleEndian).hash(),\n        hashFunction.newHasher().putBytes(bigEndian).hash());\n     assertEquals(ByteOrder.LITTLE_ENDIAN, littleEndian.order());\n    assertEquals(ByteOrder.BIG_ENDIAN, bigEndian.order());\n   }\n   static void assertHashBytesThrowsCorrectExceptions(HashFunction hashFunction) {", "sourceBeforeFix": "littleEndian.order()", "sourceAfterFix": "bigEndian.order()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15858, value = \"No deployment content with hash %s is available in the deployment content repository.\")\n     String noDeploymentContentWithHash(String hash);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10858, value = \"No deployment content with hash %s is available in the deployment content repository.\")\n     String noDeploymentContentWithHash(String hash);\n     /**", "sourceBeforeFix": "id=15841", "sourceAfterFix": "id=10841"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites(String id) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"favorites/\" + id + \".json\", new PostParameter[0], true));\n     }\n     /**", "fixed": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites(String id) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"favorites/\" + id + \".json\", new PostParameter[0], true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface GeoCoderEndpointBuilder\n            extends\n                EndpointProducerBuilder {\n         default AdvancedGeoCoderEndpointBuilder advanced() {\n             return (AdvancedGeoCoderEndpointBuilder) this;\n         }", "fixed": "     \n    public interface GeoCoderEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedGeoCoderEndpointBuilder advanced() {\n             return (AdvancedGeoCoderEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15851, value = \"Operation targets host %s but that host is not registered\")\n     String invalidOperationTargetHost(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10851, value = \"Operation targets host %s but that host is not registered\")\n     String invalidOperationTargetHost(String name);\n     /**", "sourceBeforeFix": "id=15854", "sourceAfterFix": "id=10854"}
{"fixCommitSHA1": "26604fde31e9f4586c18209285b7b5c3bc80d51e", "projectName": "facebook.presto", "bugType": "Change Modifier", "problem": "         return updatedUnpartitionedSources;\n     }\n    private void schedulePartitionedSource(TaskSource source)\n     {", "fixed": "         return updatedUnpartitionedSources;\n     }\n    private synchronized void schedulePartitionedSource(TaskSource source)\n     {", "sourceBeforeFix": "2", "sourceAfterFix": "34"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(639);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {console.log($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "fixed": " \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(638);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {console.log($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "sourceBeforeFix": "new StringBuilder(639)", "sourceAfterFix": "new StringBuilder(638)"}
{"fixCommitSHA1": "39ea802e9302c6261ec0f9be0ceefe80e829b913", "projectName": "apache.camel", "bugType": "Change Boolean Literal", "problem": "         assertMockEndpointsSatisfied();\n        assertResultExchange(result.getExchanges().get(0), false);\n         PutObjectRequest putObjectRequest = client.putObjectRequests.get(0);\n         assertEquals(getCamelBucket(), putObjectRequest.getBucketName());", "fixed": "         assertMockEndpointsSatisfied();\n        assertResultExchange(result.getExchanges().get(0), true);\n         PutObjectRequest putObjectRequest = client.putObjectRequests.get(0);\n         assertEquals(getCamelBucket(), putObjectRequest.getBucketName());", "sourceBeforeFix": "assertResultExchange(result.getExchanges().get(0),false)", "sourceAfterFix": "assertResultExchange(result.getExchanges().get(0),true)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface SshEndpointBuilder\n             extends\n                 SshEndpointConsumerBuilder, SshEndpointProducerBuilder {\n         default AdvancedSshEndpointBuilder advanced() {", "fixed": "     \n    public interface SshEndpointBuilder\n             extends\n                 SshEndpointConsumerBuilder, SshEndpointProducerBuilder {\n         default AdvancedSshEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "6a95dd35511f4216481d8d0ffd4952ed1893a1c4", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "       setPermission(loadPath, FsPermission.valueOf(\"-rwxrwxrwx\"));\n       try (HTable table = (HTable)TEST_UTIL.getConnection().getTable(tableName)) {\n        TEST_UTIL.waitTableEnabled(tableName);\n         LoadIncrementalHFiles loader = new LoadIncrementalHFiles(conf);\n         loader.doBulkLoad(loadPath, table);\n       }", "fixed": "       setPermission(loadPath, FsPermission.valueOf(\"-rwxrwxrwx\"));\n       try (HTable table = (HTable)TEST_UTIL.getConnection().getTable(tableName)) {\n        TEST_UTIL.waitUntilAllRegionsAssigned(tableName);\n         LoadIncrementalHFiles loader = new LoadIncrementalHFiles(conf);\n         loader.doBulkLoad(loadPath, table);\n       }", "sourceBeforeFix": "TEST_UTIL.waitTableEnabled(tableName)", "sourceAfterFix": "TEST_UTIL.waitUntilAllRegionsAssigned(tableName)"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsText(String path) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), 1, null);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsText(String path) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), 1, null);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15835, value = IN_SERIES + \" is missing groups: %s\")\n     String inSeriesIsMissingGroups(String rolloutPlan);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10835, value = IN_SERIES + \" is missing groups: %s\")\n     String inSeriesIsMissingGroups(String rolloutPlan);\n     /**", "sourceBeforeFix": "id=15838", "sourceAfterFix": "id=10838"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "39aa03261a00c409f29341c286febaec99468d65", "projectName": "apache.flink", "bugType": "Change Boolean Literal", "problem": " \t */\n \tpublic void connectTo(final AbstractJobVertex vertex, final ChannelType channelType,\n \t\t\tfinal CompressionLevel compressionLevel) throws JobGraphDefinitionException {\n\t\tthis.connectTo(vertex, channelType, compressionLevel, -1, -1, DistributionPattern.BIPARTITE, false);\n \t}\n \t/**", "fixed": " \t */\n \tpublic void connectTo(final AbstractJobVertex vertex, final ChannelType channelType,\n \t\t\tfinal CompressionLevel compressionLevel) throws JobGraphDefinitionException {\n\t\tthis.connectTo(vertex, channelType, compressionLevel, -1, -1, DistributionPattern.BIPARTITE, true);\n \t}\n \t/**", "sourceBeforeFix": "this.connectTo(vertex,channelType,compressionLevel,-1,-1,distributionPattern,false)", "sourceAfterFix": "this.connectTo(vertex,channelType,compressionLevel,-1,-1,distributionPattern,true)"}
{"fixCommitSHA1": "8b59afeaaa4458b6d21d88b2edc0d22ed04d9798", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "         getMockEndpoint(\"mock:error\").expectedMessageCount(2);\n        resultEndpoint.expectedBodiesReceived(\"one\", \"three\");\n         sendMessage(\"1\", \"one\");\n         sendMessage(\"2\", \"two\");", "fixed": "         getMockEndpoint(\"mock:error\").expectedMessageCount(2);\n        resultEndpoint.expectedBodiesReceivedInAnyOrder(\"one\", \"three\");\n         sendMessage(\"1\", \"one\");\n         sendMessage(\"2\", \"two\");", "sourceBeforeFix": "resultEndpoint.expectedBodiesReceived(\"one\",\"two\",\"three\")", "sourceAfterFix": "resultEndpoint.expectedBodiesReceivedInAnyOrder(\"one\",\"two\",\"three\")"}
{"fixCommitSHA1": "3dddcc4cdf4a74ddbd4607c6aaee5bdd8ac46c27", "projectName": "gephi.gephi", "bugType": "Change Modifier", "problem": "     }\n     @Override\n    public void mouseMove() {\n         if (vizConfig.isSelectionEnable() && rectangleSelection) {\n             Rectangle rectangle = (Rectangle) currentSelectionArea;", "fixed": "     }\n     @Override\n    public synchronized void mouseMove() {\n         if (vizConfig.isSelectionEnable() && rectangleSelection) {\n             Rectangle rectangle = (Rectangle) currentSelectionArea;", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  private final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "d7b19bfc78039804e5460a01e6d5939d2f4ce5f7", "projectName": "Alluxio.alluxio", "bugType": "Same Function More Args", "problem": "   }\n   /**\n   * Free the file or Folder from tachyon in-memory specified by argv\n    *\n    * @param path The TachyonURI path as the input of the command\n    * @return 0 if command if successful, -1 if an error occurred.", "fixed": "   }\n   /**\n   * Free the given file or folder from tachyon in-memory (recursively freeing all children \n   * if a folder)\n    *\n    * @param path The TachyonURI path as the input of the command\n    * @return 0 if command if successful, -1 if an error occurred.", "sourceBeforeFix": "mTfs.free(mTfs.open(path))", "sourceAfterFix": "mTfs.free(mTfs.open(path),true)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "9716d2ae673a576cb345c3bfb24cf71654d8f112", "projectName": "openhab.openhab", "bugType": "Change Identifier Used", "problem": " \t * Validates Username and Password then saved sercurityToken to a variable\n \t */\n \tprivate void login() throws InvalidLoginException, IOException {\n\t\tlogger.debug(\"attempting to login\");\n \t\tString url = String\n \t\t\t\t.format(\"%s/api/user/validate?appId=%s&SecurityToken=null&username=%s&password=%s\",\n \t\t\t\t\t\tWEBSITE, enc(appId), enc(userName), enc(password));", "fixed": " \t * Validates Username and Password then saved sercurityToken to a variable\n \t */\n \tprivate void login() throws InvalidLoginException, IOException {\n\t\tlogger.trace(\"attempting to login\");\n \t\tString url = String\n \t\t\t\t.format(\"%s/api/user/validate?appId=%s&SecurityToken=null&username=%s&password=%s\",\n \t\t\t\t\t\tWEBSITE, enc(appId), enc(userName), enc(password));", "sourceBeforeFix": "logger.debug(\"Requsting URL {}\",url)", "sourceAfterFix": "logger.trace(\"Requsting URL {}\",url)"}
{"fixCommitSHA1": "cb488601eb5c45dcd1774022fdc8748e9a3668aa", "projectName": "mybatis.mybatis-3", "bugType": "Change Modifier", "problem": " public class FifoCache implements Cache {\n   private final Cache delegate;\n  private final LinkedList<Object> keyList;\n   private int size;\n   public FifoCache(Cache delegate) {", "fixed": " public class FifoCache implements Cache {\n   private final Cache delegate;\n  private LinkedList<Object> keyList;\n   private int size;\n   public FifoCache(Cache delegate) {", "sourceBeforeFix": "18", "sourceAfterFix": "2"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface CxfEndpointBuilder\n             extends\n                 CxfEndpointConsumerBuilder, CxfEndpointProducerBuilder {\n         default AdvancedCxfEndpointBuilder advanced() {", "fixed": "     \n    public interface CxfEndpointBuilder\n             extends\n                 CxfEndpointConsumerBuilder, CxfEndpointProducerBuilder {\n         default AdvancedCxfEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should get property value given valid property name\n \t * @should get property in case insensitive way\n \t */\n\tpublic String getGlobalProperty(String propertyName) throws APIException;\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>", "fixed": " \t * @should get property value given valid property name\n \t * @should get property in case insensitive way\n \t */\n\tpublic String getGlobalProperty(String propertyName);\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15871, value = \"Unknown server %s\")\n     IllegalStateException unknownServer(ServerIdentity server);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10871, value = \"Unknown server %s\")\n     IllegalStateException unknownServer(ServerIdentity server);\n     /**", "sourceBeforeFix": "id=15863", "sourceAfterFix": "id=10863"}
{"fixCommitSHA1": "35dc7982d28800b4fecdf0772236a2d8e054aa77", "projectName": "spring-projects.spring-boot", "bugType": "Change Modifier", "problem": " \t}\n \t@Test\n\tpublic void testHealth() throws Exception {\nString url = \"http:\n \t\tSystem.out.println(url);\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);", "fixed": " \t}\n \t@Test\n\tvoid testHealth() throws Exception {\nString url = \"http:\n \t\tSystem.out.println(url);\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "8c5369562390bee531eb35c00744821b0c4821e3", "projectName": "xetorthio.jedis", "bugType": "Wrong Function Name", "problem": "       final int offset, final int count) {\n     checkIsInMultiOrPipeline();\n     client.zrangeByScoreWithScores(key, min, max, offset, count);\n    return getBinaryTupledSet();\n   }\n   @Override", "fixed": "       final int offset, final int count) {\n     checkIsInMultiOrPipeline();\n     client.zrangeByScoreWithScores(key, min, max, offset, count);\n    return getTupledSet();\n   }\n   @Override", "sourceBeforeFix": "getBinaryTupledSet()", "sourceAfterFix": "getTupledSet()"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedPubNubEndpointBuilder\n             extends\n                 AdvancedPubNubEndpointConsumerBuilder, AdvancedPubNubEndpointProducerBuilder {\n         default PubNubEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedPubNubEndpointBuilder\n             extends\n                 AdvancedPubNubEndpointConsumerBuilder, AdvancedPubNubEndpointProducerBuilder {\n         default PubNubEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "0efcd332f3fcc5c5ee7b93d5cc8e8df2ca024fb1", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t@Override\r\n \tpublic void create () {\r\n \t\tByteBuffer bytebuffer = BufferUtils.newUnsafeByteBuffer(1000 * 1000);\r\n\t\tBufferUtils.freeMemory(bytebuffer);\r\n \t\tByteBuffer bb = BufferUtils.newByteBuffer(8);\r\n \t\tCharBuffer cb = BufferUtils.newCharBuffer(8);\r", "fixed": " \t@Override\r\n \tpublic void create () {\r\n \t\tByteBuffer bytebuffer = BufferUtils.newUnsafeByteBuffer(1000 * 1000);\r\n\t\tBufferUtils.disposeUnsafeByteBuffer(bytebuffer);\r\n \t\tByteBuffer bb = BufferUtils.newByteBuffer(8);\r\n \t\tCharBuffer cb = BufferUtils.newCharBuffer(8);\r", "sourceBeforeFix": "BufferUtils.freeMemory(bytebuffer)", "sourceAfterFix": "BufferUtils.disposeUnsafeByteBuffer(bytebuffer)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "2", "sourceAfterFix": "0"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<Status> getUserTimeline(String id, Paging paging)\n             throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline/\" + id + \".json\",\n                 null, paging.asPostParameterList(), http.isAuthenticationEnabled()));\n     }", "fixed": "      */\n     public ResponseList<Status> getUserTimeline(String id, Paging paging)\n             throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline/\" + id + \".json\",\n                 null, paging.asPostParameterList(), http.isAuthenticationEnabled()));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",null,true))"}
{"fixCommitSHA1": "99ed41cc78fe7dbc36ea17d9a6a1a56b51bcb12d", "projectName": "gephi.gephi", "bugType": "Change Numeric Literal", "problem": "         assertEquals(inDegree1, 0.0);\r\n         assertEquals(inDegree2, 1.0);\r\n         assertEquals(outDegree1, 1.0);\r\n        assertEquals(avDegree, 1.0);\r\n     }\r\n     @Test\r", "fixed": "         assertEquals(inDegree1, 0.0);\r\n         assertEquals(inDegree2, 1.0);\r\n         assertEquals(outDegree1, 1.0);\r\n        assertEquals(avDegree, 0.5);\r\n     }\r\n     @Test\r", "sourceBeforeFix": "assertEquals(avDegree,1.0)", "sourceAfterFix": "assertEquals(avDegree,0.5)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface ApnsEndpointBuilder\n             extends\n                 ApnsEndpointConsumerBuilder, ApnsEndpointProducerBuilder {\n         default AdvancedApnsEndpointBuilder advanced() {", "fixed": "     \n    public interface ApnsEndpointBuilder\n             extends\n                 ApnsEndpointConsumerBuilder, ApnsEndpointProducerBuilder {\n         default AdvancedApnsEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "e7bf415427b37bbc760ff9b9c69650db8ec477e4", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnBean(MongoTemplate.class)\n\t@ConditionalOnEnablednHealthIndicator(\"mongo\")\n \tpublic static class MongoHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<MongoHealthIndicator, MongoTemplate> {", "fixed": " \t@Configuration\n \t@ConditionalOnBean(MongoTemplate.class)\n\t@ConditionalOnEnabledHealthIndicator(\"mongo\")\n \tpublic static class MongoHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<MongoHealthIndicator, MongoTemplate> {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"rabbit\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"rabbit\")"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface RabbitMQEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedRabbitMQEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface RabbitMQEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedRabbitMQEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "dc300f2c812b2231b527c761f4c73d5155137516", "projectName": "netty.netty", "bugType": "Change Binary Operator", "problem": "      * less than zero, or larger than {@code capacity()}\n      */\n     public ByteBuf getBufferFor(int index) throws IndexOutOfBoundsException {\n        if (index < 0 || index > capacity()) {\n             throw new IndexOutOfBoundsException(\"Invalid index: \" + index\n                     + \" - Bytes needed: \" + index + \", maximum is \"\n                     + capacity());", "fixed": "      * less than zero, or larger than {@code capacity()}\n      */\n     public ByteBuf getBufferFor(int index) throws IndexOutOfBoundsException {\n        if (index < 0 || index >= capacity()) {\n             throw new IndexOutOfBoundsException(\"Invalid index: \" + index\n                     + \" - Bytes needed: \" + index + \", maximum is \"\n                     + capacity());", "sourceBeforeFix": "index > capacity()", "sourceAfterFix": "index >= capacity()"}
{"fixCommitSHA1": "95e4c74b9add0a315b7611494f2557df966bb681", "projectName": "perwendel.spark", "bugType": "Change Modifier", "problem": "      *\n      * @param folder the location\n      */\n    public static void configureExternalStaticResources(String folder) {\n         Assert.notNull(folder, \"'folder' must not be null\");\n         if (!externalStaticResourcesSet) {", "fixed": "      *\n      * @param folder the location\n      */\n    public synchronized static void configureExternalStaticResources(String folder) {\n         Assert.notNull(folder, \"'folder' must not be null\");\n         if (!externalStaticResourcesSet) {", "sourceBeforeFix": "9", "sourceAfterFix": "41"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getFavorites(String id, int page) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"favorites/\" + id + \".json\", \"page\", String.valueOf(page), true));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getFavorites(String id, int page) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"favorites/\" + id + \".json\", \"page\", String.valueOf(page), true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",null,true))"}
{"fixCommitSHA1": "91aa3b2ca0c43b66747d7926e34fae38ef030efa", "projectName": "gephi.gephi", "bugType": "Change Identifier Used", "problem": "             } else if (\"directed\".equalsIgnoreCase(key)) {\n                 if (value instanceof Double) {\n                     EdgeDirection type = ((Double) value) == 1 ? EdgeDirection.DIRECTED : EdgeDirection.UNDIRECTED;\n                    edge.setType(type);\n                 } else {\n                     report.logIssue(new Issue(NbBundle.getMessage(ImporterGML.class, \"importerGML_error_directedparse\", edge.toString()), Issue.Level.WARNING));\n                 }", "fixed": "             } else if (\"directed\".equalsIgnoreCase(key)) {\n                 if (value instanceof Double) {\n                     EdgeDirection type = ((Double) value) == 1 ? EdgeDirection.DIRECTED : EdgeDirection.UNDIRECTED;\n                    edge.setDirection(type);\n                 } else {\n                     report.logIssue(new Issue(NbBundle.getMessage(ImporterGML.class, \"importerGML_error_directedparse\", edge.toString()), Issue.Level.WARNING));\n                 }", "sourceBeforeFix": "edge.setType(type)", "sourceAfterFix": "edge.setDirection(type)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedVelocityEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default VelocityEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedVelocityEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default VelocityEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "957c04e597ba47ce301a5aab98ed57be4a967f95", "projectName": "netty.netty", "bugType": "Less Specific If", "problem": "         if (handlers == null) {\n             throw new NullPointerException(\"handlers\");\n         }\n        if (handlers[0] == null) {\n             return this;\n         }", "fixed": "         if (handlers == null) {\n             throw new NullPointerException(\"handlers\");\n         }\n        if (handlers.length == 0 || handlers[0] == null) {\n             return this;\n         }", "sourceBeforeFix": "handlers[0] == null", "sourceAfterFix": "handlers.length == 0 || handlers[0] == null"}
{"fixCommitSHA1": "fdb0411ff888217d8accbe07c1b916bbb780bd68", "projectName": "hazelcast.hazelcast", "bugType": "Change Boolean Literal", "problem": "             }\r\n             final InetAddress inetAddress = InetAddress.getByName(currentAddress);\r\n             ServerSocket serverSocket = serverSocketChannel.socket();\r\n            serverSocket.setReuseAddress(false);\r\n             InetSocketAddress isa;\r\n             int port = config.getPort();\r", "fixed": "             }\r\n             final InetAddress inetAddress = InetAddress.getByName(currentAddress);\r\n             ServerSocket serverSocket = serverSocketChannel.socket();\r\n            \r\n            serverSocket.setReuseAddress(true);\r\n             InetSocketAddress isa;\r\n             int port = config.getPort();\r", "sourceBeforeFix": "serverSocket.setReuseAddress(false)", "sourceAfterFix": "serverSocket.setReuseAddress(true)"}
{"fixCommitSHA1": "0355f17f04738ad9315d0c8ecad1b282f836e7f3", "projectName": "antlr.antlr4", "bugType": "Change Identifier Used", "problem": " \t\t\t\t\tSetTransition set = (SetTransition)edge;\n \t\t\t\t\tString label = set.label().toString();\n \t\t\t\t\tif ( isLexer ) label = set.label().toString(true);\n\t\t\t\t\telse if ( grammar!=null ) label = set.label().toString(grammar.getTokenNames());\n \t\t\t\t\tif ( edge instanceof NotSetTransition ) label = \"~\"+label;\n \t\t\t\t\tedgeST.add(\"label\", getEdgeLabel(label));\n \t\t\t\t}", "fixed": " \t\t\t\t\tSetTransition set = (SetTransition)edge;\n \t\t\t\t\tString label = set.label().toString();\n \t\t\t\t\tif ( isLexer ) label = set.label().toString(true);\n\t\t\t\t\telse if ( grammar!=null ) label = set.label().toString(grammar.getTokenDisplayNames());\n \t\t\t\t\tif ( edge instanceof NotSetTransition ) label = \"~\"+label;\n \t\t\t\t\tedgeST.add(\"label\", getEdgeLabel(label));\n \t\t\t\t}", "sourceBeforeFix": "grammar.getTokenNames()", "sourceAfterFix": "grammar.getTokenDisplayNames()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "9be0d0f5c99e2794eda0ae2189e4e3e6b7c7b132", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "      * @throws Exception\n      */\n     public void process(Exchange exchange) throws Exception {\n        final SchematronProcessor schematronProcessor = SchematronProcessorFactory.newScehamtronEngine(endpoint.getRules());\n         final Object payload = exchange.getIn().getBody();\n         final String report;", "fixed": "      * @throws Exception\n      */\n     public void process(Exchange exchange) throws Exception {\n        final SchematronProcessor schematronProcessor = SchematronProcessorFactory.newSchematronEngine(endpoint.getRules());\n         final Object payload = exchange.getIn().getBody();\n         final String report;", "sourceBeforeFix": "SchematronProcessorFactory.newScehamtronEngine(endpoint.getRules())", "sourceAfterFix": "SchematronProcessorFactory.newSchematronEngine(endpoint.getRules())"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r", "fixed": " \t}\r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r", "sourceBeforeFix": "GL20.glGetUniform(program,location,params)", "sourceAfterFix": "GL20.glGetUniformfv(program,location,params)"}
{"fixCommitSHA1": "a4d8f930af1f17a6c48a9abd94f49e5fd719fc31", "projectName": "netty.netty", "bugType": "Wrong Function Name", "problem": "         if (value instanceof AsciiString) {\n             return ((AsciiString) value).parseFloat();\n         }\n        return Float.valueOf(value.toString());\n     }\n     @Override", "fixed": "         if (value instanceof AsciiString) {\n             return ((AsciiString) value).parseFloat();\n         }\n        return Float.parseFloat(value.toString());\n     }\n     @Override", "sourceBeforeFix": "Float.valueOf(value.toString())", "sourceAfterFix": "Float.parseFloat(value.toString())"}
{"fixCommitSHA1": "a63faf44e1b103a49d25a15c720fc5940ae9fc07", "projectName": "square.retrofit", "bugType": "Change Identifier Used", "problem": "     assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mBodyWildcard = new TypeToken<Maybe<? extends String>>() {}.getType();\n    assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fBodyWildcard = new TypeToken<Flowable<? extends String>>() {}.getType();\n    assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oBodyGeneric = new TypeToken<Observable<List<String>>>() {}.getType();", "fixed": "     assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mBodyWildcard = new TypeToken<Maybe<? extends String>>() {}.getType();\n    assertThat(factory.get(mBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fBodyWildcard = new TypeToken<Flowable<? extends String>>() {}.getType();\n    assertThat(factory.get(fBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oBodyGeneric = new TypeToken<Observable<List<String>>>() {}.getType();", "sourceBeforeFix": "factory.get(sBodyGeneric,NO_ANNOTATIONS,retrofit)", "sourceAfterFix": "factory.get(mBodyGeneric,NO_ANNOTATIONS,retrofit)"}
{"fixCommitSHA1": "46fa8090954480eecdeb6e7367f0e30655853f42", "projectName": "checkstyle.checkstyle", "bugType": "Same Function More Args", "problem": "             tokenText = \"TokenTypes.\";\n         }\n         else {\n            final StringBuilder result = new StringBuilder();\n             boolean first = true;\n             for (int token : tokens) {", "fixed": "             tokenText = \"TokenTypes.\";\n         }\n         else {\n            final StringBuilder result = new StringBuilder(50);\n             boolean first = true;\n             for (int token : tokens) {", "sourceBeforeFix": "new StringBuilder()", "sourceAfterFix": "new StringBuilder(50)"}
{"fixCommitSHA1": "780e4a27f74b52de0a0fff72c71d0006c60a2165", "projectName": "druid-io.druid", "bugType": "Change Numeric Literal", "problem": "         )\n     );\n    Assert.assertTrue(\"Operation must complete within 100ms\", queryNotifyLatch.await(100, TimeUnit.MILLISECONDS));\n     Assert.assertEquals(1, factory.getSegmentReferences().size());", "fixed": "         )\n     );\n    queryNotifyLatch.await(1000, TimeUnit.MILLISECONDS);\n     Assert.assertEquals(1, factory.getSegmentReferences().size());", "sourceBeforeFix": "queryNotifyLatch.await(25,TimeUnit.MILLISECONDS)", "sourceAfterFix": "queryNotifyLatch.await(1000,TimeUnit.MILLISECONDS)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should delete global property from database\n \t */\n \t@Authorized(PrivilegeConstants.PURGE_GLOBAL_PROPERTIES)\n\tpublic void purgeGlobalProperty(GlobalProperty globalProperty) throws APIException;\n \t/**\n \t * Completely remove the given global properties from the database", "fixed": " \t * @should delete global property from database\n \t */\n \t@Authorized(PrivilegeConstants.PURGE_GLOBAL_PROPERTIES)\n\tpublic void purgeGlobalProperty(GlobalProperty globalProperty);\n \t/**\n \t * Completely remove the given global properties from the database", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "ea13a9c821a275561e56c45d5f0b90479904508d", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "         }\n         doRemoveRecord(key, source);\n         if (isEventsEnabled()) {\n            publishEvent(createCacheExpiredEvent(key, toEventData(record), CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                  origin, IGNORE_COMPLETION));\n         }\n         return true;", "fixed": "         }\n         doRemoveRecord(key, source);\n         if (isEventsEnabled()) {\n            publishEvent(createCacheExpiredEvent(toEventData(key), toEventData(record),\n                                                 CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                  origin, IGNORE_COMPLETION));\n         }\n         return true;", "sourceBeforeFix": "toHeapData(key)", "sourceAfterFix": "toEventData(key)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedDdbEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default DdbEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedDdbEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default DdbEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_in() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"06-05-2016\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_in() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"06-05-2016\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "c0a9995fc0dea4243b05a627c8f56d771479ab3f", "projectName": "naver.pinpoint", "bugType": "Change Identifier Used", "problem": "     private String getConstructorInfo(Constructor<?> constructor) {\n         Class<?>[] parameterTypes = constructor.getParameterTypes();\n        String[] parameterTypeNames = JavaAssistUtils.getParameterType(parameterTypes);\n         final String constructorSimpleName = MethodDescriptionUtils.getConstructorSimpleName(constructor);\n         return MethodDescriptionUtils.toJavaMethodDescriptor(constructor.getDeclaringClass().getName(), constructorSimpleName , parameterTypeNames);", "fixed": "     private String getConstructorInfo(Constructor<?> constructor) {\n         Class<?>[] parameterTypes = constructor.getParameterTypes();\n        String[] parameterTypeNames = JavaAssistUtils.toPinpointParameterType(parameterTypes);\n         final String constructorSimpleName = MethodDescriptionUtils.getConstructorSimpleName(constructor);\n         return MethodDescriptionUtils.toJavaMethodDescriptor(constructor.getDeclaringClass().getName(), constructorSimpleName , parameterTypeNames);", "sourceBeforeFix": "JavaAssistUtils.getParameterType(parameterTypes)", "sourceAfterFix": "JavaAssistUtils.toPinpointParameterType(parameterTypes)"}
{"fixCommitSHA1": "df43a7a353d1f56e6996170bd74f7a6267eb2bb8", "projectName": "libgdx.libgdx", "bugType": "Same Function More Args", "problem": " \t\n \tpublic Container<T> maxSize (float width, float height) {\n\t\tmaxSize(new Fixed(width));\n \t\treturn this;\n \t}", "fixed": " \t\n \tpublic Container<T> maxSize (float width, float height) {\n\t\tmaxSize(new Fixed(width), new Fixed(height));\n \t\treturn this;\n \t}", "sourceBeforeFix": "minSize(new Fixed(width))", "sourceAfterFix": "minSize(new Fixed(width),new Fixed(height))"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15843, value = \"Invalid rollout plan. Plan operations affect server groups %s that are not reflected in the rollout plan\")\n     String invalidRolloutPlan(Set<String> groups);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10843, value = \"Invalid rollout plan. Plan operations affect server groups %s that are not reflected in the rollout plan\")\n     String invalidRolloutPlan(Set<String> groups);\n     /**", "sourceBeforeFix": "id=15855", "sourceAfterFix": "id=10855"}
{"fixCommitSHA1": "538a8ac25f73ada7cf995be3a4d35179a8003fba", "projectName": "Graylog2.graylog2-server", "bugType": "Change Identifier Used", "problem": "     @Constraints.Required\n     public String type;\n     @Constraints.Required\n    public Map<String, String> configuration;\n     @SerializedName(\"creator_user_id\")\n     public String creatorUserId;", "fixed": "     @Constraints.Required\n     public String type;\n     @Constraints.Required\n    public Map<String, Object> configuration;\n     @SerializedName(\"creator_user_id\")\n     public String creatorUserId;", "sourceBeforeFix": "Map<String,String>", "sourceAfterFix": "Map<String,Object>"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "fixed": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4fv(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4fv(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "sourceBeforeFix": "GL11.glGetInteger(pname,params)", "sourceAfterFix": "GL11.glGetIntegerv(pname,params)"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should save properties with case difference only\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_GLOBAL_PROPERTIES)\n\tpublic List<GlobalProperty> saveGlobalProperties(List<GlobalProperty> props) throws APIException;\n \t/**\n \t * Completely remove the given global property from the database", "fixed": " \t * @should save properties with case difference only\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_GLOBAL_PROPERTIES)\n\tpublic List<GlobalProperty> saveGlobalProperties(List<GlobalProperty> props);\n \t/**\n \t * Completely remove the given global property from the database", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15843, value = \"Invalid rollout plan. Plan operations affect server groups %s that are not reflected in the rollout plan\")\n     String invalidRolloutPlan(Set<String> groups);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10843, value = \"Invalid rollout plan. Plan operations affect server groups %s that are not reflected in the rollout plan\")\n     String invalidRolloutPlan(Set<String> groups);\n     /**", "sourceBeforeFix": "id=15844", "sourceAfterFix": "id=10844"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "c4fde52160773dca18bad002589957880b0aeeb3", "projectName": "druid-io.druid", "bugType": "Same Function More Args", "problem": "              .addData(\"taskId\", task.getId())\n              .addData(\"dataSource\", task.getDataSource())\n              .emit();\n          log.warn(e, \"Graceful shutdown of task[%s] aborted with exception.\");\n           error = true;\n         }\n       } else {", "fixed": "              .addData(\"taskId\", task.getId())\n              .addData(\"dataSource\", task.getDataSource())\n              .emit();\n          log.warn(e, \"Graceful shutdown of task[%s] aborted with exception.\", task.getId());\n           error = true;\n         }\n       } else {", "sourceBeforeFix": "log.warn(e,\"Graceful shutdown of task[%s] aborted with exception.\")", "sourceAfterFix": "log.warn(e,\"Graceful shutdown of task[%s] aborted with exception.\",task.getId())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fb9b3fcb0ef1794b9a5646f3912cc8eeb4b120f1", "projectName": "apache.camel", "bugType": "Same Function More Args", "problem": "     @Configuration\n     public static Option[] configure() {\n        return configure(COMPONENT);\n     }\n }\n\\ No newline at end of file", "fixed": "     @Configuration\n     public static Option[] configure() {\n        return configure(COMPONENT, \"cxf-jaxb\");\n     }\n }\n\\ No newline at end of file", "sourceBeforeFix": "configure(COMPONENT)", "sourceAfterFix": "configure(COMPONENT,\"cxf-jaxb\")"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "fixed": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "sourceBeforeFix": "GL20.glUniform1(location,v)", "sourceAfterFix": "GL20.glUniform1iv(location,v)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n  private final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "3f21dcd0eb97b3b7c4847c913b0955e391192245", "projectName": "xetorthio.jedis", "bugType": "Change Binary Operator", "problem": "                 buf[count++] = ((byte)(0x80 | ((uc >> 6) & 0x3f)));\n                 buf[count++] = ((byte)(0x80 | (uc & 0x3f)));\n             } else {\n                if(3 < buf.length - count) {\n                     flushBuffer();\n                 }\n                 buf[count++] =((byte)(0xe0 | ((c >> 12))));", "fixed": "                 buf[count++] = ((byte)(0x80 | ((uc >> 6) & 0x3f)));\n                 buf[count++] = ((byte)(0x80 | (uc & 0x3f)));\n             } else {\n                if(3 >= buf.length - count) {\n                     flushBuffer();\n                 }\n                 buf[count++] =((byte)(0xe0 | ((c >> 12))));", "sourceBeforeFix": "3 < buf.length - count", "sourceAfterFix": "3 >= buf.length - count"}
{"fixCommitSHA1": "44c122307e968c2aabc4a89d410c804c632246b1", "projectName": "spring-projects.spring-boot", "bugType": "Change Numeric Literal", "problem": " \t@Test\n \tpublic void specificPort() throws Exception {\n \t\tAbstractEmbeddedServletContainerFactory factory = getFactory();\n\t\tint specificPort = SocketUtils.findAvailableTcpPort(40000);\n \t\tfactory.setPort(specificPort);\n \t\tthis.container = factory\n \t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());", "fixed": " \t@Test\n \tpublic void specificPort() throws Exception {\n \t\tAbstractEmbeddedServletContainerFactory factory = getFactory();\n\t\tint specificPort = SocketUtils.findAvailableTcpPort(41000);\n \t\tfactory.setPort(specificPort);\n \t\tthis.container = factory\n \t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());", "sourceBeforeFix": "SocketUtils.findAvailableTcpPort(40000)", "sourceAfterFix": "SocketUtils.findAvailableTcpPort(41000)"}
{"fixCommitSHA1": "4baf500fc14016bfc22a339c68a4c05050d14a52", "projectName": "brianfrankcooper.YCSB", "bugType": "Change Caller in Function Call", "problem": "     public int read(String table, String key, Set<String> fields,\n             HashMap<String, ByteIterator> result) {\n         if (fields == null) {\n            StringByteIteartor.putAllAsByteIterators(result, jedis.hgetAll(key));\n         }\n         else {\n             String[] fieldArray = (String[])fields.toArray(new String[fields.size()]);", "fixed": "     public int read(String table, String key, Set<String> fields,\n             HashMap<String, ByteIterator> result) {\n         if (fields == null) {\n            StringByteIterator.putAllAsByteIterators(result, jedis.hgetAll(key));\n         }\n         else {\n             String[] fieldArray = (String[])fields.toArray(new String[fields.size()]);", "sourceBeforeFix": "StringByteIteartor.putAllAsByteIterators(result,jedis.hgetAll(key))", "sourceAfterFix": "StringByteIterator.putAllAsByteIterators(result,jedis.hgetAll(key))"}
{"fixCommitSHA1": "1a9bb447fd14415ef270f3dd7af8a0d4e0017177", "projectName": "Atmosphere.atmosphere", "bugType": "Change Identifier Used", "problem": "      */\n     @Override\n     public final AtmosphereResource create(AtmosphereConfig config,\n                                           DefaultAtmosphereRequest request,\n                                            AtmosphereResponse response,\n                                            AsyncSupport<?> a) {\n         AtmosphereResource r = null;", "fixed": "      */\n     @Override\n     public final AtmosphereResource create(AtmosphereConfig config,\n                                           AtmosphereRequest request,\n                                            AtmosphereResponse response,\n                                            AsyncSupport<?> a) {\n         AtmosphereResource r = null;", "sourceBeforeFix": "DefaultAtmosphereRequest request", "sourceAfterFix": "AtmosphereRequest request"}
{"fixCommitSHA1": "0a1836b22646342828e96b1d0e7dad9c8bfdabfe", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         bar.expectedMessageCount(0);\n         MockEndpoint start = getMockEndpoint(\"mock:start\");\nstart.expectedMessageCount(6);\n         template.sendBody(\"activemq:queue:foo\", \"Hello World\");", "fixed": "         bar.expectedMessageCount(0);\n         MockEndpoint start = getMockEndpoint(\"mock:start\");\nstart.expectedMessageCount(7);\n         template.sendBody(\"activemq:queue:foo\", \"Hello World\");", "sourceBeforeFix": "start.expectedMessageCount(6)", "sourceAfterFix": "start.expectedMessageCount(7)"}
{"fixCommitSHA1": "1abf653a0774560f3da680505689e05978d75e07", "projectName": "mybatis.mybatis-3", "bugType": "More Specific If", "problem": "   private String username;\n   private String password;\n  private boolean autoCommit;\n   private Integer defaultTransactionIsolationLevel;\n   static {", "fixed": "   private String username;\n   private String password;\n  private Boolean autoCommit;\n   private Integer defaultTransactionIsolationLevel;\n   static {", "sourceBeforeFix": "autoCommit != conn.getAutoCommit()", "sourceAfterFix": "autoCommit != null && autoCommit != conn.getAutoCommit()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface ActiveMQEndpointBuilder\n             extends\n                 ActiveMQEndpointConsumerBuilder, ActiveMQEndpointProducerBuilder {\n         default AdvancedActiveMQEndpointBuilder advanced() {", "fixed": "     \n    public interface ActiveMQEndpointBuilder\n             extends\n                 ActiveMQEndpointConsumerBuilder, ActiveMQEndpointProducerBuilder {\n         default AdvancedActiveMQEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "0757d24d91bfe9ea2256c19aa798a5fa10bb6692", "projectName": "spring-projects.spring-boot", "bugType": "Change Numeric Literal", "problem": " \t\tMap<String, Object> map = (Map<String, Object>) nestedProperties\n \t\t\t\t.get(\"properties\");\n \t\tassertNotNull(map);\n\t\tassertEquals(2, map.size());\n \t\tassertEquals(\"foo\", ((Map<String, Object>) map.get(\"map\")).get(\"name\"));\n \t}", "fixed": " \t\tMap<String, Object> map = (Map<String, Object>) nestedProperties\n \t\t\t\t.get(\"properties\");\n \t\tassertNotNull(map);\n\t\tassertEquals(1, map.size());\n \t\tassertEquals(\"foo\", ((Map<String, Object>) map.get(\"map\")).get(\"name\"));\n \t}", "sourceBeforeFix": "assertEquals(2,map.size())", "sourceAfterFix": "assertEquals(1,map.size())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedGooglePubsubEndpointBuilder\n             extends\n                 AdvancedGooglePubsubEndpointConsumerBuilder, AdvancedGooglePubsubEndpointProducerBuilder {\n         default GooglePubsubEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedGooglePubsubEndpointBuilder\n             extends\n                 AdvancedGooglePubsubEndpointConsumerBuilder, AdvancedGooglePubsubEndpointProducerBuilder {\n         default GooglePubsubEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "5ab2a833f50c61a5322778a38dbfdd33c9b478d0", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "         Configuration t = (Configuration) serializeDeserialize(conf);\n        assertSame(conf, (Configuration) serializeDeserialize(conf));\nassertTrue(0 == conf.getRestBaseURL().indexOf(\"http:\nassertTrue(0 == conf.getSearchBaseURL().indexOf(\"http:", "fixed": "         Configuration t = (Configuration) serializeDeserialize(conf);\n        assertEquals(conf, (Configuration) serializeDeserialize(conf));\nassertTrue(0 == conf.getRestBaseURL().indexOf(\"http:\nassertTrue(0 == conf.getSearchBaseURL().indexOf(\"http:", "sourceBeforeFix": "assertSame(conf,(Configuration)serializeDeserialize(conf))", "sourceAfterFix": "assertEquals(conf,(Configuration)serializeDeserialize(conf))"}
{"fixCommitSHA1": "f2188d334cf2e91dbd62f84aeba025186738f4ea", "projectName": "alibaba.dubbo", "bugType": "Change Numeric Literal", "problem": "                 check = false, init = true, lazy = true, stubevent = true,\n                 reconnect = \"reconnect\", sticky = true, proxy = \"javassist\", stub = \"stub\",\n                 cluster = \"failover\", connections = 1, callbacks = 1, onconnect = \"onconnect\",\n                ondisconnect = \"ondisconnect\", owner = \"owner\", layer = \"layer\", retries = 2,\n                 loadbalance = \"random\", async = true, actives = 1, sent = true,\n                 mock = \"mock\", validation = \"validation\", timeout = 2, cache = \"cache\",\n                 filter = {\"default\", \"default\"}, listener = {\"default\", \"default\"}, parameters = {\"key1\", \"value1\"}, application = \"application\",", "fixed": "                 check = false, init = true, lazy = true, stubevent = true,\n                 reconnect = \"reconnect\", sticky = true, proxy = \"javassist\", stub = \"stub\",\n                 cluster = \"failover\", connections = 1, callbacks = 1, onconnect = \"onconnect\",\n                ondisconnect = \"ondisconnect\", owner = \"owner\", layer = \"layer\", retries = 1,\n                 loadbalance = \"random\", async = true, actives = 1, sent = true,\n                 mock = \"mock\", validation = \"validation\", timeout = 2, cache = \"cache\",\n                 filter = {\"default\", \"default\"}, listener = {\"default\", \"default\"}, parameters = {\"key1\", \"value1\"}, application = \"application\",", "sourceBeforeFix": "retries=2", "sourceAfterFix": "retries=1"}
{"fixCommitSHA1": "ac9fdf161f9e1464c3492fa6162895be00189540", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "         try {\n             Object answer;\n            XMLStreamReader xmlReader;\n             if (needFiltering(exchange)) {\n                xmlReader = typeConverter.convertTo(XMLStreamReader.class, createNonXmlFilterReader(exchange, stream));\n             } else {\n                xmlReader = typeConverter.convertTo(XMLStreamReader.class, stream);\n             }\n             String partClassFromHeader = exchange.getIn().getHeader(JaxbConstants.JAXB_PART_CLASS, String.class);\n             if (partialClass != null || partClassFromHeader != null) {", "fixed": "         try {\n             Object answer;\n            final XMLStreamReader xmlReader;\n             if (needFiltering(exchange)) {\n                xmlReader = typeConverter.convertTo(XMLStreamReader.class, exchange, createNonXmlFilterReader(exchange, stream));\n             } else {\n                xmlReader = typeConverter.convertTo(XMLStreamReader.class, exchange, stream);\n             }\n             String partClassFromHeader = exchange.getIn().getHeader(JaxbConstants.JAXB_PART_CLASS, String.class);\n             if (partialClass != null || partClassFromHeader != null) {", "sourceBeforeFix": "0", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  private final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r", "fixed": " \t}\r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r", "sourceBeforeFix": "GL20.glGetVertexAttrib(index,pname,params)", "sourceAfterFix": "GL20.glGetVertexAttribfv(index,pname,params)"}
{"fixCommitSHA1": "11b2dc6cb756eab64037bb27188e0c1eac3b01e0", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "     Compiler compiler = new Compiler();\n     CompilerOptions options = new CompilerOptions();\n     options.setLanguageIn(LanguageMode.ECMASCRIPT6_STRICT);\n    options.setLanguageIn(LanguageMode.ECMASCRIPT5);\n     options.setCodingConvention(new GoogleCodingConvention());\n     options.setWarningLevel(DiagnosticGroups.MISSING_REQUIRE, CheckLevel.WARNING);\n     options.setWarningLevel(DiagnosticGroups.EXTRA_REQUIRE, CheckLevel.WARNING);", "fixed": "     Compiler compiler = new Compiler();\n     CompilerOptions options = new CompilerOptions();\n     options.setLanguageIn(LanguageMode.ECMASCRIPT6_STRICT);\n    options.setLanguageOut(LanguageMode.ECMASCRIPT5);\n     options.setCodingConvention(new GoogleCodingConvention());\n     options.setWarningLevel(DiagnosticGroups.MISSING_REQUIRE, CheckLevel.WARNING);\n     options.setWarningLevel(DiagnosticGroups.EXTRA_REQUIRE, CheckLevel.WARNING);", "sourceBeforeFix": "options.setLanguageIn(LanguageMode.ECMASCRIPT5)", "sourceAfterFix": "options.setLanguageOut(LanguageMode.ECMASCRIPT5)"}
{"fixCommitSHA1": "c212701d56cfe9cffd9e5dc1e34c3483a50f8182", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t\t\t\tint length = in.readInt();\n \t\t\t\tbyte[] serCondition = new byte[length];\n\t\t\t\tin.read(serCondition);\n \t\t\t\tByteArrayInputStream bais = new ByteArrayInputStream(serCondition);\n \t\t\t\tObjectInputStream ois = new ObjectInputStream(bais);", "fixed": " \t\t\t\tint length = in.readInt();\n \t\t\t\tbyte[] serCondition = new byte[length];\n\t\t\t\tin.readFully(serCondition);\n \t\t\t\tByteArrayInputStream bais = new ByteArrayInputStream(serCondition);\n \t\t\t\tObjectInputStream ois = new ObjectInputStream(bais);", "sourceBeforeFix": "in.read(serCondition)", "sourceAfterFix": "in.readFully(serCondition)"}
{"fixCommitSHA1": "2f77b4e6a3f1ab8bd855476a15a4ab2f6f7ae32c", "projectName": "neo4j.neo4j", "bugType": "Change Identifier Used", "problem": "         \t\t\"RETURN file.name, dir.name, role.name, readUser.name\";\n         gen.get().addSnippet( \"query3\", createCypherSnippet( query ) );\n         result = engine.execute( query )\n                .toString();\n         assertTrue( result.contains(\"File1\") );\n         assertTrue( result.contains(\"File2\") );\n         assertTrue( result.contains(\"Admin1\") );", "fixed": "         \t\t\"RETURN file.name, dir.name, role.name, readUser.name\";\n         gen.get().addSnippet( \"query3\", createCypherSnippet( query ) );\n         result = engine.execute( query )\n                .dumpToString();\n         assertTrue( result.contains(\"File1\") );\n         assertTrue( result.contains(\"File2\") );\n         assertTrue( result.contains(\"Admin1\") );", "sourceBeforeFix": "engine.execute(query).toString()", "sourceAfterFix": "engine.execute(query).dumpToString()"}
{"fixCommitSHA1": "e530010502964b1815d5dbf9733a248f5e1bc4e1", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "         for (int i = 0; i < size; i++) {\n             map.put(i, i);\n         }\n        instance2.getLifecycleService().terminate();\n         mapStore.awaitStores();\n     }", "fixed": "         for (int i = 0; i < size; i++) {\n             map.put(i, i);\n         }\n        instance2.getLifecycleService().shutdown();\n         mapStore.awaitStores();\n     }", "sourceBeforeFix": "instance2.getLifecycleService().terminate()", "sourceAfterFix": "instance2.getLifecycleService().shutdown()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  private final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "c232dcecf1f1512e4d3c5fbe9246f7825dd42f54", "projectName": "Atmosphere.atmosphere", "bugType": "Change Binary Operator", "problem": "                 if (handler == null) {\n                    String p = path.lastIndexOf(\"/\") == 0 ? \"/\" : path.substring(0, path.lastIndexOf(\"/\"));\n                     while (p.length() > 0) {\n                         handler = map(p, handlers);", "fixed": "                 if (handler == null) {\n                    String p = path.lastIndexOf(\"/\") <= 0 ? \"/\" : path.substring(0, path.lastIndexOf(\"/\"));\n                     while (p.length() > 0) {\n                         handler = map(p, handlers);", "sourceBeforeFix": "path.lastIndexOf(\"/\") == 0", "sourceAfterFix": "path.lastIndexOf(\"/\") <= 0"}
{"fixCommitSHA1": "0bdd8d4cae5dbc17b9a830d31e467d9b413cf7a9", "projectName": "swagger-api.swagger-core", "bugType": "Change Identifier Used", "problem": "     }\r\n     public void setCategoryWithApiModel(CategoryWithApiModel category) {\r\n        this.categoryWithApiModel = categoryWithApiModel;\r\n     }\r\n     @XmlElement(name = \"name\")\r", "fixed": "     }\r\n     public void setCategoryWithApiModel(CategoryWithApiModel category) {\r\n        this.categoryWithApiModel = category;\r\n     }\r\n     @XmlElement(name = \"name\")\r", "sourceBeforeFix": "this.categoryWithApiModel=categoryWithApiModel", "sourceAfterFix": "this.categoryWithApiModel=category"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15840, value = \"Interrupted waiting for result from server %s\")\n     String interruptedAwaitingResultFromServer(ServerIdentity server);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10840, value = \"Interrupted waiting for result from server %s\")\n     String interruptedAwaitingResultFromServer(ServerIdentity server);\n     /**", "sourceBeforeFix": "id=15857", "sourceAfterFix": "id=10857"}
{"fixCommitSHA1": "0a2b272cb8cb45faafd95a3bbc9e9af813620e09", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "     private void clearLockStore(String name) {\n         final NodeEngine nodeEngine = mapService.getMapServiceContext().getNodeEngine();\n        final LockService lockService = nodeEngine.getService(LockService.SERVICE_NAME);\n         if (lockService != null) {\n             final DefaultObjectNamespace namespace = new DefaultObjectNamespace(MapService.SERVICE_NAME, name);\n             lockService.clearLockStore(partitionId, namespace);", "fixed": "     private void clearLockStore(String name) {\n         final NodeEngine nodeEngine = mapService.getMapServiceContext().getNodeEngine();\n        final LockService lockService = nodeEngine.getSharedService(LockService.SERVICE_NAME);\n         if (lockService != null) {\n             final DefaultObjectNamespace namespace = new DefaultObjectNamespace(MapService.SERVICE_NAME, name);\n             lockService.clearLockStore(partitionId, namespace);", "sourceBeforeFix": "nodeEngine.getService(LockService.SERVICE_NAME)", "sourceAfterFix": "nodeEngine.getSharedService(LockService.SERVICE_NAME)"}
{"fixCommitSHA1": "fceec74c60a1d72c1582f9d8871cbe1a0eb37fcf", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "     }\n     public ILock getLock(Object key) {\n        if (name == null) {\n             throw new NullPointerException(\"Retrieving a lock instance with a null key is not allowed!\");\n         }\n         return getDistributedObject(LockService.SERVICE_NAME, node.getSerializationService().toData(key));", "fixed": "     }\n     public ILock getLock(Object key) {\n        if (key == null) {\n             throw new NullPointerException(\"Retrieving a lock instance with a null key is not allowed!\");\n         }\n         return getDistributedObject(LockService.SERVICE_NAME, node.getSerializationService().toData(key));", "sourceBeforeFix": "name == null", "sourceAfterFix": "key == null"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  private final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "1cb815170a2fd69558f737d92f5665c9d64cebd1", "projectName": "libgdx.libgdx", "bugType": "Same Function More Args", "problem": " \t\t\t\t\t\t+ \" with this method. Use ByteBuffer and one of GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT or GL_FLOAT for type. Blame LWJGL\");\r\n \t\t} else if (buffer instanceof FloatBuffer) {\r\n \t\t\tif (type == GL_FLOAT)\r\n\t\t\t\tGL20.glVertexAttribPointer(indx, size, normalized, stride, (FloatBuffer)buffer);\r\n \t\t\telse\r\n \t\t\t\tthrow new GdxRuntimeException(\"Can't use \" + buffer.getClass().getName() + \" with type \" + type\r\n \t\t\t\t\t+ \" with this method.\");\r", "fixed": " \t\t\t\t\t\t+ \" with this method. Use ByteBuffer and one of GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT or GL_FLOAT for type. Blame LWJGL\");\r\n \t\t} else if (buffer instanceof FloatBuffer) {\r\n \t\t\tif (type == GL_FLOAT)\r\n\t\t\t\tGL20.glVertexAttribPointer(indx, size, type, normalized, stride, (FloatBuffer)buffer);\r\n \t\t\telse\r\n \t\t\t\tthrow new GdxRuntimeException(\"Can't use \" + buffer.getClass().getName() + \" with type \" + type\r\n \t\t\t\t\t+ \" with this method.\");\r", "sourceBeforeFix": "GL20.glGetActiveAttrib(program,index,256,typeTmp)", "sourceAfterFix": "GL20.glGetActiveAttrib(program,index,256,size,typeTmp)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "fixed": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttribfv(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttribiv(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "sourceBeforeFix": "GL20.glUniform2(location,toIntBuffer(v,offset,count << 1))", "sourceAfterFix": "GL20.glUniform2iv(location,toIntBuffer(v,offset,count << 1))"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface CassandraEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedCassandraEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface CassandraEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedCassandraEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "dd80647fbf218880e5f8d72441d080b6c92778fa", "projectName": "libgdx.libgdx", "bugType": "Same Function More Args", "problem": " \t\ttry {\r\n \t\t\tbytes = input.read(buffer, index, 4096);\r\n \t\t} catch (Exception e) {\r\n\t\t\tthrow new GdxRuntimeException(\"Failure reading Vorbis.\");\r\n \t\t}\r\n \t\tsyncState.wrote(bytes);\r", "fixed": " \t\ttry {\r\n \t\t\tbytes = input.read(buffer, index, 4096);\r\n \t\t} catch (Exception e) {\r\n\t\t\tthrow new GdxRuntimeException(\"Failure reading Vorbis.\", e);\r\n \t\t}\r\n \t\tsyncState.wrote(bytes);\r", "sourceBeforeFix": "new GdxRuntimeException(\"Failed to read Vorbis.\")", "sourceAfterFix": "new GdxRuntimeException(\"Failed to read Vorbis.\",e)"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(639);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {console.log($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "fixed": " \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(638);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {console.log($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "sourceBeforeFix": "new StringBuilder(246)", "sourceAfterFix": "new StringBuilder(245)"}
{"fixCommitSHA1": "e0e43deaec26384766a61874db4aaa6bda4ae415", "projectName": "druid-io.druid", "bugType": "Less Specific If", "problem": "         final DimensionSelector dimSelector = dims.get(0);\n         final IndexedInts row = dimSelector.getRow();\n        if (row.size() == 0) {\n           ByteBuffer newKey = key.duplicate();\n           newKey.putInt(dimSelector.getValueCardinality());\n           unaggregatedBuffers = updateValues(newKey, dims.subList(1, dims.size()));", "fixed": "         final DimensionSelector dimSelector = dims.get(0);\n         final IndexedInts row = dimSelector.getRow();\n        if (row == null || row.size() == 0) {\n           ByteBuffer newKey = key.duplicate();\n           newKey.putInt(dimSelector.getValueCardinality());\n           unaggregatedBuffers = updateValues(newKey, dims.subList(1, dims.size()));", "sourceBeforeFix": "row.size() == 0", "sourceAfterFix": "row == null || row.size() == 0"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "533c5cb8f6bda878779fffb1a4adc792f62a81a7", "projectName": "alibaba.canal", "bugType": "Change Identifier Used", "problem": "             rowChangeBuider.setEventType(eventType);\n             RowsLogBuffer buffer = event.getRowsBuf(charset.name());\n             BitSet columns = event.getColumns();\n            BitSet changeColumns = event.getColumns();\n             boolean tableError = false;\n             TableMeta tableMeta = null;\nif (tableMetaCache != null) {", "fixed": "             rowChangeBuider.setEventType(eventType);\n             RowsLogBuffer buffer = event.getRowsBuf(charset.name());\n             BitSet columns = event.getColumns();\n            BitSet changeColumns = event.getChangeColumns();\n             boolean tableError = false;\n             TableMeta tableMeta = null;\nif (tableMetaCache != null) {", "sourceBeforeFix": "event.getColumns()", "sourceAfterFix": "event.getChangeColumns()"}
{"fixCommitSHA1": "70ceda9740cbc5504d5ebaf2191dd706925760c8", "projectName": "Atmosphere.atmosphere", "bugType": "Change Identifier Used", "problem": "         for (AtmosphereResource r : config.resourcesFactory().findAll()) {\n             try {\n                 r.resume().close();\n            } catch (IOException e) {\n                 logger.trace(\"\", e);\n             }\n         }", "fixed": "         for (AtmosphereResource r : config.resourcesFactory().findAll()) {\n             try {\n                 r.resume().close();\n            } catch (Exception e) {\n                 logger.trace(\"\", e);\n             }\n         }", "sourceBeforeFix": "IOException e", "sourceAfterFix": "Exception e"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  private final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedToMe(Paging paging) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_to_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedToMe(Paging paging) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_to_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_4() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(741);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {Console.WriteLine($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "fixed": " \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_4() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(740);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {Console.WriteLine($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "sourceBeforeFix": "new StringBuilder(741)", "sourceAfterFix": "new StringBuilder(740)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  private final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "73627df082ff499af4ca1c482f79e304905007eb", "projectName": "alibaba.canal", "bugType": "Same Function More Args", "problem": "                         if (i > 0) {\n                             buf.append(\", \");\n                         }\n                        element(i).toJsonString(buf);\n                     }\n                     buf.append(\"]\");\n                     break;", "fixed": "                         if (i > 0) {\n                             buf.append(\", \");\n                         }\n                        element(i, charsetName).toJsonString(buf, charsetName);\n                     }\n                     buf.append(\"]\");\n                     break;", "sourceBeforeFix": "buffer.rewind().forward((int)n).getFixString((int)str_len)", "sourceAfterFix": "buffer.rewind().forward((int)n).getFixString((int)str_len,charsetName)"}
{"fixCommitSHA1": "4b52e5d010469405c1ec24baa2f8457f3eada222", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic boolean mouseMoved (int screenX, int screenY) {\r\n\t\tInputProcessor[] items = processors.begin();\r\n \t\ttry {\r\n \t\t\tfor (int i = 0, n = processors.size; i < n; i++)\r\n\t\t\t\tif (items[i].mouseMoved(screenX, screenY)) return true;\r\n \t\t} finally {\r\n \t\t\tprocessors.end();\r\n \t\t}\r", "fixed": " \t}\r\n \tpublic boolean mouseMoved (int screenX, int screenY) {\r\n\t\tObject[] items = processors.begin();\r\n \t\ttry {\r\n \t\t\tfor (int i = 0, n = processors.size; i < n; i++)\r\n\t\t\t\tif (((InputProcessor)items[i]).mouseMoved(screenX, screenY)) return true;\r\n \t\t} finally {\r\n \t\t\tprocessors.end();\r\n \t\t}\r", "sourceBeforeFix": "InputProcessor[]", "sourceAfterFix": "Object[]"}
{"fixCommitSHA1": "5dbc9d3fb3ce3e34c094416061da84e6a71456b3", "projectName": "cucumber.cucumber-jvm", "bugType": "Change Modifier", "problem": " import java.util.List;\n import java.util.regex.Pattern;\npublic class JavaStepDefinition implements StepDefinition {\n     private final Method method;\n     private final Pattern pattern;\n     private final int timeout;", "fixed": " import java.util.List;\n import java.util.regex.Pattern;\nclass JavaStepDefinition implements StepDefinition {\n     private final Method method;\n     private final Pattern pattern;\n     private final int timeout;", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "d128304bceaef2df9d8c527979010d56e6425bb4", "projectName": "facebook.presto", "bugType": "Change Unary Operator\t", "problem": "     @Override\n     public void accept(MethodVisitor visitor, MethodGenerationContext generationContext)\n     {\n        checkState(condition.isEmpty(), \"DoWhileLoop does not have a condition set\");\n         Block block = new Block()\n                 .visitLabel(beginLabel)", "fixed": "     @Override\n     public void accept(MethodVisitor visitor, MethodGenerationContext generationContext)\n     {\n        checkState(!condition.isEmpty(), \"DoWhileLoop does not have a condition set\");\n         Block block = new Block()\n                 .visitLabel(beginLabel)", "sourceBeforeFix": "condition.isEmpty()", "sourceAfterFix": "!condition.isEmpty()"}
{"fixCommitSHA1": "7369734ba2477dc5f208c9bcdbf438d42e92ac25", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t\tsetTransform(false);\n \t}\n\tpublic Container (Actor actor) {\n \t\tthis();\n \t\tsetActor(actor);\n \t}", "fixed": " \t\tsetTransform(false);\n \t}\n\tpublic Container (T actor) {\n \t\tthis();\n \t\tsetActor(actor);\n \t}", "sourceBeforeFix": "private Actor actor; ", "sourceAfterFix": "private T actor; "}
{"fixCommitSHA1": "98dfe7e6b2c2d098a216c1bd60cf9deaa83098ef", "projectName": "xetorthio.jedis", "bugType": "Wrong Function Name", "problem": "     new JedisClusterCommand<Integer>(connectionHandler, maxRedirections) {\n       @Override\n       public Integer execute(Jedis connection) {\n        connection.subscribe(jedisPubSub, patterns);\n         return 0;\n       }\n     }.runWithAnyNode();", "fixed": "     new JedisClusterCommand<Integer>(connectionHandler, maxRedirections) {\n       @Override\n       public Integer execute(Jedis connection) {\n        connection.psubscribe(jedisPubSub, patterns);\n         return 0;\n       }\n     }.runWithAnyNode();", "sourceBeforeFix": "connection.subscribe(jedisPubSub,patterns)", "sourceAfterFix": "connection.psubscribe(jedisPubSub,patterns)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "           \"functions are set.\");\n   \n  private final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "           \"functions are set.\");\n   \n  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_cn_4() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e7405\u670806\u65e5\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_cn_4() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e7405\u670806\u65e5\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "ac9fdf161f9e1464c3492fa6162895be00189540", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "         try {\n             Object answer;\n            XMLStreamReader xmlReader;\n             if (needFiltering(exchange)) {\n                xmlReader = typeConverter.convertTo(XMLStreamReader.class, createNonXmlFilterReader(exchange, stream));\n             } else {\n                xmlReader = typeConverter.convertTo(XMLStreamReader.class, stream);\n             }\n             String partClassFromHeader = exchange.getIn().getHeader(JaxbConstants.JAXB_PART_CLASS, String.class);\n             if (partialClass != null || partClassFromHeader != null) {", "fixed": "         try {\n             Object answer;\n            final XMLStreamReader xmlReader;\n             if (needFiltering(exchange)) {\n                xmlReader = typeConverter.convertTo(XMLStreamReader.class, exchange, createNonXmlFilterReader(exchange, stream));\n             } else {\n                xmlReader = typeConverter.convertTo(XMLStreamReader.class, exchange, stream);\n             }\n             String partClassFromHeader = exchange.getIn().getHeader(JaxbConstants.JAXB_PART_CLASS, String.class);\n             if (partialClass != null || partClassFromHeader != null) {", "sourceBeforeFix": "typeConverter.convertTo(XMLStreamReader.class,stream)", "sourceAfterFix": "typeConverter.convertTo(XMLStreamReader.class,exchange,stream)"}
{"fixCommitSHA1": "51271a02806489a2e2b5539475eb2131fd29b77d", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "     }\n     traverseAndRemoveUnusedReferences(root);\n    GatherGettersAndSetterProperties.update(compiler, externs, root);\n   }\n   /**", "fixed": "     }\n     traverseAndRemoveUnusedReferences(root);\n    GatherGetterAndSetterProperties.update(compiler, externs, root);\n   }\n   /**", "sourceBeforeFix": "GatherGettersAndSetterProperties.update(compiler,externs,root)", "sourceAfterFix": "GatherGetterAndSetterProperties.update(compiler,externs,root)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "fixed": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "sourceBeforeFix": "GL20.glUniformMatrix4(location,transpose,toFloatBuffer(value,offset,count << 4))", "sourceAfterFix": "GL20.glUniformMatrix4fv(location,transpose,toFloatBuffer(value,offset,count << 4))"}
{"fixCommitSHA1": "4c1b34b34b68f102fbb5021a801b6d99de967550", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   @Override\n  State getIntermediateState() {\n     return new State(\n         cssNames == null ? null : Maps.newHashMap(cssNames),\n         exportedNames == null ? null :", "fixed": "   }\n   @Override\n  protected State getIntermediateState() {\n     return new State(\n         cssNames == null ? null : Maps.newHashMap(cssNames),\n         exportedNames == null ? null :", "sourceBeforeFix": "0", "sourceAfterFix": "4"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShader(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "fixed": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShaderiv(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "sourceBeforeFix": "GL20.glUniformMatrix3(location,transpose,value)", "sourceAfterFix": "GL20.glUniformMatrix3fv(location,transpose,value)"}
{"fixCommitSHA1": "780a95c41d5d9ddafe1a237628183020746825a8", "projectName": "libgdx.libgdx", "bugType": "Change Operand ", "problem": " \t * before growing the backing table. */\r\n \tpublic ObjectMap (int initialCapacity, float loadFactor) {\r\n \t\tif (initialCapacity < 0) throw new IllegalArgumentException(\"initialCapacity must be >= 0: \" + initialCapacity);\r\n\t\tif (capacity > 1 << 30) throw new IllegalArgumentException(\"initialCapacity is too large: \" + initialCapacity);\r\n \t\tcapacity = MathUtils.nextPowerOfTwo(initialCapacity);\r\n \t\tif (loadFactor <= 0) throw new IllegalArgumentException(\"loadFactor must be > 0: \" + loadFactor);\r", "fixed": " \t * before growing the backing table. */\r\n \tpublic ObjectMap (int initialCapacity, float loadFactor) {\r\n \t\tif (initialCapacity < 0) throw new IllegalArgumentException(\"initialCapacity must be >= 0: \" + initialCapacity);\r\n\t\tif (initialCapacity > 1 << 30) throw new IllegalArgumentException(\"initialCapacity is too large: \" + initialCapacity);\r\n \t\tcapacity = MathUtils.nextPowerOfTwo(initialCapacity);\r\n \t\tif (loadFactor <= 0) throw new IllegalArgumentException(\"loadFactor must be > 0: \" + loadFactor);\r", "sourceBeforeFix": "capacity > 1 << 30", "sourceAfterFix": "initialCapacity > 1 << 30"}
{"fixCommitSHA1": "43b2fa49ca351c05c453c8cd0eec32ce6277c830", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t\tinvalidateHierarchy();\r\n \t}\r\n\tpublic String getText () {\r\n \t\treturn text;\r\n \t}\r", "fixed": " \t\tinvalidateHierarchy();\r\n \t}\r\n\tpublic CharSequence getText () {\r\n \t\treturn text;\r\n \t}\r", "sourceBeforeFix": "String text", "sourceAfterFix": "CharSequence text"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "             }\n         }\n         if (isStatisticsEnabled()) {\n            statistics.addGetTimeNano(System.nanoTime() - start);\n         }\n         CacheEntryProcessorEntry entry = new CacheEntryProcessorEntry(key, record, this, now);\n         final Object process = entryProcessor.process(entry, arguments);", "fixed": "             }\n         }\n         if (isStatisticsEnabled()) {\n            statistics.addGetTimeNanos(System.nanoTime() - start);\n         }\n         CacheEntryProcessorEntry entry = new CacheEntryProcessorEntry(key, record, this, now);\n         final Object process = entryProcessor.process(entry, arguments);", "sourceBeforeFix": "statistics.addPutTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addPutTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should delete global property from database\n \t */\n \t@Authorized(PrivilegeConstants.PURGE_GLOBAL_PROPERTIES)\n\tpublic void purgeGlobalProperty(GlobalProperty globalProperty) throws APIException;\n \t/**\n \t * Completely remove the given global properties from the database", "fixed": " \t * @should delete global property from database\n \t */\n \t@Authorized(PrivilegeConstants.PURGE_GLOBAL_PROPERTIES)\n\tpublic void purgeGlobalProperty(GlobalProperty globalProperty);\n \t/**\n \t * Completely remove the given global properties from the database", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fd00b428998b79347ff7bd3489d73603a4fd0f8b", "projectName": "hazelcast.hazelcast", "bugType": "Change Boolean Literal", "problem": "     }\n     public boolean returnsResponse() {\n        return false;\n     }\n     public Object getResponse() {", "fixed": "     }\n     public boolean returnsResponse() {\n        return true;\n     }\n     public Object getResponse() {", "sourceBeforeFix": "return false; ", "sourceAfterFix": "return true; "}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15849, value = \"Operation %s for address %s can only be handled by the \" +\n             \"master Domain Controller; this host is not the master Domain Controller\")\n     String masterDomainControllerOnlyOperation(String operation, PathAddress address);", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10849, value = \"Operation %s for address %s can only be handled by the \" +\n             \"master Domain Controller; this host is not the master Domain Controller\")\n     String masterDomainControllerOnlyOperation(String operation, PathAddress address);", "sourceBeforeFix": "id=15833", "sourceAfterFix": "id=10833"}
{"fixCommitSHA1": "d9510ff4ae62d30d49f80749d8ab1f0d3c16d9a4", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         out.writeInt(migrationData.size());\n         for (Map.Entry<String, Data> entry : migrationData.entrySet()) {\n             out.writeUTF(entry.getKey());\n            out.writeObject(entry.getValue());\n         }\n     }", "fixed": "         out.writeInt(migrationData.size());\n         for (Map.Entry<String, Data> entry : migrationData.entrySet()) {\n             out.writeUTF(entry.getKey());\n            out.writeData(entry.getValue());\n         }\n     }", "sourceBeforeFix": "in.readObject()", "sourceAfterFix": "in.readData()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15868, value = \"Deployment %s is already started\")\n     String deploymentAlreadyStarted(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10868, value = \"Deployment %s is already started\")\n     String deploymentAlreadyStarted(String name);\n     /**", "sourceBeforeFix": "id=15861", "sourceAfterFix": "id=10861"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform1iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform1(location, v);\r\n \t}\r\n \t@Override\r\n \tpublic void glUniform1iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform1(location, toIntBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform2f (int location, float x, float y) {\r", "fixed": " \t}\r\n \tpublic void glUniform1iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform1iv(location, v);\r\n \t}\r\n \t@Override\r\n \tpublic void glUniform1iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform1iv(location, toIntBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform2f (int location, float x, float y) {\r", "sourceBeforeFix": "GL20.glUniformMatrix4(location,transpose,toFloatBuffer(value,offset,count << 4))", "sourceAfterFix": "GL20.glUniformMatrix4fv(location,transpose,toFloatBuffer(value,offset,count << 4))"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15834, value = \"%s recognizes only %s as children: %s\")\n     String unrecognizedChildren(String parent, String children, String parentSpec);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10834, value = \"%s recognizes only %s as children: %s\")\n     String unrecognizedChildren(String parent, String children, String parentSpec);\n     /**", "sourceBeforeFix": "id=15843", "sourceAfterFix": "id=10843"}
{"fixCommitSHA1": "65c15a0c969d964875b2b988ff5f63d419e6a832", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    private class ExchangeNotifier extends EventNotifierSupport {\n         public void notify(EventObject event) throws Exception {\n             if (event instanceof ExchangeCreatedEvent) {", "fixed": "     \n    private final class ExchangeNotifier extends EventNotifierSupport {\n         public void notify(EventObject event) throws Exception {\n             if (event instanceof ExchangeCreatedEvent) {", "sourceBeforeFix": "2", "sourceAfterFix": "18"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleActionsPredicatesOptions_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(247);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {System.out.println($ctx.toStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");", "fixed": " \tpublic void testMultipleActionsPredicatesOptions_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {System.out.println($ctx.toStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");", "sourceBeforeFix": "new StringBuilder(247)", "sourceAfterFix": "new StringBuilder(246)"}
{"fixCommitSHA1": "eee0ec390231389b32e27f9ab52e279140abd82e", "projectName": "netty.netty", "bugType": "Change Modifier", "problem": "         }\n     }\n    boolean isContentAlwaysEmpty(@SuppressWarnings(\"unused\") H msg) {\n         return false;\n     }", "fixed": "         }\n     }\n    \n    protected boolean isContentAlwaysEmpty(@SuppressWarnings(\"unused\") H msg) {\n         return false;\n     }", "sourceBeforeFix": "0", "sourceAfterFix": "4"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15869, value = \"Unknown %s %s\")\n     String unknown(String name, String value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10869, value = \"Unknown %s %s\")\n     String unknown(String name, String value);\n     /**", "sourceBeforeFix": "id=15832", "sourceAfterFix": "id=10832"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<Status> getPublicTimeline() throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() +\n                 \"statuses/public_timeline.json\", false));\n     }", "fixed": "      */\n     public ResponseList<Status> getPublicTimeline() throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() +\n                 \"statuses/public_timeline.json\", false));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/public_timeline.json\",false))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/public_timeline.json\",false))"}
{"fixCommitSHA1": "22d5241b5f75631e9cfda82a6912a2555eecb165", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "     @Override\n     protected void doStop() throws Exception {\n         if (channel != null) {\n            LOG.trace(\"Terminating channel to the remote gRPC server\");\n             channel.shutdown().shutdownNow();\n             channel = null;\n             grpcStub = null;", "fixed": "     @Override\n     protected void doStop() throws Exception {\n         if (channel != null) {\n            LOG.debug(\"Terminating channel to the remote gRPC server\");\n             channel.shutdown().shutdownNow();\n             channel = null;\n             grpcStub = null;", "sourceBeforeFix": "LOG.info(\"Getting synchronous method stub from channel\")", "sourceAfterFix": "LOG.debug(\"Getting synchronous method stub from channel\")"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform3fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform3(location, v);\r\n \t}\r\n \tpublic void glUniform3fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform3(location, toFloatBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform3i (int location, int x, int y, int z) {\r", "fixed": " \t}\r\n \tpublic void glUniform3fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform3fv(location, v);\r\n \t}\r\n \tpublic void glUniform3fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform3fv(location, toFloatBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform3i (int location, int x, int y, int z) {\r", "sourceBeforeFix": "GL11.glGetTexParameter(target,pname,params)", "sourceAfterFix": "GL11.glGetTexParameteriv(target,pname,params)"}
{"fixCommitSHA1": "8c69c5f4aece3330100e4ad9d4d98887db691141", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "     @Test\n     public void testGrabbingListOfEntries() throws Exception {\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedMessageCount(1);\n         mock.assertIsSatisfied();\n         Exchange exchange = mock.getExchanges().get(0);", "fixed": "     @Test\n     public void testGrabbingListOfEntries() throws Exception {\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedMinimumMessageCount(1);\n         mock.assertIsSatisfied();\n         Exchange exchange = mock.getExchanges().get(0);", "sourceBeforeFix": "mock.expectedMessageCount(1)", "sourceAfterFix": "mock.expectedMinimumMessageCount(1)"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsCsv(String path, long millis) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, null);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsCsv(String path, long millis) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, null);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "e04cbbf23e9273cca31b1cc12142e34fae753542", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "          *  Is class declared as abstract.\n          *  @return true if class is declared as final\n          */\n        boolean isDeclaredAsAbstract() {\n             return declaredAsAbstract;\n         }\n     }", "fixed": "          *  Is class declared as abstract.\n          *  @return true if class is declared as final\n          */\n        private boolean isDeclaredAsAbstract() {\n             return declaredAsAbstract;\n         }\n     }", "sourceBeforeFix": "0", "sourceAfterFix": "2"}
{"fixCommitSHA1": "8716b68d562606ede1091f5a4dc90a2c9bac47f8", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "         SimpleRegistry registry = new SimpleRegistry();\n        registry.put(\"curator\", client);\n         producerContext = new DefaultCamelContext(registry);", "fixed": "         SimpleRegistry registry = new SimpleRegistry();\n        registry.bind(\"curator\", client);\n         producerContext = new DefaultCamelContext(registry);", "sourceBeforeFix": "registry.put(\"curator\",client)", "sourceAfterFix": "registry.bind(\"curator\",client)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserListMemberships(String user, long cursor) throws TwitterException {\n        return twitter4j.List.constructListOfLists(get(getApiBaseURL() + V1 +\n                 user + \"/lists/memberships.json?cursor=\" + cursor, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserListMemberships(String user, long cursor) throws TwitterException {\n        return twitter4j.List.createListList(get(getApiBaseURL() + V1 +\n                 user + \"/lists/memberships.json?cursor=\" + cursor, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweets_of_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweets_of_me.json\",null,true))"}
{"fixCommitSHA1": "0656040933973f55afa8b6e8f53140b6f76b7446", "projectName": "apache.hive", "bugType": "Change Unary Operator\t", "problem": "   @org.apache.hadoop.classification.InterfaceAudience.Public @org.apache.hadoop.classification.InterfaceStability.Stable public static class add_write_notification_log_args implements org.apache.thrift.TBase<add_write_notification_log_args, add_write_notification_log_args._Fields>, java.io.Serializable, Cloneable, Comparable<add_write_notification_log_args>   {\n     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(\"add_write_notification_log_args\");\n    private static final org.apache.thrift.protocol.TField RQST_FIELD_DESC = new org.apache.thrift.protocol.TField(\"rqst\", org.apache.thrift.protocol.TType.STRUCT, (short)-1);\n     private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();\n     static {", "fixed": "   @org.apache.hadoop.classification.InterfaceAudience.Public @org.apache.hadoop.classification.InterfaceStability.Stable public static class add_write_notification_log_args implements org.apache.thrift.TBase<add_write_notification_log_args, add_write_notification_log_args._Fields>, java.io.Serializable, Cloneable, Comparable<add_write_notification_log_args>   {\n     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(\"add_write_notification_log_args\");\n    private static final org.apache.thrift.protocol.TField RQST_FIELD_DESC = new org.apache.thrift.protocol.TField(\"rqst\", org.apache.thrift.protocol.TType.STRUCT, (short)1);\n     private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();\n     static {", "sourceBeforeFix": "-1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "692c2f34409172f07c0e0e4900f65bfdac9ba89e", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "         SimpleRegistry registry = new SimpleRegistry();\n         CxfEndpointConfigurer configurer = mock(CxfEndpointConfigurer.class);\n         Processor processor = mock(Processor.class);\n        registry.put(\"myConfigurer\", configurer);\n         CamelContext camelContext = new DefaultCamelContext(registry);\n         CxfComponent cxfComponent = new CxfComponent(camelContext);\nCxfEndpoint endpoint = (CxfEndpoint)cxfComponent.createEndpoint(routerEndpointURI + \"&cxfEndpointConfigurer=", "fixed": "         SimpleRegistry registry = new SimpleRegistry();\n         CxfEndpointConfigurer configurer = mock(CxfEndpointConfigurer.class);\n         Processor processor = mock(Processor.class);\n        registry.bind(\"myConfigurer\", configurer);\n         CamelContext camelContext = new DefaultCamelContext(registry);\n         CxfComponent cxfComponent = new CxfComponent(camelContext);\nCxfEndpoint endpoint = (CxfEndpoint)cxfComponent.createEndpoint(routerEndpointURI + \"&cxfEndpointConfigurer=", "sourceBeforeFix": "registry.put(\"myConfigurer\",configurer)", "sourceAfterFix": "registry.bind(\"myConfigurer\",configurer)"}
{"fixCommitSHA1": "febe9af92ea9c5b2e924788628b928bda8c7d1d8", "projectName": "libgdx.libgdx", "bugType": "Same Function Less Args", "problem": " \t\tGL10 gl = app.getGraphics().getGL10();\r\n \t\tgl.glClear( GL10.GL_COLOR_BUFFER_BIT );\r\n\t\tcamera.setMatrices( app.getGraphics() );\r\n \t\trenderBox( gl, groundBody, 50, 1 );\r", "fixed": " \t\tGL10 gl = app.getGraphics().getGL10();\r\n \t\tgl.glClear( GL10.GL_COLOR_BUFFER_BIT );\r\n\t\tcamera.setMatrices( );\r\n \t\trenderBox( gl, groundBody, 50, 1 );\r", "sourceBeforeFix": "camera.setMatrices(app.getGraphics())", "sourceAfterFix": "camera.setMatrices()"}
{"fixCommitSHA1": "dbb575b5861a30bd4ab660603c671441abb3f2cf", "projectName": "stanfordnlp.CoreNLP", "bugType": "Change Identifier Used", "problem": "             currSectionCoreMap.set(CoreAnnotations.AuthorAnnotation.class, foundAuthor);\n             Pattern p = Pattern.compile(foundAuthor);\n            Matcher matcher = p.matcher(sectionStartToken.word());\n             if (matcher.find()) {\n               int authorMentionStart = matcher.start() + sectionStartTagCharBegin;\n               int authorMentionEnd = matcher.end() + sectionStartTagCharBegin;", "fixed": "             currSectionCoreMap.set(CoreAnnotations.AuthorAnnotation.class, foundAuthor);\n             Pattern p = Pattern.compile(foundAuthor);\n            Matcher matcher = p.matcher(sectionStartTagToken.word());\n             if (matcher.find()) {\n               int authorMentionStart = matcher.start() + sectionStartTagCharBegin;\n               int authorMentionEnd = matcher.end() + sectionStartTagCharBegin;", "sourceBeforeFix": "sectionStartToken.word()", "sourceAfterFix": "sectionStartTagToken.word()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  private final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15857, value = \"Only 1 piece of content is currently supported (AS7-431)\")\n     String as7431();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10857, value = \"Only 1 piece of content is currently supported (AS7-431)\")\n     String as7431();\n     /**", "sourceBeforeFix": "id=15845", "sourceAfterFix": "id=10845"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsText(String path, int batchSize) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), batchSize, null);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsText(String path, int batchSize) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), batchSize, null);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedJmsEndpointBuilder\n             extends\n                 AdvancedJmsEndpointConsumerBuilder, AdvancedJmsEndpointProducerBuilder {\n         default JmsEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedJmsEndpointBuilder\n             extends\n                 AdvancedJmsEndpointConsumerBuilder, AdvancedJmsEndpointProducerBuilder {\n         default JmsEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "04a010c8499fbc96b1e5a99bdbebaf0b38d24586", "projectName": "libgdx.libgdx", "bugType": "Change Binary Operator", "problem": "* @return {@link\n \tpublic boolean[] ensureCapacity (int additionalCapacity) {\r\n \t\tint sizeNeeded = size + additionalCapacity;\r\n\t\tif (sizeNeeded >= items.length) resize(Math.max(8, sizeNeeded));\r\n \t\treturn items;\r\n \t}\r", "fixed": "* @return {@link\n \tpublic boolean[] ensureCapacity (int additionalCapacity) {\r\n \t\tint sizeNeeded = size + additionalCapacity;\r\n\t\tif (sizeNeeded > items.length) resize(Math.max(8, sizeNeeded));\r\n \t\treturn items;\r\n \t}\r", "sourceBeforeFix": "sizeNeeded >= items.length", "sourceAfterFix": "sizeNeeded > items.length"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \t@Test\n \tpublic void testMultipleActionsPredicatesOptions_1() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {console.log($ctx.toStringTree(null, this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");", "fixed": " \t@Test\n \tpublic void testMultipleActionsPredicatesOptions_1() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(245);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {console.log($ctx.toStringTree(null, this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");", "sourceBeforeFix": "new StringBuilder(246)", "sourceAfterFix": "new StringBuilder(245)"}
{"fixCommitSHA1": "bbb28b514aadd4fc649dd0b7a47c6ece4d629fa7", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "                                        if (body.endsWith(\"3\") || body.endsWith(\"7\")) {\n                                             log.info(\"5th message received.  Rolling back.\");\n                                             exchange.getOut().setFault(true);\n                                             exchange.getOut().setBody(\"5th message received.  Rolling back.\");", "fixed": "                                        if (body.endsWith(\"3\") || body.endsWith(\"10\")) {\n                                             log.info(\"5th message received.  Rolling back.\");\n                                             exchange.getOut().setFault(true);\n                                             exchange.getOut().setBody(\"5th message received.  Rolling back.\");", "sourceBeforeFix": "getMockEndpoint(\"mock:test.after.1\").expectedMinimumMessageCount(10)", "sourceAfterFix": "getMockEndpoint(\"mock:test.after.1\").expectedMessageCount(10)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15864, value = \"Error obtaining input stream from URL %s -- %s\")\n     String errorObtainingUrlStream(String url, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10864, value = \"Error obtaining input stream from URL %s -- %s\")\n     String errorObtainingUrlStream(String url, String message);\n     /**", "sourceBeforeFix": "id=15847", "sourceAfterFix": "id=10847"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  private final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "419fb4a4dee3cd001631daa06fe6b8c30095b468", "projectName": "apache.hadoop", "bugType": "Wrong Function Name", "problem": "     public long renew(Token<?> token, \n                       Configuration conf) throws IOException {\n      UserGroupInformation.getLoginUser().reloginFromKeytab();\n       InetSocketAddress serviceAddr = SecurityUtil.getTokenServiceAddr(token);\n       return ", "fixed": "     public long renew(Token<?> token, \n                       Configuration conf) throws IOException {\n      UserGroupInformation.getLoginUser().checkTGTAndReloginFromKeytab();\n       InetSocketAddress serviceAddr = SecurityUtil.getTokenServiceAddr(token);\n       return ", "sourceBeforeFix": "UserGroupInformation.getLoginUser().reloginFromKeytab()", "sourceAfterFix": "UserGroupInformation.getLoginUser().checkTGTAndReloginFromKeytab()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "9a9b02c330e9e452f37335d0e59c462175bb5df7", "projectName": "wildfly.wildfly", "bugType": "Same Function Swap Args", "problem": "             Assert.fail(\"Test should fail, user shouldn't be allowed to invoke that method\");\n         } catch (WebServiceException e) {\n            Assert.assertEquals(e.getCause().getMessage(), getNotAllowedExceptionMessage(\"helloForRole\"));\n         }\n     }", "fixed": "             Assert.fail(\"Test should fail, user shouldn't be allowed to invoke that method\");\n         } catch (WebServiceException e) {\n            Assert.assertEquals(getNotAllowedExceptionMessage(\"helloForRole\"), e.getCause().getMessage());\n         }\n     }", "sourceBeforeFix": "Assert.assertEquals(e.getCause().getMessage(),getNotAllowedExceptionMessage(\"hello\"))", "sourceAfterFix": "Assert.assertEquals(getNotAllowedExceptionMessage(\"hello\"),e.getCause().getMessage())"}
{"fixCommitSHA1": "8639593ad0e6bcbdbe8e6fe3263c9b2550169942", "projectName": "gephi.gephi", "bugType": "Change Identifier Used", "problem": "         float newCameraLocation = Math.max(newCameraLocationX, newCameraLocationY);\n         graphDrawable.cameraLocation[0] = limits.getMinXoctree() + graphWidth / 2;\n        graphDrawable.cameraLocation[1] = limits.getMinYoctree() + graphWidth / 2;\n         graphDrawable.cameraLocation[2] = newCameraLocation;\n         graphDrawable.cameraTarget[0] = graphDrawable.cameraLocation[0];", "fixed": "         float newCameraLocation = Math.max(newCameraLocationX, newCameraLocationY);\n         graphDrawable.cameraLocation[0] = limits.getMinXoctree() + graphWidth / 2;\n        graphDrawable.cameraLocation[1] = limits.getMinYoctree() + graphHeight / 2;\n         graphDrawable.cameraLocation[2] = newCameraLocation;\n         graphDrawable.cameraTarget[0] = graphDrawable.cameraLocation[0];", "sourceBeforeFix": "graphWidth / 2", "sourceAfterFix": "graphHeight / 2"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleAlternativesWithCommonLabel_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(561);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "fixed": " \tpublic void testMultipleAlternativesWithCommonLabel_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(560);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "sourceBeforeFix": "new StringBuilder(561)", "sourceAfterFix": "new StringBuilder(560)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   }\n   \n  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "014f2410e81ed3ecc6b82fbac49ab345aab6e90f", "projectName": "junit-team.junit", "bugType": "Change Modifier", "problem": "     }\n     @FixMethodOrder(MethodSorters.NAME_ASCENDING)\n    private static class DummySortWithNameAsc {\n         Object alpha(int i, double d, Thread t) {return null;}\n         void beta(int[][] x) {}\n         int gamma() {return 0;}", "fixed": "     }\n     @FixMethodOrder(MethodSorters.NAME_ASCENDING)\n    static class DummySortWithNameAsc {\n         Object alpha(int i, double d, Thread t) {return null;}\n         void beta(int[][] x) {}\n         int gamma() {return 0;}", "sourceBeforeFix": "10", "sourceAfterFix": "8"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public List<Trends> getWeeklyTrends() throws TwitterException {\n        return Trends.constructTrendsList(get(getSearchBaseURL()\n                 + \"trends/weekly.json\", false));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public List<Trends> getWeeklyTrends() throws TwitterException {\n        return Trends.createTrendsList(get(getSearchBaseURL()\n                 + \"trends/weekly.json\", false));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/home_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/home_timeline.json\",true))"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface HazelcastListEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedHazelcastListEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface HazelcastListEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedHazelcastListEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "      * Builder for endpoint producers for the Azure Storage Blob Service\n      * component.\n      */\n    public static interface BlobServiceEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedBlobServiceEndpointProducerBuilder advanced() {", "fixed": "      * Builder for endpoint producers for the Azure Storage Blob Service\n      * component.\n      */\n    public interface BlobServiceEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedBlobServiceEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "df0e14359abd61ff3a5713e5e12e116b3fb1c3ed", "projectName": "openmrs.openmrs-core", "bugType": "Change Modifier", "problem": " \tprivate static final Map<String, DaemonToken> daemonTokens = new WeakHashMap<String, DaemonToken>();\n\tprivate static Set<String> actualStartupOrder;\n \t/**\n \t * Add a module (in the form of a jar file) to the list of openmrs modules Returns null if an", "fixed": " \tprivate static final Map<String, DaemonToken> daemonTokens = new WeakHashMap<String, DaemonToken>();\n\tprivate static volatile Set<String> actualStartupOrder;\n \t/**\n \t * Add a module (in the form of a jar file) to the list of openmrs modules Returns null if an", "sourceBeforeFix": "10", "sourceAfterFix": "74"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShader(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "fixed": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShaderiv(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "sourceBeforeFix": "GL20.glUniform3(location,toIntBuffer(v,offset,count * 3))", "sourceAfterFix": "GL20.glUniform3iv(location,toIntBuffer(v,offset,count * 3))"}
{"fixCommitSHA1": "3e3515f2af47dc0c1f9c080a257edb56f5eb72a7", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "         if (node.getNodeType() == Node.ELEMENT_NODE) {\n             Document doc = node.getOwnerDocument();\n             if (((Element) node).getNamespaceURI().equals(BLUEPRINT_NS)) {\n                doc.renameNode(node, SPRING_NS, node.getNodeName());\n             }\n         }\n         NodeList list = node.getChildNodes();", "fixed": "         if (node.getNodeType() == Node.ELEMENT_NODE) {\n             Document doc = node.getOwnerDocument();\n             if (((Element) node).getNamespaceURI().equals(BLUEPRINT_NS)) {\n                doc.renameNode(node, SPRING_NS, node.getLocalName());\n             }\n         }\n         NodeList list = node.getChildNodes();", "sourceBeforeFix": "node.getNodeName()", "sourceAfterFix": "node.getLocalName()"}
{"fixCommitSHA1": "d2b19965df52e66385a2d7146887a44cea50330a", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "    * Removes try/catch/finally statements for easier debugging.\n    */\n   void removeTryCatchFinally() {\n    logger.info(\"Remove try/catch/finally\");\n     startPass(\"removeTryCatchFinally\");\n     RemoveTryCatch r = new RemoveTryCatch(this);\n     process(r);", "fixed": "    * Removes try/catch/finally statements for easier debugging.\n    */\n   void removeTryCatchFinally() {\n    logger.fine(\"Remove try/catch/finally\");\n     startPass(\"removeTryCatchFinally\");\n     RemoveTryCatch r = new RemoveTryCatch(this);\n     process(r);", "sourceBeforeFix": "logger.info(\"Remove try/catch/finally\")", "sourceAfterFix": "logger.fine(\"Remove try/catch/finally\")"}
{"fixCommitSHA1": "1daccd54d2ff2ecdb21d8c60268600c37febbb70", "projectName": "Alluxio.alluxio", "bugType": "Change Operand ", "problem": "       } else {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           for (int i = 0; i < BLOCKS_PER_FILE; i ++) {\n             buf.DATA.get(mBuf.array());", "fixed": "       } else {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           for (int i = 0; i < BLOCKS_PER_FILE; i ++) {\n             buf.DATA.get(mBuf.array());", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedJt400EndpointBuilder\n             extends\n                 AdvancedJt400EndpointConsumerBuilder, AdvancedJt400EndpointProducerBuilder {\n         default Jt400EndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedJt400EndpointBuilder\n             extends\n                 AdvancedJt400EndpointConsumerBuilder, AdvancedJt400EndpointProducerBuilder {\n         default Jt400EndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "bee7a939ade6ee0b42f00ea8727996986e31d6db", "projectName": "eclipse.vert.x", "bugType": "Change Binary Operator", "problem": "     @Override\n     public ByteBuf buffer(int initialCapacity, int maxCapacity) {\n      if (initialCapacity < capacity) {\n         return buffer();\n       } else {\n         throw new IllegalArgumentException();", "fixed": "     @Override\n     public ByteBuf buffer(int initialCapacity, int maxCapacity) {\n      if (initialCapacity <= capacity) {\n         return buffer();\n       } else {\n         throw new IllegalArgumentException();", "sourceBeforeFix": "initialCapacity < capacity", "sourceAfterFix": "initialCapacity <= capacity"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n  private final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "4665dcf9ab41c3c61cd42aad296ebfe518bfa003", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\n \tpublic void glDeleteTextures (int n, IntBuffer textures) {\n\t\tGL.glDeleteTexturesEXT(n, textures, Memory.getPosition(textures));\n \t}\n \tpublic void glDepthFunc (int func) {", "fixed": " \t}\n \tpublic void glDeleteTextures (int n, IntBuffer textures) {\n\t\tGL.glDeleteTextures(n, textures, Memory.getPosition(textures));\n \t}\n \tpublic void glDepthFunc (int func) {", "sourceBeforeFix": "GL.glPolygonOffsetEXT(factor,units)", "sourceAfterFix": "GL.glPolygonOffset(factor,units)"}
{"fixCommitSHA1": "e7bf415427b37bbc760ff9b9c69650db8ec477e4", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnBean(SolrServer.class)\n\t@ConditionalOnEnablednHealthIndicator(\"solr\")\n \tpublic static class SolrHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<SolrHealthIndicator, SolrServer> {", "fixed": " \t@Configuration\n \t@ConditionalOnBean(SolrServer.class)\n\t@ConditionalOnEnabledHealthIndicator(\"solr\")\n \tpublic static class SolrHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<SolrHealthIndicator, SolrServer> {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"diskspace\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"diskspace\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "a295b91c37f681199a83fdb963344c19e0d015c0", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "     private void handleAtomicNumberSet(String[] args) {\n         long v = 0;\n         if (args.length > 1) {\n            v = Long.valueOf(args[1]);\n         }\n         getAtomicNumber().set(v);\n         println(getAtomicNumber().get());", "fixed": "     private void handleAtomicNumberSet(String[] args) {\n         long v = 0;\n         if (args.length > 1) {\n            v = Long.parseLong(args[1]);\n         }\n         getAtomicNumber().set(v);\n         println(getAtomicNumber().get());", "sourceBeforeFix": "Long.valueOf(args[1])", "sourceAfterFix": "Long.parseLong(args[1])"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "2921e7bf0d74a65fdcc71d3ce3053037d14e4d44", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "             return new ErrorCommand(ERROR_CLIENT);\n         }\n         if (st.hasMoreTokens()) {\n            flag = Integer.valueOf(st.nextToken());\n         } else {\n             return new ErrorCommand(ERROR_CLIENT);\n         }", "fixed": "             return new ErrorCommand(ERROR_CLIENT);\n         }\n         if (st.hasMoreTokens()) {\n            flag = Integer.parseInt(st.nextToken());\n         } else {\n             return new ErrorCommand(ERROR_CLIENT);\n         }", "sourceBeforeFix": "Integer.valueOf(st.nextToken())", "sourceAfterFix": "Integer.parseInt(st.nextToken())"}
{"fixCommitSHA1": "8c267e67579f089ec1415933f9111036fc21c3bb", "projectName": "gephi.gephi", "bugType": "Change Identifier Used", "problem": "                 StatusDisplayer.getDefault().setStatusText(NbBundle.getMessage(ProjectControllerUIImpl.class, \"ProjectControllerUI.status.opened\", fileName));\n             }\n         };\n        if (loadRunnable instanceof LongTask) {\n             longTaskExecutor.execute((LongTask) loadTask, loadRunnable);\n         } else {\n             longTaskExecutor.execute(null, loadRunnable);", "fixed": "                 StatusDisplayer.getDefault().setStatusText(NbBundle.getMessage(ProjectControllerUIImpl.class, \"ProjectControllerUI.status.opened\", fileName));\n             }\n         };\n        if (loadTask instanceof LongTask) {\n             longTaskExecutor.execute((LongTask) loadTask, loadRunnable);\n         } else {\n             longTaskExecutor.execute(null, loadRunnable);", "sourceBeforeFix": "saveRunnable instanceof LongTask", "sourceAfterFix": "saveTask instanceof LongTask"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleActionsPredicatesOptions_1() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(239);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");", "fixed": " \tpublic void testMultipleActionsPredicatesOptions_1() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(238);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");", "sourceBeforeFix": "new StringBuilder(239)", "sourceAfterFix": "new StringBuilder(238)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "d3f568f0a22670cace0407eef7a5f36ea36294fd", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "       getNewBlockId();\n       length -= blockSize;\n     }\n    setComplete(length);\n   }\n   @Override", "fixed": "       getNewBlockId();\n       length -= blockSize;\n     }\n    setComplete(mLength);\n   }\n   @Override", "sourceBeforeFix": "setComplete(length)", "sourceAfterFix": "setComplete(mLength)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "9754de49878983bf090655203e0c880cccad7b2e", "projectName": "Atmosphere.atmosphere", "bugType": "Change Identifier Used", "problem": "     @Override\n     public List<Object> retrieveFromCache(String broadcasterId, AtmosphereResource r) {\n         String clientId = r.uuid();\n        long now = System.nanoTime();\n         List<Object> result = new ArrayList<Object>();", "fixed": "     @Override\n     public List<Object> retrieveFromCache(String broadcasterId, AtmosphereResource r) {\n         String clientId = r.uuid();\n        long now = System.currentTimeMillis();\n         List<Object> result = new ArrayList<Object>();", "sourceBeforeFix": "System.nanoTime()", "sourceAfterFix": "System.currentTimeMillis()"}
{"fixCommitSHA1": "40db776fd1a038366d4e72c6b81f21b88792122a", "projectName": "wildfly.wildfly", "bugType": "Wrong Function Name", "problem": " @Category(CommonCriteria.class)\n public class AuthenticationTestCase {\n    private static final String SERVER_HOST_PORT = TestSuiteEnvironment.getServerAddress() + \":\" + TestSuiteEnvironment.getHttpPort();\nprivate static final String WAR_URL = \"http:\n     /*", "fixed": " @Category(CommonCriteria.class)\n public class AuthenticationTestCase {\n    private static final String SERVER_HOST_PORT = TestSuiteEnvironment.getHttpAddress() + \":\" + TestSuiteEnvironment.getHttpPort();\nprivate static final String WAR_URL = \"http:\n     /*", "sourceBeforeFix": "TestSuiteEnvironment.getServerAddress()", "sourceAfterFix": "TestSuiteEnvironment.getHttpAddress()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "f79a34aa3ab947603330680019cab43a23a29b17", "projectName": "antlr.antlr4", "bugType": "Same Function More Args", "problem": " \t\t@Override\n \t\tpublic boolean ignore(String targetName) {\n\t\t\treturn !Arrays.asList(\"Java\", \"CSharp\", \"Python2\", \"Python3\", \"Node\").contains(targetName);\n \t\t}\n \t}", "fixed": " \t\t@Override\n \t\tpublic boolean ignore(String targetName) {\n\t\t\treturn !Arrays.asList(\"Java\", \"CSharp\", \"Python2\", \"Python3\", \"Node\", \"Cpp\").contains(targetName);\n \t\t}\n \t}", "sourceBeforeFix": "Arrays.asList(\"Java\",\"CSharp\",\"Python2\",\"Python3\",\"Node\")", "sourceAfterFix": "Arrays.asList(\"Java\",\"CSharp\",\"Python2\",\"Python3\",\"Node\",\"Cpp\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "9f0d922f042d7342252ad2e1476ae45002c89cfd", "projectName": "openhab.openhab", "bugType": "Change Numeric Literal", "problem": "                         command.toString(), repeatCount);\r\n                 if (command.compareTo(oldPercent) > 0) {\r\n                     for (int i = 0; i < repeatCount; i++) {\r\n                        Thread.sleep(50);\r\n                         if (BindingType.brightness.equals(type)) {\r\n                             sendIncrease(bulb, rgbwSteps, bridgeId);\r\n                         } else if (BindingType.colorTemperature.equals(type)) {\r", "fixed": "                         command.toString(), repeatCount);\r\n                 if (command.compareTo(oldPercent) > 0) {\r\n                     for (int i = 0; i < repeatCount; i++) {\r\n                        Thread.sleep(100);\r\n                         if (BindingType.brightness.equals(type)) {\r\n                             sendIncrease(bulb, rgbwSteps, bridgeId);\r\n                         } else if (BindingType.colorTemperature.equals(type)) {\r", "sourceBeforeFix": "Thread.sleep(50)", "sourceAfterFix": "Thread.sleep(100)"}
{"fixCommitSHA1": "40e6bbe55f7141bd66a52261e108a1f3b575ca6f", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "         }\n         doRemoveRecord(key, source);\n         if (isEventsEnabled()) {\n            publishEvent(createCacheExpiredEvent(key, toEventData(record), CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                  origin, IGNORE_COMPLETION));\n         }\n         return null;", "fixed": "         }\n         doRemoveRecord(key, source);\n         if (isEventsEnabled()) {\n            publishEvent(createCacheExpiredEvent(toEventData(key), toEventData(record),\n                                                 CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                  origin, IGNORE_COMPLETION));\n         }\n         return null;", "sourceBeforeFix": "toHeapData(key)", "sourceAfterFix": "toEventData(key)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15856, value = \"Invalid url stream.\")\n     String invalidUrlStream();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10856, value = \"Invalid url stream.\")\n     String invalidUrlStream();\n     /**", "sourceBeforeFix": "id=15870", "sourceAfterFix": "id=10870"}
{"fixCommitSHA1": "7bdcee5e3dfc368e8ba9c5752aa07d049ca5b5ae", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t\tExclusion(String groupId, String artifactId) {\n \t\t\tAssert.notNull(groupId, \"GroupId must not be null\");\n\t\t\tAssert.notNull(groupId, \"ArtifactId must not be null\");\n \t\t\tthis.groupId = groupId;\n \t\t\tthis.artifactId = artifactId;\n \t\t}", "fixed": " \t\tExclusion(String groupId, String artifactId) {\n \t\t\tAssert.notNull(groupId, \"GroupId must not be null\");\n\t\t\tAssert.notNull(artifactId, \"ArtifactId must not be null\");\n \t\t\tthis.groupId = groupId;\n \t\t\tthis.artifactId = artifactId;\n \t\t}", "sourceBeforeFix": "Assert.notNull(groupId,\"ArtifactId must not be null\")", "sourceAfterFix": "Assert.notNull(artifactId,\"ArtifactId must not be null\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedReactiveStreamsEndpointBuilder\n             extends\n                 AdvancedReactiveStreamsEndpointConsumerBuilder, AdvancedReactiveStreamsEndpointProducerBuilder {\n         default ReactiveStreamsEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedReactiveStreamsEndpointBuilder\n             extends\n                 AdvancedReactiveStreamsEndpointConsumerBuilder, AdvancedReactiveStreamsEndpointProducerBuilder {\n         default ReactiveStreamsEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "1c93b2a8d7e7dc8d7a1620c5566e7eb20df8f0ec", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         long taken = watch.stop();\n         assertEquals(taken, watch.taken());\n        assertTrue(\"Should take approx 200 millis, was: \" + taken, taken > 190);\n         watch.restart();\n         Thread.sleep(100);\n         taken = watch.stop();\n         assertEquals(taken, watch.taken());\n        assertTrue(\"Should take approx 100 millis, was: \" + taken, taken > 90);\n     }\n     public void testStopWatchTaken() throws Exception {", "fixed": "         long taken = watch.stop();\n         assertEquals(taken, watch.taken());\n        assertTrue(\"Should take approx 200 millis, was: \" + taken, taken > 150);\n         watch.restart();\n         Thread.sleep(100);\n         taken = watch.stop();\n         assertEquals(taken, watch.taken());\n        assertTrue(\"Should take approx 100 millis, was: \" + taken, taken > 50);\n     }\n     public void testStopWatchTaken() throws Exception {", "sourceBeforeFix": "taken > 90", "sourceAfterFix": "taken > 50"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<Status> getUserTimeline(Paging paging) throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline.json\"\n                 , null, paging.asPostParameterList(), true));\n     }", "fixed": "      */\n     public ResponseList<Status> getUserTimeline(Paging paging) throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline.json\"\n                 , null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites/\" + id+ \".json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites/\" + id+ \".json\",new PostParameter[0],true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "d8ca70f67abb10b2f1df8bfdefac2eef9bae2175", "projectName": "Alluxio.alluxio", "bugType": "Change Boolean Literal", "problem": "         .join(FILE_PREFIX + (DIR_WIDTH)).getPath()));\n     mFileSystemMaster.delete(new AlluxioURI(MOUNT_URI).join(DIR_TOP_LEVEL),\n        DeleteOptions.defaults().setRecursive(true).setAlluxioOnly(false).setUnchecked(false));\n     checkPersistedDirectoriesDeleted(3, ufsMount, Collections.EMPTY_LIST);\n   }", "fixed": "         .join(FILE_PREFIX + (DIR_WIDTH)).getPath()));\n     mFileSystemMaster.delete(new AlluxioURI(MOUNT_URI).join(DIR_TOP_LEVEL),\n        DeleteOptions.defaults().setRecursive(true).setAlluxioOnly(false).setUnchecked(true));\n     checkPersistedDirectoriesDeleted(3, ufsMount, Collections.EMPTY_LIST);\n   }", "sourceBeforeFix": "DeleteOptions.defaults().setRecursive(true).setAlluxioOnly(false).setUnchecked(false)", "sourceAfterFix": "DeleteOptions.defaults().setRecursive(true).setAlluxioOnly(false).setUnchecked(true)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface LogEndpointBuilder\n            extends\n                EndpointProducerBuilder {\n         default AdvancedLogEndpointBuilder advanced() {\n             return (AdvancedLogEndpointBuilder) this;\n         }", "fixed": "     \n    public interface LogEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedLogEndpointBuilder advanced() {\n             return (AdvancedLogEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "2b49c3601734e6e5c17e1c797b29015c4ddeee4a", "projectName": "eclipse.vert.x", "bugType": "Change Modifier", "problem": "   }\n   @Override\n  public synchronized void close() {\n     synchronized (this) {\n       checkClosed();\n       closed = true;", "fixed": "   }\n   @Override\n  public void close() {\n     synchronized (this) {\n       checkClosed();\n       closed = true;", "sourceBeforeFix": "33", "sourceAfterFix": "1"}
{"fixCommitSHA1": "346387c717048391485fb28f877531aab1095de1", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "      * @throws CheckstyleException if an error occurs.\n      */\n     static PkgControl load(final URI uri) throws CheckstyleException {\n        InputStream inputStream;\n         try {\n             inputStream = uri.toURL().openStream();\n         }", "fixed": "      * @throws CheckstyleException if an error occurs.\n      */\n     static PkgControl load(final URI uri) throws CheckstyleException {\n        final InputStream inputStream;\n         try {\n             inputStream = uri.toURL().openStream();\n         }", "sourceBeforeFix": "0", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15858, value = \"No deployment content with hash %s is available in the deployment content repository.\")\n     String noDeploymentContentWithHash(String hash);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10858, value = \"No deployment content with hash %s is available in the deployment content repository.\")\n     String noDeploymentContentWithHash(String hash);\n     /**", "sourceBeforeFix": "id=15836", "sourceAfterFix": "id=10836"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedSqlStoredEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default SqlStoredEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedSqlStoredEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default SqlStoredEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 15830, value = \"Registration of remote hosts is not supported on slave host controllers\")\n     String slaveControllerCannotAcceptOtherSlaves();\n     /**", "fixed": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 10830, value = \"Registration of remote hosts is not supported on slave host controllers\")\n     String slaveControllerCannotAcceptOtherSlaves();\n     /**", "sourceBeforeFix": "id=15839", "sourceAfterFix": "id=10839"}
{"fixCommitSHA1": "5b13fe70c25812157a1e4432135eb9639e72bc6a", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t\tfinal Sink output = new Sink(\"output.json\").withInputs(selection);\n \t\texpectedPlan.setSinks(output);\n\t\tassertEquals(expectedPlan, actualPlan);\n \t}\n }", "fixed": " \t\tfinal Sink output = new Sink(\"output.json\").withInputs(selection);\n \t\texpectedPlan.setSinks(output);\n\t\tassertPlanEquals(expectedPlan, actualPlan);\n \t}\n }", "sourceBeforeFix": "assertEquals(expectedPlan,actualPlan)", "sourceAfterFix": "assertPlanEquals(expectedPlan,actualPlan)"}
{"fixCommitSHA1": "ea98386dfd18da047c877a2320cfdcf15df2ea06", "projectName": "facebook.presto", "bugType": "Change Modifier", "problem": "                 .retLong();\n     }\n    private void generateAppendToMethod(ClassDefinition classDefinition, CallSiteBinder callSiteBinder, List<Type> types, List<FieldDefinition> channelFields)\n     {\n         Parameter blockIndex = arg(\"blockIndex\", int.class);\n         Parameter blockPosition = arg(\"blockPosition\", int.class);", "fixed": "                 .retLong();\n     }\n    private static void generateAppendToMethod(ClassDefinition classDefinition, CallSiteBinder callSiteBinder, List<Type> types, List<FieldDefinition> channelFields)\n     {\n         Parameter blockIndex = arg(\"blockIndex\", int.class);\n         Parameter blockPosition = arg(\"blockPosition\", int.class);", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": "  * \n  * @param T The data type that the comparator works on.\n  */\npublic interface TypeComparator<T>\n {\t\n \t/**\n \t * Computes a hash value for the given record. The hash value should include all fields in the record", "fixed": "  * \n  * @param T The data type that the comparator works on.\n  */\npublic abstract class TypeComparator<T>\n {\t\n \t/**\n \t * Computes a hash value for the given record. The hash value should include all fields in the record", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "b27f246f740829ca4a64beeb0b9405b06c49cff0", "projectName": "Alluxio.alluxio", "bugType": "Less Specific If", "problem": "               String ufsUri = resolution.getUri().toString();\n               UnderFileSystem ufs = resolution.getUfs();\n               AlluxioURI parentUri = alluxioUriToDel.getParent();\n              if (!ufsSyncChecker.isDirectoryInSync(parentUri)) {\n                 if (delInode.isFile()) {\n                   if (!ufs.deleteFile(ufsUri)) {", "fixed": "               String ufsUri = resolution.getUri().toString();\n               UnderFileSystem ufs = resolution.getUfs();\n               AlluxioURI parentUri = alluxioUriToDel.getParent();\n              if (alluxioUriToDel.equals(inodePath.getUri())\n                  || !ufsSyncChecker.isDirectoryInSync(parentUri)) {\n                 if (delInode.isFile()) {\n                   if (!ufs.deleteFile(ufsUri)) {", "sourceBeforeFix": "!ufsSyncChecker.isDirectoryInSync(parentUri)", "sourceAfterFix": "alluxioUriToDel.equals(inodePath.getUri()) || !ufsSyncChecker.isDirectoryInSync(parentUri)"}
{"fixCommitSHA1": "dd0a8cd787be7a33774c9f659562d2f5c6254931", "projectName": "NanoHttpd.nanohttpd", "bugType": "Wrong Function Name", "problem": "     private String findIndexFileInDirectory(File directory) {\n         for (String fileName : SimpleWebServer.INDEX_FILE_NAMES) {\n             File indexFile = new File(directory, fileName);\n            if (indexFile.exists()) {\n                 return fileName;\n             }\n         }", "fixed": "     private String findIndexFileInDirectory(File directory) {\n         for (String fileName : SimpleWebServer.INDEX_FILE_NAMES) {\n             File indexFile = new File(directory, fileName);\n            if (indexFile.isFile()) {\n                 return fileName;\n             }\n         }", "sourceBeforeFix": "indexFile.exists()", "sourceAfterFix": "indexFile.isFile()"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetProgramiv (int program, int pname, IntBuffer params) {\r\n\t\tGL20.glGetProgram(program, pname, params);\r\n \t}\r\n \tpublic void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tEXTFramebufferObject.glGetRenderbufferParameterEXT(target, pname, params);\r\n \t}\r\n \tpublic String glGetShaderInfoLog (int shader) {\r", "fixed": " \t}\r\n \tpublic void glGetProgramiv (int program, int pname, IntBuffer params) {\r\n\t\tGL20.glGetProgramiv(program, pname, params);\r\n \t}\r\n \tpublic void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tEXTFramebufferObject.glGetRenderbufferParameterivEXT(target, pname, params);\r\n \t}\r\n \tpublic String glGetShaderInfoLog (int shader) {\r", "sourceBeforeFix": "EXTFramebufferObject.glGetRenderbufferParameterEXT(target,pname,params)", "sourceAfterFix": "EXTFramebufferObject.glGetRenderbufferParameterivEXT(target,pname,params)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "d2314c583d3463e3fa020e9d42aecf91b55c582c", "projectName": "apache.hadoop", "bugType": "Change Identifier Used", "problem": "   private static final String EMPTY_DIAGNOSTICS = \"\";\n   private static final String RM_WEBAPP_ADDR =\n      WebAppUtils.getResolvedRMWebAppURLWithoutScheme(new Configuration());\n   private boolean isSecurityEnabled;\n   private RMContext rmContext;", "fixed": "   private static final String EMPTY_DIAGNOSTICS = \"\";\n   private static final String RM_WEBAPP_ADDR =\n      WebAppUtils.getResolvedRMWebAppURLWithScheme(new Configuration());\n   private boolean isSecurityEnabled;\n   private RMContext rmContext;", "sourceBeforeFix": "WebAppUtils.getResolvedRMWebAppURLWithoutScheme(new Configuration())", "sourceAfterFix": "WebAppUtils.getResolvedRMWebAppURLWithScheme(new Configuration())"}
{"fixCommitSHA1": "0b302cf93edee0e2ab3c9998f380ede8e8ea7727", "projectName": "Atmosphere.atmosphere", "bugType": "Change Identifier Used", "problem": "             }\n             if (resources.contains(r)) {\n                return r;\n             }", "fixed": "             }\n             if (resources.contains(r)) {\n                return this;\n             }", "sourceBeforeFix": "return r; ", "sourceAfterFix": "return this; "}
{"fixCommitSHA1": "3dddcc4cdf4a74ddbd4607c6aaee5bdd8ac46c27", "projectName": "gephi.gephi", "bugType": "Change Modifier", "problem": "     }\n     @Override\n    public boolean updateWorld() {\n         boolean repositioned = octree.repositionNodes();\n         boolean updated = dataBridge.updateWorld();", "fixed": "     }\n     @Override\n    public synchronized boolean updateWorld() {\n         boolean repositioned = octree.repositionNodes();\n         boolean updated = dataBridge.updateWorld();", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "0b3166b35fac48f68ba84f1110421d99c4222244", "projectName": "openhab.openhab", "bugType": "Change Numeric Literal", "problem": "     @Override\n     public byte[] decodeMessage() {\n        byte[] data = new byte[13];\n         data[0] = 0x0D;\n         data[1] = RFXComBaseMessage.PacketType.CURRENT.toByte();", "fixed": "     @Override\n     public byte[] decodeMessage() {\n        byte[] data = new byte[14];\n         data[0] = 0x0D;\n         data[1] = RFXComBaseMessage.PacketType.CURRENT.toByte();", "sourceBeforeFix": "new byte[13]", "sourceAfterFix": "new byte[14]"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "d251856fc9062d7abcdb5b4e48e7385d8e978b9b", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t\tif (!nsDictionary.writeToFileAtomically(file.getAbsolutePath(), false)) {\r\n \t\t\tGdx.app.debug(\"IOSPreferences\", \"Failed to write NSDictionary to file \" + file);\r\n \t\t}\r\n\t\tpool.dealloc();\r\n \t}\r\n }\r", "fixed": " \t\tif (!nsDictionary.writeToFileAtomically(file.getAbsolutePath(), false)) {\r\n \t\t\tGdx.app.debug(\"IOSPreferences\", \"Failed to write NSDictionary to file \" + file);\r\n \t\t}\r\n\t\tpool.drain();\r\n \t}\r\n }\r", "sourceBeforeFix": "value.longValue()", "sourceAfterFix": "value.longLongValue()"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should evict all entries of search locale cache\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_GLOBAL_PROPERTIES)\n\tpublic GlobalProperty saveGlobalProperty(GlobalProperty gp) throws APIException;\n \t/**\n \t * Allows code to be notified when a global property is created/edited/deleted.", "fixed": " \t * @should evict all entries of search locale cache\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_GLOBAL_PROPERTIES)\n\tpublic GlobalProperty saveGlobalProperty(GlobalProperty gp);\n \t/**\n \t * Allows code to be notified when a global property is created/edited/deleted.", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t */\n \t@Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)\n\tpublic SortedMap<String, String> getSystemVariables() throws APIException;\n \t/**\n \t * Get a map of all the System Information. Java, user, time, runtime properties, etc", "fixed": " \t */\n \t@Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)\n\tpublic SortedMap<String, String> getSystemVariables();\n \t/**\n \t * Get a map of all the System Information. Java, user, time, runtime properties, etc", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "abf2f457b12dcb128ebc437d7b8cc5a3e37c20a5", "projectName": "druid-io.druid", "bugType": "Change Modifier", "problem": "    */\n   @Nullable\n  abstract byte[] getCacheKey();\n }", "fixed": "    */\n   @Nullable\n  public abstract byte[] getCacheKey();\n }", "sourceBeforeFix": "0", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedIrcEndpointBuilder\n             extends\n                 AdvancedIrcEndpointConsumerBuilder, AdvancedIrcEndpointProducerBuilder {\n         default IrcEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedIrcEndpointBuilder\n             extends\n                 AdvancedIrcEndpointConsumerBuilder, AdvancedIrcEndpointProducerBuilder {\n         default IrcEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface JiraEndpointBuilder\n             extends\n                 JiraEndpointConsumerBuilder, JiraEndpointProducerBuilder {\n         default AdvancedJiraEndpointBuilder advanced() {", "fixed": "     \n    public interface JiraEndpointBuilder\n             extends\n                 JiraEndpointConsumerBuilder, JiraEndpointProducerBuilder {\n         default AdvancedJiraEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": " import org.jboss.logging.MessageLogger;\n /**\n * This module is using message IDs in the range 10900-10999. This file is using the subset 10950-10974 for domain\n* controller logger messages. See http:\n  * JBAS message id blocks.\n  * <p/>", "fixed": " import org.jboss.logging.MessageLogger;\n /**\n * This module is using message IDs in the range 10800-10999. This file is using the subset 10800-10829 for domain\n* controller logger messages. See http:\n  * JBAS message id blocks.\n  * <p/>", "sourceBeforeFix": "id=15809", "sourceAfterFix": "id=10809"}
{"fixCommitSHA1": "56713d36c65344d448b58f697bb109c882f44dc0", "projectName": "apache.flink", "bugType": "Change Numeric Literal", "problem": " \tprivate static final Log LOG = LogFactory.getLog(ByteBufferedChannelManager.class);\n\tprivate static final int DEFAULT_NUMBER_OF_READ_BUFFERS = 128;\n\tprivate static final int DEFAULT_NUMBER_OF_WRITE_BUFFERS = 128;\nprivate static final int DEFAULT_BUFFER_SIZE_IN_BYTES = 128 * 1024;\n \tprivate static final boolean DEFAULT_ALLOW_SPILLING = true;", "fixed": " \tprivate static final Log LOG = LogFactory.getLog(ByteBufferedChannelManager.class);\n\tprivate static final int DEFAULT_NUMBER_OF_READ_BUFFERS = 256;\n\tprivate static final int DEFAULT_NUMBER_OF_WRITE_BUFFERS = 256;\nprivate static final int DEFAULT_BUFFER_SIZE_IN_BYTES = 64 * 1024;\n \tprivate static final boolean DEFAULT_ALLOW_SPILLING = true;", "sourceBeforeFix": "DEFAULT_NUMBER_OF_WRITE_BUFFERS=128", "sourceAfterFix": "DEFAULT_NUMBER_OF_WRITE_BUFFERS=256"}
{"fixCommitSHA1": "84d6e4785ecad972742bb1bb869cfc3a5efa731d", "projectName": "cucumber.cucumber-jvm", "bugType": "Change Modifier", "problem": "         Executable testMethod = injectorSourceFactory::create;\n         InjectorSourceInstantiationFailed actualThrown = assertThrows(InjectorSourceInstantiationFailed.class, testMethod);\n         assertAll(\"Checking Exception including cause\",\n            () -> assertThat(\"Unexpected exception message\", actualThrown.getMessage(), is(equalTo(\"Instantiation of 'io.cucumber.guice.InjectorSourceFactoryTest$PrivateConstructor' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a   zero args constructor.\"))),\n             () -> assertThat(\"Unexpected exception cause class\", actualThrown.getCause(), isA(IllegalAccessException.class))\n         );\n     }", "fixed": "         Executable testMethod = injectorSourceFactory::create;\n         InjectorSourceInstantiationFailed actualThrown = assertThrows(InjectorSourceInstantiationFailed.class, testMethod);\n         assertAll(\"Checking Exception including cause\",\n            () -> assertThat(\"Unexpected exception message\", actualThrown.getMessage(), is(equalTo(\"Instantiation of 'io.cucumber.guice.InjectorSourceFactoryTest$PrivateConstructor' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a public zero args constructor.\"))),\n             () -> assertThat(\"Unexpected exception cause class\", actualThrown.getCause(), isA(IllegalAccessException.class))\n         );\n     }", "sourceBeforeFix": "8", "sourceAfterFix": "9"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "3eb7527a211517cd1e9995239daac6aae5819ede", "projectName": "wildfly.wildfly", "bugType": "Change Unary Operator\t", "problem": "     private String validate(ModelNode param, ModelNode namespaces) {\n         String failure = typeValidator.validateParameter(NAMESPACE, param);\n         String name = param.asProperty().getName();\n        if (failure == null && !namespaces.isDefined()) {\n             for (ModelNode node : namespaces.asList()) {\n                 if (name.equals(node.asProperty().getName())) {\n                     failure = \"Namespace with prefix \" + name + \" already registered with schema URI \" + node.asProperty().getValue().asString();", "fixed": "     private String validate(ModelNode param, ModelNode namespaces) {\n         String failure = typeValidator.validateParameter(NAMESPACE, param);\n         String name = param.asProperty().getName();\n        if (failure == null && namespaces.isDefined()) {\n             for (ModelNode node : namespaces.asList()) {\n                 if (name.equals(node.asProperty().getName())) {\n                     failure = \"Namespace with prefix \" + name + \" already registered with schema URI \" + node.asProperty().getValue().asString();", "sourceBeforeFix": "!namespaces.isDefined()", "sourceAfterFix": "namespaces.isDefined()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15855, value = \"Invalid byte stream.\")\n     String invalidByteStream();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10855, value = \"Invalid byte stream.\")\n     String invalidByteStream();\n     /**", "sourceBeforeFix": "id=15870", "sourceAfterFix": "id=10870"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e36c4c77bfbbf18ce8e46fa8efe2a809df891345", "projectName": "netty.netty", "bugType": "Change Identifier Used", "problem": "         if (maskPayload) {\n             int random = (int) (Math.random() * Integer.MAX_VALUE);\n             mask = ByteBuffer.allocate(4).putInt(random).array();\n            header.writeBytes(mask);\n             int counter = 0;\n             for (int i = data.readerIndex(); i < data.writerIndex(); i ++) {", "fixed": "         if (maskPayload) {\n             int random = (int) (Math.random() * Integer.MAX_VALUE);\n             mask = ByteBuffer.allocate(4).putInt(random).array();\n            out.writeBytes(mask);\n             int counter = 0;\n             for (int i = data.readerIndex(); i < data.writerIndex(); i ++) {", "sourceBeforeFix": "header.writeBytes(mask)", "sourceAfterFix": "out.writeBytes(mask)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  private final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "55ed50c4975cf694828d46ee9ca32ce72a9ef913", "projectName": "clojure.clojure", "bugType": "Wrong Function Name", "problem": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 12:\r\n\t\t\treturn invoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "fixed": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 12:\r\n\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "sourceBeforeFix": "invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())", "sourceAfterFix": "doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())"}
{"fixCommitSHA1": "0355f17f04738ad9315d0c8ecad1b282f836e7f3", "projectName": "antlr.antlr4", "bugType": "Wrong Function Name", "problem": " \t\t\t\t\tRangeTransition range = (RangeTransition)edge;\n \t\t\t\t\tString label = range.label().toString();\n \t\t\t\t\tif ( isLexer ) label = range.toString();\n\t\t\t\t\telse if ( grammar!=null ) label = range.label().toString(grammar.getTokenNames());\n \t\t\t\t\tedgeST.add(\"label\", getEdgeLabel(label));\n \t\t\t\t}\n \t\t\t\telse {", "fixed": " \t\t\t\t\tRangeTransition range = (RangeTransition)edge;\n \t\t\t\t\tString label = range.label().toString();\n \t\t\t\t\tif ( isLexer ) label = range.toString();\n\t\t\t\t\telse if ( grammar!=null ) label = range.label().toString(grammar.getTokenDisplayNames());\n \t\t\t\t\tedgeST.add(\"label\", getEdgeLabel(label));\n \t\t\t\t}\n \t\t\t\telse {", "sourceBeforeFix": "grammar.getTokenNames()", "sourceAfterFix": "grammar.getTokenDisplayNames()"}
{"fixCommitSHA1": "af6a4908c4dd38c0f935803ab6b8ed99387219f2", "projectName": "openhab.openhab", "bugType": "Wrong Function Name", "problem": " \t\t\t} else if (e instanceof TimeoutException) {\n \t\t\t\tlogger.debug(\"[{}]: Websocket timeout error\", connection.getHost());\n \t\t\t} else {\n\t\t\t\tlogger.error(\"[{}]: Websocket error: {}\", connection.getHost(), e.getMessage());\n \t\t\t}\n \t\t}", "fixed": " \t\t\t} else if (e instanceof TimeoutException) {\n \t\t\t\tlogger.debug(\"[{}]: Websocket timeout error\", connection.getHost());\n \t\t\t} else {\n\t\t\t\tlogger.debug(\"[{}]: Websocket error: {}\", connection.getHost(), e.getMessage());\n \t\t\t}\n \t\t}", "sourceBeforeFix": "logger.error(\"Error connecting to Plex\",e)", "sourceAfterFix": "logger.debug(\"Error connecting to Plex\",e)"}
{"fixCommitSHA1": "3a43345ad0a599659d462cfc14dba9d8c0553bbf", "projectName": "Graylog2.graylog2-server", "bugType": "Change Operand ", "problem": "         final ClosingRetentionStrategyConfig closingRetentionStrategyConfig = clusterConfigService.get(ClosingRetentionStrategyConfig.class);\n        final DeletionRetentionStrategy deletionRetentionStrategy = clusterConfigService.get(DeletionRetentionStrategy.class);\n         if (closingRetentionStrategyConfig == null) {\n             final ClosingRetentionStrategyConfig closingConfig = ClosingRetentionStrategyConfig.create(elasticsearchConfiguration.getMaxNumberOfIndices());", "fixed": "         final ClosingRetentionStrategyConfig closingRetentionStrategyConfig = clusterConfigService.get(ClosingRetentionStrategyConfig.class);\n        final DeletionRetentionStrategyConfig deletionRetentionStrategyConfig = clusterConfigService.get(DeletionRetentionStrategyConfig.class);\n         if (closingRetentionStrategyConfig == null) {\n             final ClosingRetentionStrategyConfig closingConfig = ClosingRetentionStrategyConfig.create(elasticsearchConfiguration.getMaxNumberOfIndices());", "sourceBeforeFix": "deletionRetentionStrategy == null", "sourceAfterFix": "deletionRetentionStrategyConfig == null"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform1fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform1(location, v);\r\n \t}\r\n \tpublic void glUniform1fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform1(location, toFloatBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform1i (int location, int x) {\r", "fixed": " \t}\r\n \tpublic void glUniform1fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform1fv(location, v);\r\n \t}\r\n \tpublic void glUniform1fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform1fv(location, toFloatBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform1i (int location, int x) {\r", "sourceBeforeFix": "GL20.glUniform3(location,v)", "sourceAfterFix": "GL20.glUniform3iv(location,v)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      * @param hostName the name of the host.\n      */\n     @LogMessage(level = Level.WARN)\n    @Message(id = 15804, value = \"Interrupted awaiting final response from host %s\")\n     void interruptedAwaitingFinalResponse(String hostName);\n     /**", "fixed": "      * @param hostName the name of the host.\n      */\n     @LogMessage(level = Level.WARN)\n    @Message(id = 10804, value = \"Interrupted awaiting final response from host %s\")\n     void interruptedAwaitingFinalResponse(String hostName);\n     /**", "sourceBeforeFix": "id=15807", "sourceAfterFix": "id=10807"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<Status> getHomeTimeline(Paging paging) throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/home_timeline.json\", null, paging.asPostParameterList(), true));\n     }\n     /**", "fixed": "      */\n     public ResponseList<Status> getHomeTimeline(Paging paging) throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/home_timeline.json\", null, paging.asPostParameterList(), true));\n     }\n     /**", "sourceBeforeFix": "DirectMessage.constructDirectMessages(get(getBaseURL() + \"direct_messages.json\",true))", "sourceAfterFix": "DirectMessage.createDirectMessageList(get(getBaseURL() + \"direct_messages.json\",true))"}
{"fixCommitSHA1": "603dfb48a6f0aa5a091f82c40e585a5d2b46eda8", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "                     message.getHeader(ChronicleEngineConstants.DEFAULT_VALUE))\n             );\n         } else {\n            QueueView.Excerpt<Object, Object> excerpt = queueView.get().get(index.longValue());\n             message.setHeader(ChronicleEngineConstants.PATH, excerpt.topic());\n             message.setBody(excerpt.message());", "fixed": "                     message.getHeader(ChronicleEngineConstants.DEFAULT_VALUE))\n             );\n         } else {\n            QueueView.Excerpt<Object, Object> excerpt = queueView.get().getExcerpt(index.longValue());\n             message.setHeader(ChronicleEngineConstants.PATH, excerpt.topic());\n             message.setBody(excerpt.message());", "sourceBeforeFix": "queueView.get().get(index.longValue())", "sourceAfterFix": "queueView.get().getExcerpt(index.longValue())"}
{"fixCommitSHA1": "eba7e984d0999606f90689ca3b89ee644b1e92a4", "projectName": "Graylog2.graylog2-server", "bugType": "Change Identifier Used", "problem": "         stats.order(TermsStatsFacet.ComparatorType.fromString(order.toString().toLowerCase()));\n         stats.size(size);\n        terms.facetFilter(standardFilters(range, filter));\n         srb.addFacet(stats);", "fixed": "         stats.order(TermsStatsFacet.ComparatorType.fromString(order.toString().toLowerCase()));\n         stats.size(size);\n        stats.facetFilter(standardFilters(range, filter));\n         srb.addFacet(stats);", "sourceBeforeFix": "terms.facetFilter(standardFilters(range,filter))", "sourceAfterFix": "stats.facetFilter(standardFilters(range,filter))"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedAsteriskEndpointBuilder\n             extends\n                 AdvancedAsteriskEndpointConsumerBuilder, AdvancedAsteriskEndpointProducerBuilder {\n         default AsteriskEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedAsteriskEndpointBuilder\n             extends\n                 AdvancedAsteriskEndpointConsumerBuilder, AdvancedAsteriskEndpointProducerBuilder {\n         default AsteriskEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "fixed": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttribfv(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttribiv(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "sourceBeforeFix": "EXTFramebufferObject.glGetFramebufferAttachmentParameterEXT(target,attachment,pname,params)", "sourceAfterFix": "EXTFramebufferObject.glGetFramebufferAttachmentParameterivEXT(target,attachment,pname,params)"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCachePuts(1);\n            statistics.addPutTimeNano(System.nanoTime() - start);\n         }\n         return result;\n     }", "fixed": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCachePuts(1);\n            statistics.addPutTimeNanos(System.nanoTime() - start);\n         }\n         return result;\n     }", "sourceBeforeFix": "statistics.addPutTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addPutTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15833, value = \"%s is missing %s: %s\")\n     String requiredChildIsMissing(String parent, String child, String parentSpec);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10833, value = \"%s is missing %s: %s\")\n     String requiredChildIsMissing(String parent, String child, String parentSpec);\n     /**", "sourceBeforeFix": "id=15846", "sourceAfterFix": "id=10846"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15847, value = \"Interrupted waiting for result from host %s\")\n     String interruptedAwaitingResultFromHost(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10847, value = \"Interrupted waiting for result from host %s\")\n     String interruptedAwaitingResultFromHost(String name);\n     /**", "sourceBeforeFix": "id=15872", "sourceAfterFix": "id=10872"}
{"fixCommitSHA1": "83b9dd427535bce39be43a9e8224cdbc352d7427", "projectName": "square.okhttp", "bugType": "Change Modifier", "problem": "       }\n     }\n    public Entry(Response response) {\n       this.url = response.request().url().toString();\n       this.varyHeaders = HttpHeaders.varyHeaders(response);\n       this.requestMethod = response.request().method();", "fixed": "       }\n     }\n    Entry(Response response) {\n       this.url = response.request().url().toString();\n       this.varyHeaders = HttpHeaders.varyHeaders(response);\n       this.requestMethod = response.request().method();", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "6cc0fdc67c2c6f12131ed252473d3c7d77d90cb5", "projectName": "gephi.gephi", "bugType": "Change Identifier Used", "problem": "         }\n         if (model == null) {\n            model = new EdgeDataTableModel(graph.getEdges().toArray(), columns.toArray(new EdgeDataColumn[0]));\n             table.setModel(model);\n         } else {\n            model.setEdges(graph.getEdges().toArray());\n             model.setColumns(columns.toArray(new EdgeDataColumn[0]));\n         }", "fixed": "         }\n         if (model == null) {\n            model = new EdgeDataTableModel(graph.getEdgesAndMetaEdges().toArray(), columns.toArray(new EdgeDataColumn[0]));\n             table.setModel(model);\n         } else {\n            model.setEdges(graph.getEdgesAndMetaEdges().toArray());\n             model.setColumns(columns.toArray(new EdgeDataColumn[0]));\n         }", "sourceBeforeFix": "graph.getEdges()", "sourceAfterFix": "graph.getEdgesAndMetaEdges()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   }\n   \n  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8b9791f8b4b1154d6a053de901a5efd2105409e5", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "     private String keySerializerClass;\n     @UriParam(label = \"producer\", defaultValue = \"1\")\n    private Integer requestRequiredAcks = 1;\n     @UriParam(label = \"producer\", defaultValue = \"33554432\")\n     private Integer bufferMemorySize = 33554432;", "fixed": "     private String keySerializerClass;\n     @UriParam(label = \"producer\", defaultValue = \"1\")\n    private String requestRequiredAcks = \"1\";\n     @UriParam(label = \"producer\", defaultValue = \"33554432\")\n     private Integer bufferMemorySize = 33554432;", "sourceBeforeFix": "@UriParam(label=\"producer\",defaultValue=\"1\") private Integer requestRequiredAcks=1; ", "sourceAfterFix": "@UriParam(label=\"producer\",defaultValue=\"1\") private String requestRequiredAcks=\"1\"; "}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  private final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "2", "sourceAfterFix": "0"}
{"fixCommitSHA1": "d762d973a7e7c33f289aa273d84c2bba5da076fb", "projectName": "apache.flink", "bugType": "Change Numeric Literal", "problem": " \tpublic void shouldFindTransitiveClosureInWholeMatrix() {\n \t\tfinal TestTransitiveClosure transitiveClosure = new TestTransitiveClosure();\n \t\ttransitiveClosure.setPhase(3);\n\t\ttransitiveClosure.setNumberOfPartitions(6);\n \t\tfinal SopremoTestPlan sopremoTestPlan = new SopremoTestPlan(transitiveClosure);\n \t\tString nullInput = SopremoTest.getResourcePath(\"null.json\");", "fixed": " \tpublic void shouldFindTransitiveClosureInWholeMatrix() {\n \t\tfinal TestTransitiveClosure transitiveClosure = new TestTransitiveClosure();\n \t\ttransitiveClosure.setPhase(3);\n\t\ttransitiveClosure.setNumberOfPartitions(3);\n \t\tfinal SopremoTestPlan sopremoTestPlan = new SopremoTestPlan(transitiveClosure);\n \t\tString nullInput = SopremoTest.getResourcePath(\"null.json\");", "sourceBeforeFix": "transitiveClosure.setNumberOfPartitions(6)", "sourceAfterFix": "transitiveClosure.setNumberOfPartitions(3)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "4156ed69f5a554a2a0f6ae1fe0e411db1e7ab8d3", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "         MBeanServerPlugin delegate = null;\n         final boolean readOnly = false;\n         try {\n            delegate = findDelegate(name);\n             if (delegate.shouldAuthorize()) {\n                 authorizeSensitiveOperation(CREATE_MBEAN, readOnly, true);\n             }", "fixed": "         MBeanServerPlugin delegate = null;\n         final boolean readOnly = false;\n         try {\n            delegate = findDelegateForNewObject(name);\n             if (delegate.shouldAuthorize()) {\n                 authorizeSensitiveOperation(CREATE_MBEAN, readOnly, true);\n             }", "sourceBeforeFix": "findDelegate(name)", "sourceAfterFix": "findDelegateForNewObject(name)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedCometdEndpointBuilder\n             extends\n                 AdvancedCometdEndpointConsumerBuilder, AdvancedCometdEndpointProducerBuilder {\n         default CometdEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedCometdEndpointBuilder\n             extends\n                 AdvancedCometdEndpointConsumerBuilder, AdvancedCometdEndpointProducerBuilder {\n         default CometdEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "2f880c73edb600ab92cdd580ac74f7388b5c6135", "projectName": "Alluxio.alluxio", "bugType": "Change Modifier", "problem": "     }\n   }\n  public void addBlock(int fileId, int blockIndex, long blockLength) {\n     if (INACTIVE) {\n       return;\n     }", "fixed": "     }\n   }\n  public synchronized void addBlock(int fileId, int blockIndex, long blockLength) {\n     if (INACTIVE) {\n       return;\n     }", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "04a010c8499fbc96b1e5a99bdbebaf0b38d24586", "projectName": "libgdx.libgdx", "bugType": "Change Binary Operator", "problem": "* @return {@link\n \tpublic boolean[] ensureCapacity (int additionalCapacity) {\r\n \t\tint sizeNeeded = size + additionalCapacity;\r\n\t\tif (sizeNeeded >= items.length) resize(Math.max(8, sizeNeeded));\r\n \t\treturn items;\r\n \t}\r", "fixed": "* @return {@link\n \tpublic boolean[] ensureCapacity (int additionalCapacity) {\r\n \t\tint sizeNeeded = size + additionalCapacity;\r\n\t\tif (sizeNeeded > items.length) resize(Math.max(8, sizeNeeded));\r\n \t\treturn items;\r\n \t}\r", "sourceBeforeFix": "sizeNeeded >= items.length", "sourceAfterFix": "sizeNeeded > items.length"}
{"fixCommitSHA1": "39fe5a830bb4e05a85bef3e52115c708f9409abf", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "     }\n     private static ModelControllerClient createClient2() throws UnknownHostException {\n        return ModelControllerClient.Factory.create(InetAddress.getByName(TestSuiteEnvironment.getServerAddress()),\n                 TestSuiteEnvironment.getServerPort() + 300,\n                 Authentication.getCallbackHandler());\n     }", "fixed": "     }\n     private static ModelControllerClient createClient2() throws UnknownHostException {\n        return ModelControllerClient.Factory.create(InetAddress.getByName(TestSuiteEnvironment.getServerAddressNode1()),\n                 TestSuiteEnvironment.getServerPort() + 300,\n                 Authentication.getCallbackHandler());\n     }", "sourceBeforeFix": "TestSuiteEnvironment.getServerAddress()", "sourceAfterFix": "TestSuiteEnvironment.getServerAddressNode1()"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedVmEndpointBuilder\n             extends\n                 AdvancedVmEndpointConsumerBuilder, AdvancedVmEndpointProducerBuilder {\n         default VmEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedVmEndpointBuilder\n             extends\n                 AdvancedVmEndpointConsumerBuilder, AdvancedVmEndpointProducerBuilder {\n         default VmEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "5a3d01d226ccd5e879fc301a9ca2706aa066e752", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": " public class ASMSerializerFactory implements Opcodes {\n    protected final ASMClassLoader classLoader             = new ASMClassLoader();\n     private final AtomicLong       seed                    = new AtomicLong();", "fixed": " public class ASMSerializerFactory implements Opcodes {\n    protected final ASMClassLoader classLoader             = new ASMClassLoader(ASMSerializerFactory.class.getClassLoader());\n     private final AtomicLong       seed                    = new AtomicLong();", "sourceBeforeFix": "new ASMClassLoader()", "sourceAfterFix": "new ASMClassLoader(ASMSerializerFactory.class.getClassLoader())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "d4a16659412af852dd849b0e87b46779d9541fa0", "projectName": "netty.netty", "bugType": "Change Binary Operator", "problem": "             runDelegatedTasks(serverResult, serverEngine);\n             cTOs.compact();\n             sTOc.compact();\n        } while (isHandshaking(clientResult) && isHandshaking(serverResult));\n     }\n     private static boolean isHandshaking(SSLEngineResult result) {", "fixed": "             runDelegatedTasks(serverResult, serverEngine);\n             cTOs.compact();\n             sTOc.compact();\n        } while (isHandshaking(clientResult) || isHandshaking(serverResult));\n     }\n     private static boolean isHandshaking(SSLEngineResult result) {", "sourceBeforeFix": "isHandshaking(clientResult) && isHandshaking(serverResult)", "sourceAfterFix": "isHandshaking(clientResult) || isHandshaking(serverResult)"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n            statistics.addRemoveTimeNano(System.nanoTime() - start);\n         }\n         return result;\n     }", "fixed": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n            statistics.addRemoveTimeNanos(System.nanoTime() - start);\n         }\n         return result;\n     }", "sourceBeforeFix": "statistics.addRemoveTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addRemoveTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedWordpressEndpointBuilder\n             extends\n                 AdvancedWordpressEndpointConsumerBuilder, AdvancedWordpressEndpointProducerBuilder {\n         default WordpressEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedWordpressEndpointBuilder\n             extends\n                 AdvancedWordpressEndpointConsumerBuilder, AdvancedWordpressEndpointProducerBuilder {\n         default WordpressEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "492fd118d4902c730fc8619851a7135b623631e2", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         MockEndpoint result = getMockEndpoint(\"mock:result\");\r\n        result.expectedMessageCount(2);\r\n         result.expectedBodiesReceived(\"Message 1c\", \"Message 2b\");\r", "fixed": "         MockEndpoint result = getMockEndpoint(\"mock:result\");\r\n        result.expectedMinimumMessageCount(2);\r\n         result.expectedBodiesReceived(\"Message 1c\", \"Message 2b\");\r", "sourceBeforeFix": "from(\"direct:start\").aggregator().header(\"id\").batchTimeout(2000L)", "sourceAfterFix": "from(\"direct:start\").aggregator().header(\"id\").batchTimeout(500L)"}
{"fixCommitSHA1": "97814491bc0e383e136612dea07af841c0121681", "projectName": "Alluxio.alluxio", "bugType": "Same Function More Args", "problem": "    * @return the number of blocks\n    */\n   public int getNumberOfBlocks() {\n    Preconditions.checkNotNull(mBlockIdsOnTiers);\n     int numberOfBlocks = 0;\n     for (List<Long> blockIds : mBlockIdsOnTiers.values()) {", "fixed": "    * @return the number of blocks\n    */\n   public int getNumberOfBlocks() {\n    Preconditions.checkNotNull(mBlockIdsOnTiers, \"mBlockIdsOnTiers\");\n     int numberOfBlocks = 0;\n     for (List<Long> blockIds : mBlockIdsOnTiers.values()) {", "sourceBeforeFix": "Preconditions.checkNotNull(mBlockIdsOnTiers)", "sourceAfterFix": "Preconditions.checkNotNull(mBlockIdsOnTiers,\"mBlockIdsOnTiers\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "3dddcc4cdf4a74ddbd4607c6aaee5bdd8ac46c27", "projectName": "gephi.gephi", "bugType": "Change Modifier", "problem": "     }\n     @Override\n    public List<Node> getSelectedUnderlyingNodes() {\n         List<Node> selected = new ArrayList<>();\n         for (Iterator<NodeModel> itr = octree.getNodeIterator(); itr.hasNext();) {\n             NodeModel nodeModel = itr.next();", "fixed": "     }\n     @Override\n    public synchronized List<Node> getSelectedUnderlyingNodes() {\n         List<Node> selected = new ArrayList<>();\n         for (Iterator<NodeModel> itr = octree.getNodeIterator(); itr.hasNext();) {\n             NodeModel nodeModel = itr.next();", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15844, value = \"Invalid rollout plan. Server group %s appears more than once in the plan.\")\n     String invalidRolloutPlanGroupAlreadyExists(String group);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10844, value = \"Invalid rollout plan. Server group %s appears more than once in the plan.\")\n     String invalidRolloutPlanGroupAlreadyExists(String group);\n     /**", "sourceBeforeFix": "id=15835", "sourceAfterFix": "id=10835"}
{"fixCommitSHA1": "35dc7982d28800b4fecdf0772236a2d8e054aa77", "projectName": "spring-projects.spring-boot", "bugType": "Change Modifier", "problem": " \t}\n \t@Test\n\tpublic void testHealth() throws Exception {\nString url = \"http:\n \t\tSystem.out.println(url);\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);", "fixed": " \t}\n \t@Test\n\tvoid testHealth() throws Exception {\nString url = \"http:\n \t\tSystem.out.println(url);\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "84d6e4785ecad972742bb1bb869cfc3a5efa731d", "projectName": "cucumber.cucumber-jvm", "bugType": "Change Modifier", "problem": "         Executable testMethod = injectorSourceFactory::create;\n         InjectorSourceInstantiationFailed actualThrown = assertThrows(InjectorSourceInstantiationFailed.class, testMethod);\n         assertAll(\"Checking Exception including cause\",\n            () -> assertThat(\"Unexpected exception message\", actualThrown.getMessage(), is(equalTo(\"Instantiation of 'java.lang.String' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a   zero args constructor.\"))),\n             () -> assertThat(\"Unexpected exception cause class\", actualThrown.getCause(), isA(ClassCastException.class))\n         );\n     }", "fixed": "         Executable testMethod = injectorSourceFactory::create;\n         InjectorSourceInstantiationFailed actualThrown = assertThrows(InjectorSourceInstantiationFailed.class, testMethod);\n         assertAll(\"Checking Exception including cause\",\n            () -> assertThat(\"Unexpected exception message\", actualThrown.getMessage(), is(equalTo(\"Instantiation of 'java.lang.String' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a public zero args constructor.\"))),\n             () -> assertThat(\"Unexpected exception cause class\", actualThrown.getCause(), isA(ClassCastException.class))\n         );\n     }", "sourceBeforeFix": "0", "sourceAfterFix": "1"}
{"fixCommitSHA1": "8b59afeaaa4458b6d21d88b2edc0d22ed04d9798", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "                     public void process(Exchange exchange) throws Exception {\n                         String id = exchange.getIn().getHeader(\"messageId\", String.class);\n                         if (id.equals(\"2\")) {\n                            throw new IllegalArgumentException(\"Damm I cannot handle id 2\");\n                         }\n                     }\n                 }).to(\"mock:result\");", "fixed": "                     public void process(Exchange exchange) throws Exception {\n                         String id = exchange.getIn().getHeader(\"messageId\", String.class);\n                         if (id.equals(\"2\")) {\n                            throw new IllegalArgumentException(\"Damn I cannot handle id 2\");\n                         }\n                     }\n                 }).to(\"mock:result\");", "sourceBeforeFix": "resultEndpoint.expectedBodiesReceived(\"one\",\"three\")", "sourceAfterFix": "resultEndpoint.expectedBodiesReceivedInAnyOrder(\"one\",\"three\")"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15849, value = \"Operation %s for address %s can only be handled by the \" +\n             \"master Domain Controller; this host is not the master Domain Controller\")\n     String masterDomainControllerOnlyOperation(String operation, PathAddress address);", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10849, value = \"Operation %s for address %s can only be handled by the \" +\n             \"master Domain Controller; this host is not the master Domain Controller\")\n     String masterDomainControllerOnlyOperation(String operation, PathAddress address);", "sourceBeforeFix": "id=15872", "sourceAfterFix": "id=10872"}
{"fixCommitSHA1": "2230a91829f39b72973e6fecf275d9c664911ca0", "projectName": "clojure.clojure", "bugType": "Change Identifier Used", "problem": " \tcatch(Throwable e)\n \t\t{\n \t\tif(!(e instanceof CompilerException))\n\t\t\tthrow new CompilerException((String) SOURCE.deref(), (Integer) LINE.deref(), e);\n \t\telse\n \t\t\tthrow (CompilerException) e;\n \t\t}", "fixed": " \tcatch(Throwable e)\n \t\t{\n \t\tif(!(e instanceof CompilerException))\n\t\t\tthrow new CompilerException((String) SOURCE_PATH.deref(), (Integer) LINE.deref(), e);\n \t\telse\n \t\t\tthrow (CompilerException) e;\n \t\t}", "sourceBeforeFix": "new CompilerException(sourceName,e.line,e.getCause())", "sourceAfterFix": "new CompilerException(sourcePath,e.line,e.getCause())"}
{"fixCommitSHA1": "e2efffc72002968f835a0ea6a70f8e7762752b15", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": " \t@Test(expected = DuplicateConceptNameException.class)\r\n \t@Verifies(value = \"should fail if there is a duplicate unretired preferred name in the same locale\", method = \"validate(Object,Errors)\")\r\n \tpublic void validate_shouldFailIfThereIsADuplicateUnretiredPreferredNameInTheSameLocale() throws Exception {\r\n\t\tContext.setLocale(Context.getLocale());\r\n \t\tConcept concept = Context.getConceptService().getConcept(5497);\r\n \t\tConceptName preferredName = new ConceptName(\"preferred name\", Context.getLocale());\r\n \t\tconcept.setPreferredName(preferredName);\r", "fixed": " \t@Test(expected = DuplicateConceptNameException.class)\r\n \t@Verifies(value = \"should fail if there is a duplicate unretired preferred name in the same locale\", method = \"validate(Object,Errors)\")\r\n \tpublic void validate_shouldFailIfThereIsADuplicateUnretiredPreferredNameInTheSameLocale() throws Exception {\r\n\t\tContext.setLocale(new Locale(\"en\"));\r\n \t\tConcept concept = Context.getConceptService().getConcept(5497);\r\n \t\tConceptName preferredName = new ConceptName(\"preferred name\", Context.getLocale());\r\n \t\tconcept.setPreferredName(preferredName);\r", "sourceBeforeFix": "new BindException(concept,\"concept\")", "sourceAfterFix": "new BindException(newConcept,\"concept\")"}
{"fixCommitSHA1": "b426fb1618757e3e8d700f90cf5b5e1c55bc9f2a", "projectName": "netty.netty", "bugType": "Same Function More Args", "problem": "     public void setup() throws Http2Exception {\n         connection = new DefaultHttp2Connection(false);\n         for (int i = 0; i < numStreams; ++i) {\n            connection.local().createStream(toStreamId(i));\n         }\n     }", "fixed": "     public void setup() throws Http2Exception {\n         connection = new DefaultHttp2Connection(false);\n         for (int i = 0; i < numStreams; ++i) {\n            connection.local().createStream(toStreamId(i), false);\n         }\n     }", "sourceBeforeFix": "connection.local().createStream(toStreamId(i))", "sourceAfterFix": "connection.local().createStream(toStreamId(i),false)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "fixed": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "sourceBeforeFix": "GL20.glUniform1(location,toFloatBuffer(v,offset,count))", "sourceAfterFix": "GL20.glUniform1fv(location,toFloatBuffer(v,offset,count))"}
{"fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "projectName": "Alluxio.alluxio", "bugType": "Change Operand ", "problem": "         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n            file = new RandomAccessFile(FOLDER + (mWorkerId + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());", "fixed": "         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n            file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "pId + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "261f178a7b371d33b0c00c887821e8587534c32a", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "      * @param task the task to add.\n      * @throws NullPointerException if task is null\n      */\n    public final void addTaskAndWakeup(Runnable task) {\n         taskQueue.add(task);\n         if (!selectNow) {\n             selector.wakeup();", "fixed": "      * @param task the task to add.\n      * @throws NullPointerException if task is null\n      */\n    public void addTaskAndWakeup(Runnable task) {\n         taskQueue.add(task);\n         if (!selectNow) {\n             selector.wakeup();", "sourceBeforeFix": "target.addTask(task)", "sourceAfterFix": "target.addTaskAndWakeup(task)"}
{"fixCommitSHA1": "43b2fa49ca351c05c453c8cd0eec32ce6277c830", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t\treturn style;\r\n \t}\r\n\tpublic void setText (String text) {\r\n \t\tif (text == null) throw new IllegalArgumentException(\"text cannot be null.\");\r\n \t\tif (text.equals(this.text)) return;\r\n \t\tthis.text = text;\r", "fixed": " \t\treturn style;\r\n \t}\r\n\tpublic void setText (CharSequence text) {\r\n \t\tif (text == null) throw new IllegalArgumentException(\"text cannot be null.\");\r\n \t\tif (text.equals(this.text)) return;\r\n \t\tthis.text = text;\r", "sourceBeforeFix": "private String text; ", "sourceAfterFix": "private CharSequence text; "}
{"fixCommitSHA1": "b7a9f743db97d9925edf634525a7c8e6a6cc1dd1", "projectName": "openhab.openhab", "bugType": "Same Function More Args", "problem": "\t\t\t\t\t\tlogger.debug(\"NODE {}: Retry timout: Can't advance\");\n \t\t\t\t\t\tbreak;\n \t\t\t\t\t}\n \t\t\t\t}", "fixed": "\t\t\t\t\t\tlogger.debug(\"NODE {}: Retry timout: Can't advance\", node.getNodeId());\n \t\t\t\t\t\tbreak;\n \t\t\t\t\t}\n \t\t\t\t}", "sourceBeforeFix": "logger.debug(\"NODE {}: Retry timout: Can't advance\")", "sourceAfterFix": "logger.debug(\"NODE {}: Retry timout: Can't advance\",node.getNodeId())"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "fixed": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "sourceBeforeFix": "GL20.glUniform2(location,v)", "sourceAfterFix": "GL20.glUniform2iv(location,v)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "fixed": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "sourceBeforeFix": "GL20.glUniform4(location,toIntBuffer(v,offset,count << 2))", "sourceAfterFix": "GL20.glUniform4iv(location,toIntBuffer(v,offset,count << 2))"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15833, value = \"%s is missing %s: %s\")\n     String requiredChildIsMissing(String parent, String child, String parentSpec);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10833, value = \"%s is missing %s: %s\")\n     String requiredChildIsMissing(String parent, String child, String parentSpec);\n     /**", "sourceBeforeFix": "id=15839", "sourceAfterFix": "id=10839"}
{"fixCommitSHA1": "b2a8186bd3793d72b868a112512d6a9a087d18c3", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "                 Data key = next.getKey();\n                 CacheRecord record = next.getValue();\n                 iter.remove();\n                cache.setRecord(key, record);\n             }\n         }\n         data.clear();", "fixed": "                 Data key = next.getKey();\n                 CacheRecord record = next.getValue();\n                 iter.remove();\n                cache.putRecord(key, record);\n             }\n         }\n         data.clear();", "sourceBeforeFix": "cache.setRecord(key,record)", "sourceAfterFix": "cache.putRecord(key,record)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "41c8ec7aeae859808a217bd7a561e81be7e3c7ac", "projectName": "apache.hbase", "bugType": "Wrong Function Name", "problem": "         postAppend(entry, EnvironmentEdgeManager.currentTime() - start);\n       } catch (Exception e) {\n        LOG.fatal(\"Could not append. Requesting close of wal\", e);\n         requestLogRoll();\n         throw e;\n       }", "fixed": "         postAppend(entry, EnvironmentEdgeManager.currentTime() - start);\n       } catch (Exception e) {\n        LOG.warn(\"Could not append. Requesting close of wal\", e);\n         requestLogRoll();\n         throw e;\n       }", "sourceBeforeFix": "LOG.fatal(\"Could not append. Requesting close of wal\",e)", "sourceAfterFix": "LOG.warn(\"Could not append. Requesting close of wal\",e)"}
{"fixCommitSHA1": "a295b91c37f681199a83fdb963344c19e0d015c0", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "     protected void handleQPoll(String[] args) {\n         long timeout = 0;\n         if (args.length > 1) {\n            timeout = Long.valueOf(args[1]);\n         }\n         try {\n             println(getQueue().poll(timeout, TimeUnit.SECONDS));", "fixed": "     protected void handleQPoll(String[] args) {\n         long timeout = 0;\n         if (args.length > 1) {\n            timeout = Long.parseLong(args[1]);\n         }\n         try {\n             println(getQueue().poll(timeout, TimeUnit.SECONDS));", "sourceBeforeFix": "Long.valueOf(args[2])", "sourceAfterFix": "Long.parseLong(args[2])"}
{"fixCommitSHA1": "c30e67b81a0d9ac45c4151d20a960e542ad97b4f", "projectName": "dropwizard.dropwizard", "bugType": "Wrong Function Name", "problem": "         final PrintWriter output = mock(PrintWriter.class);\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getRequestURI()).thenReturn(\"/tasks/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.of(\"runs\")));\n         when(request.getParameterValues(\"runs\")).thenReturn(new String[]{\"1\"});\n         when(response.getWriter()).thenReturn(output);", "fixed": "         final PrintWriter output = mock(PrintWriter.class);\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getServletPath()).thenReturn(\"/tasks/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.of(\"runs\")));\n         when(request.getParameterValues(\"runs\")).thenReturn(new String[]{\"1\"});\n         when(response.getWriter()).thenReturn(output);", "sourceBeforeFix": "request.getRequestURI()", "sourceAfterFix": "request.getServletPath()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15851, value = \"Operation targets host %s but that host is not registered\")\n     String invalidOperationTargetHost(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10851, value = \"Operation targets host %s but that host is not registered\")\n     String invalidOperationTargetHost(String name);\n     /**", "sourceBeforeFix": "id=15835", "sourceAfterFix": "id=10835"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedJpaEndpointBuilder\n             extends\n                 AdvancedJpaEndpointConsumerBuilder, AdvancedJpaEndpointProducerBuilder {\n         default JpaEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedJpaEndpointBuilder\n             extends\n                 AdvancedJpaEndpointConsumerBuilder, AdvancedJpaEndpointProducerBuilder {\n         default JpaEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e05622578fa2cb335f4beee3496758aea43ddd29", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "         pausingLoader.awaitPause();\n         hz3.getLifecycleService().terminate();\n        assertClusterSize(2, nodes[0]);\n         pausingLoader.resume();", "fixed": "         pausingLoader.awaitPause();\n         hz3.getLifecycleService().terminate();\n        assertClusterSizeEventually(2, nodes[0]);\n         pausingLoader.resume();", "sourceBeforeFix": "assertClusterSize(2,nodes[0])", "sourceAfterFix": "assertClusterSizeEventually(2,nodes[0])"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedHdfsEndpointBuilder\n             extends\n                 AdvancedHdfsEndpointConsumerBuilder, AdvancedHdfsEndpointProducerBuilder {\n         default HdfsEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedHdfsEndpointBuilder\n             extends\n                 AdvancedHdfsEndpointConsumerBuilder, AdvancedHdfsEndpointProducerBuilder {\n         default HdfsEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "cb84b2788aeed6aad2bc4b1acb98290e060861e2", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "       Assert.assertEquals(2, result.size());\n       hbck.assigns(Arrays.asList(result.keySet().toArray(new String[0])).stream()\n           .map(regionName -> regionName.split(\"\\\\.\")[1]).collect(Collectors.toList()));\n      ProcedureTestingUtility.waitNoProcedureRunning(master.getMasterProcedureExecutor());\n       result = hbck.getFailedSplitMergeLegacyRegions(Arrays.asList(TableName.valueOf(testTable)));\n       Assert.assertEquals(0, result.size());", "fixed": "       Assert.assertEquals(2, result.size());\n       hbck.assigns(Arrays.asList(result.keySet().toArray(new String[0])).stream()\n           .map(regionName -> regionName.split(\"\\\\.\")[1]).collect(Collectors.toList()));\n      ProcedureTestingUtility.waitAllProcedures(master.getMasterProcedureExecutor());\n       result = hbck.getFailedSplitMergeLegacyRegions(Arrays.asList(TableName.valueOf(testTable)));\n       Assert.assertEquals(0, result.size());", "sourceBeforeFix": "ProcedureTestingUtility.waitNoProcedureRunning(master.getMasterProcedureExecutor())", "sourceAfterFix": "ProcedureTestingUtility.waitAllProcedures(master.getMasterProcedureExecutor())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "a4d8f930af1f17a6c48a9abd94f49e5fd719fc31", "projectName": "netty.netty", "bugType": "Change Identifier Used", "problem": "         if (value instanceof AsciiString) {\n             return ((AsciiString) value).parseDouble();\n         }\n        return Double.valueOf(value.toString());\n     }\n }", "fixed": "         if (value instanceof AsciiString) {\n             return ((AsciiString) value).parseDouble();\n         }\n        return Double.parseDouble(value.toString());\n     }\n }", "sourceBeforeFix": "Float.valueOf(value.toString())", "sourceAfterFix": "Float.parseFloat(value.toString())"}
{"fixCommitSHA1": "aa005279d9a42f61996afeb3385b5a62b3afb52b", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     private Map<String, String> defaultComponentOptions;\n     private Map<String, String> defaultEndpointOptions;\n    public ConnectorModel(String componentName, String className) {\n         this.componentName = componentName;\n         this.className = className;\n         this.lines = Suppliers.memorize(() -> findCamelConnectorJSonSchema());", "fixed": "     private Map<String, String> defaultComponentOptions;\n     private Map<String, String> defaultEndpointOptions;\n    ConnectorModel(String componentName, String className) {\n         this.componentName = componentName;\n         this.className = className;\n         this.lines = Suppliers.memorize(() -> findCamelConnectorJSonSchema());", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "5b13fe70c25812157a1e4432135eb9639e72bc6a", "projectName": "apache.flink", "bugType": "Wrong Function Name", "problem": " \t\tfinal Sink result = new Sink(\"result.json\").withInputs(join);\n \t\texpectedPlan.setSinks(result);\n\t\tassertEquals(expectedPlan, actualPlan);\n \t}\n \t@Test", "fixed": " \t\tfinal Sink result = new Sink(\"result.json\").withInputs(join);\n \t\texpectedPlan.setSinks(result);\n\t\tassertPlanEquals(expectedPlan, actualPlan);\n \t}\n \t@Test", "sourceBeforeFix": "assertEquals(expectedPlan,actualPlan)", "sourceAfterFix": "assertPlanEquals(expectedPlan,actualPlan)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "fixed": "   }\n   \n  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "2921e7bf0d74a65fdcc71d3ce3053037d14e4d44", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "     protected void handleQOffer(String[] args) {\n         long timeout = 0;\n         if (args.length > 2) {\n            timeout = Long.valueOf(args[2]);\n         }\n         try {\n             boolean offered = getQueue().offer(args[1], timeout, TimeUnit.SECONDS);", "fixed": "     protected void handleQOffer(String[] args) {\n         long timeout = 0;\n         if (args.length > 2) {\n            timeout = Long.parseLong(args[2]);\n         }\n         try {\n             boolean offered = getQueue().offer(args[1], timeout, TimeUnit.SECONDS);", "sourceBeforeFix": "Long.valueOf(args[1])", "sourceAfterFix": "Long.parseLong(args[1])"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<Status> getUserTimeline() throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline.json\"\n                 , true));\n     }", "fixed": "      */\n     public ResponseList<Status> getUserTimeline() throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline.json\"\n                 , true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweets/\" + statusId+ \".json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweets/\" + statusId+ \".json\",true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "4cd1f08314076c86ecb4d1e8699cdcbbaba6b567", "projectName": "gephi.gephi", "bugType": "Less Specific If", "problem": "             AttributeType attributeType = AttributeType.STRING;\n            if (type.equalsIgnoreCase(\"boolean\")) {\n                 attributeType = dynamic ? AttributeType.DYNAMIC_BOOLEAN : AttributeType.BOOLEAN;\n            } else if (type.equalsIgnoreCase(\"integer\")) {\n                 attributeType = dynamic ? AttributeType.DYNAMIC_INT : AttributeType.INT;\n             } else if (type.equalsIgnoreCase(\"long\")) {\n                 attributeType = dynamic ? AttributeType.DYNAMIC_LONG : AttributeType.LONG;", "fixed": "             AttributeType attributeType = AttributeType.STRING;\n            if (type.equalsIgnoreCase(\"boolean\") || type.equalsIgnoreCase(\"bool\")) {\n                 attributeType = dynamic ? AttributeType.DYNAMIC_BOOLEAN : AttributeType.BOOLEAN;\n            } else if (type.equalsIgnoreCase(\"integer\") || type.equalsIgnoreCase(\"int\")) {\n                 attributeType = dynamic ? AttributeType.DYNAMIC_INT : AttributeType.INT;\n             } else if (type.equalsIgnoreCase(\"long\")) {\n                 attributeType = dynamic ? AttributeType.DYNAMIC_LONG : AttributeType.LONG;", "sourceBeforeFix": "type.equalsIgnoreCase(\"integer\")", "sourceAfterFix": "type.equalsIgnoreCase(\"integer\") || type.equalsIgnoreCase(\"int\")"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetsOfMe() throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweets_of_me.json\",\n                 null, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetsOfMe() throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweets_of_me.json\",\n                 null, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\",true))"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15855, value = \"Invalid byte stream.\")\n     String invalidByteStream();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10855, value = \"Invalid byte stream.\")\n     String invalidByteStream();\n     /**", "sourceBeforeFix": "id=15871", "sourceAfterFix": "id=10871"}
{"fixCommitSHA1": "a161d8d1924d1fb49a4d229370d998be1493957c", "projectName": "Graylog2.graylog2-server", "bugType": "Wrong Function Name", "problem": "     protected void flushDirtyLogs() {\n         log.debug(\"Checking for dirty logs to flush...\");\n        final Set<Map.Entry<TopicAndPartition, Log>> entries = JavaConversions.asMap(logManager.logsByTopicPartition()).entrySet();\n         for (final Map.Entry<TopicAndPartition, Log> topicAndPartitionLogEntry : entries) {\n             final TopicAndPartition topicAndPartition = topicAndPartitionLogEntry.getKey();\n             final Log kafkaLog = topicAndPartitionLogEntry.getValue();", "fixed": "     protected void flushDirtyLogs() {\n         log.debug(\"Checking for dirty logs to flush...\");\n        final Set<Map.Entry<TopicAndPartition, Log>> entries = JavaConversions.mapAsJavaMap(logManager.logsByTopicPartition()).entrySet();\n         for (final Map.Entry<TopicAndPartition, Log> topicAndPartitionLogEntry : entries) {\n             final TopicAndPartition topicAndPartition = topicAndPartitionLogEntry.getKey();\n             final Log kafkaLog = topicAndPartitionLogEntry.getValue();", "sourceBeforeFix": "JavaConversions.asIterable(logManager.allLogs())", "sourceAfterFix": "JavaConversions.asJavaIterable(logManager.allLogs())"}
{"fixCommitSHA1": "7e040c094576463ec6324d012cbad8768ce3d767", "projectName": "square.okhttp", "bugType": "Change Modifier", "problem": "     final long callId;\n     final long callStartNanos;\n    public PrintingEventListener(long callId, long callStartNanos) {\n       this.callId = callId;\n       this.callStartNanos = callStartNanos;\n     }", "fixed": "     final long callId;\n     final long callStartNanos;\n    PrintingEventListener(long callId, long callStartNanos) {\n       this.callId = callId;\n       this.callStartNanos = callStartNanos;\n     }", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "6413dacaaf602e9de5fe439ee290229563f8e361", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "         final boolean registerRuntimeOnly = context.isRuntimeOnlyRegistrationValid();\n        final SubsystemRegistration subsystem = context.registerSubsystem(SUBSYSTEM_NAME, 1, 0);\n         final ManagementResourceRegistration registration = subsystem.registerSubsystemModel(SecuritySubsystemRootResourceDefinition.INSTANCE);\n         registration.registerOperationHandler(DESCRIBE, GenericSubsystemDescribeHandler.INSTANCE, GenericSubsystemDescribeHandler.INSTANCE, false, OperationEntry.EntryType.PRIVATE);", "fixed": "         final boolean registerRuntimeOnly = context.isRuntimeOnlyRegistrationValid();\n        final SubsystemRegistration subsystem = context.registerSubsystem(SUBSYSTEM_NAME, 1, 1);\n         final ManagementResourceRegistration registration = subsystem.registerSubsystemModel(SecuritySubsystemRootResourceDefinition.INSTANCE);\n         registration.registerOperationHandler(DESCRIBE, GenericSubsystemDescribeHandler.INSTANCE, GenericSubsystemDescribeHandler.INSTANCE, false, OperationEntry.EntryType.PRIVATE);", "sourceBeforeFix": "context.registerSubsystem(SUBSYSTEM_NAME,1,0)", "sourceAfterFix": "context.registerSubsystem(SUBSYSTEM_NAME,1,1)"}
{"fixCommitSHA1": "549145687e2d5f1b5a3e4f536849082cf85e274b", "projectName": "netty.netty", "bugType": "Same Function More Args", "problem": "         if (length == 0) {\n             return ChannelBuffers.EMPTY_BUFFER;\n         }\n        ChannelBuffer buf = ChannelBuffers.buffer(length);\n         buf.writeBytes(this, readerIndex, length);\n         readerIndex += length;\n         return buf;", "fixed": "         if (length == 0) {\n             return ChannelBuffers.EMPTY_BUFFER;\n         }\n        ChannelBuffer buf = ChannelBuffers.buffer(order(), length);\n         buf.writeBytes(this, readerIndex, length);\n         readerIndex += length;\n         return buf;", "sourceBeforeFix": "ChannelBuffers.buffer(length)", "sourceAfterFix": "ChannelBuffers.buffer(order(),length)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  private final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedMina2EndpointBuilder\n             extends\n                 AdvancedMina2EndpointConsumerBuilder, AdvancedMina2EndpointProducerBuilder {\n         default Mina2EndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedMina2EndpointBuilder\n             extends\n                 AdvancedMina2EndpointConsumerBuilder, AdvancedMina2EndpointProducerBuilder {\n         default Mina2EndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "9716d2ae673a576cb345c3bfb24cf71654d8f112", "projectName": "openhab.openhab", "bugType": "Change Identifier Used", "problem": " \t\t\tString payload, String payloadType, boolean retry)\n \t\t\tthrows IOException, InvalidLoginException {\n\t\tlogger.debug(\"Requsting URL {}\", url);\n \t\tString dataString = executeUrl(method, url, header,\n \t\t\t\tpayload == null ? null : IOUtils.toInputStream(payload),\n \t\t\t\tpayloadType, timeout);\n\t\tlogger.debug(\"Received MyQ  JSON: {}\", dataString);\n \t\tif (dataString == null) {\n \t\t\tthrow new IOException(\"Null response from MyQ server\");", "fixed": " \t\t\tString payload, String payloadType, boolean retry)\n \t\t\tthrows IOException, InvalidLoginException {\n\t\tlogger.trace(\"Requsting URL {}\", url);\n \t\tString dataString = executeUrl(method, url, header,\n \t\t\t\tpayload == null ? null : IOUtils.toInputStream(payload),\n \t\t\t\tpayloadType, timeout);\n\t\tlogger.trace(\"Received MyQ  JSON: {}\", dataString);\n \t\tif (dataString == null) {\n \t\t\tthrow new IOException(\"Null response from MyQ server\");", "sourceBeforeFix": "logger.debug(\"Retreiveing door data\")", "sourceAfterFix": "logger.trace(\"Retreiveing door data\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "00644912992eceb3de7d2dc0213a05bf2844c1b2", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "                 } catch (InterruptedException e) {\n                     e.printStackTrace();\n                 }\n                hz1.getLifecycleService().terminate();\n             }\n         };", "fixed": "                 } catch (InterruptedException e) {\n                     e.printStackTrace();\n                 }\n                hz1.getLifecycleService().shutdown();\n             }\n         };", "sourceBeforeFix": "hz1.getLifecycleService().terminate()", "sourceAfterFix": "hz1.getLifecycleService().shutdown()"}
{"fixCommitSHA1": "aeab4504cd1d7f098475d56f689d07c5df1a4309", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         if (writeBatchSize > 1) {\n             failMap = doStoreUsingBatchSize(delayedEntries);\n         } else {\n            failMap = processInternal((List) delayedEntries);\n         }\n         return failMap;\n     }", "fixed": "         if (writeBatchSize > 1) {\n             failMap = doStoreUsingBatchSize(delayedEntries);\n         } else {\n            failMap = processInternal(delayedEntries);\n         }\n         return failMap;\n     }", "sourceBeforeFix": "Collection<DelayedEntry>", "sourceAfterFix": "List<DelayedEntry>"}
{"fixCommitSHA1": "6ec426667bbf19be4fca84eec48e03152e2cfffe", "projectName": "joelittlejohn.jsonschema2pojo", "bugType": "Wrong Function Name", "problem": "         });\n         assertThat(args.didExit(), is(false));\n        assertThat(args.getSource().next().getFile(), is(\"/home/source\"));\n         assertThat(args.getTargetDirectory(), is(theFile(\"/home/target\")));\n         assertThat(args.getTargetPackage(), is(\"mypackage\"));\n         assertThat(args.isGenerateBuilders(), is(true));", "fixed": "         });\n         assertThat(args.didExit(), is(false));\n        assertThat(args.getSource().next().getFile(), endsWith(\"/home/source\"));\n         assertThat(args.getTargetDirectory(), is(theFile(\"/home/target\")));\n         assertThat(args.getTargetPackage(), is(\"mypackage\"));\n         assertThat(args.isGenerateBuilders(), is(true));", "sourceBeforeFix": "is(\"/home/source\")", "sourceAfterFix": "endsWith(\"/home/source\")"}
{"fixCommitSHA1": "bcb6eeec1d978d6d572ebec875d34dc64aeb5121", "projectName": "alibaba.dubbo", "bugType": "Change Identifier Used", "problem": "         String methodKey = method + \".\" + key;\r\n         Number n = getNumbers().get(methodKey);\r\n         if (n != null) {\r\n            return n.intValue();\r\n         }\r\n         String value = getMethodParameter(method, key);\r\n         if (StringUtils.isEmpty(value)) {\r", "fixed": "         String methodKey = method + \".\" + key;\r\n         Number n = getNumbers().get(methodKey);\r\n         if (n != null) {\r\n            return n.floatValue();\r\n         }\r\n         String value = getMethodParameter(method, key);\r\n         if (StringUtils.isEmpty(value)) {\r", "sourceBeforeFix": "n.intValue()", "sourceAfterFix": "n.doubleValue()"}
{"fixCommitSHA1": "c5c423ee77274339c43b42e9c20948f8ad0534e9", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "         assertSizeAndLoadCount(map);\n         hz3.getLifecycleService().terminate();\n        assertClusterSize(2, nodes[0]);\n         map.loadAll(true);\n         assertSizeEventually(MAP_STORE_ENTRY_COUNT, map);", "fixed": "         assertSizeAndLoadCount(map);\n         hz3.getLifecycleService().terminate();\n        assertClusterSizeEventually(2, nodes[0]);\n         map.loadAll(true);\n         assertSizeEventually(MAP_STORE_ENTRY_COUNT, map);", "sourceBeforeFix": "assertClusterSize(2,nodes[0])", "sourceAfterFix": "assertClusterSizeEventually(2,nodes[0])"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface RestEndpointBuilder\n             extends\n                 RestEndpointConsumerBuilder, RestEndpointProducerBuilder {\n         default AdvancedRestEndpointBuilder advanced() {", "fixed": "     \n    public interface RestEndpointBuilder\n             extends\n                 RestEndpointConsumerBuilder, RestEndpointProducerBuilder {\n         default AdvancedRestEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "efd00f07de1672cfed0d7751b942b136ff82cd1e", "projectName": "swagger-api.swagger-core", "bugType": "Change Identifier Used", "problem": "                     apiParam = new ApiImplicitParamWrapper((ApiImplicitParam) item);\n                 } else if (\"javax.ws.rs.DefaultValue\".equals(item.annotationType().getName())) {\n                     try {\n                        rsDefault = (String) item.getClass().getMethod(\"value\").invoke(item);\n                     } catch (Exception ex) {\n                         LOGGER.error(\"Invocation of value method failed\", ex);\n                     }", "fixed": "                     apiParam = new ApiImplicitParamWrapper((ApiImplicitParam) item);\n                 } else if (\"javax.ws.rs.DefaultValue\".equals(item.annotationType().getName())) {\n                     try {\n                        rsDefault = (String) item.annotationType().getMethod(\"value\").invoke(item);\n                     } catch (Exception ex) {\n                         LOGGER.error(\"Invocation of value method failed\", ex);\n                     }", "sourceBeforeFix": "item.getClass()", "sourceAfterFix": "item.annotationType()"}
{"fixCommitSHA1": "c9a1cc9df3dc4fe2eef78ad6090a9b1d95a02557", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "             .setMeasurementUnit(MeasurementUnit.MILLISECONDS)\n             .setAllowExpression(true)\n             .setFlags(AttributeAccess.Flag.RESTART_ALL_SERVICES)\n            .setDefaultValue(new ModelNode().set(15000))\n             .build();\n     static final SimpleAttributeDefinition CONCURRENCY_LEVEL = new SimpleAttributeDefinitionBuilder(ModelKeys.CONCURRENCY_LEVEL, ModelType.INT, true)", "fixed": "             .setMeasurementUnit(MeasurementUnit.MILLISECONDS)\n             .setAllowExpression(true)\n             .setFlags(AttributeAccess.Flag.RESTART_ALL_SERVICES)\n            .setDefaultValue(new ModelNode().set(15000L))\n             .build();\n     static final SimpleAttributeDefinition CONCURRENCY_LEVEL = new SimpleAttributeDefinitionBuilder(ModelKeys.CONCURRENCY_LEVEL, ModelType.INT, true)", "sourceBeforeFix": "new ModelNode().set(15000)", "sourceAfterFix": "new ModelNode().set(15000L)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface DrillEndpointBuilder\n            extends\n                EndpointProducerBuilder {\n         default AdvancedDrillEndpointBuilder advanced() {\n             return (AdvancedDrillEndpointBuilder) this;\n         }", "fixed": "     \n    public interface DrillEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedDrillEndpointBuilder advanced() {\n             return (AdvancedDrillEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e9a969f81e8e7e9f0e7529da9a81a810ad07f766", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "         attr = bindingGroup.get(DEFAULT_INTERFACE);\n         writeAttribute(writer, Attribute.DEFAULT_INTERFACE, attr.asString());\n        if (fromServer && bindingGroup.has(PORT_OFFSET) && bindingGroup.get(PORT_OFFSET).asInt() != 0) {\n             attr = bindingGroup.get(PORT_OFFSET);\n             writeAttribute(writer, Attribute.PORT_OFFSET, attr.asString());\n         }", "fixed": "         attr = bindingGroup.get(DEFAULT_INTERFACE);\n         writeAttribute(writer, Attribute.DEFAULT_INTERFACE, attr.asString());\n        if (fromServer && bindingGroup.hasDefined(PORT_OFFSET) && bindingGroup.get(PORT_OFFSET).asInt() >= 0) {\n             attr = bindingGroup.get(PORT_OFFSET);\n             writeAttribute(writer, Attribute.PORT_OFFSET, attr.asString());\n         }", "sourceBeforeFix": "bindingGroup.has(PORT_OFFSET)", "sourceAfterFix": "bindingGroup.hasDefined(PORT_OFFSET)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AtmosEndpointBuilder\n             extends\n                 AtmosEndpointConsumerBuilder, AtmosEndpointProducerBuilder {\n         default AdvancedAtmosEndpointBuilder advanced() {", "fixed": "     \n    public interface AtmosEndpointBuilder\n             extends\n                 AtmosEndpointConsumerBuilder, AtmosEndpointProducerBuilder {\n         default AdvancedAtmosEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "8c5369562390bee531eb35c00744821b0c4821e3", "projectName": "xetorthio.jedis", "bugType": "Change Identifier Used", "problem": "       final double min, final int offset, final int count) {\n     checkIsInMultiOrPipeline();\n     client.zrevrangeByScoreWithScores(key, max, min, offset, count);\n    return getBinaryTupledSet();\n   }\n   @Override", "fixed": "       final double min, final int offset, final int count) {\n     checkIsInMultiOrPipeline();\n     client.zrevrangeByScoreWithScores(key, max, min, offset, count);\n    return getTupledSet();\n   }\n   @Override", "sourceBeforeFix": "getBinaryTupledSet()", "sourceAfterFix": "getTupledSet()"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_cn_2() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e745\u670806\u65e5\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_cn_2() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e745\u670806\u65e5\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should set uuid on implementation id global property\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)\n\tpublic void setImplementationId(ImplementationId implementationId) throws APIException;\n \t/**\n \t * Gets the list of locales which the administrator has allowed for use on the system. This is", "fixed": " \t * @should set uuid on implementation id global property\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)\n\tpublic void setImplementationId(ImplementationId implementationId);\n \t/**\n \t * Gets the list of locales which the administrator has allowed for use on the system. This is", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "22d5241b5f75631e9cfda82a6912a2555eecb165", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "         }\n         if (!ObjectHelper.isEmpty(configuration.getHost()) && !ObjectHelper.isEmpty(configuration.getPort())) {\n            LOG.info(\"Building gRPC server on \" + configuration.getHost() + \":\" + configuration.getPort());\n             serverBuilder = NettyServerBuilder.forAddress(new InetSocketAddress(configuration.getHost(), configuration.getPort()));\n         } else if (ObjectHelper.isEmpty(configuration.getHost()) && !ObjectHelper.isEmpty(configuration.getPort())) {\n            LOG.info(\"Building gRPC server on <any address>\" + \":\" + configuration.getPort());\n             serverBuilder = NettyServerBuilder.forPort(configuration.getPort());\n         } else {\n             throw new IllegalArgumentException(\"No server start properties (host, port) specified\");", "fixed": "         }\n         if (!ObjectHelper.isEmpty(configuration.getHost()) && !ObjectHelper.isEmpty(configuration.getPort())) {\n            LOG.debug(\"Building gRPC server on \" + configuration.getHost() + \":\" + configuration.getPort());\n             serverBuilder = NettyServerBuilder.forAddress(new InetSocketAddress(configuration.getHost(), configuration.getPort()));\n         } else if (ObjectHelper.isEmpty(configuration.getHost()) && !ObjectHelper.isEmpty(configuration.getPort())) {\n            LOG.debug(\"Building gRPC server on <any address>\" + \":\" + configuration.getPort());\n             serverBuilder = NettyServerBuilder.forPort(configuration.getPort());\n         } else {\n             throw new IllegalArgumentException(\"No server start properties (host, port) specified\");", "sourceBeforeFix": "LOG.info(\"Building gRPC server on \" + configuration.getHost() + \":\"+ configuration.getPort())", "sourceAfterFix": "LOG.debug(\"Building gRPC server on \" + configuration.getHost() + \":\"+ configuration.getPort())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "0d843780fc3dbe96fa513166a18a192d969dc232", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "      * @param moduleClassLoader class loader used to load Checkstyle\n      *          core and custom modules\n      */\n    PackageObjectFactory(Set<String> packageNames,\n             ClassLoader moduleClassLoader) {\n         if (moduleClassLoader == null) {\n             throw new IllegalArgumentException(", "fixed": "      * @param moduleClassLoader class loader used to load Checkstyle\n      *          core and custom modules\n      */\n    public PackageObjectFactory(Set<String> packageNames,\n             ClassLoader moduleClassLoader) {\n         if (moduleClassLoader == null) {\n             throw new IllegalArgumentException(", "sourceBeforeFix": "0", "sourceAfterFix": "1"}
{"fixCommitSHA1": "5f2f072d694275f750d1ee139386cc64a0670f4f", "projectName": "netty.netty", "bugType": "Change Identifier Used", "problem": "                 writerIdleTimeout =\n                     timer.newTimeout(this, writerIdleTimeMillis, TimeUnit.MILLISECONDS);\n                 try {\n                    channelIdle(ctx, IdleState.WRITER_IDLE, lastReadTime);\n                 } catch (Throwable t) {\n                     fireExceptionCaught(ctx, t);\n                 }", "fixed": "                 writerIdleTimeout =\n                     timer.newTimeout(this, writerIdleTimeMillis, TimeUnit.MILLISECONDS);\n                 try {\n                    channelIdle(ctx, IdleState.WRITER_IDLE, lastWriteTime);\n                 } catch (Throwable t) {\n                     fireExceptionCaught(ctx, t);\n                 }", "sourceBeforeFix": "channelIdle(ctx,IdleState.WRITER_IDLE,lastReadTime)", "sourceAfterFix": "channelIdle(ctx,IdleState.WRITER_IDLE,lastWriteTime)"}
{"fixCommitSHA1": "8b0fec4451e8147bbe5bdbf29d235744c9aca01a", "projectName": "gephi.gephi", "bugType": "Change Binary Operator", "problem": "             nodeE.appendChild(positionXE);\n             Element positionYE = createNodePositionY(document, n);\n             nodeE.appendChild(positionYE);\n            if (minZ != 0f && maxZ != 0f) {\n                 Element positionZE = createNodePositionZ(document, n);\n                 nodeE.appendChild(positionZE);\n             }", "fixed": "             nodeE.appendChild(positionXE);\n             Element positionYE = createNodePositionY(document, n);\n             nodeE.appendChild(positionYE);\n            if (minZ != 0f || maxZ != 0f) {\n                 Element positionZE = createNodePositionZ(document, n);\n                 nodeE.appendChild(positionZE);\n             }", "sourceBeforeFix": "minZ != 0f && maxZ != 0f", "sourceAfterFix": "minZ != 0f || maxZ != 0f"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  private final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8b0fec4451e8147bbe5bdbf29d235744c9aca01a", "projectName": "gephi.gephi", "bugType": "Change Binary Operator", "problem": "             positionKey2E.setAttribute(\"attr.type\", \"float\");\n             positionKey2E.setAttribute(\"for\", \"node\");\n             root.appendChild(positionKey2E);\n            if (minZ != 0f && maxZ != 0f) {\n                 Element positionKey3E = document.createElement(\"key\");\n                 positionKey3E.setAttribute(\"id\", \"z\");\n                 positionKey3E.setAttribute(\"attr.name\", \"z\");", "fixed": "             positionKey2E.setAttribute(\"attr.type\", \"float\");\n             positionKey2E.setAttribute(\"for\", \"node\");\n             root.appendChild(positionKey2E);\n            if (minZ != 0f || maxZ != 0f) {\n                 Element positionKey3E = document.createElement(\"key\");\n                 positionKey3E.setAttribute(\"id\", \"z\");\n                 positionKey3E.setAttribute(\"attr.name\", \"z\");", "sourceBeforeFix": "minZ != 0f && maxZ != 0f", "sourceAfterFix": "minZ != 0f || maxZ != 0f"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface DirectEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedDirectEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface DirectEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedDirectEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fd37bb87cc8aa1cf713c2f4ddfd2ec95be096d70", "projectName": "stanfordnlp.CoreNLP", "bugType": "Change Identifier Used", "problem": "    * TODO: pass this in rather than create it here if we wind up using\n    * this in more place.  Right now it's only used in testOnTreebank.\n    */\n  protected Function<List<? extends HasWord>, ArrayList<TaggedWord>> tagger;\n   public EvaluateTreebank(LexicalizedParser parser) {\n     this(parser.getOp(), parser.lex, parser);", "fixed": "    * TODO: pass this in rather than create it here if we wind up using\n    * this in more place.  Right now it's only used in testOnTreebank.\n    */\n  protected Function<List<? extends HasWord>, List<TaggedWord>> tagger;\n   public EvaluateTreebank(LexicalizedParser parser) {\n     this(parser.getOp(), parser.lex, parser);", "sourceBeforeFix": "ArrayList<TaggedWord>", "sourceAfterFix": "List<TaggedWord>"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "64dff91895f9df55fe3a07217a333efa4d37d92a", "projectName": "apache.hbase", "bugType": "Wrong Function Name", "problem": "         Class<?> c = makeClass(className, proceedOnExceptions);\n         if (c != null) {\n           if (!classes.add(c)) {\n            LOG.error(\"Ignoring duplicate class \" + className);\n           }\n         }\n       }", "fixed": "         Class<?> c = makeClass(className, proceedOnExceptions);\n         if (c != null) {\n           if (!classes.add(c)) {\n            LOG.warn(\"Ignoring duplicate class \" + className);\n           }\n         }\n       }", "sourceBeforeFix": "LOG.error(\"Failed to find \" + baseDirectory.getAbsolutePath())", "sourceAfterFix": "LOG.warn(\"Failed to find \" + baseDirectory.getAbsolutePath())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e68b9038b64e1b3ad8068541216baf17da23ddde", "projectName": "apache.flink", "bugType": "More Specific If", "problem": " \t\t}\n\t\tif (secConn != null) {\n \t\t\tCosts secCost = new Costs();", "fixed": " \t\t}\n\t\tif (secConn != null && secConn.size() > 0) {\n \t\t\tCosts secCost = new Costs();", "sourceBeforeFix": "secConn != null", "sourceAfterFix": "secConn != null && secConn.size() > 0"}
{"fixCommitSHA1": "8deaef670285a39f95e3798ca0db66ca7988c4e9", "projectName": "square.okhttp", "bugType": "Change Modifier", "problem": "   public final List<String> calls = new ArrayList<>();\n   @Override\n  public boolean verify(String hostname, SSLSession session) {\n     calls.add(\"verify \" + hostname);\n     return true;\n   }", "fixed": "   public final List<String> calls = new ArrayList<>();\n   @Override\n  public synchronized boolean verify(String hostname, SSLSession session) {\n     calls.add(\"verify \" + hostname);\n     return true;\n   }", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "1adccc7a5bdc515f01ae6bd644097ab85336bd84", "projectName": "hazelcast.hazelcast", "bugType": "Same Function More Args", "problem": "         ((NearCachedClientMapProxy) clientMap).addNearCacheInvalidateListener(handler);\n        HazelcastInstance anotherClient = hazelcastFactory.newHazelcastClient();\n         IMap<Object, Object> anotherClientMap = anotherClient.getMap(clientMap.getName());\n         anotherClientMap.evictAll();", "fixed": "         ((NearCachedClientMapProxy) clientMap).addNearCacheInvalidateListener(handler);\n        HazelcastInstance anotherClient = hazelcastFactory.newHazelcastClient(newClientConfig());\n         IMap<Object, Object> anotherClientMap = anotherClient.getMap(clientMap.getName());\n         anotherClientMap.evictAll();", "sourceBeforeFix": "hazelcastFactory.newHazelcastClient()", "sourceAfterFix": "hazelcastFactory.newHazelcastClient(newClientConfig())"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15839, value = \"Operation failed or was rolled back on all servers.\")\n     String operationFailedOrRolledBack();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10839, value = \"Operation failed or was rolled back on all servers.\")\n     String operationFailedOrRolledBack();\n     /**", "sourceBeforeFix": "id=15840", "sourceAfterFix": "id=10840"}
{"fixCommitSHA1": "5b3668e005b11c89a6aa481325b1e661243b5eab", "projectName": "neo4j.neo4j", "bugType": "Same Function More Args", "problem": "                     {\n                         throw new WebApplicationException( badRequest( e ) );\n                     }\n                    throw new WebApplicationException( serverError( e ) );\n                 }\n                 finally\n                 {", "fixed": "                     {\n                         throw new WebApplicationException( badRequest( e ) );\n                     }\n                    throw new WebApplicationException( e, serverError( e ) );\n                 }\n                 finally\n                 {", "sourceBeforeFix": "new WebApplicationException(serverError(e))", "sourceAfterFix": "new WebApplicationException(e,serverError(e))"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<Status> getHomeTimeline() throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/home_timeline.json\", true));\n     }", "fixed": "      */\n     public ResponseList<Status> getHomeTimeline() throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/home_timeline.json\", true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedJooqEndpointBuilder\n             extends\n                 AdvancedJooqEndpointConsumerBuilder, AdvancedJooqEndpointProducerBuilder {\n         default JooqEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedJooqEndpointBuilder\n             extends\n                 AdvancedJooqEndpointConsumerBuilder, AdvancedJooqEndpointProducerBuilder {\n         default JooqEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "1d5647b92215f0ceabced59275225ad829061663", "projectName": "spring-projects.spring-boot", "bugType": "Change Modifier", "problem": " \tprivate int port = Integer.valueOf(System.getProperty(\"port\"));\n \t@Test\n\tpublic void testHome() throws Exception {\nString url = \"http:\n \t\tResponseEntity<String> entity = this.rest.getForEntity(url, String.class);\n \t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);", "fixed": " \tprivate int port = Integer.valueOf(System.getProperty(\"port\"));\n \t@Test\n\tvoid testHome() throws Exception {\nString url = \"http:\n \t\tResponseEntity<String> entity = this.rest.getForEntity(url, String.class);\n \t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15838, value = \"Unexplained failure\")\n     String unexplainedFailure();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10838, value = \"Unexplained failure\")\n     String unexplainedFailure();\n     /**", "sourceBeforeFix": "id=15858", "sourceAfterFix": "id=10858"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedFacebookEndpointBuilder\n             extends\n                 AdvancedFacebookEndpointConsumerBuilder, AdvancedFacebookEndpointProducerBuilder {\n         default FacebookEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedFacebookEndpointBuilder\n             extends\n                 AdvancedFacebookEndpointConsumerBuilder, AdvancedFacebookEndpointProducerBuilder {\n         default FacebookEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "fixed": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "sourceBeforeFix": "GL20.glGetVertexAttrib(index,pname,params)", "sourceAfterFix": "GL20.glGetVertexAttribiv(index,pname,params)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<Status> getFriendsTimeline() throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\", true));\n     }\n     /**", "fixed": "      */\n     public ResponseList<Status> getFriendsTimeline() throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\", true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))"}
{"fixCommitSHA1": "5d12b156e1150162ba3def263b2da14793304b4e", "projectName": "facebook.presto", "bugType": "Wrong Function Name", "problem": "         );\n        MaterializedResult expected = MaterializedResult.resultBuilder(taskContext.getSession(), concat(probePages.getTypes(), buildPages.getTypes()))\n                 .row(\"20\", 1020L, 2020L, \"20\", 30L, 40L)\n                 .row(\"21\", 1021L, 2021L, \"21\", 31L, 41L)\n                 .row(\"22\", 1022L, 2022L, \"22\", 32L, 42L)", "fixed": "         );\n        MaterializedResult expected = MaterializedResult.resultBuilder(taskContext.getSession(), concat(probePages.getTypesWithoutHash(), buildPages.getTypesWithoutHash()))\n                 .row(\"20\", 1020L, 2020L, \"20\", 30L, 40L)\n                 .row(\"21\", 1021L, 2021L, \"21\", 31L, 41L)\n                 .row(\"22\", 1022L, 2022L, \"22\", 32L, 42L)", "sourceBeforeFix": "buildPages.getTypes()", "sourceAfterFix": "buildPages.getTypesWithoutHash()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform3(location, v);\r\n \t}\r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform3(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r", "fixed": " \t}\r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform3iv(location, v);\r\n \t}\r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform3iv(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r", "sourceBeforeFix": "GL11.glGetInteger(pname,params)", "sourceAfterFix": "GL11.glGetIntegerv(pname,params)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "d2b19965df52e66385a2d7146887a44cea50330a", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "    */\n   void stripCode(Set<String> stripTypes, Set<String> stripNameSuffixes,\n       Set<String> stripTypePrefixes, Set<String> stripNamePrefixes) {\n    logger.info(\"Strip code\");\n     startPass(\"stripCode\");\n     StripCode r = new StripCode(this, stripTypes, stripNameSuffixes,\n         stripTypePrefixes, stripNamePrefixes);", "fixed": "    */\n   void stripCode(Set<String> stripTypes, Set<String> stripNameSuffixes,\n       Set<String> stripTypePrefixes, Set<String> stripNamePrefixes) {\n    logger.fine(\"Strip code\");\n     startPass(\"stripCode\");\n     StripCode r = new StripCode(this, stripTypes, stripNameSuffixes,\n         stripTypePrefixes, stripNamePrefixes);", "sourceBeforeFix": "logger.info(\"Strip code\")", "sourceAfterFix": "logger.fine(\"Strip code\")"}
{"fixCommitSHA1": "e2119d33293008fcc876f5fcd58ede2993eb24d6", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnClass(JdbcTemplate.class)\n \t@ConditionalOnBean(DataSource.class)\n\t@ConditionalOnEnablednHealthIndicator(\"db\")\n \tpublic static class DataSourcesHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<DataSourceHealthIndicator, DataSource>\n \t\t\timplements InitializingBean {", "fixed": " \t@Configuration\n \t@ConditionalOnClass(JdbcTemplate.class)\n \t@ConditionalOnBean(DataSource.class)\n\t@ConditionalOnEnabledHealthIndicator(\"db\")\n \tpublic static class DataSourcesHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<DataSourceHealthIndicator, DataSource>\n \t\t\timplements InitializingBean {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"mail\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"mail\")"}
{"fixCommitSHA1": "c465bf58aa9b067eacab42b336530638f63ad420", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "                 return group.id();\n             }\n            String msg = group.getId() + \" already exists with a different size: \" + group.memberCount();\n             logger.severe(msg);\n             throw new IllegalStateException(msg);\n         }", "fixed": "                 return group.id();\n             }\n            String msg = group.id() + \" already exists with a different size: \" + group.memberCount();\n             logger.severe(msg);\n             throw new IllegalStateException(msg);\n         }", "sourceBeforeFix": "group.getId()", "sourceAfterFix": "group.id()"}
{"fixCommitSHA1": "398f9cf93414253c216585efdfca3b9f73f90d74", "projectName": "jhy.jsoup", "bugType": "More Specific If", "problem": "            if (docData.charAt(0) == 65279)\n                 docData = docData.substring(1);\n             doc = parser.parseInput(docData, baseUri);", "fixed": "            if (docData.length() > 0 && docData.charAt(0) == 65279)\n                 docData = docData.substring(1);\n             doc = parser.parseInput(docData, baseUri);", "sourceBeforeFix": "docData.charAt(0) == 65279", "sourceAfterFix": "docData.length() > 0 && docData.charAt(0) == 65279"}
{"fixCommitSHA1": "b2502762d7f643c89a023de9c31a4ccddeaf5ad1", "projectName": "libgdx.libgdx", "bugType": "Change Binary Operator", "problem": " \t\t\trect(i000, i100, i110, i010);\r\n \t\t\trect(i101, i001, i011, i111);\r\n \t\t\tindex(i000, i001, i010, i011, i110, i111, i100, i101);\r\n\t\t} else if (primitiveType != GL10.GL_POINTS) {\r\n \t\t\tensureRectangleIndices(2);\r\n \t\t\trect(i000, i100, i110, i010);\r\n \t\t\trect(i101, i001, i011, i111);\r", "fixed": " \t\t\trect(i000, i100, i110, i010);\r\n \t\t\trect(i101, i001, i011, i111);\r\n \t\t\tindex(i000, i001, i010, i011, i110, i111, i100, i101);\r\n\t\t} else if (primitiveType == GL10.GL_POINTS) {\r\n \t\t\tensureRectangleIndices(2);\r\n \t\t\trect(i000, i100, i110, i010);\r\n \t\t\trect(i101, i001, i011, i111);\r", "sourceBeforeFix": "primitiveType != GL10.GL_POINTS", "sourceAfterFix": "primitiveType == GL10.GL_POINTS"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "fixed": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2fv(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2fv(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "sourceBeforeFix": "GL20.glUniformMatrix2(location,transpose,toFloatBuffer(value,offset,count << 2))", "sourceAfterFix": "GL20.glUniformMatrix2fv(location,transpose,toFloatBuffer(value,offset,count << 2))"}
{"fixCommitSHA1": "f80cd0840159840d35b445ea247e3fbf356eae88", "projectName": "dropwizard.dropwizard", "bugType": "Change Numeric Literal", "problem": "         assertThat(connector.getHost()).isEqualTo(\"127.0.0.1\");\n         assertThat(connector.getAcceptQueueSize()).isEqualTo(1024);\n         assertThat(connector.getReuseAddress()).isTrue();\n        assertThat(connector.getSoLingerTime()).isEqualTo(30);\n         assertThat(connector.getIdleTimeout()).isEqualTo(30000);\n         assertThat(connector.getName()).isEqualTo(\"test-http-connector\");", "fixed": "         assertThat(connector.getHost()).isEqualTo(\"127.0.0.1\");\n         assertThat(connector.getAcceptQueueSize()).isEqualTo(1024);\n         assertThat(connector.getReuseAddress()).isTrue();\n        assertThat(connector.getSoLingerTime()).isEqualTo(30000);\n         assertThat(connector.getIdleTimeout()).isEqualTo(30000);\n         assertThat(connector.getName()).isEqualTo(\"test-http-connector\");", "sourceBeforeFix": "assertThat(connector.getSoLingerTime()).isEqualTo(30)", "sourceAfterFix": "assertThat(connector.getSoLingerTime()).isEqualTo(30000)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface OptaPlannerEndpointBuilder\n             extends\n                 OptaPlannerEndpointConsumerBuilder, OptaPlannerEndpointProducerBuilder {\n         default AdvancedOptaPlannerEndpointBuilder advanced() {", "fixed": "     \n    public interface OptaPlannerEndpointBuilder\n             extends\n                 OptaPlannerEndpointConsumerBuilder, OptaPlannerEndpointProducerBuilder {\n         default AdvancedOptaPlannerEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_cn_3() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e7405\u67086\u65e5\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_cn_3() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e7405\u67086\u65e5\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "fixed": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2fv(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2fv(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "sourceBeforeFix": "GL20.glUniform1(location,v)", "sourceAfterFix": "GL20.glUniform1fv(location,v)"}
{"fixCommitSHA1": "5c69489d8b91abf358206501a09097125acf1a8a", "projectName": "google.closure-compiler", "bugType": "Same Function More Args", "problem": "     TypeEnv env = pair.env;\n     FunctionType boundFunType = pair.type.getFunTypeIfSingletonObj();\n     if (!pair.type.isSubtypeOf(commonTypes.topFunction())) {\n      warnings.add(JSError.make(boundFunNode, GOOG_BIND_EXPECTS_FUNCTION));\n     }\n     if (boundFunType == null", "fixed": "     TypeEnv env = pair.env;\n     FunctionType boundFunType = pair.type.getFunTypeIfSingletonObj();\n     if (!pair.type.isSubtypeOf(commonTypes.topFunction())) {\n      warnings.add(JSError.make(boundFunNode, GOOG_BIND_EXPECTS_FUNCTION, pair.type.toString()));\n     }\n     if (boundFunType == null", "sourceBeforeFix": "JSError.make(boundFunNode,GOOG_BIND_EXPECTS_FUNCTION)", "sourceAfterFix": "JSError.make(boundFunNode,GOOG_BIND_EXPECTS_FUNCTION,pair.type.toString())"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleAlternativesWithCommonLabel_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(561);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "fixed": " \tpublic void testMultipleAlternativesWithCommonLabel_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(560);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "sourceBeforeFix": "new StringBuilder(561)", "sourceAfterFix": "new StringBuilder(560)"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(741);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {Console.WriteLine($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "fixed": " \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(740);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {Console.WriteLine($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "sourceBeforeFix": "new StringBuilder(246)", "sourceAfterFix": "new StringBuilder(245)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e2119d33293008fcc876f5fcd58ede2993eb24d6", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnBean(Client.class)\n\t@ConditionalOnEnablednHealthIndicator(\"elasticsearch\")\n \t@EnableConfigurationProperties(ElasticsearchHealthIndicatorProperties.class)\n \tpublic static class ElasticsearchHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<ElasticsearchHealthIndicator, Client> {", "fixed": " \t@Configuration\n \t@ConditionalOnBean(Client.class)\n\t@ConditionalOnEnabledHealthIndicator(\"elasticsearch\")\n \t@EnableConfigurationProperties(ElasticsearchHealthIndicatorProperties.class)\n \tpublic static class ElasticsearchHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<ElasticsearchHealthIndicator, Client> {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"mail\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"mail\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  private final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedHazelcastTopicEndpointBuilder\n             extends\n                 AdvancedHazelcastTopicEndpointConsumerBuilder, AdvancedHazelcastTopicEndpointProducerBuilder {\n         default HazelcastTopicEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedHazelcastTopicEndpointBuilder\n             extends\n                 AdvancedHazelcastTopicEndpointConsumerBuilder, AdvancedHazelcastTopicEndpointProducerBuilder {\n         default HazelcastTopicEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should delete global properties from database\n \t */\n \t@Authorized(PrivilegeConstants.PURGE_GLOBAL_PROPERTIES)\n\tpublic void purgeGlobalProperties(List<GlobalProperty> globalProperties) throws APIException;\n \t/**\n \t * Save the given global property to the database. If the global property already exists,", "fixed": " \t * @should delete global properties from database\n \t */\n \t@Authorized(PrivilegeConstants.PURGE_GLOBAL_PROPERTIES)\n\tpublic void purgeGlobalProperties(List<GlobalProperty> globalProperties);\n \t/**\n \t * Save the given global property to the database. If the global property already exists,", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  private final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  private final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8abd59029e7c0bc0973b492fd84a386b26661bc7", "projectName": "alibaba.dubbo", "bugType": "Wrong Function Name", "problem": "             cfg.setThreadModel(ThreadModel.MANUAL);\n             cfg.getSessionConfig().setTcpNoDelay(true);\n             cfg.getSessionConfig().setKeepAlive(true);\n            int timeout = getTimeout();\n             cfg.setConnectTimeout(timeout < 1000 ? 1 : timeout / 1000);\n             connector.getFilterChain().addLast(\"codec\", new ProtocolCodecFilter(new MinaCodecAdapter(getCodec(), getUrl(), this)));", "fixed": "             cfg.setThreadModel(ThreadModel.MANUAL);\n             cfg.getSessionConfig().setTcpNoDelay(true);\n             cfg.getSessionConfig().setKeepAlive(true);\n            int timeout = getConnectTimeout();\n             cfg.setConnectTimeout(timeout < 1000 ? 1 : timeout / 1000);\n             connector.getFilterChain().addLast(\"codec\", new ProtocolCodecFilter(new MinaCodecAdapter(getCodec(), getUrl(), this)));", "sourceBeforeFix": "getTimeout()", "sourceAfterFix": "getConnectTimeout()"}
{"fixCommitSHA1": "2f880c73edb600ab92cdd580ac74f7388b5c6135", "projectName": "Alluxio.alluxio", "bugType": "Change Modifier", "problem": "     }\n   }\n  public void delete(int fileId, boolean recursive) {\n     if (INACTIVE) {\n       return;\n     }", "fixed": "     }\n   }\n  public synchronized void delete(int fileId, boolean recursive) {\n     if (INACTIVE) {\n       return;\n     }", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "43b2fa49ca351c05c453c8cd0eec32ce6277c830", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t\treturn style;\r\n \t}\r\n\tpublic void setText (String text) {\r\n \t\tif (text == null) throw new IllegalArgumentException(\"text cannot be null.\");\r\n \t\tif (text.equals(this.text)) return;\r\n \t\tthis.text = text;\r", "fixed": " \t\treturn style;\r\n \t}\r\n\tpublic void setText (CharSequence text) {\r\n \t\tif (text == null) throw new IllegalArgumentException(\"text cannot be null.\");\r\n \t\tif (text.equals(this.text)) return;\r\n \t\tthis.text = text;\r", "sourceBeforeFix": "public String getText(){   return text; } ", "sourceAfterFix": "public CharSequence getText(){   return text; } "}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "ea98386dfd18da047c877a2320cfdcf15df2ea06", "projectName": "facebook.presto", "bugType": "Change Modifier", "problem": "         constructor.ret();\n     }\n    private void generateGetChannelCountMethod(ClassDefinition classDefinition, List<FieldDefinition> channelFields)\n     {\n         classDefinition.declareMethod(\n                 a(PUBLIC),", "fixed": "         constructor.ret();\n     }\n    private static void generateGetChannelCountMethod(ClassDefinition classDefinition, List<FieldDefinition> channelFields)\n     {\n         classDefinition.declareMethod(\n                 a(PUBLIC),", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "54d3c99469b923b409ce1a52b6d1181984470b11", "projectName": "netty.netty", "bugType": "Change Identifier Used", "problem": "                     t = newT;\n                 }\n                connectPromise.setFailure(t);\n                 closeIfClosed();\n             } finally {", "fixed": "                     t = newT;\n                 }\n                connectPromise.tryFailure(t);\n                 closeIfClosed();\n             } finally {", "sourceBeforeFix": "connectPromise.setFailure(t)", "sourceAfterFix": "connectPromise.tryFailure(t)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 15866, value = \"%s is null\")\n     IllegalArgumentException nullVar(String name);\n     /**", "fixed": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 10866, value = \"%s is null\")\n     IllegalArgumentException nullVar(String name);\n     /**", "sourceBeforeFix": "id=15850", "sourceAfterFix": "id=10850"}
{"fixCommitSHA1": "5b669bd30cef473ddf2c0c0318652a938d8d3428", "projectName": "stanfordnlp.CoreNLP", "bugType": "Change Identifier Used", "problem": "         doAnnotation(annotation, backend, serverURL, message, 0);\n       } catch (Throwable t) {\n        log.warn(\"Could not annotate via server! Trying to annotate locally...\", t);\n         StanfordCoreNLP corenlp = new StanfordCoreNLP(properties);\n         corenlp.annotate(annotation);\n       } finally {", "fixed": "         doAnnotation(annotation, backend, serverURL, message, 0);\n       } catch (Throwable t) {\n        log.err(\"Could not annotate via server! Trying to annotate locally...\", t);\n         StanfordCoreNLP corenlp = new StanfordCoreNLP(properties);\n         corenlp.annotate(annotation);\n       } finally {", "sourceBeforeFix": "log.warn(\"Could not annotate via server! Trying to annotate locally...\",t)", "sourceAfterFix": "log.err(\"Could not annotate via server! Trying to annotate locally...\",t)"}
{"fixCommitSHA1": "994da4e53abe98a0f0004d7bb8c57e08c621570d", "projectName": "Atmosphere.atmosphere", "bugType": "Same Function More Args", "problem": "         });\n         AtmosphereRequest request = new AtmosphereRequest.Builder().destroyable(false).body(\"yoComet\").pathInfo(\"/a\").build();\n        processor.open(w, request);\n         processor.invokeWebSocketProtocol(w, \"yoWebSocket\");\n         processor.notifyListener(w, new WebSocketEventListener.WebSocketEvent(\"Close\", WebSocketEventListener.WebSocketEvent.TYPE.CLOSE, w));", "fixed": "         });\n         AtmosphereRequest request = new AtmosphereRequest.Builder().destroyable(false).body(\"yoComet\").pathInfo(\"/a\").build();\n        processor.open(w, request, AtmosphereResponse.newInstance(framework.getAtmosphereConfig(), request, w));\n         processor.invokeWebSocketProtocol(w, \"yoWebSocket\");\n         processor.notifyListener(w, new WebSocketEventListener.WebSocketEvent(\"Close\", WebSocketEventListener.WebSocketEvent.TYPE.CLOSE, w));", "sourceBeforeFix": "processor.open(w,request)", "sourceAfterFix": "processor.open(w,request,AtmosphereResponse.newInstance(framework.getAtmosphereConfig(),request,w))"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform1fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform1(location, v);\r\n \t}\r\n \tpublic void glUniform1fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform1(location, toFloatBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform1i (int location, int x) {\r", "fixed": " \t}\r\n \tpublic void glUniform1fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform1fv(location, v);\r\n \t}\r\n \tpublic void glUniform1fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform1fv(location, toFloatBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform1i (int location, int x) {\r", "sourceBeforeFix": "GL20.glUniform2(location,toIntBuffer(v,offset,count << 1))", "sourceAfterFix": "GL20.glUniform2iv(location,toIntBuffer(v,offset,count << 1))"}
{"fixCommitSHA1": "419fb4a4dee3cd001631daa06fe6b8c30095b468", "projectName": "apache.hadoop", "bugType": "Wrong Function Name", "problem": "                                                   ) throws IOException {\n     try {\n      ugi.reloginFromKeytab();\n       return ugi.doAs(new PrivilegedExceptionAction<Token<?>>() {\n         @Override\n         public Token<?> run() throws IOException {", "fixed": "                                                   ) throws IOException {\n     try {\n      ugi.checkTGTAndReloginFromKeytab();\n       return ugi.doAs(new PrivilegedExceptionAction<Token<?>>() {\n         @Override\n         public Token<?> run() throws IOException {", "sourceBeforeFix": "UserGroupInformation.getLoginUser().reloginFromKeytab()", "sourceAfterFix": "UserGroupInformation.getLoginUser().checkTGTAndReloginFromKeytab()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface IPFSEndpointBuilder\n            extends\n                EndpointProducerBuilder {\n         default AdvancedIPFSEndpointBuilder advanced() {\n             return (AdvancedIPFSEndpointBuilder) this;\n         }", "fixed": "     \n    public interface IPFSEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedIPFSEndpointBuilder advanced() {\n             return (AdvancedIPFSEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "d251856fc9062d7abcdb5b4e48e7385d8e978b9b", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t@Override\r\n \tpublic String getString (String key) {\r\n\t\tNSString value = (NSString)nsDictionary.get(convertKey(key));\r\n \t\tif (value == null) return \"\";\r\n \t\treturn value.toString();\r\n \t}\r", "fixed": " \t@Override\r\n \tpublic String getString (String key) {\r\n\t\tObject value = nsDictionary.get(convertKey(key));\r\n \t\tif (value == null) return \"\";\r\n \t\treturn value.toString();\r\n \t}\r", "sourceBeforeFix": "pool.dealloc()", "sourceAfterFix": "pool.drain()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  private final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 15872, value = \"Invalid code %d\")\n     IllegalArgumentException invalidCode(int code);\n }", "fixed": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 10872, value = \"Invalid code %d\")\n     IllegalArgumentException invalidCode(int code);\n }", "sourceBeforeFix": "id=15846", "sourceAfterFix": "id=10846"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "38eb6222bddaf49c3c9ae73ddef0cfe4ff5efa48", "projectName": "alibaba.dubbo", "bugType": "Change Numeric Literal", "problem": "     @Test\n     public void test_Decode_Return_Request_Event_Object() throws IOException {\n        byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, (byte) 0xff, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n         Person person = new Person();\n         byte[] request = getRequestBytes(person, header);", "fixed": "     @Test\n     public void test_Decode_Return_Request_Event_Object() throws IOException {\n        byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, (byte) 0xe2, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n         Person person = new Person();\n         byte[] request = getRequestBytes(person, header);", "sourceBeforeFix": "(byte)0xdf", "sourceAfterFix": "(byte)0xe2"}
{"fixCommitSHA1": "852c8b720dd810c699d6303d0470efa246c84d26", "projectName": "wildfly.wildfly", "bugType": "Same Function Swap Args", "problem": "             Assert.fail(\"Test should fail, user shouldn't be allowed to invoke that method\");\n         } catch (WebServiceException e) {\n            Assert.assertEquals(e.getCause().getMessage(), getNotAllowedExceptionMessage(\"helloForRoles\"));\n         }\n     }", "fixed": "             Assert.fail(\"Test should fail, user shouldn't be allowed to invoke that method\");\n         } catch (WebServiceException e) {\n            Assert.assertEquals(getNotAllowedExceptionMessage(\"helloForRoles\"), e.getCause().getMessage());\n         }\n     }", "sourceBeforeFix": "Assert.assertEquals(e.getCause().getMessage(),getNotAllowedExceptionMessage(\"helloForRole\"))", "sourceAfterFix": "Assert.assertEquals(getNotAllowedExceptionMessage(\"helloForRole\"),e.getCause().getMessage())"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedJingEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default JingEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedJingEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default JingEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "a7f54a539a4c8f92f4895934480061a2ccbcd499", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "     }\n     private static void writeAttribute(XMLExtendedStreamWriter writer, ModelNode model, Attribute attribute) throws XMLStreamException {\n        attribute.getDefinition().getAttributeMarshaller().marshallAsAttribute(attribute.getDefinition(), model, true, writer);\n     }\n     private static void writeElement(XMLExtendedStreamWriter writer, ModelNode model, Attribute attribute) throws XMLStreamException {\n        attribute.getDefinition().getAttributeMarshaller().marshallAsElement(attribute.getDefinition(), model, true, writer);\n     }\n }", "fixed": "     }\n     private static void writeAttribute(XMLExtendedStreamWriter writer, ModelNode model, Attribute attribute) throws XMLStreamException {\n        attribute.getDefinition().getMarshaller().marshallAsAttribute(attribute.getDefinition(), model, true, writer);\n     }\n     private static void writeElement(XMLExtendedStreamWriter writer, ModelNode model, Attribute attribute) throws XMLStreamException {\n        attribute.getDefinition().getMarshaller().marshallAsElement(attribute.getDefinition(), model, true, writer);\n     }\n }", "sourceBeforeFix": "attribute.getDefinition().getAttributeMarshaller()", "sourceAfterFix": "attribute.getDefinition().getMarshaller()"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface PdfEndpointBuilder\n            extends\n                EndpointProducerBuilder {\n         default AdvancedPdfEndpointBuilder advanced() {\n             return (AdvancedPdfEndpointBuilder) this;\n         }", "fixed": "     \n    public interface PdfEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedPdfEndpointBuilder advanced() {\n             return (AdvancedPdfEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "538a8ac25f73ada7cf995be3a4d35179a8003fba", "projectName": "Graylog2.graylog2-server", "bugType": "Change Identifier Used", "problem": "     @Constraints.Required\n     public String type;\n     @Constraints.Required\n    public Map<String, String> configuration;\n     @SerializedName(\"creator_user_id\")\n     public String creatorUserId;", "fixed": "     @Constraints.Required\n     public String type;\n     @Constraints.Required\n    public Map<String, Object> configuration;\n     @SerializedName(\"creator_user_id\")\n     public String creatorUserId;", "sourceBeforeFix": "Map<String,String>", "sourceAfterFix": "Map<String,Object>"}
{"fixCommitSHA1": "48e77d65c60772ad50c7459401021bce60ae3629", "projectName": "checkstyle.checkstyle", "bugType": "Same Function Less Args", "problem": "      */\n     private static final Set<String> ALLOWED_TAGS = ImmutableSortedSet.of(\n             \"a\", \"abbr\", \"acronym\", \"address\", \"area\", \"b\", \"bdo\", \"big\",\n            \"blockquote\", \"br\", \"caption\", \"cite\", \"code\", \"colgroup\", \"del\",\n            \"div\", \"dfn\", \"dl\", \"em\", \"fieldset\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\",\n            \"h6\", \"hr\", \"i\", \"img\", \"ins\", \"kbd\", \"li\", \"ol\", \"p\", \"pre\", \"q\",\n            \"samp\", \"small\", \"span\", \"strong\", \"style\", \"sub\", \"sup\", \"table\",\n            \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\", \"tt\", \"ul\");\n     \n     private Scope mScope = Scope.PRIVATE;", "fixed": "      */\n     private static final Set<String> ALLOWED_TAGS = ImmutableSortedSet.of(\n             \"a\", \"abbr\", \"acronym\", \"address\", \"area\", \"b\", \"bdo\", \"big\",\n            \"blockquote\", \"br\", \"caption\", \"cite\", \"code\", \"colgroup\", \"dd\",\n            \"del\", \"div\", \"dfn\", \"dl\", \"dt\", \"em\", \"fieldset\", \"h1\", \"h2\",\n            \"h3\", \"h4\", \"h5\", \"h6\", \"hr\", \"i\", \"img\", \"ins\", \"kbd\", \"li\",\n            \"ol\", \"p\", \"pre\", \"q\", \"samp\", \"small\", \"span\", \"strong\",\n            \"style\", \"sub\", \"sup\", \"table\", \"tbody\", \"td\", \"tfoot\", \"th\",\n            \"thead\", \"tr\", \"tt\", \"ul\");\n     \n     private Scope mScope = Scope.PRIVATE;", "sourceBeforeFix": "ImmutableSortedSet.of(\"p\",\"br\",\"li\",\"dt\",\"dd\",\"td\",\"hr\",\"img\",\"tr\",\"th\",\"td\")", "sourceAfterFix": "ImmutableSortedSet.of(\"br\",\"li\",\"dt\",\"dd\",\"hr\",\"img\",\"p\",\"td\",\"tr\",\"th\")"}
{"fixCommitSHA1": "cb6f6e26c12839e59243f25bfb142ec5e5b71135", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "     private class MyAggregationStrategy implements TimeoutAwareAggregationStrategy {\n         public void timeout(Exchange oldExchange, int index, int total, long timeout) {\n            assertEquals(2000, timeout);\n             assertEquals(3, total);\n             assertEquals(0, index);\n             assertNotNull(oldExchange);", "fixed": "     private class MyAggregationStrategy implements TimeoutAwareAggregationStrategy {\n         public void timeout(Exchange oldExchange, int index, int total, long timeout) {\n            assertEquals(1000, timeout);\n             assertEquals(3, total);\n             assertEquals(0, index);\n             assertNotNull(oldExchange);", "sourceBeforeFix": "from(\"direct:a\").delay(3000)", "sourceAfterFix": "from(\"direct:a\").delay(2000)"}
{"fixCommitSHA1": "dd20434290eb6ae6dff133d70073e35a3998d362", "projectName": "Alluxio.alluxio", "bugType": "Same Function Less Args", "problem": "                       NetworkAddressUtils.getLocalHostName(ClientContext.getConf()));\n         } catch (IOException ioe) {\n           LOG.warn(\"Failed to write to TachyonStore stream, block \" + getCurrentBlockId()\n              + \" will not be in TachyonStorage.\", ioe);\n           mShouldCacheCurrentBlock = false;\n         }\n       } else {", "fixed": "                       NetworkAddressUtils.getLocalHostName(ClientContext.getConf()));\n         } catch (IOException ioe) {\n           LOG.warn(\"Failed to write to TachyonStore stream, block \" + getCurrentBlockId()\n              + \" will not be in TachyonStorage.\");\n           mShouldCacheCurrentBlock = false;\n         }\n       } else {", "sourceBeforeFix": "LOG.warn(\"Promotion of block \" + blockId + \" failed.\",ioe)", "sourceAfterFix": "LOG.warn(\"Promotion of block \" + blockId + \" failed.\")"}
{"fixCommitSHA1": "4c1b34b34b68f102fbb5021a801b6d99de967550", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "       return delegate.getTopScope();\n     }\n    @Override State getIntermediateState() {\n       return delegate.getIntermediateState();\n     }\n    @Override void setIntermediateState(State state) {\n       delegate.setIntermediateState(state);\n     }\n   }", "fixed": "       return delegate.getTopScope();\n     }\n    @Override protected State getIntermediateState() {\n       return delegate.getIntermediateState();\n     }\n    @Override protected void setIntermediateState(State state) {\n       delegate.setIntermediateState(state);\n     }\n   }", "sourceBeforeFix": "0", "sourceAfterFix": "1"}
{"fixCommitSHA1": "014f2410e81ed3ecc6b82fbac49ab345aab6e90f", "projectName": "junit-team.junit", "bugType": "Change Modifier", "problem": "     }\n     @FixMethodOrder(MethodSorters.JVM)\n    private static class DummySortJvm {\n         Object alpha(int i, double d, Thread t) {return null;}\n         void beta(int[][] x) {}\n         int gamma() {return 0;}", "fixed": "     }\n     @FixMethodOrder(MethodSorters.JVM)\n    static class DummySortJvm {\n         Object alpha(int i, double d, Thread t) {return null;}\n         void beta(int[][] x) {}\n         int gamma() {return 0;}", "sourceBeforeFix": "10", "sourceAfterFix": "8"}
{"fixCommitSHA1": "de1fe68b90ff9e29a21095035c7ed02dbbf35f26", "projectName": "apache.hive", "bugType": "Change Numeric Literal", "problem": "         }\n        if (matcher.group(2).equalsIgnoreCase(\"hive.server2.authentication.kerberos.principal\")\n             && !(connParams.getSessionVars().containsKey(JdbcConnectionParams.AUTH_TYPE) && connParams\n                 .getSessionVars().get(JdbcConnectionParams.AUTH_TYPE)\n                 .equalsIgnoreCase(JdbcConnectionParams.AUTH_TOKEN))", "fixed": "         }\n        if (matcher.group(1).equalsIgnoreCase(\"hive.server2.authentication.kerberos.principal\")\n             && !(connParams.getSessionVars().containsKey(JdbcConnectionParams.AUTH_TYPE) && connParams\n                 .getSessionVars().get(JdbcConnectionParams.AUTH_TYPE)\n                 .equalsIgnoreCase(JdbcConnectionParams.AUTH_TOKEN))", "sourceBeforeFix": "matcher.group(2)", "sourceAfterFix": "matcher.group(1)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15861, value = \"Cannot remove deployment %s from the domain as it is still used by server groups %s\")\n     String cannotRemoveDeploymentInUse(String name, List<String> groups);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10861, value = \"Cannot remove deployment %s from the domain as it is still used by server groups %s\")\n     String cannotRemoveDeploymentInUse(String name, List<String> groups);\n     /**", "sourceBeforeFix": "id=15854", "sourceAfterFix": "id=10854"}
{"fixCommitSHA1": "f135cc4188dd173e8fc175bc5d26cf1a970ac39e", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "                                 response.get(FAILURE_DESCRIPTION).set(\"Operation handler failed to complete\");\n                             }\n                             response.get(OUTCOME).set(FAILED);\n                            response.set(ROLLED_BACK).set(true);\n                             return resultAction = ResultAction.ROLLBACK;", "fixed": "                                 response.get(FAILURE_DESCRIPTION).set(\"Operation handler failed to complete\");\n                             }\n                             response.get(OUTCOME).set(FAILED);\n                            response.get(ROLLED_BACK).set(true);\n                             return resultAction = ResultAction.ROLLBACK;", "sourceBeforeFix": "response.set(ROLLED_BACK)", "sourceAfterFix": "response.get(ROLLED_BACK)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "c3cdefcf979188c68a8d9fc923f077f21497b5ab", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "   TachyonException {\n     String format = \"%-10s%-25s%-15s%-15s%-5s\\n\";\n     return String.format(format, FormatUtils.getSizeFromBytes(size),\n        TfsShell.convertMsToDate(mTfs.getInfo(mTfs.open(tUri)).getCreationTimeMs()), \"In Memory\",\n        testUser, tUri.getPath());\n   }\n   @Test", "fixed": "   TachyonException {\n     String format = \"%-10s%-25s%-15s%-15s%-5s\\n\";\n     return String.format(format, FormatUtils.getSizeFromBytes(size),\n        CommandUtils.convertMsToDate(mTfs.getInfo(mTfs.open(tUri)).getCreationTimeMs()),\n        \"In Memory\", testUser, tUri.getPath());\n   }\n   @Test", "sourceBeforeFix": "TfsShell.convertMsToDate(files[0].getCreationTimeMs())", "sourceAfterFix": "CommandUtils.convertMsToDate(files[0].getCreationTimeMs())"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface SchedulerEndpointBuilder\n            extends\n                EndpointConsumerBuilder {\n         default AdvancedSchedulerEndpointBuilder advanced() {\n             return (AdvancedSchedulerEndpointBuilder) this;\n         }", "fixed": "     \n    public interface SchedulerEndpointBuilder extends EndpointConsumerBuilder {\n         default AdvancedSchedulerEndpointBuilder advanced() {\n             return (AdvancedSchedulerEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "projectName": "Alluxio.alluxio", "bugType": "Change Operand ", "problem": "         LOG.info(\"Verifying the reading data...\");\n         for (int pId = mLeft; pId < mRight; pId ++) {\n          TachyonFile file = mTC.getFile(FILE_NAME + mWorkerId);\n           buf = file.readByteBuffer(0);\n           IntBuffer intBuf;\n           intBuf = buf.DATA.order(ByteOrder.nativeOrder()).asIntBuffer();", "fixed": "         LOG.info(\"Verifying the reading data...\");\n         for (int pId = mLeft; pId < mRight; pId ++) {\n          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           IntBuffer intBuf;\n           intBuf = buf.DATA.order(ByteOrder.nativeOrder()).asIntBuffer();", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "a4c66dc2824221d05e1fcfd54e4f1f4e2c125c40", "projectName": "netty.netty", "bugType": "Change Identifier Used", "problem": "                 cancelledKeys = 0;\n                runAllTasks();\n                 selector = this.selector;\n                processSelectedKeys();\n                 selector = this.selector;\n                 if (isShutdown()) {", "fixed": "                 cancelledKeys = 0;\n                processSelectedKeys();\n                 selector = this.selector;\n                runAllTasks();\n                 selector = this.selector;\n                 if (isShutdown()) {", "sourceBeforeFix": "processSelectedKeys()", "sourceAfterFix": "runAllTasks()"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface IgniteMessagingEndpointBuilder\n             extends\n                 IgniteMessagingEndpointConsumerBuilder, IgniteMessagingEndpointProducerBuilder {\n         default AdvancedIgniteMessagingEndpointBuilder advanced() {", "fixed": "     \n    public interface IgniteMessagingEndpointBuilder\n             extends\n                 IgniteMessagingEndpointConsumerBuilder, IgniteMessagingEndpointProducerBuilder {\n         default AdvancedIgniteMessagingEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "13dc20d21b6b2e186cd7825fbf854e00810ba873", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "         DefaultCamelContext defaultCamelContext = (DefaultCamelContext)getCamelContext();\n         defaultCamelContext.stopRoute(id);\n        defaultCamelContext.removeRouteDefinition(id);\n         defaultCamelContext.addRoutes(builder);", "fixed": "         DefaultCamelContext defaultCamelContext = (DefaultCamelContext)getCamelContext();\n         defaultCamelContext.stopRoute(id);\n        defaultCamelContext.removeRoute(id);\n         defaultCamelContext.addRoutes(builder);", "sourceBeforeFix": "defaultCamelContext.removeRouteDefinition(id)", "sourceAfterFix": "defaultCamelContext.removeRoute(id)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15839, value = \"Operation failed or was rolled back on all servers.\")\n     String operationFailedOrRolledBack();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10839, value = \"Operation failed or was rolled back on all servers.\")\n     String operationFailedOrRolledBack();\n     /**", "sourceBeforeFix": "id=15862", "sourceAfterFix": "id=10862"}
{"fixCommitSHA1": "dbcdd1231cf705bdb20e8296d53b52186eb8baed", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "      * Overridden to pass the new rowHeight to the tree.\n      */\n     @Override\n    public final void setRowHeight(int newRowHeight) {\n         super.setRowHeight(newRowHeight);\n         if (tree != null && tree.getRowHeight() != newRowHeight) {\n             tree.setRowHeight(getRowHeight());", "fixed": "      * Overridden to pass the new rowHeight to the tree.\n      */\n     @Override\n    public void setRowHeight(int newRowHeight) {\n         super.setRowHeight(newRowHeight);\n         if (tree != null && tree.getRowHeight() != newRowHeight) {\n             tree.setRowHeight(getRowHeight());", "sourceBeforeFix": "1", "sourceAfterFix": "17"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 15872, value = \"Invalid code %d\")\n     IllegalArgumentException invalidCode(int code);\n }", "fixed": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 10872, value = \"Invalid code %d\")\n     IllegalArgumentException invalidCode(int code);\n }", "sourceBeforeFix": "id=15867", "sourceAfterFix": "id=10867"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface RestEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedRestEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface RestEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedRestEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface YammerEndpointBuilder\n             extends\n                 YammerEndpointConsumerBuilder, YammerEndpointProducerBuilder {\n         default AdvancedYammerEndpointBuilder advanced() {", "fixed": "     \n    public interface YammerEndpointBuilder\n             extends\n                 YammerEndpointConsumerBuilder, YammerEndpointProducerBuilder {\n         default AdvancedYammerEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "4dd18ed5c3188be2cfb14efce62e71ae6f19243a", "projectName": "dropwizard.dropwizard", "bugType": "Change Identifier Used", "problem": "         final PrintWriter output = mock(PrintWriter.class);\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getServletPath()).thenReturn(\"/tasks/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.<String>of()));\n         when(response.getWriter()).thenReturn(output);", "fixed": "         final PrintWriter output = mock(PrintWriter.class);\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getPathInfo()).thenReturn(\"/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.<String>of()));\n         when(response.getWriter()).thenReturn(output);", "sourceBeforeFix": "request.getServletPath()", "sourceAfterFix": "request.getPathInfo()"}
{"fixCommitSHA1": "5e7873ebd45790d9d72eb9d312de4611dc97f796", "projectName": "Activiti.Activiti", "bugType": "Change Numeric Literal", "problem": "     assertEquals(0, historyService.createHistoricActivityInstanceQuery().processDefinitionId(\"nonExistingProcessDefinitionId\").list().size());\n     if (processEngineConfiguration.getHistoryLevel()==ProcessEngineConfigurationImpl.HISTORYLEVEL_FULL) {\n      assertEquals(2, historyService.createHistoricActivityInstanceQuery().processDefinitionId(processInstance.getProcessDefinitionId()).list().size());\n     } else if (processEngineConfiguration.getHistoryLevel()>=ProcessEngineConfigurationImpl.HISTORYLEVEL_ACTIVITY) {\n      assertEquals(1, historyService.createHistoricActivityInstanceQuery().processDefinitionId(processInstance.getProcessDefinitionId()).list().size());\n     } else {\n       assertEquals(0, historyService.createHistoricActivityInstanceQuery().processDefinitionId(processInstance.getProcessDefinitionId()).list().size());\n     }", "fixed": "     assertEquals(0, historyService.createHistoricActivityInstanceQuery().processDefinitionId(\"nonExistingProcessDefinitionId\").list().size());\n     if (processEngineConfiguration.getHistoryLevel()==ProcessEngineConfigurationImpl.HISTORYLEVEL_FULL) {\n      assertEquals(3, historyService.createHistoricActivityInstanceQuery().processDefinitionId(processInstance.getProcessDefinitionId()).list().size());\n     } else if (processEngineConfiguration.getHistoryLevel()>=ProcessEngineConfigurationImpl.HISTORYLEVEL_ACTIVITY) {\n      assertEquals(3, historyService.createHistoricActivityInstanceQuery().processDefinitionId(processInstance.getProcessDefinitionId()).list().size());\n     } else {\n       assertEquals(0, historyService.createHistoricActivityInstanceQuery().processDefinitionId(processInstance.getProcessDefinitionId()).list().size());\n     }", "sourceBeforeFix": "assertEquals(1,historyService.createHistoricActivityInstanceQuery().finished().list().size())", "sourceAfterFix": "assertEquals(3,historyService.createHistoricActivityInstanceQuery().finished().list().size())"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform3fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform3(location, v);\r\n \t}\r\n \tpublic void glUniform3fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform3(location, toFloatBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform3i (int location, int x, int y, int z) {\r", "fixed": " \t}\r\n \tpublic void glUniform3fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform3fv(location, v);\r\n \t}\r\n \tpublic void glUniform3fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform3fv(location, toFloatBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform3i (int location, int x, int y, int z) {\r", "sourceBeforeFix": "GL11.glGetFloat(pname,params)", "sourceAfterFix": "GL11.glGetFloatv(pname,params)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15868, value = \"Deployment %s is already started\")\n     String deploymentAlreadyStarted(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10868, value = \"Deployment %s is already started\")\n     String deploymentAlreadyStarted(String name);\n     /**", "sourceBeforeFix": "id=15854", "sourceAfterFix": "id=10854"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public List<SavedSearch> getSavedSearches() throws TwitterException {\n        return SavedSearch.constructSavedSearches(get(getBaseURL() + \"saved_searches.json\", true));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n      */\n     public List<SavedSearch> getSavedSearches() throws TwitterException {\n        return SavedSearch.createSavedSearchList(get(getBaseURL() + \"saved_searches.json\", true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",null,true))"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15840, value = \"Interrupted waiting for result from server %s\")\n     String interruptedAwaitingResultFromServer(ServerIdentity server);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10840, value = \"Interrupted waiting for result from server %s\")\n     String interruptedAwaitingResultFromServer(ServerIdentity server);\n     /**", "sourceBeforeFix": "id=15844", "sourceAfterFix": "id=10844"}
{"fixCommitSHA1": "92efd947a2a65d8aca99acd968fa4387a0f35f1d", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "  */\n public class RespawnTestCase {\n    private static final int TIMEOUT = 15000;\n     private static final String HOST_CONTROLLER = \"host-controller\";\n     private static final String PROCESS_CONTROLLER = \"process\";\n     private static final String SERVER_ONE = \"respawn-one\";", "fixed": "  */\n public class RespawnTestCase {\n    private static final int TIMEOUT = 30000;\n     private static final String HOST_CONTROLLER = \"host-controller\";\n     private static final String PROCESS_CONTROLLER = \"process\";\n     private static final String SERVER_ONE = \"respawn-one\";", "sourceBeforeFix": "TIMEOUT=15000", "sourceAfterFix": "TIMEOUT=30000"}
{"fixCommitSHA1": "3039d610149aa9a633141bf41abcbd1923dcdff8", "projectName": "apache.hbase", "bugType": "Change Modifier", "problem": "    * @throws IOException if the specified SplitAlgorithm class couldn't be\n    * instantiated\n    */\n  static SplitAlgorithm newSplitAlgoInstance(Configuration conf,\n           String splitClassName) throws IOException {\n     Class<?> splitClass;", "fixed": "    * @throws IOException if the specified SplitAlgorithm class couldn't be\n    * instantiated\n    */\n  public static SplitAlgorithm newSplitAlgoInstance(Configuration conf,\n           String splitClassName) throws IOException {\n     Class<?> splitClass;", "sourceBeforeFix": "8", "sourceAfterFix": "9"}
{"fixCommitSHA1": "f850e77d4ba974eab8ec51636ac58a90ab472d40", "projectName": "apache.flink", "bugType": "Change Unary Operator\t", "problem": " \t\tfinal SingleInstanceProfilingEvent singleInstanceProfilingEvent = (SingleInstanceProfilingEvent) obj;\n\t\tif (this.instanceName.equals(singleInstanceProfilingEvent.getInstanceName())) {\n \t\t\treturn false;\n \t\t}", "fixed": " \t\tfinal SingleInstanceProfilingEvent singleInstanceProfilingEvent = (SingleInstanceProfilingEvent) obj;\n\t\tif (!this.instanceName.equals(singleInstanceProfilingEvent.getInstanceName())) {\n \t\t\treturn false;\n \t\t}", "sourceBeforeFix": "this.instanceName.equals(singleInstanceProfilingEvent.getInstanceName())", "sourceAfterFix": "!this.instanceName.equals(singleInstanceProfilingEvent.getInstanceName())"}
{"fixCommitSHA1": "6ec426667bbf19be4fca84eec48e03152e2cfffe", "projectName": "joelittlejohn.jsonschema2pojo", "bugType": "Change Identifier Used", "problem": "         });\n         assertThat(args.didExit(), is(false));\n        assertThat(args.getSource().next().getFile(), is(\"/home/source\"));\n         assertThat(args.getTargetDirectory(), is(theFile(\"/home/target\")));\n         assertThat(args.getTargetPackage(), is(\"mypackage\"));\n         assertThat(args.isGenerateBuilders(), is(true));", "fixed": "         });\n         assertThat(args.didExit(), is(false));\n        assertThat(args.getSource().next().getFile(), endsWith(\"/home/source\"));\n         assertThat(args.getTargetDirectory(), is(theFile(\"/home/target\")));\n         assertThat(args.getTargetPackage(), is(\"mypackage\"));\n         assertThat(args.isGenerateBuilders(), is(true));", "sourceBeforeFix": "is(\"/home/source\")", "sourceAfterFix": "endsWith(\"/home/source\")"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": "  * \n  * @param T The data type that the comparator works on.\n  */\npublic interface TypeComparator<T>\n {\t\n \t/**\n \t * Computes a hash value for the given record. The hash value should include all fields in the record", "fixed": "  * \n  * @param T The data type that the comparator works on.\n  */\npublic abstract class TypeComparator<T>\n {\t\n \t/**\n \t * Computes a hash value for the given record. The hash value should include all fields in the record", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "0a2b272cb8cb45faafd95a3bbc9e9af813620e09", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "     @Override\n     public void init(NodeEngine nodeEngine, Properties properties) {\n        final LockService lockService = nodeEngine.getService(LockService.SERVICE_NAME);\n         if (lockService != null) {\n             lockService.registerLockStoreConstructor(MapService.SERVICE_NAME,\n                     new ObjectNamespaceLockStoreInfoConstructorFunction());", "fixed": "     @Override\n     public void init(NodeEngine nodeEngine, Properties properties) {\n        final LockService lockService = nodeEngine.getSharedService(LockService.SERVICE_NAME);\n         if (lockService != null) {\n             lockService.registerLockStoreConstructor(MapService.SERVICE_NAME,\n                     new ObjectNamespaceLockStoreInfoConstructorFunction());", "sourceBeforeFix": "nodeEngine.getService(LockService.SERVICE_NAME)", "sourceAfterFix": "nodeEngine.getSharedService(LockService.SERVICE_NAME)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15846, value = \"Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.\")\n     String invalidRolloutPlanLess(String name, String propertyName, int value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10846, value = \"Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.\")\n     String invalidRolloutPlanLess(String name, String propertyName, int value);\n     /**", "sourceBeforeFix": "id=15837", "sourceAfterFix": "id=10837"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getFavorites(String id, int page) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"favorites/\" + id + \".json\", \"page\", String.valueOf(page), true));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getFavorites(String id, int page) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"favorites/\" + id + \".json\", \"page\", String.valueOf(page), true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\",true))"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": "* @see\n* @see NormalizableKey\n \t */\n\tpublic void writeWithKeyNormalization(T record, DataOutputView target) throws IOException;\n \t/**\n \t * Reads the record back while de-normalizing the key fields. This must only be used when", "fixed": "* @see\n* @see NormalizableKey\n \t */\n\tpublic abstract void writeWithKeyNormalization(T record, DataOutputView target) throws IOException;\n \t/**\n \t * Reads the record back while de-normalizing the key fields. This must only be used when", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCachePuts(1);\n            statistics.addPutTimeNano(System.nanoTime() - start);\n         }\n         return result;\n     }", "fixed": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCachePuts(1);\n            statistics.addPutTimeNanos(System.nanoTime() - start);\n         }\n         return result;\n     }", "sourceBeforeFix": "statistics.addGetTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addGetTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15857, value = \"Only 1 piece of content is currently supported (AS7-431)\")\n     String as7431();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10857, value = \"Only 1 piece of content is currently supported (AS7-431)\")\n     String as7431();\n     /**", "sourceBeforeFix": "id=15853", "sourceAfterFix": "id=10853"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedOpenshiftBuildConfigsEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default OpenshiftBuildConfigsEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedOpenshiftBuildConfigsEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default OpenshiftBuildConfigsEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "f217096cd36383639a7f7384e6ce34c78cf5d954", "projectName": "apache.storm", "bugType": "Change Numeric Literal", "problem": "             cluster.shutdown();\n             System.exit(0);\n         } else {\n            StormSubmitter.submitTopology(args[5], config, getTopology());\n         }\n     }", "fixed": "             cluster.shutdown();\n             System.exit(0);\n         } else {\n            StormSubmitter.submitTopology(args[4], config, getTopology());\n         }\n     }", "sourceBeforeFix": "args[5]", "sourceAfterFix": "args[4]"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15851, value = \"Operation targets host %s but that host is not registered\")\n     String invalidOperationTargetHost(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10851, value = \"Operation targets host %s but that host is not registered\")\n     String invalidOperationTargetHost(String name);\n     /**", "sourceBeforeFix": "id=15853", "sourceAfterFix": "id=10853"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedByMe(Paging paging) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedByMe(Paging paging) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "DirectMessage.constructDirectMessages(get(getBaseURL() + \"direct_messages.json\",true))", "sourceAfterFix": "DirectMessage.createDirectMessageList(get(getBaseURL() + \"direct_messages.json\",true))"}
{"fixCommitSHA1": "1daccd54d2ff2ecdb21d8c60268600c37febbb70", "projectName": "Alluxio.alluxio", "bugType": "Change Operand ", "problem": "         LOG.info(\"Verifying the reading data...\");\n         for (int pId = mLeft; pId < mRight; pId ++) {\n          TachyonFile file = mTC.getFile(FILE_NAME + mWorkerId);\n           buf = file.readByteBuffer(0);\n           IntBuffer intBuf;\n          intBuf = buf.DATA.asIntBuffer();\n           int tmp;\n           for (int i = 0; i < BLOCKS_PER_FILE; i ++) {\n             for (int k = 0; k < BLOCK_SIZE_BYTES / 4; k ++) {", "fixed": "         LOG.info(\"Verifying the reading data...\");\n         for (int pId = mLeft; pId < mRight; pId ++) {\n          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           IntBuffer intBuf;\n          intBuf = buf.DATA.order(ByteOrder.nativeOrder()).asIntBuffer();\n           int tmp;\n           for (int i = 0; i < BLOCKS_PER_FILE; i ++) {\n             for (int k = 0; k < BLOCK_SIZE_BYTES / 4; k ++) {", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "fixed": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttribfv(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttribiv(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "sourceBeforeFix": "GL11.glGetInteger(pname,params)", "sourceAfterFix": "GL11.glGetIntegerv(pname,params)"}
{"fixCommitSHA1": "4665dcf9ab41c3c61cd42aad296ebfe518bfa003", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\n \tpublic void glGenTextures (int n, IntBuffer textures) {\n\t\tGL.glGenTexturesEXT(n, textures, Memory.getPosition(textures));\n \t}\n \tpublic int glGetError () {", "fixed": " \t}\n \tpublic void glGenTextures (int n, IntBuffer textures) {\n\t\tGL.glGenTextures(n, textures, Memory.getPosition(textures));\n \t}\n \tpublic int glGetError () {", "sourceBeforeFix": "GL.glGenTexturesEXT(n,textures,Memory.getPosition(textures))", "sourceAfterFix": "GL.glGenTextures(n,textures,Memory.getPosition(textures))"}
{"fixCommitSHA1": "1c5101ae289f2ea00a00536966a9614f4e33d7a4", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t\t\t\t\tbreak;\r\n \t\t\t\t}\r\n \t\t\t}\r\n\t\t\ttouchEventPool.free(touchEvents);\r\n \t\t\ttouchEvents.clear();\r\n \t\t}\r\n \t}\r", "fixed": " \t\t\t\t\tbreak;\r\n \t\t\t\t}\r\n \t\t\t}\r\n\t\t\ttouchEventPool.freeAll(touchEvents);\r\n \t\t\ttouchEvents.clear();\r\n \t\t}\r\n \t}\r", "sourceBeforeFix": "touchEventPool.free(touchEvents)", "sourceAfterFix": "touchEventPool.freeAll(touchEvents)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public Trends getTrends() throws TwitterException {\n        return Trends.constructTrends(get(getSearchBaseURL() + \"trends.json\", false));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n      */\n     public Trends getTrends() throws TwitterException {\n        return Trends.createTrends(get(getSearchBaseURL() + \"trends.json\", false));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/home_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/home_timeline.json\",true))"}
{"fixCommitSHA1": "26307cbc3e1ce776eb2f3ccd40ca216f7edcdbc6", "projectName": "netty.netty", "bugType": "More Specific If", "problem": "         if (getDomain() == null && c.getDomain() != null) {\n             return -1;\n        } else if (c.getDomain() == null) {\n             return 1;\n         }\n         v = getDomain().compareToIgnoreCase(c.getDomain());", "fixed": "         if (getDomain() == null && c.getDomain() != null) {\n             return -1;\n        } else if (c.getDomain() == null && getDomain() != null) {\n             return 1;\n         }\n         v = getDomain().compareToIgnoreCase(c.getDomain());", "sourceBeforeFix": "c.getDomain() == null", "sourceAfterFix": "c.getDomain() == null && getDomain() != null"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedCometdEndpointBuilder\n             extends\n                 AdvancedCometdEndpointConsumerBuilder, AdvancedCometdEndpointProducerBuilder {\n         default CometdEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedCometdEndpointBuilder\n             extends\n                 AdvancedCometdEndpointConsumerBuilder, AdvancedCometdEndpointProducerBuilder {\n         default CometdEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  private final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedMina2EndpointBuilder\n             extends\n                 AdvancedMina2EndpointConsumerBuilder, AdvancedMina2EndpointProducerBuilder {\n         default Mina2EndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedMina2EndpointBuilder\n             extends\n                 AdvancedMina2EndpointConsumerBuilder, AdvancedMina2EndpointProducerBuilder {\n         default Mina2EndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "3f3bab10b9ca68eb31a7ef5a31e49145b51006fd", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t\t\t\t\tserializedValue = new SerializedValue<>(null);\n \t\t\t\t} else {\n \t\t\t\t\tbyte[] serializedData = new byte[length];\n\t\t\t\t\tdis.read(serializedData, 0, length);\n \t\t\t\t\tserializedValue = SerializedValue.fromBytes(serializedData);\n \t\t\t\t}", "fixed": " \t\t\t\t\tserializedValue = new SerializedValue<>(null);\n \t\t\t\t} else {\n \t\t\t\t\tbyte[] serializedData = new byte[length];\n\t\t\t\t\tdis.readFully(serializedData, 0, length);\n \t\t\t\t\tserializedValue = SerializedValue.fromBytes(serializedData);\n \t\t\t\t}", "sourceBeforeFix": "dis.read(serializedData,0,length)", "sourceAfterFix": "dis.readFully(serializedData,0,length)"}
{"fixCommitSHA1": "d9b4d060ac419c29b77793203b6b0fefe9d443d6", "projectName": "dropwizard.dropwizard", "bugType": "Change Modifier", "problem": "      * @param arguments the command-line arguments\n      * @throws Exception if something goes wrong\n      */\n    public final void run(String... arguments) throws Exception {\n         final Bootstrap<T> bootstrap = new Bootstrap<>(this);\n         bootstrap.addCommand(new ServerCommand<>(this));\n         bootstrap.addCommand(new CheckCommand<>(this));", "fixed": "      * @param arguments the command-line arguments\n      * @throws Exception if something goes wrong\n      */\n    public void run(String... arguments) throws Exception {\n         final Bootstrap<T> bootstrap = new Bootstrap<>(this);\n         bootstrap.addCommand(new ServerCommand<>(this));\n         bootstrap.addCommand(new CheckCommand<>(this));", "sourceBeforeFix": "17", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  private final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "b8c3e8445524a78fda3e7823893a4ef8415d7fa3", "projectName": "alibaba.dubbo", "bugType": "Change Identifier Used", "problem": "                     if (name.startsWith(normalizedPrefix)) {\n                         String subName = name.substring(normalizedPrefix.length());\n                         String value = propertyResolver.getProperty(name);\n                        subProperties.put(subName, value);\n                     }\n                 }\n             }", "fixed": "                     if (name.startsWith(normalizedPrefix)) {\n                         String subName = name.substring(normalizedPrefix.length());\n                         String value = propertyResolver.getProperty(name);\n                        subProperties.putIfAbsent(subName, value);\n                     }\n                 }\n             }", "sourceBeforeFix": "subProperties.put(subName,value)", "sourceAfterFix": "subProperties.putIfAbsent(subName,value)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "dd80647fbf218880e5f8d72441d080b6c92778fa", "projectName": "libgdx.libgdx", "bugType": "Same Function More Args", "problem": " \t\t\t\t\t\ttry {\r\n \t\t\t\t\t\t\tbytes = input.read(buffer, index, 4096);\r\n \t\t\t\t\t\t} catch (Exception e) {\r\n\t\t\t\t\t\t\tthrow new GdxRuntimeException(\"Error during Vorbis decoding.\");\r\n \t\t\t\t\t\t}\r\n \t\t\t\t\t} else {\r\n \t\t\t\t\t\tbytes = 0;\r", "fixed": " \t\t\t\t\t\ttry {\r\n \t\t\t\t\t\t\tbytes = input.read(buffer, index, 4096);\r\n \t\t\t\t\t\t} catch (Exception e) {\r\n\t\t\t\t\t\t\tthrow new GdxRuntimeException(\"Error during Vorbis decoding.\", e);\r\n \t\t\t\t\t\t}\r\n \t\t\t\t\t} else {\r\n \t\t\t\t\t\tbytes = 0;\r", "sourceBeforeFix": "new GdxRuntimeException(\"Error during Vorbis decoding.\")", "sourceAfterFix": "new GdxRuntimeException(\"Error during Vorbis decoding.\",e)"}
{"fixCommitSHA1": "3757a700a89638e5747d966bdaa8266b62c974c8", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "     assertEquals(encoded, encoding.encode(bytes));\n   }\n  private void testDecodes(BaseEncoding encoding, String encoded, String decoded) {\n     byte[] bytes;\n     try {\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();", "fixed": "     assertEquals(encoded, encoding.encode(bytes));\n   }\n  private static void testDecodes(BaseEncoding encoding, String encoded, String decoded) {\n     byte[] bytes;\n     try {\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should return null if no implementation id is defined yet\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)\n\tpublic ImplementationId getImplementationId() throws APIException;\n \t/**\n \t * Set the given <code>implementationId</code> as this implementation's unique id", "fixed": " \t * @should return null if no implementation id is defined yet\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)\n\tpublic ImplementationId getImplementationId();\n \t/**\n \t * Set the given <code>implementationId</code> as this implementation's unique id", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedFhirEndpointBuilder\n             extends\n                 AdvancedFhirEndpointConsumerBuilder, AdvancedFhirEndpointProducerBuilder {\n         default FhirEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedFhirEndpointBuilder\n             extends\n                 AdvancedFhirEndpointConsumerBuilder, AdvancedFhirEndpointProducerBuilder {\n         default FhirEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  private final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "0656040933973f55afa8b6e8f53140b6f76b7446", "projectName": "apache.hive", "bugType": "Change Unary Operator\t", "problem": "        */\n       public static _Fields findByThriftId(int fieldId) {\n         switch(fieldId) {\ncase -1:\n             return RQST;\n           default:\n             return null;", "fixed": "        */\n       public static _Fields findByThriftId(int fieldId) {\n         switch(fieldId) {\ncase 1:\n             return RQST;\n           default:\n             return null;", "sourceBeforeFix": "-1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  private final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "1f6258f535f114b88d9be038ffbcf23f7621dba3", "projectName": "apache.hadoop", "bugType": "Wrong Function Name", "problem": "        LOG.warn(\"DataNode is out of memory. Will retry in 30 seconds.\", ie);\n         try {\n           Thread.sleep(30 * 1000);\n         } catch (InterruptedException e) {", "fixed": "        LOG.error(\"DataNode is out of memory. Will retry in 30 seconds.\", ie);\n         try {\n           Thread.sleep(30 * 1000);\n         } catch (InterruptedException e) {", "sourceBeforeFix": "LOG.warn(\"DataNode is out of memory. Will retry in 30 seconds.\",ie)", "sourceAfterFix": "LOG.error(\"DataNode is out of memory. Will retry in 30 seconds.\",ie)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": " };\n   \n  private final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler", "fixed": " };\n   \n  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "95db9b935c3b0f4650e6fd13d807bb44e223ca95", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": " \t\tsimpleDosingInstructions.setDurationUnits(order.getDurationUnits());\r\n \t\tsimpleDosingInstructions.setAsNeeded(order.getAsNeeded());\r\n \t\tsimpleDosingInstructions.setAsNeededCondition(order.getAsNeededCondition());\r\n\t\tsimpleDosingInstructions.setAdministrationInstructions(order.getInstructions());\r\n \t\treturn simpleDosingInstructions;\r\n \t}\r", "fixed": " \t\tsimpleDosingInstructions.setDurationUnits(order.getDurationUnits());\r\n \t\tsimpleDosingInstructions.setAsNeeded(order.getAsNeeded());\r\n \t\tsimpleDosingInstructions.setAsNeededCondition(order.getAsNeededCondition());\r\n\t\tsimpleDosingInstructions.setAdministrationInstructions(order.getDosingInstructions());\r\n \t\treturn simpleDosingInstructions;\r\n \t}\r", "sourceBeforeFix": "order.getInstructions()", "sourceAfterFix": "order.getDosingInstructions()"}
{"fixCommitSHA1": "464e20480e8c188d6dcae7dbce2b9c5098d3584f", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Same Function Swap Args", "problem": "             future.get();\n             future.addListener(() -> counter.decrementAndGet(), Runnable::run);\n         }\n        assertEquals(0, counter.get());\n     }\n     @Test(groups = \"standalone\")", "fixed": "             future.get();\n             future.addListener(() -> counter.decrementAndGet(), Runnable::run);\n         }\n        assertEquals(counter.get(), 0);\n     }\n     @Test(groups = \"standalone\")", "sourceBeforeFix": "assertEquals(0,counter.get())", "sourceAfterFix": "assertEquals(counter.get(),0)"}
{"fixCommitSHA1": "0b2dc86ef74091a830e059c8a1aa6084549b525a", "projectName": "dropwizard.dropwizard", "bugType": "Change Unary Operator\t", "problem": "                 c.getParameterClass().isAssignableFrom(Optional.class)) {\n             return new MultivaluedParameterExtractorQueryParamInjectable(\n                     new OptionalExtractor(parameterName, c.getDefaultValue()),\n                    c.isEncoded()\n             );\n         }\n         return null;", "fixed": "                 c.getParameterClass().isAssignableFrom(Optional.class)) {\n             return new MultivaluedParameterExtractorQueryParamInjectable(\n                     new OptionalExtractor(parameterName, c.getDefaultValue()),\n                    !c.isEncoded()\n             );\n         }\n         return null;", "sourceBeforeFix": "c.isEncoded()", "sourceAfterFix": "!c.isEncoded()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "           \"functions are set.\");\n   \n  private final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "           \"functions are set.\");\n   \n  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform2iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toIntBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform3f (int location, float x, float y, float z) {\r", "fixed": " \t}\r\n \tpublic void glUniform2iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform2iv(location, v);\r\n \t}\r\n \tpublic void glUniform2iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform2iv(location, toIntBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform3f (int location, float x, float y, float z) {\r", "sourceBeforeFix": "GL20.glUniform3(location,v)", "sourceAfterFix": "GL20.glUniform3fv(location,v)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  private final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface FacebookEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedFacebookEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface FacebookEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedFacebookEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "ea626ef8c390dc81c71b3a16521cf591611bc5df", "projectName": "netty.netty", "bugType": "Change Identifier Used", "problem": "                             return newResult(BUFFER_OVERFLOW, status, bytesConsumed, bytesProduced);\n                         } else {\n                            throw shutdownWithError(\"SSL_write\");\n                         }\n                     }\n                 }", "fixed": "                             return newResult(BUFFER_OVERFLOW, status, bytesConsumed, bytesProduced);\n                         } else {\n                            throw shutdownWithError(\"SSL_write\", sslError);\n                         }\n                     }\n                 }", "sourceBeforeFix": "SSL.getErrorString(err)", "sourceAfterFix": "SSL.getErrorString(stackError)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public List<Trends> getDailyTrends(Date date, boolean excludeHashTags) throws TwitterException {\n        return Trends.constructTrendsList(get(getSearchBaseURL()\n                 + \"trends/daily.json?date=\" + toDateStr(date)\n                 + (excludeHashTags ? \"&exclude=hashtags\" : \"\"), false));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public List<Trends> getDailyTrends(Date date, boolean excludeHashTags) throws TwitterException {\n        return Trends.createTrendsList(get(getSearchBaseURL()\n                 + \"trends/daily.json?date=\" + toDateStr(date)\n                 + (excludeHashTags ? \"&exclude=hashtags\" : \"\"), false));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",null,true))"}
{"fixCommitSHA1": "e1d89ddbf6028369fd3117ff648fc6f16a1786fe", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "                     LOG.warn(\"OpenTracing: could not find managed span for exchange=\" + exchange);\n                 }\n             } catch (Throwable t) {\n                LOG.error(\"OpenTracing: Failed to capture tracing data\", t);\n             }\n         }\n     }", "fixed": "                     LOG.warn(\"OpenTracing: could not find managed span for exchange=\" + exchange);\n                 }\n             } catch (Throwable t) {\n                LOG.warn(\"OpenTracing: Failed to capture tracing data\", t);\n             }\n         }\n     }", "sourceBeforeFix": "LOG.error(\"OpenTracing: Failed to capture tracing data\",t)", "sourceAfterFix": "LOG.warn(\"OpenTracing: Failed to capture tracing data\",t)"}
{"fixCommitSHA1": "a13c4373a5e57d322b143516b493e84f14909fec", "projectName": "stanfordnlp.CoreNLP", "bugType": "Change Numeric Literal", "problem": "     List<CoreLabel> tokens = document1.get(CoreAnnotations.TokensAnnotation.class);\n    assertEquals(12, tokens.size());\n   }\n   @Test", "fixed": "     List<CoreLabel> tokens = document1.get(CoreAnnotations.TokensAnnotation.class);\n    assertEquals(9, tokens.size());\n   }\n   @Test", "sourceBeforeFix": "assertEquals(12,tokens.size())", "sourceAfterFix": "assertEquals(9,tokens.size())"}
{"fixCommitSHA1": "bd23d1bddd1154c7bc2a249b76d4ffdd5e4cfd92", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "             if (queueLength.isDefined() && queueLength.asInt() == 0) {\n                 if (coreThreads.isDefined() && coreThreads.asInt() <= 0) {\n                    throw EeLogger.ROOT_LOGGER.invalidCoreThreadsSize(coreThreads.asString());\n                 }\n             }", "fixed": "             if (queueLength.isDefined() && queueLength.asInt() == 0) {\n                 if (coreThreads.isDefined() && coreThreads.asInt() <= 0) {\n                    throw EeLogger.ROOT_LOGGER.invalidCoreThreadsSize(queueLength.asString());\n                 }\n             }", "sourceBeforeFix": "coreThreads.asString()", "sourceAfterFix": "queueLength.asString()"}
{"fixCommitSHA1": "103f204ada7363675fcd4a1e2e0a41030a15a9ae", "projectName": "junit-team.junit", "bugType": "Same Function Swap Args", "problem": "         @Test\n         public void duration() throws InterruptedException {\n             Thread.sleep(300L);\n            assertEquals(fStopwatch.runtime(MILLISECONDS), 300d, 100d);\n             Thread.sleep(500L);\n            assertEquals(fStopwatch.runtime(MILLISECONDS), 800d, 250d);\n         }\n     }", "fixed": "         @Test\n         public void duration() throws InterruptedException {\n             Thread.sleep(300L);\n            assertEquals(300d, fStopwatch.runtime(MILLISECONDS), 100d);\n             Thread.sleep(500L);\n            assertEquals(800d, fStopwatch.runtime(MILLISECONDS), 250d);\n         }\n     }", "sourceBeforeFix": "assertEquals(fStopwatch.runtime(MILLISECONDS),300d,100d)", "sourceAfterFix": "assertEquals(300d,fStopwatch.runtime(MILLISECONDS),100d)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "01d18f2c3db799d144cc8e3308da3fb2ade19417", "projectName": "google.guava", "bugType": "Change Identifier Used", "problem": "     private final Condition delegate;\n     @SuppressWarnings(\"unused\")\n    private final Object strongReference;\n    WeakSafeCondition(Condition delegate, Object strongReference) {\n       this.delegate = delegate;\n       this.strongReference = strongReference;\n     }", "fixed": "     private final Condition delegate;\n     @SuppressWarnings(\"unused\")\n    private final WeakSafeReadWriteLock strongReference;\n    WeakSafeCondition(Condition delegate, WeakSafeReadWriteLock strongReference) {\n       this.delegate = delegate;\n       this.strongReference = strongReference;\n     }", "sourceBeforeFix": "@SuppressWarnings(\"unused\") private final Object strongReference; ", "sourceAfterFix": "@SuppressWarnings(\"unused\") private final WeakSafeReadWriteLock strongReference; "}
{"fixCommitSHA1": "f56843207bb30d1e5e5f78484e7a3afc161585c6", "projectName": "openmrs.openmrs-core", "bugType": "Wrong Function Name", "problem": " \t\t\tlog.debug(\"Current thread: \" + Thread.currentThread());\r\n \t\t\tlog.debug(\"Creating the encounter object\");\r\n \t\t}\r\n\t\tContext.getEncounterService().createEncounter(encounter);\r", "fixed": " \t\t\tlog.debug(\"Current thread: \" + Thread.currentThread());\r\n \t\t\tlog.debug(\"Creating the encounter object\");\r\n \t\t}\r\n\t\tContext.getEncounterService().saveEncounter(encounter);\r", "sourceBeforeFix": "Context.getEncounterService().createEncounter(encounter)", "sourceAfterFix": "Context.getEncounterService().saveEncounter(encounter)"}
{"fixCommitSHA1": "8616612734924c0a8a9781aed94669c866b12981", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "         try {\n             final String echo = localEcho.echo(message);\n             Assert.fail(\"Remote invocation on a local view \" + LocalEcho.class.getName() + \" was expected to fail\");\n        } catch (EJBException nsee) {\n             logger.trace(\"Got the expected exception on invoking on a local view, remotely\", nsee);\n         }", "fixed": "         try {\n             final String echo = localEcho.echo(message);\n             Assert.fail(\"Remote invocation on a local view \" + LocalEcho.class.getName() + \" was expected to fail\");\n        } catch (IllegalStateException nsee) {\n             logger.trace(\"Got the expected exception on invoking on a local view, remotely\", nsee);\n         }", "sourceBeforeFix": "EJBException nsee", "sourceAfterFix": "IllegalStateException nsee"}
{"fixCommitSHA1": "9716d2ae673a576cb345c3bfb24cf71654d8f112", "projectName": "openhab.openhab", "bugType": "Change Identifier Used", "problem": " \t\t\tString payload, String payloadType, boolean retry)\n \t\t\tthrows IOException, InvalidLoginException {\n\t\tlogger.debug(\"Requsting URL {}\", url);\n \t\tString dataString = executeUrl(method, url, header,\n \t\t\t\tpayload == null ? null : IOUtils.toInputStream(payload),\n \t\t\t\tpayloadType, timeout);\n\t\tlogger.debug(\"Received MyQ  JSON: {}\", dataString);\n \t\tif (dataString == null) {\n \t\t\tthrow new IOException(\"Null response from MyQ server\");", "fixed": " \t\t\tString payload, String payloadType, boolean retry)\n \t\t\tthrows IOException, InvalidLoginException {\n\t\tlogger.trace(\"Requsting URL {}\", url);\n \t\tString dataString = executeUrl(method, url, header,\n \t\t\t\tpayload == null ? null : IOUtils.toInputStream(payload),\n \t\t\t\tpayloadType, timeout);\n\t\tlogger.trace(\"Received MyQ  JSON: {}\", dataString);\n \t\tif (dataString == null) {\n \t\t\tthrow new IOException(\"Null response from MyQ server\");", "sourceBeforeFix": "logger.debug(\"Requsting URL {}\",url)", "sourceAfterFix": "logger.trace(\"Requsting URL {}\",url)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   }\n   \n  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface SparkEndpointBuilder\n            extends\n                EndpointConsumerBuilder {\n         default AdvancedSparkEndpointBuilder advanced() {\n             return (AdvancedSparkEndpointBuilder) this;\n         }", "fixed": "     \n    public interface SparkEndpointBuilder extends EndpointConsumerBuilder {\n         default AdvancedSparkEndpointBuilder advanced() {\n             return (AdvancedSparkEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "6bae902bd35ed4f57e7a5d612b7ad9b72f4559bc", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "     JSTypeRegistry registry = new JSTypeRegistry(testErrorReporter);\n     Node node1 = Node.newString(Token.NAME, \"f\");\n     Node node2 = Node.newString(Token.NAME, \"f\");\n    assertTrue(node1.checkTreeTypeAwareEqualsSilent(node2));\n   }\n   public void testCheckTreeTypeAwareEqualsDifferent() {", "fixed": "     JSTypeRegistry registry = new JSTypeRegistry(testErrorReporter);\n     Node node1 = Node.newString(Token.NAME, \"f\");\n     Node node2 = Node.newString(Token.NAME, \"f\");\n    assertTrue(node1.isEquivalentToTyped(node2));\n   }\n   public void testCheckTreeTypeAwareEqualsDifferent() {", "sourceBeforeFix": "node1.checkTreeEqualsSilent(node1)", "sourceAfterFix": "node1.isEquivalentTo(node1)"}
{"fixCommitSHA1": "423fca2f16ef73c1e4bce7cf11660a510be1456e", "projectName": "apache.hbase", "bugType": "Wrong Function Name", "problem": "         parent.getRegionName(), rowContent, COL_SPLITB);\n     if (!hasReferencesA && !hasReferencesB) {\n      LOG.info(\"Deleting region \" + parent.getRegionName() +\n         \" because daughter splits no longer hold references\");\n       HRegion.deleteRegion(master.fs, master.rootdir, parent);", "fixed": "         parent.getRegionName(), rowContent, COL_SPLITB);\n     if (!hasReferencesA && !hasReferencesB) {\n      LOG.info(\"Deleting region \" + parent.getRegionNameAsString() +\n         \" because daughter splits no longer hold references\");\n       HRegion.deleteRegion(master.fs, master.rootdir, parent);", "sourceBeforeFix": "info.getRegionName()", "sourceAfterFix": "info.getRegionNameAsString()"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedEKSEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default EKSEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedEKSEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default EKSEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedKinesisFirehoseEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default KinesisFirehoseEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedKinesisFirehoseEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default KinesisFirehoseEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  private final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "1728599958637971fd8406246d4d99c8df3fea6d", "projectName": "facebook.presto", "bugType": "Change Identifier Used", "problem": "         ImmutableList.Builder<String> expressions = ImmutableList.builder();\n         Set<List<String>> valueLists = Sets.cartesianProduct(unrolledValues);\n         for (List<String> valueList : valueLists) {\n            expressions.add(String.format(expressionPattern, valueList.toArray(new String[valueList.size()])));\n         }\n         return expressions.build();\n     }", "fixed": "         ImmutableList.Builder<String> expressions = ImmutableList.builder();\n         Set<List<String>> valueLists = Sets.cartesianProduct(unrolledValues);\n         for (List<String> valueList : valueLists) {\n            expressions.add(String.format(expressionPattern, valueList.toArray(new Object[valueList.size()])));\n         }\n         return expressions.build();\n     }", "sourceBeforeFix": "String[]", "sourceAfterFix": "Object[]"}
{"fixCommitSHA1": "c97c55c5fe3bd7a54b9f36cf68f17b5cf19ecaf3", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Change Identifier Used", "problem": "     }\n     private Channel lookupInCache(Url url) {\n        Channel channel = connectionsPool.get(url);\n         if (channel != null) {\n             /**\n              * The Channel will eventually be closed by Netty and will becomes invalid.", "fixed": "     }\n     private Channel lookupInCache(Url url) {\n        Channel channel = connectionsPool.get(url.getBaseUrl());\n         if (channel != null) {\n             /**\n              * The Channel will eventually be closed by Netty and will becomes invalid.", "sourceBeforeFix": "ConcurrentHashMap<Url,Channel>", "sourceAfterFix": "ConcurrentHashMap<String,Channel>"}
{"fixCommitSHA1": "544b0ed025cdea88bec8a5dd4ff5462242442eca", "projectName": "Atmosphere.atmosphere", "bugType": "Change Numeric Literal", "problem": "                         logger.error(\"Invalid WebSocket Specification {} with {} \",\n                                 r.getHeader(\"Connection\"), r.getIntHeader(\"Sec-WebSocket-Version\"));\n                         HttpServletResponse.class.cast(response).addHeader(X_ATMOSPHERE_ERROR, \"Websocket protocol not supported\");\n                        HttpServletResponse.class.cast(response).sendError(202, \"Websocket protocol not supported\");\n                         return;\n                     }\n                 }", "fixed": "                         logger.error(\"Invalid WebSocket Specification {} with {} \",\n                                 r.getHeader(\"Connection\"), r.getIntHeader(\"Sec-WebSocket-Version\"));\n                         HttpServletResponse.class.cast(response).addHeader(X_ATMOSPHERE_ERROR, \"Websocket protocol not supported\");\n                        HttpServletResponse.class.cast(response).sendError(501, \"Websocket protocol not supported\");\n                         return;\n                     }\n                 }", "sourceBeforeFix": "HttpServletResponse.class.cast(response).sendError(202,\"Websocket protocol not supported\")", "sourceAfterFix": "HttpServletResponse.class.cast(response).sendError(501,\"Websocket protocol not supported\")"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface TwilioEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedTwilioEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface TwilioEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedTwilioEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedKubernetesHPAEndpointBuilder\n             extends\n                 AdvancedKubernetesHPAEndpointConsumerBuilder, AdvancedKubernetesHPAEndpointProducerBuilder {\n         default KubernetesHPAEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedKubernetesHPAEndpointBuilder\n             extends\n                 AdvancedKubernetesHPAEndpointConsumerBuilder, AdvancedKubernetesHPAEndpointProducerBuilder {\n         default KubernetesHPAEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e7d4575d49668d1877d9ecdccb9f5d422b2b1a49", "projectName": "naver.pinpoint", "bugType": "Change Numeric Literal", "problem": "             return -1;\r\n         }\r\n         int newId = nextId();\r\n        if (newId > max) {\r\n             throw new IndexOutOfBoundsException(\"size=\" + index.length + \" id=\" + id);\r\n         }\r", "fixed": "             return -1;\r\n         }\r\n         int newId = nextId();\r\n        if (newId >= max) {\n             throw new IndexOutOfBoundsException(\"size=\" + index.length + \" id=\" + id);\r\n         }\r", "sourceBeforeFix": "DEFAULT_MAX=1024", "sourceAfterFix": "DEFAULT_MAX=4096"}
{"fixCommitSHA1": "5f973272def613827e164c06e948ca8e7ae2bc34", "projectName": "facebook.presto", "bugType": "Change Identifier Used", "problem": " public class CassandraRecordSetProvider\n         implements ConnectorRecordSetProvider\n {\n    private static final Logger log = Logger.get(ConnectorRecordSetProvider.class);\n     private final String connectorId;\n     private final CassandraSession cassandraSession;", "fixed": " public class CassandraRecordSetProvider\n         implements ConnectorRecordSetProvider\n {\n    private static final Logger log = Logger.get(CassandraRecordSetProvider.class);\n     private final String connectorId;\n     private final CassandraSession cassandraSession;", "sourceBeforeFix": "ConnectorRecordSetProvider.class", "sourceAfterFix": "CassandraRecordSetProvider.class"}
{"fixCommitSHA1": "b7e092e821021b7c0dbd91eacfe369181bfa28b8", "projectName": "spring-projects.spring-boot", "bugType": "Wrong Function Name", "problem": " \t\tRSocketWebSocketNettyRouteProvider rSocketWebsocketRouteProvider(RSocketProperties properties,\n \t\t\t\tRSocketMessageHandler messageHandler) {\n \t\t\treturn new RSocketWebSocketNettyRouteProvider(properties.getServer().getMappingPath(),\n\t\t\t\t\tmessageHandler.serverAcceptor());\n \t\t}\n \t}", "fixed": " \t\tRSocketWebSocketNettyRouteProvider rSocketWebsocketRouteProvider(RSocketProperties properties,\n \t\t\t\tRSocketMessageHandler messageHandler) {\n \t\t\treturn new RSocketWebSocketNettyRouteProvider(properties.getServer().getMappingPath(),\n\t\t\t\t\tmessageHandler.serverResponder());\n \t\t}\n \t}", "sourceBeforeFix": "messageHandler.serverAcceptor()", "sourceAfterFix": "messageHandler.serverResponder()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  private final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "780a95c41d5d9ddafe1a237628183020746825a8", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t * before growing the backing table. */\n \tpublic ObjectSet (int initialCapacity, float loadFactor) {\n \t\tif (initialCapacity < 0) throw new IllegalArgumentException(\"initialCapacity must be >= 0: \" + initialCapacity);\n\t\tif (capacity > 1 << 30) throw new IllegalArgumentException(\"initialCapacity is too large: \" + initialCapacity);\n \t\tcapacity = MathUtils.nextPowerOfTwo(initialCapacity);\n \t\tif (loadFactor <= 0) throw new IllegalArgumentException(\"loadFactor must be > 0: \" + loadFactor);", "fixed": " \t * before growing the backing table. */\n \tpublic ObjectSet (int initialCapacity, float loadFactor) {\n \t\tif (initialCapacity < 0) throw new IllegalArgumentException(\"initialCapacity must be >= 0: \" + initialCapacity);\n\t\tif (initialCapacity > 1 << 30) throw new IllegalArgumentException(\"initialCapacity is too large: \" + initialCapacity);\n \t\tcapacity = MathUtils.nextPowerOfTwo(initialCapacity);\n \t\tif (loadFactor <= 0) throw new IllegalArgumentException(\"loadFactor must be > 0: \" + loadFactor);", "sourceBeforeFix": "capacity > 1 << 30", "sourceAfterFix": "initialCapacity > 1 << 30"}
{"fixCommitSHA1": "38eb6222bddaf49c3c9ae73ddef0cfe4ff5efa48", "projectName": "alibaba.dubbo", "bugType": "Change Numeric Literal", "problem": "     @Test\n     public void test_Decode_Error_Length() throws IOException {\n        byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, 0x20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n         Person person = new Person();\n         byte[] request = getRequestBytes(person, header);", "fixed": "     @Test\n     public void test_Decode_Error_Length() throws IOException {\n        byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, 0x02, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n         Person person = new Person();\n         byte[] request = getRequestBytes(person, header);", "sourceBeforeFix": "(byte)0xff", "sourceAfterFix": "(byte)0xe2"}
{"fixCommitSHA1": "823bfb98fed1336c299c463e74bb8c9b63a956c7", "projectName": "naver.pinpoint", "bugType": "Change Numeric Literal", "problem": "     public static StreamPingPacket readBuffer(short packetType, ChannelBuffer buffer) {\r\n         assert packetType == PACKET_TYPE;\r\n        if (buffer.readableBytes() < 4) {\r\n             buffer.resetReaderIndex();\r\n             return null;\r\n         }\r", "fixed": "     public static StreamPingPacket readBuffer(short packetType, ChannelBuffer buffer) {\r\n         assert packetType == PACKET_TYPE;\r\n        if (buffer.readableBytes() < 8) {\r\n             buffer.resetReaderIndex();\r\n             return null;\r\n         }\r", "sourceBeforeFix": "buffer.readableBytes() < 4", "sourceAfterFix": "buffer.readableBytes() < 8"}
{"fixCommitSHA1": "6bd7b27abf18fdfb301a7c95e1d2e7888f884c48", "projectName": "apache.hadoop", "bugType": "Change Identifier Used", "problem": "    * balancing purpose at a datanode\n    */\n   public static final int MAX_NUM_CONCURRENT_MOVES = 5;\n  public static final int MAX_NO_PENDING_BLOCK_INTERATIONS = 5;\n   private static final String USAGE = \"Usage: java \"\n       + Balancer.class.getSimpleName()", "fixed": "    * balancing purpose at a datanode\n    */\n   public static final int MAX_NUM_CONCURRENT_MOVES = 5;\n  private static final int MAX_NO_PENDING_BLOCK_ITERATIONS = 5;\n   private static final String USAGE = \"Usage: java \"\n       + Balancer.class.getSimpleName()", "sourceBeforeFix": "noPendingBlockIteration >= MAX_NO_PENDING_BLOCK_INTERATIONS", "sourceAfterFix": "noPendingBlockIteration >= MAX_NO_PENDING_BLOCK_ITERATIONS"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform1iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform1(location, v);\r\n \t}\r\n \t@Override\r\n \tpublic void glUniform1iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform1(location, toIntBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform2f (int location, float x, float y) {\r", "fixed": " \t}\r\n \tpublic void glUniform1iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform1iv(location, v);\r\n \t}\r\n \t@Override\r\n \tpublic void glUniform1iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform1iv(location, toIntBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform2f (int location, float x, float y) {\r", "sourceBeforeFix": "GL20.glUniform1(location,v)", "sourceAfterFix": "GL20.glUniform1iv(location,v)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "dbc0ca8d1cb03f2da2c8fc0062e5d4b681fef11a", "projectName": "hazelcast.hazelcast", "bugType": "Same Function Less Args", "problem": "         final DummyOperation operation = new DummyOperation(Operation.GENERIC_PARTITION_ID);\n         Data data = serializationService.toData(operation);\n        final Packet packet = new Packet(data, operation.getPartitionId(), serializationService.getPortableContext());\n         packet.setHeader(Packet.HEADER_OP);\n         executor.execute(packet);", "fixed": "         final DummyOperation operation = new DummyOperation(Operation.GENERIC_PARTITION_ID);\n         Data data = serializationService.toData(operation);\n        final Packet packet = new Packet(data, operation.getPartitionId());\n         packet.setHeader(Packet.HEADER_OP);\n         executor.execute(packet);", "sourceBeforeFix": "new Packet(data,operation.getPartitionId(),serializationService.getPortableContext())", "sourceAfterFix": "new Packet(data,operation.getPartitionId())"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "fixed": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniformfv(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniformiv(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "sourceBeforeFix": "GL20.glUniform4(location,v)", "sourceAfterFix": "GL20.glUniform4fv(location,v)"}
{"fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "       if (mWrite) {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n           OutputStream os = mHdfsFs.create(new Path(filePath));\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n             mBuf.putInt(0, k + mWorkerId);", "fixed": "       if (mWrite) {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           OutputStream os = mHdfsFs.create(new Path(filePath));\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n             mBuf.putInt(0, k + mWorkerId);", "sourceBeforeFix": "k < THREADS", "sourceAfterFix": "k < FILES"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "509beae1e2d9a01e952f9eaf0c4a88037076fc63", "projectName": "apache.hbase", "bugType": "Missing Throws Exception", "problem": "    * @param server server to open a region\n    * @param region region to open\n    */\n  public void sendRegionOpen(HServerInfo server, HRegionInfo region) {\n     HRegionInterface hri = getServerConnection(server);\n     if (hri == null) {\n       LOG.warn(\"Attempting to send OPEN RPC to server \" + server.getServerName()", "fixed": "    * @param server server to open a region\n    * @param region region to open\n    */\n  public void sendRegionOpen(HServerInfo server, HRegionInfo region) \n  throws IOException {\n     HRegionInterface hri = getServerConnection(server);\n     if (hri == null) {\n       LOG.warn(\"Attempting to send OPEN RPC to server \" + server.getServerName()", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "a6dc024ed1176e0a4c523b1a64e8e907e1394d7b", "projectName": "openhab.openhab", "bugType": "Change Identifier Used", "problem": "     \t\t}\n     \t\trecvQueue.add(recvMessage);\n\t\t\tlogger.trace(\"Receive queue ADD: Length={}\", recvQueue.size());\n         }\n \t\t/**", "fixed": "     \t\t}\n     \t\trecvQueue.add(recvMessage);\n\t\t\tlogger.debug(\"Receive queue ADD: Length={}\", recvQueue.size());\n         }\n \t\t/**", "sourceBeforeFix": "logger.trace(\"Receive queue ADD: Length={}\",recvQueue.size())", "sourceAfterFix": "logger.debug(\"Receive queue ADD: Length={}\",recvQueue.size())"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface HipchatEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedHipchatEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface HipchatEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedHipchatEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "4665dcf9ab41c3c61cd42aad296ebfe518bfa003", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\n \tpublic void glPolygonOffset (float factor, float units) {\n\t\tGL.glPolygonOffsetEXT(factor, units);\n \t}\n \tpublic void glReadPixels (int x, int y, int width, int height, int format, int type, Buffer pixels) {", "fixed": " \t}\n \tpublic void glPolygonOffset (float factor, float units) {\n\t\tGL.glPolygonOffset(factor, units);\n \t}\n \tpublic void glReadPixels (int x, int y, int width, int height, int format, int type, Buffer pixels) {", "sourceBeforeFix": "GL.glDeleteTexturesEXT(n,textures,Memory.getPosition(textures))", "sourceAfterFix": "GL.glDeleteTextures(n,textures,Memory.getPosition(textures))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "bbfc2b18a1b5ed3968212db115410ee515dca460", "projectName": "jersey.jersey", "bugType": "Change Numeric Literal", "problem": "         @Path(\"timeout\")\n         public String getTimeout() {\n             try {\n                Thread.sleep(2000);\n             } catch (InterruptedException e) {\n                 e.printStackTrace();\n             }", "fixed": "         @Path(\"timeout\")\n         public String getTimeout() {\n             try {\n                Thread.sleep(5000);\n             } catch (InterruptedException e) {\n                 e.printStackTrace();\n             }", "sourceBeforeFix": "clientConfig.property(ClientProperties.READ_TIMEOUT,1000)", "sourceAfterFix": "clientConfig.property(ClientProperties.READ_TIMEOUT,2000)"}
{"fixCommitSHA1": "e70960913c07d921dea470857f9bcdb67f38959f", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "      * Set the format for the influence of this check.\n      * @param format a <code>String</code> value\n      */\n    public void setInfluenceFormat(String format) {\n         influenceFormat = format;\n     }", "fixed": "      * Set the format for the influence of this check.\n      * @param format a <code>String</code> value\n      */\n    public final void setInfluenceFormat(String format) {\n         influenceFormat = format;\n     }", "sourceBeforeFix": "1", "sourceAfterFix": "17"}
{"fixCommitSHA1": "038ea1803bae1cf3be279b36395b4de4e0ff39b5", "projectName": "openhab.openhab", "bugType": "Wrong Function Name", "problem": " \t * Validates Username and Password then saved sercurityToken to a variable\n \t */\n \tprivate void login() throws InvalidLoginException, IOException {\n\t\tlogger.debug(\"attempting to login\");\n \t\tString url = String\n \t\t\t\t.format(\"%s/api/user/validate?appId=%s&SecurityToken=null&username=%s&password=%s\",\n \t\t\t\t\t\tWEBSITE, enc(appId), enc(userName), enc(password));", "fixed": " \t * Validates Username and Password then saved sercurityToken to a variable\n \t */\n \tprivate void login() throws InvalidLoginException, IOException {\n\t\tlogger.trace(\"attempting to login\");\n \t\tString url = String\n \t\t\t\t.format(\"%s/api/user/validate?appId=%s&SecurityToken=null&username=%s&password=%s\",\n \t\t\t\t\t\tWEBSITE, enc(appId), enc(userName), enc(password));", "sourceBeforeFix": "logger.debug(\"attempting to login\")", "sourceAfterFix": "logger.trace(\"attempting to login\")"}
{"fixCommitSHA1": "6031e948694c50252def3e1df5a65323567e03ed", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "         super.compare(modelA, modelB);\n        assertRemoveSubsystemResources(servicesA);\n     }", "fixed": "         super.compare(modelA, modelB);\n        assertRemoveSubsystemResources(servicesB);\n     }", "sourceBeforeFix": "assertRemoveSubsystemResources(servicesA)", "sourceAfterFix": "assertRemoveSubsystemResources(servicesB)"}
{"fixCommitSHA1": "038ea1803bae1cf3be279b36395b4de4e0ff39b5", "projectName": "openhab.openhab", "bugType": "Wrong Function Name", "problem": " \t * Validates Username and Password then saved sercurityToken to a variable\n \t */\n \tprivate void login() throws InvalidLoginException, IOException {\n\t\tlogger.debug(\"attempting to login\");\n \t\tString url = String\n \t\t\t\t.format(\"%s/api/user/validate?appId=%s&SecurityToken=null&username=%s&password=%s\",\n \t\t\t\t\t\tWEBSITE, enc(appId), enc(userName), enc(password));", "fixed": " \t * Validates Username and Password then saved sercurityToken to a variable\n \t */\n \tprivate void login() throws InvalidLoginException, IOException {\n\t\tlogger.trace(\"attempting to login\");\n \t\tString url = String\n \t\t\t\t.format(\"%s/api/user/validate?appId=%s&SecurityToken=null&username=%s&password=%s\",\n \t\t\t\t\t\tWEBSITE, enc(appId), enc(userName), enc(password));", "sourceBeforeFix": "logger.debug(\"Received MyQ  JSON: {}\",dataString)", "sourceAfterFix": "logger.trace(\"Received MyQ  JSON: {}\",dataString)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  private final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedMyBatisEndpointBuilder\n             extends\n                 AdvancedMyBatisEndpointConsumerBuilder, AdvancedMyBatisEndpointProducerBuilder {\n         default MyBatisEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedMyBatisEndpointBuilder\n             extends\n                 AdvancedMyBatisEndpointConsumerBuilder, AdvancedMyBatisEndpointProducerBuilder {\n         default MyBatisEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "f9374238b2870cad6c090589ec18933983e1c902", "projectName": "checkstyle.checkstyle", "bugType": "Same Function More Args", "problem": "      * whether the supression turns checkstyle reporting on or off.\n      * @author Rick Giles\n      */\n    public class Tag\n         implements Comparable<Tag>\n     {\n         ", "fixed": "      * whether the supression turns checkstyle reporting on or off.\n      * @author Rick Giles\n      */\n    public static class Tag\n         implements Comparable<Tag>\n     {\n         ", "sourceBeforeFix": "new Tag(line,column,text,on)", "sourceAfterFix": "new Tag(line,column,text,on,this)"}
{"fixCommitSHA1": "1aaffaf8df78d17e71243df6d94d687893802bb5", "projectName": "Alluxio.alluxio", "bugType": "Wrong Function Name", "problem": "     result.setJob(fromThrift(lineageInfo.getJob()));\n     result.setCreationTimeMs(lineageInfo.getCreationTimeMs());\n     result.setParents(lineageInfo.getParents());\n    result.setChildren(lineageInfo.getParents());\n     return result;\n   }", "fixed": "     result.setJob(fromThrift(lineageInfo.getJob()));\n     result.setCreationTimeMs(lineageInfo.getCreationTimeMs());\n     result.setParents(lineageInfo.getParents());\n    result.setChildren(lineageInfo.getChildren());\n     return result;\n   }", "sourceBeforeFix": "lineageInfo.getParents()", "sourceAfterFix": "lineageInfo.getChildren()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15847, value = \"Interrupted waiting for result from host %s\")\n     String interruptedAwaitingResultFromHost(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10847, value = \"Interrupted waiting for result from host %s\")\n     String interruptedAwaitingResultFromHost(String name);\n     /**", "sourceBeforeFix": "id=15856", "sourceAfterFix": "id=10856"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface CassandraEndpointBuilder\n             extends\n                 CassandraEndpointConsumerBuilder, CassandraEndpointProducerBuilder {\n         default AdvancedCassandraEndpointBuilder advanced() {", "fixed": "     \n    public interface CassandraEndpointBuilder\n             extends\n                 CassandraEndpointConsumerBuilder, CassandraEndpointProducerBuilder {\n         default AdvancedCassandraEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "0d3c78b6f28fb3cad00c12605209c524702adb0a", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "         final R record = createRecord(value, expirationTime);\n         updateHasExpiringEntry(record);\n         if (isEventsEnabled()) {\n            publishEvent(createCacheCreatedEvent(keyData, toEventData(value), expirationTime, origin, completionId));\n         }\n         return record;\n     }", "fixed": "         final R record = createRecord(value, expirationTime);\n         updateHasExpiringEntry(record);\n         if (isEventsEnabled()) {\n            publishEvent(createCacheCreatedEvent(toEventData(keyData), toEventData(value),\n                                                 expirationTime, origin, completionId));\n         }\n         return record;\n     }", "sourceBeforeFix": "toHeapData(key)", "sourceAfterFix": "toEventData(key)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15862, value = \"Invalid '%s' value: %d, the maximum index is %d\")\n     String invalidValue(String name, int value, int maxIndex);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10862, value = \"Invalid '%s' value: %d, the maximum index is %d\")\n     String invalidValue(String name, int value, int maxIndex);\n     /**", "sourceBeforeFix": "id=15866", "sourceAfterFix": "id=10866"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n  private final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "f8946ee2b640061a35a4c16bf2588242f27053d7", "projectName": "openhab.openhab", "bugType": "Change Binary Operator", "problem": " \t\t\tif (bulb < 6) {\r\n \t\t\t\tif (command.compareTo(oldPercent) > 0) {\r\n \t\t\t\t\tint repeatCount = (command.intValue() - oldPercent.intValue()) / 10;\r\n\t\t\t\t\tfor(int i = 0; i <= repeatCount; i++) {\r\n \t\t\t\t\t\tThread.sleep(100);\r\n \t\t\t\t\t\tif(BindingType.brightness.equals(type) && bulb < 6) {\r\n \t\t\t\t\t\t\tsendIncrease(bulb, rgbwSteps, bridgeId);\r", "fixed": " \t\t\tif (bulb < 6) {\r\n \t\t\t\tif (command.compareTo(oldPercent) > 0) {\r\n \t\t\t\t\tint repeatCount = (command.intValue() - oldPercent.intValue()) / 10;\r\n\t\t\t\t\tfor(int i = 0; i < repeatCount; i++) {\r\n \t\t\t\t\t\tThread.sleep(100);\r\n \t\t\t\t\t\tif(BindingType.brightness.equals(type) && bulb < 6) {\r\n \t\t\t\t\t\t\tsendIncrease(bulb, rgbwSteps, bridgeId);\r", "sourceBeforeFix": "i <= repeatCount", "sourceAfterFix": "i < repeatCount"}
{"fixCommitSHA1": "a63faf44e1b103a49d25a15c720fc5940ae9fc07", "projectName": "square.retrofit", "bugType": "Change Identifier Used", "problem": "     assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResponseClass = new TypeToken<Maybe<Response<String>>>() {}.getType();\n    assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResponseClass = new TypeToken<Flowable<Response<String>>>() {}.getType();\n    assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oResponseWildcard = new TypeToken<Observable<Response<? extends String>>>() {}.getType();", "fixed": "     assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResponseClass = new TypeToken<Maybe<Response<String>>>() {}.getType();\n    assertThat(factory.get(mResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResponseClass = new TypeToken<Flowable<Response<String>>>() {}.getType();\n    assertThat(factory.get(fResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oResponseWildcard = new TypeToken<Observable<Response<? extends String>>>() {}.getType();", "sourceBeforeFix": "factory.get(sResponseClass,NO_ANNOTATIONS,retrofit)", "sourceAfterFix": "factory.get(mResponseClass,NO_ANNOTATIONS,retrofit)"}
{"fixCommitSHA1": "d338970323b86d631a5c1a786768133a0aabff46", "projectName": "openhab.openhab", "bugType": "Change Identifier Used", "problem": " \t\t\t\t\treq.getParameter(\"items\"), req.getParameter(\"groups\"));\n \t\t\tImageIO.write(chart, provider.getChartType().toString(), res.getOutputStream());\n \t\t} catch (ItemNotFoundException e) {\n\t\t\tlogger.debug(\"Item not found error while generating chart.\");\n \t\t} catch (IllegalArgumentException e) {\n\t\t\tlogger.debug(\"Illegal argument in chart: {}\", e);\n \t\t}\n \t}", "fixed": " \t\t\t\t\treq.getParameter(\"items\"), req.getParameter(\"groups\"));\n \t\t\tImageIO.write(chart, provider.getChartType().toString(), res.getOutputStream());\n \t\t} catch (ItemNotFoundException e) {\n\t\t\tlogger.error(\"Item not found error while generating chart.\", e);\n \t\t} catch (IllegalArgumentException e) {\n\t\t\tlogger.error(\"Illegal argument in chart\", e);\n \t\t}\n \t}", "sourceBeforeFix": "logger.debug(\"Item not found error while generating chart.\")", "sourceAfterFix": "logger.error(\"Item not found error while generating chart.\",e)"}
{"fixCommitSHA1": "e39e0e634a2252a352ad799bc2957c72e8d2d2e9", "projectName": "apache.hbase", "bugType": "Same Function More Args", "problem": "     List<StoreFile> sorted_files = new ArrayList<>(files);\n     Collections.sort(sorted_files, StoreFile.Comparators.SEQ_ID);\n     for (int i = 0; i < sorted_files.size(); i++) {\n      StoreFileReader r = sorted_files.get(i).createReader();\n       r.setReplicaStoreFile(isPrimaryReplica);\n       StoreFileScanner scanner = r.getStoreFileScanner(cacheBlocks, usePread, isCompaction, readPt,\n         i, matcher != null ? !matcher.hasNullColumnInQuery() : false);", "fixed": "     List<StoreFile> sorted_files = new ArrayList<>(files);\n     Collections.sort(sorted_files, StoreFile.Comparators.SEQ_ID);\n     for (int i = 0; i < sorted_files.size(); i++) {\n      StoreFileReader r = sorted_files.get(i).createReader(canUseDrop);\n       r.setReplicaStoreFile(isPrimaryReplica);\n       StoreFileScanner scanner = r.getStoreFileScanner(cacheBlocks, usePread, isCompaction, readPt,\n         i, matcher != null ? !matcher.hasNullColumnInQuery() : false);", "sourceBeforeFix": "sorted_files.get(i).createReader()", "sourceAfterFix": "sorted_files.get(i).createReader(canUseDrop)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      * @param hostName the name of the host.\n      */\n     @LogMessage(level = Level.WARN)\n    @Message(id = 15805, value = \"Caught exception awaiting final response from host %s\")\n     void caughtExceptionAwaitingFinalResponse(@Cause Throwable cause, String hostName);\n     /**", "fixed": "      * @param hostName the name of the host.\n      */\n     @LogMessage(level = Level.WARN)\n    @Message(id = 10805, value = \"Caught exception awaiting final response from host %s\")\n     void caughtExceptionAwaitingFinalResponse(@Cause Throwable cause, String hostName);\n     /**", "sourceBeforeFix": "id=15806", "sourceAfterFix": "id=10806"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface TwitterTimelineEndpointBuilder\n             extends\n                 TwitterTimelineEndpointConsumerBuilder, TwitterTimelineEndpointProducerBuilder {\n         default AdvancedTwitterTimelineEndpointBuilder advanced() {", "fixed": "     \n    public interface TwitterTimelineEndpointBuilder\n             extends\n                 TwitterTimelineEndpointConsumerBuilder, TwitterTimelineEndpointProducerBuilder {\n         default AdvancedTwitterTimelineEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleActionsPredicatesOptions_1() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(247);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {System.out.println($ctx.toStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");", "fixed": " \tpublic void testMultipleActionsPredicatesOptions_1() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {System.out.println($ctx.toStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");", "sourceBeforeFix": "new StringBuilder(247)", "sourceAfterFix": "new StringBuilder(246)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n  private final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface Jt400EndpointBuilder\n             extends\n                 Jt400EndpointConsumerBuilder, Jt400EndpointProducerBuilder {\n         default AdvancedJt400EndpointBuilder advanced() {", "fixed": "     \n    public interface Jt400EndpointBuilder\n             extends\n                 Jt400EndpointConsumerBuilder, Jt400EndpointProducerBuilder {\n         default AdvancedJt400EndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15851, value = \"Operation targets host %s but that host is not registered\")\n     String invalidOperationTargetHost(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10851, value = \"Operation targets host %s but that host is not registered\")\n     String invalidOperationTargetHost(String name);\n     /**", "sourceBeforeFix": "id=15866", "sourceAfterFix": "id=10866"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "224017cdc8ee4076845c59f9ebe8de5aca6fd2ae", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "                 boolean skip = false;\n                 for (ParamValueMetaData prop : md.getContextParams()) {\n                     if (prop.getParamName().equals(ENABLE_PROPERTY)) {\n                        boolean explicitEnable = Boolean.parseBoolean(prop.getParamName());\n                         if(explicitEnable) {\n                             found = true;\n                         } else {", "fixed": "                 boolean skip = false;\n                 for (ParamValueMetaData prop : md.getContextParams()) {\n                     if (prop.getParamName().equals(ENABLE_PROPERTY)) {\n                        boolean explicitEnable = Boolean.parseBoolean(prop.getParamValue());\n                         if(explicitEnable) {\n                             found = true;\n                         } else {", "sourceBeforeFix": "prop.getParamName()", "sourceAfterFix": "prop.getParamValue()"}
{"fixCommitSHA1": "5d12b156e1150162ba3def263b2da14793304b4e", "projectName": "facebook.presto", "bugType": "Wrong Function Name", "problem": "         );\n        MaterializedResult expected = MaterializedResult.resultBuilder(taskContext.getSession(), concat(probePages.getTypes(), buildPages.getTypes()))\n                 .row(\"20\", 1020L, 2020L, \"20\", 30L, 40L)\n                 .row(\"21\", 1021L, 2021L, \"21\", 31L, 41L)\n                 .row(\"22\", 1022L, 2022L, \"22\", 32L, 42L)", "fixed": "         );\n        MaterializedResult expected = MaterializedResult.resultBuilder(taskContext.getSession(), concat(probePages.getTypesWithoutHash(), buildPages.getTypesWithoutHash()))\n                 .row(\"20\", 1020L, 2020L, \"20\", 30L, 40L)\n                 .row(\"21\", 1021L, 2021L, \"21\", 31L, 41L)\n                 .row(\"22\", 1022L, 2022L, \"22\", 32L, 42L)", "sourceBeforeFix": "buildPages.getTypes()", "sourceAfterFix": "buildPages.getTypesWithoutHash()"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedByMe(Paging paging) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedByMe(Paging paging) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_to_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_to_me.json\",null,true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e04cbbf23e9273cca31b1cc12142e34fae753542", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "          * Increments to counter by one for the supplied scope.\n          * @param scope the scope counter to increment.\n          */\n        void increment(Scope scope) {\n             total++;\n             if (inInterface) {\n                 counts.put(Scope.PUBLIC, 1 + value(Scope.PUBLIC));", "fixed": "          * Increments to counter by one for the supplied scope.\n          * @param scope the scope counter to increment.\n          */\n        private void increment(Scope scope) {\n             total++;\n             if (inInterface) {\n                 counts.put(Scope.PUBLIC, 1 + value(Scope.PUBLIC));", "sourceBeforeFix": "0", "sourceAfterFix": "2"}
{"fixCommitSHA1": "435805f612bf78ee0d2fd93cd90fa6c6740e17c2", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         String uri = getScpUri() + \"?username=admin&password=admin&knownHostsFile=\" + getKnownHostsFile();\n         template.sendBodyAndHeader(uri, \"Hello World\", Exchange.FILE_NAME, \"hello.txt\");\n        Thread.sleep(200);\n         File file = new File(getScpPath() + \"/hello.txt\");\n         assertFileExists(file.getAbsolutePath());", "fixed": "         String uri = getScpUri() + \"?username=admin&password=admin&knownHostsFile=\" + getKnownHostsFile();\n         template.sendBodyAndHeader(uri, \"Hello World\", Exchange.FILE_NAME, \"hello.txt\");\n        Thread.sleep(500);\n         File file = new File(getScpPath() + \"/hello.txt\");\n         assertFileExists(file.getAbsolutePath());", "sourceBeforeFix": "Thread.sleep(200)", "sourceAfterFix": "Thread.sleep(500)"}
{"fixCommitSHA1": "55ed50c4975cf694828d46ee9ca32ce72a9ef913", "projectName": "clojure.clojure", "bugType": "Change Identifier Used", "problem": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 12:\r\n\t\t\treturn invoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "fixed": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 12:\r\n\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "sourceBeforeFix": "invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())", "sourceAfterFix": "doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public List<Trends> getDailyTrends() throws TwitterException {\n        return Trends.constructTrendsList(get(getSearchBaseURL() + \"trends/daily.json\", false));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n      */\n     public List<Trends> getDailyTrends() throws TwitterException {\n        return Trends.createTrendsList(get(getSearchBaseURL() + \"trends/daily.json\", false));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline.json\",true))"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15842, value = \"Invalid rollout plan. %s is not a valid child of node %s\")\n     String invalidRolloutPlan(ModelNode modelNode, String nodeName);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10842, value = \"Invalid rollout plan. %s is not a valid child of node %s\")\n     String invalidRolloutPlan(ModelNode modelNode, String nodeName);\n     /**", "sourceBeforeFix": "id=15853", "sourceAfterFix": "id=10853"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface SdbEndpointBuilder\n            extends\n                EndpointProducerBuilder {\n         default AdvancedSdbEndpointBuilder advanced() {\n             return (AdvancedSdbEndpointBuilder) this;\n         }", "fixed": "     \n    public interface SdbEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedSdbEndpointBuilder advanced() {\n             return (AdvancedSdbEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsText(String path, long millis, OUT endTuple) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), millis, endTuple);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsText(String path, long millis, OUT endTuple) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), millis, endTuple);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "1c93b2a8d7e7dc8d7a1620c5566e7eb20df8f0ec", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         long taken = watch.stop();\n         assertEquals(taken, watch.taken());\n        assertTrue(\"Should take approx 200 millis, was: \" + taken, taken > 190);\n     }\n     public void testStopWatchNotStarted() throws Exception {", "fixed": "         long taken = watch.stop();\n         assertEquals(taken, watch.taken());\n        assertTrue(\"Should take approx 200 millis, was: \" + taken, taken > 150);\n     }\n     public void testStopWatchNotStarted() throws Exception {", "sourceBeforeFix": "taken > 90", "sourceAfterFix": "taken > 50"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "0f8c0e4ff5f80aab6ab653c9aaa5a97812d2ec7c", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": " public class SimpleInterceptor\n {\n   @Resource (name = \"java:jboss/datasources/ExampleDS\")\n    private DataSource ds;", "fixed": " public class SimpleInterceptor\n {\n   @Resource (lookup = \"java:jboss/datasources/ExampleDS\")\n    private DataSource ds;", "sourceBeforeFix": "name=\"java:jboss/datasources/ExampleDS\"", "sourceAfterFix": "lookup=\"java:jboss/datasources/ExampleDS\""}
{"fixCommitSHA1": "d2b19965df52e66385a2d7146887a44cea50330a", "projectName": "google.closure-compiler", "bugType": "Wrong Function Name", "problem": "     @Override\n     public void process(Node externs, Node root) {\n      logger.info(name);\n       startPass(name);\n       processInternal(externs, root);\n       endPass(externs, root);", "fixed": "     @Override\n     public void process(Node externs, Node root) {\n      logger.fine(name);\n       startPass(name);\n       processInternal(externs, root);\n       endPass(externs, root);", "sourceBeforeFix": "logger.info(name)", "sourceAfterFix": "logger.fine(name)"}
{"fixCommitSHA1": "5d12b156e1150162ba3def263b2da14793304b4e", "projectName": "facebook.presto", "bugType": "Change Identifier Used", "problem": "                 Optional.empty());\n        MaterializedResult expected = MaterializedResult.resultBuilder(taskContext.getSession(), concat(probeTypes, buildPages.getTypes()))\n                 .row(\"a\", \"a\")\n                 .row(\"a\", \"a\")\n                 .row(\"b\", null)", "fixed": "                 Optional.empty());\n        MaterializedResult expected = MaterializedResult.resultBuilder(taskContext.getSession(), concat(probeTypes, buildPages.getTypesWithoutHash()))\n                 .row(\"a\", \"a\")\n                 .row(\"a\", \"a\")\n                 .row(\"b\", null)", "sourceBeforeFix": "buildPages.getTypes()", "sourceAfterFix": "buildPages.getTypesWithoutHash()"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface CaffeineLoadCacheEndpointBuilder\n             extends\n                 CaffeineLoadCacheEndpointConsumerBuilder, CaffeineLoadCacheEndpointProducerBuilder {\n         default AdvancedCaffeineLoadCacheEndpointBuilder advanced() {", "fixed": "     \n    public interface CaffeineLoadCacheEndpointBuilder\n             extends\n                 CaffeineLoadCacheEndpointConsumerBuilder, CaffeineLoadCacheEndpointProducerBuilder {\n         default AdvancedCaffeineLoadCacheEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedSagaEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default SagaEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedSagaEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default SagaEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "         @ApiResponse(code = 200, message = \"successful operation\", response = Pet.class),\n         @ApiResponse(code = 400, message = \"Invalid ID supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"Pet not found\", response = Void.class) })\n    Pet getPetById(@PathParam(\"petId\") @ApiParam(\"ID of pet to return\") Long petId);\n     @PUT\n     @Consumes({ \"application/json\", \"application/xml\" })", "fixed": "         @ApiResponse(code = 200, message = \"successful operation\", response = Pet.class),\n         @ApiResponse(code = 400, message = \"Invalid ID supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"Pet not found\", response = Void.class) })\n    Pet getPetById(@PathParam(\"petId\") @ApiParam(\"ID of pet to return\") Long petId) throws Exception;\n     @PUT\n     @Consumes({ \"application/json\", \"application/xml\" })", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "4f002d28bb8061ff5eb5ce3b1f41c2e7c1ae69fc", "projectName": "hazelcast.hazelcast", "bugType": "Change Binary Operator", "problem": "                 long total = Runtime.getRuntime().totalMemory();\n                 long used = (total - Runtime.getRuntime().freeMemory());\n                 if (maxSizePolicy == MaxSizeConfig.MaxSizePolicy.USED_HEAP_SIZE) {\n                    return maxSize > (used / 1024 / 1024);\n                 } else {\n                    return maxSize > (used / total);\n                 }\n             }\n             return false;", "fixed": "                 long total = Runtime.getRuntime().totalMemory();\n                 long used = (total - Runtime.getRuntime().freeMemory());\n                 if (maxSizePolicy == MaxSizeConfig.MaxSizePolicy.USED_HEAP_SIZE) {\n                    return maxSize < (used / 1024 / 1024);\n                 } else {\n                    return maxSize < (used / total);\n                 }\n             }\n             return false;", "sourceBeforeFix": "maxSize > (used / total)", "sourceAfterFix": "maxSize < (used / total)"}
{"fixCommitSHA1": "ba98d83f598bbf2e9f5c41eeb51d36369a088fa6", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Change Modifier", "problem": "         }\n         \n        protected int readULong(final int position) throws NtlmEngineException {\n             return NtlmEngine.readULong(messageContents, position);\n         }\n         \n        protected byte[] readSecurityBuffer(final int position) throws NtlmEngineException {\n             return NtlmEngine.readSecurityBuffer(messageContents, position);\n         }", "fixed": "         }\n         \n        protected final int readULong(final int position) throws NtlmEngineException {\n             return NtlmEngine.readULong(messageContents, position);\n         }\n         \n        protected final byte[] readSecurityBuffer(final int position) throws NtlmEngineException {\n             return NtlmEngine.readSecurityBuffer(messageContents, position);\n         }", "sourceBeforeFix": "4", "sourceAfterFix": "20"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15867, value = \"Cannot use %s with the same value for parameters %s and %s. \" +\n             \"Use %s to redeploy the same content or %s to replace content with a new version with the same name.\")\n     String cannotUseSameValueForParameters(String opName, String param1, String param2, String redeployOpName, String replaceOpName);", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10867, value = \"Cannot use %s with the same value for parameters %s and %s. \" +\n             \"Use %s to redeploy the same content or %s to replace content with a new version with the same name.\")\n     String cannotUseSameValueForParameters(String opName, String param1, String param2, String redeployOpName, String replaceOpName);", "sourceBeforeFix": "id=15854", "sourceAfterFix": "id=10854"}
{"fixCommitSHA1": "3dddcc4cdf4a74ddbd4607c6aaee5bdd8ac46c27", "projectName": "gephi.gephi", "bugType": "Change Modifier", "problem": "     }\n     @Override\n    public List<EdgeModel> getSelectedEdges() {\n         List<EdgeModel> selected = new ArrayList<>();\n         for (Iterator<EdgeModel> itr = octree.getEdgeIterator(); itr.hasNext();) {\n             EdgeModel edgeModel = itr.next();", "fixed": "     }\n     @Override\n    public synchronized List<EdgeModel> getSelectedEdges() {\n         List<EdgeModel> selected = new ArrayList<>();\n         for (Iterator<EdgeModel> itr = octree.getEdgeIterator(); itr.hasNext();) {\n             EdgeModel edgeModel = itr.next();", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "144599323abb2666d2226773d46a2cc26faa83ec", "projectName": "Atmosphere.atmosphere", "bugType": "Same Function More Args", "problem": "     @Override\n     public AsyncSupport complete(AtmosphereResourceImpl r) {\n         try {\n            HttpEvent event = (HttpEvent) r.getRequest().getAttribute(HTTP_EVENT);\n             if (event != null) {\n                 event.close();", "fixed": "     @Override\n     public AsyncSupport complete(AtmosphereResourceImpl r) {\n         try {\n            HttpEvent event = (HttpEvent) r.getRequest(false).getAttribute(HTTP_EVENT);\n             if (event != null) {\n                 event.close();", "sourceBeforeFix": "r.getRequest()", "sourceAfterFix": "r.getRequest(false)"}
{"fixCommitSHA1": "1bac47f6afece6418b841fced7807ef5ff7a2615", "projectName": "mybatis.mybatis-3", "bugType": "Wrong Function Name", "problem": "   }\r\n   private boolean commandReadyToExecute(String trimmedLine) {\r\n    return !fullLineDelimiter && trimmedLine.endsWith(delimiter) || fullLineDelimiter && trimmedLine.equals(delimiter);\r\n   }\r\n   private void executeStatement(String command) throws SQLException, UnsupportedEncodingException {\r", "fixed": "   }\r\n   private boolean commandReadyToExecute(String trimmedLine) {\r\n    return !fullLineDelimiter && trimmedLine.contains(delimiter) || fullLineDelimiter && trimmedLine.equals(delimiter);\r\n   }\r\n   private void executeStatement(String command) throws SQLException, UnsupportedEncodingException {\r", "sourceBeforeFix": "trimmedLine.endsWith(delimiter)", "sourceAfterFix": "trimmedLine.contains(delimiter)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public Trends getCurrentTrends() throws TwitterException {\n        return Trends.constructTrendsList(get(getSearchBaseURL() + \"trends/current.json\"\n                 , false)).get(0);\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public Trends getCurrentTrends() throws TwitterException {\n        return Trends.createTrendsList(get(getSearchBaseURL() + \"trends/current.json\"\n                 , false)).get(0);\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites/\" + id+ \".json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites/\" + id+ \".json\",new PostParameter[0],true))"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface EKSEndpointBuilder\n            extends\n                EndpointProducerBuilder {\n         default AdvancedEKSEndpointBuilder advanced() {\n             return (AdvancedEKSEndpointBuilder) this;\n         }", "fixed": "     \n    public interface EKSEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedEKSEndpointBuilder advanced() {\n             return (AdvancedEKSEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "24f4e5797f7957b42069dc0989afad49bf9918da", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t\tdisposeColorTexture(colorTexture);\n \t\tif (hasDepthStencilPackedBuffer) {\n\t\t\tgl.glDeleteBuffer(depthStencilPackedBufferHandle);\n \t\t} else {\n \t\t\tif (hasDepth) gl.glDeleteRenderbuffer(depthbufferHandle);\n \t\t\tif (hasStencil) gl.glDeleteRenderbuffer(stencilbufferHandle);", "fixed": " \t\tdisposeColorTexture(colorTexture);\n \t\tif (hasDepthStencilPackedBuffer) {\n\t\t\tgl.glDeleteRenderbuffer(depthStencilPackedBufferHandle);\n \t\t} else {\n \t\t\tif (hasDepth) gl.glDeleteRenderbuffer(depthbufferHandle);\n \t\t\tif (hasStencil) gl.glDeleteRenderbuffer(stencilbufferHandle);", "sourceBeforeFix": "gl.glDeleteBuffer(depthStencilPackedBufferHandle)", "sourceAfterFix": "gl.glDeleteRenderbuffer(depthStencilPackedBufferHandle)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface SpringWebserviceEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedSpringWebserviceEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface SpringWebserviceEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedSpringWebserviceEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @return\n \t * @throws APIException\n      */\n\tpublic List<Locale> getSearchLocales(Locale currentLocale, User user) throws APIException;\n \t/**\n \t * Returns a list of locales used by the user when searching.", "fixed": " \t * @return\n \t * @throws APIException\n      */\n\tpublic List<Locale> getSearchLocales(Locale currentLocale, User user);\n \t/**\n \t * Returns a list of locales used by the user when searching.", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "4f6ba4fe3dd1ab5443020923d14c5e4c379e56ec", "projectName": "netty.netty", "bugType": "Change Identifier Used", "problem": "         void progress() {\n             progress ++;\n             if (promise instanceof ChannelProgressivePromise) {\n                ((ChannelProgressivePromise) promise).setProgress(progress, -1);\n             }\n         }\n     }", "fixed": "         void progress() {\n             progress ++;\n             if (promise instanceof ChannelProgressivePromise) {\n                ((ChannelProgressivePromise) promise).tryProgress(progress, -1);\n             }\n         }\n     }", "sourceBeforeFix": "((ChannelProgressivePromise)promise).setProgress(progress,-1)", "sourceAfterFix": "((ChannelProgressivePromise)promise).tryProgress(progress,-1)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15834, value = \"%s recognizes only %s as children: %s\")\n     String unrecognizedChildren(String parent, String children, String parentSpec);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10834, value = \"%s recognizes only %s as children: %s\")\n     String unrecognizedChildren(String parent, String children, String parentSpec);\n     /**", "sourceBeforeFix": "id=15839", "sourceAfterFix": "id=10839"}
{"fixCommitSHA1": "e8b752a7a95cef40b21e8ecb1e37f3577fa70441", "projectName": "square.okhttp", "bugType": "Wrong Function Name", "problem": "       }\n       try {\n        X509Certificate certificate = generator.generateX509Certificate(\n            signedByKeyPair.getPrivate());\n         return new HeldCertificate(heldKeyPair, certificate);\n       } catch (GeneralSecurityException e) {\n         throw new AssertionError(e);", "fixed": "       }\n       try {\n        X509Certificate certificate = generator.generate(signedByKeyPair.getPrivate());\n         return new HeldCertificate(heldKeyPair, certificate);\n       } catch (GeneralSecurityException e) {\n         throw new AssertionError(e);", "sourceBeforeFix": "generator.generateX509Certificate(signedByKeyPair.getPrivate())", "sourceAfterFix": "generator.generate(signedByKeyPair.getPrivate())"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15840, value = \"Interrupted waiting for result from server %s\")\n     String interruptedAwaitingResultFromServer(ServerIdentity server);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10840, value = \"Interrupted waiting for result from server %s\")\n     String interruptedAwaitingResultFromServer(ServerIdentity server);\n     /**", "sourceBeforeFix": "id=15830", "sourceAfterFix": "id=10830"}
{"fixCommitSHA1": "63c73d11b2de514fde3e299b573334b82089045c", "projectName": "openhab.openhab", "bugType": "Same Function More Args", "problem": " \t@Test\n \tpublic void BaseCommandTest() {\n\t\tS_Command scmd = new S_Command(\"00FE30\", 20.0);\n \t\tString commandStr = scmd.getCommandString();", "fixed": " \t@Test\n \tpublic void BaseCommandTest() {\n\t\tS_Command scmd = new S_Command(\"00FE30\", 1, 20.0);\n \t\tString commandStr = scmd.getCommandString();", "sourceBeforeFix": "new S_Command(\"00FE30\",20.0)", "sourceAfterFix": "new S_Command(\"00FE30\",1,20.0)"}
{"fixCommitSHA1": "dbcdd1231cf705bdb20e8296d53b52186eb8baed", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "  * @author Lars K\u00fchne\n  * @noinspection ThisEscapedInObjectConstruction\n  */\npublic class TreeTable extends JTable {\n     private static final long serialVersionUID = -8493693409423365387L;\n     ", "fixed": "  * @author Lars K\u00fchne\n  * @noinspection ThisEscapedInObjectConstruction\n  */\npublic final class TreeTable extends JTable {\n     private static final long serialVersionUID = -8493693409423365387L;\n     ", "sourceBeforeFix": "1", "sourceAfterFix": "17"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "fixed": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "sourceBeforeFix": "GL20.glUniform4(location,v)", "sourceAfterFix": "GL20.glUniform4iv(location,v)"}
{"fixCommitSHA1": "a24df987d4ad2f5661f723d49d44a0e125bc26cb", "projectName": "apache.flink", "bugType": "Wrong Function Name", "problem": " \tstatic File getIncomingDirectory(File storageDir) {\n \t\tfinal File incomingDir = new File(storageDir, \"incoming\");\n\t\tif (!incomingDir.exists() && !incomingDir.mkdirs()) {\n \t\t\tthrow new RuntimeException(\"Cannot create directory for incoming files \" + incomingDir.getAbsolutePath());\n \t\t}", "fixed": " \tstatic File getIncomingDirectory(File storageDir) {\n \t\tfinal File incomingDir = new File(storageDir, \"incoming\");\n\t\tif (!incomingDir.mkdirs() && !incomingDir.exists()) {\n \t\t\tthrow new RuntimeException(\"Cannot create directory for incoming files \" + incomingDir.getAbsolutePath());\n \t\t}", "sourceBeforeFix": "incomingDir.exists()", "sourceAfterFix": "incomingDir.mkdirs()"}
{"fixCommitSHA1": "30024a16affda18949b08699a4d304852e1e1643", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t\t\t\t\ttry {\r\n \t\t\t\t\t\tadd(valueEntry.name(), object, addType);\r\n \t\t\t\t\t} catch (Exception ex) {\r\n\t\t\t\t\t\tthrow new SerializationException(\"Error reading \" + type.getSimpleName() + \": \" + valueEntry.name(), ex);\r\n \t\t\t\t\t}\r\n \t\t\t\t}\r\n \t\t\t}\r", "fixed": " \t\t\t\t\ttry {\r\n \t\t\t\t\t\tadd(valueEntry.name(), object, addType);\r\n \t\t\t\t\t} catch (Exception ex) {\r\n\t\t\t\t\t\tthrow new SerializationException(\"Error reading \" + type.getName() + \": \" + valueEntry.name(), ex);\r\n \t\t\t\t\t}\r\n \t\t\t\t}\r\n \t\t\t}\r", "sourceBeforeFix": "type.getSimpleName()", "sourceAfterFix": "type.getName()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   }\n   \n  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15863, value = \"%s is not a valid URL -- %s\")\n     String invalidUrl(String url, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10863, value = \"%s is not a valid URL -- %s\")\n     String invalidUrl(String url, String message);\n     /**", "sourceBeforeFix": "id=15864", "sourceAfterFix": "id=10864"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "fixed": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "sourceBeforeFix": "GL11.glTexParameter(target,pname,params)", "sourceAfterFix": "GL11.glTexParameteriv(target,pname,params)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<Status> getHomeTimeline() throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/home_timeline.json\", true));\n     }", "fixed": "      */\n     public ResponseList<Status> getHomeTimeline() throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/home_timeline.json\", true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15851, value = \"Operation targets host %s but that host is not registered\")\n     String invalidOperationTargetHost(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10851, value = \"Operation targets host %s but that host is not registered\")\n     String invalidOperationTargetHost(String name);\n     /**", "sourceBeforeFix": "id=15862", "sourceAfterFix": "id=10862"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15841, value = \"Exception getting result from server %s: %s\")\n     String exceptionAwaitingResultFromServer(ServerIdentity server, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10841, value = \"Exception getting result from server %s: %s\")\n     String exceptionAwaitingResultFromServer(ServerIdentity server, String message);\n     /**", "sourceBeforeFix": "id=15845", "sourceAfterFix": "id=10845"}
{"fixCommitSHA1": "5d105e75982c88ffc958ef9de14266ae8522a0f9", "projectName": "druid-io.druid", "bugType": "Change Identifier Used", "problem": "     final boolean useCache = query.getContextUseCache(true)\n         && strategy != null\n        && cacheConfig.isPopulateCache();\n     final Cache.NamedKey key;\n     if(strategy != null && (useCache || populateCache)) {", "fixed": "     final boolean useCache = query.getContextUseCache(true)\n         && strategy != null\n        && cacheConfig.isUseCache();\n     final Cache.NamedKey key;\n     if(strategy != null && (useCache || populateCache)) {", "sourceBeforeFix": "cacheConfig.isPopulateCache()", "sourceAfterFix": "cacheConfig.isUseCache()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "aebe2ca06a3fb220c7211b174c85250f36afae25", "projectName": "wildfly.wildfly", "bugType": "Same Function Swap Args", "problem": "             Assert.fail(\"Test should fail, user shouldn't be allowed to invoke that method\");\n         } catch (WebServiceException e) {\n            Assert.assertEquals(e.getCause().getMessage(), getNotAllowedExceptionMessage(\"helloForNone\"));\n         }\n     }", "fixed": "             Assert.fail(\"Test should fail, user shouldn't be allowed to invoke that method\");\n         } catch (WebServiceException e) {\n            Assert.assertEquals(getNotAllowedExceptionMessage(\"helloForNone\"), e.getCause().getMessage());\n         }\n     }", "sourceBeforeFix": "Assert.assertEquals(e.getCause().getMessage(),getNotAllowedExceptionMessage(\"helloForNone\"))", "sourceAfterFix": "Assert.assertEquals(getNotAllowedExceptionMessage(\"helloForNone\"),e.getCause().getMessage())"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform1fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform1(location, v);\r\n \t}\r\n \tpublic void glUniform1fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform1(location, toFloatBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform1i (int location, int x) {\r", "fixed": " \t}\r\n \tpublic void glUniform1fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform1fv(location, v);\r\n \t}\r\n \tpublic void glUniform1fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform1fv(location, toFloatBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform1i (int location, int x) {\r", "sourceBeforeFix": "GL11.glTexParameter(target,pname,params)", "sourceAfterFix": "GL11.glTexParameterfv(target,pname,params)"}
{"fixCommitSHA1": "4bf80610fd2a67d952312e808edebdb74ebc26bb", "projectName": "Graylog2.graylog2-server", "bugType": "Change Numeric Literal", "problem": "         final PaginatedList<TestDTO> page3 = dbService.findPaginatedWithQueryFilterAndSort(DBQuery.empty(), filter, DBSort.asc(\"title\"), 3, 2);\n         assertThat(page3.pagination().getCount()).isEqualTo(1);\n        assertThat(page3.pagination().getGlobalTotal()).isEqualTo(7);\n         assertThat(page3.delegate())\n                 .extracting(\"title\")\n                 .containsExactly(\"hello6\");", "fixed": "         final PaginatedList<TestDTO> page3 = dbService.findPaginatedWithQueryFilterAndSort(DBQuery.empty(), filter, DBSort.asc(\"title\"), 3, 2);\n         assertThat(page3.pagination().getCount()).isEqualTo(1);\n        assertThat(page3.pagination().getGlobalTotal()).isEqualTo(5);\n         assertThat(page3.delegate())\n                 .extracting(\"title\")\n                 .containsExactly(\"hello6\");", "sourceBeforeFix": "assertThat(page4.pagination().getGlobalTotal()).isEqualTo(7)", "sourceAfterFix": "assertThat(page4.pagination().getGlobalTotal()).isEqualTo(5)"}
{"fixCommitSHA1": "c9a1cc9df3dc4fe2eef78ad6090a9b1d95a02557", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "             .setXmlName(Attribute.FLUSH_LOCK_TIMEOUT.getLocalName())\n             .setAllowExpression(true)\n             .setFlags(AttributeAccess.Flag.RESTART_ALL_SERVICES)\n            .setDefaultValue(new ModelNode().set(1))\n             .build();\n     static final SimpleAttributeDefinition MODIFICATION_QUEUE_SIZE = new SimpleAttributeDefinitionBuilder(ModelKeys.MODIFICATION_QUEUE_SIZE, ModelType.INT, true)", "fixed": "             .setXmlName(Attribute.FLUSH_LOCK_TIMEOUT.getLocalName())\n             .setAllowExpression(true)\n             .setFlags(AttributeAccess.Flag.RESTART_ALL_SERVICES)\n            .setDefaultValue(new ModelNode().set(1L))\n             .build();\n     static final SimpleAttributeDefinition MODIFICATION_QUEUE_SIZE = new SimpleAttributeDefinitionBuilder(ModelKeys.MODIFICATION_QUEUE_SIZE, ModelType.INT, true)", "sourceBeforeFix": "new ModelNode().set(1)", "sourceAfterFix": "new ModelNode().set(1L)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15837, value = \"One of the groups does not define neither \" + SERVER_GROUP + \" nor \" + CONCURRENT_GROUPS + \": %s\")\n     String unexpectedInSeriesGroup(String rolloutPlan);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10837, value = \"One of the groups does not define neither \" + SERVER_GROUP + \" nor \" + CONCURRENT_GROUPS + \": %s\")\n     String unexpectedInSeriesGroup(String rolloutPlan);\n     /**", "sourceBeforeFix": "id=15847", "sourceAfterFix": "id=10847"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @return\n \t * @throws APIException\n      */\n\tpublic List<Locale> getSearchLocales(Locale currentLocale, User user) throws APIException;\n \t/**\n \t * Returns a list of locales used by the user when searching.", "fixed": " \t * @return\n \t * @throws APIException\n      */\n\tpublic List<Locale> getSearchLocales(Locale currentLocale, User user);\n \t/**\n \t * Returns a list of locales used by the user when searching.", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15836, value = SERVER_GROUP + \" expects one and only one child: %s\")\n     String serverGroupExpectsSingleChild(String rolloutPlan);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10836, value = SERVER_GROUP + \" expects one and only one child: %s\")\n     String serverGroupExpectsSingleChild(String rolloutPlan);\n     /**", "sourceBeforeFix": "id=15872", "sourceAfterFix": "id=10872"}
{"fixCommitSHA1": "4049edd5a55e9523f1b329d9e9103091d0ad943d", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "     try {\n       mTestStream.seek(BLOCK_LENGTH);\n       Assert.fail(\"block store should throw exception\");\n    } catch (UnavailableException e) {\n       Assert.assertEquals(\"test IOException\", e.getMessage());\n     }\n   }", "fixed": "     try {\n       mTestStream.seek(BLOCK_LENGTH);\n       Assert.fail(\"block store should throw exception\");\n    } catch (IOException e) {\n       Assert.assertEquals(\"test IOException\", e.getMessage());\n     }\n   }", "sourceBeforeFix": "UnavailableException e", "sourceAfterFix": "IOException e"}
{"fixCommitSHA1": "63b7cec3050338899e04957cbc7039cd509cd214", "projectName": "cucumber.cucumber-jvm", "bugType": "Change Identifier Used", "problem": "     }\n    @Cucumber.Options(monochrome = false)\n     static class SubClassWithMonoChromeTrue extends BaseClassWithMonoChromeFalse {\n     }\n    @Cucumber.Options(monochrome = true)\n     static class BaseClassWithMonoChromeFalse {\n     }", "fixed": "     }\n    @Cucumber.Options(monochrome = true)\n     static class SubClassWithMonoChromeTrue extends BaseClassWithMonoChromeFalse {\n     }\n    @Cucumber.Options(monochrome = false)\n     static class BaseClassWithMonoChromeFalse {\n     }", "sourceBeforeFix": "assertFalse(runtimeOptions.isMonochrome())", "sourceAfterFix": "assertTrue(runtimeOptions.isMonochrome())"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getMentions() throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",\n                 null, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getMentions() throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",\n                 null, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweets/\" + statusId+ \".json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweets/\" + statusId+ \".json\",true))"}
{"fixCommitSHA1": "3ae343b768bae5973a5634c8e287ae1173e30248", "projectName": "netty.netty", "bugType": "Change Identifier Used", "problem": "             assert amt > 0;\n             prioritizableForTree += amt;\n             if (parent != null && parent != oldParent) {\n                parent.incrementPrioritizableForTree(amt, oldParent);\n             }\n         }", "fixed": "             assert amt > 0;\n             prioritizableForTree += amt;\n             if (parent != null && parent != oldParent) {\n                parent.incrementPrioritizableForTree0(amt, oldParent);\n             }\n         }", "sourceBeforeFix": "parent.incrementPrioritizableForTree(amt,oldParent)", "sourceAfterFix": "parent.incrementPrioritizableForTree0(amt,oldParent)"}
{"fixCommitSHA1": "1daccd54d2ff2ecdb21d8c60268600c37febbb70", "projectName": "Alluxio.alluxio", "bugType": "Change Operand ", "problem": "       if (TACHYON_STREAMING_READ) {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n           InputStream is = file.getInStream(ReadType.CACHE);\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;", "fixed": "       if (TACHYON_STREAMING_READ) {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           InputStream is = file.getInStream(ReadType.CACHE);\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "pId + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "5d12b156e1150162ba3def263b2da14793304b4e", "projectName": "facebook.presto", "bugType": "Wrong Function Name", "problem": "                 Optional.empty());\n        MaterializedResult expected = MaterializedResult.resultBuilder(taskContext.getSession(), concat(probeTypes, buildPages.getTypes()))\n                 .row(\"a\", \"a\")\n                 .row(\"a\", \"a\")\n                 .row(\"b\", null)", "fixed": "                 Optional.empty());\n        MaterializedResult expected = MaterializedResult.resultBuilder(taskContext.getSession(), concat(probeTypes, buildPages.getTypesWithoutHash()))\n                 .row(\"a\", \"a\")\n                 .row(\"a\", \"a\")\n                 .row(\"b\", null)", "sourceBeforeFix": "buildPages.getTypes()", "sourceAfterFix": "buildPages.getTypesWithoutHash()"}
{"fixCommitSHA1": "45cbae27786780ca4d6d57986b46bf2f54dae128", "projectName": "roboguice.roboguice", "bugType": "Wrong Function Name", "problem": "                 final int id = injectView.value();\n                 if( id>=0 )\n                    view = fragUtils != null && fragUtils.getClass().isInstance(activityOrFragment) ? (fragUtils.getView(activityOrFragment)).findViewById(id) : ((Activity)activityOrFragment).findViewById(id);\n                 else\n                     view = fragUtils !=null && fragUtils.fragmentType().isInstance(activityOrFragment) ? (fragUtils.getView(activityOrFragment)).findViewWithTag(injectView.tag()) : ((Activity)activityOrFragment).getWindow().getDecorView().findViewWithTag(injectView.tag());", "fixed": "                 final int id = injectView.value();\n                 if( id>=0 )\n                    view = fragUtils != null && fragUtils.fragmentType().isInstance(activityOrFragment) ? (fragUtils.getView(activityOrFragment)).findViewById(id) : ((Activity)activityOrFragment).findViewById(id);\n                 else\n                     view = fragUtils !=null && fragUtils.fragmentType().isInstance(activityOrFragment) ? (fragUtils.getView(activityOrFragment)).findViewWithTag(injectView.tag()) : ((Activity)activityOrFragment).getWindow().getDecorView().findViewWithTag(injectView.tag());", "sourceBeforeFix": "fragUtils.getClass()", "sourceAfterFix": "fragUtils.fragmentType()"}
{"fixCommitSHA1": "26604fde31e9f4586c18209285b7b5c3bc80d51e", "projectName": "facebook.presto", "bugType": "Change Modifier", "problem": "         return updatedUnpartitionedSources;\n     }\n    private void schedulePartitionedSource(TaskSource source)\n     {", "fixed": "         return updatedUnpartitionedSources;\n     }\n    private synchronized void schedulePartitionedSource(TaskSource source)\n     {", "sourceBeforeFix": "2", "sourceAfterFix": "34"}
{"fixCommitSHA1": "a295b91c37f681199a83fdb963344c19e0d015c0", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "     protected void handleQOffer(String[] args) {\n         long timeout = 0;\n         if (args.length > 2) {\n            timeout = Long.valueOf(args[2]);\n         }\n         try {\n             boolean offered = getQueue().offer(args[1], timeout, TimeUnit.SECONDS);", "fixed": "     protected void handleQOffer(String[] args) {\n         long timeout = 0;\n         if (args.length > 2) {\n            timeout = Long.parseLong(args[2]);\n         }\n         try {\n             boolean offered = getQueue().offer(args[1], timeout, TimeUnit.SECONDS);", "sourceBeforeFix": "Long.valueOf(timeout)", "sourceAfterFix": "Long.parseLong(timeout)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8d14f34eae4cd9efdd00e7db91785935779087b0", "projectName": "hazelcast.hazelcast", "bugType": "Change Caller in Function Call", "problem": "                 }\n             }\n         }\n        if (keys.isEmpty()) {\n             return result;\n         }\n         MapGetAllRequest request = new MapGetAllRequest(name, keySet);", "fixed": "                 }\n             }\n         }\n        if (keySet.isEmpty()) {\n             return result;\n         }\n         MapGetAllRequest request = new MapGetAllRequest(name, keySet);", "sourceBeforeFix": "keys.isEmpty()", "sourceAfterFix": "keySet.isEmpty()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  private final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "27fb87cfcea241c2d7961baf68e84ce97f2dee7a", "projectName": "apache.hive", "bugType": "Less Specific If", "problem": "       }\n       statsData.setDoubleStats(doubleStats);\n       statsObj.setStatsData(statsData);\n    } else if (columnType.equalsIgnoreCase(\"string\")) {\n       StringColumnStatsData stringStats = new StringColumnStatsData();\n       stringStats.setMaxColLenIsSet(false);\n       stringStats.setAvgColLenIsSet(false);", "fixed": "       }\n       statsData.setDoubleStats(doubleStats);\n       statsObj.setStatsData(statsData);\n    } else if (columnType.equalsIgnoreCase(\"string\") || columnType.toLowerCase().startsWith(\"char\")\n|| columnType.toLowerCase().startsWith(\"varchar\")) {\n       StringColumnStatsData stringStats = new StringColumnStatsData();\n       stringStats.setMaxColLenIsSet(false);\n       stringStats.setAvgColLenIsSet(false);", "sourceBeforeFix": "columnType.equalsIgnoreCase(\"double\")", "sourceAfterFix": "columnType.equalsIgnoreCase(\"double\") || columnType.equalsIgnoreCase(\"float\")"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedHazelcastQueueEndpointBuilder\n             extends\n                 AdvancedHazelcastQueueEndpointConsumerBuilder, AdvancedHazelcastQueueEndpointProducerBuilder {\n         default HazelcastQueueEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedHazelcastQueueEndpointBuilder\n             extends\n                 AdvancedHazelcastQueueEndpointConsumerBuilder, AdvancedHazelcastQueueEndpointProducerBuilder {\n         default HazelcastQueueEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsCsv(String path, int batchSize, OUT endTuple) {\n \t\tif (this instanceof SingleOutputStreamOperator) {\n \t\t\t((SingleOutputStreamOperator<?, ?>) this).setMutability(false);\n \t\t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsCsv(String path, int batchSize, OUT endTuple) {\n \t\tif (this instanceof SingleOutputStreamOperator) {\n \t\t\t((SingleOutputStreamOperator<?, ?>) this).setMutability(false);\n \t\t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "ea98386dfd18da047c877a2320cfdcf15df2ea06", "projectName": "facebook.presto", "bugType": "Change Modifier", "problem": "                 .retInt();\n     }\n    private void generatePositionEqualsPositionMethod(\n             ClassDefinition classDefinition,\n             CallSiteBinder callSiteBinder,\n             List<Type> joinChannelTypes,", "fixed": "                 .retInt();\n     }\n    private static void generatePositionEqualsPositionMethod(\n             ClassDefinition classDefinition,\n             CallSiteBinder callSiteBinder,\n             List<Type> joinChannelTypes,", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "79946366e1ab141ef2b595e0079dcac7b913da2b", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "         checkConfig.addAttribute(\"matchDirectoryStructure\", \"false\");\n         final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;\n        verify(checkConfig, getPath(\"InputPackageDeclarationDiffDirectory.java\"), expected);\n     }\n     @Test", "fixed": "         checkConfig.addAttribute(\"matchDirectoryStructure\", \"false\");\n         final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;\n        verify(checkConfig, getNonCompilablePath(\"InputPackageDeclarationDiffDirectory.java\"),\n                expected);\n     }\n     @Test", "sourceBeforeFix": "getPath(\"InputPackageDeclarationDiffDirectoryAtParent.java\")", "sourceAfterFix": "getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtParent.java\")"}
{"fixCommitSHA1": "01fec049c0fb6b1c326d802687f3093b502123e0", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": " \t\ttry {\r\n \t\t\tDaemon.executeScheduledTask(task);\r\n \t\t}\r\n\t\tcatch (Throwable t) {\r\n \t\t\tlog.error(\r", "fixed": " \t\ttry {\r\n \t\t\tDaemon.executeScheduledTask(task);\r\n \t\t}\r\n\t\tcatch (Exception t) {\r\n \t\t\tlog.error(\r", "sourceBeforeFix": "Throwable t", "sourceAfterFix": "Exception t"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "4665dcf9ab41c3c61cd42aad296ebfe518bfa003", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\n \tpublic void glDeleteTextures (int n, IntBuffer textures) {\n\t\tGL.glDeleteTexturesEXT(n, textures, Memory.getPosition(textures));\n \t}\n \tpublic void glDepthFunc (int func) {", "fixed": " \t}\n \tpublic void glDeleteTextures (int n, IntBuffer textures) {\n\t\tGL.glDeleteTextures(n, textures, Memory.getPosition(textures));\n \t}\n \tpublic void glDepthFunc (int func) {", "sourceBeforeFix": "GL.glDrawArraysEXT(mode,first,count)", "sourceAfterFix": "GL.glDrawArrays(mode,first,count)"}
{"fixCommitSHA1": "2c63407961c497147a4e4481a4c372c1e1323c95", "projectName": "facebook.presto", "bugType": "Change Identifier Used", "problem": "                 return IsolationLevel.REPEATABLE_READ;\n             case READ_COMMITTED:\n                 return IsolationLevel.READ_COMMITTED;\n            case READ_UNCOMMITED:\n                 return IsolationLevel.READ_UNCOMMITTED;\n             default:\n                 throw new AssertionError(\"Unhandled isolation level: \" + level);", "fixed": "                 return IsolationLevel.REPEATABLE_READ;\n             case READ_COMMITTED:\n                 return IsolationLevel.READ_COMMITTED;\n            case READ_UNCOMMITTED:\n                 return IsolationLevel.READ_UNCOMMITTED;\n             default:\n                 throw new AssertionError(\"Unhandled isolation level: \" + level);", "sourceBeforeFix": "case READ_UNCOMMITED: ", "sourceAfterFix": "case READ_UNCOMMITTED: "}
{"fixCommitSHA1": "cac8c34ac61668aa269366408e613ac0ed5db729", "projectName": "junit-team.junit", "bugType": "Change Modifier", "problem": "         void delta() {}\n         void epsilon() {}\n     }\n    private static class Super {\n         void testOne() {}\n     }\n    private static class Sub extends Super {\n         void testTwo() {}\n     }", "fixed": "         void delta() {}\n         void epsilon() {}\n     }\n    static class Super {\n         void testOne() {}\n     }\n    static class Sub extends Super {\n         void testTwo() {}\n     }", "sourceBeforeFix": "10", "sourceAfterFix": "8"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \t@Test\n \tpublic void testMultipleActionsPredicatesOptions_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {Console.WriteLine($ctx.ToStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");", "fixed": " \t@Test\n \tpublic void testMultipleActionsPredicatesOptions_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(245);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {Console.WriteLine($ctx.ToStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");", "sourceBeforeFix": "new StringBuilder(246)", "sourceAfterFix": "new StringBuilder(245)"}
{"fixCommitSHA1": "eb86a81034dce144bd7ac1e879ddf51a8e412a91", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "         private EventLoopGroup bossGroup;\n         private EventLoopGroup workerGroup;\n        public MyServer(int port) {\n             this.port = port;\n         }", "fixed": "         private EventLoopGroup bossGroup;\n         private EventLoopGroup workerGroup;\n        MyServer(int port) {\n             this.port = port;\n         }", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "3757a700a89638e5747d966bdaa8266b62c974c8", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "     assertEquals(encoded, encoding.encode(bytes));\n   }\n  private void testDecodes(BaseEncoding encoding, String encoded, String decoded) {\n     byte[] bytes;\n     try {\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();", "fixed": "     assertEquals(encoded, encoding.encode(bytes));\n   }\n  private static void testDecodes(BaseEncoding encoding, String encoded, String decoded) {\n     byte[] bytes;\n     try {\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "e16bf78360f5a93cbc6db48fa486f445e4b9a21a", "projectName": "openhab.openhab", "bugType": "Change Identifier Used", "problem": "     @Test\n     public void testGetStateToBindingValueConverter() {\n         NumberItem item = new NumberItem(NUMBER_ITEM_NAME);\n        converterLookup.addCustomConverter(item, IntegerDecimalConverter.class);\n         StateConverterMap converter = converterLookup.getStateToBindingValueConverter(item, null);\n         assertEquals(IntegerDecimalConverter.class, converter.get(\"bla\").getClass());\n     }", "fixed": "     @Test\n     public void testGetStateToBindingValueConverter() {\n         NumberItem item = new NumberItem(NUMBER_ITEM_NAME);\n        converterLookup.addCustomConverter(NUMBER_ITEM_NAME, IntegerDecimalConverter.class);\n         StateConverterMap converter = converterLookup.getStateToBindingValueConverter(item, null);\n         assertEquals(IntegerDecimalConverter.class, converter.get(\"bla\").getClass());\n     }", "sourceBeforeFix": "converterLookup.addCustomConverter(item,IntegerDecimalConverter.class)", "sourceAfterFix": "converterLookup.addCustomConverter(NUMBER_ITEM_NAME,IntegerDecimalConverter.class)"}
{"fixCommitSHA1": "66181be1c62816d916c9301dddd2c8c5bc7be1dc", "projectName": "druid-io.druid", "bugType": "Change Modifier", "problem": "   private static Function compile(String function) {\n     final ContextFactory contextFactory = ContextFactory.getGlobal();\n    Context context = contextFactory.enterContext();\n     context.setOptimizationLevel(9);\n     final ScriptableObject scope = context.initStandardObjects();", "fixed": "   private static Function compile(String function) {\n     final ContextFactory contextFactory = ContextFactory.getGlobal();\n    final Context context = contextFactory.enterContext();\n     context.setOptimizationLevel(9);\n     final ScriptableObject scope = context.initStandardObjects();", "sourceBeforeFix": "0", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15864, value = \"Error obtaining input stream from URL %s -- %s\")\n     String errorObtainingUrlStream(String url, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10864, value = \"Error obtaining input stream from URL %s -- %s\")\n     String errorObtainingUrlStream(String url, String message);\n     /**", "sourceBeforeFix": "id=15866", "sourceAfterFix": "id=10866"}
{"fixCommitSHA1": "710fae2d6c9db4eec40aafbe618814ebe9e9aec5", "projectName": "Alluxio.alluxio", "bugType": "Same Function More Args", "problem": "    * @param timer a timer to add to the scheduler\n    */\n   public static void addTimer(ScheduledTimer timer) {\n    Preconditions.checkNotNull(timer);\n     try (LockResource r = new LockResource(sLock)) {\n       Preconditions.checkState(!sTimers.containsKey(timer.getThreadName()),\n           \"The timer for thread %s is already waiting to be scheduled\", timer.getThreadName());", "fixed": "    * @param timer a timer to add to the scheduler\n    */\n   public static void addTimer(ScheduledTimer timer) {\n    Preconditions.checkNotNull(timer, \"timer\");\n     try (LockResource r = new LockResource(sLock)) {\n       Preconditions.checkState(!sTimers.containsKey(timer.getThreadName()),\n           \"The timer for thread %s is already waiting to be scheduled\", timer.getThreadName());", "sourceBeforeFix": "Preconditions.checkNotNull(timer)", "sourceAfterFix": "Preconditions.checkNotNull(timer,\"timer\")"}
{"fixCommitSHA1": "a536b4a6a33b85f40af44fca53b33d8c0d8656a1", "projectName": "openhab.openhab", "bugType": "Change Binary Operator", "problem": "                         }\n                     } else {\nNodeList nlDataOutNodes = sm.getSOAPPart().getElementsByTagName(mapping.getReadDataOutName());\n                        if (nlDataOutNodes != null & nlDataOutNodes.getLength() > 0) {\n                             String url = nlDataOutNodes.item(0).getTextContent();", "fixed": "                         }\n                     } else {\nNodeList nlDataOutNodes = sm.getSOAPPart().getElementsByTagName(mapping.getReadDataOutName());\n                        if (nlDataOutNodes != null && nlDataOutNodes.getLength() > 0) {\n                             String url = nlDataOutNodes.item(0).getTextContent();", "sourceBeforeFix": "nlDataOutNodes != null & nlDataOutNodes.getLength() > 0", "sourceAfterFix": "nlDataOutNodes != null && nlDataOutNodes.getLength() > 0"}
{"fixCommitSHA1": "346387c717048391485fb28f877531aab1095de1", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "     public static Set<String> getPackageNames(ClassLoader classLoader)\n             throws CheckstyleException {\n        Set<String> result;\n         try {", "fixed": "     public static Set<String> getPackageNames(ClassLoader classLoader)\n             throws CheckstyleException {\n        final Set<String> result;\n         try {", "sourceBeforeFix": "0", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "06ed1d48da4a57dc87cf3c1215bfe23bce4e78d8", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "     @Test\n     public void testGenericEndsTheLine() throws Exception {\n         final String[] expected = ArrayUtils.EMPTY_STRING_ARRAY;\n        verify(checkConfig, getNonCompilablePath(\"InputGenericWhitespaceEndsTheLine.java\"),\n                expected);\n     }\n     @Test", "fixed": "     @Test\n     public void testGenericEndsTheLine() throws Exception {\n         final String[] expected = ArrayUtils.EMPTY_STRING_ARRAY;\n        verify(checkConfig, getPath(\"InputGenericWhitespaceEndsTheLine.java\"), expected);\n     }\n     @Test", "sourceBeforeFix": "getNonCompilablePath(\"InputGenericWhitespaceEndsTheLine.java\")", "sourceAfterFix": "getPath(\"InputGenericWhitespaceEndsTheLine.java\")"}
{"fixCommitSHA1": "4665dcf9ab41c3c61cd42aad296ebfe518bfa003", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\n \tpublic void glBindTexture (int target, int texture) {\n\t\tGL.glBindTextureEXT(target, texture);\n \t}\n \tpublic void glBlendFunc (int sfactor, int dfactor) {", "fixed": " \t}\n \tpublic void glBindTexture (int target, int texture) {\n\t\tGL.glBindTexture(target, texture);\n \t}\n \tpublic void glBlendFunc (int sfactor, int dfactor) {", "sourceBeforeFix": "GL.glCopyTexSubImage2DEXT(target,level,xoffset,yoffset,x,y,width,height)", "sourceAfterFix": "GL.glCopyTexSubImage2D(target,level,xoffset,yoffset,x,y,width,height)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "486b290863a66641b0ec30dbf2d9e349733cae44", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "   public void split(final String tableNameOrRegionName,\n     final String splitPoint) throws IOException, InterruptedException {\n    split(Bytes.toBytesBinary(tableNameOrRegionName), Bytes.toBytesBinary(splitPoint));\n   }\n   /**", "fixed": "   public void split(final String tableNameOrRegionName,\n     final String splitPoint) throws IOException, InterruptedException {\n    split(Bytes.toBytes(tableNameOrRegionName), Bytes.toBytes(splitPoint));\n   }\n   /**", "sourceBeforeFix": "Bytes.toBytesBinary(tableNameOrRegionName)", "sourceAfterFix": "Bytes.toBytes(tableNameOrRegionName)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface WordpressEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedWordpressEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface WordpressEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedWordpressEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "ed1852a789daeef03ab260ef4f962bca9160d13e", "projectName": "iluwatar.java-design-patterns", "bugType": "Change Identifier Used", "problem": "    * @param testedPrototype  The tested prototype instance\n* @param expectedToString The expected {@link Prototype\n    */\n  public PrototypeTest(final Prototype testedPrototype, final String expectedToString) {\n     this.expectedToString = expectedToString;\n     this.testedPrototype = testedPrototype;\n   }", "fixed": "    * @param testedPrototype  The tested prototype instance\n* @param expectedToString The expected {@link Prototype\n    */\n  public PrototypeTest(final P testedPrototype, final String expectedToString) {\n     this.expectedToString = expectedToString;\n     this.testedPrototype = testedPrototype;\n   }", "sourceBeforeFix": "final Prototype testedPrototype", "sourceAfterFix": "final P testedPrototype"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "d1cd1f5dd0dd38585b9fb2fe3af369127870583d", "projectName": "apache.hive", "bugType": "Change Identifier Used", "problem": "     if (s == null) {\n       return null;\n     }\n    t.set(s.toString().toUpperCase());\n     return t;\n   }", "fixed": "     if (s == null) {\n       return null;\n     }\n    t.set(s.toString().toLowerCase());\n     return t;\n   }", "sourceBeforeFix": "s.toString().toUpperCase()", "sourceAfterFix": "s.toString().toLowerCase()"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should find object given valid uuid\n \t * @should return null if no object found with given uuid\n \t */\n\tpublic GlobalProperty getGlobalPropertyByUuid(String uuid) throws APIException;\n \t/**\n \t * Get a listing or important variables used in openmrs", "fixed": " \t * @should find object given valid uuid\n \t * @should return null if no object found with given uuid\n \t */\n\tpublic GlobalProperty getGlobalPropertyByUuid(String uuid);\n \t/**\n \t * Get a listing or important variables used in openmrs", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform1iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform1(location, v);\r\n \t}\r\n \t@Override\r\n \tpublic void glUniform1iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform1(location, toIntBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform2f (int location, float x, float y) {\r", "fixed": " \t}\r\n \tpublic void glUniform1iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform1iv(location, v);\r\n \t}\r\n \t@Override\r\n \tpublic void glUniform1iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform1iv(location, toIntBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform2f (int location, float x, float y) {\r", "sourceBeforeFix": "GL20.glUniform4(location,v)", "sourceAfterFix": "GL20.glUniform4fv(location,v)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getFavorites(String id, int page) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"favorites/\" + id + \".json\", \"page\", String.valueOf(page), true));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getFavorites(String id, int page) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"favorites/\" + id + \".json\", \"page\", String.valueOf(page), true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_to_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_to_me.json\",null,true))"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "fixed": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniformfv(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniformiv(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "sourceBeforeFix": "GL20.glUniform1(location,toFloatBuffer(v,offset,count))", "sourceAfterFix": "GL20.glUniform1fv(location,toFloatBuffer(v,offset,count))"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleActionsPredicatesOptions_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(239);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");", "fixed": " \tpublic void testMultipleActionsPredicatesOptions_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(238);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");", "sourceBeforeFix": "new StringBuilder(561)", "sourceAfterFix": "new StringBuilder(560)"}
{"fixCommitSHA1": "e60c32d2f4826f2d0e7ef41acad13f0d6bac4d35", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "                     log.trace(\"URL from classloader: \" + url);\n                 }\n                url = customerResourceLocator(url);\n                 String urlPath = url.getFile();\n                 urlPath = URLDecoder.decode(urlPath, \"UTF-8\");", "fixed": "                     log.trace(\"URL from classloader: \" + url);\n                 }\n                url = customResourceLocator(url);\n                 String urlPath = url.getFile();\n                 urlPath = URLDecoder.decode(urlPath, \"UTF-8\");", "sourceBeforeFix": "customerResourceLocator(url)", "sourceAfterFix": "customResourceLocator(url)"}
{"fixCommitSHA1": "309845dc491d60d40e0b0a7f654b2db0d964128b", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         template.sendBody(\"direct:addRoute\", \"Am I replicated?\");\n        Thread.sleep(200);\n         template.sendBody(\"direct:getRoute1\", \"Will I get replicated cache\");\n         template.sendBody(\"direct:getRoute2\", \"Will I get replicated cache\");", "fixed": "         template.sendBody(\"direct:addRoute\", \"Am I replicated?\");\n        Thread.sleep(300);\n         template.sendBody(\"direct:getRoute1\", \"Will I get replicated cache\");\n         template.sendBody(\"direct:getRoute2\", \"Will I get replicated cache\");", "sourceBeforeFix": "Thread.sleep(200)", "sourceAfterFix": "Thread.sleep(300)"}
{"fixCommitSHA1": "291e15e330c9b71a0d0238e9d56d4b2a473356af", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "         context.addRoutes(new RouteBuilder() {\n             @Override\n             public void configure() throws Exception {\n                from(\"direct:bar\").transform(to(\"bar\"));\n             }\n         });\n         context.start();", "fixed": "         context.addRoutes(new RouteBuilder() {\n             @Override\n             public void configure() throws Exception {\n                from(\"direct:bar\").transform(sendTo(\"bar\"));\n             }\n         });\n         context.start();", "sourceBeforeFix": "to(\"direct:foo\")", "sourceAfterFix": "sendTo(\"direct:foo\")"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15863, value = \"%s is not a valid URL -- %s\")\n     String invalidUrl(String url, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10863, value = \"%s is not a valid URL -- %s\")\n     String invalidUrl(String url, String message);\n     /**", "sourceBeforeFix": "id=15857", "sourceAfterFix": "id=10857"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should execute sql containing group by\n \t */\n \t@Authorized(PrivilegeConstants.SQL_LEVEL_ACCESS)\n\tpublic List<List<Object>> executeSQL(String sql, boolean selectOnly) throws APIException;\n \t/**\n \t * Get the implementation id stored for this server Returns null if no implementation id has", "fixed": " \t * @should execute sql containing group by\n \t */\n \t@Authorized(PrivilegeConstants.SQL_LEVEL_ACCESS)\n\tpublic List<List<Object>> executeSQL(String sql, boolean selectOnly);\n \t/**\n \t * Get the implementation id stored for this server Returns null if no implementation id has", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedByMe() throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",\n                 null, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedByMe() throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",\n                 null, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\",true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "754ce8b22266079179c9f1275c11fd8364c1b510", "projectName": "apache.storm", "bugType": "Change Identifier Used", "problem": "                         newVal.count = val.count;\n                     }\n                     newVal.count = newVal.count + _counts.get(key);\n                    COUNT_DATABASE.put(key, val);\n                 } else {\n                     newVal = val;\n                 }", "fixed": "                         newVal.count = val.count;\n                     }\n                     newVal.count = newVal.count + _counts.get(key);\n                    COUNT_DATABASE.put(key, newVal);\n                 } else {\n                     newVal = val;\n                 }", "sourceBeforeFix": "COUNT_DATABASE.put(key,val)", "sourceAfterFix": "COUNT_DATABASE.put(key,newVal)"}
{"fixCommitSHA1": "6ee23cf9e0aa553bf293af91f592c9fac499f7b3", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "             URL url3 = bundle.getEntry(META_INF_FALLBACK_TYPE_CONVERTER);\n             if (url1 != null || url2 != null || url3 != null) {\n                 LOG.debug(\"Found TypeConverter in bundle {}\", bundle.getSymbolicName());\n                resolvers.add(new BundleTypeConverterLoader(bundle, url2 != null));\n             }\n         }\n     }", "fixed": "             URL url3 = bundle.getEntry(META_INF_FALLBACK_TYPE_CONVERTER);\n             if (url1 != null || url2 != null || url3 != null) {\n                 LOG.debug(\"Found TypeConverter in bundle {}\", bundle.getSymbolicName());\n                resolvers.add(new BundleTypeConverterLoader(bundle, url3 != null));\n             }\n         }\n     }", "sourceBeforeFix": "url2 != null", "sourceAfterFix": "url3 != null"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  private final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "96d28a7ac975cd67a0697d7010e89473bb0716e1", "projectName": "facebook.presto", "bugType": "Change Caller in Function Call", "problem": "         if (length >= DIRECT_FLUSH_SIZE) {\n             flushBufferToOutputStream();\n            writeDirectlyToOutputStream((byte[]) source.getBase(), sourceIndex + (int) (slice.getAddress() - ARRAY_BYTE_BASE_OFFSET), length);\n             bufferOffset += length;\n         }\n         else {", "fixed": "         if (length >= DIRECT_FLUSH_SIZE) {\n             flushBufferToOutputStream();\n            writeDirectlyToOutputStream((byte[]) source.getBase(), sourceIndex + (int) (source.getAddress() - ARRAY_BYTE_BASE_OFFSET), length);\n             bufferOffset += length;\n         }\n         else {", "sourceBeforeFix": "slice.getAddress()", "sourceAfterFix": "source.getAddress()"}
{"fixCommitSHA1": "73627df082ff499af4ca1c482f79e304905007eb", "projectName": "alibaba.canal", "bugType": "Same Function More Args", "problem": "             long key_length = m_data.getUint16();\n            return m_data.rewind().forward((int) key_offset).getFixString((int) key_length);\n         }\n        public Json_Value element(int i) {\n             m_data.rewind();\n             int offset_size = m_large ? LARGE_OFFSET_SIZE : SMALL_OFFSET_SIZE;\n             int key_entry_size = m_large ? KEY_ENTRY_SIZE_LARGE : KEY_ENTRY_SIZE_SMALL;", "fixed": "             long key_length = m_data.getUint16();\n            return m_data.rewind().forward((int) key_offset).getFixString((int) key_length, charsetName);\n         }\n        public Json_Value element(int i, String charsetName) {\n             m_data.rewind();\n             int offset_size = m_large ? LARGE_OFFSET_SIZE : SMALL_OFFSET_SIZE;\n             int key_entry_size = m_large ? KEY_ENTRY_SIZE_LARGE : KEY_ENTRY_SIZE_SMALL;", "sourceBeforeFix": "buffer.rewind().forward((int)n).getFixString((int)str_len)", "sourceAfterFix": "buffer.rewind().forward((int)n).getFixString((int)str_len,charsetName)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15850, value = \"No handler for operation %s at address %s\")\n     String noHandlerForOperation(String operationName, PathAddress address);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10850, value = \"No handler for operation %s at address %s\")\n     String noHandlerForOperation(String operationName, PathAddress address);\n     /**", "sourceBeforeFix": "id=15860", "sourceAfterFix": "id=10860"}
{"fixCommitSHA1": "d2b19965df52e66385a2d7146887a44cea50330a", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "   }\n   private void externExports() {\n    logger.info(\"Creating extern file for exports\");\n     startPass(\"externExports\");\n     ExternExportsPass pass = new ExternExportsPass(this);", "fixed": "   }\n   private void externExports() {\n    logger.fine(\"Creating extern file for exports\");\n     startPass(\"externExports\");\n     ExternExportsPass pass = new ExternExportsPass(this);", "sourceBeforeFix": "logger.info(\"Creating extern file for exports\")", "sourceAfterFix": "logger.fine(\"Creating extern file for exports\")"}
{"fixCommitSHA1": "150cc0a5beacbec117eb141846a4c6f1aeab5847", "projectName": "Atmosphere.atmosphere", "bugType": "Wrong Function Name", "problem": "             logger.debug(\"The WebSocket handshake succeeded but the dispatched URI failed {}:{}. \" +\n                     \"The WebSocket connection is still open and client can continue sending messages.\", message, errorCode);\n         } else {\n            logger.warn(\"{} {}\", errorCode, message);\n         }\n     }", "fixed": "             logger.debug(\"The WebSocket handshake succeeded but the dispatched URI failed {}:{}. \" +\n                     \"The WebSocket connection is still open and client can continue sending messages.\", message, errorCode);\n         } else {\n            logger.debug(\"{} {}\", errorCode, message);\n         }\n     }", "sourceBeforeFix": "logger.warn(\"{} {}\",errorCode,message)", "sourceAfterFix": "logger.debug(\"{} {}\",errorCode,message)"}
{"fixCommitSHA1": "86f74100e3f5a30bf3ecaf4be00c0b59bda096ac", "projectName": "Alluxio.alluxio", "bugType": "Wrong Function Name", "problem": "     UnderFileSystem ufs = UnderFileSystem.get(path);\n     DataInputStream is = new DataInputStream(ufs.open(path));\n    JsonParser parser = JsonObject.createObjectMapper().getJsonFactory().createJsonParser(is);\n     while (true) {\n       EditLogOperation op;", "fixed": "     UnderFileSystem ufs = UnderFileSystem.get(path);\n     DataInputStream is = new DataInputStream(ufs.open(path));\n    JsonParser parser = JsonObject.createObjectMapper().getFactory().createParser(is);\n     while (true) {\n       EditLogOperation op;", "sourceBeforeFix": "JsonObject.createObjectMapper().getJsonFactory()", "sourceAfterFix": "JsonObject.createObjectMapper().getFactory()"}
{"fixCommitSHA1": "e97382e401f58108ad645dee2076ddd110a3e7e9", "projectName": "facebook.presto", "bugType": "Change Identifier Used", "problem": "             throw new IOException(\"Failed to list directory: \" + dir);\n         }\n         for (File file : files) {\n            Files.delete(file.toPath());\n         }\n        Files.delete(dir.toPath());\n     }\n }", "fixed": "             throw new IOException(\"Failed to list directory: \" + dir);\n         }\n         for (File file : files) {\n            Files.deleteIfExists(file.toPath());\n         }\n        Files.deleteIfExists(dir.toPath());\n     }\n }", "sourceBeforeFix": "Files.delete(dir.toPath())", "sourceAfterFix": "Files.deleteIfExists(dir.toPath())"}
{"fixCommitSHA1": "e2efffc72002968f835a0ea6a70f8e7762752b15", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": " \t@Test(expected = DuplicateConceptNameException.class)\r\n \t@Verifies(value = \"should fail if there is a duplicate unretired preferred name in the same locale\", method = \"validate(Object,Errors)\")\r\n \tpublic void validate_shouldFailIfThereIsADuplicateUnretiredPreferredNameInTheSameLocale() throws Exception {\r\n\t\tContext.setLocale(Context.getLocale());\r\n \t\tConcept concept = Context.getConceptService().getConcept(5497);\r\n \t\tConceptName preferredName = new ConceptName(\"preferred name\", Context.getLocale());\r\n \t\tconcept.setPreferredName(preferredName);\r", "fixed": " \t@Test(expected = DuplicateConceptNameException.class)\r\n \t@Verifies(value = \"should fail if there is a duplicate unretired preferred name in the same locale\", method = \"validate(Object,Errors)\")\r\n \tpublic void validate_shouldFailIfThereIsADuplicateUnretiredPreferredNameInTheSameLocale() throws Exception {\r\n\t\tContext.setLocale(new Locale(\"en\"));\r\n \t\tConcept concept = Context.getConceptService().getConcept(5497);\r\n \t\tConceptName preferredName = new ConceptName(\"preferred name\", Context.getLocale());\r\n \t\tconcept.setPreferredName(preferredName);\r", "sourceBeforeFix": "new BindException(concept,\"concept\")", "sourceAfterFix": "new BindException(newConcept,\"concept\")"}
{"fixCommitSHA1": "9771ba62390a56363b20e52f12a8b9b34c51da62", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "     public void testSamplingUsingmessageFrequencyViaDSL() throws Exception {\n         long totalMessages = 50;\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedMessageCount(10);\n         mock.setResultWaitTime(100);\n         for (int i = 0; i < totalMessages; i++) {", "fixed": "     public void testSamplingUsingmessageFrequencyViaDSL() throws Exception {\n         long totalMessages = 50;\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedMinimumMessageCount(10);\n         mock.setResultWaitTime(100);\n         for (int i = 0; i < totalMessages; i++) {", "sourceBeforeFix": "mock.expectedMessageCount(2)", "sourceAfterFix": "mock.expectedMinimumMessageCount(2)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface FtpEndpointBuilder\n             extends\n                 FtpEndpointConsumerBuilder, FtpEndpointProducerBuilder {\n         default AdvancedFtpEndpointBuilder advanced() {", "fixed": "     \n    public interface FtpEndpointBuilder\n             extends\n                 FtpEndpointConsumerBuilder, FtpEndpointProducerBuilder {\n         default AdvancedFtpEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "5bf9d31d91a6e45bed5cf0e878431004765c9b86", "projectName": "spring-projects.spring-boot", "bugType": "Change Modifier", "problem": " \tprivate final OAuth2ResourceServerProperties properties;\n\tpublic OAuth2ResourceServerJwkConfiguration(\n\t\t\tOAuth2ResourceServerProperties properties) {\n \t\tthis.properties = properties;\n \t}", "fixed": " \tprivate final OAuth2ResourceServerProperties properties;\n\tOAuth2ResourceServerJwkConfiguration(OAuth2ResourceServerProperties properties) {\n \t\tthis.properties = properties;\n \t}", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "04a010c8499fbc96b1e5a99bdbebaf0b38d24586", "projectName": "libgdx.libgdx", "bugType": "Change Binary Operator", "problem": " \tpublic void addAll (short[] array, int offset, int length) {\r\n \t\tshort[] items = this.items;\r\n \t\tint sizeNeeded = size + length;\r\n\t\tif (sizeNeeded >= items.length) items = resize(Math.max(8, (int)(sizeNeeded * 1.75f)));\r\n \t\tSystem.arraycopy(array, offset, items, size, length);\r\n \t\tsize += length;\r\n \t}\r", "fixed": " \tpublic void addAll (short[] array, int offset, int length) {\r\n \t\tshort[] items = this.items;\r\n \t\tint sizeNeeded = size + length;\r\n\t\tif (sizeNeeded > items.length) items = resize(Math.max(8, (int)(sizeNeeded * 1.75f)));\r\n \t\tSystem.arraycopy(array, offset, items, size, length);\r\n \t\tsize += length;\r\n \t}\r", "sourceBeforeFix": "sizeNeeded >= items.length", "sourceAfterFix": "sizeNeeded > items.length"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15865, value = \"Invalid content declaration\")\n     String invalidContentDeclaration();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10865, value = \"Invalid content declaration\")\n     String invalidContentDeclaration();\n     /**", "sourceBeforeFix": "id=15833", "sourceAfterFix": "id=10833"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface EventAdminEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedEventAdminEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface EventAdminEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedEventAdminEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface CassandraEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedCassandraEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface CassandraEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedCassandraEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public Trends getTrends() throws TwitterException {\n        return Trends.constructTrends(get(getSearchBaseURL() + \"trends.json\", false));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n      */\n     public Trends getTrends() throws TwitterException {\n        return Trends.createTrends(get(getSearchBaseURL() + \"trends.json\", false));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/public_timeline.json\",false))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/public_timeline.json\",false))"}
{"fixCommitSHA1": "3ae48a8191bda71e900bee767847ce56873a8c57", "projectName": "druid-io.druid", "bugType": "Change Identifier Used", "problem": " public class S3DataSegmentMover implements DataSegmentMover\n {\n  private static final Logger log = new Logger(S3DataSegmentKiller.class);\n   private final RestS3Service s3Client;\n   private final S3DataSegmentMoverConfig config;", "fixed": " public class S3DataSegmentMover implements DataSegmentMover\n {\n  private static final Logger log = new Logger(S3DataSegmentMover.class);\n   private final RestS3Service s3Client;\n   private final S3DataSegmentMoverConfig config;", "sourceBeforeFix": "S3DataSegmentKiller.class", "sourceAfterFix": "S3DataSegmentMover.class"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should save properties with case difference only\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_GLOBAL_PROPERTIES)\n\tpublic List<GlobalProperty> saveGlobalProperties(List<GlobalProperty> props) throws APIException;\n \t/**\n \t * Completely remove the given global property from the database", "fixed": " \t * @should save properties with case difference only\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_GLOBAL_PROPERTIES)\n\tpublic List<GlobalProperty> saveGlobalProperties(List<GlobalProperty> props);\n \t/**\n \t * Completely remove the given global property from the database", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "39c42c2dc347f1d8b10311c09e436fd4ade63c4c", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t\t\tconnection.setDoOutput(doingOutPut);\r\n \t\t\tconnection.setDoInput(true);\r\n \t\t\tconnection.setRequestMethod(method);\r\n\t\t\tconnection.setFollowRedirects(httpRequest.getFollowRedirects());\r\n \t\t\tlock.lock();\r\n \t\t\tconnections.put(httpRequest, connection);\r", "fixed": " \t\t\tconnection.setDoOutput(doingOutPut);\r\n \t\t\tconnection.setDoInput(true);\r\n \t\t\tconnection.setRequestMethod(method);\r\n\t\t\tHttpURLConnection.setFollowRedirects(httpRequest.getFollowRedirects());\r\n \t\t\tlock.lock();\r\n \t\t\tconnections.put(httpRequest, connection);\r", "sourceBeforeFix": "connection.setFollowRedirects(httpRequest.getFollowRedirects())", "sourceAfterFix": "HttpURLConnection.setFollowRedirects(httpRequest.getFollowRedirects())"}
{"fixCommitSHA1": "423fca2f16ef73c1e4bce7cf11660a510be1456e", "projectName": "apache.hbase", "bugType": "Wrong Function Name", "problem": "       return false;\n     }\n     if (!info.isOffline()) {\n      LOG.warn(\"Region is split but not offline: \" + info.getRegionName());\n     }\n     return true;\n   }", "fixed": "       return false;\n     }\n     if (!info.isOffline()) {\n      LOG.warn(\"Region is split but not offline: \" +\n        info.getRegionNameAsString());\n     }\n     return true;\n   }", "sourceBeforeFix": "info.getRegionName()", "sourceAfterFix": "info.getRegionNameAsString()"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_de() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"06.05.2016\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_de() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"06.05.2016\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "fixed": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2fv(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2fv(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "sourceBeforeFix": "GL20.glUniform3(location,v)", "sourceAfterFix": "GL20.glUniform3iv(location,v)"}
{"fixCommitSHA1": "811f7b2271556befe5b0e74c3881d34fe1531252", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Wrong Function Name", "problem": "                         }\n                     }\n                     nettyRequest.setHeader(HttpHeaders.Names.CONTENT_LENGTH, String.valueOf(sb.length()));\n                    nettyRequest.setContent(ChannelBuffers.copiedBuffer(sb.toString().getBytes(bodyCharset)));\n                     if (!request.getHeaders().containsKey(HttpHeaders.Names.CONTENT_TYPE)) {\n                         nettyRequest.setHeader(HttpHeaders.Names.CONTENT_TYPE, \"application/x-www-form-urlencoded\");", "fixed": "                         }\n                     }\n                     nettyRequest.setHeader(HttpHeaders.Names.CONTENT_LENGTH, String.valueOf(sb.length()));\n                    nettyRequest.setContent(ChannelBuffers.wrappedBuffer(sb.toString().getBytes(bodyCharset)));\n                     if (!request.getHeaders().containsKey(HttpHeaders.Names.CONTENT_TYPE)) {\n                         nettyRequest.setHeader(HttpHeaders.Names.CONTENT_TYPE, \"application/x-www-form-urlencoded\");", "sourceBeforeFix": "ChannelBuffers.copiedBuffer(sb.toString().getBytes(bodyCharset))", "sourceAfterFix": "ChannelBuffers.wrappedBuffer(sb.toString().getBytes(bodyCharset))"}
{"fixCommitSHA1": "a35860eadb4400f069e306ccd76f1a19ecfb3ba1", "projectName": "google.guava", "bugType": "Change Identifier Used", "problem": "   }\n   @Override\n  public N oppositeNode(Object edge) {\n     return checkNotNull(incidentEdgeMap.get(edge));\n   }\n   @Override\n  public N removeInEdge(Object edge, boolean isSelfLoop) {\n     if (!isSelfLoop) {\n       return removeOutEdge(edge);\n     }", "fixed": "   }\n   @Override\n  public N adjacentNode(E edge) {\n     return checkNotNull(incidentEdgeMap.get(edge));\n   }\n   @Override\n  public N removeInEdge(E edge, boolean isSelfLoop) {\n     if (!isSelfLoop) {\n       return removeOutEdge(edge);\n     }", "sourceBeforeFix": "Object edge", "sourceAfterFix": "E edge"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15834, value = \"%s recognizes only %s as children: %s\")\n     String unrecognizedChildren(String parent, String children, String parentSpec);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10834, value = \"%s recognizes only %s as children: %s\")\n     String unrecognizedChildren(String parent, String children, String parentSpec);\n     /**", "sourceBeforeFix": "id=15833", "sourceAfterFix": "id=10833"}
{"fixCommitSHA1": "f8c20919f9c2e18e48142c2712e34298f98b983e", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Test\n \tpublic void startServletAndFilter() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n\t\tthis.container = factory.getEmbdeddedServletContainer(\n \t\t\t\texampleServletRegistration(), new FilterRegistrationBean(\n \t\t\t\t\t\tnew ExampleFilter()));\nassertThat(getResponse(\"http:", "fixed": " \t@Test\n \tpublic void startServletAndFilter() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n\t\tthis.container = factory.getEmbeddedServletContainer(\n \t\t\t\texampleServletRegistration(), new FilterRegistrationBean(\n \t\t\t\t\t\tnew ExampleFilter()));\nassertThat(getResponse(\"http:", "sourceBeforeFix": "factory.getEmbdeddedServletContainer()", "sourceAfterFix": "factory.getEmbeddedServletContainer()"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetProgramiv (int program, int pname, IntBuffer params) {\r\n\t\tGL20.glGetProgram(program, pname, params);\r\n \t}\r\n \tpublic void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tEXTFramebufferObject.glGetRenderbufferParameterEXT(target, pname, params);\r\n \t}\r\n \tpublic String glGetShaderInfoLog (int shader) {\r", "fixed": " \t}\r\n \tpublic void glGetProgramiv (int program, int pname, IntBuffer params) {\r\n\t\tGL20.glGetProgramiv(program, pname, params);\r\n \t}\r\n \tpublic void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tEXTFramebufferObject.glGetRenderbufferParameterivEXT(target, pname, params);\r\n \t}\r\n \tpublic String glGetShaderInfoLog (int shader) {\r", "sourceBeforeFix": "GL20.glUniformMatrix4(location,transpose,value)", "sourceAfterFix": "GL20.glUniformMatrix4fv(location,transpose,value)"}
{"fixCommitSHA1": "51271a02806489a2e2b5539475eb2131fd29b77d", "projectName": "google.closure-compiler", "bugType": "Change Caller in Function Call", "problem": "         }\n         if ((verifyGetterAndSetterUpdates || verifyNoNewGettersOrSetters) && i == 0) {\n          GatherGettersAndSetterProperties.update(compiler, externsRoot, mainRoot);\n         }\n         recentChange.reset();", "fixed": "         }\n         if ((verifyGetterAndSetterUpdates || verifyNoNewGettersOrSetters) && i == 0) {\n          GatherGetterAndSetterProperties.update(compiler, externsRoot, mainRoot);\n         }\n         recentChange.reset();", "sourceBeforeFix": "GatherGettersAndSetterProperties.gather(compiler,externsRoot)", "sourceAfterFix": "GatherGetterAndSetterProperties.gather(compiler,externsRoot)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "72b86ae3aa6b084fc0cacf3ad86506ac9cf6486b", "projectName": "openhab.openhab", "bugType": "Change Identifier Used", "problem": " \t\ttry {\n \t\t\titem = getItem(itemName);\n \t\t} catch (ItemNotFoundException e) {\n\t\t\tlogger.error(\"Cannot retrieve item {} for widget {}\", itemName, w.eClass().getInstanceTypeName());\n \t\t}\n \t\treturn formatLabel(item, itemName, label);\n \t}", "fixed": " \t\ttry {\n \t\t\titem = getItem(itemName);\n \t\t} catch (ItemNotFoundException e) {\n\t\t\tlogger.debug(\"Cannot retrieve item {} for widget {}\", itemName, w.eClass().getInstanceTypeName());\n \t\t}\n \t\treturn formatLabel(item, itemName, label);\n \t}", "sourceBeforeFix": "logger.error(\"Cannot retrieve item {} for widget {}\",itemName,w.eClass().getInstanceTypeName())", "sourceAfterFix": "logger.debug(\"Cannot retrieve item {} for widget {}\",itemName,w.eClass().getInstanceTypeName())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleAlternativesWithCommonLabel_1() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(561);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "fixed": " \tpublic void testMultipleAlternativesWithCommonLabel_1() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(560);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "sourceBeforeFix": "new StringBuilder(561)", "sourceAfterFix": "new StringBuilder(560)"}
{"fixCommitSHA1": "54e74976040f09efb4a645107f6963ddc5b344ec", "projectName": "neo4j.neo4j", "bugType": "Change Numeric Literal", "problem": " final class MuninnPagedFile implements PagedFile\n {\n     private static int stripeFactor = Integer.getInteger(\n            \"org.neo4j.io.pagecache.impl.muninn.MuninnPagedFile.stripeFactor\", 8 );\n     static final int translationTableStripeLevel = 1 << stripeFactor;\n     static final int translationTableStripeMask = translationTableStripeLevel - 1;", "fixed": " final class MuninnPagedFile implements PagedFile\n {\n     private static int stripeFactor = Integer.getInteger(\n            \"org.neo4j.io.pagecache.impl.muninn.MuninnPagedFile.stripeFactor\", 10 );\n     static final int translationTableStripeLevel = 1 << stripeFactor;\n     static final int translationTableStripeMask = translationTableStripeLevel - 1;", "sourceBeforeFix": "Integer.getInteger(\"org.neo4j.io.pagecache.impl.muninn.MuninnPagedFile.stripeFactor\",8)", "sourceAfterFix": "Integer.getInteger(\"org.neo4j.io.pagecache.impl.muninn.MuninnPagedFile.stripeFactor\",10)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "53f6920929a7e40f680806fd727c195314f92414", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": "* @see org.openmrs.api.db.ConceptDAO\n \t */\r\n \t@Override\r\n\tpublic Integer getCountOfConceptReferenceTerms(String query, ConceptSource conceptSource, boolean includeRetired)\r\n \t        throws DAOException {\r\n \t\tCriteria criteria = createConceptReferenceTermCriteria(query, conceptSource, includeRetired);\r\n \t\tcriteria.setProjection(Projections.rowCount());\r\n\t\treturn (Integer) criteria.uniqueResult();\r\n \t}\r\n \t/**\r", "fixed": "* @see org.openmrs.api.db.ConceptDAO\n \t */\r\n \t@Override\r\n\tpublic Long getCountOfConceptReferenceTerms(String query, ConceptSource conceptSource, boolean includeRetired)\r\n \t        throws DAOException {\r\n \t\tCriteria criteria = createConceptReferenceTermCriteria(query, conceptSource, includeRetired);\r\n \t\tcriteria.setProjection(Projections.rowCount());\r\n\t\treturn (Long) criteria.uniqueResult();\r\n \t}\r\n \t/**\r", "sourceBeforeFix": "(Integer)criteria.uniqueResult()", "sourceAfterFix": "(Long)criteria.uniqueResult()"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "fixed": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttribfv(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttribiv(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "sourceBeforeFix": "GL20.glUniformMatrix2(location,transpose,value)", "sourceAfterFix": "GL20.glUniformMatrix2fv(location,transpose,value)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "7d5e825abd68a4ffcb86865149b917edf76a47b6", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "         protected ClassInfo(final Token className)\n         {\n             if (className == null) {\n                throw new NullPointerException(\n                     \"ClassInfo's name should be non-null\");\n             }\n             name = className;", "fixed": "         protected ClassInfo(final Token className)\n         {\n             if (className == null) {\n                throw new IllegalArgumentException(\n                     \"ClassInfo's name should be non-null\");\n             }\n             name = className;", "sourceBeforeFix": "new NullPointerException(\"ClassInfo's name should be non-null\")", "sourceAfterFix": "new IllegalArgumentException(\"ClassInfo's name should be non-null\")"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15855, value = \"Invalid byte stream.\")\n     String invalidByteStream();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10855, value = \"Invalid byte stream.\")\n     String invalidByteStream();\n     /**", "sourceBeforeFix": "id=15849", "sourceAfterFix": "id=10849"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(741);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {Console.WriteLine($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "fixed": " \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(740);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {Console.WriteLine($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "sourceBeforeFix": "new StringBuilder(741)", "sourceAfterFix": "new StringBuilder(740)"}
{"fixCommitSHA1": "e1d89ddbf6028369fd3117ff648fc6f16a1786fe", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "                     LOG.trace(\"OpenTracing: start server span=\" + span);\n                 }\n             } catch (Throwable t) {\n                LOG.error(\"OpenTracing: Failed to capture tracing data\", t);\n             }\n         }", "fixed": "                     LOG.trace(\"OpenTracing: start server span=\" + span);\n                 }\n             } catch (Throwable t) {\n                LOG.warn(\"OpenTracing: Failed to capture tracing data\", t);\n             }\n         }", "sourceBeforeFix": "LOG.error(\"OpenTracing: Failed to capture tracing data\",t)", "sourceAfterFix": "LOG.warn(\"OpenTracing: Failed to capture tracing data\",t)"}
{"fixCommitSHA1": "fc33d6ae99e12f7e90036ec057644e7fd18ff413", "projectName": "netty.netty", "bugType": "Same Function Less Args", "problem": "         String response = \"HTTP/1.1 200 OK\\r\\n\" +\n                 \"Content-Length: 0\\r\\n\\r\\n\";\n        HttpClientCodec codec = new HttpClientCodec(4096, 8192, 8192, true);\n         EmbeddedChannel ch = new EmbeddedChannel(codec, new HttpObjectAggregator(1024));\nHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, \"http:", "fixed": "         String response = \"HTTP/1.1 200 OK\\r\\n\" +\n                 \"Content-Length: 0\\r\\n\\r\\n\";\n        HttpClientCodec codec = new HttpClientCodec(4096, 8192, true);\n         EmbeddedChannel ch = new EmbeddedChannel(codec, new HttpObjectAggregator(1024));\nHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, \"http:", "sourceBeforeFix": "new HttpClientCodec(4096,8192,8192,true)", "sourceAfterFix": "new HttpClientCodec(4096,8192,true)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedXmppEndpointBuilder\n             extends\n                 AdvancedXmppEndpointConsumerBuilder, AdvancedXmppEndpointProducerBuilder {\n         default XmppEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedXmppEndpointBuilder\n             extends\n                 AdvancedXmppEndpointConsumerBuilder, AdvancedXmppEndpointProducerBuilder {\n         default XmppEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "83b9dd427535bce39be43a9e8224cdbc352d7427", "projectName": "square.okhttp", "bugType": "Change Modifier", "problem": "   static class DelegatingSSLSocketFactory extends SSLSocketFactory {\n     protected final SSLSocketFactory delegate;\n    public DelegatingSSLSocketFactory(SSLSocketFactory delegate) {\n       this.delegate = delegate;\n     }", "fixed": "   static class DelegatingSSLSocketFactory extends SSLSocketFactory {\n     protected final SSLSocketFactory delegate;\n    DelegatingSSLSocketFactory(SSLSocketFactory delegate) {\n       this.delegate = delegate;\n     }", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "fdc7364eed4eb249360225153c5ced9a036f97f7", "projectName": "Alluxio.alluxio", "bugType": "Change Modifier", "problem": "    * @param workerClient the worker client to release, the client should not be accessed after this\n    *        method is called\n    */\n  public synchronized void releaseWorkerClient(WorkerClient workerClient) {\n     if (workerClient.isLocal()) {", "fixed": "    * @param workerClient the worker client to release, the client should not be accessed after this\n    *        method is called\n    */\n  public void releaseWorkerClient(WorkerClient workerClient) {\n     if (workerClient.isLocal()) {", "sourceBeforeFix": "33", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedFileEndpointBuilder\n             extends\n                 AdvancedFileEndpointConsumerBuilder, AdvancedFileEndpointProducerBuilder {\n         default FileEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedFileEndpointBuilder\n             extends\n                 AdvancedFileEndpointConsumerBuilder, AdvancedFileEndpointProducerBuilder {\n         default FileEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface FreemarkerEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedFreemarkerEndpointBuilder advanced() {", "fixed": "     \n    public interface FreemarkerEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedFreemarkerEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     return additionalReplacements;\n   }\n  private final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     return additionalReplacements;\n   }\n  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "4b52e5d010469405c1ec24baa2f8457f3eada222", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic boolean mouseMoved (int screenX, int screenY) {\r\n\t\tInputProcessor[] items = processors.begin();\r\n \t\ttry {\r\n \t\t\tfor (int i = 0, n = processors.size; i < n; i++)\r\n\t\t\t\tif (items[i].mouseMoved(screenX, screenY)) return true;\r\n \t\t} finally {\r\n \t\t\tprocessors.end();\r\n \t\t}\r", "fixed": " \t}\r\n \tpublic boolean mouseMoved (int screenX, int screenY) {\r\n\t\tObject[] items = processors.begin();\r\n \t\ttry {\r\n \t\t\tfor (int i = 0, n = processors.size; i < n; i++)\r\n\t\t\t\tif (((InputProcessor)items[i]).mouseMoved(screenX, screenY)) return true;\r\n \t\t} finally {\r\n \t\t\tprocessors.end();\r\n \t\t}\r", "sourceBeforeFix": "InputProcessor[]", "sourceAfterFix": "Object[]"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweets(long statusId) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL()\n                 + \"statuses/retweets/\" + statusId + \".json\", true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweets(long statusId) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL()\n                 + \"statuses/retweets/\" + statusId + \".json\", true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\",true))"}
{"fixCommitSHA1": "dfe3f3d12a21b271da997afe5ee408453630e034", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Wrong Function Name", "problem": "                     .append(getPort(uri)).toString());\n             nettyRequest = new DefaultHttpRequest(HttpVersion.HTTP_1_0, m, uri.toString());\n         } else if (config.getProxyServer() != null || request.getProxyServer() != null) {\n            nettyRequest = new DefaultHttpRequest(HttpVersion.HTTP_1_1, m, uri.getPath());\n         } else {\n             StringBuilder path = new StringBuilder(uri.getRawPath());\n             if (uri.getQuery() != null) {", "fixed": "                     .append(getPort(uri)).toString());\n             nettyRequest = new DefaultHttpRequest(HttpVersion.HTTP_1_0, m, uri.toString());\n         } else if (config.getProxyServer() != null || request.getProxyServer() != null) {\n            nettyRequest = new DefaultHttpRequest(HttpVersion.HTTP_1_1, m, uri.toString());\n         } else {\n             StringBuilder path = new StringBuilder(uri.getRawPath());\n             if (uri.getQuery() != null) {", "sourceBeforeFix": "uri.getPath()", "sourceAfterFix": "uri.toString()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  private final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "3d80e65129d23b622f3d926eb9b9273cc35757b8", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "         });\n         try {\n            resultEndpoint.assertIsNotSatisfied();\n             fail(\"Should fail\");\n         } catch (AssertionError e) {\nassertEquals(\"mock:\n         }\n     }", "fixed": "         });\n         try {\n            resultEndpoint.assertIsSatisfied();\n             fail(\"Should fail\");\n         } catch (AssertionError e) {\nassertEquals(\"mock:\n         }\n     }", "sourceBeforeFix": "resultEndpoint.assertIsNotSatisfied()", "sourceAfterFix": "resultEndpoint.assertIsSatisfied()"}
{"fixCommitSHA1": "2f77b4e6a3f1ab8bd855476a15a4ab2f6f7ae32c", "projectName": "neo4j.neo4j", "bugType": "Change Identifier Used", "problem": "         \t\t\"RETURN file.name, dir.name, role.name, readUser.name\";\n         gen.get().addSnippet( \"query3\", createCypherSnippet( query ) );\n         result = engine.execute( query )\n                .toString();\n         assertTrue( result.contains(\"File1\") );\n         assertTrue( result.contains(\"File2\") );\n         assertTrue( result.contains(\"Admin1\") );", "fixed": "         \t\t\"RETURN file.name, dir.name, role.name, readUser.name\";\n         gen.get().addSnippet( \"query3\", createCypherSnippet( query ) );\n         result = engine.execute( query )\n                .dumpToString();\n         assertTrue( result.contains(\"File1\") );\n         assertTrue( result.contains(\"File2\") );\n         assertTrue( result.contains(\"Admin1\") );", "sourceBeforeFix": "engine.execute(query).toString()", "sourceAfterFix": "engine.execute(query).dumpToString()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15859, value = \"A slave domain controller cannot accept deployment content uploads\")\n     String slaveCannotAcceptUploads();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10859, value = \"A slave domain controller cannot accept deployment content uploads\")\n     String slaveCannotAcceptUploads();\n     /**", "sourceBeforeFix": "id=15857", "sourceAfterFix": "id=10857"}
{"fixCommitSHA1": "4e528c10fae3abaa932e751c831aa48a23645744", "projectName": "netty.netty", "bugType": "Change Modifier", "problem": "     private final Queue<MessageEvent> queue = QueueFactory.createQueue(MessageEvent.class);\n    private ChannelHandlerContext ctx;\n     private MessageEvent currentEvent;\n     /**", "fixed": "     private final Queue<MessageEvent> queue = QueueFactory.createQueue(MessageEvent.class);\n    private volatile ChannelHandlerContext ctx;\n     private MessageEvent currentEvent;\n     /**", "sourceBeforeFix": "2", "sourceAfterFix": "66"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 15866, value = \"%s is null\")\n     IllegalArgumentException nullVar(String name);\n     /**", "fixed": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 10866, value = \"%s is null\")\n     IllegalArgumentException nullVar(String name);\n     /**", "sourceBeforeFix": "id=15871", "sourceAfterFix": "id=10871"}
{"fixCommitSHA1": "df2d6b370eaa8d29822b928b0f307cb6918dfe4f", "projectName": "spring-projects.spring-boot", "bugType": "Wrong Function Name", "problem": " \t\tload(CustomArgumentResolvers.class);\n \t\tRequestMappingHandlerAdapter adapter = this.context\n \t\t\t\t.getBean(RequestMappingHandlerAdapter.class);\n\t\tassertThat(adapter.getArgumentResolvers()).contains(\n \t\t\t\tthis.context.getBean(\"firstResolver\",\n \t\t\t\t\t\tHandlerMethodArgumentResolver.class),\n \t\t\t\tthis.context.getBean(\"secondResolver\",", "fixed": " \t\tload(CustomArgumentResolvers.class);\n \t\tRequestMappingHandlerAdapter adapter = this.context\n \t\t\t\t.getBean(RequestMappingHandlerAdapter.class);\n\t\tassertThat(adapter.getCustomArgumentResolvers()).contains(\n \t\t\t\tthis.context.getBean(\"firstResolver\",\n \t\t\t\t\t\tHandlerMethodArgumentResolver.class),\n \t\t\t\tthis.context.getBean(\"secondResolver\",", "sourceBeforeFix": "adapter.getArgumentResolvers()", "sourceAfterFix": "adapter.getCustomArgumentResolvers()"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedToMe() throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_to_me.json\",\n                 null, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedToMe() throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_to_me.json\",\n                 null, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))"}
{"fixCommitSHA1": "c9a1cc9df3dc4fe2eef78ad6090a9b1d95a02557", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "             .setXmlName(Attribute.SHUTDOWN_TIMEOUT.getLocalName())\n             .setAllowExpression(true)\n             .setFlags(AttributeAccess.Flag.RESTART_ALL_SERVICES)\n            .setDefaultValue(new ModelNode().set(25000))\n             .build();\n     static final SimpleAttributeDefinition THREAD_POOL_SIZE = new SimpleAttributeDefinitionBuilder(ModelKeys.THREAD_POOL_SIZE, ModelType.INT, true)", "fixed": "             .setXmlName(Attribute.SHUTDOWN_TIMEOUT.getLocalName())\n             .setAllowExpression(true)\n             .setFlags(AttributeAccess.Flag.RESTART_ALL_SERVICES)\n            .setDefaultValue(new ModelNode().set(25000L))\n             .build();\n     static final SimpleAttributeDefinition THREAD_POOL_SIZE = new SimpleAttributeDefinitionBuilder(ModelKeys.THREAD_POOL_SIZE, ModelType.INT, true)", "sourceBeforeFix": "new ModelNode().set(1)", "sourceAfterFix": "new ModelNode().set(1L)"}
{"fixCommitSHA1": "8777c0882b68f70d662d21b862b0db35cf50826d", "projectName": "google.closure-compiler", "bugType": "Missing Throws Exception", "problem": "      * @param entryValues The number of entries in the array.\n      * @return The entry object.\n      */\n    private Entry decodeEntry(int[] vals, int entryValues) {\n       Entry entry;\n       switch (entryValues) {", "fixed": "      * @param entryValues The number of entries in the array.\n      * @return The entry object.\n      */\n    private Entry decodeEntry(int[] vals, int entryValues) throws SourceMapParseException {\n       Entry entry;\n       switch (entryValues) {", "sourceBeforeFix": "2", "sourceAfterFix": "2"}
{"fixCommitSHA1": "994da4e53abe98a0f0004d7bb8c57e08c621570d", "projectName": "Atmosphere.atmosphere", "bugType": "Same Function More Args", "problem": "         c.add(new Cookie(\"yo\", \"man\"));\n         AtmosphereRequest request = new AtmosphereRequest.Builder().cookies(c).pathInfo(\"/a\").build();\n        processor.open(w, request);\n         r.get().getBroadcaster().broadcast(\"yo\").get();\n         assertNotNull(cValue.get());", "fixed": "         c.add(new Cookie(\"yo\", \"man\"));\n         AtmosphereRequest request = new AtmosphereRequest.Builder().cookies(c).pathInfo(\"/a\").build();\n        processor.open(w, request, AtmosphereResponse.newInstance(framework.getAtmosphereConfig(), request, w));\n         r.get().getBroadcaster().broadcast(\"yo\").get();\n         assertNotNull(cValue.get());", "sourceBeforeFix": "processor.open(w,request)", "sourceAfterFix": "processor.open(w,request,AtmosphereResponse.newInstance(framework.getAtmosphereConfig(),request,w))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  private final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15835, value = IN_SERIES + \" is missing groups: %s\")\n     String inSeriesIsMissingGroups(String rolloutPlan);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10835, value = IN_SERIES + \" is missing groups: %s\")\n     String inSeriesIsMissingGroups(String rolloutPlan);\n     /**", "sourceBeforeFix": "id=15845", "sourceAfterFix": "id=10845"}
{"fixCommitSHA1": "1889d7ed5c71d8e82e3d440962d7d7ef26c0956f", "projectName": "apache.hbase", "bugType": "Change Binary Operator", "problem": "     }\n    if (this.assignmentManager.isRegionInTransition(regionInfo) == null) {\n       this.assignmentManager.regionOnline(regionInfo, serverInfo);\n     } else {\n       LOG.warn(\"Skipping the onlining of \" + regionInfo.getRegionNameAsString() +", "fixed": "     }\n    if (this.assignmentManager.isRegionInTransition(regionInfo) != null) {\n       this.assignmentManager.regionOnline(regionInfo, serverInfo);\n     } else {\n       LOG.warn(\"Skipping the onlining of \" + regionInfo.getRegionNameAsString() +", "sourceBeforeFix": "this.assignmentManager.isRegionInTransition(regionInfo) == null", "sourceAfterFix": "this.assignmentManager.isRegionInTransition(regionInfo) != null"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "c701c832f4baffa635088b8e3e57a900eda2aba6", "projectName": "hazelcast.hazelcast", "bugType": "Change Binary Operator", "problem": "         }\n         private boolean hasRegistrations(String topic) {\n             Collection<Registration> topicRegistrations = registrations.get(topic);\n            return !(topicRegistrations == null && topicRegistrations.isEmpty());\n         }", "fixed": "         }\n         private boolean hasRegistrations(String topic) {\n             Collection<Registration> topicRegistrations = registrations.get(topic);\n            return !(topicRegistrations == null || topicRegistrations.isEmpty());\n         }", "sourceBeforeFix": "topicRegistrations == null && topicRegistrations.isEmpty()", "sourceAfterFix": "topicRegistrations == null || topicRegistrations.isEmpty()"}
{"fixCommitSHA1": "40a36841e2ed139a2a8714ccdafcaee49693f48f", "projectName": "apache.hive", "bugType": "Change Identifier Used", "problem": "         TypeInfo commonTypeInfo = FunctionRegistry.getCommonClassForUnionAll(lInfo.getType(),\n             rInfo.getType());\n         if (commonTypeInfo == null) {\n          throw new SemanticException(generateErrorMessage(tabref,\n               \"Schema of both sides of union should match: Column \" + field + \" is of type \"\n                   + lInfo.getType().getTypeName() + \" on first table and type \"\n                   + rInfo.getType().getTypeName() + \" on second table\"));", "fixed": "         TypeInfo commonTypeInfo = FunctionRegistry.getCommonClassForUnionAll(lInfo.getType(),\n             rInfo.getType());\n         if (commonTypeInfo == null) {\n          throw new OptiqSemanticException(generateErrorMessage(tabref,\n               \"Schema of both sides of union should match: Column \" + field + \" is of type \"\n                   + lInfo.getType().getTypeName() + \" on first table and type \"\n                   + rInfo.getType().getTypeName() + \" on second table\"));", "sourceBeforeFix": "new RuntimeException(\"Invalid Column Reference: \" + grpbyExpr.dump())", "sourceAfterFix": "new OptiqSemanticException(\"Invalid Column Reference: \" + grpbyExpr.dump())"}
{"fixCommitSHA1": "e2854295f7c484671ce69bff7ec37fcb0c413a32", "projectName": "perwendel.spark", "bugType": "Change Identifier Used", "problem": "      * @param request   The request object providing information about the HTTP request\n      * @param response  The response object providing functionality for modifying the response\n      */\n    public abstract void handle(Exception exception, Request request, Response response);\n }", "fixed": "      * @param request   The request object providing information about the HTTP request\n      * @param response  The response object providing functionality for modifying the response\n      */\n    public abstract void handle(T exception, Request request, Response response);\n }", "sourceBeforeFix": "? extends Exception", "sourceAfterFix": "? extends T"}
{"fixCommitSHA1": "3407a44922289dc4ddb3ff87687b8766affeaad9", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t\t}\n \t}\n\tprivate static class SpeedTestConsumer extends AbstractInvokable {\n \t\t@Override\n \t\tpublic void invoke() throws Exception {", "fixed": " \t\t}\n \t}\n\t\n\tpublic static class SpeedTestConsumer extends AbstractInvokable {\n \t\t@Override\n \t\tpublic void invoke() throws Exception {", "sourceBeforeFix": "10", "sourceAfterFix": "9"}
{"fixCommitSHA1": "26f1133593498a87216f0dd4954ff7c07313b740", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "       \"JSC_REFERENCE_BEFORE_DECLARE\",\n       \"Variable referenced before declaration: {0}\");\n  static final DiagnosticType REDECLARED_VARIABLE = DiagnosticType.warning(\n       \"JSC_REDECLARED_VARIABLE\",\n       \"Redeclared variable: {0}\");", "fixed": "       \"JSC_REFERENCE_BEFORE_DECLARE\",\n       \"Variable referenced before declaration: {0}\");\n  static final DiagnosticType REDECLARED_VARIABLE = DiagnosticType.error(\n       \"JSC_REDECLARED_VARIABLE\",\n       \"Redeclared variable: {0}\");", "sourceBeforeFix": "DiagnosticType.warning(\"JSC_REDECLARED_VARIABLE\",\"Redeclared variable: {0}\")", "sourceAfterFix": "DiagnosticType.error(\"JSC_REDECLARED_VARIABLE\",\"Redeclared variable: {0}\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "2", "sourceAfterFix": "0"}
{"fixCommitSHA1": "557a51f3ac19cf4b2ffbcb32354152c88643398d", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "     }\n   }\n  private void removeModel(Map<Integer, Integer> model, Range<Integer> range) {\n     for (int i = MIN_BOUND - 1; i <= MAX_BOUND + 1; i++) {\n       if (range.contains(i)) {\n         model.remove(i);", "fixed": "     }\n   }\n  private static void removeModel(Map<Integer, Integer> model, Range<Integer> range) {\n     for (int i = MIN_BOUND - 1; i <= MAX_BOUND + 1; i++) {\n       if (range.contains(i)) {\n         model.remove(i);", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15859, value = \"A slave domain controller cannot accept deployment content uploads\")\n     String slaveCannotAcceptUploads();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10859, value = \"A slave domain controller cannot accept deployment content uploads\")\n     String slaveCannotAcceptUploads();\n     /**", "sourceBeforeFix": "id=15835", "sourceAfterFix": "id=10835"}
{"fixCommitSHA1": "1adccc7a5bdc515f01ae6bd644097ab85336bd84", "projectName": "hazelcast.hazelcast", "bugType": "Same Function More Args", "problem": "         populateNearCache(clientMap, 1000);\n        HazelcastInstance member = hazelcastFactory.newHazelcastInstance();\n         final ClearEventCounterEventHandler handler = new ClearEventCounterEventHandler();", "fixed": "         populateNearCache(clientMap, 1000);\n        HazelcastInstance member = hazelcastFactory.newHazelcastInstance(newConfig());\n         final ClearEventCounterEventHandler handler = new ClearEventCounterEventHandler();", "sourceBeforeFix": "hazelcastFactory.newHazelcastClient()", "sourceAfterFix": "hazelcastFactory.newHazelcastClient(newClientConfig())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "6bae902bd35ed4f57e7a5d612b7ad9b72f4559bc", "projectName": "google.closure-compiler", "bugType": "Wrong Function Name", "problem": "     node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n     Node node2 = Node.newString(Token.NAME, \"f\");\n     node2.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n    assertTrue(node1.checkTreeTypeAwareEqualsSilent(node2));\n   }\n   public void testCheckTreeTypeAwareEqualsSameNull() {", "fixed": "     node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n     Node node2 = Node.newString(Token.NAME, \"f\");\n     node2.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n    assertTrue(node1.isEquivalentToTyped(node2));\n   }\n   public void testCheckTreeTypeAwareEqualsSameNull() {", "sourceBeforeFix": "node1.checkTreeTypeAwareEqualsSilent(node2)", "sourceAfterFix": "node1.isEquivalentToTyped(node2)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  private final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "6c0b2be41234c6593d1ca8283f1a766ecc861026", "projectName": "netty.netty", "bugType": "Change Identifier Used", "problem": "                         Attribute attribute;\n                         try {\n                             attribute = factory.createAttribute(request,\n                                    decodeAttribute(values[0].trim(), charset),\n                                    decodeAttribute(cleanString(values[1]), charset));\n                         } catch (NullPointerException e) {\n                             throw new ErrorDataDecoderException(e);\n                         } catch (IllegalArgumentException e) {", "fixed": "                         Attribute attribute;\n                         try {\n                             attribute = factory.createAttribute(request,\n                                    cleanString(values[0]), values[1]);\n                         } catch (NullPointerException e) {\n                             throw new ErrorDataDecoderException(e);\n                         } catch (IllegalArgumentException e) {", "sourceBeforeFix": "decodeAttribute(nameAttribute.getValue(),charset)", "sourceAfterFix": "cleanString(nameAttribute.getValue())"}
{"fixCommitSHA1": "32f07f740b72a03fa16285f76cc70f3f3b45d14e", "projectName": "hazelcast.hazelcast", "bugType": "Same Function Less Args", "problem": "     public void put(final Object key, final Object value) {\n         if (key != null) {\n            map.set(key, toStoreValue(value), 0, TimeUnit.SECONDS);\n         }\n     }", "fixed": "     public void put(final Object key, final Object value) {\n         if (key != null) {\n            map.set(key, toStoreValue(value));\n         }\n     }", "sourceBeforeFix": "map.set(key,toStoreValue(value),0,TimeUnit.SECONDS)", "sourceAfterFix": "map.set(key,toStoreValue(value))"}
{"fixCommitSHA1": "2918286bf4a010c9ac8eadffb958ff10fb41ad62", "projectName": "junit-team.junit", "bugType": "Change Identifier Used", "problem": "         if (description == null) {\n             description = Description.createTestDescription(getTestClass().getJavaClass(),\n                     testName(method), method.getAnnotations());\n            fMethodDescriptions.put(method, description);\n         }\n         return description;", "fixed": "         if (description == null) {\n             description = Description.createTestDescription(getTestClass().getJavaClass(),\n                     testName(method), method.getAnnotations());\n            fMethodDescriptions.putIfAbsent(method, description);\n         }\n         return description;", "sourceBeforeFix": "fMethodDescriptions.put(method,description)", "sourceAfterFix": "fMethodDescriptions.putIfAbsent(method,description)"}
{"fixCommitSHA1": "cadd7cc57026a1f9991d2d90270a7aacbd0a7aa2", "projectName": "facebook.presto", "bugType": "Change Modifier", "problem": "         lastUpdate = DateTime.now();\n     }\n    private void sendGetResults()\n     {\n        final URI uri = HttpUriBuilder.uriBuilderFrom(location).appendPath(String.valueOf(token)).build();\n         HttpResponseFuture<PagesResponse> resultFuture = httpClient.executeAsync(\n                 prepareGet()\n                         .setHeader(PRESTO_MAX_SIZE, maxResponseSize.toString())", "fixed": "         lastUpdate = DateTime.now();\n     }\n    private synchronized void sendGetResults()\n     {\n        URI uri = HttpUriBuilder.uriBuilderFrom(location).appendPath(String.valueOf(token)).build();\n         HttpResponseFuture<PagesResponse> resultFuture = httpClient.executeAsync(\n                 prepareGet()\n                         .setHeader(PRESTO_MAX_SIZE, maxResponseSize.toString())", "sourceBeforeFix": "2", "sourceAfterFix": "34"}
{"fixCommitSHA1": "1ee280f9971b12ca1a2089f59e41a1d94f885637", "projectName": "stanfordnlp.CoreNLP", "bugType": "Change Identifier Used", "problem": "             placeholderToken.setBeginPosition(beginPosition);\n             placeholderToken.setEndPosition(beginPosition + placeholderToken.word().length());\n             placeholderToken.set(TokenizerBenchmarkTestCase.MWTTokenCharacterOffsetBeginAnnotation.class,\n                    containedToken.get(TokenizerBenchmarkTestCase.MWTTokenCharacterOffsetBeginAnnotation.class));\n             placeholderToken.set(TokenizerBenchmarkTestCase.MWTTokenCharacterOffsetEndAnnotation.class,\n                    containedToken.get(TokenizerBenchmarkTestCase.MWTTokenCharacterOffsetEndAnnotation.class));\n             placeholderToken.setIsMWT(true);\n             return placeholderToken;\n         }", "fixed": "             placeholderToken.setBeginPosition(beginPosition);\n             placeholderToken.setEndPosition(beginPosition + placeholderToken.word().length());\n             placeholderToken.set(TokenizerBenchmarkTestCase.MWTTokenCharacterOffsetBeginAnnotation.class,\n                    containedToken.beginPosition());\n             placeholderToken.set(TokenizerBenchmarkTestCase.MWTTokenCharacterOffsetEndAnnotation.class,\n                    containedToken.endPosition());\n             placeholderToken.setIsMWT(true);\n             return placeholderToken;\n         }", "sourceBeforeFix": "containedToken.get(TokenizerBenchmarkTestCase.MWTTokenCharacterOffsetBeginAnnotation.class)", "sourceAfterFix": "containedToken.beginPosition()"}
{"fixCommitSHA1": "a0728fa8544488762715ed1ddda525469f0f90c5", "projectName": "druid-io.druid", "bugType": "Change Identifier Used", "problem": "   @Override\n   public Optional<ScalingStats> getScalingStats()\n   {\n    return Optional.of(resourceManagement.getStats());\n   }\n   public ZkWorker findWorkerRunningTask(String taskId)", "fixed": "   @Override\n   public Optional<ScalingStats> getScalingStats()\n   {\n    return Optional.fromNullable(resourceManagement.getStats());\n   }\n   public ZkWorker findWorkerRunningTask(String taskId)", "sourceBeforeFix": "Optional.of(resourceManagement.getStats())", "sourceAfterFix": "Optional.fromNullable(resourceManagement.getStats())"}
{"fixCommitSHA1": "9760ff5294fd81c3272989b6007b6496a08e0ca7", "projectName": "Activiti.Activiti", "bugType": "Change Identifier Used", "problem": "     } else if (url.startsWith(\"jdbc:sqlserver\")) {\n       databaseFormatter = new DatabaseFormatterMsSqlServer();\n     } else if (url.startsWith(\"jdbc:db2\")) {\n      databaseFormatter = new DatabaseFormatterOracle();\n     } else if (url.startsWith(\"jdbc:postgresql\")) {\n      databaseFormatter = new DatabaseFormatterOracle();\n     } \n   }", "fixed": "     } else if (url.startsWith(\"jdbc:sqlserver\")) {\n       databaseFormatter = new DatabaseFormatterMsSqlServer();\n     } else if (url.startsWith(\"jdbc:db2\")) {\n      databaseFormatter = new DatabaseFormatterDb2();\n     } else if (url.startsWith(\"jdbc:postgresql\")) {\n      databaseFormatter = new DatabaseFormatterPostgres();\n     } \n   }", "sourceBeforeFix": "new DatabaseFormatterOracle()", "sourceAfterFix": "new DatabaseFormatterDb2()"}
{"fixCommitSHA1": "2230a91829f39b72973e6fecf275d9c664911ca0", "projectName": "clojure.clojure", "bugType": "Change Caller in Function Call", "problem": " \tcatch(Throwable e)\n \t\t{\n \t\tif(!(e instanceof CompilerException))\n\t\t\tthrow new CompilerException((String) SOURCE.deref(), (Integer) LINE.deref(), e);\n \t\telse\n \t\t\tthrow (CompilerException) e;\n \t\t}", "fixed": " \tcatch(Throwable e)\n \t\t{\n \t\tif(!(e instanceof CompilerException))\n\t\t\tthrow new CompilerException((String) SOURCE_PATH.deref(), (Integer) LINE.deref(), e);\n \t\telse\n \t\t\tthrow (CompilerException) e;\n \t\t}", "sourceBeforeFix": "SOURCE.deref()", "sourceAfterFix": "SOURCE_PATH.deref()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15837, value = \"One of the groups does not define neither \" + SERVER_GROUP + \" nor \" + CONCURRENT_GROUPS + \": %s\")\n     String unexpectedInSeriesGroup(String rolloutPlan);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10837, value = \"One of the groups does not define neither \" + SERVER_GROUP + \" nor \" + CONCURRENT_GROUPS + \": %s\")\n     String unexpectedInSeriesGroup(String rolloutPlan);\n     /**", "sourceBeforeFix": "id=15854", "sourceAfterFix": "id=10854"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  private final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15868, value = \"Deployment %s is already started\")\n     String deploymentAlreadyStarted(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10868, value = \"Deployment %s is already started\")\n     String deploymentAlreadyStarted(String name);\n     /**", "sourceBeforeFix": "id=15855", "sourceAfterFix": "id=10855"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": " import org.jboss.logging.Messages;\n /**\n * This module is using message IDs in the range 10900-10999. This file is using the subset 10975-10999 for domain\n* controller non-logger messages. See http:\n  * JBAS message id blocks.\n  * <p/>", "fixed": " import org.jboss.logging.Messages;\n /**\n * This module is using message IDs in the range 10800-10899. This file is using the subset 10830-10899 for domain\n* controller non-logger messages. See http:\n  * JBAS message id blocks.\n  * <p/>", "sourceBeforeFix": "id=15843", "sourceAfterFix": "id=10843"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<DirectMessage> getDirectMessages(Paging paging) throws TwitterException {\n        return DirectMessage.constructDirectMessages(get(getBaseURL()\n                 + \"direct_messages.json\", null, paging.asPostParameterList(), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<DirectMessage> getDirectMessages(Paging paging) throws TwitterException {\n        return DirectMessage.createDirectMessageList(get(getBaseURL()\n                 + \"direct_messages.json\", null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/home_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/home_timeline.json\",true))"}
{"fixCommitSHA1": "d4394e3727c822cd62e1e916335493df61ee409d", "projectName": "alibaba.fastjson", "bugType": "More Specific If", "problem": "             mw.visitLabel(forItemNullElse_);\n             Label forItemClassIfEnd_ = new Label(), forItemClassIfElse_ = new Label();\n            if (elementClass != null) {\n                 mw.visitVarInsn(ALOAD, context.var(\"list_item\"));\n                 mw.visitMethodInsn(INVOKEVIRTUAL, \"java/lang/Object\", \"getClass\", \"()Ljava/lang/Class;\");\n                 mw.visitLdcInsn(com.alibaba.fastjson.asm.Type.getType(desc(elementClass)));", "fixed": "             mw.visitLabel(forItemNullElse_);\n             Label forItemClassIfEnd_ = new Label(), forItemClassIfElse_ = new Label();\n            if (elementClass != null && Modifier.isPublic(elementClass.getModifiers())) {\n                 mw.visitVarInsn(ALOAD, context.var(\"list_item\"));\n                 mw.visitMethodInsn(INVOKEVIRTUAL, \"java/lang/Object\", \"getClass\", \"()Ljava/lang/Class;\");\n                 mw.visitLdcInsn(com.alibaba.fastjson.asm.Type.getType(desc(elementClass)));", "sourceBeforeFix": "elementClass != null", "sourceAfterFix": "elementClass != null && Modifier.isPublic(elementClass.getModifiers())"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface SpringLdapEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedSpringLdapEndpointBuilder advanced() {", "fixed": "     \n    public interface SpringLdapEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedSpringLdapEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "19dac46f389eff0af027d9d11176db6eec0cdbc3", "projectName": "wildfly.wildfly", "bugType": "Wrong Function Name", "problem": "         MBeanServerPlugin delegate = null;\n         final boolean readOnly = false;\n         try {\n            delegate = findDelegate(name);\n             if (delegate.shouldAuthorize()) {\n                 authorizeSensitiveOperation(CREATE_MBEAN, readOnly, true);\n             }", "fixed": "         MBeanServerPlugin delegate = null;\n         final boolean readOnly = false;\n         try {\n            delegate = findDelegateForNewObject(name);\n             if (delegate.shouldAuthorize()) {\n                 authorizeSensitiveOperation(CREATE_MBEAN, readOnly, true);\n             }", "sourceBeforeFix": "findDelegate(name)", "sourceAfterFix": "findDelegateForNewObject(name)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "fixed": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "sourceBeforeFix": "EXTFramebufferObject.glGetRenderbufferParameterEXT(target,pname,params)", "sourceAfterFix": "EXTFramebufferObject.glGetRenderbufferParameterivEXT(target,pname,params)"}
{"fixCommitSHA1": "d50e8bff665f2272ffc93e15099db69d4292a130", "projectName": "apache.flink", "bugType": "Change Numeric Literal", "problem": " \t\tAssert.assertEquals(800, Utils.calculateHeapSize(1000) );\n\t\tAssert.assertEquals(9500, Utils.calculateHeapSize(10000) );\n \t}\n }", "fixed": " \t\tAssert.assertEquals(800, Utils.calculateHeapSize(1000) );\n\t\tAssert.assertEquals(9300, Utils.calculateHeapSize(10000) );\n \t}\n }", "sourceBeforeFix": "Assert.assertEquals(9500,Utils.calculateHeapSize(10000))", "sourceAfterFix": "Assert.assertEquals(9300,Utils.calculateHeapSize(10000))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedYammerEndpointBuilder\n             extends\n                 AdvancedYammerEndpointConsumerBuilder, AdvancedYammerEndpointProducerBuilder {\n         default YammerEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedYammerEndpointBuilder\n             extends\n                 AdvancedYammerEndpointConsumerBuilder, AdvancedYammerEndpointProducerBuilder {\n         default YammerEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "7f8548a745f0841a35b8d67da18093dbd28df076", "projectName": "hazelcast.hazelcast", "bugType": "Change Numeric Literal", "problem": "     public static final int SET_CONTAINER = 41;\n     public static final int LIST_CONTAINER = 42;\n     public static final int COLLECTION_TRANSACTION_LOG_RECORD = 43;\n    public static final int QUEUE_TRANSACTION_LOG_RECORD = 43;\n     @Override\n     public int getFactoryId() {", "fixed": "     public static final int SET_CONTAINER = 41;\n     public static final int LIST_CONTAINER = 42;\n     public static final int COLLECTION_TRANSACTION_LOG_RECORD = 43;\n    public static final int QUEUE_TRANSACTION_LOG_RECORD = 44;\n     @Override\n     public int getFactoryId() {", "sourceBeforeFix": "QUEUE_TRANSACTION_LOG_RECORD=43", "sourceAfterFix": "QUEUE_TRANSACTION_LOG_RECORD=44"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "2ea202704a509c0bea14438beb65443f33517ebc", "projectName": "apache.storm", "bugType": "Change Identifier Used", "problem": "                         String command = shellMsg.getCommand();\n                         if (command == null) {\n                            throw new UnsupportedOperationException(\"Command not found in bolt message: \" + shellMsg);\n                         }\n                         if(command.equals(\"ack\")) {\n                             handleAck(shellMsg.getId());", "fixed": "                         String command = shellMsg.getCommand();\n                         if (command == null) {\n                            throw new IllegalArgumentException(\"Command not found in bolt message: \" + shellMsg);\n                         }\n                         if(command.equals(\"ack\")) {\n                             handleAck(shellMsg.getId());", "sourceBeforeFix": "new UnsupportedOperationException(\"Command not found in bolt message: \" + shellMsg)", "sourceAfterFix": "new IllegalArgumentException(\"Command not found in bolt message: \" + shellMsg)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  private final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "84d6e4785ecad972742bb1bb869cfc3a5efa731d", "projectName": "cucumber.cucumber-jvm", "bugType": "Change Modifier", "problem": "         Executable testMethod = injectorSourceFactory::create;\n         InjectorSourceInstantiationFailed actualThrown = assertThrows(InjectorSourceInstantiationFailed.class, testMethod);\n         assertAll(\"Checking Exception including cause\",\n            () -> assertThat(\"Unexpected exception message\", actualThrown.getMessage(), is(equalTo(\"Instantiation of 'io.cucumber.guice.InjectorSourceFactoryTest$PrivateConstructor' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a   zero args constructor.\"))),\n             () -> assertThat(\"Unexpected exception cause class\", actualThrown.getCause(), isA(IllegalAccessException.class))\n         );\n     }", "fixed": "         Executable testMethod = injectorSourceFactory::create;\n         InjectorSourceInstantiationFailed actualThrown = assertThrows(InjectorSourceInstantiationFailed.class, testMethod);\n         assertAll(\"Checking Exception including cause\",\n            () -> assertThat(\"Unexpected exception message\", actualThrown.getMessage(), is(equalTo(\"Instantiation of 'io.cucumber.guice.InjectorSourceFactoryTest$PrivateConstructor' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a public zero args constructor.\"))),\n             () -> assertThat(\"Unexpected exception cause class\", actualThrown.getCause(), isA(IllegalAccessException.class))\n         );\n     }", "sourceBeforeFix": "8", "sourceAfterFix": "9"}
{"fixCommitSHA1": "902905ad10c58669fe4e3950e8a4df7abe451765", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " /*\n * Copyright 2012-2015 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.", "fixed": " /*\n * Copyright 2012-2017 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.", "sourceBeforeFix": "SpringApplication.class", "sourceAfterFix": "SpringBootVersion.class"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n  private final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "70c31b498c5083f9efc1914b679737235826149f", "projectName": "facebook.presto", "bugType": "Change Identifier Used", "problem": "         this.functionManager = functionManager;\n         Optional<Duration> totalCpuTime = stats.map(s -> new Duration(s.values().stream()\n                .mapToLong(planNode -> planNode.getPlanNodeScheduledTime().toMillis())\n                 .sum(), MILLISECONDS));\n         Optional<Duration> totalScheduledTime = stats.map(s -> new Duration(s.values().stream()\n                .mapToLong(planNode -> planNode.getPlanNodeCpuTime().toMillis())\n                 .sum(), MILLISECONDS));\n         this.representation = new PlanRepresentation(planRoot, types, totalCpuTime, totalScheduledTime);", "fixed": "         this.functionManager = functionManager;\n         Optional<Duration> totalCpuTime = stats.map(s -> new Duration(s.values().stream()\n                .mapToLong(planNode -> planNode.getPlanNodeCpuTime().toMillis())\n                 .sum(), MILLISECONDS));\n         Optional<Duration> totalScheduledTime = stats.map(s -> new Duration(s.values().stream()\n                .mapToLong(planNode -> planNode.getPlanNodeScheduledTime().toMillis())\n                 .sum(), MILLISECONDS));\n         this.representation = new PlanRepresentation(planRoot, types, totalCpuTime, totalScheduledTime);", "sourceBeforeFix": "planNode.getPlanNodeScheduledTime()", "sourceAfterFix": "planNode.getPlanNodeCpuTime()"}
{"fixCommitSHA1": "19c2a076c25faf94ae9e8f4072f2a4590c9ee1fe", "projectName": "spring-projects.spring-boot", "bugType": "Wrong Function Name", "problem": " \tpublic void startServlet() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tthis.container = factory\n\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\nassertThat(getResponse(\"http:\n \t}", "fixed": " \tpublic void startServlet() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tthis.container = factory\n\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\nassertThat(getResponse(\"http:\n \t}", "sourceBeforeFix": "factory.getEmbdeddedServletContainer()", "sourceAfterFix": "factory.getEmbeddedServletContainer()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e1d89ddbf6028369fd3117ff648fc6f16a1786fe", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "                     managedSpan.deactivate();\n                 }\n             } catch (Throwable t) {\n                LOG.error(\"OpenTracing: Failed to capture tracing data\", t);\n             }\n         }", "fixed": "                     managedSpan.deactivate();\n                 }\n             } catch (Throwable t) {\n                LOG.warn(\"OpenTracing: Failed to capture tracing data\", t);\n             }\n         }", "sourceBeforeFix": "LOG.error(\"OpenTracing: Failed to capture tracing data\",t)", "sourceAfterFix": "LOG.warn(\"OpenTracing: Failed to capture tracing data\",t)"}
{"fixCommitSHA1": "b8108a370b039dbeccffad8c9b634f6ac85ed4a5", "projectName": "naver.pinpoint", "bugType": "Change Identifier Used", "problem": "  */\n public class TFAgentStatBatchMapper {\n     private final Logger logger = LoggerFactory.getLogger(this.getClass());\n    public final TFAgentStatMappter tFAgentStatMappter = new TFAgentStatMappter();\n     public TFAgentStatBatch map(AgentStatBo agentStatBo) {\n         try {\n            List<TFAgentStat> tFAgentstatList = tFAgentStatMappter.map(agentStatBo);\n             long startTimestamp = getStartTimestamp(agentStatBo);\n             TFAgentStatBatch tFAgentStatBatch = new TFAgentStatBatch(agentStatBo.getAgentId(), startTimestamp, tFAgentstatList);\n             return tFAgentStatBatch;", "fixed": "  */\n public class TFAgentStatBatchMapper {\n     private final Logger logger = LoggerFactory.getLogger(this.getClass());\n    public final TFAgentStatMapper tFAgentStatMapper = new TFAgentStatMapper();\n     public TFAgentStatBatch map(AgentStatBo agentStatBo) {\n         try {\n            List<TFAgentStat> tFAgentstatList = tFAgentStatMapper.map(agentStatBo);\n             long startTimestamp = getStartTimestamp(agentStatBo);\n             TFAgentStatBatch tFAgentStatBatch = new TFAgentStatBatch(agentStatBo.getAgentId(), startTimestamp, tFAgentstatList);\n             return tFAgentStatBatch;", "sourceBeforeFix": "public final TFAgentStatMappter tFAgentStatMappter=new TFAgentStatMappter(); ", "sourceAfterFix": "public final TFAgentStatMapper tFAgentStatMapper=new TFAgentStatMapper(); "}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface KubernetesNodesEndpointBuilder\n             extends\n                 KubernetesNodesEndpointConsumerBuilder, KubernetesNodesEndpointProducerBuilder {\n         default AdvancedKubernetesNodesEndpointBuilder advanced() {", "fixed": "     \n    public interface KubernetesNodesEndpointBuilder\n             extends\n                 KubernetesNodesEndpointConsumerBuilder, KubernetesNodesEndpointProducerBuilder {\n         default AdvancedKubernetesNodesEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  private final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface JettyHttpEndpointBuilder9\n             extends\n                 EndpointConsumerBuilder {\n         default AdvancedJettyHttpEndpointBuilder9 advanced() {", "fixed": "     \n    public interface JettyHttpEndpointBuilder9\n             extends\n                 EndpointConsumerBuilder {\n         default AdvancedJettyHttpEndpointBuilder9 advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<Status> getUserTimeline() throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline.json\"\n                 , true));\n     }", "fixed": "      */\n     public ResponseList<Status> getUserTimeline() throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline.json\"\n                 , true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface CwEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedCwEndpointBuilder advanced() {\n             return (AdvancedCwEndpointBuilder) this;\n         }", "fixed": "     \n    public interface CwEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedCwEndpointBuilder advanced() {\n             return (AdvancedCwEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "5f78aa9c52a2f28419a5fa646ab28ee273e17e6a", "projectName": "hazelcast.hazelcast", "bugType": "Change Modifier", "problem": "         }\n     }\n    public void unblock(Address address) {\n         blockedAddresses.remove(address);\n         Connection connection = getConnection(address);\n         if (connection instanceof DroppingConnection) {", "fixed": "         }\n     }\n    public synchronized void unblock(Address address) {\n         blockedAddresses.remove(address);\n         Connection connection = getConnection(address);\n         if (connection instanceof DroppingConnection) {", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "addd22c9cfa473eecf99779227f1952d52ad7af5", "projectName": "Alluxio.alluxio", "bugType": "Same Function More Args", "problem": "     AlluxioURI alluxioPath = new AlluxioURI(\"/t\");\n     AlluxioURI ufsPath = new AlluxioURI(\"/u\");\n     MountOptions mountOptions = MountOptions.defaults();\n    Mockito.doThrow(EXCEPTION).when(mFileSystemMasterClient).mount(alluxioPath, ufsPath);\n     try {\n       mFileSystem.mount(alluxioPath, ufsPath, mountOptions);\n       Assert.fail(SHOULD_HAVE_PROPAGATED_MESSAGE);", "fixed": "     AlluxioURI alluxioPath = new AlluxioURI(\"/t\");\n     AlluxioURI ufsPath = new AlluxioURI(\"/u\");\n     MountOptions mountOptions = MountOptions.defaults();\n    Mockito.doThrow(EXCEPTION).when(mFileSystemMasterClient)\n        .mount(alluxioPath, ufsPath, mountOptions);\n     try {\n       mFileSystem.mount(alluxioPath, ufsPath, mountOptions);\n       Assert.fail(SHOULD_HAVE_PROPAGATED_MESSAGE);", "sourceBeforeFix": "Mockito.verify(mFileSystemMasterClient).mount(alluxioPath,ufsPath)", "sourceAfterFix": "Mockito.verify(mFileSystemMasterClient).mount(alluxioPath,ufsPath,mountOptions)"}
{"fixCommitSHA1": "e5e53e202cc7d357b787d2e3e4f6b538bdc7c98e", "projectName": "hazelcast.hazelcast", "bugType": "Change Binary Operator", "problem": "     }\n     public boolean shouldCloneOnEntryProcessing() {\n        return getIndexes().hasIndex() & OBJECT.equals(mapConfig.getInMemoryFormat());\n     }\n }", "fixed": "     }\n     public boolean shouldCloneOnEntryProcessing() {\n        return getIndexes().hasIndex() && OBJECT.equals(mapConfig.getInMemoryFormat());\n     }\n }", "sourceBeforeFix": "getIndexes().hasIndex() & OBJECT.equals(mapConfig.getInMemoryFormat())", "sourceAfterFix": "getIndexes().hasIndex() && OBJECT.equals(mapConfig.getInMemoryFormat())"}
{"fixCommitSHA1": "ab45cc12ff4e9b8e62aa1b3776367df3b1020b93", "projectName": "gephi.gephi", "bugType": "Change Caller in Function Call", "problem": "         @Override\n         public Number getMinimumValue() {\n             if (minimum == null) {\n                AbstractRanking.refreshMinMax(this, graph);\n             }\n             return minimum;\n         }", "fixed": "         @Override\n         public Number getMinimumValue() {\n             if (minimum == null) {\n                DynamicAttributeRanking.refreshMinMax(this, graph);\n             }\n             return minimum;\n         }", "sourceBeforeFix": "AbstractRanking.refreshMinMax(this,graph)", "sourceAfterFix": "DynamicAttributeRanking.refreshMinMax(this,graph)"}
{"fixCommitSHA1": "9e756fefbb053926754108335e3ad78b586439ac", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "             public void configure() {\n                 WebsocketComponent websocketComponent = (WebsocketComponent) context.getComponent(\"websocket\");\n                 websocketComponent.setMinThreads(1);\n                websocketComponent.setMaxThreads(11);\nfrom(\"websocket:\n                         .log(\">>> Message received from BAR WebSocket Client : ${body}\")", "fixed": "             public void configure() {\n                 WebsocketComponent websocketComponent = (WebsocketComponent) context.getComponent(\"websocket\");\n                 websocketComponent.setMinThreads(1);\n                websocketComponent.setMaxThreads(20);\nfrom(\"websocket:\n                         .log(\">>> Message received from BAR WebSocket Client : ${body}\")", "sourceBeforeFix": "websocketComponent.setMaxThreads(11)", "sourceAfterFix": "websocketComponent.setMaxThreads(20)"}
{"fixCommitSHA1": "e7bf415427b37bbc760ff9b9c69650db8ec477e4", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t}\n \t@Configuration\n\t@ConditionalOnEnablednHealthIndicator(\"diskspace\")\n \tpublic static class DiskSpaceHealthIndicatorConfiguration {\n \t\t@Bean", "fixed": " \t}\n \t@Configuration\n\t@ConditionalOnEnabledHealthIndicator(\"diskspace\")\n \tpublic static class DiskSpaceHealthIndicatorConfiguration {\n \t\t@Bean", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"mail\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"mail\")"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15865, value = \"Invalid content declaration\")\n     String invalidContentDeclaration();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10865, value = \"Invalid content declaration\")\n     String invalidContentDeclaration();\n     /**", "sourceBeforeFix": "id=15862", "sourceAfterFix": "id=10862"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "fixed": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4fv(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4fv(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "sourceBeforeFix": "GL20.glUniform1(location,v)", "sourceAfterFix": "GL20.glUniform1fv(location,v)"}
{"fixCommitSHA1": "141027650095536b699bffecf0d2168474c76ac2", "projectName": "libgdx.libgdx", "bugType": "Change Modifier", "problem": " \t\r\n \tpublic static final int M33 = 15;\r\n\tpublic final float tmp[] = new float[16];\r\n \tpublic final float val[] = new float[16];\r\n \t\r", "fixed": " \t\r\n \tpublic static final int M33 = 15;\r\n\t\r\n\t@Deprecated\r\npublic static final float tmp[] = new float[16];\n \tpublic final float val[] = new float[16];\r\n \t\r", "sourceBeforeFix": "17", "sourceAfterFix": "25"}
{"fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "       } else {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           for (int i = 0; i < BLOCKS_PER_FILE; i ++) {\n             buf.DATA.get(mBuf.array());", "fixed": "       } else {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           for (int i = 0; i < BLOCKS_PER_FILE; i ++) {\n             buf.DATA.get(mBuf.array());", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedMicrometerEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default MicrometerEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedMicrometerEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default MicrometerEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "5f1632dd4a5274c4180b4b35b778e198b1ddd8ff", "projectName": "perwendel.spark", "bugType": "Same Function More Args", "problem": "             try {\n                 DoneFilters.execute(context);\n             } catch (Exception generalException) {\n                GeneralError.modify(httpResponse, body, requestWrapper, responseWrapper, generalException);\n             }\n         }", "fixed": "             try {\n                 DoneFilters.execute(context);\n             } catch (Exception generalException) {\n                GeneralError.modify(\n                        httpRequest,\n                        httpResponse,\n                        body,\n                        requestWrapper,\n                        responseWrapper,\n                        generalException);\n             }\n         }", "sourceBeforeFix": "GeneralError.modify(httpResponse,body,requestWrapper,responseWrapper,generalException)", "sourceAfterFix": "GeneralError.modify(httpRequest,httpResponse,body,requestWrapper,responseWrapper,generalException)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "764863d6f5692fde63e4a2f6cdd627cd8eec4e0a", "projectName": "druid-io.druid", "bugType": "Change Modifier", "problem": "         serverInventoryView.start();\n         final List<Pair<? extends MasterRunnable, Duration>> masterRunnables = Lists.newArrayList();\n        segmentSettingsAtomicReference = configManager.watch(MasterSegmentSettings.CONFIG_KEY, MasterSegmentSettings.class,(new MasterSegmentSettings.Builder()).build());\n         masterRunnables.add(Pair.of(new MasterComputeManagerRunnable(), config.getMasterPeriod()));\n         if (indexingServiceClient != null) {", "fixed": "         serverInventoryView.start();\n         final List<Pair<? extends MasterRunnable, Duration>> masterRunnables = Lists.newArrayList();\n        segmentSettingsAtomicReference = configManager.watch(MasterSegmentSettings.CONFIG_KEY, MasterSegmentSettings.class,new MasterSegmentSettings.Builder().build());\n         masterRunnables.add(Pair.of(new MasterComputeManagerRunnable(), config.getMasterPeriod()));\n         if (indexingServiceClient != null) {", "sourceBeforeFix": "2", "sourceAfterFix": "66"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedS3EndpointBuilder\n             extends\n                 AdvancedS3EndpointConsumerBuilder, AdvancedS3EndpointProducerBuilder {\n         default S3EndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedS3EndpointBuilder\n             extends\n                 AdvancedS3EndpointConsumerBuilder, AdvancedS3EndpointProducerBuilder {\n         default S3EndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "3d76925f31db8747ba6726e1c0d568441479de6e", "projectName": "hazelcast.hazelcast", "bugType": "Change Numeric Literal", "problem": "     public void testOneMemberWriteBehindFlush() {\n         TestMapStore testMapStore = new TestMapStore(1, 1, 1);\n         testMapStore.setLoadAllKeys(false);\n        int writeDelaySeconds = 2;\n         Config config = newConfig(testMapStore, writeDelaySeconds);\n         TestHazelcastInstanceFactory nodeFactory = createHazelcastInstanceFactory(3);\n         HazelcastInstance instance = nodeFactory.newHazelcastInstance(config);", "fixed": "     public void testOneMemberWriteBehindFlush() {\n         TestMapStore testMapStore = new TestMapStore(1, 1, 1);\n         testMapStore.setLoadAllKeys(false);\n        int writeDelaySeconds = 10;\n         Config config = newConfig(testMapStore, writeDelaySeconds);\n         TestHazelcastInstanceFactory nodeFactory = createHazelcastInstanceFactory(3);\n         HazelcastInstance instance = nodeFactory.newHazelcastInstance(config);", "sourceBeforeFix": "writeDelaySeconds=2", "sourceAfterFix": "writeDelaySeconds=10"}
{"fixCommitSHA1": "2230a91829f39b72973e6fecf275d9c664911ca0", "projectName": "clojure.clojure", "bugType": "Change Identifier Used", "problem": " \tcatch(Throwable e)\n \t\t{\n \t\tif(!(e instanceof CompilerException))\n\t\t\tthrow new CompilerException((String) SOURCE.deref(), (Integer) LINE.deref(), e);\n \t\telse\n \t\t\tthrow (CompilerException) e;\n \t\t}", "fixed": " \tcatch(Throwable e)\n \t\t{\n \t\tif(!(e instanceof CompilerException))\n\t\t\tthrow new CompilerException((String) SOURCE_PATH.deref(), (Integer) LINE.deref(), e);\n \t\telse\n \t\t\tthrow (CompilerException) e;\n \t\t}", "sourceBeforeFix": "SOURCE.deref()", "sourceAfterFix": "SOURCE_PATH.deref()"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n \t * @param toCompare The element to set as the comparison reference.\n \t */\n\tpublic void setReference(T toCompare);\n \t/**\n \t * Checks, whether the given element is equal to the element that has been set as the comparison", "fixed": " \t * \n \t * @param toCompare The element to set as the comparison reference.\n \t */\n\tpublic abstract void setReference(T toCompare);\n \t/**\n \t * Checks, whether the given element is equal to the element that has been set as the comparison", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "a161d8d1924d1fb49a4d229370d998be1493957c", "projectName": "Graylog2.graylog2-server", "bugType": "Wrong Function Name", "problem": "     protected void flushDirtyLogs() {\n         log.debug(\"Checking for dirty logs to flush...\");\n        final Set<Map.Entry<TopicAndPartition, Log>> entries = JavaConversions.asMap(logManager.logsByTopicPartition()).entrySet();\n         for (final Map.Entry<TopicAndPartition, Log> topicAndPartitionLogEntry : entries) {\n             final TopicAndPartition topicAndPartition = topicAndPartitionLogEntry.getKey();\n             final Log kafkaLog = topicAndPartitionLogEntry.getValue();", "fixed": "     protected void flushDirtyLogs() {\n         log.debug(\"Checking for dirty logs to flush...\");\n        final Set<Map.Entry<TopicAndPartition, Log>> entries = JavaConversions.mapAsJavaMap(logManager.logsByTopicPartition()).entrySet();\n         for (final Map.Entry<TopicAndPartition, Log> topicAndPartitionLogEntry : entries) {\n             final TopicAndPartition topicAndPartition = topicAndPartitionLogEntry.getKey();\n             final Log kafkaLog = topicAndPartitionLogEntry.getValue();", "sourceBeforeFix": "JavaConversions.asIterable(kafkaLog.logSegments(committedOffset,Long.MAX_VALUE))", "sourceAfterFix": "JavaConversions.asJavaIterable(kafkaLog.logSegments(committedOffset,Long.MAX_VALUE))"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15853, value = \"Unexpected initial path key %s\")\n     IllegalStateException unexpectedInitialPathKey(String key);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10853, value = \"Unexpected initial path key %s\")\n     IllegalStateException unexpectedInitialPathKey(String key);\n     /**", "sourceBeforeFix": "id=15833", "sourceAfterFix": "id=10833"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetProgramiv (int program, int pname, IntBuffer params) {\r\n\t\tGL20.glGetProgram(program, pname, params);\r\n \t}\r\n \tpublic void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tEXTFramebufferObject.glGetRenderbufferParameterEXT(target, pname, params);\r\n \t}\r\n \tpublic String glGetShaderInfoLog (int shader) {\r", "fixed": " \t}\r\n \tpublic void glGetProgramiv (int program, int pname, IntBuffer params) {\r\n\t\tGL20.glGetProgramiv(program, pname, params);\r\n \t}\r\n \tpublic void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tEXTFramebufferObject.glGetRenderbufferParameterivEXT(target, pname, params);\r\n \t}\r\n \tpublic String glGetShaderInfoLog (int shader) {\r", "sourceBeforeFix": "GL20.glUniformMatrix3(location,transpose,toFloatBuffer(value,offset,count * 9))", "sourceAfterFix": "GL20.glUniformMatrix3fv(location,transpose,toFloatBuffer(value,offset,count * 9))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15869, value = \"Unknown %s %s\")\n     String unknown(String name, String value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10869, value = \"Unknown %s %s\")\n     String unknown(String name, String value);\n     /**", "sourceBeforeFix": "id=15830", "sourceAfterFix": "id=10830"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "fixed": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "sourceBeforeFix": "GL20.glUniformMatrix2(location,transpose,value)", "sourceAfterFix": "GL20.glUniformMatrix2fv(location,transpose,value)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "c131546eaadd07baf950bd6a44d07ee42d109e4c", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t}\n \t@Override\n\tpublic CompletableFuture<Boolean> getTerminationFuture() {\n \t\treturn terminationFuture;\n \t}\n }", "fixed": " \t}\n \t@Override\n\tpublic CompletableFuture<Void> getTerminationFuture() {\n \t\treturn terminationFuture;\n \t}\n }", "sourceBeforeFix": "CompletableFuture<Boolean>", "sourceAfterFix": "CompletableFuture<Void>"}
{"fixCommitSHA1": "d41aad3b391de7aeb6b43e16692b974e5a35148e", "projectName": "JakeWharton.ActionBarSherlock", "bugType": "Change Identifier Used", "problem": "             final Object[] params = new Object[] { item };\r\n             try {\r\n                 if (mMethod.getReturnType() == Boolean.TYPE) {\r\n                    return (Boolean)mMethod.invoke(MenuInflater.this, params);\r\n                 }\r\n                 return false;\r\n             } catch (Exception e) {\r", "fixed": "             final Object[] params = new Object[] { item };\r\n             try {\r\n                 if (mMethod.getReturnType() == Boolean.TYPE) {\r\n                    return (Boolean)mMethod.invoke(mContext, params);\r\n                 }\r\n                 return false;\r\n             } catch (Exception e) {\r", "sourceBeforeFix": "mMethod.invoke(MenuInflater.this,params)", "sourceAfterFix": "mMethod.invoke(mContext,params)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  private final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "c8765bc9e09df13164a8513efc91141767239eea", "projectName": "google.guava", "bugType": "Change Identifier Used", "problem": "     static final StackTraceElement[] EMPTY_STACK_TRACE = new StackTraceElement[0];\n    static final Set<String> EXCLUDED_CLASS_NAMES =\n         ImmutableSet.of(\n             CycleDetectingLockFactory.class.getName(),\n             ExampleStackTrace.class.getName(),", "fixed": "     static final StackTraceElement[] EMPTY_STACK_TRACE = new StackTraceElement[0];\n    static final ImmutableSet<String> EXCLUDED_CLASS_NAMES =\n         ImmutableSet.of(\n             CycleDetectingLockFactory.class.getName(),\n             ExampleStackTrace.class.getName(),", "sourceBeforeFix": "Set<String>", "sourceAfterFix": "ImmutableSet<String>"}
{"fixCommitSHA1": "eb1c97b3b99bca59971809260ad2977d5e5c886b", "projectName": "netty.netty", "bugType": "Wrong Function Name", "problem": "     @Override\n     public boolean isEmpty() {\n        return peekNode() == null;\n     }\n     @Override", "fixed": "     @Override\n     public boolean isEmpty() {\n        return headRef() == tailRef();\n     }\n     @Override", "sourceBeforeFix": "peekNode()", "sourceAfterFix": "headRef()"}
{"fixCommitSHA1": "2d592d60961db355a017024266e3dc4bb2a63ab7", "projectName": "Activiti.Activiti", "bugType": "More Specific If", "problem": "     Id idAnnotation = null;\n     for (Method method : methods) {\n       idAnnotation = method.getAnnotation(Id.class);\n      if (idAnnotation != null) {\n         idMethod = method;\n         break;\n       }", "fixed": "     Id idAnnotation = null;\n     for (Method method : methods) {\n       idAnnotation = method.getAnnotation(Id.class);\n      if(idAnnotation != null && !method.isBridge()) {\n         idMethod = method;\n         break;\n       }", "sourceBeforeFix": "idAnnotation != null", "sourceAfterFix": "idAnnotation != null && !method.isBridge()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15868, value = \"Deployment %s is already started\")\n     String deploymentAlreadyStarted(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10868, value = \"Deployment %s is already started\")\n     String deploymentAlreadyStarted(String name);\n     /**", "sourceBeforeFix": "id=15842", "sourceAfterFix": "id=10842"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface KinesisEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedKinesisEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface KinesisEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedKinesisEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "4c1b34b34b68f102fbb5021a801b6d99de967550", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   @Override\n  void setIntermediateState(State state) {\n     this.cssNames = state.cssNames == null ? null :\n         Maps.newHashMap(state.cssNames);\n     this.exportedNames = state.exportedNames == null ? null :", "fixed": "   }\n   @Override\n  protected void setIntermediateState(State state) {\n     this.cssNames = state.cssNames == null ? null :\n         Maps.newHashMap(state.cssNames);\n     this.exportedNames = state.exportedNames == null ? null :", "sourceBeforeFix": "0", "sourceAfterFix": "4"}
{"fixCommitSHA1": "359ce65a7b6ec7725d4fea3aca1a299cd2b7f7ba", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "      * @return true if all the nodes up to the last annotation node are end of scope nodes\n      *         false otherwise\n      */\n    private boolean isEndOfScope(final DetailAST lastAnnotationNode, final DetailAST node) {\n         DetailAST checkNode = node;\n         boolean endOfScope = true;\n         while (endOfScope && !checkNode.equals(lastAnnotationNode)) {", "fixed": "      * @return true if all the nodes up to the last annotation node are end of scope nodes\n      *         false otherwise\n      */\n    private static boolean isEndOfScope(final DetailAST lastAnnotationNode, final DetailAST node) {\n         DetailAST checkNode = node;\n         boolean endOfScope = true;\n         while (endOfScope && !checkNode.equals(lastAnnotationNode)) {", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "6352f8d96cac2c1611af8094a1d728a6141d981c", "projectName": "google.auto", "bugType": "Same Function More Args", "problem": "           + \" interface; try using @AutoAnnotation instead\", type);\n     }\n    ImmutableSet<ExecutableElement> methods = getLocalAndInheritedMethods(type, processingEnv.getElementUtils());\n    ImmutableSet<ExecutableElement> methodsToImplement = methodsToImplement(methods);\n     String fqExtClass = TypeSimplifier.classNameOf(type);\n     List<AutoValueExtension> appliedExtensions = new ArrayList<AutoValueExtension>();", "fixed": "           + \" interface; try using @AutoAnnotation instead\", type);\n     }\n    ImmutableSet<ExecutableElement> methods =\n        getLocalAndInheritedMethods(type, processingEnv.getElementUtils());\n    ImmutableSet<ExecutableElement> methodsToImplement = methodsToImplement(type, methods);\n     String fqExtClass = TypeSimplifier.classNameOf(type);\n     List<AutoValueExtension> appliedExtensions = new ArrayList<AutoValueExtension>();", "sourceBeforeFix": "methodsToImplement(methods)", "sourceAfterFix": "methodsToImplement(type,methods)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface BeanstalkEndpointBuilder\n             extends\n                 BeanstalkEndpointConsumerBuilder, BeanstalkEndpointProducerBuilder {\n         default AdvancedBeanstalkEndpointBuilder advanced() {", "fixed": "     \n    public interface BeanstalkEndpointBuilder\n             extends\n                 BeanstalkEndpointConsumerBuilder, BeanstalkEndpointProducerBuilder {\n         default AdvancedBeanstalkEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  private final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "1f680192fefd2fde7f5e10fb1a34792a50e3246c", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Change Operand ", "problem": "      */\n     \n     public boolean hasResponseStatus() {\n        return (bodyParts != null ? true : false);\n     }\n     /**", "fixed": "      */\n     \n     public boolean hasResponseStatus() {\n        return (status != null ? true : false);\n     }\n     /**", "sourceBeforeFix": "bodyParts != null", "sourceAfterFix": "status != null"}
{"fixCommitSHA1": "bf2975b37015a967a0a0c76028e78245905df614", "projectName": "hazelcast.hazelcast", "bugType": "Change Modifier", "problem": " \nclass DiagnosticsLogWriterImpl implements DiagnosticsLogWriter {\n     private static final String STR_LONG_MIN_VALUE = String.format(LOCALE_INTERNAL, \"%,d\", Long.MIN_VALUE);", "fixed": " \npublic class DiagnosticsLogWriterImpl implements DiagnosticsLogWriter {\n     private static final String STR_LONG_MIN_VALUE = String.format(LOCALE_INTERNAL, \"%,d\", Long.MIN_VALUE);", "sourceBeforeFix": "0", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15870, value = \"Unknown server group %s\")\n     IllegalStateException unknownServerGroup(String serverGroup);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10870, value = \"Unknown server group %s\")\n     IllegalStateException unknownServerGroup(String serverGroup);\n     /**", "sourceBeforeFix": "id=15833", "sourceAfterFix": "id=10833"}
{"fixCommitSHA1": "14eade7f6e21e560a08de348504584cba5e94c94", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "     }\n     @Test\n    @Ignore(\"AS7-2738 and AS7-2837\")\n@OperateOnDeployment(\"deployment-1\")\n     public void testSessionReplication(@ArquillianResource(SimpleServlet.class) URL baseURL) throws IllegalStateException, IOException, InterruptedException {\n         DefaultHttpClient client = new DefaultHttpClient();", "fixed": "     }\n     @Test\n    @Ignore(\"AS7-2704 StackOverflowError on creating a web session in cluster\")\n@OperateOnDeployment(\"deployment-1\")\n     public void testSessionReplication(@ArquillianResource(SimpleServlet.class) URL baseURL) throws IllegalStateException, IOException, InterruptedException {\n         DefaultHttpClient client = new DefaultHttpClient();", "sourceBeforeFix": "war.addAsWebInfResource(ClusteredWebTestCase.class.getPackage(),\"web.xml\")", "sourceAfterFix": "war.setWebXML(ClusteredWebTestCase.class.getPackage(),\"web.xml\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "26307cbc3e1ce776eb2f3ccd40ca216f7edcdbc6", "projectName": "netty.netty", "bugType": "More Specific If", "problem": "         if (getDomain() == null && that.getDomain() != null) {\n             return false;\n        } else if (that.getDomain() == null) {\n             return false;\n         }\n         return getDomain().equalsIgnoreCase(that.getDomain());", "fixed": "         if (getDomain() == null && that.getDomain() != null) {\n             return false;\n        } else if (that.getDomain() == null && getDomain() != null) {\n             return false;\n         }\n         return getDomain().equalsIgnoreCase(that.getDomain());", "sourceBeforeFix": "c.getPath() == null", "sourceAfterFix": "c.getPath() == null && getPath() != null"}
{"fixCommitSHA1": "626cf14a6e42fa0a2d144e8e16940e09bafd754a", "projectName": "druid-io.druid", "bugType": "Change Identifier Used", "problem": "     return worker;\n   }\n  @JsonProperty\n   public Map<String, TaskStatus> getRunningTasks()\n   {\n     Map<String, TaskStatus> retVal = Maps.newHashMap();", "fixed": "     return worker;\n   }\n  @JsonProperty(\"runningTasks\")\n   public Map<String, TaskStatus> getRunningTasks()\n   {\n     Map<String, TaskStatus> retVal = Maps.newHashMap();", "sourceBeforeFix": "getCurrCapacity()", "sourceAfterFix": "getCurrCapacityUsed()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e2efffc72002968f835a0ea6a70f8e7762752b15", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": " \t\tConceptName anotherConceptName = ConceptNameTest.createMockConceptName(3, Context.getLocale(), null, true);\r\n \t\tanotherConceptName.setName(\"preferred name\");\r\n \t\tnewConcept.addName(anotherConceptName);\r\n\t\tErrors errors = new BindException(concept, \"concept\");\r\n \t\tnew ConceptValidator().validate(newConcept, errors);\r\n \t}\r", "fixed": " \t\tConceptName anotherConceptName = ConceptNameTest.createMockConceptName(3, Context.getLocale(), null, true);\r\n \t\tanotherConceptName.setName(\"preferred name\");\r\n \t\tnewConcept.addName(anotherConceptName);\r\n\t\tErrors errors = new BindException(newConcept, \"concept\");\r\n \t\tnew ConceptValidator().validate(newConcept, errors);\r\n \t}\r", "sourceBeforeFix": "new BindException(concept,\"concept\")", "sourceAfterFix": "new BindException(newConcept,\"concept\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8a5a0cb731f1b8a772612005f4baeeb1a7d3fb07", "projectName": "apache.camel", "bugType": "Same Function More Args", "problem": "      *\n      * @return whether to close resources\n      */\n    protected boolean setResultSet(Exchange exchange, ResultSet rs) throws SQLException {\n         boolean answer = true;\n        ResultSetIterator iterator = new ResultSetIterator(rs, getEndpoint().isUseJDBC4ColumnNameAndLabelSemantics());\n         exchange.getOut().getHeaders().putAll(exchange.getIn().getHeaders());", "fixed": "      *\n      * @return whether to close resources\n      */\n    protected boolean setResultSet(Exchange exchange, Connection conn, ResultSet rs) throws SQLException {\n         boolean answer = true;\n        ResultSetIterator iterator = new ResultSetIterator(conn, rs, getEndpoint().isUseJDBC4ColumnNameAndLabelSemantics());\n         exchange.getOut().getHeaders().putAll(exchange.getIn().getHeaders());", "sourceBeforeFix": "new ResultSetIterator(rs,getEndpoint().isUseJDBC4ColumnNameAndLabelSemantics())", "sourceAfterFix": "new ResultSetIterator(conn,rs,getEndpoint().isUseJDBC4ColumnNameAndLabelSemantics())"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface GrpcEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedGrpcEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface GrpcEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedGrpcEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "9716d2ae673a576cb345c3bfb24cf71654d8f112", "projectName": "openhab.openhab", "bugType": "Wrong Function Name", "problem": " \t\t\tString payload, String payloadType, boolean retry)\n \t\t\tthrows IOException, InvalidLoginException {\n\t\tlogger.debug(\"Requsting URL {}\", url);\n \t\tString dataString = executeUrl(method, url, header,\n \t\t\t\tpayload == null ? null : IOUtils.toInputStream(payload),\n \t\t\t\tpayloadType, timeout);\n\t\tlogger.debug(\"Received MyQ  JSON: {}\", dataString);\n \t\tif (dataString == null) {\n \t\t\tthrow new IOException(\"Null response from MyQ server\");", "fixed": " \t\t\tString payload, String payloadType, boolean retry)\n \t\t\tthrows IOException, InvalidLoginException {\n\t\tlogger.trace(\"Requsting URL {}\", url);\n \t\tString dataString = executeUrl(method, url, header,\n \t\t\t\tpayload == null ? null : IOUtils.toInputStream(payload),\n \t\t\t\tpayloadType, timeout);\n\t\tlogger.trace(\"Received MyQ  JSON: {}\", dataString);\n \t\tif (dataString == null) {\n \t\t\tthrow new IOException(\"Null response from MyQ server\");", "sourceBeforeFix": "logger.debug(\"attempting to login\")", "sourceAfterFix": "logger.trace(\"attempting to login\")"}
{"fixCommitSHA1": "bdd386e699e23c48524b822b9b890b077f294c69", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "         \"function f() {goog.asserts.assertInstanceof(this, Error);}\");\n   }\n  private String config(String rule, String message, String... fields) {\n     String result = \"requirement: {\\n\"\n         + \"  type: CUSTOM\\n\"\n         + \"  java_class: '\" + rule + \"'\\n\";", "fixed": "         \"function f() {goog.asserts.assertInstanceof(this, Error);}\");\n   }\n  private static String config(String rule, String message, String... fields) {\n     String result = \"requirement: {\\n\"\n         + \"  type: CUSTOM\\n\"\n         + \"  java_class: '\" + rule + \"'\\n\";", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  private final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface ClientEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedClientEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface ClientEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedClientEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "           \"functions are set.\");\n   \n  private final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "           \"functions are set.\");\n   \n  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "2296150cacd0bc1b8dec9539144ce00169d26bb6", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "     }\n     public String[] getRequires() {\n        return alternatives;\n     }\n     public EnumSet<AttributeAccess.Flag> getFlags() {", "fixed": "     }\n     public String[] getRequires() {\n        return requires;\n     }\n     public EnumSet<AttributeAccess.Flag> getFlags() {", "sourceBeforeFix": "return alternatives; ", "sourceAfterFix": "return requires; "}
{"fixCommitSHA1": "2128c76abd417bcdc41c6120d924b618593e9fca", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \tpublic boolean act (float delta) {\n \t\tActor actor = (targetActor != null ? targetActor : this.actor);\n \t\tif (capture)\n\t\t\ttargetActor.addCaptureListener(listener);\n \t\telse\n\t\t\ttargetActor.addListener(listener);\n \t\treturn true;\n \t}", "fixed": " \tpublic boolean act (float delta) {\n \t\tActor actor = (targetActor != null ? targetActor : this.actor);\n \t\tif (capture)\n\t\t\tactor.addCaptureListener(listener);\n \t\telse\n\t\t\tactor.addListener(listener);\n \t\treturn true;\n \t}", "sourceBeforeFix": "targetActor.addListener(listener)", "sourceAfterFix": "actor.addListener(listener)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   }\n   \n  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "311d2e7e7123814364907b65143117efc3ddf92d", "projectName": "jhy.jsoup", "bugType": "Same Function More Args", "problem": "         }\n         public boolean hasCookie(String name) {\n            Validate.notEmpty(\"Cookie name must not be empty\");\n             return cookies.containsKey(name);\n         }\n         public T removeCookie(String name) {\n            Validate.notEmpty(\"Cookie name must not be empty\");\n             cookies.remove(name);\n             return (T) this;\n         }", "fixed": "         }\n         public boolean hasCookie(String name) {\n            Validate.notEmpty(name, \"Cookie name must not be empty\");\n             return cookies.containsKey(name);\n         }\n         public T removeCookie(String name) {\n            Validate.notEmpty(name, \"Cookie name must not be empty\");\n             cookies.remove(name);\n             return (T) this;\n         }", "sourceBeforeFix": "Validate.notEmpty(\"Cookie name must not be empty\")", "sourceAfterFix": "Validate.notEmpty(name,\"Cookie name must not be empty\")"}
{"fixCommitSHA1": "492fd118d4902c730fc8619851a7135b623631e2", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "         MockEndpoint result = getMockEndpoint(\"mock:result\");\r\n        result.expectedMessageCount(3);\r\n         result.expectedBodiesReceived(\"Message 1c\", \"Message 2b\", \"Message 3a\");\r", "fixed": "         MockEndpoint result = getMockEndpoint(\"mock:result\");\r\n        result.expectedMinimumMessageCount(3);\r\n         result.expectedBodiesReceived(\"Message 1c\", \"Message 2b\", \"Message 3a\");\r", "sourceBeforeFix": "result.expectedMessageCount(3)", "sourceAfterFix": "result.expectedMinimumMessageCount(3)"}
{"fixCommitSHA1": "af233c9c353322adf1fa91d5e6ca706b9d9d98b7", "projectName": "dropwizard.dropwizard", "bugType": "Change Identifier Used", "problem": "         final PrintWriter output = mock(PrintWriter.class);\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getServletPath()).thenReturn(\"/tasks/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.of(\"runs\")));\n         when(request.getParameterValues(\"runs\")).thenReturn(new String[]{\"1\"});\n         when(response.getWriter()).thenReturn(output);", "fixed": "         final PrintWriter output = mock(PrintWriter.class);\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getPathInfo()).thenReturn(\"/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.of(\"runs\")));\n         when(request.getParameterValues(\"runs\")).thenReturn(new String[]{\"1\"});\n         when(response.getWriter()).thenReturn(output);", "sourceBeforeFix": "request.getServletPath()", "sourceAfterFix": "request.getPathInfo()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "2f77b4e6a3f1ab8bd855476a15a4ab2f6f7ae32c", "projectName": "neo4j.neo4j", "bugType": "Wrong Function Name", "problem": "         String query = \"start root=node:node_auto_index(name = 'FileRoot') match root-[:contains*0..]->(parentDir)-[:leaf]->file return file\";\n         gen.get().addSnippet( \"query1\", createCypherSnippet( query ) );\n         String result = engine.execute( query )\n                .toString();\n         assertTrue( result.contains(\"File1\") );\n         gen.get()\n                 .addSnippet( \"result1\", createQueryResultSnippet( result ) );", "fixed": "         String query = \"start root=node:node_auto_index(name = 'FileRoot') match root-[:contains*0..]->(parentDir)-[:leaf]->file return file\";\n         gen.get().addSnippet( \"query1\", createCypherSnippet( query ) );\n         String result = engine.execute( query )\n                .dumpToString();\n         assertTrue( result.contains(\"File1\") );\n         gen.get()\n                 .addSnippet( \"result1\", createQueryResultSnippet( result ) );", "sourceBeforeFix": "engine.execute(query).toString()", "sourceAfterFix": "engine.execute(query).dumpToString()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "67685860541cf7f66d048f314e1b6084591974c3", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "         long start = System.currentTimeMillis();\n         MockEndpoint result = getMockEndpoint(\"mock:result\");\n        result.expectedBodiesReceived(\"A+C+E+G+I\", \"B+D+F+H+J\");\n         assertMockEndpointsSatisfied();", "fixed": "         long start = System.currentTimeMillis();\n         MockEndpoint result = getMockEndpoint(\"mock:result\");\n        result.expectedBodiesReceivedInAnyOrder(\"A+C+E+G+I\", \"B+D+F+H+J\");\n         assertMockEndpointsSatisfied();", "sourceBeforeFix": "result.expectedBodiesReceived(\"A+C+E+G+I\",\"B+D+F+H+J\")", "sourceAfterFix": "result.expectedBodiesReceivedInAnyOrder(\"A+C+E+G+I\",\"B+D+F+H+J\")"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15863, value = \"%s is not a valid URL -- %s\")\n     String invalidUrl(String url, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10863, value = \"%s is not a valid URL -- %s\")\n     String invalidUrl(String url, String message);\n     /**", "sourceBeforeFix": "id=15830", "sourceAfterFix": "id=10830"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15867, value = \"Cannot use %s with the same value for parameters %s and %s. \" +\n             \"Use %s to redeploy the same content or %s to replace content with a new version with the same name.\")\n     String cannotUseSameValueForParameters(String opName, String param1, String param2, String redeployOpName, String replaceOpName);", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10867, value = \"Cannot use %s with the same value for parameters %s and %s. \" +\n             \"Use %s to redeploy the same content or %s to replace content with a new version with the same name.\")\n     String cannotUseSameValueForParameters(String opName, String param1, String param2, String redeployOpName, String replaceOpName);", "sourceBeforeFix": "id=15835", "sourceAfterFix": "id=10835"}
{"fixCommitSHA1": "ccbc0a97414992cb1b7d84a2283d2aaa7278f3a5", "projectName": "Atmosphere.atmosphere", "bugType": "Change Numeric Literal", "problem": "             } else if (frame instanceof CloseFrame) {\n                 logger.trace(\"WebSocket.onReceivedFrame (CloseFrame)\");\n                webSocketProcessor.close(webSocket, 0);\n             } else {\n                 logger.trace(\"WebSocket.onReceivedFrame skipping: \" + frame);\n             }", "fixed": "             } else if (frame instanceof CloseFrame) {\n                 logger.trace(\"WebSocket.onReceivedFrame (CloseFrame)\");\n                webSocketProcessor.close(webSocket, 1000);\n             } else {\n                 logger.trace(\"WebSocket.onReceivedFrame skipping: \" + frame);\n             }", "sourceBeforeFix": "webSocketProcessor.close(webSocket,0)", "sourceAfterFix": "webSocketProcessor.close(webSocket,1000)"}
{"fixCommitSHA1": "2921e7bf0d74a65fdcc71d3ce3053037d14e4d44", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "             if (timeout == null) {\n                 println(lock.tryLock());\n             } else {\n                long time = Long.valueOf(timeout);\n                 try {\n                     println(lock.tryLock(time, TimeUnit.SECONDS));\n                 } catch (InterruptedException e) {", "fixed": "             if (timeout == null) {\n                 println(lock.tryLock());\n             } else {\n                long time = Long.parseLong(timeout);\n                 try {\n                     println(lock.tryLock(time, TimeUnit.SECONDS));\n                 } catch (InterruptedException e) {", "sourceBeforeFix": "Long.valueOf(args[2])", "sourceAfterFix": "Long.parseLong(args[2])"}
{"fixCommitSHA1": "55ed50c4975cf694828d46ee9ca32ce72a9ef913", "projectName": "clojure.clojure", "bugType": "Wrong Function Name", "problem": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 11:\r\n\t\t\treturn invoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "fixed": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 11:\r\n\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "sourceBeforeFix": "invoke(args)", "sourceAfterFix": "doInvoke(args)"}
{"fixCommitSHA1": "038ea1803bae1cf3be279b36395b4de4e0ff39b5", "projectName": "openhab.openhab", "bugType": "Change Identifier Used", "problem": " \t\t\tObjectMapper mapper = new ObjectMapper();\n \t\t\tJsonNode rootNode = mapper.readTree(dataString);\n \t\t\tint returnCode = rootNode.get(\"ReturnCode\").asInt();\n\t\t\tlogger.debug(\"myq ReturnCode: {}\", returnCode);\n \t\t\tMyQResponseCode rc = MyQResponseCode.fromCode(returnCode);", "fixed": " \t\t\tObjectMapper mapper = new ObjectMapper();\n \t\t\tJsonNode rootNode = mapper.readTree(dataString);\n \t\t\tint returnCode = rootNode.get(\"ReturnCode\").asInt();\n\t\t\tlogger.trace(\"myq ReturnCode: {}\", returnCode);\n \t\t\tMyQResponseCode rc = MyQResponseCode.fromCode(returnCode);", "sourceBeforeFix": "logger.debug(\"Retreiveing door data\")", "sourceAfterFix": "logger.trace(\"Retreiveing door data\")"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15833, value = \"%s is missing %s: %s\")\n     String requiredChildIsMissing(String parent, String child, String parentSpec);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10833, value = \"%s is missing %s: %s\")\n     String requiredChildIsMissing(String parent, String child, String parentSpec);\n     /**", "sourceBeforeFix": "id=15837", "sourceAfterFix": "id=10837"}
{"fixCommitSHA1": "1daccd54d2ff2ecdb21d8c60268600c37febbb70", "projectName": "Alluxio.alluxio", "bugType": "Change Operand ", "problem": "         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n            file = new RandomAccessFile(FOLDER + (mWorkerId + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());", "fixed": "         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n            file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "e81be4536f5156b105fff4b7328fc3e4e7a24931", "projectName": "junit-team.junit", "bugType": "Same Function Less Args", "problem": "         } catch (NoSuchMethodException e) {\n         }\n        return theClass.getConstructor(new Class[0]);\n     }\n     /**", "fixed": "         } catch (NoSuchMethodException e) {\n         }\n        return theClass.getConstructor();\n     }\n     /**", "sourceBeforeFix": "theClass.getConstructor(new Class[0])", "sourceAfterFix": "theClass.getConstructor()"}
{"fixCommitSHA1": "a295b91c37f681199a83fdb963344c19e0d015c0", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "     protected void handleQPoll(String[] args) {\n         long timeout = 0;\n         if (args.length > 1) {\n            timeout = Long.valueOf(args[1]);\n         }\n         try {\n             println(getQueue().poll(timeout, TimeUnit.SECONDS));", "fixed": "     protected void handleQPoll(String[] args) {\n         long timeout = 0;\n         if (args.length > 1) {\n            timeout = Long.parseLong(args[1]);\n         }\n         try {\n             println(getQueue().poll(timeout, TimeUnit.SECONDS));", "sourceBeforeFix": "Long.valueOf(args[2])", "sourceAfterFix": "Long.parseLong(args[2])"}
{"fixCommitSHA1": "ec666401f3cf68fd5c5f5b4009deec12ab6e3f45", "projectName": "openhab.openhab", "bugType": "Change Identifier Used", "problem": " \t\ttry {\n \t\t\titem = getItem(itemName);\n \t\t} catch (ItemNotFoundException e) {\n\t\t\tlogger.error(\"Cannot retrieve item {} for widget {}\", itemName, w.eClass().getInstanceTypeName());\n \t\t}\n \t\treturn formatLabel(item, itemName, label);\n \t}", "fixed": " \t\ttry {\n \t\t\titem = getItem(itemName);\n \t\t} catch (ItemNotFoundException e) {\n\t\t\tlogger.debug(\"Cannot retrieve item {} for widget {}\", itemName, w.eClass().getInstanceTypeName());\n \t\t}\n \t\treturn formatLabel(item, itemName, label);\n \t}", "sourceBeforeFix": "logger.error(\"Cannot retrieve item {} for widget {}\",itemName,w.eClass().getInstanceTypeName())", "sourceAfterFix": "logger.debug(\"Cannot retrieve item {} for widget {}\",itemName,w.eClass().getInstanceTypeName())"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public Trends getCurrentTrends() throws TwitterException {\n        return Trends.constructTrendsList(get(getSearchBaseURL() + \"trends/current.json\"\n                 , false)).get(0);\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public Trends getCurrentTrends() throws TwitterException {\n        return Trends.createTrendsList(get(getSearchBaseURL() + \"trends/current.json\"\n                 , false)).get(0);\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface CoAPEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedCoAPEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface CoAPEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedCoAPEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "projectName": "Alluxio.alluxio", "bugType": "Change Operand ", "problem": "       if (mWrite) {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n           OutputStream os = mHdfsFs.create(new Path(filePath));\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n             mBuf.putInt(0, k + mWorkerId);", "fixed": "       if (mWrite) {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           OutputStream os = mHdfsFs.create(new Path(filePath));\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n             mBuf.putInt(0, k + mWorkerId);", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "79946366e1ab141ef2b595e0079dcac7b913da2b", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "             \"1: \" + getCheckMessage(MSG_KEY_MISMATCH),\n         };\n        verify(checkConfig, getPath(\"InputPackageDeclarationDiffDirectory.java\"), expected);\n     }\n     @Test", "fixed": "             \"1: \" + getCheckMessage(MSG_KEY_MISMATCH),\n         };\n        verify(checkConfig,\n                getNonCompilablePath(\"InputPackageDeclarationDiffDirectory.java\"), expected);\n     }\n     @Test", "sourceBeforeFix": "getPath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\")", "sourceAfterFix": "getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\")"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserListMemberships(String user, long cursor) throws TwitterException {\n        return twitter4j.List.constructListOfLists(get(getApiBaseURL() + V1 +\n                 user + \"/lists/memberships.json?cursor=\" + cursor, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserListMemberships(String user, long cursor) throws TwitterException {\n        return twitter4j.List.createListList(get(getApiBaseURL() + V1 +\n                 user + \"/lists/memberships.json?cursor=\" + cursor, true));\n     }", "sourceBeforeFix": "SavedSearch.constructSavedSearches(get(getBaseURL() + \"saved_searches.json\",true))", "sourceAfterFix": "SavedSearch.createSavedSearchList(get(getBaseURL() + \"saved_searches.json\",true))"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getMentions(Paging paging) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getMentions(Paging paging) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/home_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/home_timeline.json\",true))"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     @ApiOperation(value = \"Create user\", notes = \"This can only be done by the logged in user.\", tags={ \"user\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Void.class) })\n    void createUser(@Valid User body);\n     @POST\n     @Path(\"/createWithArray\")", "fixed": "     @ApiOperation(value = \"Create user\", notes = \"This can only be done by the logged in user.\", tags={ \"user\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Void.class) })\n    void createUser(@Valid User body) throws Exception;\n     @POST\n     @Path(\"/createWithArray\")", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  private final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "5cdfcd29a2d89e658f5f37aad3deb6130eeb47af", "projectName": "Atmosphere.atmosphere", "bugType": "Change Identifier Used", "problem": "     @Override\n     public WebSocket write(String s) throws IOException {\n        if (isOpen()) webSocketConnection.getRemote().sendString(s);\n         return this;\n     }\n     @Override\n     public WebSocket write(byte[] b, int offset, int length) throws IOException {\n        if (isOpen()) webSocketConnection.getRemote().sendBytes(ByteBuffer.wrap(b, offset, length));\n         return this;\n     }", "fixed": "     @Override\n     public WebSocket write(String s) throws IOException {\n        if (isOpen()) webSocketConnection.getRemote().sendStringByFuture(s);\n         return this;\n     }\n     @Override\n     public WebSocket write(byte[] b, int offset, int length) throws IOException {\n        if (isOpen()) webSocketConnection.getRemote().sendBytesByFuture(ByteBuffer.wrap(b, offset, length));\n         return this;\n     }", "sourceBeforeFix": "webSocketConnection.getRemote().sendString(s)", "sourceAfterFix": "webSocketConnection.getRemote().sendStringByFuture(s)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "fixed": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniformfv(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniformiv(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "sourceBeforeFix": "GL20.glGetProgram(program,pname,params)", "sourceAfterFix": "GL20.glGetProgramiv(program,pname,params)"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleActionsPredicatesOptions_1() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(239);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");", "fixed": " \tpublic void testMultipleActionsPredicatesOptions_1() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(238);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");", "sourceBeforeFix": "new StringBuilder(561)", "sourceAfterFix": "new StringBuilder(560)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "0cb756acf8ee44c28bee8b9ea626e2a65cee5880", "projectName": "google.guava", "bugType": "Change Identifier Used", "problem": "     rng.nextBytes(bytes);\n     ByteBuffer littleEndian = ByteBuffer.wrap(bytes).order(ByteOrder.LITTLE_ENDIAN);\n     ByteBuffer bigEndian = ByteBuffer.wrap(bytes).order(ByteOrder.BIG_ENDIAN);\n    assertEquals(hashFunction.hashBytes(littleEndian), hashFunction.hashBytes(littleEndian));\n     assertEquals(ByteOrder.LITTLE_ENDIAN, littleEndian.order());\n    assertEquals(ByteOrder.BIG_ENDIAN, littleEndian.order());\n   }\n   static void assertHasherByteBufferPreservesByteOrder(HashFunction hashFunction) {", "fixed": "     rng.nextBytes(bytes);\n     ByteBuffer littleEndian = ByteBuffer.wrap(bytes).order(ByteOrder.LITTLE_ENDIAN);\n     ByteBuffer bigEndian = ByteBuffer.wrap(bytes).order(ByteOrder.BIG_ENDIAN);\n    assertEquals(hashFunction.hashBytes(littleEndian), hashFunction.hashBytes(bigEndian));\n     assertEquals(ByteOrder.LITTLE_ENDIAN, littleEndian.order());\n    assertEquals(ByteOrder.BIG_ENDIAN, bigEndian.order());\n   }\n   static void assertHasherByteBufferPreservesByteOrder(HashFunction hashFunction) {", "sourceBeforeFix": "littleEndian.order()", "sourceAfterFix": "bigEndian.order()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "55ed50c4975cf694828d46ee9ca32ce72a9ef913", "projectName": "clojure.clojure", "bugType": "Wrong Function Name", "problem": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 16:\r\n\t\t\treturn invoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "fixed": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 16:\r\n\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "sourceBeforeFix": "invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())", "sourceAfterFix": "doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "c2023397cf81452d755a5401fe95b1d47dbde48a", "projectName": "scribejava.scribejava", "bugType": "Same Function Swap Args", "problem": "                 .protocol(Protocol.HTTP_1_1)\n                 .code(200)\n                 .message(\"ok\")\n                .body(ResponseBody.create(MediaType.get(\"text/plain\"), new byte[0]))\n                 .build();\n         handler.onResponse(call, response);\n         assertNull(callback.getResponse());", "fixed": "                 .protocol(Protocol.HTTP_1_1)\n                 .code(200)\n                 .message(\"ok\")\n                .body(ResponseBody.create(new byte[0], MediaType.get(\"text/plain\")))\n                 .build();\n         handler.onResponse(call, response);\n         assertNull(callback.getResponse());", "sourceBeforeFix": "ResponseBody.create(MediaType.get(\"text/plain\"),new byte[0])", "sourceAfterFix": "ResponseBody.create(new byte[0],MediaType.get(\"text/plain\"))"}
{"fixCommitSHA1": "68ae53e4e14e5e7c69af1aafa9864e8c71df55d3", "projectName": "facebook.presto", "bugType": "Change Identifier Used", "problem": "                         MILLISECONDS.toSeconds(new DateTime(1970, 1, 1, 3, 4, 0, 0, DateTimeZone.UTC).getMillis()) + \",  \" +\n                         MILLISECONDS.toSeconds(new DateTime(1960, 1, 22, 3, 4, 0, 0, DateTimeZone.UTC).getMillis()) + \",  \" +\n                         MILLISECONDS.toSeconds(new DateTime(2013, 3, 22, 0, 0, 0, 0, DateTimeZone.UTC).getMillis()) + \",  \" +\n                        String.valueOf(TimeUnit.DAYS.toSeconds(123)));\n     }\n     @Test", "fixed": "                         MILLISECONDS.toSeconds(new DateTime(1970, 1, 1, 3, 4, 0, 0, DateTimeZone.UTC).getMillis()) + \",  \" +\n                         MILLISECONDS.toSeconds(new DateTime(1960, 1, 22, 3, 4, 0, 0, DateTimeZone.UTC).getMillis()) + \",  \" +\n                         MILLISECONDS.toSeconds(new DateTime(2013, 3, 22, 0, 0, 0, 0, DateTimeZone.UTC).getMillis()) + \",  \" +\n                        TimeUnit.DAYS.toSeconds(123));\n     }\n     @Test", "sourceBeforeFix": "Exception.class", "sourceAfterFix": "RuntimeException.class"}
{"fixCommitSHA1": "37a968f250d8e6b6cfadebb046f2eb1295cd95e4", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": "if (mod.getModuleActivator() != null)\n \t\t\t\t\tmod.getModuleActivator().willStop();\n \t\t\t}\n\t\t\tcatch (Throwable t) {\n \t\t\t\tlog.warn(\"Unable to call module's Activator.willStop() method\", t);\n \t\t\t}", "fixed": "if (mod.getModuleActivator() != null)\n \t\t\t\t\tmod.getModuleActivator().willStop();\n \t\t\t}\n\t\t\tcatch (Exception t) {\n \t\t\t\tlog.warn(\"Unable to call module's Activator.willStop() method\", t);\n \t\t\t}", "sourceBeforeFix": "Throwable t", "sourceAfterFix": "Exception t"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface NettyEndpointBuilder\n             extends\n                 NettyEndpointConsumerBuilder, NettyEndpointProducerBuilder {\n         default AdvancedNettyEndpointBuilder advanced() {", "fixed": "     \n    public interface NettyEndpointBuilder\n             extends\n                 NettyEndpointConsumerBuilder, NettyEndpointProducerBuilder {\n         default AdvancedNettyEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "626cf14a6e42fa0a2d144e8e16940e09bafd754a", "projectName": "druid-io.druid", "bugType": "Wrong Function Name", "problem": "         }\n     );\n    log.info(\"Performing lookup: %s --> %s\", ips, retVal);\n     return retVal;\n   }", "fixed": "         }\n     );\n    log.debug(\"Performing lookup: %s --> %s\", ips, retVal);\n     return retVal;\n   }", "sourceBeforeFix": "log.info(\"Performing lookup: %s --> %s\",nodeIds,retVal)", "sourceAfterFix": "log.debug(\"Performing lookup: %s --> %s\",nodeIds,retVal)"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "             }\n         }\n         if (isStatisticsEnabled()) {\n            statistics.addGetTimeNano(System.nanoTime() - start);\n         }\n         CacheEntryProcessorEntry entry = new CacheEntryProcessorEntry(key, record, this, now);\n         final Object process = entryProcessor.process(entry, arguments);", "fixed": "             }\n         }\n         if (isStatisticsEnabled()) {\n            statistics.addGetTimeNanos(System.nanoTime() - start);\n         }\n         CacheEntryProcessorEntry entry = new CacheEntryProcessorEntry(key, record, this, now);\n         final Object process = entryProcessor.process(entry, arguments);", "sourceBeforeFix": "statistics.addGetTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addGetTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "ac418afcea37e4f1def3780fea94c2454ab5c866", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "                         reloadRequired = reloadRequired || Logging.requiresReload(attribute.getFlags());\n                     }\n                     if (restartRequired) {\n                        context.restartRequired();\n                     } else if (reloadRequired) {\n                        context.reloadRequired();\n                     }\n                 }\n                 performRollback(context, configuration, name, originalModel);", "fixed": "                         reloadRequired = reloadRequired || Logging.requiresReload(attribute.getFlags());\n                     }\n                     if (restartRequired) {\n                        context.revertRestartRequired();\n                     } else if (reloadRequired) {\n                        context.revertReloadRequired();\n                     }\n                 }\n                 performRollback(context, configuration, name, originalModel);", "sourceBeforeFix": "context.reloadRequired()", "sourceAfterFix": "context.revertReloadRequired()"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public List<Trends> getDailyTrends(Date date, boolean excludeHashTags) throws TwitterException {\n        return Trends.constructTrendsList(get(getSearchBaseURL()\n                 + \"trends/daily.json?date=\" + toDateStr(date)\n                 + (excludeHashTags ? \"&exclude=hashtags\" : \"\"), false));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public List<Trends> getDailyTrends(Date date, boolean excludeHashTags) throws TwitterException {\n        return Trends.createTrendsList(get(getSearchBaseURL()\n                 + \"trends/daily.json?date=\" + toDateStr(date)\n                 + (excludeHashTags ? \"&exclude=hashtags\" : \"\"), false));\n     }", "sourceBeforeFix": "DirectMessage.constructDirectMessages(get(getBaseURL() + \"direct_messages.json\",true))", "sourceAfterFix": "DirectMessage.createDirectMessageList(get(getBaseURL() + \"direct_messages.json\",true))"}
{"fixCommitSHA1": "3dddcc4cdf4a74ddbd4607c6aaee5bdd8ac46c27", "projectName": "gephi.gephi", "bugType": "Change Modifier", "problem": "     }\n     @Override\n    public List<EdgeModel> getSelectedEdges() {\n         List<EdgeModel> selected = new ArrayList<>();\n         for (Iterator<EdgeModel> itr = octree.getEdgeIterator(); itr.hasNext();) {\n             EdgeModel edgeModel = itr.next();", "fixed": "     }\n     @Override\n    public synchronized List<EdgeModel> getSelectedEdges() {\n         List<EdgeModel> selected = new ArrayList<>();\n         for (Iterator<EdgeModel> itr = octree.getEdgeIterator(); itr.hasNext();) {\n             EdgeModel edgeModel = itr.next();", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 15866, value = \"%s is null\")\n     IllegalArgumentException nullVar(String name);\n     /**", "fixed": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 10866, value = \"%s is null\")\n     IllegalArgumentException nullVar(String name);\n     /**", "sourceBeforeFix": "id=15857", "sourceAfterFix": "id=10857"}
{"fixCommitSHA1": "9771ba62390a56363b20e52f12a8b9b34c51da62", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "     public void testSamplingUsingmessageFrequencyViaDSL() throws Exception {\n         long totalMessages = 50;\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedMessageCount(10);\n         mock.setResultWaitTime(100);\n         for (int i = 0; i < totalMessages; i++) {", "fixed": "     public void testSamplingUsingmessageFrequencyViaDSL() throws Exception {\n         long totalMessages = 50;\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedMinimumMessageCount(10);\n         mock.setResultWaitTime(100);\n         for (int i = 0; i < totalMessages; i++) {", "sourceBeforeFix": "mock.expectedMessageCount(2)", "sourceAfterFix": "mock.expectedMinimumMessageCount(2)"}
{"fixCommitSHA1": "9031a4c20455ba16a63233f10783a55915afcd9b", "projectName": "alibaba.dubbo", "bugType": "Change Unary Operator\t", "problem": "                                     jedis = jedisPool.getResource();\r\n                                     try {\r\n                                         if (service.endsWith(Constants.ANY_VALUE)) {\r\n                                            if (!first) {\r\n                                                 first = false;\r\n                                                 Set<String> keys = jedis.keys(service);\r\n                                                 if (CollectionUtils.isNotEmpty(keys)) {\r", "fixed": "                                     jedis = jedisPool.getResource();\r\n                                     try {\r\n                                         if (service.endsWith(Constants.ANY_VALUE)) {\r\n                                            if (first) {\r\n                                                 first = false;\r\n                                                 Set<String> keys = jedis.keys(service);\r\n                                                 if (CollectionUtils.isNotEmpty(keys)) {\r", "sourceBeforeFix": "!first", "sourceAfterFix": "first"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetsOfMe(Paging paging) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweets_of_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetsOfMe(Paging paging) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweets_of_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites/\" + id+ \".json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites/\" + id+ \".json\",new PostParameter[0],true))"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedWeatherEndpointBuilder\n             extends\n                 AdvancedWeatherEndpointConsumerBuilder, AdvancedWeatherEndpointProducerBuilder {\n         default WeatherEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedWeatherEndpointBuilder\n             extends\n                 AdvancedWeatherEndpointConsumerBuilder, AdvancedWeatherEndpointProducerBuilder {\n         default WeatherEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "d270a8582b50321bc4b8a5921ff2439022a403d2", "projectName": "checkstyle.checkstyle", "bugType": "Less Specific If", "problem": "              token = token.getParent())\n         {\n             final int type = token.getType();\n            if (type == TokenTypes.CLASS_DEF) {\nbreak;\n             }\n             else if (type == TokenTypes.LITERAL_NEW) {\nbreak;", "fixed": "              token = token.getParent())\n         {\n             final int type = token.getType();\n            if (type == TokenTypes.CLASS_DEF\n                || type == TokenTypes.ENUM_DEF\n                || type == TokenTypes.ANNOTATION_DEF)\n            {\nbreak;\n             }\n             else if (type == TokenTypes.LITERAL_NEW) {\nbreak;", "sourceBeforeFix": "type == TokenTypes.CLASS_DEF", "sourceAfterFix": "type == TokenTypes.CLASS_DEF || type == TokenTypes.ENUM_DEF || type == TokenTypes.INTERFACE_DEF"}
{"fixCommitSHA1": "2a88a3de65a60011e86c05a4eb31182521fc4544", "projectName": "naver.pinpoint", "bugType": "Change Identifier Used", "problem": "             logger.debug(\"Asynchronous invocation. asyncContext={}\", asyncContext);\n         }\n        final Trace trace = asyncContext.continueAsyncTraceObject();\n         if (trace == null) {\n             return;\n         }", "fixed": "             logger.debug(\"Asynchronous invocation. asyncContext={}\", asyncContext);\n         }\n        final Trace trace = asyncContext.currentAsyncTraceObject();\n         if (trace == null) {\n             return;\n         }", "sourceBeforeFix": "asyncContext.continueAsyncTraceObject()", "sourceAfterFix": "asyncContext.currentAsyncTraceObject()"}
{"fixCommitSHA1": "34e23fe425e62f240a65c435d41adfbbe211522d", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "     org.apache.hadoop.hbase.client.SnapshotDescription snapshotPOJO = null;\n     if (cpHost != null) {\n      snapshotPOJO = ProtobufUtil.createSnapshotDesc(reqSnapshot);\n       cpHost.preRestoreSnapshot(snapshotPOJO, snapshotTableDesc);\n     }", "fixed": "     org.apache.hadoop.hbase.client.SnapshotDescription snapshotPOJO = null;\n     if (cpHost != null) {\n      snapshotPOJO = ProtobufUtil.createSnapshotDesc(snapshot);\n       cpHost.preRestoreSnapshot(snapshotPOJO, snapshotTableDesc);\n     }", "sourceBeforeFix": "ProtobufUtil.createSnapshotDesc(reqSnapshot)", "sourceAfterFix": "ProtobufUtil.createSnapshotDesc(snapshot)"}
{"fixCommitSHA1": "3757a700a89638e5747d966bdaa8266b62c974c8", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "     assertEquals(encoded, encoding.encode(bytes));\n   }\n  private void testDecodes(BaseEncoding encoding, String encoded, String decoded) {\n     byte[] bytes;\n     try {\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();", "fixed": "     assertEquals(encoded, encoding.encode(bytes));\n   }\n  private static void testDecodes(BaseEncoding encoding, String encoded, String decoded) {\n     byte[] bytes;\n     try {\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface JpaEndpointBuilder\n             extends\n                 JpaEndpointConsumerBuilder, JpaEndpointProducerBuilder {\n         default AdvancedJpaEndpointBuilder advanced() {", "fixed": "     \n    public interface JpaEndpointBuilder\n             extends\n                 JpaEndpointConsumerBuilder, JpaEndpointProducerBuilder {\n         default AdvancedJpaEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsCsv(String path, int batchSize, OUT endTuple) {\n \t\tif (this instanceof SingleOutputStreamOperator) {\n \t\t\t((SingleOutputStreamOperator<?, ?>) this).setMutability(false);\n \t\t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsCsv(String path, int batchSize, OUT endTuple) {\n \t\tif (this instanceof SingleOutputStreamOperator) {\n \t\t\t((SingleOutputStreamOperator<?, ?>) this).setMutability(false);\n \t\t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15840, value = \"Interrupted waiting for result from server %s\")\n     String interruptedAwaitingResultFromServer(ServerIdentity server);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10840, value = \"Interrupted waiting for result from server %s\")\n     String interruptedAwaitingResultFromServer(ServerIdentity server);\n     /**", "sourceBeforeFix": "id=15866", "sourceAfterFix": "id=10866"}
{"fixCommitSHA1": "2e44a1ba91557d4d6231bd46c63697776208bc9e", "projectName": "netty.netty", "bugType": "Change Numeric Literal", "problem": "                 timestamps.add(System.nanoTime());\n                 if (empty) {\n                     try {\n                        Thread.sleep(400);\n                     } catch (InterruptedException e) {\n                     }", "fixed": "                 timestamps.add(System.nanoTime());\n                 if (empty) {\n                     try {\n                        Thread.sleep(401);\n                     } catch (InterruptedException e) {\n                     }", "sourceBeforeFix": "Thread.sleep(400)", "sourceAfterFix": "Thread.sleep(401)"}
{"fixCommitSHA1": "4b52e5d010469405c1ec24baa2f8457f3eada222", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic boolean keyUp (int keycode) {\r\n\t\tInputProcessor[] items = processors.begin();\r\n \t\ttry {\r\n \t\t\tfor (int i = 0, n = processors.size; i < n; i++)\r\n\t\t\t\tif (items[i].keyUp(keycode)) return true;\r\n \t\t} finally {\r\n \t\t\tprocessors.end();\r\n \t\t}\r", "fixed": " \t}\r\n \tpublic boolean keyUp (int keycode) {\r\n\t\tObject[] items = processors.begin();\r\n \t\ttry {\r\n \t\t\tfor (int i = 0, n = processors.size; i < n; i++)\r\n\t\t\t\tif (((InputProcessor)items[i]).keyUp(keycode)) return true;\r\n \t\t} finally {\r\n \t\t\tprocessors.end();\r\n \t\t}\r", "sourceBeforeFix": "InputProcessor[]", "sourceAfterFix": "Object[]"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "fixed": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniformfv(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniformiv(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "sourceBeforeFix": "GL20.glUniformMatrix3(location,transpose,value)", "sourceAfterFix": "GL20.glUniformMatrix3fv(location,transpose,value)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15865, value = \"Invalid content declaration\")\n     String invalidContentDeclaration();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10865, value = \"Invalid content declaration\")\n     String invalidContentDeclaration();\n     /**", "sourceBeforeFix": "id=15856", "sourceAfterFix": "id=10856"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15841, value = \"Exception getting result from server %s: %s\")\n     String exceptionAwaitingResultFromServer(ServerIdentity server, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10841, value = \"Exception getting result from server %s: %s\")\n     String exceptionAwaitingResultFromServer(ServerIdentity server, String message);\n     /**", "sourceBeforeFix": "id=15854", "sourceAfterFix": "id=10854"}
{"fixCommitSHA1": "7d5e825abd68a4ffcb86865149b917edf76a47b6", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "     public static DetailAST getAnnotationHolder(DetailAST ast)\n     {\n         if (ast == null) {\n            throw new NullPointerException(\"the ast is null\");\n         }\n         final DetailAST annotationHolder;", "fixed": "     public static DetailAST getAnnotationHolder(DetailAST ast)\n     {\n         if (ast == null) {\n            throw new IllegalArgumentException(\"the ast is null\");\n         }\n         final DetailAST annotationHolder;", "sourceBeforeFix": "new NullPointerException(\"the ast is null\")", "sourceAfterFix": "new IllegalArgumentException(\"the ast is null\")"}
{"fixCommitSHA1": "0641df92c5dd9d8d92944e9165ffe5f2d2c9c9ec", "projectName": "apache.hbase", "bugType": "Change Binary Operator", "problem": "   throws KeeperException {\n     try {\n       ZooKeeper zk = zkw.getZooKeeper();\n      if (zk.exists(znode, false) != null) {\n         zk.create(znode, new byte[0], Ids.OPEN_ACL_UNSAFE,\n             CreateMode.PERSISTENT);\n       }", "fixed": "   throws KeeperException {\n     try {\n       ZooKeeper zk = zkw.getZooKeeper();\n      if (zk.exists(znode, false) == null) {\n         zk.create(znode, new byte[0], Ids.OPEN_ACL_UNSAFE,\n             CreateMode.PERSISTENT);\n       }", "sourceBeforeFix": "zk.exists(znode,false) != null", "sourceAfterFix": "zk.exists(znode,false) == null"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @return property value in the type of the default value\n \t * @since 1.7\n \t */\n\tpublic <T> T getGlobalPropertyValue(String propertyName, T defaultValue) throws APIException;\n \t/**\n \t * @param aClass class of object getting length for", "fixed": " \t * @return property value in the type of the default value\n \t * @since 1.7\n \t */\n\tpublic <T> T getGlobalPropertyValue(String propertyName, T defaultValue);\n \t/**\n \t * @param aClass class of object getting length for", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "f9c863f126519ad2cfd7af4cef3eed04e8f87ea3", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"processKey\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;C)Ljava/lang/String;\");\n         } else if (propertyClass == long.class) {\n            mw.visitVarInsn(LLOAD, context.var(\"long\"));\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"processKey\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;J)Ljava/lang/String;\");\n         } else if (propertyClass == float.class) {", "fixed": "             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"processKey\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;C)Ljava/lang/String;\");\n         } else if (propertyClass == long.class) {\n            mw.visitVarInsn(LLOAD, context.var(\"long\", 2));\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"processKey\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;J)Ljava/lang/String;\");\n         } else if (propertyClass == float.class) {", "sourceBeforeFix": "context.var(\"double\")", "sourceAfterFix": "context.var(\"double\",2)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "35dc7982d28800b4fecdf0772236a2d8e054aa77", "projectName": "spring-projects.spring-boot", "bugType": "Change Modifier", "problem": " \tprivate int port = Integer.valueOf(System.getProperty(\"port\"));\n \t@Test\n\tpublic void testHome() throws Exception {\nString url = \"http:\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);\n \t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);", "fixed": " \tprivate int port = Integer.valueOf(System.getProperty(\"port\"));\n \t@Test\n\tvoid testHome() throws Exception {\nString url = \"http:\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);\n \t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "2462c82c0ea8766f40cf454c57557a5c63d2c09d", "projectName": "druid-io.druid", "bugType": "Change Numeric Literal", "problem": "     this.baseTaskDir = new File(defaultDir(baseTaskDir, \"persistent/task\"));\n     this.hadoopWorkingPath = hadoopWorkingPath == null ? \"/tmp/druid-indexing\" : hadoopWorkingPath;\n    this.defaultRowFlushBoundary = defaultRowFlushBoundary == null ? 500000 : defaultRowFlushBoundary;\n     this.defaultHadoopCoordinates = defaultHadoopCoordinates == null\n                                     ? DEFAULT_DEFAULT_HADOOP_COORDINATES\n                                     : defaultHadoopCoordinates;", "fixed": "     this.baseTaskDir = new File(defaultDir(baseTaskDir, \"persistent/task\"));\n     this.hadoopWorkingPath = hadoopWorkingPath == null ? \"/tmp/druid-indexing\" : hadoopWorkingPath;\n    this.defaultRowFlushBoundary = defaultRowFlushBoundary == null ? 75000 : defaultRowFlushBoundary;\n     this.defaultHadoopCoordinates = defaultHadoopCoordinates == null\n                                     ? DEFAULT_DEFAULT_HADOOP_COORDINATES\n                                     : defaultHadoopCoordinates;", "sourceBeforeFix": "defaultRowFlushBoundary == null ? 500000 : defaultRowFlushBoundary", "sourceAfterFix": "defaultRowFlushBoundary == null ? 75000 : defaultRowFlushBoundary"}
{"fixCommitSHA1": "6121d105fc56c57636b98ecc7504caff978bcd14", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Override\n \tprotected boolean isNestedArchive(Archive.Entry entry) {\n \t\tif (entry.isDirectory()) {\n\t\t\treturn entry.getName().startsWith(BOOT_INF_CLASSES);\n \t\t}\n \t\treturn entry.getName().startsWith(BOOT_INF_LIB);\n \t}", "fixed": " \t@Override\n \tprotected boolean isNestedArchive(Archive.Entry entry) {\n \t\tif (entry.isDirectory()) {\n\t\t\treturn entry.getName().equals(BOOT_INF_CLASSES);\n \t\t}\n \t\treturn entry.getName().startsWith(BOOT_INF_LIB);\n \t}", "sourceBeforeFix": "entry.getName().startsWith(BOOT_INF_CLASSES)", "sourceAfterFix": "entry.getName().equals(BOOT_INF_CLASSES)"}
{"fixCommitSHA1": "df883a9823b4c1b84a2e5543fcbea121cdaeddb5", "projectName": "druid-io.druid", "bugType": "Change Identifier Used", "problem": "           {\n             int retVal = -Ints.compare(zkWorker.getCurrCapacityUsed(), zkWorker2.getCurrCapacityUsed());\n             if (retVal == 0) {\n              retVal = zkWorker.getWorker().getHost().compareTo(zkWorker.getWorker().getHost());\n             }\n             return retVal;", "fixed": "           {\n             int retVal = -Ints.compare(zkWorker.getCurrCapacityUsed(), zkWorker2.getCurrCapacityUsed());\n             if (retVal == 0) {\n              retVal = zkWorker.getWorker().getHost().compareTo(zkWorker2.getWorker().getHost());\n             }\n             return retVal;", "sourceBeforeFix": "zkWorker.getWorker()", "sourceAfterFix": "zkWorker2.getWorker()"}
{"fixCommitSHA1": "486b290863a66641b0ec30dbf2d9e349733cae44", "projectName": "apache.hbase", "bugType": "Wrong Function Name", "problem": "    */\n   public void majorCompact(final String tableNameOrRegionName)\n   throws IOException, InterruptedException {\n    majorCompact(Bytes.toBytesBinary(tableNameOrRegionName));\n   }\n   /**", "fixed": "    */\n   public void majorCompact(final String tableNameOrRegionName)\n   throws IOException, InterruptedException {\n    majorCompact(Bytes.toBytes(tableNameOrRegionName));\n   }\n   /**", "sourceBeforeFix": "Bytes.toBytesBinary(tableNameOrRegionName)", "sourceAfterFix": "Bytes.toBytes(tableNameOrRegionName)"}
{"fixCommitSHA1": "b641b46db4f01fdbbce2fe6d544cca4b4b27b3b5", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Same Function Swap Args", "problem": "         String ha2 = getMd5(method + \":\" + uri.getPath());\n         String expectedResponse = getMd5(ha1 + \":\" + nonce + \":\" + nc + \":\" + cnonce + \":\" + qop + \":\" + ha2);\n        assertEquals(expectedResponse, orig.getResponse());\n     }\n     private String getMd5(String what) {", "fixed": "         String ha2 = getMd5(method + \":\" + uri.getPath());\n         String expectedResponse = getMd5(ha1 + \":\" + nonce + \":\" + nc + \":\" + cnonce + \":\" + qop + \":\" + ha2);\n        assertEquals(orig.getResponse(), expectedResponse);\n     }\n     private String getMd5(String what) {", "sourceBeforeFix": "assertEquals(expectedResponse,orig.getResponse())", "sourceAfterFix": "assertEquals(orig.getResponse(),expectedResponse)"}
{"fixCommitSHA1": "a78b4a849de52c109940c50699cf1dad17368a33", "projectName": "eclipse.vert.x", "bugType": "Change Identifier Used", "problem": "    * @param k The key\n    * @param resultHandler - this will be called some time later to signify the value has been removed\n    */\n  void remove(K k, Handler<AsyncResult<Boolean>> resultHandler);\n }", "fixed": "    * @param k The key\n    * @param resultHandler - this will be called some time later to signify the value has been removed\n    */\n  void remove(K k, Handler<AsyncResult<Void>> resultHandler);\n }", "sourceBeforeFix": "AsyncResult<Boolean>", "sourceAfterFix": "AsyncResult<Void>"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  private final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "0867fa3723a28ad280f7512a7b68141b58215209", "projectName": "libgdx.libgdx", "bugType": "Change Caller in Function Call", "problem": " \tprivate IntBuffer toIntBuffer (int v[], int offset, int count) {\r\n \t\tensureBufferCapacity(count << 2);\r\n\t\tfloatBuffer.clear();\r\n \t\tcom.badlogic.gdx.utils.BufferUtils.copy(v, count, offset, intBuffer);\r\n \t\treturn intBuffer;\r\n \t}\r", "fixed": " \tprivate IntBuffer toIntBuffer (int v[], int offset, int count) {\r\n \t\tensureBufferCapacity(count << 2);\r\n\t\tintBuffer.clear();\r\n \t\tcom.badlogic.gdx.utils.BufferUtils.copy(v, count, offset, intBuffer);\r\n \t\treturn intBuffer;\r\n \t}\r", "sourceBeforeFix": "floatBuffer.clear()", "sourceAfterFix": "intBuffer.clear()"}
{"fixCommitSHA1": "df0e14359abd61ff3a5713e5e12e116b3fb1c3ed", "projectName": "openmrs.openmrs-core", "bugType": "Change Modifier", "problem": " \tprivate static final Map<String, DaemonToken> daemonTokens = new WeakHashMap<String, DaemonToken>();\n\tprivate static Set<String> actualStartupOrder;\n \t/**\n \t * Add a module (in the form of a jar file) to the list of openmrs modules Returns null if an", "fixed": " \tprivate static final Map<String, DaemonToken> daemonTokens = new WeakHashMap<String, DaemonToken>();\n\tprivate static volatile Set<String> actualStartupOrder;\n \t/**\n \t * Add a module (in the form of a jar file) to the list of openmrs modules Returns null if an", "sourceBeforeFix": "12", "sourceAfterFix": "76"}
{"fixCommitSHA1": "fa5635c39e3000406103657977b98efa79bd4512", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      * {@inheritDoc}\n      */\n     public List<Trends> getWeeklyTrends(Date date, boolean excludeHashTags) throws TwitterException {\n        return TrendsJSONImpl.createTrendsList(http.get(conf.getSearchBaseURL()\n                 + \"trends/weekly.json?date=\" + toDateStr(date)\n                 + (excludeHashTags ? \"&exclude=hashtags\" : \"\")));\n     }", "fixed": "      * {@inheritDoc}\n      */\n     public List<Trends> getWeeklyTrends(Date date, boolean excludeHashTags) throws TwitterException {\n        return TrendsJSONImpl.createTrendsList(http.get(conf.getRestBaseURL()\n                 + \"trends/weekly.json?date=\" + toDateStr(date)\n                 + (excludeHashTags ? \"&exclude=hashtags\" : \"\")));\n     }", "sourceBeforeFix": "conf.getSearchBaseURL()", "sourceAfterFix": "conf.getRestBaseURL()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": " };\n   \n  private final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler", "fixed": " };\n   \n  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "5e7873ebd45790d9d72eb9d312de4611dc97f796", "projectName": "Activiti.Activiti", "bugType": "Change Numeric Literal", "problem": "     assertEquals(0, historyService.createHistoricActivityInstanceQuery().processInstanceId(\"nonExistingProcessInstanceId\").list().size());\n     if (processEngineConfiguration.getHistoryLevel()==ProcessEngineConfigurationImpl.HISTORYLEVEL_FULL) {\n      assertEquals(2, historyService.createHistoricActivityInstanceQuery().processInstanceId(processInstance.getId()).list().size());\n     } else if (processEngineConfiguration.getHistoryLevel()>=ProcessEngineConfigurationImpl.HISTORYLEVEL_ACTIVITY) {\n      assertEquals(1, historyService.createHistoricActivityInstanceQuery().processInstanceId(processInstance.getId()).list().size());\n     } else {\n       assertEquals(0, historyService.createHistoricActivityInstanceQuery().processInstanceId(processInstance.getId()).list().size());\n     }", "fixed": "     assertEquals(0, historyService.createHistoricActivityInstanceQuery().processInstanceId(\"nonExistingProcessInstanceId\").list().size());\n     if (processEngineConfiguration.getHistoryLevel()==ProcessEngineConfigurationImpl.HISTORYLEVEL_FULL) {\n      assertEquals(3, historyService.createHistoricActivityInstanceQuery().processInstanceId(processInstance.getId()).list().size());\n     } else if (processEngineConfiguration.getHistoryLevel()>=ProcessEngineConfigurationImpl.HISTORYLEVEL_ACTIVITY) {\n      assertEquals(3, historyService.createHistoricActivityInstanceQuery().processInstanceId(processInstance.getId()).list().size());\n     } else {\n       assertEquals(0, historyService.createHistoricActivityInstanceQuery().processInstanceId(processInstance.getId()).list().size());\n     }", "sourceBeforeFix": "assertEquals(2,historyService.createHistoricActivityInstanceQuery().finished().list().size())", "sourceAfterFix": "assertEquals(3,historyService.createHistoricActivityInstanceQuery().finished().list().size())"}
{"fixCommitSHA1": "2bbc1368b233f630f6acbf6d6c8d52ec5f1d1772", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "     private final String path;\n     private AssetTree client;\n    public ChronicleEngineConsumer(ChronicleEngineEnpoint endpoint, Processor processor) {\n         super(endpoint, processor);\n         this.path = endpoint.getPath();", "fixed": "     private final String path;\n     private AssetTree client;\n    public ChronicleEngineConsumer(ChronicleEngineEndpoint endpoint, Processor processor) {\n         super(endpoint, processor);\n         this.path = endpoint.getPath();", "sourceBeforeFix": "ChronicleEngineEnpoint endpoint", "sourceAfterFix": "ChronicleEngineEndpoint endpoint"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleAlternativesWithCommonLabel_4() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(730);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {System.out.println($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "fixed": " \tpublic void testMultipleAlternativesWithCommonLabel_4() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(729);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {System.out.println($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "sourceBeforeFix": "new StringBuilder(247)", "sourceAfterFix": "new StringBuilder(246)"}
{"fixCommitSHA1": "1adccc7a5bdc515f01ae6bd644097ab85336bd84", "projectName": "hazelcast.hazelcast", "bugType": "Same Function More Args", "problem": "         populateNearCache(clientMap, 1000);\n        HazelcastInstance member = hazelcastFactory.newHazelcastInstance();\n         final ClearEventCounterEventHandler handler = new ClearEventCounterEventHandler();", "fixed": "         populateNearCache(clientMap, 1000);\n        HazelcastInstance member = hazelcastFactory.newHazelcastInstance(newConfig());\n         final ClearEventCounterEventHandler handler = new ClearEventCounterEventHandler();", "sourceBeforeFix": "hazelcastFactory.newHazelcastClient()", "sourceAfterFix": "hazelcastFactory.newHazelcastClient(newClientConfig())"}
{"fixCommitSHA1": "cb6f6e26c12839e59243f25bfb142ec5e5b71135", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "     private class MyAggregationStrategy implements TimeoutAwareAggregationStrategy {\n         public void timeout(Exchange oldExchange, int index, int total, long timeout) {\n            assertEquals(2000, timeout);\n             assertEquals(3, total);\n             assertEquals(0, index);\n             assertNotNull(oldExchange);", "fixed": "     private class MyAggregationStrategy implements TimeoutAwareAggregationStrategy {\n         public void timeout(Exchange oldExchange, int index, int total, long timeout) {\n            assertEquals(1000, timeout);\n             assertEquals(3, total);\n             assertEquals(0, index);\n             assertNotNull(oldExchange);", "sourceBeforeFix": "from(\"direct:a\").delay(3000)", "sourceAfterFix": "from(\"direct:a\").delay(2000)"}
{"fixCommitSHA1": "364ae9baf3824dc4e0e56b2b681f8302731e8cdd", "projectName": "apache.hive", "bugType": "Same Function More Args", "problem": "       try {\n         ret = getMS().deleteTableColumnStatistics(dbName, tableName, colName);\n       } finally {\n        endFunction(\"delete_column_statistics_by_table: \", ret != false);\n       }\n       return ret;\n    }", "fixed": "       try {\n         ret = getMS().deleteTableColumnStatistics(dbName, tableName, colName);\n       } finally {\n        endFunction(\"delete_column_statistics_by_table: \", ret != false, null);\n       }\n       return ret;\n    }", "sourceBeforeFix": "endFunction(\"write_column_statistics: \",ret != false)", "sourceAfterFix": "endFunction(\"write_column_statistics: \",ret != false,null)"}
{"fixCommitSHA1": "ddb852cdf7da29827fcab0b25a2b2ed6ee443cf9", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "         return copy;\n     }\n    protected AsyncProcessor createErrorHandler(RouteContext routeContext, Exchange exchange, AsyncProcessor processor) {\n         AsyncProcessor answer = processor;\n         boolean tryBlock = exchange.getProperty(Exchange.TRY_ROUTE_BLOCK, false, boolean.class);", "fixed": "         return copy;\n     }\n    protected AsyncProcessor createErrorHandler(RouteContext routeContext, Exchange exchange, AsyncProcessor processor, Endpoint endpoint) {\n         AsyncProcessor answer = processor;\n         boolean tryBlock = exchange.getProperty(Exchange.TRY_ROUTE_BLOCK, false, boolean.class);", "sourceBeforeFix": "KeyValueHolder<RouteContext,Processor>", "sourceAfterFix": "KeyValueHolder<String,Processor>"}
{"fixCommitSHA1": "8abe81aaa656d78ac8b9e1a631a849025c9560b0", "projectName": "antlr.antlr4", "bugType": "Wrong Function Name", "problem": " \t\tchar[] serializedAtn = ATNSerializer.getSerializedAsChars(atn);\n \t\tATN deserialized = new ATNDeserializer().deserialize(serializedAtn);\n\t\treturn new LexerInterpreter(fileName, Arrays.asList(getTokenNames()), Arrays.asList(getRuleNames()), ((LexerGrammar)this).modes.keySet(), deserialized, input);\n \t}\n \tpublic ParserInterpreter createParserInterpreter(TokenStream tokenStream) {", "fixed": " \t\tchar[] serializedAtn = ATNSerializer.getSerializedAsChars(atn);\n \t\tATN deserialized = new ATNDeserializer().deserialize(serializedAtn);\n\t\treturn new LexerInterpreter(fileName, Arrays.asList(getTokenDisplayNames()), Arrays.asList(getRuleNames()), ((LexerGrammar)this).modes.keySet(), deserialized, input);\n \t}\n \tpublic ParserInterpreter createParserInterpreter(TokenStream tokenStream) {", "sourceBeforeFix": "getTokenNames()", "sourceAfterFix": "getTokenDisplayNames()"}
{"fixCommitSHA1": "6e0e38f09f74fb633a33cfd5c59265518bcf85be", "projectName": "netty.netty", "bugType": "Change Identifier Used", "problem": "         HttpRequest req = (HttpRequest) ch.readInbound();\n         DecoderResult dr = req.getDecoderResult();\n         assertFalse(dr.isSuccess());\n        assertFalse(dr.isFailure());\n         ensureInboundTrafficDiscarded(ch);\n     }", "fixed": "         HttpRequest req = (HttpRequest) ch.readInbound();\n         DecoderResult dr = req.getDecoderResult();\n         assertFalse(dr.isSuccess());\n        assertTrue(dr.isFailure());\n         ensureInboundTrafficDiscarded(ch);\n     }", "sourceBeforeFix": "assertFalse(dr.isFailure())", "sourceAfterFix": "assertTrue(dr.isFailure())"}
{"fixCommitSHA1": "7d5e825abd68a4ffcb86865149b917edf76a47b6", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "     public static DetailAST getAnnotationHolder(DetailAST ast)\n     {\n         if (ast == null) {\n            throw new NullPointerException(\"the ast is null\");\n         }\n         final DetailAST annotationHolder;", "fixed": "     public static DetailAST getAnnotationHolder(DetailAST ast)\n     {\n         if (ast == null) {\n            throw new IllegalArgumentException(\"the ast is null\");\n         }\n         final DetailAST annotationHolder;", "sourceBeforeFix": "new NullPointerException(\"the ast is null\")", "sourceAfterFix": "new IllegalArgumentException(\"the ast is null\")"}
{"fixCommitSHA1": "5b13fe70c25812157a1e4432135eb9639e72bc6a", "projectName": "apache.flink", "bugType": "Wrong Function Name", "problem": " \t\tfinal Sink output = new Sink(\"output.json\").withInputs(selection);\n \t\texpectedPlan.setSinks(output);\n\t\tassertEquals(expectedPlan, actualPlan);\n \t}\n \t@Test", "fixed": " \t\tfinal Sink output = new Sink(\"output.json\").withInputs(selection);\n \t\texpectedPlan.setSinks(output);\n\t\tassertPlanEquals(expectedPlan, actualPlan);\n \t}\n \t@Test", "sourceBeforeFix": "assertEquals(expectedPlan,actualPlan)", "sourceAfterFix": "assertPlanEquals(expectedPlan,actualPlan)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "fixed": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniformfv(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniformiv(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "sourceBeforeFix": "GL20.glUniformMatrix3(location,transpose,toFloatBuffer(value,offset,count * 9))", "sourceAfterFix": "GL20.glUniformMatrix3fv(location,transpose,toFloatBuffer(value,offset,count * 9))"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n*  @see java.util.Comparator\n \t */\n\tpublic int compare(DataInputView firstSource, DataInputView secondSource) throws IOException;", "fixed": " \t * \n*  @see java.util.Comparator\n \t */\n\tpublic abstract int compare(DataInputView firstSource, DataInputView secondSource) throws IOException;", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15855, value = \"Invalid byte stream.\")\n     String invalidByteStream();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10855, value = \"Invalid byte stream.\")\n     String invalidByteStream();\n     /**", "sourceBeforeFix": "id=15835", "sourceAfterFix": "id=10835"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface FacebookEndpointBuilder\n             extends\n                 FacebookEndpointConsumerBuilder, FacebookEndpointProducerBuilder {\n         default AdvancedFacebookEndpointBuilder advanced() {", "fixed": "     \n    public interface FacebookEndpointBuilder\n             extends\n                 FacebookEndpointConsumerBuilder, FacebookEndpointProducerBuilder {\n         default AdvancedFacebookEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "8a34e1589d4d35e5f00328e562922023d4e616fd", "projectName": "thinkaurelius.titan", "bugType": "Same Function More Args", "problem": "     public void testGraphTestSuite() throws Exception {\nthis.stopWatch();\n        doTestSuite(new GraphTestSuite(this), ImmutableSet.of(\"testStringRepresentation\"));\n         printTestPerformance(\"GraphTestSuite\", this.stopWatch());\n     }", "fixed": "     public void testGraphTestSuite() throws Exception {\nthis.stopWatch();\n        doTestSuite(new GraphTestSuite(this), ImmutableSet.of(\"testStringRepresentation\",\"testDataTypeValidationOnProperties\"));\n         printTestPerformance(\"GraphTestSuite\", this.stopWatch());\n     }", "sourceBeforeFix": "ImmutableSet.of(\"testStringRepresentation\")", "sourceAfterFix": "ImmutableSet.of(\"testStringRepresentation\",\"testDataTypeValidationOnProperties\")"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform1iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform1(location, v);\r\n \t}\r\n \t@Override\r\n \tpublic void glUniform1iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform1(location, toIntBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform2f (int location, float x, float y) {\r", "fixed": " \t}\r\n \tpublic void glUniform1iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform1iv(location, v);\r\n \t}\r\n \t@Override\r\n \tpublic void glUniform1iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform1iv(location, toIntBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform2f (int location, float x, float y) {\r", "sourceBeforeFix": "GL20.glUniform1(location,toFloatBuffer(v,offset,count))", "sourceAfterFix": "GL20.glUniform1fv(location,toFloatBuffer(v,offset,count))"}
{"fixCommitSHA1": "bcb6eeec1d978d6d572ebec875d34dc64aeb5121", "projectName": "alibaba.dubbo", "bugType": "Wrong Function Name", "problem": "         String methodKey = method + \".\" + key;\r\n         Number n = getNumbers().get(methodKey);\r\n         if (n != null) {\r\n            return n.intValue();\r\n         }\r\n         String value = getMethodParameter(method, key);\r\n         if (StringUtils.isEmpty(value)) {\r", "fixed": "         String methodKey = method + \".\" + key;\r\n         Number n = getNumbers().get(methodKey);\r\n         if (n != null) {\r\n            return n.doubleValue();\r\n         }\r\n         String value = getMethodParameter(method, key);\r\n         if (StringUtils.isEmpty(value)) {\r", "sourceBeforeFix": "n.intValue()", "sourceAfterFix": "n.longValue()"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r", "fixed": " \t}\r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r", "sourceBeforeFix": "GL20.glUniform4(location,v)", "sourceAfterFix": "GL20.glUniform4iv(location,v)"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "                 } else {\n                     statistics.increaseCacheHits(1);\n                 }\n                statistics.addGetTimeNano(System.nanoTime() - start);\n             }\n         }\n     }", "fixed": "                 } else {\n                     statistics.increaseCacheHits(1);\n                 }\n                statistics.addGetTimeNanos(System.nanoTime() - start);\n             }\n         }\n     }", "sourceBeforeFix": "statistics.addGetTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addGetTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "3b0e5ccc430c5ae4187e6139535c32cc17bb2a2b", "projectName": "facebook.presto", "bugType": "Change Identifier Used", "problem": "             String splitsSummary = String.format(\"Splits: %,4d total, %,4d pending, %,4d running, %,4d done\",\n                     globalExecutionStats.getSplits(),\n                     max(0, globalExecutionStats.getSplits() - globalExecutionStats.getStartedSplits()),\n                    max(0, globalExecutionStats.getSplits() - globalExecutionStats.getCompletedSplits()),\n                     globalExecutionStats.getCompletedSplits());\n             reprintLine(splitsSummary);", "fixed": "             String splitsSummary = String.format(\"Splits: %,4d total, %,4d pending, %,4d running, %,4d done\",\n                     globalExecutionStats.getSplits(),\n                     max(0, globalExecutionStats.getSplits() - globalExecutionStats.getStartedSplits()),\n                    max(0, globalExecutionStats.getStartedSplits() - globalExecutionStats.getCompletedSplits()),\n                     globalExecutionStats.getCompletedSplits());\n             reprintLine(splitsSummary);", "sourceBeforeFix": "executionStats.getSplits()", "sourceAfterFix": "executionStats.getStartedSplits()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  private final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "014f2410e81ed3ecc6b82fbac49ab345aab6e90f", "projectName": "junit-team.junit", "bugType": "Change Modifier", "problem": "     }\n     @FixMethodOrder(MethodSorters.DEFAULT)\n    private static class DummySortWithDefault {\n         Object alpha(int i, double d, Thread t) {return null;}\n         void beta(int[][] x) {}\n         int gamma() {return 0;}", "fixed": "     }\n     @FixMethodOrder(MethodSorters.DEFAULT)\n    static class DummySortWithDefault {\n         Object alpha(int i, double d, Thread t) {return null;}\n         void beta(int[][] x) {}\n         int gamma() {return 0;}", "sourceBeforeFix": "10", "sourceAfterFix": "8"}
{"fixCommitSHA1": "d725e4c654270636bc7de92cc6d74683b1de29fe", "projectName": "facebook.presto", "bugType": "Change Identifier Used", "problem": "         boolean needPostProjectionCoercion = false;\n         for (FunctionCall aggregate : analysis.getAggregates(node)) {\n             Expression rewritten = subPlan.rewrite(aggregate);\n            Symbol newSymbol = symbolAllocator.newSymbol(rewritten, analysis.getType(aggregate));", "fixed": "         boolean needPostProjectionCoercion = false;\n         for (FunctionCall aggregate : analysis.getAggregates(node)) {\n             Expression rewritten = subPlan.rewrite(aggregate);\n            Symbol newSymbol = symbolAllocator.newSymbol(rewritten, analysis.getTypeWithCoercions(aggregate));", "sourceBeforeFix": "analysis.getType(aggregate)", "sourceAfterFix": "analysis.getTypeWithCoercions(aggregate)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getUserListStatuses(String user, int id, Paging paging) throws TwitterException {\n        return Status.constructStatuses(get(getApiBaseURL() + V1 + user +\n                 \"/lists/\" + id + \"/statuses.json\", new PostParameter[0],\n                 paging.asPostParameterList(Paging.SMCP, Paging.PER_PAGE), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getUserListStatuses(String user, int id, Paging paging) throws TwitterException {\n        return Status.createStatuseList(get(getApiBaseURL() + V1 + user +\n                 \"/lists/\" + id + \"/statuses.json\", new PostParameter[0],\n                 paging.asPostParameterList(Paging.SMCP, Paging.PER_PAGE), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline.json\",true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15839, value = \"Operation failed or was rolled back on all servers.\")\n     String operationFailedOrRolledBack();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10839, value = \"Operation failed or was rolled back on all servers.\")\n     String operationFailedOrRolledBack();\n     /**", "sourceBeforeFix": "id=15845", "sourceAfterFix": "id=10845"}
{"fixCommitSHA1": "5c77a7dcd455f7a6e0ba3f289266032be687dc4f", "projectName": "apache.hbase", "bugType": "Change Numeric Literal", "problem": "     scanInfo.setSmall(false);\n    counter = doScan(table, scanInfo, counter + 2);\n     table.close();\n     connection.close();", "fixed": "     scanInfo.setSmall(false);\n    counter = doScan(table, scanInfo, counter + 1);\n     table.close();\n     connection.close();", "sourceBeforeFix": "counter + 2", "sourceAfterFix": "counter + 1"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform3fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform3(location, v);\r\n \t}\r\n \tpublic void glUniform3fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform3(location, toFloatBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform3i (int location, int x, int y, int z) {\r", "fixed": " \t}\r\n \tpublic void glUniform3fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform3fv(location, v);\r\n \t}\r\n \tpublic void glUniform3fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform3fv(location, toFloatBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform3i (int location, int x, int y, int z) {\r", "sourceBeforeFix": "GL20.glUniform3(location,toIntBuffer(v,offset,count * 3))", "sourceAfterFix": "GL20.glUniform3iv(location,toIntBuffer(v,offset,count * 3))"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15848, value = \"Exception getting result from host %s: %s\")\n     String exceptionAwaitingResultFromHost(String name, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10848, value = \"Exception getting result from host %s: %s\")\n     String exceptionAwaitingResultFromHost(String name, String message);\n     /**", "sourceBeforeFix": "id=15856", "sourceAfterFix": "id=10856"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetProgramiv (int program, int pname, IntBuffer params) {\r\n\t\tGL20.glGetProgram(program, pname, params);\r\n \t}\r\n \tpublic void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tEXTFramebufferObject.glGetRenderbufferParameterEXT(target, pname, params);\r\n \t}\r\n \tpublic String glGetShaderInfoLog (int shader) {\r", "fixed": " \t}\r\n \tpublic void glGetProgramiv (int program, int pname, IntBuffer params) {\r\n\t\tGL20.glGetProgramiv(program, pname, params);\r\n \t}\r\n \tpublic void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tEXTFramebufferObject.glGetRenderbufferParameterivEXT(target, pname, params);\r\n \t}\r\n \tpublic String glGetShaderInfoLog (int shader) {\r", "sourceBeforeFix": "EXTFramebufferObject.glGetFramebufferAttachmentParameterEXT(target,attachment,pname,params)", "sourceAfterFix": "EXTFramebufferObject.glGetFramebufferAttachmentParameterivEXT(target,attachment,pname,params)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "fixed": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttribfv(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttribiv(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "sourceBeforeFix": "GL11.glTexParameter(target,pname,params)", "sourceAfterFix": "GL11.glTexParameterfv(target,pname,params)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15867, value = \"Cannot use %s with the same value for parameters %s and %s. \" +\n             \"Use %s to redeploy the same content or %s to replace content with a new version with the same name.\")\n     String cannotUseSameValueForParameters(String opName, String param1, String param2, String redeployOpName, String replaceOpName);", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10867, value = \"Cannot use %s with the same value for parameters %s and %s. \" +\n             \"Use %s to redeploy the same content or %s to replace content with a new version with the same name.\")\n     String cannotUseSameValueForParameters(String opName, String param1, String param2, String redeployOpName, String replaceOpName);", "sourceBeforeFix": "id=15836", "sourceAfterFix": "id=10836"}
{"fixCommitSHA1": "ea13a9c821a275561e56c45d5f0b90479904508d", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "         final R record = createRecord(value, expirationTime);\n         updateHasExpiringEntry(record);\n         if (isEventsEnabled()) {\n            publishEvent(createCacheCreatedEvent(keyData, toEventData(value), expirationTime, origin, completionId));\n         }\n         return record;\n     }", "fixed": "         final R record = createRecord(value, expirationTime);\n         updateHasExpiringEntry(record);\n         if (isEventsEnabled()) {\n            publishEvent(createCacheCreatedEvent(toEventData(keyData), toEventData(value),\n                                                 expirationTime, origin, completionId));\n         }\n         return record;\n     }", "sourceBeforeFix": "toHeapData(key)", "sourceAfterFix": "toEventData(key)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface KubernetesReplicationControllersEndpointBuilder\n             extends\n                 KubernetesReplicationControllersEndpointConsumerBuilder, KubernetesReplicationControllersEndpointProducerBuilder {\n         default AdvancedKubernetesReplicationControllersEndpointBuilder advanced() {", "fixed": "     \n    public interface KubernetesReplicationControllersEndpointBuilder\n             extends\n                 KubernetesReplicationControllersEndpointConsumerBuilder, KubernetesReplicationControllersEndpointProducerBuilder {\n         default AdvancedKubernetesReplicationControllersEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "ff34b04700d0417df1049e4d749fdf430076965b", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "     }\n     private static String getNodeText(Node node, boolean fixLinks) {\n        final StringBuffer result = new StringBuffer(20);\n         for (Node child = node.getFirstChild(); child != null; child = child.getNextSibling()) {\n             if (child.getNodeType() == Node.TEXT_NODE) {", "fixed": "     }\n     private static String getNodeText(Node node, boolean fixLinks) {\n        final StringBuilder result = new StringBuilder(20);\n         for (Node child = node.getFirstChild(); child != null; child = child.getNextSibling()) {\n             if (child.getNodeType() == Node.TEXT_NODE) {", "sourceBeforeFix": "StringBuffer result", "sourceAfterFix": "StringBuilder result"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AtmosEndpointBuilder\n             extends\n                 AtmosEndpointConsumerBuilder, AtmosEndpointProducerBuilder {\n         default AdvancedAtmosEndpointBuilder advanced() {", "fixed": "     \n    public interface AtmosEndpointBuilder\n             extends\n                 AtmosEndpointConsumerBuilder, AtmosEndpointProducerBuilder {\n         default AdvancedAtmosEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "5d9a77585599cda001021e63c33aef08eba9d69c", "projectName": "facebook.presto", "bugType": "Change Identifier Used", "problem": " public class CassandraSplitManager\n         implements ConnectorSplitManager\n {\n    private static final Logger log = Logger.get(ConnectorSplitManager.class);\n     private final String connectorId;\n     private final CassandraSession cassandraSession;", "fixed": " public class CassandraSplitManager\n         implements ConnectorSplitManager\n {\n    private static final Logger log = Logger.get(CassandraSplitManager.class);\n     private final String connectorId;\n     private final CassandraSession cassandraSession;", "sourceBeforeFix": "ConnectorSplitManager.class", "sourceAfterFix": "CassandraSplitManager.class"}
{"fixCommitSHA1": "2c3e641f9f9b847eb609a575107ad67a63edc09b", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "                         future.cancel(true);\n                         throw ExceptionUtil.rethrow(e, IOException.class);\n                     }\n                    ClientConnection current = connections.putIfAbsent(address, clientConnection);\n                     if (current != null) {\n                         clientConnection.close();\n                         clientConnection = current;", "fixed": "                         future.cancel(true);\n                         throw ExceptionUtil.rethrow(e, IOException.class);\n                     }\n                    ClientConnection current = connections.putIfAbsent(clientConnection.getRemoteEndpoint(), clientConnection);\n                     if (current != null) {\n                         clientConnection.close();\n                         clientConnection = current;", "sourceBeforeFix": "connections.get(address)", "sourceAfterFix": "connections.get(target)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15857, value = \"Only 1 piece of content is currently supported (AS7-431)\")\n     String as7431();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10857, value = \"Only 1 piece of content is currently supported (AS7-431)\")\n     String as7431();\n     /**", "sourceBeforeFix": "id=15871", "sourceAfterFix": "id=10871"}
{"fixCommitSHA1": "d72bcb65c0721bbb360072caf1303e4b58236fe0", "projectName": "apache.camel", "bugType": "Same Function More Args", "problem": "         CamelContext context = super.createCamelContext();\n         context.addComponent(\"properties\", new PropertiesComponent(\"ref:prop\"));\n        KafkaComponent kafka = new KafkaComponent();\n         kafka.setBrokers(\"localhost:\" + getKafkaPort());\n         context.addComponent(\"kafka\", kafka);", "fixed": "         CamelContext context = super.createCamelContext();\n         context.addComponent(\"properties\", new PropertiesComponent(\"ref:prop\"));\n        KafkaComponent kafka = new KafkaComponent(context);\n         kafka.setBrokers(\"localhost:\" + getKafkaPort());\n         context.addComponent(\"kafka\", kafka);", "sourceBeforeFix": "new KafkaComponent()", "sourceAfterFix": "new KafkaComponent(context)"}
{"fixCommitSHA1": "9bcf32ab62047ea4913d9cde9f9e73e7acbfcda6", "projectName": "Graylog2.graylog2-server", "bugType": "Change Numeric Literal", "problem": "         assertEquals(1, serverStub.callsToProcessBufferInserter);\n         assertNull(lm.getField(\"id\"));\n         assertEquals(\"foo\", lm.getField(\"_something\"));\n        assertEquals(8, lm.getFields().size());\n     }\n     @Test", "fixed": "         assertEquals(1, serverStub.callsToProcessBufferInserter);\n         assertNull(lm.getField(\"id\"));\n         assertEquals(\"foo\", lm.getField(\"_something\"));\n        assertEquals(5, lm.getFields().size());\n     }\n     @Test", "sourceBeforeFix": "assertEquals(13,lm.getFields().size())", "sourceAfterFix": "assertEquals(11,lm.getFields().size())"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t */\n \t@Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)\n\tpublic SortedMap<String, String> getSystemVariables() throws APIException;\n \t/**\n \t * Get a map of all the System Information. Java, user, time, runtime properties, etc", "fixed": " \t */\n \t@Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)\n\tpublic SortedMap<String, String> getSystemVariables();\n \t/**\n \t * Get a map of all the System Information. Java, user, time, runtime properties, etc", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "28a04af5f4b957b75ba7dbf6486999b75547673c", "projectName": "libgdx.libgdx", "bugType": "Same Function More Args", "problem": " \t}\r\n \tprivate void getTiles (int startX, int startY, int endX, int endY, Array<Rectangle> tiles) {\r\n\t\tTiledMapTileLayer layer = (TiledMapTileLayer)map.getLayers().get(1);\r\n \t\trectPool.freeAll(tiles);\r\n \t\ttiles.clear();\r\n \t\tfor (int y = startY; y <= endY; y++) {\r", "fixed": " \t}\r\n \tprivate void getTiles (int startX, int startY, int endX, int endY, Array<Rectangle> tiles) {\r\n\t\tTiledMapTileLayer layer = (TiledMapTileLayer)map.getLayers().get(\"walls\");\r\n \t\trectPool.freeAll(tiles);\r\n \t\ttiles.clear();\r\n \t\tfor (int y = startY; y <= endY; y++) {\r", "sourceBeforeFix": "Gdx.input.getX()", "sourceAfterFix": "Gdx.input.getX(i)"}
{"fixCommitSHA1": "2921e7bf0d74a65fdcc71d3ce3053037d14e4d44", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "     protected void handleQOffer(String[] args) {\n         long timeout = 0;\n         if (args.length > 2) {\n            timeout = Long.valueOf(args[2]);\n         }\n         try {\n             boolean offered = getQueue().offer(args[1], timeout, TimeUnit.SECONDS);", "fixed": "     protected void handleQOffer(String[] args) {\n         long timeout = 0;\n         if (args.length > 2) {\n            timeout = Long.parseLong(args[2]);\n         }\n         try {\n             boolean offered = getQueue().offer(args[1], timeout, TimeUnit.SECONDS);", "sourceBeforeFix": "Long.valueOf(timeout)", "sourceAfterFix": "Long.parseLong(timeout)"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \t@Test\n \tpublic void testMultipleActionsPredicatesOptions_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {Console.WriteLine($ctx.ToStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");", "fixed": " \t@Test\n \tpublic void testMultipleActionsPredicatesOptions_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(245);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {Console.WriteLine($ctx.ToStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");", "sourceBeforeFix": "new StringBuilder(741)", "sourceAfterFix": "new StringBuilder(740)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_cn_4() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e7405\u670806\u65e5\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_cn_4() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e7405\u670806\u65e5\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "be4d2df2b76f02b1f0fd5c406d80ddc3b8500af2", "projectName": "yusuke.twitter4j", "bugType": "Change Numeric Literal", "problem": "      * @param args message\n      */\n     public static void main(String[] args) {\n        if (args.length < 1) {\n             System.out.println(\"Usage: java twitter4j.examples.list.GetUserListStatuses [list owner screen name] [list id]\");\n             System.exit(-1);\n         }", "fixed": "      * @param args message\n      */\n     public static void main(String[] args) {\n        if (args.length < 2) {\n             System.out.println(\"Usage: java twitter4j.examples.list.GetUserListStatuses [list owner screen name] [list id]\");\n             System.exit(-1);\n         }", "sourceBeforeFix": "args.length < 1", "sourceAfterFix": "args.length < 2"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface JmsEndpointBuilder\n             extends\n                 JmsEndpointConsumerBuilder, JmsEndpointProducerBuilder {\n         default AdvancedJmsEndpointBuilder advanced() {", "fixed": "     \n    public interface JmsEndpointBuilder\n             extends\n                 JmsEndpointConsumerBuilder, JmsEndpointProducerBuilder {\n         default AdvancedJmsEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "359ce65a7b6ec7725d4fea3aca1a299cd2b7f7ba", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "      * @param detailNode javadoc tag node\n      * @return java doc tag content appended in result\n      */\n    private String getStringInsideTag(String result, DetailNode detailNode) {\n         final StringBuilder contents = new StringBuilder(result);\n         DetailNode tempNode = detailNode;\n         while (tempNode != null) {", "fixed": "      * @param detailNode javadoc tag node\n      * @return java doc tag content appended in result\n      */\n    private static String getStringInsideTag(String result, DetailNode detailNode) {\n         final StringBuilder contents = new StringBuilder(result);\n         DetailNode tempNode = detailNode;\n         while (tempNode != null) {", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "a161d8d1924d1fb49a4d229370d998be1493957c", "projectName": "Graylog2.graylog2-server", "bugType": "Change Identifier Used", "problem": "                 loggerForCleaner.debug(\"Beginning log cleanup\");\n                 int total = 0;\n                 final Timer.Context ctx = new Timer().time();\n                for (final Log kafkaLog : JavaConversions.asIterable(logManager.allLogs())) {\n                     if (kafkaLog.config().compact()) continue;\n                     loggerForCleaner.debug(\"Garbage collecting {}\", kafkaLog.name());\n                     total += cleanupExpiredSegments(kafkaLog) +", "fixed": "                 loggerForCleaner.debug(\"Beginning log cleanup\");\n                 int total = 0;\n                 final Timer.Context ctx = new Timer().time();\n                for (final Log kafkaLog : JavaConversions.asJavaIterable(logManager.allLogs())) {\n                     if (kafkaLog.config().compact()) continue;\n                     loggerForCleaner.debug(\"Garbage collecting {}\", kafkaLog.name());\n                     total += cleanupExpiredSegments(kafkaLog) +", "sourceBeforeFix": "JavaConversions.asMap(logManager.logsByTopicPartition())", "sourceAfterFix": "JavaConversions.mapAsJavaMap(logManager.logsByTopicPartition())"}
{"fixCommitSHA1": "763dad49dcfe96fa56fb88da0a4d7d53e148f337", "projectName": "apache.flink", "bugType": "Change Boolean Literal", "problem": " \t}\n \tpublic static long unixDateCeil(TimeUnitRange range, long date) {\n\t\treturn julianDateFloor(range, (int) date + EPOCH_JULIAN, true);\n \t}\n \tprivate static int julianDateFloor(TimeUnitRange range, int julian,", "fixed": " \t}\n \tpublic static long unixDateCeil(TimeUnitRange range, long date) {\n\t\treturn julianDateFloor(range, (int) date + EPOCH_JULIAN, false);\n \t}\n \tprivate static int julianDateFloor(TimeUnitRange range, int julian,", "sourceBeforeFix": "julianDateFloor(range,(int)date + EPOCH_JULIAN,true)", "sourceAfterFix": "julianDateFloor(range,(int)date + EPOCH_JULIAN,false)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n  private final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "fixed": "   }\n   \n  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "780e4a27f74b52de0a0fff72c71d0006c60a2165", "projectName": "druid-io.druid", "bugType": "Change Numeric Literal", "problem": "         )\n     );\n    queryNotifyLatch.await(25, TimeUnit.MILLISECONDS);\n     Assert.assertEquals(1, factory.getSegmentReferences().size());", "fixed": "         )\n     );\n    queryNotifyLatch.await(1000, TimeUnit.MILLISECONDS);\n     Assert.assertEquals(1, factory.getSegmentReferences().size());", "sourceBeforeFix": "waitYieldLatch.await(25,TimeUnit.MILLISECONDS)", "sourceAfterFix": "waitYieldLatch.await(1000,TimeUnit.MILLISECONDS)"}
{"fixCommitSHA1": "a295b91c37f681199a83fdb963344c19e0d015c0", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "             if (timeout == null) {\n                 println(lock.tryLock());\n             } else {\n                long time = Long.valueOf(timeout);\n                 try {\n                     println(lock.tryLock(time, TimeUnit.SECONDS));\n                 } catch (InterruptedException e) {", "fixed": "             if (timeout == null) {\n                 println(lock.tryLock());\n             } else {\n                long time = Long.parseLong(timeout);\n                 try {\n                     println(lock.tryLock(time, TimeUnit.SECONDS));\n                 } catch (InterruptedException e) {", "sourceBeforeFix": "Long.valueOf(args[2])", "sourceAfterFix": "Long.parseLong(args[2])"}
{"fixCommitSHA1": "3748afae244f81389553e149a023a0b3f81a90ab", "projectName": "Alluxio.alluxio", "bugType": "Same Function More Args", "problem": "     try {\n       mFileSystemMaster\n           .createDirectory(new AlluxioURI(\"alluxio:/a\"), CreateDirectoryOptions.defaults());\n      Assert.fail();\n     } catch (FileAlreadyExistsException e) {\n     }", "fixed": "     try {\n       mFileSystemMaster\n           .createDirectory(new AlluxioURI(\"alluxio:/a\"), CreateDirectoryOptions.defaults());\n      Assert.fail(\"createDirectory was expected to fail with FileAlreadyExistsException\");\n     } catch (FileAlreadyExistsException e) {\n     }", "sourceBeforeFix": "Assert.fail()", "sourceAfterFix": "Assert.fail(\"createDirectory was expected to fail with FileAlreadyExistsException\")"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface GoogleDriveEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedGoogleDriveEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface GoogleDriveEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedGoogleDriveEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": " import org.jboss.logging.MessageLogger;\n /**\n * This module is using message IDs in the range 10900-10999. This file is using the subset 10950-10974 for domain\n* controller logger messages. See http:\n  * JBAS message id blocks.\n  * <p/>", "fixed": " import org.jboss.logging.MessageLogger;\n /**\n * This module is using message IDs in the range 10800-10999. This file is using the subset 10800-10829 for domain\n* controller logger messages. See http:\n  * JBAS message id blocks.\n  * <p/>", "sourceBeforeFix": "id=15802", "sourceAfterFix": "id=10802"}
{"fixCommitSHA1": "4665dcf9ab41c3c61cd42aad296ebfe518bfa003", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\n \tpublic void glGenTextures (int n, int[] textures, int offset) {\n\t\tGL.glGenTexturesEXT(n, toBuffer(textures, offset), 0);\n \t}\n \tpublic void glGetIntegerv (int pname, int[] params, int offset) {", "fixed": " \t}\n \tpublic void glGenTextures (int n, int[] textures, int offset) {\n\t\tGL.glGenTextures(n, toBuffer(textures, offset), 0);\n \t}\n \tpublic void glGetIntegerv (int pname, int[] params, int offset) {", "sourceBeforeFix": "GL.glCopyTexImage2DEXT(target,level,internalformat,x,y,width,height,border)", "sourceAfterFix": "GL.glCopyTexImage2D(target,level,internalformat,x,y,width,height,border)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface OptaPlannerEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedOptaPlannerEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface OptaPlannerEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedOptaPlannerEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "e2854295f7c484671ce69bff7ec37fcb0c413a32", "projectName": "perwendel.spark", "bugType": "Change Identifier Used", "problem": "      * @param request   The request object providing information about the HTTP request\n      * @param response  The response object providing functionality for modifying the response\n      */\n    void handle(Exception exception, Request request, Response response);\n }", "fixed": "      * @param request   The request object providing information about the HTTP request\n      * @param response  The response object providing functionality for modifying the response\n      */\n    void handle(T exception, Request request, Response response);\n }", "sourceBeforeFix": "Exception exception", "sourceAfterFix": "T exception"}
{"fixCommitSHA1": "dad70872c09aa162f4567263f677a49b0455be76", "projectName": "facebook.presto", "bugType": "Wrong Function Name", "problem": "                 .outputRowsCount(inputStatistics.getOutputRowCount() * xStats.getValuesFraction() * 0.5);\n        assertThat(computeSemiJoin(inputStatistics, inputStatistics, unknown, u))\n                 .symbolStats(unknown, stats -> stats\n                         .nullsFraction(0)\n                         .distinctValuesCountUnknown()", "fixed": "                 .outputRowsCount(inputStatistics.getOutputRowCount() * xStats.getValuesFraction() * 0.5);\n        assertThat(computeAntiJoin(inputStatistics, inputStatistics, unknown, u))\n                 .symbolStats(unknown, stats -> stats\n                         .nullsFraction(0)\n                         .distinctValuesCountUnknown()", "sourceBeforeFix": "computeSemiJoin(inputStatistics,inputStatistics,unknown,u)", "sourceAfterFix": "computeAntiJoin(inputStatistics,inputStatistics,unknown,u)"}
{"fixCommitSHA1": "51164c95bb7e59ae2485dfec6e792a8eccf49398", "projectName": "hazelcast.hazelcast", "bugType": "Change Modifier", "problem": "     ILogger logger;\n     String group;\n     int port;\n    private boolean stop;\n     public MulticastDiscoverySender(DiscoveryNode discoveryNode, MulticastSocket multicastSocket,\n                                     ILogger logger, String group, int port)", "fixed": "     ILogger logger;\n     String group;\n     int port;\n    private volatile boolean stop;\n     public MulticastDiscoverySender(DiscoveryNode discoveryNode, MulticastSocket multicastSocket,\n                                     ILogger logger, String group, int port)", "sourceBeforeFix": "2", "sourceAfterFix": "66"}
{"fixCommitSHA1": "5a15366e9871141aecf4408342479a07c2a24b57", "projectName": "NLPchina.ansj_seg", "bugType": "Change Modifier", "problem": " import org.apache.lucene.analysis.tokenattributes.OffsetAttribute;\n import org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute;\npublic class AnsjTokenizer extends Tokenizer {\n \tprivate final CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);", "fixed": " import org.apache.lucene.analysis.tokenattributes.OffsetAttribute;\n import org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute;\npublic final class AnsjTokenizer extends Tokenizer {\n \tprivate final CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);", "sourceBeforeFix": "1", "sourceAfterFix": "17"}
{"fixCommitSHA1": "0b302cf93edee0e2ab3c9998f380ede8e8ea7727", "projectName": "Atmosphere.atmosphere", "bugType": "Change Identifier Used", "problem": "      * {@inheritDoc}\n      */\n     @Override\n    public AtmosphereResource addAtmosphereResource(AtmosphereResource r) {\n         try {\n             if (destroyed.get()) {\n                 logger.debug(DESTROYED, getID(), \"addAtmosphereResource(AtmosphereResource<?, ?> r\");\n                return r;\n             }\n             start();", "fixed": "      * {@inheritDoc}\n      */\n     @Override\n    public Broadcaster addAtmosphereResource(AtmosphereResource r) {\n         try {\n             if (destroyed.get()) {\n                 logger.debug(DESTROYED, getID(), \"addAtmosphereResource(AtmosphereResource<?, ?> r\");\n                return this;\n             }\n             start();", "sourceBeforeFix": "return r; ", "sourceAfterFix": "return this; "}
{"fixCommitSHA1": "da067cd627411116af86c4e5f4bb8d105eb75a40", "projectName": "cucumber.cucumber-jvm", "bugType": "Change Identifier Used", "problem": "     private static final List<PickleTag> NO_TAGS = Collections.<PickleTag>emptyList();\n     @Test\n    public void matches_pickles_from_files_not_in_the_predicate_map() {\n         PickleEvent pickleEvent = createPickleEventWithLocations(\"path/file.feature\", asList(pickleLocation(4)));\n        LinePredicate predicate = new LinePredicate(singletonMap(\"another_path/file.feature\", asList(8L)));\n        assertTrue(predicate.apply(pickleEvent));\n     }\n     @Test", "fixed": "     private static final List<PickleTag> NO_TAGS = Collections.<PickleTag>emptyList();\n     @Test\n    public void does_not_match_pickles_from_files_not_in_the_predicate_map() {\n         PickleEvent pickleEvent = createPickleEventWithLocations(\"path/file.feature\", asList(pickleLocation(4)));\n        LinePredicate predicate = new LinePredicate(singletonMap(\"another_path/file.feature\", asList(4L)));\n        assertFalse(predicate.apply(pickleEvent));\n     }\n     @Test", "sourceBeforeFix": "assertTrue(predicate.apply(pickleEvent))", "sourceAfterFix": "assertFalse(predicate.apply(pickleEvent))"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface PahoEndpointBuilder\n             extends\n                 PahoEndpointConsumerBuilder, PahoEndpointProducerBuilder {\n         default AdvancedPahoEndpointBuilder advanced() {", "fixed": "     \n    public interface PahoEndpointBuilder\n             extends\n                 PahoEndpointConsumerBuilder, PahoEndpointProducerBuilder {\n         default AdvancedPahoEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites() throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"favorites.json\", new PostParameter[0], true));\n     }\n     /**", "fixed": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites() throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"favorites.json\", new PostParameter[0], true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline.json\",true))"}
{"fixCommitSHA1": "e7bf415427b37bbc760ff9b9c69650db8ec477e4", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnBean(MongoTemplate.class)\n\t@ConditionalOnEnablednHealthIndicator(\"mongo\")\n \tpublic static class MongoHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<MongoHealthIndicator, MongoTemplate> {", "fixed": " \t@Configuration\n \t@ConditionalOnBean(MongoTemplate.class)\n\t@ConditionalOnEnabledHealthIndicator(\"mongo\")\n \tpublic static class MongoHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<MongoHealthIndicator, MongoTemplate> {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"db\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"db\")"}
{"fixCommitSHA1": "4e5679100979b451b8ced187c19fa53f92536e6f", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "     sClientMetrics = new ClientMetrics();\n     if (sExecutorService != null) {\n      sExecutorService.shutdown();\n     }\n     sExecutorService = Executors.newFixedThreadPool(\n         sTachyonConf.getInt(Constants.USER_BLOCK_WORKER_CLIENT_THREADS),", "fixed": "     sClientMetrics = new ClientMetrics();\n     if (sExecutorService != null) {\n      sExecutorService.shutdownNow();\n     }\n     sExecutorService = Executors.newFixedThreadPool(\n         sTachyonConf.getInt(Constants.USER_BLOCK_WORKER_CLIENT_THREADS),", "sourceBeforeFix": "sExecutorService.shutdown()", "sourceAfterFix": "sExecutorService.shutdownNow()"}
{"fixCommitSHA1": "c38ee7371ffee08671b886ff9eb74a4cb35b92e7", "projectName": "facebook.presto", "bugType": "Change Identifier Used", "problem": "         MaterializedResult expectedTables = MaterializedResult.resultBuilder(queryRunner.getDefaultSession(), VARCHAR)\n                 .row(\"orders\")\n                 .build();\n        assertEquals(actualTables, expectedTables);\n     }\n     @Test", "fixed": "         MaterializedResult expectedTables = MaterializedResult.resultBuilder(queryRunner.getDefaultSession(), VARCHAR)\n                 .row(\"orders\")\n                 .build();\n        assertContains(actualTables, expectedTables);\n     }\n     @Test", "sourceBeforeFix": "assertEquals(actualTables,expectedTables)", "sourceAfterFix": "assertContains(actualTables,expectedTables)"}
{"fixCommitSHA1": "dff64bf31f0406905c321e100e29d3600cf618e3", "projectName": "apache.camel", "bugType": "Missing Throws Exception", "problem": "      * Allow this route to be run as an application\n      *\n      * @param args\n      */\n    public static void main(String[] args) {\n         new Main().run(args);\n     }", "fixed": "      * Allow this route to be run as an application\n      *\n      * @param args\n     * @throws Exception \n      */\n    public static void main(String[] args) throws Exception {\n         new Main().run(args);\n     }", "sourceBeforeFix": "9", "sourceAfterFix": "9"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "0b22eb07bb8ecfa456f170dc9a1dec418ed01e2a", "projectName": "apache.hbase", "bugType": "Change Numeric Literal", "problem": "     void doWaiting() throws InterruptedException {\n       try {\n        while (new MetaTableLocator().waitMetaRegionLocation(watcher, 100) == null);\n       } catch (NotAllMetaRegionsOnlineException e) {\n       }", "fixed": "     void doWaiting() throws InterruptedException {\n       try {\n        while (new MetaTableLocator().waitMetaRegionLocation(watcher, 10000) == null);\n       } catch (NotAllMetaRegionsOnlineException e) {\n       }", "sourceBeforeFix": "new MetaTableLocator().waitMetaRegionLocation(watcher,100)", "sourceAfterFix": "new MetaTableLocator().waitMetaRegionLocation(watcher,10000)"}
{"fixCommitSHA1": "2ba203f659a7690bedf91a48e8d33e77a829a63f", "projectName": "facebook.presto", "bugType": "Change Unary Operator\t", "problem": "     public Optional<Object> getInfo(ConnectorTableLayoutHandle layoutHandle)\n     {\n         HiveTableLayoutHandle tableLayoutHandle = checkType(layoutHandle, HiveTableLayoutHandle.class, \"layoutHandle\");\n        if (!tableLayoutHandle.getPartitions().isPresent()) {\n             return Optional.of(new HiveInputInfo(tableLayoutHandle.getPartitions().get().stream()\n                     .map(HivePartition::getPartitionId)\n                     .collect(Collectors.toList())));", "fixed": "     public Optional<Object> getInfo(ConnectorTableLayoutHandle layoutHandle)\n     {\n         HiveTableLayoutHandle tableLayoutHandle = checkType(layoutHandle, HiveTableLayoutHandle.class, \"layoutHandle\");\n        if (tableLayoutHandle.getPartitions().isPresent()) {\n             return Optional.of(new HiveInputInfo(tableLayoutHandle.getPartitions().get().stream()\n                     .map(HivePartition::getPartitionId)\n                     .collect(Collectors.toList())));", "sourceBeforeFix": "!tableLayoutHandle.getPartitions().isPresent()", "sourceAfterFix": "tableLayoutHandle.getPartitions().isPresent()"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsCsv(String path, int batchSize) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), batchSize, null);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsCsv(String path, int batchSize) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), batchSize, null);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedFtpEndpointBuilder\n             extends\n                 AdvancedFtpEndpointConsumerBuilder, AdvancedFtpEndpointProducerBuilder {\n         default FtpEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedFtpEndpointBuilder\n             extends\n                 AdvancedFtpEndpointConsumerBuilder, AdvancedFtpEndpointProducerBuilder {\n         default FtpEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "abf2f457b12dcb128ebc437d7b8cc5a3e37c20a5", "projectName": "druid-io.druid", "bugType": "Change Modifier", "problem": "    */\n   @Nullable\n  abstract byte[] getCacheKey();\n }", "fixed": "    */\n   @Nullable\n  public abstract byte[] getCacheKey();\n }", "sourceBeforeFix": "1024", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform1fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform1(location, v);\r\n \t}\r\n \tpublic void glUniform1fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform1(location, toFloatBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform1i (int location, int x) {\r", "fixed": " \t}\r\n \tpublic void glUniform1fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform1fv(location, v);\r\n \t}\r\n \tpublic void glUniform1fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform1fv(location, toFloatBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform1i (int location, int x) {\r", "sourceBeforeFix": "EXTFramebufferObject.glGetFramebufferAttachmentParameterEXT(target,attachment,pname,params)", "sourceAfterFix": "EXTFramebufferObject.glGetFramebufferAttachmentParameterivEXT(target,attachment,pname,params)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "           \"functions are set.\");\n   \n  private final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "           \"functions are set.\");\n   \n  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15860, value = \"No deployment with name %s found\")\n     String noDeploymentContentWithName(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10860, value = \"No deployment with name %s found\")\n     String noDeploymentContentWithName(String name);\n     /**", "sourceBeforeFix": "id=15833", "sourceAfterFix": "id=10833"}
{"fixCommitSHA1": "76d69ac2d17de5b0b7212cc9109ed99a76d54aec", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t\t\t\tfloat radius2 = radiusX * radiusX;\r\n \t\t\t\twhile (true) {\r\n \t\t\t\t\tfloat px = MathUtils.random(width) - radiusX;\r\n\t\t\t\t\tfloat py = MathUtils.random(height) - radiusY;\r\n \t\t\t\t\tif (px * px + py * py <= radius2) {\r\n \t\t\t\t\t\tx += px;\r\n \t\t\t\t\t\ty += py / scaleY;\r", "fixed": " \t\t\t\tfloat radius2 = radiusX * radiusX;\r\n \t\t\t\twhile (true) {\r\n \t\t\t\t\tfloat px = MathUtils.random(width) - radiusX;\r\n\t\t\t\t\tfloat py = MathUtils.random(width) - radiusX;\r\n \t\t\t\t\tif (px * px + py * py <= radius2) {\r\n \t\t\t\t\t\tx += px;\r\n \t\t\t\t\t\ty += py / scaleY;\r", "sourceBeforeFix": "MathUtils.random(height)", "sourceAfterFix": "MathUtils.random(width)"}
{"fixCommitSHA1": "a63faf44e1b103a49d25a15c720fc5940ae9fc07", "projectName": "square.retrofit", "bugType": "Change Identifier Used", "problem": "     assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mBodyWildcard = new TypeToken<Maybe<? extends String>>() {}.getType();\n    assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fBodyWildcard = new TypeToken<Flowable<? extends String>>() {}.getType();\n    assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oBodyGeneric = new TypeToken<Observable<List<String>>>() {}.getType();", "fixed": "     assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mBodyWildcard = new TypeToken<Maybe<? extends String>>() {}.getType();\n    assertThat(factory.get(mBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fBodyWildcard = new TypeToken<Flowable<? extends String>>() {}.getType();\n    assertThat(factory.get(fBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oBodyGeneric = new TypeToken<Observable<List<String>>>() {}.getType();", "sourceBeforeFix": "factory.get(sResponseWildcard,NO_ANNOTATIONS,retrofit)", "sourceAfterFix": "factory.get(mResponseWildcard,NO_ANNOTATIONS,retrofit)"}
{"fixCommitSHA1": "4dd18ed5c3188be2cfb14efce62e71ae6f19243a", "projectName": "dropwizard.dropwizard", "bugType": "Change Identifier Used", "problem": "     @Test\n     public void returnsA404WhenNotFound() throws Exception {\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getServletPath()).thenReturn(\"/tasks/test\");\n         servlet.service(request, response);", "fixed": "     @Test\n     public void returnsA404WhenNotFound() throws Exception {\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getPathInfo()).thenReturn(\"/test\");\n         servlet.service(request, response);", "sourceBeforeFix": "request.getServletPath()", "sourceAfterFix": "request.getPathInfo()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "4597da262b00311e03c657db986f712387def622", "projectName": "swagger-api.swagger-core", "bugType": "Change Identifier Used", "problem": "         final ModelImpl model = Json.mapper().readValue(json, ModelImpl.class);\n        assertFalse(model.getUniqueItems());\n     }\n }\n\\ No newline at end of file", "fixed": "         final ModelImpl model = Json.mapper().readValue(json, ModelImpl.class);\n        assertTrue(model.getUniqueItems());\n     }\n }\n\\ No newline at end of file", "sourceBeforeFix": "assertTrue(model.getUniqueItems())", "sourceAfterFix": "assertFalse(model.getUniqueItems())"}
{"fixCommitSHA1": "dce2381dc4a877fcbfb869f115152ecd44a92173", "projectName": "apache.hadoop", "bugType": "Change Identifier Used", "problem": "     }\n     for (String label : nodeLabels) {\n      if (q.acccessibleNodeLabels.contains(label)) {\n         return true;\n       }\n     }", "fixed": "     }\n     for (String label : nodeLabels) {\n      if (q.accessibleNodeLabels.contains(label)) {\n         return true;\n       }\n     }", "sourceBeforeFix": "entry.getValue().acccessibleNodeLabels", "sourceAfterFix": "entry.getValue().accessibleNodeLabels"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsText(String path) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), 1, null);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsText(String path) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), 1, null);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "06f8fe87421493280f6602aeb73153e677844542", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t\tfor (int i = 0; i < noOfTasks; i++) {\n \t\t\tfor (int j = 0; j < 2 + i; j++) {\n\t\t\t\tfinal String part = new Path(bucketPath, \"test-\" + i + '-' + j).toString();\n \t\t\t\tAssert.assertTrue(paths.contains(part));\n \t\t\t\tpaths.remove(part);\n \t\t\t}", "fixed": " \t\tfor (int i = 0; i < noOfTasks; i++) {\n \t\t\tfor (int j = 0; j < 2 + i; j++) {\n\t\t\t\tfinal String part = new Path(bucketPath, \"test-\" + i + '-' + j).getPath();\n \t\t\t\tAssert.assertTrue(paths.contains(part));\n \t\t\t\tpaths.remove(part);\n \t\t\t}", "sourceBeforeFix": "new Path(bucketPath,\"part-\" + i + '-'+ j).toString()", "sourceAfterFix": "new Path(bucketPath,\"part-\" + i + '-'+ j).getPath()"}
{"fixCommitSHA1": "5a58a4ac4be0bee7c3ab573f6bf325f68cb3df85", "projectName": "openmrs.openmrs-core", "bugType": "Change Modifier", "problem": " \t *      javax.servlet.http.HttpServletResponse)\r\n \t */\r\n \t@Override\r\n\tprotected void doPost(HttpServletRequest httpRequest, HttpServletResponse httpResponse) throws IOException,\r\n \t        ServletException {\r\n \t\tString page = httpRequest.getParameter(\"page\");\r", "fixed": " \t *      javax.servlet.http.HttpServletResponse)\r\n \t */\r\n \t@Override\r\n\tprotected synchronized void doPost(HttpServletRequest httpRequest, HttpServletResponse httpResponse) throws IOException,\r\n \t        ServletException {\r\n \t\tString page = httpRequest.getParameter(\"page\");\r", "sourceBeforeFix": "4", "sourceAfterFix": "36"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15837, value = \"One of the groups does not define neither \" + SERVER_GROUP + \" nor \" + CONCURRENT_GROUPS + \": %s\")\n     String unexpectedInSeriesGroup(String rolloutPlan);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10837, value = \"One of the groups does not define neither \" + SERVER_GROUP + \" nor \" + CONCURRENT_GROUPS + \": %s\")\n     String unexpectedInSeriesGroup(String rolloutPlan);\n     /**", "sourceBeforeFix": "id=15835", "sourceAfterFix": "id=10835"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  private final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "c52a15b7ae80a8f3619791df1577774b374ac4d4", "projectName": "wildfly.wildfly", "bugType": "More Specific If", "problem": "                 }\n             }\n         }\n        if (securityDomain != null)\n             description.setSecurityDomain(securityDomain);\n        else if (globalSecurityDomain != null)\n             description.setSecurityDomain(globalSecurityDomain);\n     }", "fixed": "                 }\n             }\n         }\n        if (securityDomain != null && ! securityDomain.isEmpty())\n             description.setSecurityDomain(securityDomain);\n        else if (globalSecurityDomain != null && !globalSecurityDomain.isEmpty())\n             description.setSecurityDomain(globalSecurityDomain);\n     }", "sourceBeforeFix": "globalSecurityDomain != null", "sourceAfterFix": "globalSecurityDomain != null && !globalSecurityDomain.isEmpty()"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedLdifEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default LdifEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedLdifEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default LdifEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "a421ca3133ddf727a147e87455a5511444d8d4bb", "projectName": "google.auto", "bugType": "Change Identifier Used", "problem": "                 publicType,\n                 ImmutableSet.copyOf(entry.getValue()),\n                implemetationMethodDescriptors.build()));\n       } catch (IOException e) {\n         messager.printMessage(Kind.ERROR, \"failed\");\n       }", "fixed": "                 publicType,\n                 ImmutableSet.copyOf(entry.getValue()),\n                implementationMethodDescriptors.build()));\n       } catch (IOException e) {\n         messager.printMessage(Kind.ERROR, \"failed\");\n       }", "sourceBeforeFix": "implemetationMethodDescriptors.build()", "sourceAfterFix": "implementationMethodDescriptors.build()"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsText(String path, int batchSize, OUT endTuple) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), batchSize, endTuple);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsText(String path, int batchSize, OUT endTuple) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), batchSize, endTuple);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "83b9dd427535bce39be43a9e8224cdbc352d7427", "projectName": "square.okhttp", "bugType": "Change Modifier", "problem": "     private final Request request;\n     private final Response response;\n    public CacheHttpURLConnection(Response response) {\n       super(response.request().url().url());\n       this.request = response.request();\n       this.response = response;", "fixed": "     private final Request request;\n     private final Response response;\n    CacheHttpURLConnection(Response response) {\n       super(response.request().url().url());\n       this.request = response.request();\n       this.response = response;", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedMQTTEndpointBuilder\n             extends\n                 AdvancedMQTTEndpointConsumerBuilder, AdvancedMQTTEndpointProducerBuilder {\n         default MQTTEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedMQTTEndpointBuilder\n             extends\n                 AdvancedMQTTEndpointConsumerBuilder, AdvancedMQTTEndpointProducerBuilder {\n         default MQTTEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "486b290863a66641b0ec30dbf2d9e349733cae44", "projectName": "apache.hbase", "bugType": "Wrong Function Name", "problem": "    */\n   public void flush(final String tableNameOrRegionName)\n   throws IOException, InterruptedException {\n    flush(Bytes.toBytesBinary(tableNameOrRegionName));\n   }\n   /**", "fixed": "    */\n   public void flush(final String tableNameOrRegionName)\n   throws IOException, InterruptedException {\n    flush(Bytes.toBytes(tableNameOrRegionName));\n   }\n   /**", "sourceBeforeFix": "Bytes.toBytesBinary(tableNameOrRegionName)", "sourceAfterFix": "Bytes.toBytes(tableNameOrRegionName)"}
{"fixCommitSHA1": "46fa8090954480eecdeb6e7367f0e30655853f42", "projectName": "checkstyle.checkstyle", "bugType": "Same Function More Args", "problem": "      * @return Imported canonical type's name.\n      */\n     private static String getImportedTypeCanonicalName(DetailAST importAst) {\n        final StringBuilder canonicalNameBuilder = new StringBuilder();\n         DetailAST toVisit = importAst;\n         while (toVisit != null) {\n             toVisit = getNextSubTreeNode(toVisit, importAst);", "fixed": "      * @return Imported canonical type's name.\n      */\n     private static String getImportedTypeCanonicalName(DetailAST importAst) {\n        final StringBuilder canonicalNameBuilder = new StringBuilder(256);\n         DetailAST toVisit = importAst;\n         while (toVisit != null) {\n             toVisit = getNextSubTreeNode(toVisit, importAst);", "sourceBeforeFix": "new StringBuilder()", "sourceAfterFix": "new StringBuilder(256)"}
{"fixCommitSHA1": "3dddcc4cdf4a74ddbd4607c6aaee5bdd8ac46c27", "projectName": "gephi.gephi", "bugType": "Change Modifier", "problem": "     }\n     @Override\n    public List<Node> getSelectedUnderlyingNodes() {\n         List<Node> selected = new ArrayList<>();\n         for (Iterator<NodeModel> itr = octree.getNodeIterator(); itr.hasNext();) {\n             NodeModel nodeModel = itr.next();", "fixed": "     }\n     @Override\n    public synchronized List<Node> getSelectedUnderlyingNodes() {\n         List<Node> selected = new ArrayList<>();\n         for (Iterator<NodeModel> itr = octree.getNodeIterator(); itr.hasNext();) {\n             NodeModel nodeModel = itr.next();", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "55ed50c4975cf694828d46ee9ca32ce72a9ef913", "projectName": "clojure.clojure", "bugType": "Change Identifier Used", "problem": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 15:\r\n\t\t\treturn invoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "fixed": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 15:\r\n\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "sourceBeforeFix": "invoke(args.first(),args.rest())", "sourceAfterFix": "doInvoke(args.first(),args.rest())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "35dc7982d28800b4fecdf0772236a2d8e054aa77", "projectName": "spring-projects.spring-boot", "bugType": "Change Modifier", "problem": " \tprivate int port = Integer.valueOf(System.getProperty(\"port\"));\n \t@Test\n\tpublic void testHome() throws Exception {\nString url = \"http:\n \t\tResponseEntity<String> entity = this.rest.getForEntity(url, String.class);\n \t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);", "fixed": " \tprivate int port = Integer.valueOf(System.getProperty(\"port\"));\n \t@Test\n\tvoid testHome() throws Exception {\nString url = \"http:\n \t\tResponseEntity<String> entity = this.rest.getForEntity(url, String.class);\n \t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n  private final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "c53c472d8a713e37857d9a66f5d1871dacc2c815", "projectName": "hazelcast.hazelcast", "bugType": "Change Numeric Literal", "problem": "                 Collection<InetSocketAddress> inetAddresses = new ArrayList<InetSocketAddress>();\n                 for (Address address : getKnownAddresses()) {\n                     Collection<InetSocketAddress> addresses = AddressHelper.getPossibleSocketAddresses(address.getPort(),\n                            address.getHost(), 3);\n                     inetAddresses.addAll(addresses);\n                 }\n                 return inetAddresses;", "fixed": "                 Collection<InetSocketAddress> inetAddresses = new ArrayList<InetSocketAddress>();\n                 for (Address address : getKnownAddresses()) {\n                     Collection<InetSocketAddress> addresses = AddressHelper.getPossibleSocketAddresses(address.getPort(),\n                            address.getHost(), 1);\n                     inetAddresses.addAll(addresses);\n                 }\n                 return inetAddresses;", "sourceBeforeFix": "AddressHelper.getPossibleSocketAddresses(address.getPort(),address.getHost(),3)", "sourceAfterFix": "AddressHelper.getPossibleSocketAddresses(address.getPort(),address.getHost(),1)"}
{"fixCommitSHA1": "9a9b02c330e9e452f37335d0e59c462175bb5df7", "projectName": "wildfly.wildfly", "bugType": "Same Function Swap Args", "problem": "             Assert.fail(\"Test should fail, user shouldn't be allowed to invoke that method\");\n         } catch (WebServiceException e) {\n            Assert.assertEquals(e.getCause().getMessage(), getNotAllowedExceptionMessage(\"helloForRoles\"));\n         }\n     }", "fixed": "             Assert.fail(\"Test should fail, user shouldn't be allowed to invoke that method\");\n         } catch (WebServiceException e) {\n            Assert.assertEquals(getNotAllowedExceptionMessage(\"helloForRoles\"), e.getCause().getMessage());\n         }\n     }", "sourceBeforeFix": "Assert.assertEquals(e.getCause().getMessage(),getNotAllowedExceptionMessage(\"helloForRole\"))", "sourceAfterFix": "Assert.assertEquals(getNotAllowedExceptionMessage(\"helloForRole\"),e.getCause().getMessage())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "3841ff0cd87dd048dff43379df81153ed9bcf265", "projectName": "hazelcast.hazelcast", "bugType": "Change Numeric Literal", "problem": "     @Test\n     public void sync_whenCallTimeout_thenOperationTimeoutException() throws Exception {\n        long callTimeoutMs = 5000;\n         Config config = new Config().setProperty(GroupProperty.OPERATION_CALL_TIMEOUT_MILLIS.getName(), \"\" + callTimeoutMs);\n         TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(2);\n         HazelcastInstance local = factory.newHazelcastInstance(config);", "fixed": "     @Test\n     public void sync_whenCallTimeout_thenOperationTimeoutException() throws Exception {\n        long callTimeoutMs = 10000;\n         Config config = new Config().setProperty(GroupProperty.OPERATION_CALL_TIMEOUT_MILLIS.getName(), \"\" + callTimeoutMs);\n         TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(2);\n         HazelcastInstance local = factory.newHazelcastInstance(config);", "sourceBeforeFix": "callTimeoutMs=5000", "sourceAfterFix": "callTimeoutMs=10000"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "b4dd066af8d780844f20f35c892476f6b35ff1b2", "projectName": "hazelcast.hazelcast", "bugType": "More Specific If", "problem": "         }\n         for (Future<Pairs> future : lsFutures) {\n             Pairs pairs = future.get();\n            if (pairs != null) {\n                 for (KeyValue keyValue : pairs.getKeyValues()) {\n                     results.addKeyValue(keyValue);\n                 }", "fixed": "         }\n         for (Future<Pairs> future : lsFutures) {\n             Pairs pairs = future.get();\n            if (pairs != null && pairs.getKeyValues()!=null) {\n                 for (KeyValue keyValue : pairs.getKeyValues()) {\n                     results.addKeyValue(keyValue);\n                 }", "sourceBeforeFix": "pairs != null", "sourceAfterFix": "pairs != null && pairs.getKeyValues() != null"}
{"fixCommitSHA1": "c4a437e16b42e88eb9947c65d3dd2413bd9ef5ac", "projectName": "netty.netty", "bugType": "Wrong Function Name", "problem": "      * the specified {@link Channel} once the io-thread runs again.\n      */\n     public static void fireExceptionCaughtLater(Channel channel, Throwable cause) {\n        channel.getPipeline().sendUpstream(\n                 new DefaultExceptionEvent(channel, cause));\n     }", "fixed": "      * the specified {@link Channel} once the io-thread runs again.\n      */\n     public static void fireExceptionCaughtLater(Channel channel, Throwable cause) {\n        channel.getPipeline().sendUpstreamLater(\n                 new DefaultExceptionEvent(channel, cause));\n     }", "sourceBeforeFix": "channel.getPipeline().sendUpstream(new DefaultExceptionEvent(channel,cause))", "sourceAfterFix": "channel.getPipeline().sendUpstreamLater(new DefaultExceptionEvent(channel,cause))"}
{"fixCommitSHA1": "3dddcc4cdf4a74ddbd4607c6aaee5bdd8ac46c27", "projectName": "gephi.gephi", "bugType": "Change Modifier", "problem": "     }\n     @Override\n    public void updateLOD() {\n         Iterator<NodeModel> iterator = octree.getNodeIterator();\n         for (; iterator.hasNext();) {\n             NodeModel obj = iterator.next();", "fixed": "     }\n     @Override\n    public synchronized void updateLOD() {\n         Iterator<NodeModel> iterator = octree.getNodeIterator();\n         for (; iterator.hasNext();) {\n             NodeModel obj = iterator.next();", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "6712e8d7e4cf48e045eb0d46187291296d99a1f2", "projectName": "apache.storm", "bugType": "Change Numeric Literal", "problem": "     @Test\n     public void testMaxBackoff() throws Exception {\n        final long initial = 10;\n         final double mult = 2d;\n        final long max = 20;\n         ExponentialBackoffMsgRetryManager manager = new ExponentialBackoffMsgRetryManager(initial, mult, max);\n         long expectedWaitTime = initial;", "fixed": "     @Test\n     public void testMaxBackoff() throws Exception {\n        final long initial = 100;\n         final double mult = 2d;\n        final long max = 2000;\n         ExponentialBackoffMsgRetryManager manager = new ExponentialBackoffMsgRetryManager(initial, mult, max);\n         long expectedWaitTime = initial;", "sourceBeforeFix": "initial=10", "sourceAfterFix": "initial=100"}
{"fixCommitSHA1": "312ba4238e15b4f95054ca33ee1b3604afbd8d74", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": " \t\t\t\t\tif (OpenmrsUtil.compareWithNullAsLatest(patientState.getEndDate(), patientState.getStartDate()) < 0) {\r\n \t\t\t\t\t\terrors.rejectValue(\"states\", \"PatientState.error.endDateCannotBeBeforeStartDate\");\r\n \t\t\t\t\t\treturn;\r\n\t\t\t\t\t} else if (statesAndStartDates.contains(patientState.getState().getId() + \"\"\r\n \t\t\t\t\t        + patientState.getStartDate())) {\r\n \t\t\t\t\t\terrors.rejectValue(\"states\", \"PatientState.error.duplicatePatientStates\");\r", "fixed": " \t\t\t\t\tif (OpenmrsUtil.compareWithNullAsLatest(patientState.getEndDate(), patientState.getStartDate()) < 0) {\r\n \t\t\t\t\t\terrors.rejectValue(\"states\", \"PatientState.error.endDateCannotBeBeforeStartDate\");\r\n \t\t\t\t\t\treturn;\r\n\t\t\t\t\t} else if (statesAndStartDates.contains(patientState.getState().getUuid() + \"\"\r\n \t\t\t\t\t        + patientState.getStartDate())) {\r\n \t\t\t\t\t\terrors.rejectValue(\"states\", \"PatientState.error.duplicatePatientStates\");\r", "sourceBeforeFix": "patientState.getState().getId()", "sourceAfterFix": "patientState.getState().getUuid()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "419fb4a4dee3cd001631daa06fe6b8c30095b468", "projectName": "apache.hadoop", "bugType": "Change Identifier Used", "problem": "                                                   ) throws IOException {\n     try {\n      ugi.reloginFromKeytab();\n       return ugi.doAs(new PrivilegedExceptionAction<Token<?>>() {\n         @Override\n         public Token<?> run() throws IOException {", "fixed": "                                                   ) throws IOException {\n     try {\n      ugi.checkTGTAndReloginFromKeytab();\n       return ugi.doAs(new PrivilegedExceptionAction<Token<?>>() {\n         @Override\n         public Token<?> run() throws IOException {", "sourceBeforeFix": "UserGroupInformation.getLoginUser().reloginFromKeytab()", "sourceAfterFix": "UserGroupInformation.getLoginUser().checkTGTAndReloginFromKeytab()"}
{"fixCommitSHA1": "d79d8da2ff4ed76577133e5d0da796d9e2642e40", "projectName": "facebook.presto", "bugType": "Change Modifier", "problem": "     private final Block values;\n     private final int[] offsets;\n    private long sizeInBytes;\n     private final long retainedSizeInBytes;\n     public ArrayBlock(int positionCount, boolean[] valueIsNull, int[] offsets, Block values)", "fixed": "     private final Block values;\n     private final int[] offsets;\n    private volatile long sizeInBytes;\n     private final long retainedSizeInBytes;\n     public ArrayBlock(int positionCount, boolean[] valueIsNull, int[] offsets, Block values)", "sourceBeforeFix": "2", "sourceAfterFix": "66"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedCouchbaseEndpointBuilder\n             extends\n                 AdvancedCouchbaseEndpointConsumerBuilder, AdvancedCouchbaseEndpointProducerBuilder {\n         default CouchbaseEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedCouchbaseEndpointBuilder\n             extends\n                 AdvancedCouchbaseEndpointConsumerBuilder, AdvancedCouchbaseEndpointProducerBuilder {\n         default CouchbaseEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "ade2ef1e23fecc7211fb450ca852bc94fe565e0e", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "       currentInodeDirectory.addChild(dir);\n       currentInodeDirectory.setLastModificationTimeMs(options.getOperationTimeMs());\n       if (options.isPersisted()) {\n        String ufsPath = mMountTable.resolve(getPath(dir)).getPath();\n         UnderFileSystem ufs = UnderFileSystem.get(ufsPath, MasterContext.getConf());\n         ufs.mkdirs(ufsPath, false);\n       }", "fixed": "       currentInodeDirectory.addChild(dir);\n       currentInodeDirectory.setLastModificationTimeMs(options.getOperationTimeMs());\n       if (options.isPersisted()) {\n        String ufsPath = mMountTable.resolve(getPath(dir)).toString();\n         UnderFileSystem ufs = UnderFileSystem.get(ufsPath, MasterContext.getConf());\n         ufs.mkdirs(ufsPath, false);\n       }", "sourceBeforeFix": "mMountTable.resolve(getPath(next)).getPath()", "sourceAfterFix": "mMountTable.resolve(getPath(next)).toString()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 15832, value = \"There is already a registered host named '%s'\")\n     String slaveAlreadyRegistered(String slaveName);\n     /**", "fixed": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 10832, value = \"There is already a registered host named '%s'\")\n     String slaveAlreadyRegistered(String slaveName);\n     /**", "sourceBeforeFix": "id=15858", "sourceAfterFix": "id=10858"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  private final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e2119d33293008fcc876f5fcd58ede2993eb24d6", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnBean(Client.class)\n\t@ConditionalOnEnablednHealthIndicator(\"elasticsearch\")\n \t@EnableConfigurationProperties(ElasticsearchHealthIndicatorProperties.class)\n \tpublic static class ElasticsearchHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<ElasticsearchHealthIndicator, Client> {", "fixed": " \t@Configuration\n \t@ConditionalOnBean(Client.class)\n\t@ConditionalOnEnabledHealthIndicator(\"elasticsearch\")\n \t@EnableConfigurationProperties(ElasticsearchHealthIndicatorProperties.class)\n \tpublic static class ElasticsearchHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<ElasticsearchHealthIndicator, Client> {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"solr\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"solr\")"}
{"fixCommitSHA1": "9ffeb75057d541530b7ff410cfe220df26c893be", "projectName": "mybatis.mybatis-3", "bugType": "Change Identifier Used", "problem": "   private void add(final Class<?> primitiveType, final Class<?> wrapperType) {\n     primitiveToWrappers.put(primitiveType, wrapperType);\n    primitiveToWrappers.put(wrapperType, primitiveType);\n   }\n   public Class<?> getWrapper(final Class<?> primitiveType) {", "fixed": "   private void add(final Class<?> primitiveType, final Class<?> wrapperType) {\n     primitiveToWrappers.put(primitiveType, wrapperType);\n    wrappersToPrimitives.put(wrapperType, primitiveType);\n   }\n   public Class<?> getWrapper(final Class<?> primitiveType) {", "sourceBeforeFix": "primitiveToWrappers.put(wrapperType,primitiveType)", "sourceAfterFix": "wrappersToPrimitives.put(wrapperType,primitiveType)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "01fec049c0fb6b1c326d802687f3093b502123e0", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": " \t\t\t\t\tthrow new MandatoryModuleException(ex.getModuleId(), \"Got an error while starting a mandatory module: \"\r\n \t\t\t\t\t        + e.getMessage() + \". Check the server logs for more information\");\r\n \t\t\t\t}\r\n\t\t\t\tcatch (Throwable t2) {\r\n \t\t\t\t\tlog.warn(\"caught another error: \", t2);\r", "fixed": " \t\t\t\t\tthrow new MandatoryModuleException(ex.getModuleId(), \"Got an error while starting a mandatory module: \"\r\n \t\t\t\t\t        + e.getMessage() + \". Check the server logs for more information\");\r\n \t\t\t\t}\r\n\t\t\t\tcatch (Exception t2) {\r\n \t\t\t\t\tlog.warn(\"caught another error: \", t2);\r", "sourceBeforeFix": "Throwable t", "sourceAfterFix": "Exception t"}
{"fixCommitSHA1": "364ae9baf3824dc4e0e56b2b681f8302731e8cdd", "projectName": "apache.hive", "bugType": "Same Function More Args", "problem": "         ret = getMS().updateTableColumnStatistics(colStats);\n         return ret;\n       } finally {\n        endFunction(\"write_column_statistics: \", ret != false);\n       }\n     }", "fixed": "         ret = getMS().updateTableColumnStatistics(colStats);\n         return ret;\n       } finally {\n        endFunction(\"write_column_statistics: \", ret != false, null);\n       }\n     }", "sourceBeforeFix": "endFunction(\"delete_column_statistics_by_table: \",ret != false)", "sourceAfterFix": "endFunction(\"delete_column_statistics_by_table: \",ret != false,null)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15837, value = \"One of the groups does not define neither \" + SERVER_GROUP + \" nor \" + CONCURRENT_GROUPS + \": %s\")\n     String unexpectedInSeriesGroup(String rolloutPlan);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10837, value = \"One of the groups does not define neither \" + SERVER_GROUP + \" nor \" + CONCURRENT_GROUPS + \": %s\")\n     String unexpectedInSeriesGroup(String rolloutPlan);\n     /**", "sourceBeforeFix": "id=15832", "sourceAfterFix": "id=10832"}
{"fixCommitSHA1": "9a861785b36e0b1132737bd8fa1f7caac5a41c87", "projectName": "hazelcast.hazelcast", "bugType": "Change Binary Operator", "problem": "             @Override\n             public void run()\n                     throws Exception {\n                assertTrue(stats.getLastUpdateTime() > lastUpdateTime);\n             }\n         });\n     }", "fixed": "             @Override\n             public void run()\n                     throws Exception {\n                assertTrue(stats.getLastUpdateTime() >= lastUpdateTime);\n             }\n         });\n     }", "sourceBeforeFix": "lastUpdateTime2 > lastUpdateTime", "sourceAfterFix": "lastUpdateTime2 >= lastUpdateTime"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<Status> getFriendsTimeline() throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\", true));\n     }\n     /**", "fixed": "      */\n     public ResponseList<Status> getFriendsTimeline() throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\", true));\n     }\n     /**", "sourceBeforeFix": "DirectMessage.constructDirectMessages(get(getBaseURL() + \"direct_messages.json\",true))", "sourceAfterFix": "DirectMessage.createDirectMessageList(get(getBaseURL() + \"direct_messages.json\",true))"}
{"fixCommitSHA1": "3258782752763d360d3beecca15e583934c62e09", "projectName": "springside.springside4", "bugType": "Change Identifier Used", "problem": " \tpublic List<User> getAllUser() {\n \t\tif (applicationStatistics != null) {\n\t\t\tapplicationStatistics.incrUpdateUserTimes();\n \t\t}\n \t\treturn (List<User>) userJpaDao.findAll();\n \t}", "fixed": " \tpublic List<User> getAllUser() {\n \t\tif (applicationStatistics != null) {\n\t\t\tapplicationStatistics.incrListUserTimes();\n \t\t}\n \t\treturn (List<User>) userJpaDao.findAll();\n \t}", "sourceBeforeFix": "applicationStatistics.incrUpdateUserTimes()", "sourceAfterFix": "applicationStatistics.incrListUserTimes()"}
{"fixCommitSHA1": "ec5961a27122b228cb8adb634ee183eebcefa98c", "projectName": "apache.hive", "bugType": "Change Identifier Used", "problem": "     final String command,\n     final LinkedHashMap<String,ArrayList<String>> pathToAliases,\n     final LinkedHashMap<String,partitionDesc> pathToPartitionInfo,\n    final HashMap<String,Operator<? extends Serializable>> aliasToWork,\n     final tableDesc keyDesc,\n     List<tableDesc> tagToValueDesc,\n     final Operator<?> reducer,", "fixed": "     final String command,\n     final LinkedHashMap<String,ArrayList<String>> pathToAliases,\n     final LinkedHashMap<String,partitionDesc> pathToPartitionInfo,\n    final LinkedHashMap<String,Operator<? extends Serializable>> aliasToWork,\n     final tableDesc keyDesc,\n     List<tableDesc> tagToValueDesc,\n     final Operator<?> reducer,", "sourceBeforeFix": "HashMap<String,Operator<? extends Serializable>>", "sourceAfterFix": "LinkedHashMap<String,Operator<? extends Serializable>>"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AtmosphereWebsocketEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedAtmosphereWebsocketEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface AtmosphereWebsocketEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedAtmosphereWebsocketEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream.\n \t */\n\tpublic DataStream<OUT> print() {\n \t\tDataStream<OUT> inputStream = this.copy();\n \t\tPrintSinkFunction<OUT> printFunction = new PrintSinkFunction<OUT>();\n\t\tDataStream<OUT> returnStream = addSink(inputStream, printFunction, null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());", "fixed": " \t * \n \t * @return The closed DataStream.\n \t */\n\tpublic DataStreamSink<OUT> print() {\n \t\tDataStream<OUT> inputStream = this.copy();\n \t\tPrintSinkFunction<OUT> printFunction = new PrintSinkFunction<OUT>();\n\t\tDataStreamSink<OUT> returnStream = addSink(inputStream, printFunction, null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "c1dafc1118b225ec818e9ca305edbdbc45e6b207", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "     if (serviceType == ServiceType.MASTER_WEB) {\n       port = mLocalAlluxioClusterResource.get().getMaster().getWebLocalPort();\n     } else {\n      port = mLocalAlluxioClusterResource.get().getWorkerAddress().getWebPort();\n     }\n     InetSocketAddress webAddr =\n         new InetSocketAddress(NetworkAddressUtils.getConnectHost(serviceType), port);", "fixed": "     if (serviceType == ServiceType.MASTER_WEB) {\n       port = mLocalAlluxioClusterResource.get().getMaster().getWebLocalPort();\n     } else {\n      port = mLocalAlluxioClusterResource.get().getWorker().getWebLocalPort();\n     }\n     InetSocketAddress webAddr =\n         new InetSocketAddress(NetworkAddressUtils.getConnectHost(serviceType), port);", "sourceBeforeFix": "mLocalAlluxioClusterResource.get().getWorkerAddress()", "sourceAfterFix": "mLocalAlluxioClusterResource.get().getWorker()"}
{"fixCommitSHA1": "14db1773526284bfc9837a4ef9121862dc8544fb", "projectName": "hazelcast.hazelcast", "bugType": "Change Modifier", "problem": " class DataRecordWithStats extends AbstractRecordWithStats<Data> {\n    protected Data value;\n     DataRecordWithStats() {\n         super();", "fixed": " class DataRecordWithStats extends AbstractRecordWithStats<Data> {\n    protected volatile Data value;\n     DataRecordWithStats() {\n         super();", "sourceBeforeFix": "4", "sourceAfterFix": "68"}
{"fixCommitSHA1": "4dd18ed5c3188be2cfb14efce62e71ae6f19243a", "projectName": "dropwizard.dropwizard", "bugType": "Wrong Function Name", "problem": "     public TaskServlet(Iterable<Task> tasks) {\n         final ImmutableMap.Builder<String, Task> builder = ImmutableMap.builder();\n         for (Task task : tasks) {\n            builder.put(\"/tasks/\" + task.getName(), task);\n         }\n         this.tasks = builder.build();\n     }", "fixed": "     public TaskServlet(Iterable<Task> tasks) {\n         final ImmutableMap.Builder<String, Task> builder = ImmutableMap.builder();\n         for (Task task : tasks) {\n            builder.put(\"/\" + task.getName(), task);\n         }\n         this.tasks = builder.build();\n     }", "sourceBeforeFix": "req.getServletPath()", "sourceAfterFix": "req.getPathInfo()"}
{"fixCommitSHA1": "b7e092e821021b7c0dbd91eacfe369181bfa28b8", "projectName": "spring-projects.spring-boot", "bugType": "Wrong Function Name", "problem": " \t\tRSocketWebSocketNettyRouteProvider rSocketWebsocketRouteProvider(RSocketProperties properties,\n \t\t\t\tRSocketMessageHandler messageHandler) {\n \t\t\treturn new RSocketWebSocketNettyRouteProvider(properties.getServer().getMappingPath(),\n\t\t\t\t\tmessageHandler.serverAcceptor());\n \t\t}\n \t}", "fixed": " \t\tRSocketWebSocketNettyRouteProvider rSocketWebsocketRouteProvider(RSocketProperties properties,\n \t\t\t\tRSocketMessageHandler messageHandler) {\n \t\t\treturn new RSocketWebSocketNettyRouteProvider(properties.getServer().getMappingPath(),\n\t\t\t\t\tmessageHandler.serverResponder());\n \t\t}\n \t}", "sourceBeforeFix": "rSocketMessageHandler.serverAcceptor()", "sourceAfterFix": "rSocketMessageHandler.serverResponder()"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShader(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "fixed": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShaderiv(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "sourceBeforeFix": "EXTFramebufferObject.glGetFramebufferAttachmentParameterEXT(target,attachment,pname,params)", "sourceAfterFix": "EXTFramebufferObject.glGetFramebufferAttachmentParameterivEXT(target,attachment,pname,params)"}
{"fixCommitSHA1": "1dd50dfae2c7d4853f7d04351d8cbfc77cfc922f", "projectName": "dropwizard.dropwizard", "bugType": "Change Numeric Literal", "problem": "     @NotNull\n     @JsonProperty\n    private Size requestBufferSize = Size.kilobytes(32);\n     @NotNull\n     @JsonProperty\n    private Size requestHeaderBufferSize = Size.kilobytes(3);\n     @NotNull\n     @JsonProperty", "fixed": "     @NotNull\n     @JsonProperty\n    private Size requestBufferSize = Size.kilobytes(16);\n     @NotNull\n     @JsonProperty\n    private Size requestHeaderBufferSize = Size.kilobytes(6);\n     @NotNull\n     @JsonProperty", "sourceBeforeFix": "Size.kilobytes(3)", "sourceAfterFix": "Size.kilobytes(6)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "c75c9f00ac9e34031b88f097a9f436ec261e3b82", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "     private final JTextArea textArea;\n     private File lastDirectory;\n     private File currentFile;\n    private final Action reloadAction;\n     private final List<Integer>   linesToPosition  = new ArrayList<>();\n     /**", "fixed": "     private final JTextArea textArea;\n     private File lastDirectory;\n     private File currentFile;\n    private final ReloadAction reloadAction;\n     private final List<Integer>   linesToPosition  = new ArrayList<>();\n     /**", "sourceBeforeFix": "private final Action reloadAction; ", "sourceAfterFix": "private final ReloadAction reloadAction; "}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15861, value = \"Cannot remove deployment %s from the domain as it is still used by server groups %s\")\n     String cannotRemoveDeploymentInUse(String name, List<String> groups);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10861, value = \"Cannot remove deployment %s from the domain as it is still used by server groups %s\")\n     String cannotRemoveDeploymentInUse(String name, List<String> groups);\n     /**", "sourceBeforeFix": "id=15861", "sourceAfterFix": "id=10861"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "5b13fe70c25812157a1e4432135eb9639e72bc6a", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t\tfinal Sink output = new Sink(\"output.json\").withInputs(selection);\n \t\texpectedPlan.setSinks(output);\n\t\tassertEquals(expectedPlan, actualPlan);\n \t}\n \t@Test", "fixed": " \t\tfinal Sink output = new Sink(\"output.json\").withInputs(selection);\n \t\texpectedPlan.setSinks(output);\n\t\tassertPlanEquals(expectedPlan, actualPlan);\n \t}\n \t@Test", "sourceBeforeFix": "assertEquals(expectedPlan,actualPlan)", "sourceAfterFix": "assertPlanEquals(expectedPlan,actualPlan)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  private final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "492fd118d4902c730fc8619851a7135b623631e2", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "                     .aggregator().header(\"id\")\r\n                    .batchTimeout(2000L)\r\n                     .batchSize(5)\r", "fixed": "                     .aggregator().header(\"id\")\r\n                    .batchTimeout(500L)\r\n                     .batchSize(5)\r", "sourceBeforeFix": "from(\"direct:start\").aggregator().header(\"id\").batchTimeout(2000L)", "sourceAfterFix": "from(\"direct:start\").aggregator().header(\"id\").batchTimeout(500L)"}
{"fixCommitSHA1": "d2b19965df52e66385a2d7146887a44cea50330a", "projectName": "google.closure-compiler", "bugType": "Wrong Function Name", "problem": "   \n   ControlFlowGraph<Node> computeCFG() {\n    logger.info(\"Computing Control Flow Graph\");\n     Tracer tracer = newTracer(\"computeCFG\");\n     ControlFlowAnalysis cfa = new ControlFlowAnalysis(this, true, false);\n     process(cfa);", "fixed": "   \n   ControlFlowGraph<Node> computeCFG() {\n    logger.fine(\"Computing Control Flow Graph\");\n     Tracer tracer = newTracer(\"computeCFG\");\n     ControlFlowAnalysis cfa = new ControlFlowAnalysis(this, true, false);\n     process(cfa);", "sourceBeforeFix": "logger.info(\"Strip code\")", "sourceAfterFix": "logger.fine(\"Strip code\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  private final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n            file = new RandomAccessFile(FOLDER + (mWorkerId + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());", "fixed": "         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n            file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public List<Trends> getDailyTrends(Date date, boolean excludeHashTags) throws TwitterException {\n        return Trends.constructTrendsList(get(getSearchBaseURL()\n                 + \"trends/daily.json?date=\" + toDateStr(date)\n                 + (excludeHashTags ? \"&exclude=hashtags\" : \"\"), false));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public List<Trends> getDailyTrends(Date date, boolean excludeHashTags) throws TwitterException {\n        return Trends.createTrendsList(get(getSearchBaseURL()\n                 + \"trends/daily.json?date=\" + toDateStr(date)\n                 + (excludeHashTags ? \"&exclude=hashtags\" : \"\"), false));\n     }", "sourceBeforeFix": "DirectMessage.constructDirectMessages(get(getBaseURL() + \"direct_messages.json\",true))", "sourceAfterFix": "DirectMessage.createDirectMessageList(get(getBaseURL() + \"direct_messages.json\",true))"}
{"fixCommitSHA1": "25923003ecdba4ed236618b917dadeb36e74addf", "projectName": "openhab.openhab", "bugType": "Change Numeric Literal", "problem": "                         command.toString(), repeatCount);\r\n                 if (command.compareTo(oldPercent) > 0) {\r\n                     for (int i = 0; i < repeatCount; i++) {\r\n                        Thread.sleep(50);\r\n                         if (BindingType.brightness.equals(type)) {\r\n                             sendIncrease(bulb, rgbwSteps, bridgeId);\r\n                         } else if (BindingType.colorTemperature.equals(type)) {\r", "fixed": "                         command.toString(), repeatCount);\r\n                 if (command.compareTo(oldPercent) > 0) {\r\n                     for (int i = 0; i < repeatCount; i++) {\r\n                        Thread.sleep(100);\r\n                         if (BindingType.brightness.equals(type)) {\r\n                             sendIncrease(bulb, rgbwSteps, bridgeId);\r\n                         } else if (BindingType.colorTemperature.equals(type)) {\r", "sourceBeforeFix": "Thread.sleep(50)", "sourceAfterFix": "Thread.sleep(100)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShader(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "fixed": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShaderiv(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "sourceBeforeFix": "GL20.glUniform1(location,v)", "sourceAfterFix": "GL20.glUniform1iv(location,v)"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "             }\n         }\n         if (isStatisticsEnabled()) {\n            statistics.addGetTimeNano(System.nanoTime() - start);\n         }\n         CacheEntryProcessorEntry entry = new CacheEntryProcessorEntry(key, record, this, now);\n         final Object process = entryProcessor.process(entry, arguments);", "fixed": "             }\n         }\n         if (isStatisticsEnabled()) {\n            statistics.addGetTimeNanos(System.nanoTime() - start);\n         }\n         CacheEntryProcessorEntry entry = new CacheEntryProcessorEntry(key, record, this, now);\n         final Object process = entryProcessor.process(entry, arguments);", "sourceBeforeFix": "statistics.addGetTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addGetTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fcea9dfeb6b2e12cb04602baac67b3a1c3cb58c9", "projectName": "wildfly.wildfly", "bugType": "Same Function More Args", "problem": "     SimpleAttributeDefinition ENCODING = SimpleAttributeDefinitionBuilder.create(\"encoding\", ModelType.STRING, true).build();\n    SimpleAttributeDefinition FILE = SimpleAttributeDefinitionBuilder.create(\"file\", ModelType.OBJECT, true).\n             setCorrector(FileCorrector.INSTANCE).\n             setValidator(new FileValidator()).\n             build();", "fixed": "     SimpleAttributeDefinition ENCODING = SimpleAttributeDefinitionBuilder.create(\"encoding\", ModelType.STRING, true).build();\n    SimpleAttributeDefinition FILE = SimpleAttributeDefinitionBuilder.create(\"file\", ModelType.OBJECT, false).\n             setCorrector(FileCorrector.INSTANCE).\n             setValidator(new FileValidator()).\n             build();", "sourceBeforeFix": "SimpleAttributeDefinitionBuilder.create(\"max-backup-index\",ModelType.INT)", "sourceAfterFix": "SimpleAttributeDefinitionBuilder.create(\"max-backup-index\",ModelType.INT,true)"}
{"fixCommitSHA1": "1baf9b7f47f1f1592391a9eb18b3ad0b340f7355", "projectName": "apache.storm", "bugType": "Change Identifier Used", "problem": "         pipeline.addLast(\"encoder\", new MessageEncoder());\n        pipeline.addLast(\"handler\", new StormClientHandler(client));\n         return pipeline;\n     }", "fixed": "         pipeline.addLast(\"encoder\", new MessageEncoder());\n        pipeline.addLast(\"handler\", new StormClientErrorHandler(client.name()));\n         return pipeline;\n     }", "sourceBeforeFix": "new StormClientHandler(client)", "sourceAfterFix": "new StormClientErrorHandler(client.name())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "c30e67b81a0d9ac45c4151d20a960e542ad97b4f", "projectName": "dropwizard.dropwizard", "bugType": "Change Identifier Used", "problem": "         final PrintWriter output = mock(PrintWriter.class);\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getRequestURI()).thenReturn(\"/tasks/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.<String>of()));\n         when(response.getWriter()).thenReturn(output);", "fixed": "         final PrintWriter output = mock(PrintWriter.class);\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getServletPath()).thenReturn(\"/tasks/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.<String>of()));\n         when(response.getWriter()).thenReturn(output);", "sourceBeforeFix": "request.getRequestURI()", "sourceAfterFix": "request.getServletPath()"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedAtomixQueueEndpointBuilder\n             extends\n                 AdvancedAtomixQueueEndpointConsumerBuilder, AdvancedAtomixQueueEndpointProducerBuilder {\n         default AtomixQueueEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedAtomixQueueEndpointBuilder\n             extends\n                 AdvancedAtomixQueueEndpointConsumerBuilder, AdvancedAtomixQueueEndpointProducerBuilder {\n         default AtomixQueueEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "154231365ae762604c2d11c9701d782ddcb0442d", "projectName": "b3log.solo", "bugType": "Wrong Function Name", "problem": "         final StringBuilder listBuilder = new StringBuilder();\n        listBuilder.append(\"<link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"\" + Latkes.getStaticPath() + \"/plugins/list/style.css\\\" />\");\n         final Elements hs = doc.select(\"h1, h2, h3, h4, h5\");", "fixed": "         final StringBuilder listBuilder = new StringBuilder();\n        listBuilder.append(\"<link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"\" + Latkes.getStaticServePath() + \"/plugins/list/style.css\\\" />\");\n         final Elements hs = doc.select(\"h1, h2, h3, h4, h5\");", "sourceBeforeFix": "Latkes.getStaticPath()", "sourceAfterFix": "Latkes.getStaticServePath()"}
{"fixCommitSHA1": "204d9f571caab35a0adb72ffd87fd9c85a12300a", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "       if (!phNames.contains(phName)) {\n         throw new MalformedException(\n             \"Unrecognized message placeholder referenced: \" + phName,\n            objLitNode);\n       }\n     }", "fixed": "       if (!phNames.contains(phName)) {\n         throw new MalformedException(\n             \"Unrecognized message placeholder referenced: \" + phName,\n            node);\n       }\n     }", "sourceBeforeFix": "new MalformedException(\"Unused message placeholder: \" + phName,objLitNode)", "sourceAfterFix": "new MalformedException(\"Unused message placeholder: \" + phName,node)"}
{"fixCommitSHA1": "2cf6eb9e746ab1c610460badf4f99f1ee19bf0b3", "projectName": "clojure.clojure", "bugType": "Same Function Swap Args", "problem": " \tprivate HashCollisionNode ensureEditable(AtomicReference<Thread> edit){\n \t\tif(this.edit == edit)\n \t\t\treturn this;\n\t\treturn new HashCollisionNode(edit, count, hash, array);\n \t}\n \tprivate HashCollisionNode ensureEditable(AtomicReference<Thread> edit, int count, Object[] array){", "fixed": " \tprivate HashCollisionNode ensureEditable(AtomicReference<Thread> edit){\n \t\tif(this.edit == edit)\n \t\t\treturn this;\n\t\treturn new HashCollisionNode(edit, hash, count, array);\n \t}\n \tprivate HashCollisionNode ensureEditable(AtomicReference<Thread> edit, int count, Object[] array){", "sourceBeforeFix": "new HashCollisionNode(edit,count,hash,array)", "sourceAfterFix": "new HashCollisionNode(edit,hash,count,array)"}
{"fixCommitSHA1": "b6b9cd997b689c70f194da8517910d3bb2d8e843", "projectName": "libgdx.libgdx", "bugType": "Change Binary Operator", "problem": " \t\t\t\tswitch (event.phase) {\n \t\t\t\tcase Began:\n \t\t\t\t\tif (inputProcessor != null) inputProcessor.touchDown(event.x, event.y, event.pointer, Buttons.LEFT);\n\t\t\t\t\tif (numTouched == 1) justTouched = true;\n \t\t\t\t\tbreak;\n \t\t\t\tcase Cancelled:\n \t\t\t\tcase Ended:", "fixed": " \t\t\t\tswitch (event.phase) {\n \t\t\t\tcase Began:\n \t\t\t\t\tif (inputProcessor != null) inputProcessor.touchDown(event.x, event.y, event.pointer, Buttons.LEFT);\n\t\t\t\t\tif (numTouched >= 1) justTouched = true;\n \t\t\t\t\tbreak;\n \t\t\t\tcase Cancelled:\n \t\t\t\tcase Ended:", "sourceBeforeFix": "numTouched == 1", "sourceAfterFix": "numTouched >= 1"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid request\", response = Void.class),\n         @ApiResponse(code = 404, message = \"Not found\", response = Void.class) })\n    void testEnumParameters(@FormParam(value = \"enum_form_string_array\")  List<String> enumFormStringArray,@FormParam(value = \"enum_form_string\")  String enumFormString,@HeaderParam(\"enum_header_string_array\")   @ApiParam(\"Header parameter enum test (string array)\") List<String> enumHeaderStringArray,@HeaderParam(\"enum_header_string\")  @DefaultValue(\"-efg\")  @ApiParam(\"Header parameter enum test (string)\") String enumHeaderString,@QueryParam(\"enum_query_string_array\")   @ApiParam(\"Query parameter enum test (string array)\")  List<String> enumQueryStringArray,@QueryParam(\"enum_query_string\")  @DefaultValue(\"-efg\")  @ApiParam(\"Query parameter enum test (string)\")  String enumQueryString,@QueryParam(\"enum_query_integer\")   @ApiParam(\"Query parameter enum test (double)\")  Integer enumQueryInteger,@FormParam(value = \"enum_query_double\")  Double enumQueryDouble);\n     @GET\n     @Path(\"/jsonFormData\")", "fixed": "     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid request\", response = Void.class),\n         @ApiResponse(code = 404, message = \"Not found\", response = Void.class) })\n    void testEnumParameters(@FormParam(value = \"enum_form_string_array\")  List<String> enumFormStringArray,@FormParam(value = \"enum_form_string\")  String enumFormString,@HeaderParam(\"enum_header_string_array\")   @ApiParam(\"Header parameter enum test (string array)\") List<String> enumHeaderStringArray,@HeaderParam(\"enum_header_string\")  @DefaultValue(\"-efg\")  @ApiParam(\"Header parameter enum test (string)\") String enumHeaderString,@QueryParam(\"enum_query_string_array\")   @ApiParam(\"Query parameter enum test (string array)\")  List<String> enumQueryStringArray,@QueryParam(\"enum_query_string\")  @DefaultValue(\"-efg\")  @ApiParam(\"Query parameter enum test (string)\")  String enumQueryString,@QueryParam(\"enum_query_integer\")   @ApiParam(\"Query parameter enum test (double)\")  Integer enumQueryInteger,@FormParam(value = \"enum_query_double\")  Double enumQueryDouble) throws Exception;\n     @GET\n     @Path(\"/jsonFormData\")", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<DirectMessage> getSentDirectMessages(Paging paging) throws\n             TwitterException {\n        return DirectMessage.constructDirectMessages(get(getBaseURL() +\n                 \"direct_messages/sent.json\", new PostParameter[0],\n                 paging.asPostParameterList(), true));\n     }", "fixed": "      */\n     public ResponseList<DirectMessage> getSentDirectMessages(Paging paging) throws\n             TwitterException {\n        return DirectMessage.createDirectMessageList(get(getBaseURL() +\n                 \"direct_messages/sent.json\", new PostParameter[0],\n                 paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/home_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/home_timeline.json\",true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  private final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15849, value = \"Operation %s for address %s can only be handled by the \" +\n             \"master Domain Controller; this host is not the master Domain Controller\")\n     String masterDomainControllerOnlyOperation(String operation, PathAddress address);", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10849, value = \"Operation %s for address %s can only be handled by the \" +\n             \"master Domain Controller; this host is not the master Domain Controller\")\n     String masterDomainControllerOnlyOperation(String operation, PathAddress address);", "sourceBeforeFix": "id=15844", "sourceAfterFix": "id=10844"}
{"fixCommitSHA1": "6bae902bd35ed4f57e7a5d612b7ad9b72f4559bc", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "     JSTypeRegistry registry = new JSTypeRegistry(testErrorReporter);\n     Node node1 = Node.newString(Token.NAME, \"f\");\n     Node node2 = Node.newString(Token.NAME, \"f\");\n    assertTrue(node1.checkTreeTypeAwareEqualsSilent(node2));\n   }\n   public void testCheckTreeTypeAwareEqualsDifferent() {", "fixed": "     JSTypeRegistry registry = new JSTypeRegistry(testErrorReporter);\n     Node node1 = Node.newString(Token.NAME, \"f\");\n     Node node2 = Node.newString(Token.NAME, \"f\");\n    assertTrue(node1.isEquivalentToTyped(node2));\n   }\n   public void testCheckTreeTypeAwareEqualsDifferent() {", "sourceBeforeFix": "node1.checkTreeTypeAwareEqualsSilent(node2)", "sourceAfterFix": "node1.isEquivalentToTyped(node2)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15849, value = \"Operation %s for address %s can only be handled by the \" +\n             \"master Domain Controller; this host is not the master Domain Controller\")\n     String masterDomainControllerOnlyOperation(String operation, PathAddress address);", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10849, value = \"Operation %s for address %s can only be handled by the \" +\n             \"master Domain Controller; this host is not the master Domain Controller\")\n     String masterDomainControllerOnlyOperation(String operation, PathAddress address);", "sourceBeforeFix": "id=15869", "sourceAfterFix": "id=10869"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "fixed": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttribfv(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttribiv(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "sourceBeforeFix": "GL20.glUniform3(location,v)", "sourceAfterFix": "GL20.glUniform3fv(location,v)"}
{"fixCommitSHA1": "55ed50c4975cf694828d46ee9ca32ce72a9ef913", "projectName": "clojure.clojure", "bugType": "Change Identifier Used", "problem": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 16:\r\n\t\t\treturn invoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "fixed": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 16:\r\n\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "sourceBeforeFix": "invoke(args)", "sourceAfterFix": "doInvoke(args)"}
{"fixCommitSHA1": "eba886aab5f1ca87407b53b7f3f65011caf981b3", "projectName": "neo4j.neo4j", "bugType": "Change Numeric Literal", "problem": "         Relationship ab = relationship( 17, a, \"LOVES\", b );\n         Relationship cb = relationship( 18, c, \"HATES\", b );\n        Relationship cd = relationship( 18, c, \"KNOWS\", d );\n         return new PathRepresentation<Path>(\n                 path( a, link( ab, b ), link( cb, c ), link( cd, d ) ));", "fixed": "         Relationship ab = relationship( 17, a, \"LOVES\", b );\n         Relationship cb = relationship( 18, c, \"HATES\", b );\n        Relationship cd = relationship( 19, c, \"KNOWS\", d );\n         return new PathRepresentation<Path>(\n                 path( a, link( ab, b ), link( cb, c ), link( cd, d ) ));", "sourceBeforeFix": "relationship(18,c,\"KNOWS\",d)", "sourceAfterFix": "relationship(19,c,\"KNOWS\",d)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     @ApiOperation(value = \"Create user\", notes = \"This can only be done by the logged in user.\", tags={ \"user\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Void.class) })\n    void createUser(@Valid User body);\n     @POST\n     @Path(\"/createWithArray\")", "fixed": "     @ApiOperation(value = \"Create user\", notes = \"This can only be done by the logged in user.\", tags={ \"user\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Void.class) })\n    void createUser(@Valid User body) throws Exception;\n     @POST\n     @Path(\"/createWithArray\")", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "ff567c1e12765f2707525b3e98449793cc67b325", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "     @Deprecated\n     public long getRedeliverDelay() {\n        return getRedeliverDelay();\n     }\n     @Deprecated", "fixed": "     @Deprecated\n     public long getRedeliverDelay() {\n        return getRedeliveryDelay();\n     }\n     @Deprecated", "sourceBeforeFix": "getRedeliverDelay()", "sourceAfterFix": "getRedeliveryDelay()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  private final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "22d5241b5f75631e9cfda82a6912a2555eecb165", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "     @Override\n     protected void doStop() throws Exception {\n         if (channel != null) {\n            LOG.trace(\"Terminating channel to the remote gRPC server\");\n             channel.shutdown().shutdownNow();\n             channel = null;\n             grpcStub = null;", "fixed": "     @Override\n     protected void doStop() throws Exception {\n         if (channel != null) {\n            LOG.debug(\"Terminating channel to the remote gRPC server\");\n             channel.shutdown().shutdownNow();\n             channel = null;\n             grpcStub = null;", "sourceBeforeFix": "LOG.info(\"Getting asynchronous method stub from channel\")", "sourceAfterFix": "LOG.debug(\"Getting asynchronous method stub from channel\")"}
{"fixCommitSHA1": "72754c27b271416d3c8ee7497fa7f88abff393f8", "projectName": "spring-projects.spring-boot", "bugType": "Change Modifier", "problem": " \t * @param dataSource the underlying data source\n \t * @param entityManagerFactory the entity manager factory (or {@code null})\n \t */\n\tBasicBatchConfigurer(BatchProperties properties, DataSource dataSource,\n \t\t\tEntityManagerFactory entityManagerFactory) {\n \t\tthis.properties = properties;\n \t\tthis.entityManagerFactory = entityManagerFactory;", "fixed": " \t * @param dataSource the underlying data source\n \t * @param entityManagerFactory the entity manager factory (or {@code null})\n \t */\n\tprotected BasicBatchConfigurer(BatchProperties properties, DataSource dataSource,\n \t\t\tEntityManagerFactory entityManagerFactory) {\n \t\tthis.properties = properties;\n \t\tthis.entityManagerFactory = entityManagerFactory;", "sourceBeforeFix": "0", "sourceAfterFix": "4"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "4281cc1c5d3aa51b56db9d9e251c761c52a855e3", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t * before growing the backing table. */\n \tpublic IntIntMap (int initialCapacity, float loadFactor) {\n \t\tif (initialCapacity < 0) throw new IllegalArgumentException(\"initialCapacity must be >= 0: \" + initialCapacity);\n\t\tif (capacity > 1 << 30) throw new IllegalArgumentException(\"initialCapacity is too large: \" + initialCapacity);\n \t\tcapacity = MathUtils.nextPowerOfTwo(initialCapacity);\n \t\tif (loadFactor <= 0) throw new IllegalArgumentException(\"loadFactor must be > 0: \" + loadFactor);", "fixed": " \t * before growing the backing table. */\n \tpublic IntIntMap (int initialCapacity, float loadFactor) {\n \t\tif (initialCapacity < 0) throw new IllegalArgumentException(\"initialCapacity must be >= 0: \" + initialCapacity);\n\t\tif (initialCapacity > 1 << 30) throw new IllegalArgumentException(\"initialCapacity is too large: \" + initialCapacity);\n \t\tcapacity = MathUtils.nextPowerOfTwo(initialCapacity);\n \t\tif (loadFactor <= 0) throw new IllegalArgumentException(\"loadFactor must be > 0: \" + loadFactor);", "sourceBeforeFix": "capacity > 1 << 30", "sourceAfterFix": "initialCapacity > 1 << 30"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  private final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface HazelcastInstanceEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default AdvancedHazelcastInstanceEndpointBuilder advanced() {", "fixed": "     \n    public interface HazelcastInstanceEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default AdvancedHazelcastInstanceEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  private final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public Trends getTrends() throws TwitterException {\n        return Trends.constructTrends(get(getSearchBaseURL() + \"trends.json\", false));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n      */\n     public Trends getTrends() throws TwitterException {\n        return Trends.createTrends(get(getSearchBaseURL() + \"trends.json\", false));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/public_timeline.json\",false))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/public_timeline.json\",false))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "2897c425577be5d5b3ed10ce5f01e0fcb8ba1975", "projectName": "Alluxio.alluxio", "bugType": "Change Numeric Literal", "problem": "     InodeDirectory inode2 = createInodeDirectory();\n     Assert.assertEquals(AbstractInodeTest.TEST_USER_NAME, inode2.getUserName());\n     Assert.assertEquals(AbstractInodeTest.TEST_GROUP_NAME, inode2.getGroupName());\n    Assert.assertEquals((short) 0755, inode2.getPermission());\n   }\n   /**", "fixed": "     InodeDirectory inode2 = createInodeDirectory();\n     Assert.assertEquals(AbstractInodeTest.TEST_USER_NAME, inode2.getUserName());\n     Assert.assertEquals(AbstractInodeTest.TEST_GROUP_NAME, inode2.getGroupName());\n    Assert.assertEquals((short) 0777, inode2.getPermission());\n   }\n   /**", "sourceBeforeFix": "(short)0755", "sourceAfterFix": "(short)0777"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "9b53590a89d388ca0af8b6535d5a873567b49ab4", "projectName": "naver.pinpoint", "bugType": "Change Identifier Used", "problem": "             throw new NullPointerException(\"uncollectedPointCreator must not be null\");\n         }\n         this.timeWindow = timeWindow;\n        this.uncollectedPointCreater = uncollectedPointCreator;\n     }\n     public Chart<P> build(List<P> sampledPoints) {", "fixed": "             throw new NullPointerException(\"uncollectedPointCreator must not be null\");\n         }\n         this.timeWindow = timeWindow;\n        this.uncollectedPointCreator = uncollectedPointCreator;\n     }\n     public Chart<P> build(List<P> sampledPoints) {", "sourceBeforeFix": "uncollectedPointCreater.createUnCollectedPoint(timestamp)", "sourceAfterFix": "uncollectedPointCreator.createUnCollectedPoint(timestamp)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_cn_2() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e745\u670806\u65e5\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_cn_2() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e745\u670806\u65e5\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  private final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "c5ccaee5065a52110a4124505002d6afeb7c13ca", "projectName": "netty.netty", "bugType": "Change Identifier Used", "problem": "         }\n         int readerIndex = undecodedChunk.readerIndex();\n         try {\n            StringBuilder sb = new StringBuilder(64);\n             while (sao.pos < sao.limit) {\n                 byte nextByte = sao.bytes[sao.pos++];\n                 if (nextByte == HttpConstants.CR) {", "fixed": "         }\n         int readerIndex = undecodedChunk.readerIndex();\n         try {\n            ByteBuf line = buffer(64);\n             while (sao.pos < sao.limit) {\n                 byte nextByte = sao.bytes[sao.pos++];\n                 if (nextByte == HttpConstants.CR) {", "sourceBeforeFix": "sb.toString()", "sourceAfterFix": "line.toString(charset)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "           \"functions are set.\");\n   \n  private final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "           \"functions are set.\");\n   \n  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "fixed": "   }\n   \n  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "c232dcecf1f1512e4d3c5fbe9246f7825dd42f54", "projectName": "Atmosphere.atmosphere", "bugType": "Change Binary Operator", "problem": "                 if (handler == null) {\n                    String p = path.lastIndexOf(\"/\") == 0 ? \"/\" : path.substring(0, path.lastIndexOf(\"/\"));\n                     while (p.length() > 0 && p.indexOf(\"/\") != -1) {\n                         handler = match(p, handlers);", "fixed": "                 if (handler == null) {\n                    String p = path.lastIndexOf(\"/\")  <= 0 ? \"/\" : path.substring(0, path.lastIndexOf(\"/\"));\n                     while (p.length() > 0 && p.indexOf(\"/\") != -1) {\n                         handler = match(p, handlers);", "sourceBeforeFix": "path.lastIndexOf(\"/\") == 0", "sourceAfterFix": "path.lastIndexOf(\"/\") <= 0"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15847, value = \"Interrupted waiting for result from host %s\")\n     String interruptedAwaitingResultFromHost(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10847, value = \"Interrupted waiting for result from host %s\")\n     String interruptedAwaitingResultFromHost(String name);\n     /**", "sourceBeforeFix": "id=15850", "sourceAfterFix": "id=10850"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n            statistics.addRemoveTimeNano(System.nanoTime() - start);\n             if (hitCount == 1) {\n                 statistics.increaseCacheHits(hitCount);\n             } else {", "fixed": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n            statistics.addRemoveTimeNanos(System.nanoTime() - start);\n             if (hitCount == 1) {\n                 statistics.increaseCacheHits(hitCount);\n             } else {", "sourceBeforeFix": "statistics.addRemoveTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addRemoveTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15852, value = \"Caught %s storing deployment content -- %s\")\n     String caughtExceptionStoringDeploymentContent(String exceptionName, Throwable exception);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10852, value = \"Caught %s storing deployment content -- %s\")\n     String caughtExceptionStoringDeploymentContent(String exceptionName, Throwable exception);\n     /**", "sourceBeforeFix": "id=15860", "sourceAfterFix": "id=10860"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedMailEndpointBuilder\n             extends\n                 AdvancedMailEndpointConsumerBuilder, AdvancedMailEndpointProducerBuilder {\n         default MailEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedMailEndpointBuilder\n             extends\n                 AdvancedMailEndpointConsumerBuilder, AdvancedMailEndpointProducerBuilder {\n         default MailEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15849, value = \"Operation %s for address %s can only be handled by the \" +\n             \"master Domain Controller; this host is not the master Domain Controller\")\n     String masterDomainControllerOnlyOperation(String operation, PathAddress address);", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10849, value = \"Operation %s for address %s can only be handled by the \" +\n             \"master Domain Controller; this host is not the master Domain Controller\")\n     String masterDomainControllerOnlyOperation(String operation, PathAddress address);", "sourceBeforeFix": "id=15867", "sourceAfterFix": "id=10867"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r", "fixed": " \t}\r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r", "sourceBeforeFix": "GL20.glGetShader(shader,pname,params)", "sourceAfterFix": "GL20.glGetShaderiv(shader,pname,params)"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t */\n \t@Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)\n\tpublic SortedMap<String, String> getSystemVariables() throws APIException;\n \t/**\n \t * Get a map of all the System Information. Java, user, time, runtime properties, etc", "fixed": " \t */\n \t@Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)\n\tpublic SortedMap<String, String> getSystemVariables();\n \t/**\n \t * Get a map of all the System Information. Java, user, time, runtime properties, etc", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "ea98386dfd18da047c877a2320cfdcf15df2ea06", "projectName": "facebook.presto", "bugType": "Change Modifier", "problem": "         return defineClass(classDefinition, PagesHashStrategy.class, callSiteBinder.getBindings(), getClass().getClassLoader());\n     }\n    private void generateConstructor(ClassDefinition classDefinition,\n             List<Integer> joinChannels,\n             FieldDefinition sizeField,\n             List<FieldDefinition> channelFields,", "fixed": "         return defineClass(classDefinition, PagesHashStrategy.class, callSiteBinder.getBindings(), getClass().getClassLoader());\n     }\n    private static void generateConstructor(ClassDefinition classDefinition,\n             List<Integer> joinChannels,\n             FieldDefinition sizeField,\n             List<FieldDefinition> channelFields,", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 15866, value = \"%s is null\")\n     IllegalArgumentException nullVar(String name);\n     /**", "fixed": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 10866, value = \"%s is null\")\n     IllegalArgumentException nullVar(String name);\n     /**", "sourceBeforeFix": "id=15842", "sourceAfterFix": "id=10842"}
{"fixCommitSHA1": "204c2156da54922cb0bfc9d944036e3503056a2f", "projectName": "pardom.ActiveAndroid", "bugType": "Change Identifier Used", "problem": " \t\tfinal Class<?> type = field.getType();\n \t\tfinal String name = tableInfo.getColumnName(field);\n\t\tfinal TypeSerializer typeSerializer = Cache.getParserForType(tableInfo.getType());\n \t\tfinal Column column = field.getAnnotation(Column.class);\n \t\tif (typeSerializer != null) {", "fixed": " \t\tfinal Class<?> type = field.getType();\n \t\tfinal String name = tableInfo.getColumnName(field);\n\t\tfinal TypeSerializer typeSerializer = Cache.getParserForType(field.getType());\n \t\tfinal Column column = field.getAnnotation(Column.class);\n \t\tif (typeSerializer != null) {", "sourceBeforeFix": "tableInfo.getType()", "sourceAfterFix": "field.getType()"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedGlanceEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default GlanceEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedGlanceEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default GlanceEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "cc590a263a42e0c624efcc8bcb8d0729f14b7e27", "projectName": "apache.storm", "bugType": "Same Function More Args", "problem": "         bolt.execute(tickTuple);\n        verify(collector).ack(tickTuple);\n     }\n     @Test", "fixed": "         bolt.execute(tickTuple);\n        verify(collector, never()).ack(tickTuple);\n     }\n     @Test", "sourceBeforeFix": "verify(collector)", "sourceAfterFix": "verify(collector,never())"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetProgramiv (int program, int pname, IntBuffer params) {\r\n\t\tGL20.glGetProgram(program, pname, params);\r\n \t}\r\n \tpublic void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tEXTFramebufferObject.glGetRenderbufferParameterEXT(target, pname, params);\r\n \t}\r\n \tpublic String glGetShaderInfoLog (int shader) {\r", "fixed": " \t}\r\n \tpublic void glGetProgramiv (int program, int pname, IntBuffer params) {\r\n\t\tGL20.glGetProgramiv(program, pname, params);\r\n \t}\r\n \tpublic void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tEXTFramebufferObject.glGetRenderbufferParameterivEXT(target, pname, params);\r\n \t}\r\n \tpublic String glGetShaderInfoLog (int shader) {\r", "sourceBeforeFix": "GL20.glUniformMatrix4(location,transpose,toFloatBuffer(value,offset,count << 4))", "sourceAfterFix": "GL20.glUniformMatrix4fv(location,transpose,toFloatBuffer(value,offset,count << 4))"}
{"fixCommitSHA1": "01fec049c0fb6b1c326d802687f3093b502123e0", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": " \t\t\tSchedulerUtil.startup(getRuntimeProperties());\r\n \t\t}\r\n\t\tcatch (Throwable t) {\r\n \t\t\tContext.shutdown();\r\n \t\t\tWebModuleUtil.shutdownModules(servletContext);\r\n \t\t\tthrow new ServletException(t);\r", "fixed": " \t\t\tSchedulerUtil.startup(getRuntimeProperties());\r\n \t\t}\r\n\t\tcatch (Exception t) {\r\n \t\t\tContext.shutdown();\r\n \t\t\tWebModuleUtil.shutdownModules(servletContext);\r\n \t\t\tthrow new ServletException(t);\r", "sourceBeforeFix": "Throwable e", "sourceAfterFix": "Exception e"}
{"fixCommitSHA1": "32d470c4e3edba4b399ae18bdcb9e09592e3cc14", "projectName": "libgdx.libgdx", "bugType": "Same Function More Args", "problem": " \t\tios.cFlags += \" -DFT2_BUILD_LIBRARY\";\r\n \t\tios.cppFlags += \" -DFT2_BUILD_LIBRARY\";\r\n\t\tnew NativeCodeGenerator().generate();\r\n \t\tnew AntScriptGenerator()\r\n \t\t\t.generate(new BuildConfig(\"gdx-freetype\"), win32home, win32, win64, lin32, lin64, mac, mac64, android, ios);\r", "fixed": " \t\tios.cFlags += \" -DFT2_BUILD_LIBRARY\";\r\n \t\tios.cppFlags += \" -DFT2_BUILD_LIBRARY\";\r\n\t\tnew NativeCodeGenerator().generate(\"src\", \"bin:../../gdx/bin\", \"jni\");\r\n \t\tnew AntScriptGenerator()\r\n \t\t\t.generate(new BuildConfig(\"gdx-freetype\"), win32home, win32, win64, lin32, lin64, mac, mac64, android, ios);\r", "sourceBeforeFix": "new NativeCodeGenerator().generate()", "sourceAfterFix": "new NativeCodeGenerator().generate(\"src\",\"bin:../../gdx/bin\",\"jni\")"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleActionsPredicatesOptions_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(247);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {System.out.println($ctx.toStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");", "fixed": " \tpublic void testMultipleActionsPredicatesOptions_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {System.out.println($ctx.toStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");", "sourceBeforeFix": "new StringBuilder(730)", "sourceAfterFix": "new StringBuilder(729)"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStream<OUT> writeAsCsv(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsCsv<OUT> format, long millis, OUT endTuple) {\n\t\tDataStream<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByMillis<OUT>(\n \t\t\t\tpath, format, millis, endTuple));\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "fixed": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStreamSink<OUT> writeAsCsv(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsCsv<OUT> format, long millis, OUT endTuple) {\n\t\tDataStreamSink<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByMillis<OUT>(\n \t\t\t\tpath, format, millis, endTuple));\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "c4ffe721c786c54074a6913cb889d46e83bb32c1", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t\t\t\tthrows BeansException {\n \t\t\tif (bean.getClass().isAssignableFrom(JmsTemplate.class)) {\n \t\t\t\tJmsTemplate jmsTemplate = (JmsTemplate) bean;\n\t\t\t\tjmsTemplate.setPubSubDomain(false);\n \t\t\t}\n \t\t\treturn bean;\n \t\t}", "fixed": " \t\t\t\tthrows BeansException {\n \t\t\tif (bean.getClass().isAssignableFrom(JmsTemplate.class)) {\n \t\t\t\tJmsTemplate jmsTemplate = (JmsTemplate) bean;\n\t\t\t\tjmsTemplate.setPubSubDomain(true);\n \t\t\t}\n \t\t\treturn bean;\n \t\t}", "sourceBeforeFix": "assertFalse(jmsTemplate.isPubSubDomain())", "sourceAfterFix": "assertTrue(jmsTemplate.isPubSubDomain())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  private final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "2", "sourceAfterFix": "0"}
{"fixCommitSHA1": "d33a3d853e6465ec8985d1a1b36b7d64f066c130", "projectName": "openhab.openhab", "bugType": "Change Identifier Used", "problem": " \t\t\tif (bindingConfig.getAction() == BindingAction.RELOAD_VARIABLES) {\n \t\t\t\tstateHolder.reloadVariables();\n \t\t\t} else if (bindingConfig.getAction() == BindingAction.RELOAD_DATAPOINTS) {\n\t\t\t\tstateHolder.reloadVariables();\n \t\t\t} else {\n \t\t\t\tlogger.warn(\"Unknown action {}\", bindingConfig.getAction());\n \t\t\t}", "fixed": " \t\t\tif (bindingConfig.getAction() == BindingAction.RELOAD_VARIABLES) {\n \t\t\t\tstateHolder.reloadVariables();\n \t\t\t} else if (bindingConfig.getAction() == BindingAction.RELOAD_DATAPOINTS) {\n\t\t\t\tstateHolder.reloadDatapoints();\n \t\t\t} else {\n \t\t\t\tlogger.warn(\"Unknown action {}\", bindingConfig.getAction());\n \t\t\t}", "sourceBeforeFix": "stateHolder.reloadVariables()", "sourceAfterFix": "stateHolder.reloadDatapoints()"}
{"fixCommitSHA1": "2921e7bf0d74a65fdcc71d3ce3053037d14e4d44", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "     private void handleAtomicNumberSet(String[] args) {\n         long v = 0;\n         if (args.length > 1) {\n            v = Long.valueOf(args[1]);\n         }\n         getAtomicNumber().set(v);\n         println(getAtomicNumber().get());", "fixed": "     private void handleAtomicNumberSet(String[] args) {\n         long v = 0;\n         if (args.length > 1) {\n            v = Long.parseLong(args[1]);\n         }\n         getAtomicNumber().set(v);\n         println(getAtomicNumber().get());", "sourceBeforeFix": "Long.valueOf(args[1])", "sourceAfterFix": "Long.parseLong(args[1])"}
{"fixCommitSHA1": "8a9e1bcbff1ff10cf122b23b3a1aa437f02a2086", "projectName": "gephi.gephi", "bugType": "Change Unary Operator\t", "problem": "         org.gephi.graph.api.TextData sourceEdgeTextData = sourceEdgeData.getTextData();\n         String label = sourceEdgeData.getLabel();\n        if (sourceEdgeTextData != null && sourceEdgeTextData.getText() != null && sourceEdgeTextData.getText().isEmpty() && sourceEdgeTextData.isVisible()) {\n             label = sourceEdgeTextData.getText();\n         } else if (sourceEdgeTextData != null && !sourceEdgeTextData.isVisible()) {\n             label = null;", "fixed": "         org.gephi.graph.api.TextData sourceEdgeTextData = sourceEdgeData.getTextData();\n         String label = sourceEdgeData.getLabel();\n        if (sourceEdgeTextData != null && sourceEdgeTextData.getText() != null && !sourceEdgeTextData.getText().isEmpty() && sourceEdgeTextData.isVisible()) {\n             label = sourceEdgeTextData.getText();\n         } else if (sourceEdgeTextData != null && !sourceEdgeTextData.isVisible()) {\n             label = null;", "sourceBeforeFix": "sourceEdgeTextData.getText().isEmpty()", "sourceAfterFix": "!sourceEdgeTextData.getText().isEmpty()"}
{"fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "projectName": "Alluxio.alluxio", "bugType": "Change Operand ", "problem": "         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n            file = new RandomAccessFile(FOLDER + (mWorkerId + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());", "fixed": "         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n            file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "68e2bde0e098378e60387fa1de6fbecd26fcb9b6", "projectName": "hazelcast.hazelcast", "bugType": "Same Function More Args", "problem": "                 mapInitialLoadInfo.put(name, recordStore.isLoaded());\n             }\n            Set<RecordReplicationInfo> recordSet = new HashSet<RecordReplicationInfo>();\n             for (Entry<Data, Record> recordEntry : recordStore.getReadonlyRecordMap().entrySet()) {\n                 Data key = recordEntry.getKey();\n                 Record record = recordEntry.getValue();", "fixed": "                 mapInitialLoadInfo.put(name, recordStore.isLoaded());\n             }\n            Set<RecordReplicationInfo> recordSet = new HashSet<RecordReplicationInfo>(recordStore.size());\n             for (Entry<Data, Record> recordEntry : recordStore.getReadonlyRecordMap().entrySet()) {\n                 Data key = recordEntry.getKey();\n                 Record record = recordEntry.getValue();", "sourceBeforeFix": "new HashSet<RecordReplicationInfo>()", "sourceAfterFix": "new HashSet<RecordReplicationInfo>(recordStore.size())"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public List<SavedSearch> getSavedSearches() throws TwitterException {\n        return SavedSearch.constructSavedSearches(get(getBaseURL() + \"saved_searches.json\", true));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n      */\n     public List<SavedSearch> getSavedSearches() throws TwitterException {\n        return SavedSearch.createSavedSearchList(get(getBaseURL() + \"saved_searches.json\", true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_to_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_to_me.json\",null,true))"}
{"fixCommitSHA1": "e376b7be0a40adaba56bbefce50c3f0930a9475c", "projectName": "gephi.gephi", "bugType": "Change Modifier", "problem": "         }\n     }\n    public AttributeModel getModel() {\n         Workspace workspace = projectController.getCurrentWorkspace();\n         if (workspace != null) {\n             AttributeModel model = workspace.getLookup().lookup(AttributeModel.class);", "fixed": "         }\n     }\n    public synchronized AttributeModel getModel() {\n         Workspace workspace = projectController.getCurrentWorkspace();\n         if (workspace != null) {\n             AttributeModel model = workspace.getLookup().lookup(AttributeModel.class);", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "d222fc981c938bd3543ee61f22422d20efcdcd94", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         String uri = getScpUri() + \"?username=admin&password=admin&knownHostsFile=\" + getKnownHostsFile();\n         template.sendBodyAndHeader(uri, \"Hello World\", Exchange.FILE_NAME, \"hello.txt\");\n        Thread.sleep(500);\n         File file = new File(getScpPath() + \"/hello.txt\");\n         assertFileExists(file.getAbsolutePath());", "fixed": "         String uri = getScpUri() + \"?username=admin&password=admin&knownHostsFile=\" + getKnownHostsFile();\n         template.sendBodyAndHeader(uri, \"Hello World\", Exchange.FILE_NAME, \"hello.txt\");\n        Thread.sleep(800);\n         File file = new File(getScpPath() + \"/hello.txt\");\n         assertFileExists(file.getAbsolutePath());", "sourceBeforeFix": "Thread.sleep(500)", "sourceAfterFix": "Thread.sleep(800)"}
{"fixCommitSHA1": "3f21dcd0eb97b3b7c4847c913b0955e391192245", "projectName": "xetorthio.jedis", "bugType": "Change Binary Operator", "problem": "                 buf[count++] = ((byte)(0x80 | ((uc >> 6) & 0x3f)));\n                 buf[count++] = ((byte)(0x80 | (uc & 0x3f)));\n             } else {\n                if(3 < buf.length - count) {\n                     flushBuffer();\n                 }\n                 buf[count++] =((byte)(0xe0 | ((c >> 12))));", "fixed": "                 buf[count++] = ((byte)(0x80 | ((uc >> 6) & 0x3f)));\n                 buf[count++] = ((byte)(0x80 | (uc & 0x3f)));\n             } else {\n                if(3 >= buf.length - count) {\n                     flushBuffer();\n                 }\n                 buf[count++] =((byte)(0xe0 | ((c >> 12))));", "sourceBeforeFix": "2 < buf.length - count", "sourceAfterFix": "2 >= buf.length - count"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15864, value = \"Error obtaining input stream from URL %s -- %s\")\n     String errorObtainingUrlStream(String url, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10864, value = \"Error obtaining input stream from URL %s -- %s\")\n     String errorObtainingUrlStream(String url, String message);\n     /**", "sourceBeforeFix": "id=15846", "sourceAfterFix": "id=10846"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetsOfMe() throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweets_of_me.json\",\n                 null, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetsOfMe() throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweets_of_me.json\",\n                 null, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))"}
{"fixCommitSHA1": "f8c20919f9c2e18e48142c2712e34298f98b983e", "projectName": "spring-projects.spring-boot", "bugType": "Wrong Function Name", "problem": " \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tfinal Date[] date = new Date[1];\n \t\tthis.container = factory\n\t\t\t\t.getEmbdeddedServletContainer(new ServletContextInitializer() {\n \t\t\t\t\t@Override\n \t\t\t\t\tpublic void onStartup(ServletContext servletContext)\n \t\t\t\t\t\t\tthrows ServletException {", "fixed": " \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tfinal Date[] date = new Date[1];\n \t\tthis.container = factory\n\t\t\t\t.getEmbeddedServletContainer(new ServletContextInitializer() {\n \t\t\t\t\t@Override\n \t\t\t\t\tpublic void onStartup(ServletContext servletContext)\n \t\t\t\t\t\t\tthrows ServletException {", "sourceBeforeFix": "factory.getEmbdeddedServletContainer()", "sourceAfterFix": "factory.getEmbeddedServletContainer()"}
{"fixCommitSHA1": "89b4aa976ee9aa4ccf8c404bdcd7b9e32dfb4c3e", "projectName": "wildfly.wildfly", "bugType": "Change Caller in Function Call", "problem": "                         AuthorizationResult ar = context.authorize(rrOp, EnumSet.of(Action.ActionEffect.ADDRESS));\n                         if (ar.getDecision() == AuthorizationResult.Decision.DENY) {\n                            filteredData.addAccessRestrictedResource(absoluteChildAddr);\n                         } else {\n                             ModelNode childMap = directChildren.get(childType);\n                             if (childMap == null) {", "fixed": "                         AuthorizationResult ar = context.authorize(rrOp, EnumSet.of(Action.ActionEffect.ADDRESS));\n                         if (ar.getDecision() == AuthorizationResult.Decision.DENY) {\n                            localFilteredData.addAccessRestrictedResource(absoluteChildAddr);\n                         } else {\n                             ModelNode childMap = directChildren.get(childType);\n                             if (childMap == null) {", "sourceBeforeFix": "filteredData.addAccessRestrictedResource(absoluteChildAddr)", "sourceAfterFix": "localFilteredData.addAccessRestrictedResource(absoluteChildAddr)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "fixed": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "sourceBeforeFix": "GL11.glTexParameter(target,pname,params)", "sourceAfterFix": "GL11.glTexParameteriv(target,pname,params)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "fixed": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "sourceBeforeFix": "GL20.glGetVertexAttrib(index,pname,params)", "sourceAfterFix": "GL20.glGetVertexAttribiv(index,pname,params)"}
{"fixCommitSHA1": "7926d45bf0b4b2877603d033a70f089324af4696", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "         @Override\n         protected void doStop() throws Exception {\n            counter.incrementAndGet();\n         }\n     }", "fixed": "         @Override\n         protected void doStop() throws Exception {\n            COUNTER.incrementAndGet();\n         }\n     }", "sourceBeforeFix": "2", "sourceAfterFix": "18"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15859, value = \"A slave domain controller cannot accept deployment content uploads\")\n     String slaveCannotAcceptUploads();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10859, value = \"A slave domain controller cannot accept deployment content uploads\")\n     String slaveCannotAcceptUploads();\n     /**", "sourceBeforeFix": "id=15838", "sourceAfterFix": "id=10838"}
{"fixCommitSHA1": "e04cbbf23e9273cca31b1cc12142e34fae753542", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "          *  Is class declared as final.\n          *  @return true if class is declared as final\n          */\n        boolean isDeclaredAsFinal() {\n             return declaredAsFinal;\n         }", "fixed": "          *  Is class declared as final.\n          *  @return true if class is declared as final\n          */\n        private boolean isDeclaredAsFinal() {\n             return declaredAsFinal;\n         }", "sourceBeforeFix": "0", "sourceAfterFix": "2"}
{"fixCommitSHA1": "c2023397cf81452d755a5401fe95b1d47dbde48a", "projectName": "scribejava.scribejava", "bugType": "Same Function Swap Args", "problem": "                 .protocol(Protocol.HTTP_1_1)\n                 .code(200)\n                 .message(\"ok\")\n                .body(ResponseBody.create(MediaType.get(\"text/plain\"), new byte[0]))\n                 .build();\n         handler.onResponse(call, response);\n         assertNotNull(callback.getResponse());", "fixed": "                 .protocol(Protocol.HTTP_1_1)\n                 .code(200)\n                 .message(\"ok\")\n                .body(ResponseBody.create(new byte[0], MediaType.get(\"text/plain\")))\n                 .build();\n         handler.onResponse(call, response);\n         assertNotNull(callback.getResponse());", "sourceBeforeFix": "ResponseBody.create(MediaType.get(\"text/plain\"),new byte[0])", "sourceAfterFix": "ResponseBody.create(new byte[0],MediaType.get(\"text/plain\"))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "9467bef8ea9a62658b32dd43a76f4f98087d1986", "projectName": "apache.hadoop", "bugType": "Change Unary Operator\t", "problem": "         command = new CreateCommand(keyName, options);\n         if (\"--help\".equals(keyName)) {\n           printKeyShellUsage();\n          return -1;\n         }\n       } else if (args[i].equals(\"delete\")) {\n         String keyName = \"--help\";", "fixed": "         command = new CreateCommand(keyName, options);\n         if (\"--help\".equals(keyName)) {\n           printKeyShellUsage();\n          return 1;\n         }\n       } else if (args[i].equals(\"delete\")) {\n         String keyName = \"--help\";", "sourceBeforeFix": "-1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "                 cacheRecordStore.updateRecordWithExpiry(keyData, value, record, expiryPolicy, now, false);\n                 if (isStatisticsEnabled) {\n                     statistics.increaseCachePuts(1);\n                    statistics.addGetTimeNano(System.nanoTime() - start);\n                 }\n                 break;\n             case REMOVE:", "fixed": "                 cacheRecordStore.updateRecordWithExpiry(keyData, value, record, expiryPolicy, now, false);\n                 if (isStatisticsEnabled) {\n                     statistics.increaseCachePuts(1);\n                    statistics.addGetTimeNanos(System.nanoTime() - start);\n                 }\n                 break;\n             case REMOVE:", "sourceBeforeFix": "statistics.addGetTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addGetTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface JooqEndpointBuilder\n             extends\n                 JooqEndpointConsumerBuilder, JooqEndpointProducerBuilder {\n         default AdvancedJooqEndpointBuilder advanced() {", "fixed": "     \n    public interface JooqEndpointBuilder\n             extends\n                 JooqEndpointConsumerBuilder, JooqEndpointProducerBuilder {\n         default AdvancedJooqEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "9716d2ae673a576cb345c3bfb24cf71654d8f112", "projectName": "openhab.openhab", "bugType": "Change Identifier Used", "problem": " \t */\n \tprivate void poll() {\n \t\tif (invalidCredentials || this.myqOnlineData == null) {\n\t\t\tlogger.debug(\"Invalid Account Credentials\");\n \t\t\treturn;\n \t\t}", "fixed": " \t */\n \tprivate void poll() {\n \t\tif (invalidCredentials || this.myqOnlineData == null) {\n\t\t\tlogger.trace(\"Invalid Account Credentials\");\n \t\t\treturn;\n \t\t}", "sourceBeforeFix": "logger.debug(\"rapidRefreshFuture scheduleing for {} millis\",millis)", "sourceAfterFix": "logger.trace(\"rapidRefreshFuture scheduleing for {} millis\",millis)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedOptaPlannerEndpointBuilder\n             extends\n                 AdvancedOptaPlannerEndpointConsumerBuilder, AdvancedOptaPlannerEndpointProducerBuilder {\n         default OptaPlannerEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedOptaPlannerEndpointBuilder\n             extends\n                 AdvancedOptaPlannerEndpointConsumerBuilder, AdvancedOptaPlannerEndpointProducerBuilder {\n         default OptaPlannerEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "6e4e6d32757138712bcba38d7ab1ed8ae97cdcb5", "projectName": "apache.hive", "bugType": "Change Identifier Used", "problem": "     @Override\n     public StructField getStructFieldRef(String s) {\n       for(StructField field: fields) {\n        if (field.getFieldName().equals(s)) {\n           return field;\n         }\n       }", "fixed": "     @Override\n     public StructField getStructFieldRef(String s) {\n       for(StructField field: fields) {\n        if (field.getFieldName().equalsIgnoreCase(s)) {\n           return field;\n         }\n       }", "sourceBeforeFix": "field.getFieldName().equals(s)", "sourceAfterFix": "field.getFieldName().equalsIgnoreCase(s)"}
{"fixCommitSHA1": "67a60e1cfca7bd24617ba7a1015d2b48219befb1", "projectName": "apache.camel", "bugType": "More Specific If", "problem": "         if (includeTokens != null) {\n             language.setIncludeTokens(includeTokens);\n         }\n        if (group != null) {\n             language.setGroup(group);\n         }\n         if (skipFirst != null) {", "fixed": "         if (includeTokens != null) {\n             language.setIncludeTokens(includeTokens);\n         }\n        if (group != null && !\"0\".equals(group)) {\n             language.setGroup(group);\n         }\n         if (skipFirst != null) {", "sourceBeforeFix": "group != null", "sourceAfterFix": "group != null && !\"0\".equals(group)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShader(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "fixed": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShaderiv(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "sourceBeforeFix": "GL20.glUniform4(location,v)", "sourceAfterFix": "GL20.glUniform4iv(location,v)"}
{"fixCommitSHA1": "1daccd54d2ff2ecdb21d8c60268600c37febbb70", "projectName": "Alluxio.alluxio", "bugType": "Change Operand ", "problem": "       if (mWrite) {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n           OutputStream os = mHdfsFs.create(new Path(filePath));\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n            mBuf.array()[0] = (byte) (k + mWorkerId);\n             os.write(mBuf.array());\n           }\n           os.close();", "fixed": "       if (mWrite) {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           OutputStream os = mHdfsFs.create(new Path(filePath));\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n            mBuf.putInt(0, k + mWorkerId);\n             os.write(mBuf.array());\n           }\n           os.close();", "sourceBeforeFix": "k < THREADS", "sourceAfterFix": "k < FILES"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsText(String path, long millis) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), millis, null);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsText(String path, long millis) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), millis, null);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "cadd7d58548bdf3287bc1c2c1c148a202db7319e", "projectName": "brianfrankcooper.YCSB", "bugType": "Wrong Function Name", "problem": "           measurements.get((int)(totalOps*0.9999)).value());\n     }\n    exportReturnCodes(exporter);\n   }\n   @Override", "fixed": "           measurements.get((int)(totalOps*0.9999)).value());\n     }\n    exportStatusCounts(exporter);\n   }\n   @Override", "sourceBeforeFix": "exportReturnCodes(exporter)", "sourceAfterFix": "exportStatusCounts(exporter)"}
{"fixCommitSHA1": "2f880c73edb600ab92cdd580ac74f7388b5c6135", "projectName": "Alluxio.alluxio", "bugType": "Change Modifier", "problem": "     }\n   }\n  public void updateRawTableMetadata(int tableId, ByteBuffer metadata) {\n     if (INACTIVE) {\n       return;\n     }", "fixed": "     }\n   }\n  public synchronized void updateRawTableMetadata(int tableId, ByteBuffer metadata) {\n     if (INACTIVE) {\n       return;\n     }", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      * @param servers the servers that need to restart.\n      */\n     @LogMessage(level = Level.INFO)\n    @Message(id = 15807, value = \"Domain model has changed on re-connect. The following servers will need to be restarted for changes to take affect: %s\")\n     void domainModelChangedOnReConnect(Set<ServerIdentity> servers);\n     /**", "fixed": "      * @param servers the servers that need to restart.\n      */\n     @LogMessage(level = Level.INFO)\n    @Message(id = 10807, value = \"Domain model has changed on re-connect. The following servers will need to be restarted for changes to take affect: %s\")\n     void domainModelChangedOnReConnect(Set<ServerIdentity> servers);\n     /**", "sourceBeforeFix": "id=15806", "sourceAfterFix": "id=10806"}
{"fixCommitSHA1": "ccbc0a97414992cb1b7d84a2283d2aaa7278f3a5", "projectName": "Atmosphere.atmosphere", "bugType": "Change Numeric Literal", "problem": "     @Override\n     protected void onSocketClosed(WebSocket socket) throws IOException {\n         logger.trace(\"WebSocket.onSocketClosed.\");\n        webSocketProcessor.close(webSocket, 0);\n     }\n     @Override", "fixed": "     @Override\n     protected void onSocketClosed(WebSocket socket) throws IOException {\n         logger.trace(\"WebSocket.onSocketClosed.\");\n        webSocketProcessor.close(webSocket, 1000);\n     }\n     @Override", "sourceBeforeFix": "webSocketProcessor.close(webSocket,0)", "sourceAfterFix": "webSocketProcessor.close(webSocket,1000)"}
{"fixCommitSHA1": "2f77b4e6a3f1ab8bd855476a15a4ab2f6f7ae32c", "projectName": "neo4j.neo4j", "bugType": "Wrong Function Name", "problem": "         \t\t\"RETURN file.name, dir.name, role.name, readUser.name\";\n         gen.get().addSnippet( \"query3\", createCypherSnippet( query ) );\n         result = engine.execute( query )\n                .toString();\n         assertTrue( result.contains(\"File1\") );\n         assertTrue( result.contains(\"File2\") );\n         assertTrue( result.contains(\"Admin1\") );", "fixed": "         \t\t\"RETURN file.name, dir.name, role.name, readUser.name\";\n         gen.get().addSnippet( \"query3\", createCypherSnippet( query ) );\n         result = engine.execute( query )\n                .dumpToString();\n         assertTrue( result.contains(\"File1\") );\n         assertTrue( result.contains(\"File2\") );\n         assertTrue( result.contains(\"Admin1\") );", "sourceBeforeFix": "engine.execute(query).toString()", "sourceAfterFix": "engine.execute(query).dumpToString()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15845, value = \"Invalid rollout plan. Server group %s has a %s value of %s; must be between 0 and 100.\")\n     String invalidRolloutPlanRange(String name, String propertyName, int value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10845, value = \"Invalid rollout plan. Server group %s has a %s value of %s; must be between 0 and 100.\")\n     String invalidRolloutPlanRange(String name, String propertyName, int value);\n     /**", "sourceBeforeFix": "id=15849", "sourceAfterFix": "id=10849"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_cn_3() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e7405\u67086\u65e5\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_cn_3() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e7405\u67086\u65e5\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "4b484774d8da196c30b41d0d20c0274276c94498", "projectName": "neo4j.neo4j", "bugType": "Change Identifier Used", "problem": "     public GraphDatabaseService newHighlyAvailableDatabase( String path )\n     {\n        return newEmbeddedDatabaseBuilder( path ).newGraphDatabase();\n     }\n     public GraphDatabaseBuilder newHighlyAvailableDatabaseBuilder( final String path )", "fixed": "     public GraphDatabaseService newHighlyAvailableDatabase( String path )\n     {\n        return newHighlyAvailableDatabaseBuilder( path ).newGraphDatabase();\n     }\n     public GraphDatabaseBuilder newHighlyAvailableDatabaseBuilder( final String path )", "sourceBeforeFix": "newEmbeddedDatabaseBuilder(path)", "sourceAfterFix": "newHighlyAvailableDatabaseBuilder(path)"}
{"fixCommitSHA1": "cb84b2788aeed6aad2bc4b1acb98290e060861e2", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "       Assert.assertEquals(1, result.size());\n       hbck.assigns(Arrays.asList(result.keySet().toArray(new String[0])).stream()\n           .map(regionName -> regionName.split(\"\\\\.\")[1]).collect(Collectors.toList()));\n      ProcedureTestingUtility.waitNoProcedureRunning(master.getMasterProcedureExecutor());\n       result = hbck.getFailedSplitMergeLegacyRegions(Arrays.asList(TableName.valueOf(testTable)));\n       Assert.assertEquals(0, result.size());", "fixed": "       Assert.assertEquals(1, result.size());\n       hbck.assigns(Arrays.asList(result.keySet().toArray(new String[0])).stream()\n           .map(regionName -> regionName.split(\"\\\\.\")[1]).collect(Collectors.toList()));\n      ProcedureTestingUtility.waitAllProcedures(master.getMasterProcedureExecutor());\n       result = hbck.getFailedSplitMergeLegacyRegions(Arrays.asList(TableName.valueOf(testTable)));\n       Assert.assertEquals(0, result.size());", "sourceBeforeFix": "ProcedureTestingUtility.waitNoProcedureRunning(master.getMasterProcedureExecutor())", "sourceAfterFix": "ProcedureTestingUtility.waitAllProcedures(master.getMasterProcedureExecutor())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e9e5a477895f240f4c62285364ba3877c34ff1cb", "projectName": "Graylog2.graylog2-server", "bugType": "Change Identifier Used", "problem": "     }\n     public void delete(Node node, Input input, String extractorId) throws IOException, APIException {\n        api.path(resource.terminate(input.getId(), extractorId))\n                 .node(node)\n                 .expect(Http.Status.NO_CONTENT)\n                 .execute();", "fixed": "     }\n     public void delete(Node node, Input input, String extractorId) throws IOException, APIException {\n        api.path(resource.removeExtractor(input.getId(), extractorId))\n                 .node(node)\n                 .expect(Http.Status.NO_CONTENT)\n                 .execute();", "sourceBeforeFix": "resource.terminate(input.getId(),extractorId)", "sourceAfterFix": "resource.removeExtractor(input.getId(),extractorId)"}
{"fixCommitSHA1": "0cb756acf8ee44c28bee8b9ea626e2a65cee5880", "projectName": "google.guava", "bugType": "Change Caller in Function Call", "problem": "     ByteBuffer bigEndian = ByteBuffer.wrap(bytes).order(ByteOrder.BIG_ENDIAN);\n     assertEquals(\n         hashFunction.newHasher().putBytes(littleEndian).hash(),\n        hashFunction.newHasher().putBytes(littleEndian).hash());\n     assertEquals(ByteOrder.LITTLE_ENDIAN, littleEndian.order());\n    assertEquals(ByteOrder.BIG_ENDIAN, littleEndian.order());\n   }\n   static void assertHashBytesThrowsCorrectExceptions(HashFunction hashFunction) {", "fixed": "     ByteBuffer bigEndian = ByteBuffer.wrap(bytes).order(ByteOrder.BIG_ENDIAN);\n     assertEquals(\n         hashFunction.newHasher().putBytes(littleEndian).hash(),\n        hashFunction.newHasher().putBytes(bigEndian).hash());\n     assertEquals(ByteOrder.LITTLE_ENDIAN, littleEndian.order());\n    assertEquals(ByteOrder.BIG_ENDIAN, bigEndian.order());\n   }\n   static void assertHashBytesThrowsCorrectExceptions(HashFunction hashFunction) {", "sourceBeforeFix": "littleEndian.order()", "sourceAfterFix": "bigEndian.order()"}
{"fixCommitSHA1": "6031e948694c50252def3e1df5a65323567e03ed", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "         super.compare(modelA, modelB);\n        assertRemoveSubsystemResources(servicesA);\n     }", "fixed": "         super.compare(modelA, modelB);\n        assertRemoveSubsystemResources(servicesB);\n     }", "sourceBeforeFix": "assertRemoveSubsystemResources(servicesA)", "sourceAfterFix": "assertRemoveSubsystemResources(servicesB)"}
{"fixCommitSHA1": "2b6d45508192c28f6b957a1ec18eb4fc075f9a97", "projectName": "Alluxio.alluxio", "bugType": "Same Function Swap Args", "problem": "     InetSocketAddress workerAddress = BlockWorkerUtils.getWorkerAddress(mCustomPropsTachyonConf);\n     Assert.assertNotNull(workerAddress);\n    Assert.assertEquals(workerAddress, new InetSocketAddress(defaultHostname, 10001));\n     workerAddress = BlockWorkerUtils.getWorkerAddress(mNullTachyonConf);\n     Assert.assertNotNull(workerAddress);\n    Assert.assertEquals(workerAddress, new InetSocketAddress(defaultHostname, defaultPort));\n   }\n }", "fixed": "     InetSocketAddress workerAddress = BlockWorkerUtils.getWorkerAddress(mCustomPropsTachyonConf);\n     Assert.assertNotNull(workerAddress);\n    Assert.assertEquals(new InetSocketAddress(defaultHostname, 10001), workerAddress);\n     workerAddress = BlockWorkerUtils.getWorkerAddress(mNullTachyonConf);\n     Assert.assertNotNull(workerAddress);\n    Assert.assertEquals(new InetSocketAddress(defaultHostname, defaultPort), workerAddress);\n   }\n }", "sourceBeforeFix": "Assert.assertEquals(workerAddress,new InetSocketAddress(defaultHostname,defaultPort))", "sourceAfterFix": "Assert.assertEquals(new InetSocketAddress(defaultHostname,defaultPort),workerAddress)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "0355f17f04738ad9315d0c8ecad1b282f836e7f3", "projectName": "antlr.antlr4", "bugType": "Change Identifier Used", "problem": " \t\tchar[] serializedAtn = ATNSerializer.getSerializedAsChars(atn);\n \t\tATN deserialized = new ATNDeserializer().deserialize(serializedAtn);\n\t\treturn new ParserInterpreter(fileName, Arrays.asList(getTokenNames()), Arrays.asList(getRuleNames()), deserialized, tokenStream);\n \t}\n }", "fixed": " \t\tchar[] serializedAtn = ATNSerializer.getSerializedAsChars(atn);\n \t\tATN deserialized = new ATNDeserializer().deserialize(serializedAtn);\n\t\treturn new ParserInterpreter(fileName, Arrays.asList(getTokenDisplayNames()), Arrays.asList(getRuleNames()), deserialized, tokenStream);\n \t}\n }", "sourceBeforeFix": "getTokenNames()", "sourceAfterFix": "getTokenDisplayNames()"}
{"fixCommitSHA1": "359ce65a7b6ec7725d4fea3aca1a299cd2b7f7ba", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "      * @param methodDef method definition token.\n      * @return true if a method can be overridden in a subclass.\n      */\n    private boolean canBeOverridden(DetailAST methodDef) {\n         final DetailAST modifiers = methodDef.findFirstToken(TokenTypes.MODIFIERS);\n         return ScopeUtils.getSurroundingScope(methodDef).isIn(Scope.PROTECTED)\n             && !ScopeUtils.isInInterfaceOrAnnotationBlock(methodDef)", "fixed": "      * @param methodDef method definition token.\n      * @return true if a method can be overridden in a subclass.\n      */\n    private static boolean canBeOverridden(DetailAST methodDef) {\n         final DetailAST modifiers = methodDef.findFirstToken(TokenTypes.MODIFIERS);\n         return ScopeUtils.getSurroundingScope(methodDef).isIn(Scope.PROTECTED)\n             && !ScopeUtils.isInInterfaceOrAnnotationBlock(methodDef)", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "f0cd1c2accadd71cdfb6300c34bc0587b16d4c69", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "             attr.addResourceAttributeDescription(resources, keyPrefix, container);\n         }\n        ALIAS.addResourceAttributeDescription(resources, keyPrefix, container).\n                 get(ModelDescriptionConstants.VALUE_TYPE).set(ModelType.STRING);\n         container.get(CHILDREN, ModelKeys.SINGLETON, DESCRIPTION).set(resources.getString(keyPrefix + \".singleton\"));", "fixed": "             attr.addResourceAttributeDescription(resources, keyPrefix, container);\n         }\n        ALIASES.addResourceAttributeDescription(resources, keyPrefix, container).\n                 get(ModelDescriptionConstants.VALUE_TYPE).set(ModelType.STRING);\n         container.get(CHILDREN, ModelKeys.SINGLETON, DESCRIPTION).set(resources.getString(keyPrefix + \".singleton\"));", "sourceBeforeFix": "ALIAS.addResourceAttributeDescription(resources,keyPrefix,container)", "sourceAfterFix": "ALIASES.addResourceAttributeDescription(resources,keyPrefix,container)"}
{"fixCommitSHA1": "af233c9c353322adf1fa91d5e6ca706b9d9d98b7", "projectName": "dropwizard.dropwizard", "bugType": "Wrong Function Name", "problem": "         final PrintWriter output = mock(PrintWriter.class);\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getServletPath()).thenReturn(\"/tasks/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.<String>of()));\n         when(response.getWriter()).thenReturn(output);", "fixed": "         final PrintWriter output = mock(PrintWriter.class);\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getPathInfo()).thenReturn(\"/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.<String>of()));\n         when(response.getWriter()).thenReturn(output);", "sourceBeforeFix": "request.getServletPath()", "sourceAfterFix": "request.getPathInfo()"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getUserListStatuses(String user, int id, Paging paging) throws TwitterException {\n        return Status.constructStatuses(get(getApiBaseURL() + V1 + user +\n                 \"/lists/\" + id + \"/statuses.json\", new PostParameter[0],\n                 paging.asPostParameterList(Paging.SMCP, Paging.PER_PAGE), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getUserListStatuses(String user, int id, Paging paging) throws TwitterException {\n        return Status.createStatuseList(get(getApiBaseURL() + V1 + user +\n                 \"/lists/\" + id + \"/statuses.json\", new PostParameter[0],\n                 paging.asPostParameterList(Paging.SMCP, Paging.PER_PAGE), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15849, value = \"Operation %s for address %s can only be handled by the \" +\n             \"master Domain Controller; this host is not the master Domain Controller\")\n     String masterDomainControllerOnlyOperation(String operation, PathAddress address);", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10849, value = \"Operation %s for address %s can only be handled by the \" +\n             \"master Domain Controller; this host is not the master Domain Controller\")\n     String masterDomainControllerOnlyOperation(String operation, PathAddress address);", "sourceBeforeFix": "id=15834", "sourceAfterFix": "id=10834"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "3517e9bad4eceb4aefaa9f3a999ec83f2db33f25", "projectName": "google.closure-compiler", "bugType": "More Specific If", "problem": "       boolean isExtern = false;\n       JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n      if(functionJSDocInfo != null) {\n         isExtern = functionJSDocInfo.getAssociatedNode().isFromExterns();\n       }", "fixed": "       boolean isExtern = false;\n       JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n      if( functionJSDocInfo != null  &&\n          functionJSDocInfo.getAssociatedNode() != null) {\n         isExtern = functionJSDocInfo.getAssociatedNode().isFromExterns();\n       }", "sourceBeforeFix": "functionJSDocInfo != null", "sourceAfterFix": "functionJSDocInfo != null && functionJSDocInfo.getAssociatedNode() != null"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "5b13fe70c25812157a1e4432135eb9639e72bc6a", "projectName": "apache.flink", "bugType": "Wrong Function Name", "problem": " \t\tfinal Sink output = new Sink(\"output.json\").withInputs(selection);\n \t\texpectedPlan.setSinks(output);\n\t\tassertEquals(expectedPlan, actualPlan);\n \t}\n \t@Test", "fixed": " \t\tfinal Sink output = new Sink(\"output.json\").withInputs(selection);\n \t\texpectedPlan.setSinks(output);\n\t\tassertPlanEquals(expectedPlan, actualPlan);\n \t}\n \t@Test", "sourceBeforeFix": "assertEquals(expectedPlan,actualPlan)", "sourceAfterFix": "assertPlanEquals(expectedPlan,actualPlan)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "de8f91ad67b9881afc9f5af9cf9736b341bc3fbf", "projectName": "checkstyle.checkstyle", "bugType": "Same Function Swap Args", "problem": "         final int stringNumber =\n                 UniquePropertiesCheck.getLineNumber(testStrings,\n                         \"some key\");\n        Assert.assertEquals(stringNumber, 0);\n     }\n     /**", "fixed": "         final int stringNumber =\n                 UniquePropertiesCheck.getLineNumber(testStrings,\n                         \"some key\");\n        Assert.assertEquals(0, stringNumber);\n     }\n     /**", "sourceBeforeFix": "Assert.assertEquals(\"Wrong messages count: \" + messages.size(),messages.size(),1)", "sourceAfterFix": "Assert.assertEquals(\"Wrong messages count: \" + messages.size(),1,messages.size())"}
{"fixCommitSHA1": "01fee8245ea33cbfe79dfc8bc3a7d4b9e3047beb", "projectName": "Graylog2.graylog2-server", "bugType": "Same Function More Args", "problem": "                 .asc(\"producer\")\n                 .asc(\"consumers\"));\n        coll.setWriteConcern(WriteConcern.MAJORITY);\n         return coll;\n     }", "fixed": "                 .asc(\"producer\")\n                 .asc(\"consumers\"));\n        coll.setWriteConcern(WriteConcern.FSYNCED);\n         return coll;\n     }", "sourceBeforeFix": "dbCollection.save(clusterEvent)", "sourceAfterFix": "dbCollection.save(clusterEvent,WriteConcern.FSYNCED)"}
{"fixCommitSHA1": "492fd118d4902c730fc8619851a7135b623631e2", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "         MockEndpoint result = getMockEndpoint(\"mock:result\");\r\n        result.expectedMessageCount(2);\r\n         result.expectedBodiesReceived(\"Message 1c\", \"Message 2b\");\r", "fixed": "         MockEndpoint result = getMockEndpoint(\"mock:result\");\r\n        result.expectedMinimumMessageCount(2);\r\n         result.expectedBodiesReceived(\"Message 1c\", \"Message 2b\");\r", "sourceBeforeFix": "result.expectedMessageCount(3)", "sourceAfterFix": "result.expectedMinimumMessageCount(3)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedSparkEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default SparkEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedSparkEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default SparkEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "43b2fa49ca351c05c453c8cd0eec32ce6277c830", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " public class Label extends Widget {\r\n \tprivate LabelStyle style;\r\n \tprivate final TextBounds bounds = new TextBounds();\r\n\tprivate String text;\r\n \tprivate BitmapFontCache cache;\r\n \tprivate float prefWidth, prefHeight;\r\n \tprivate int labelAlign = Align.LEFT;\r", "fixed": " public class Label extends Widget {\r\n \tprivate LabelStyle style;\r\n \tprivate final TextBounds bounds = new TextBounds();\r\n\tprivate CharSequence text;\r\n \tprivate BitmapFontCache cache;\r\n \tprivate float prefWidth, prefHeight;\r\n \tprivate int labelAlign = Align.LEFT;\r", "sourceBeforeFix": "String text", "sourceAfterFix": "CharSequence text"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AS2EndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedAS2EndpointProducerBuilder advanced() {", "fixed": "     \n    public interface AS2EndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedAS2EndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "       mBuf.flip();\n       for (int pId = mLeft; pId < mRight; pId ++) {\n         long startTimeMs = System.currentTimeMillis();\n        TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n         OutStream os = file.getOutStream(WriteType.MUST_CACHE);\n         for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n           mBuf.putInt(0, k + mWorkerId);", "fixed": "       mBuf.flip();\n       for (int pId = mLeft; pId < mRight; pId ++) {\n         long startTimeMs = System.currentTimeMillis();\n        TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n         OutStream os = file.getOutStream(WriteType.MUST_CACHE);\n         for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n           mBuf.putInt(0, k + mWorkerId);", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "pId + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "e8a74c8ad07bbf497026a6b8bde532cd61f79f17", "projectName": "netty.netty", "bugType": "More Specific If", "problem": "         if (getDomain() == null && c.getDomain() != null) {\n             return -1;\n        } else if (c.getDomain() == null) {\n             return 1;\n         }\n         v = getDomain().compareToIgnoreCase(c.getDomain());", "fixed": "         if (getDomain() == null && c.getDomain() != null) {\n             return -1;\n        } else if (c.getDomain() == null && getDomain() != null) {\n             return 1;\n         }\n         v = getDomain().compareToIgnoreCase(c.getDomain());", "sourceBeforeFix": "that.getDomain() == null", "sourceAfterFix": "that.getDomain() == null && getDomain() != null"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCachePuts(1);\n            statistics.addPutTimeNano(System.nanoTime() - start);\n         }\n         return result;\n     }", "fixed": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCachePuts(1);\n            statistics.addPutTimeNanos(System.nanoTime() - start);\n         }\n         return result;\n     }", "sourceBeforeFix": "statistics.addPutTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addPutTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "98390cf27b0ce41447e0a104a8963b2cfdc20795", "projectName": "libgdx.libgdx", "bugType": "Change Numeric Literal", "problem": " \tpublic void add (byte value1, byte value2, byte value3, byte value4) {\n \t\tbyte[] items = this.items;\n\t\tif (size + 3 >= items.length) items = resize(Math.max(8, (int)(size * 1.75f)));\n \t\titems[size] = value1;\n \t\titems[size + 1] = value2;\n \t\titems[size + 2] = value3;", "fixed": " \tpublic void add (byte value1, byte value2, byte value3, byte value4) {\n \t\tbyte[] items = this.items;\nif (size + 3 >= items.length) items = resize(Math.max(8, (int)(size * 1.8f)));\n \t\titems[size] = value1;\n \t\titems[size + 1] = value2;\n \t\titems[size + 2] = value3;", "sourceBeforeFix": "size * 1.75f", "sourceAfterFix": "size * 1.8f"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  private final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "projectName": "Alluxio.alluxio", "bugType": "Change Operand ", "problem": "       if (mWrite) {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n           OutputStream os = mHdfsFs.create(new Path(filePath));\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n             mBuf.putInt(0, k + mWorkerId);", "fixed": "       if (mWrite) {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           OutputStream os = mHdfsFs.create(new Path(filePath));\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n             mBuf.putInt(0, k + mWorkerId);", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "pId + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedByMe(Paging paging) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedByMe(Paging paging) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites/\" + id+ \".json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites/\" + id+ \".json\",new PostParameter[0],true))"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "fixed": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "sourceBeforeFix": "GL20.glUniform4(location,toIntBuffer(v,offset,count << 2))", "sourceAfterFix": "GL20.glUniform4iv(location,toIntBuffer(v,offset,count << 2))"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface PubNubEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedPubNubEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface PubNubEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedPubNubEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  private final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "435805f612bf78ee0d2fd93cd90fa6c6740e17c2", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         String uri = getScpUri() + \"?username=admin&password=admin&knownHostsFile=\" + getKnownHostsFile();\n         template.sendBodyAndHeader(uri, \"Farewell World\", Exchange.FILE_NAME, \"mysub/mysubsub/farewell.txt\");\n        Thread.sleep(200);\n         File file = new File(getScpPath() + \"/mysub/mysubsub/farewell.txt\");\n         assertFileExists(file.getAbsolutePath());", "fixed": "         String uri = getScpUri() + \"?username=admin&password=admin&knownHostsFile=\" + getKnownHostsFile();\n         template.sendBodyAndHeader(uri, \"Farewell World\", Exchange.FILE_NAME, \"mysub/mysubsub/farewell.txt\");\n        Thread.sleep(500);\n         File file = new File(getScpPath() + \"/mysub/mysubsub/farewell.txt\");\n         assertFileExists(file.getAbsolutePath());", "sourceBeforeFix": "Thread.sleep(200)", "sourceAfterFix": "Thread.sleep(500)"}
{"fixCommitSHA1": "a63faf44e1b103a49d25a15c720fc5940ae9fc07", "projectName": "square.retrofit", "bugType": "Change Identifier Used", "problem": "     assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mBodyWildcard = new TypeToken<Maybe<? extends String>>() {}.getType();\n    assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fBodyWildcard = new TypeToken<Flowable<? extends String>>() {}.getType();\n    assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oBodyGeneric = new TypeToken<Observable<List<String>>>() {}.getType();", "fixed": "     assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mBodyWildcard = new TypeToken<Maybe<? extends String>>() {}.getType();\n    assertThat(factory.get(mBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fBodyWildcard = new TypeToken<Flowable<? extends String>>() {}.getType();\n    assertThat(factory.get(fBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oBodyGeneric = new TypeToken<Observable<List<String>>>() {}.getType();", "sourceBeforeFix": "factory.get(sResponseClass,NO_ANNOTATIONS,retrofit)", "sourceAfterFix": "factory.get(mResponseClass,NO_ANNOTATIONS,retrofit)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15871, value = \"Unknown server %s\")\n     IllegalStateException unknownServer(ServerIdentity server);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10871, value = \"Unknown server %s\")\n     IllegalStateException unknownServer(ServerIdentity server);\n     /**", "sourceBeforeFix": "id=15861", "sourceAfterFix": "id=10861"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @return property value in the type of the default value\n \t * @since 1.7\n \t */\n\tpublic <T> T getGlobalPropertyValue(String propertyName, T defaultValue) throws APIException;\n \t/**\n \t * @param aClass class of object getting length for", "fixed": " \t * @return property value in the type of the default value\n \t * @since 1.7\n \t */\n\tpublic <T> T getGlobalPropertyValue(String propertyName, T defaultValue);\n \t/**\n \t * @param aClass class of object getting length for", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "9716d2ae673a576cb345c3bfb24cf71654d8f112", "projectName": "openhab.openhab", "bugType": "Wrong Function Name", "problem": " \t@Override\n \tpublic void internalReceiveCommand(String itemName, Command command) {\n \t\tsuper.internalReceiveCommand(itemName, command);\n\t\tlogger.debug(\"MyQ binding received command '{}' for item '{}'\",\n \t\t\t\tcommand, itemName);\n \t\tif (myqOnlineData != null) {\n \t\t\tcomputeCommandForItem(command, itemName);", "fixed": " \t@Override\n \tpublic void internalReceiveCommand(String itemName, Command command) {\n \t\tsuper.internalReceiveCommand(itemName, command);\n\t\tlogger.trace(\"MyQ binding received command '{}' for item '{}'\",\n \t\t\t\tcommand, itemName);\n \t\tif (myqOnlineData != null) {\n \t\t\tcomputeCommandForItem(command, itemName);", "sourceBeforeFix": "logger.debug(\"Invalid Account Credentials\")", "sourceAfterFix": "logger.trace(\"Invalid Account Credentials\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  private final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "86f74100e3f5a30bf3ecaf4be00c0b59bda096ac", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "     }\n     LOG.info(\"Loading image \" + path);\n     DataInputStream imageIs = new DataInputStream(ufs.open(path));\n    JsonParser parser = JsonObject.createObjectMapper().getJsonFactory().createJsonParser(imageIs);\n     info.loadImage(parser, path);\n     imageIs.close();", "fixed": "     }\n     LOG.info(\"Loading image \" + path);\n     DataInputStream imageIs = new DataInputStream(ufs.open(path));\n    JsonParser parser = JsonObject.createObjectMapper().getFactory().createParser(imageIs);\n     info.loadImage(parser, path);\n     imageIs.close();", "sourceBeforeFix": "JsonObject.createObjectMapper().getJsonFactory()", "sourceAfterFix": "JsonObject.createObjectMapper().getFactory()"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<Status> getHomeTimeline(Paging paging) throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/home_timeline.json\", null, paging.asPostParameterList(), true));\n     }\n     /**", "fixed": "      */\n     public ResponseList<Status> getHomeTimeline(Paging paging) throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/home_timeline.json\", null, paging.asPostParameterList(), true));\n     }\n     /**", "sourceBeforeFix": "DirectMessage.constructDirectMessages(get(getBaseURL() + \"direct_messages.json\",true))", "sourceAfterFix": "DirectMessage.createDirectMessageList(get(getBaseURL() + \"direct_messages.json\",true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     return additionalReplacements;\n   }\n  private final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     return additionalReplacements;\n   }\n  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e1aaf1dd11a7c2d2b6c1a869f1df27e28483fee7", "projectName": "code4craft.webmagic", "bugType": "Wrong Function Name", "problem": "      * @return get cookies\n      */\n     public Map<String,Map<String, String>> getAllCookies() {\n        return cookies.columnMap();\n     }\n     /**", "fixed": "      * @return get cookies\n      */\n     public Map<String,Map<String, String>> getAllCookies() {\n        return cookies.rowMap();\n     }\n     /**", "sourceBeforeFix": "cookies.columnMap()", "sourceAfterFix": "cookies.rowMap()"}
{"fixCommitSHA1": "9467bef8ea9a62658b32dd43a76f4f98087d1986", "projectName": "apache.hadoop", "bugType": "Change Unary Operator\t", "problem": "config.set(KeyProviderFactory.KEY_PROVIDER_PATH, \"user:\n     ks.setConf(config);\n     rc = ks.run(args1);\n    assertEquals(-1, rc);\n     assertTrue(outContent.toString().contains(\"There are no valid \" +\n \t\t\"KeyProviders configured.\"));\n   }", "fixed": "config.set(KeyProviderFactory.KEY_PROVIDER_PATH, \"user:\n     ks.setConf(config);\n     rc = ks.run(args1);\n    assertEquals(1, rc);\n     assertTrue(outContent.toString().contains(\"There are no valid \" +\n \t\t\"KeyProviders configured.\"));\n   }", "sourceBeforeFix": "-1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "f10bf59e6ecf33a0dc996b884e486e42e9241853", "projectName": "apache.hadoop", "bugType": "Change Numeric Literal", "problem": "     int cleanedSize = cleaned.size();\n     waitCount = 0;\n     while (cleanedSize < allocatedSize && waitCount++ < 200) {\n      Thread.sleep(100);\n       resp = nm.nodeHeartbeat(true);\n       cleaned = resp.getContainersToCleanup();\n       cleanedSize += cleaned.size();", "fixed": "     int cleanedSize = cleaned.size();\n     waitCount = 0;\n     while (cleanedSize < allocatedSize && waitCount++ < 200) {\n      Thread.sleep(300);\n       resp = nm.nodeHeartbeat(true);\n       cleaned = resp.getContainersToCleanup();\n       cleanedSize += cleaned.size();", "sourceBeforeFix": "Thread.sleep(100)", "sourceAfterFix": "Thread.sleep(300)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "fixed": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2fv(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2fv(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "sourceBeforeFix": "GL20.glGetUniform(program,location,params)", "sourceAfterFix": "GL20.glGetUniformfv(program,location,params)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getMentions(Paging paging) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getMentions(Paging paging) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweets_of_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweets_of_me.json\",null,true))"}
{"fixCommitSHA1": "3757a700a89638e5747d966bdaa8266b62c974c8", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "   }\n   @GwtIncompatible(\"Reader/Writer\")\n  private void testStreamingEncodingWithSeparators(\n       BaseEncoding encoding, String decoded, String encoded) throws IOException {\n     testStreamingEncoding(encoding, decoded, encoded);", "fixed": "   }\n   @GwtIncompatible(\"Reader/Writer\")\n  private static void testStreamingEncodingWithSeparators(\n       BaseEncoding encoding, String decoded, String encoded) throws IOException {\n     testStreamingEncoding(encoding, decoded, encoded);", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid username supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"User not found\", response = Void.class) })\n    void deleteUser(@PathParam(\"username\") @ApiParam(\"The name that needs to be deleted\") String username);\n     @GET\n     @Path(\"/{username}\")", "fixed": "     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid username supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"User not found\", response = Void.class) })\n    void deleteUser(@PathParam(\"username\") @ApiParam(\"The name that needs to be deleted\") String username) throws Exception;\n     @GET\n     @Path(\"/{username}\")", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "0f8c0e4ff5f80aab6ab653c9aaa5a97812d2ec7c", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "     private TransactionManager transactionManager;\n    @Resource(name = \"java:jboss/mail\")\n     private Context context;\n    @Resource(name = \"java:/TransactionManager\")\n     public void setTransactionManager(TransactionManager transactionManager) {\n         this.transactionManager = transactionManager;\n     }", "fixed": "     private TransactionManager transactionManager;\n    @Resource(lookup = \"java:jboss/mail\")\n     private Context context;\n    @Resource(lookup = \"java:/TransactionManager\")\n     public void setTransactionManager(TransactionManager transactionManager) {\n         this.transactionManager = transactionManager;\n     }", "sourceBeforeFix": "name=\"java:jboss/mail\"", "sourceAfterFix": "lookup=\"java:jboss/mail\""}
{"fixCommitSHA1": "6bae902bd35ed4f57e7a5d612b7ad9b72f4559bc", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "     Node node1 = Node.newString(Token.NAME, \"f\");\n     node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n     Node node2 = Node.newString(Token.NAME, \"f\");\n    assertFalse(node1.checkTreeTypeAwareEqualsSilent(node2));\n   }\n   public void testVarArgs1() {", "fixed": "     Node node1 = Node.newString(Token.NAME, \"f\");\n     node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n     Node node2 = Node.newString(Token.NAME, \"f\");\n    assertFalse(node1.isEquivalentToTyped(node2));\n   }\n   public void testVarArgs1() {", "sourceBeforeFix": "node1.checkTreeTypeAwareEqualsSilent(node2)", "sourceAfterFix": "node1.isEquivalentToTyped(node2)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      * @param hostName   the name of the host.\n      */\n     @LogMessage(level = Level.WARN)\n    @Message(id = 15802, value = \"Interrupted awaiting final response from server %s on host %s\")\n     void interruptedAwaitingFinalResponse(String serverName, String hostName);\n     /**", "fixed": "      * @param hostName   the name of the host.\n      */\n     @LogMessage(level = Level.WARN)\n    @Message(id = 10802, value = \"Interrupted awaiting final response from server %s on host %s\")\n     void interruptedAwaitingFinalResponse(String serverName, String hostName);\n     /**", "sourceBeforeFix": "id=15804", "sourceAfterFix": "id=10804"}
{"fixCommitSHA1": "cadd7cc57026a1f9991d2d90270a7aacbd0a7aa2", "projectName": "facebook.presto", "bugType": "Change Modifier", "problem": "         }, executor);\n     }\n    private void sendDelete()\n     {\n         HttpResponseFuture<StatusResponse> resultFuture = httpClient.executeAsync(prepareDelete().setUri(location).build(), createStatusResponseHandler());\n         future = resultFuture;", "fixed": "         }, executor);\n     }\n    private synchronized void sendDelete()\n     {\n         HttpResponseFuture<StatusResponse> resultFuture = httpClient.executeAsync(prepareDelete().setUri(location).build(), createStatusResponseHandler());\n         future = resultFuture;", "sourceBeforeFix": "2", "sourceAfterFix": "34"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "718ec56fd9be666a6f8f22115ea2912561634dbb", "projectName": "Alluxio.alluxio", "bugType": "Same Function More Args", "problem": "    * @param hostname the name of the host\n    */\n   public SpecificHostPolicy(String hostname) {\n    mHostname = Preconditions.checkNotNull(hostname);\n   }\n   @Override", "fixed": "    * @param hostname the name of the host\n    */\n   public SpecificHostPolicy(String hostname) {\n    mHostname = Preconditions.checkNotNull(hostname, \"hostname\");\n   }\n   @Override", "sourceBeforeFix": "Preconditions.checkNotNull(hostname)", "sourceAfterFix": "Preconditions.checkNotNull(hostname,\"hostname\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  private final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "2921e7bf0d74a65fdcc71d3ce3053037d14e4d44", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "             String sessionTTL = getParam(\"session-ttl-seconds\");\n             if (sessionTTL != null) {\n                 MapConfig mapConfig = hzConfig.getMapConfig(clusterMapName);\n                mapConfig.setTimeToLiveSeconds(Integer.valueOf(sessionTTL));\n                 hzConfig.addMapConfig(mapConfig);\n             }\n         } catch (UnsupportedOperationException ignored) {", "fixed": "             String sessionTTL = getParam(\"session-ttl-seconds\");\n             if (sessionTTL != null) {\n                 MapConfig mapConfig = hzConfig.getMapConfig(clusterMapName);\n                mapConfig.setTimeToLiveSeconds(Integer.parseInt(sessionTTL));\n                 hzConfig.addMapConfig(mapConfig);\n             }\n         } catch (UnsupportedOperationException ignored) {", "sourceBeforeFix": "Integer.valueOf(sessionTTL)", "sourceAfterFix": "Integer.parseInt(sessionTTL)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15861, value = \"Cannot remove deployment %s from the domain as it is still used by server groups %s\")\n     String cannotRemoveDeploymentInUse(String name, List<String> groups);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10861, value = \"Cannot remove deployment %s from the domain as it is still used by server groups %s\")\n     String cannotRemoveDeploymentInUse(String name, List<String> groups);\n     /**", "sourceBeforeFix": "id=15837", "sourceAfterFix": "id=10837"}
{"fixCommitSHA1": "dbd9f9a45041633af588976b833f714e82f3a401", "projectName": "Alluxio.alluxio", "bugType": "Change Modifier", "problem": "    *\n    * @return The id of the block's locker\n    */\n  int getLockId() {\n     return mLockId;\n   }", "fixed": "    *\n    * @return The id of the block's locker\n    */\n  public int getLockId() {\n     return mLockId;\n   }", "sourceBeforeFix": "0", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fb1a1ca0d397301efc3cc702e4836b9bca169251", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": " \t\trel.setPersonA(personA);\r\n \t\trel.setPersonB(personB);\r\n \t\trel.setRelationshipType(relType);\r\n\t\tps.createRelationship(rel);\r\n \t}\r\n \tpublic void voidRelationship(Integer relationshipId, String voidReason) {\r", "fixed": " \t\trel.setPersonA(personA);\r\n \t\trel.setPersonB(personB);\r\n \t\trel.setRelationshipType(relType);\r\n\t\tps.saveRelationship(rel);\r\n \t}\r\n \tpublic void voidRelationship(Integer relationshipId, String voidReason) {\r", "sourceBeforeFix": "ps.createRelationship(rel)", "sourceAfterFix": "ps.saveRelationship(rel)"}
{"fixCommitSHA1": "f5309e8856186f5105e0bfcefda1273330f36ac0", "projectName": "jersey.jersey", "bugType": "Same Function Less Args", "problem": " \t\tClientConfig jerseyConfig = new ClientConfig();\n \t\tClient client = ClientBuilder.newClient(jerseyConfig);\n\t\tclient = client.register(new HttpDigestAuthFilter(DIGEST_TEST_LOGIN, DIGEST_TEST_PASS, 1));\n \t\tWebTarget resource = client.target(getBaseUri()).path(\"auth-digest\");", "fixed": " \t\tClientConfig jerseyConfig = new ClientConfig();\n \t\tClient client = ClientBuilder.newClient(jerseyConfig);\n\t\tclient = client.register(new HttpDigestAuthFilter(DIGEST_TEST_LOGIN, DIGEST_TEST_PASS));\n \t\tWebTarget resource = client.target(getBaseUri()).path(\"auth-digest\");", "sourceBeforeFix": "new HttpDigestAuthFilter(DIGEST_TEST_LOGIN,DIGEST_TEST_PASS,1)", "sourceAfterFix": "new HttpDigestAuthFilter(DIGEST_TEST_LOGIN,DIGEST_TEST_PASS)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 15866, value = \"%s is null\")\n     IllegalArgumentException nullVar(String name);\n     /**", "fixed": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 10866, value = \"%s is null\")\n     IllegalArgumentException nullVar(String name);\n     /**", "sourceBeforeFix": "id=15840", "sourceAfterFix": "id=10840"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n* @see\n \t */\n\tpublic int compareToReference(TypeComparator<T> referencedComparator);\n \t/**\n \t * Compares two records in serialized from. The return value indicates the order of the two in the same way", "fixed": " \t * \n* @see\n \t */\n\tpublic abstract int compareToReference(TypeComparator<T> referencedComparator);\n \t/**\n \t * Compares two records in serialized from. The return value indicates the order of the two in the same way", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "38eb6222bddaf49c3c9ae73ddef0cfe4ff5efa48", "projectName": "alibaba.dubbo", "bugType": "Change Numeric Literal", "problem": "     @Test\n     public void test_Decode_Return_Request_Object() throws IOException {\n        byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, (byte) 0xdf, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n         Person person = new Person();\n         byte[] request = getRequestBytes(person, header);", "fixed": "     @Test\n     public void test_Decode_Return_Request_Object() throws IOException {\n        byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, (byte) 0xe2, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n         Person person = new Person();\n         byte[] request = getRequestBytes(person, header);", "sourceBeforeFix": "{MAGIC_HIGH,MAGIC_LOW,0x20,20,0,0,0,0,0,0,0,0,0,0,0,0}", "sourceAfterFix": "{MAGIC_HIGH,MAGIC_LOW,0x02,20,0,0,0,0,0,0,0,0,0,0,0,0}"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  private final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "d86487fa294b1efa9f2b08c5569b9fca5efa1445", "projectName": "google.guava", "bugType": "Change Identifier Used", "problem": "     }\n   }\n  private static final BiMap<Integer, String> INT_TO_STRING_MAP =\n       new ImmutableBiMap.Builder<Integer, String>()\n           .put(1, \"one\")\n           .put(2, \"two\")", "fixed": "     }\n   }\n  private static final ImmutableBiMap<Integer, String> INT_TO_STRING_MAP =\n       new ImmutableBiMap.Builder<Integer, String>()\n           .put(1, \"one\")\n           .put(2, \"two\")", "sourceBeforeFix": "BiMap<Integer,String>", "sourceAfterFix": "ImmutableBiMap<Integer,String>"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "38eb6222bddaf49c3c9ae73ddef0cfe4ff5efa48", "projectName": "alibaba.dubbo", "bugType": "Change Numeric Literal", "problem": "     @Test\n     public void test_Decode_Error_Request_Object() throws IOException {\n        byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, (byte) 0xdf, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n         Person person = new Person();\n         byte[] request = getRequestBytes(person, header);", "fixed": "     @Test\n     public void test_Decode_Error_Request_Object() throws IOException {\n        byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, (byte) 0xe2, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n         Person person = new Person();\n         byte[] request = getRequestBytes(person, header);", "sourceBeforeFix": "{MAGIC_HIGH,MAGIC_LOW,0x20,20,0,0,0,0,0,0,0,0,0,0,0,0}", "sourceAfterFix": "{MAGIC_HIGH,MAGIC_LOW,0x02,20,0,0,0,0,0,0,0,0,0,0,0,0}"}
{"fixCommitSHA1": "39aa03261a00c409f29341c286febaec99468d65", "projectName": "apache.flink", "bugType": "Change Boolean Literal", "problem": " \t\t\tfinal CompressionLevel compressionLevel, int indexOfOutputGate, int indexOfInputGate,\n \t\t\tfinal DistributionPattern distributionPattern) throws JobGraphDefinitionException {\n \t\tthis.connectTo(vertex, channelType, compressionLevel, indexOfOutputGate, indexOfInputGate, distributionPattern,\n\t\t\tfalse);\n \t}\n \t/**", "fixed": " \t\t\tfinal CompressionLevel compressionLevel, int indexOfOutputGate, int indexOfInputGate,\n \t\t\tfinal DistributionPattern distributionPattern) throws JobGraphDefinitionException {\n \t\tthis.connectTo(vertex, channelType, compressionLevel, indexOfOutputGate, indexOfInputGate, distributionPattern,\n\t\t\ttrue);\n \t}\n \t/**", "sourceBeforeFix": "this.connectTo(vertex,null,null,-1,-1,DistributionPattern.BIPARTITE,false)", "sourceAfterFix": "this.connectTo(vertex,null,null,-1,-1,DistributionPattern.BIPARTITE,true)"}
{"fixCommitSHA1": "0fa4d2e2604eef5128a5324498eaf90bce45b267", "projectName": "spring-projects.spring-boot", "bugType": "Change Modifier", "problem": "  *\n  * @author Craig Walls\n  * @author Phillip Webb\n * @since 1.1.0\n  */\nabstract class SocialAutoConfigurerAdapter extends SocialConfigurerAdapter {\n \t@Override\n \tpublic void addConnectionFactories(ConnectionFactoryConfigurer configurer,", "fixed": "  *\n  * @author Craig Walls\n  * @author Phillip Webb\n * @since 1.4.0\n  */\npublic abstract class SocialAutoConfigurerAdapter extends SocialConfigurerAdapter {\n \t@Override\n \tpublic void addConnectionFactories(ConnectionFactoryConfigurer configurer,", "sourceBeforeFix": "1024", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "22d5241b5f75631e9cfda82a6912a2555eecb165", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "         }\n         if (!ObjectHelper.isEmpty(configuration.getHost()) && !ObjectHelper.isEmpty(configuration.getPort())) {\n            LOG.info(\"Building gRPC server on \" + configuration.getHost() + \":\" + configuration.getPort());\n             serverBuilder = NettyServerBuilder.forAddress(new InetSocketAddress(configuration.getHost(), configuration.getPort()));\n         } else if (ObjectHelper.isEmpty(configuration.getHost()) && !ObjectHelper.isEmpty(configuration.getPort())) {\n            LOG.info(\"Building gRPC server on <any address>\" + \":\" + configuration.getPort());\n             serverBuilder = NettyServerBuilder.forPort(configuration.getPort());\n         } else {\n             throw new IllegalArgumentException(\"No server start properties (host, port) specified\");", "fixed": "         }\n         if (!ObjectHelper.isEmpty(configuration.getHost()) && !ObjectHelper.isEmpty(configuration.getPort())) {\n            LOG.debug(\"Building gRPC server on \" + configuration.getHost() + \":\" + configuration.getPort());\n             serverBuilder = NettyServerBuilder.forAddress(new InetSocketAddress(configuration.getHost(), configuration.getPort()));\n         } else if (ObjectHelper.isEmpty(configuration.getHost()) && !ObjectHelper.isEmpty(configuration.getPort())) {\n            LOG.debug(\"Building gRPC server on <any address>\" + \":\" + configuration.getPort());\n             serverBuilder = NettyServerBuilder.forPort(configuration.getPort());\n         } else {\n             throw new IllegalArgumentException(\"No server start properties (host, port) specified\");", "sourceBeforeFix": "LOG.info(\"Building gRPC server on <any address>\" + \":\" + configuration.getPort())", "sourceAfterFix": "LOG.debug(\"Building gRPC server on <any address>\" + \":\" + configuration.getPort())"}
{"fixCommitSHA1": "e2efffc72002968f835a0ea6a70f8e7762752b15", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": " \t\tConceptName anotherConceptName = ConceptNameTest.createMockConceptName(3, Context.getLocale(), null, true);\r\n \t\tanotherConceptName.setName(duplicateName);\r\n \t\tnewConcept.addName(anotherConceptName);\r\n\t\tErrors errors = new BindException(concept, \"concept\");\r\n \t\tnew ConceptValidator().validate(newConcept, errors);\r\n \t\tAssert.assertEquals(false, errors.hasErrors());\r\n \t}\r", "fixed": " \t\tConceptName anotherConceptName = ConceptNameTest.createMockConceptName(3, Context.getLocale(), null, true);\r\n \t\tanotherConceptName.setName(duplicateName);\r\n \t\tnewConcept.addName(anotherConceptName);\r\n\t\tErrors errors = new BindException(newConcept, \"concept\");\r\n \t\tnew ConceptValidator().validate(newConcept, errors);\r\n \t\tAssert.assertEquals(false, errors.hasErrors());\r\n \t}\r", "sourceBeforeFix": "new BindException(concept,\"concept\")", "sourceAfterFix": "new BindException(newConcept,\"concept\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "486b290863a66641b0ec30dbf2d9e349733cae44", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "    */\n   public void compact(String tableOrRegionName, String columnFamily)\n     throws IOException,  InterruptedException {\n    compact(Bytes.toBytesBinary(tableOrRegionName), Bytes.toBytes(columnFamily));\n   }\n   /**", "fixed": "    */\n   public void compact(String tableOrRegionName, String columnFamily)\n     throws IOException,  InterruptedException {\n    compact(Bytes.toBytes(tableOrRegionName), Bytes.toBytes(columnFamily));\n   }\n   /**", "sourceBeforeFix": "Bytes.toBytesBinary(tableOrRegionName)", "sourceAfterFix": "Bytes.toBytes(tableOrRegionName)"}
{"fixCommitSHA1": "f5c73520c475f13c507350f9567307fc17e6019a", "projectName": "apache.camel", "bugType": "More Specific If", "problem": "         private void commitOffset(StateRepository<String, String> offsetRepository, TopicPartition partition, long partitionLastOffset, boolean forceCommit) {\n             if (partitionLastOffset != -1) {\n                if (offsetRepository != null) {\n                     log.debug(\"Saving offset repository state {} from topic {} with offset: {}\", threadId, topicName, partitionLastOffset);\n                     offsetRepository.setState(serializeOffsetKey(partition), serializeOffsetValue(partitionLastOffset));\n                 } else if (forceCommit) {", "fixed": "         private void commitOffset(StateRepository<String, String> offsetRepository, TopicPartition partition, long partitionLastOffset, boolean forceCommit) {\n             if (partitionLastOffset != -1) {\n                if (!endpoint.getConfiguration().isAllowManualCommit() && offsetRepository != null) {\n                     log.debug(\"Saving offset repository state {} from topic {} with offset: {}\", threadId, topicName, partitionLastOffset);\n                     offsetRepository.setState(serializeOffsetKey(partition), serializeOffsetValue(partitionLastOffset));\n                 } else if (forceCommit) {", "sourceBeforeFix": "offsetRepository != null", "sourceAfterFix": "!endpoint.getConfiguration().isAllowManualCommit() && offsetRepository != null"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface StreamEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedStreamEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface StreamEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedStreamEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleAlternativesWithCommonLabel_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(561);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "fixed": " \tpublic void testMultipleAlternativesWithCommonLabel_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(560);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "sourceBeforeFix": "new StringBuilder(561)", "sourceAfterFix": "new StringBuilder(560)"}
{"fixCommitSHA1": "f1b22619682351923e1d34481e6efe499f41745f", "projectName": "google.guava", "bugType": "Change Identifier Used", "problem": "     fakePool.runAll();\n    assertThat(Thread.currentThread().isInterrupted()).isTrue();\n   }\n   public void testInterrupt_doesNotStopExecution() {", "fixed": "     fakePool.runAll();\n    assertThat(Thread.currentThread().interrupted()).isTrue();\n   }\n   public void testInterrupt_doesNotStopExecution() {", "sourceBeforeFix": "Thread.currentThread().isInterrupted()", "sourceAfterFix": "Thread.currentThread().interrupted()"}
{"fixCommitSHA1": "8e1fa1f0a27b51d6a9e30594095b602a7fa699cd", "projectName": "google.closure-compiler", "bugType": "Same Function More Args", "problem": "    Pattern argPattern = Pattern.compile(\"(--?[a-zA-Z_]+)=(.*)\");\n     Pattern quotesPattern = Pattern.compile(\"^['\\\"](.*)['\\\"]$\");\n     List<String> processedArgs = new ArrayList<>();", "fixed": "    Pattern argPattern = Pattern.compile(\"(--?[a-zA-Z_]+)=(.*)\", Pattern.DOTALL);\n     Pattern quotesPattern = Pattern.compile(\"^['\\\"](.*)['\\\"]$\");\n     List<String> processedArgs = new ArrayList<>();", "sourceBeforeFix": "Pattern.compile(\"(--?[a-zA-Z_]+)=(.*)\")", "sourceAfterFix": "Pattern.compile(\"(--?[a-zA-Z_]+)=(.*)\",Pattern.DOTALL)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "55ed50c4975cf694828d46ee9ca32ce72a9ef913", "projectName": "clojure.clojure", "bugType": "Change Identifier Used", "problem": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 13:\r\n\t\t\treturn invoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "fixed": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 13:\r\n\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "sourceBeforeFix": "invoke(args.first(),(args=args.rest()).first(),args.rest())", "sourceAfterFix": "doInvoke(args.first(),(args=args.rest()).first(),args.rest())"}
{"fixCommitSHA1": "ceb0d5e68bc6cbf8015be6d5dd785991fbc81455", "projectName": "apache.hbase", "bugType": "Same Function More Args", "problem": "     Thread.yield();\n    response = client.get(path);\n     assertEquals(response.getCode(), 404);", "fixed": "     Thread.yield();\n    response = client.get(path, MIMETYPE_PROTOBUF);\n     assertEquals(response.getCode(), 404);", "sourceBeforeFix": "client.get(path)", "sourceAfterFix": "client.get(path,MIMETYPE_XML)"}
{"fixCommitSHA1": "179170224d6f8b547a7b6ba2c2fe3d1b17bde65b", "projectName": "druid-io.druid", "bugType": "Change Unary Operator\t", "problem": "               log.makeAlert(e, \"Failed to persist merged index[%s]\", schema.getDataSource())\n                  .addData(\"interval\", interval)\n                  .emit();\n              if (!shuttingDown) {\n                 abandonSegment(truncatedTime, sink);", "fixed": "               log.makeAlert(e, \"Failed to persist merged index[%s]\", schema.getDataSource())\n                  .addData(\"interval\", interval)\n                  .emit();\n              if (shuttingDown) {\n                 abandonSegment(truncatedTime, sink);", "sourceBeforeFix": "!shuttingDown", "sourceAfterFix": "shuttingDown"}
{"fixCommitSHA1": "91ce0abe48c7670f567f7b6584883d56fd3306cf", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t\t@Bean\n \t\t@ConditionalOnMissingBean(name = \"redisTemplate\")\n\t\tpublic RedisOperations<Object, Object> redisTemplate(\n \t\t\t\tRedisConnectionFactory redisConnectionFactory)\n \t\t\t\tthrows UnknownHostException {\n \t\t\tRedisTemplate<Object, Object> template = new RedisTemplate<Object, Object>();", "fixed": " \t\t@Bean\n \t\t@ConditionalOnMissingBean(name = \"redisTemplate\")\n\t\tpublic RedisTemplate<Object, Object> redisTemplate(\n \t\t\t\tRedisConnectionFactory redisConnectionFactory)\n \t\t\t\tthrows UnknownHostException {\n \t\t\tRedisTemplate<Object, Object> template = new RedisTemplate<Object, Object>();", "sourceBeforeFix": "RedisOperations<Object,Object>", "sourceAfterFix": "RedisTemplate<Object,Object>"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \t@Test\n \tpublic void testMultipleActionsPredicatesOptions_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {console.log($ctx.toStringTree(null, this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");", "fixed": " \t@Test\n \tpublic void testMultipleActionsPredicatesOptions_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(245);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {console.log($ctx.toStringTree(null, this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");", "sourceBeforeFix": "new StringBuilder(639)", "sourceAfterFix": "new StringBuilder(638)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "63b7cec3050338899e04957cbc7039cd509cd214", "projectName": "cucumber.cucumber-jvm", "bugType": "Change Boolean Literal", "problem": "     }\n    @Cucumber.Options(monochrome = false)\n     static class SubClassWithMonoChromeTrue extends BaseClassWithMonoChromeFalse {\n     }\n    @Cucumber.Options(monochrome = true)\n     static class BaseClassWithMonoChromeFalse {\n     }", "fixed": "     }\n    @Cucumber.Options(monochrome = true)\n     static class SubClassWithMonoChromeTrue extends BaseClassWithMonoChromeFalse {\n     }\n    @Cucumber.Options(monochrome = false)\n     static class BaseClassWithMonoChromeFalse {\n     }", "sourceBeforeFix": "monochrome=true", "sourceAfterFix": "monochrome=false"}
{"fixCommitSHA1": "fc9a05a1e4ace9cce5940b7dc606a8bea763a3f9", "projectName": "apache.hive", "bugType": "Change Identifier Used", "problem": "     rs.close();\n   }\n   public void testMetaDataGetTableTypes() throws SQLException {\n    metaDataGetTableTypeTest(new HiveTableTypeMapping().getTableTypeNames());\n   }\n   public void testMetaDataGetHiveTableTypes() throws SQLException {\n     Statement stmt = con.createStatement();\n     stmt.execute(\"set \" + HiveConf.ConfVars.HIVE_SERVER2_TABLE_TYPE_MAPPING.varname +", "fixed": "     rs.close();\n   }\n   public void testMetaDataGetTableTypes() throws SQLException {\n    metaDataGetTableTypeTest(new ClassicTableTypeMapping().getTableTypeNames());\n   }\n   public void testMetaDataGetHiveTableTypes() throws SQLException {\n     Statement stmt = con.createStatement();\n     stmt.execute(\"set \" + HiveConf.ConfVars.HIVE_SERVER2_TABLE_TYPE_MAPPING.varname +", "sourceBeforeFix": "new HiveTableTypeMapping()", "sourceAfterFix": "new ClassicTableTypeMapping()"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "fixed": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "sourceBeforeFix": "GL20.glUniformMatrix4(location,transpose,value)", "sourceAfterFix": "GL20.glUniformMatrix4fv(location,transpose,value)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "fixed": "   }\n   \n  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15860, value = \"No deployment with name %s found\")\n     String noDeploymentContentWithName(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10860, value = \"No deployment with name %s found\")\n     String noDeploymentContentWithName(String name);\n     /**", "sourceBeforeFix": "id=15846", "sourceAfterFix": "id=10846"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public List<Trends> getDailyTrends(Date date, boolean excludeHashTags) throws TwitterException {\n        return Trends.constructTrendsList(get(getSearchBaseURL()\n                 + \"trends/daily.json?date=\" + toDateStr(date)\n                 + (excludeHashTags ? \"&exclude=hashtags\" : \"\"), false));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public List<Trends> getDailyTrends(Date date, boolean excludeHashTags) throws TwitterException {\n        return Trends.createTrendsList(get(getSearchBaseURL()\n                 + \"trends/daily.json?date=\" + toDateStr(date)\n                 + (excludeHashTags ? \"&exclude=hashtags\" : \"\"), false));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))"}
{"fixCommitSHA1": "4dd18ed5c3188be2cfb14efce62e71ae6f19243a", "projectName": "dropwizard.dropwizard", "bugType": "Change Identifier Used", "problem": "         final PrintWriter output = mock(PrintWriter.class);\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getServletPath()).thenReturn(\"/tasks/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.of(\"runs\")));\n         when(request.getParameterValues(\"runs\")).thenReturn(new String[]{\"1\"});\n         when(response.getWriter()).thenReturn(output);", "fixed": "         final PrintWriter output = mock(PrintWriter.class);\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getPathInfo()).thenReturn(\"/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.of(\"runs\")));\n         when(request.getParameterValues(\"runs\")).thenReturn(new String[]{\"1\"});\n         when(response.getWriter()).thenReturn(output);", "sourceBeforeFix": "request.getServletPath()", "sourceAfterFix": "request.getPathInfo()"}
{"fixCommitSHA1": "4665dcf9ab41c3c61cd42aad296ebfe518bfa003", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\n \tpublic void glBindTexture (int target, int texture) {\n\t\tGL.glBindTextureEXT(target, texture);\n \t}\n \tpublic void glBlendFunc (int sfactor, int dfactor) {", "fixed": " \t}\n \tpublic void glBindTexture (int target, int texture) {\n\t\tGL.glBindTexture(target, texture);\n \t}\n \tpublic void glBlendFunc (int sfactor, int dfactor) {", "sourceBeforeFix": "GL.glCopyTexImage2DEXT(target,level,internalformat,x,y,width,height,border)", "sourceAfterFix": "GL.glCopyTexImage2D(target,level,internalformat,x,y,width,height,border)"}
{"fixCommitSHA1": "fd29cda72cdc495f652731a8c94198cb08fb380a", "projectName": "brianfrankcooper.YCSB", "bugType": "Change Identifier Used", "problem": "           measurements.get((int)(totalOps*0.9999)).value());\n     }\n    exportReturnCodes(exporter);\n   }\n   @Override", "fixed": "           measurements.get((int)(totalOps*0.9999)).value());\n     }\n    exportStatusCounts(exporter);\n   }\n   @Override", "sourceBeforeFix": "exportReturnCodes(exporter)", "sourceAfterFix": "exportStatusCounts(exporter)"}
{"fixCommitSHA1": "b615640bd31e6a69102f1bb9c3649564669baab0", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "         final PathAddress address = PathAddress.pathAddress(PathAddress.pathAddress(parentAddress), PathElement.pathElement(CommonAttributes.REMOTE_OUTBOUND_CONNECTION, name));\n        operations.add(getConnectionAddOperation(name, outboundSocketBindingRef, address));\n         final EnumSet<Element> visited = EnumSet.noneOf(Element.class);\n         while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {", "fixed": "         final PathAddress address = PathAddress.pathAddress(PathAddress.pathAddress(parentAddress), PathElement.pathElement(CommonAttributes.REMOTE_OUTBOUND_CONNECTION, name));\n        operations.add(getConnectionAddOperation(name, outboundSocketBindingRef, username, securityRealm, address));\n         final EnumSet<Element> visited = EnumSet.noneOf(Element.class);\n         while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {", "sourceBeforeFix": "getConnectionAddOperation(name,outboundSocketBindingRef,address)", "sourceAfterFix": "getConnectionAddOperation(name,outboundSocketBindingRef,username,securityRealm,address)"}
{"fixCommitSHA1": "8abfa48f2eb5edaf3f5a2cc2350e4e3c232f4152", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "         \n        public FrameShower(Component parent, final String msg) {\n             this.parent = parent;\n             this.msg = msg;\n         }", "fixed": "         \n        FrameShower(Component parent, final String msg) {\n             this.parent = parent;\n             this.msg = msg;\n         }", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "3e73a1d028e5bf0484c366150bab67037b7e33ec", "projectName": "wildfly.wildfly", "bugType": "More Specific If", "problem": "     private static ServiceName installSessionManagerFactory(ServiceTarget target, ServiceName deploymentServiceName, String deploymentName, Module module, JBossWebMetaData metaData, ServletContainerService servletContainerService) {\n         Integer maxActiveSessions = metaData.getMaxActiveSessions();\n        if(maxActiveSessions == null) {\n             maxActiveSessions = servletContainerService.getMaxSessions();\n         }\n         ServiceName name = deploymentServiceName.append(\"session\");", "fixed": "     private static ServiceName installSessionManagerFactory(ServiceTarget target, ServiceName deploymentServiceName, String deploymentName, Module module, JBossWebMetaData metaData, ServletContainerService servletContainerService) {\n         Integer maxActiveSessions = metaData.getMaxActiveSessions();\n        if(maxActiveSessions == null && servletContainerService != null) {\n             maxActiveSessions = servletContainerService.getMaxSessions();\n         }\n         ServiceName name = deploymentServiceName.append(\"session\");", "sourceBeforeFix": "maxActiveSessions == null", "sourceAfterFix": "maxActiveSessions == null && servletContainerService != null"}
{"fixCommitSHA1": "16b924b95c9d99fa24d72fa649d42bc77d9528f2", "projectName": "apache.camel", "bugType": "Change Boolean Literal", "problem": "     }\n     public boolean isSingleton() {\n        return false;\n     }\n     public String getPath() {", "fixed": "     }\n     public boolean isSingleton() {\n        return true;\n     }\n     public String getPath() {", "sourceBeforeFix": "return false; ", "sourceAfterFix": "return true; "}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "5221c15e183cb7029a305766d137d909f77e8941", "projectName": "google.guice", "bugType": "Wrong Function Name", "problem": "     for (int i = 0; i < sourcesAsStrings.length; i++) {\n       sourcesAsStrings[i] = Errors.convert(sourcesAsStrings[i]).toString();\n     }\n    return new Message(ImmutableList.of(sourcesAsStrings), message, cause);\n   }\n   private static final long serialVersionUID = 0;", "fixed": "     for (int i = 0; i < sourcesAsStrings.length; i++) {\n       sourcesAsStrings[i] = Errors.convert(sourcesAsStrings[i]).toString();\n     }\n    return new Message(ImmutableList.copyOf(sourcesAsStrings), message, cause);\n   }\n   private static final long serialVersionUID = 0;", "sourceBeforeFix": "ImmutableList.of(sourcesAsStrings)", "sourceAfterFix": "ImmutableList.copyOf(sourcesAsStrings)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites(String id) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"favorites/\" + id + \".json\", new PostParameter[0], true));\n     }\n     /**", "fixed": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites(String id) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"favorites/\" + id + \".json\", new PostParameter[0], true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline.json\",true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": " };\n   \n  private final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler", "fixed": " };\n   \n  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "f135cc4188dd173e8fc175bc5d26cf1a970ac39e", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "                                 response.get(FAILURE_DESCRIPTION).set(\"Operation handler failed to complete\");\n                             }\n                             response.get(OUTCOME).set(FAILED);\n                            response.set(ROLLED_BACK).set(true);\n                             return resultAction = ResultAction.ROLLBACK;", "fixed": "                                 response.get(FAILURE_DESCRIPTION).set(\"Operation handler failed to complete\");\n                             }\n                             response.get(OUTCOME).set(FAILED);\n                            response.get(ROLLED_BACK).set(true);\n                             return resultAction = ResultAction.ROLLBACK;", "sourceBeforeFix": "response.set(ROLLED_BACK)", "sourceAfterFix": "response.get(ROLLED_BACK)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "fixed": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "sourceBeforeFix": "GL20.glUniform2(location,toFloatBuffer(v,offset,count << 1))", "sourceAfterFix": "GL20.glUniform2fv(location,toFloatBuffer(v,offset,count << 1))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n     */\n     public ResponseList<DirectMessage> getDirectMessages() throws TwitterException {\n        return DirectMessage.constructDirectMessages(get(getBaseURL() + \"direct_messages.json\", true));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n     */\n     public ResponseList<DirectMessage> getDirectMessages() throws TwitterException {\n        return DirectMessage.createDirectMessageList(get(getBaseURL() + \"direct_messages.json\", true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))"}
{"fixCommitSHA1": "3c8d3e908b01f47c69600a235fb7e5173f4f0d7b", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "   }\n   \n  public final Iterable<ObjectType> getExtendedInterfaces() {\n     return extendedInterfaces;\n   }", "fixed": "   }\n   \n  public final ImmutableList<ObjectType> getExtendedInterfaces() {\n     return extendedInterfaces;\n   }", "sourceBeforeFix": "Iterable<ObjectType>", "sourceAfterFix": "ImmutableList<ObjectType>"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform1iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform1(location, v);\r\n \t}\r\n \t@Override\r\n \tpublic void glUniform1iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform1(location, toIntBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform2f (int location, float x, float y) {\r", "fixed": " \t}\r\n \tpublic void glUniform1iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform1iv(location, v);\r\n \t}\r\n \t@Override\r\n \tpublic void glUniform1iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform1iv(location, toIntBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform2f (int location, float x, float y) {\r", "sourceBeforeFix": "GL11.glGetFloat(pname,params)", "sourceAfterFix": "GL11.glGetFloatv(pname,params)"}
{"fixCommitSHA1": "40e6bbe55f7141bd66a52261e108a1f3b575ca6f", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "             }\n             if (!replaced) {\n                 if (isEventsEnabled()) {\n                    publishEvent(createCacheCompleteEvent(key, completionId));\n                 }\n             }\n             onReplace(key, oldValue, newValue, expiryPolicy, source, false, record, isExpired, replaced);", "fixed": "             }\n             if (!replaced) {\n                 if (isEventsEnabled()) {\n                    publishEvent(createCacheCompleteEvent(toEventData(key), completionId));\n                 }\n             }\n             onReplace(key, oldValue, newValue, expiryPolicy, source, false, record, isExpired, replaced);", "sourceBeforeFix": "toHeapData(key)", "sourceAfterFix": "toEventData(key)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "9f0d922f042d7342252ad2e1476ae45002c89cfd", "projectName": "openhab.openhab", "bugType": "Change Numeric Literal", "problem": "                         command.toString(), repeatCount);\r\n                 if (command.compareTo(oldPercent) > 0) {\r\n                     for (int i = 0; i < repeatCount; i++) {\r\n                        Thread.sleep(50);\r\n                         if (BindingType.brightness.equals(type)) {\r\n                             sendIncrease(bulb, rgbwSteps, bridgeId);\r\n                         } else if (BindingType.colorTemperature.equals(type)) {\r", "fixed": "                         command.toString(), repeatCount);\r\n                 if (command.compareTo(oldPercent) > 0) {\r\n                     for (int i = 0; i < repeatCount; i++) {\r\n                        Thread.sleep(100);\r\n                         if (BindingType.brightness.equals(type)) {\r\n                             sendIncrease(bulb, rgbwSteps, bridgeId);\r\n                         } else if (BindingType.colorTemperature.equals(type)) {\r", "sourceBeforeFix": "Thread.sleep(50)", "sourceAfterFix": "Thread.sleep(100)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15846, value = \"Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.\")\n     String invalidRolloutPlanLess(String name, String propertyName, int value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10846, value = \"Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.\")\n     String invalidRolloutPlanLess(String name, String propertyName, int value);\n     /**", "sourceBeforeFix": "id=15864", "sourceAfterFix": "id=10864"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface SftpEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedSftpEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface SftpEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedSftpEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedMicrometerEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default MicrometerEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedMicrometerEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default MicrometerEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "79946366e1ab141ef2b595e0079dcac7b913da2b", "projectName": "checkstyle.checkstyle", "bugType": "Wrong Function Name", "problem": "         checkConfig.addAttribute(\"matchDirectoryStructure\", \"false\");\n         final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;\n        verify(checkConfig, getPath(\"InputPackageDeclarationDiffDirectory.java\"), expected);\n     }\n     @Test", "fixed": "         checkConfig.addAttribute(\"matchDirectoryStructure\", \"false\");\n         final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;\n        verify(checkConfig, getNonCompilablePath(\"InputPackageDeclarationDiffDirectory.java\"),\n                expected);\n     }\n     @Test", "sourceBeforeFix": "getPath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\")", "sourceAfterFix": "getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\")"}
{"fixCommitSHA1": "0d3c78b6f28fb3cad00c12605209c524702adb0a", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "             if (record == null || isExpired) {\n                 replaced = false;\n                 if (isEventsEnabled()) {\n                    publishEvent(createCacheCompleteEvent(key, completionId));\n                 }\n             } else {\n                 replaced = updateRecordWithExpiry(key, value, record, expiryPolicy,", "fixed": "             if (record == null || isExpired) {\n                 replaced = false;\n                 if (isEventsEnabled()) {\n                    publishEvent(createCacheCompleteEvent(toEventData(key), completionId));\n                 }\n             } else {\n                 replaced = updateRecordWithExpiry(key, value, record, expiryPolicy,", "sourceBeforeFix": "toHeapData(key)", "sourceAfterFix": "toEventData(key)"}
{"fixCommitSHA1": "e7eb9f2c98dd576658bf0160d2ef4720740897ab", "projectName": "Graylog2.graylog2-server", "bugType": "Change Identifier Used", "problem": "         final Role roleToUpdate = roleService.load(name);\n         roleToUpdate.setName(role.name());\n        roleToUpdate.setDescription(role.description().get());\n         roleToUpdate.setPermissions(role.permissions());\n         try {\n             roleService.save(roleToUpdate);", "fixed": "         final Role roleToUpdate = roleService.load(name);\n         roleToUpdate.setName(role.name());\n        roleToUpdate.setDescription(role.description().orNull());\n         roleToUpdate.setPermissions(role.permissions());\n         try {\n             roleService.save(roleToUpdate);", "sourceBeforeFix": "role.description().get()", "sourceAfterFix": "role.description().orNull()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  private final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "bc0df834a2fcab61542d1253e4daddcd47cafe3d", "projectName": "openmrs.openmrs-core", "bugType": "Same Function More Args", "problem": " \t\tif (globalLocaleList == null) {\r\n \t\t\tglobalLocaleList = new GlobalLocaleList();\r\n \t\t\taddGlobalPropertyListener(globalLocaleList);\r\n\t\t\tString currentPropertyValue = getGlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_LOCALE_ALLOWED_LIST);\r\n \t\t\tGlobalProperty allowedLocalesProperty = new GlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_LOCALE_ALLOWED_LIST,\r\n \t\t\t        currentPropertyValue);\r\n \t\t\tglobalLocaleList.globalPropertyChanged(allowedLocalesProperty);\r", "fixed": " \t\tif (globalLocaleList == null) {\r\n \t\t\tglobalLocaleList = new GlobalLocaleList();\r\n \t\t\taddGlobalPropertyListener(globalLocaleList);\r\n\t\t\tString currentPropertyValue = getGlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_LOCALE_ALLOWED_LIST, \"\");\r\n \t\t\tGlobalProperty allowedLocalesProperty = new GlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_LOCALE_ALLOWED_LIST,\r\n \t\t\t        currentPropertyValue);\r\n \t\t\tglobalLocaleList.globalPropertyChanged(allowedLocalesProperty);\r", "sourceBeforeFix": "getGlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_LOCALE_ALLOWED_LIST)", "sourceAfterFix": "getGlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_LOCALE_ALLOWED_LIST,\"\")"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15847, value = \"Interrupted waiting for result from host %s\")\n     String interruptedAwaitingResultFromHost(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10847, value = \"Interrupted waiting for result from host %s\")\n     String interruptedAwaitingResultFromHost(String name);\n     /**", "sourceBeforeFix": "id=15866", "sourceAfterFix": "id=10866"}
{"fixCommitSHA1": "1c93b2a8d7e7dc8d7a1620c5566e7eb20df8f0ec", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "     protected CamelContext createCamelContext() throws Exception {\n         NagiosEventNotifier notifier = new NagiosEventNotifier();\n         notifier.getConfiguration().setHost(\"localhost\");\n        notifier.getConfiguration().setPort(25667);\n         notifier.getConfiguration().setPassword(\"password\");\n         CamelContext context = super.createCamelContext();", "fixed": "     protected CamelContext createCamelContext() throws Exception {\n         NagiosEventNotifier notifier = new NagiosEventNotifier();\n         notifier.getConfiguration().setHost(\"localhost\");\n        notifier.getConfiguration().setPort(25669);\n         notifier.getConfiguration().setPassword(\"password\");\n         CamelContext context = super.createCamelContext();", "sourceBeforeFix": "new NagiosNscaStub(25667,\"password\")", "sourceAfterFix": "new NagiosNscaStub(25669,\"password\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15841, value = \"Exception getting result from server %s: %s\")\n     String exceptionAwaitingResultFromServer(ServerIdentity server, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10841, value = \"Exception getting result from server %s: %s\")\n     String exceptionAwaitingResultFromServer(ServerIdentity server, String message);\n     /**", "sourceBeforeFix": "id=15847", "sourceAfterFix": "id=10847"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface HazelcastQueueEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedHazelcastQueueEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface HazelcastQueueEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedHazelcastQueueEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 15830, value = \"Registration of remote hosts is not supported on slave host controllers\")\n     String slaveControllerCannotAcceptOtherSlaves();\n     /**", "fixed": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 10830, value = \"Registration of remote hosts is not supported on slave host controllers\")\n     String slaveControllerCannotAcceptOtherSlaves();\n     /**", "sourceBeforeFix": "id=15841", "sourceAfterFix": "id=10841"}
{"fixCommitSHA1": "fcea9dfeb6b2e12cb04602baac67b3a1c3cb58c9", "projectName": "wildfly.wildfly", "bugType": "Same Function More Args", "problem": "     SimpleAttributeDefinition VALUE = SimpleAttributeDefinitionBuilder.create(\"value\", ModelType.STRING).build();\n    SimpleAttributeDefinition NEW_LEVEL = SimpleAttributeDefinitionBuilder.create(\"new-level\", ModelType.STRING).\n             setCorrector(CaseParameterCorrector.TO_UPPER).\n             setValidator(new LogLevelValidator(true)).\n             build();", "fixed": "     SimpleAttributeDefinition VALUE = SimpleAttributeDefinitionBuilder.create(\"value\", ModelType.STRING).build();\n    SimpleAttributeDefinition NEW_LEVEL = SimpleAttributeDefinitionBuilder.create(\"new-level\", ModelType.STRING, true).\n             setCorrector(CaseParameterCorrector.TO_UPPER).\n             setValidator(new LogLevelValidator(true)).\n             build();", "sourceBeforeFix": "SimpleAttributeDefinitionBuilder.create(\"new-level\",ModelType.STRING)", "sourceAfterFix": "SimpleAttributeDefinitionBuilder.create(\"new-level\",ModelType.STRING,true)"}
{"fixCommitSHA1": "8d4cd57b5d5f586d70346593c507430c07905dcb", "projectName": "Alluxio.alluxio", "bugType": "Same Function More Args", "problem": "   @Test\n   public void createAtomic() throws IOException {\n     String testFile = PathUtils.concatPath(mUnderfsAddress, \"createAtomic\");\n    OutputStream stream = mUfs.create(testFile);\n     stream.write(TEST_BYTES);\n     Assert.assertFalse(mUfs.isFile(testFile));\n     stream.close();", "fixed": "   @Test\n   public void createAtomic() throws IOException {\n     String testFile = PathUtils.concatPath(mUnderfsAddress, \"createAtomic\");\n    OutputStream stream = mUfs.create(testFile, CreateOptions.defaults().setEnsureAtomic(true));\n     stream.write(TEST_BYTES);\n     Assert.assertFalse(mUfs.isFile(testFile));\n     stream.close();", "sourceBeforeFix": "mUfs.create(testFile)", "sourceAfterFix": "mUfs.create(testFile,CreateOptions.defaults().setEnsureAtomic(true))"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should return default value if property name does not exist\n \t * @should not fail with null default value\n \t */\n\tpublic String getGlobalProperty(String propertyName, String defaultValue) throws APIException;\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>", "fixed": " \t * @should return default value if property name does not exist\n \t * @should not fail with null default value\n \t */\n\tpublic String getGlobalProperty(String propertyName, String defaultValue);\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "a4d8f930af1f17a6c48a9abd94f49e5fd719fc31", "projectName": "netty.netty", "bugType": "Wrong Function Name", "problem": "         if (value instanceof AsciiString) {\n             return ((AsciiString) value).parseShort();\n         }\n        return Short.valueOf(value.toString());\n     }\n     @Override", "fixed": "         if (value instanceof AsciiString) {\n             return ((AsciiString) value).parseShort();\n         }\n        return Short.parseShort(value.toString());\n     }\n     @Override", "sourceBeforeFix": "Byte.valueOf(value.toString())", "sourceAfterFix": "Byte.parseByte(value.toString())"}
{"fixCommitSHA1": "5d9193eb8fcb699722980d5e5680557553c3ee39", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "     @Before\n     public void setup() throws Exception {\n         SimpleRegistry registry = new SimpleRegistry();\n        registry.put(\"kinesisClient\", amazonKinesisClient);\n         camelContext = new DefaultCamelContext(registry);\n     }", "fixed": "     @Before\n     public void setup() throws Exception {\n         SimpleRegistry registry = new SimpleRegistry();\n        registry.bind(\"kinesisClient\", amazonKinesisClient);\n         camelContext = new DefaultCamelContext(registry);\n     }", "sourceBeforeFix": "registry.put(\"kinesisClient\",amazonKinesisClient)", "sourceAfterFix": "registry.bind(\"kinesisClient\",amazonKinesisClient)"}
{"fixCommitSHA1": "d3eda036ed839d344415dbaab471fef4472a8d9b", "projectName": "apache.storm", "bugType": "Change Identifier Used", "problem": "         for(MessageAndOffset msg: msgs) {\n             _pending.add(_emittedToOffset);\n             _waitingToEmit.add(new MessageAndRealOffset(msg.message(), _emittedToOffset));\n            _emittedToOffset = msg.offset();\n         }\n         if(numMessages>0) {\n           LOG.info(\"Added \" + numMessages + \" messages from Kafka: \" + _consumer.host() + \":\" + _partition.partition + \" to internal buffers\");", "fixed": "         for(MessageAndOffset msg: msgs) {\n             _pending.add(_emittedToOffset);\n             _waitingToEmit.add(new MessageAndRealOffset(msg.message(), _emittedToOffset));\n            _emittedToOffset = msg.nextOffset();\n         }\n         if(numMessages>0) {\n           LOG.info(\"Added \" + numMessages + \" messages from Kafka: \" + _consumer.host() + \":\" + _partition.partition + \" to internal buffers\");", "sourceBeforeFix": "msg.offset()", "sourceAfterFix": "msg.nextOffset()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  private final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "f8c20919f9c2e18e48142c2712e34298f98b983e", "projectName": "spring-projects.spring-boot", "bugType": "Wrong Function Name", "problem": " \t@Test\n \tpublic void startServletAndFilter() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n\t\tthis.container = factory.getEmbdeddedServletContainer(\n \t\t\t\texampleServletRegistration(), new FilterRegistrationBean(\n \t\t\t\t\t\tnew ExampleFilter()));\nassertThat(getResponse(\"http:", "fixed": " \t@Test\n \tpublic void startServletAndFilter() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n\t\tthis.container = factory.getEmbeddedServletContainer(\n \t\t\t\texampleServletRegistration(), new FilterRegistrationBean(\n \t\t\t\t\t\tnew ExampleFilter()));\nassertThat(getResponse(\"http:", "sourceBeforeFix": "factory.getEmbdeddedServletContainer()", "sourceAfterFix": "factory.getEmbeddedServletContainer()"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStream<OUT> writeAsText(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsText<OUT> format, long millis, OUT endTuple) {\n\t\tDataStream<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByMillis<OUT>(\n \t\t\t\tpath, format, millis, endTuple), null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "fixed": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStreamSink<OUT> writeAsText(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsText<OUT> format, long millis, OUT endTuple) {\n\t\tDataStreamSink<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByMillis<OUT>(\n \t\t\t\tpath, format, millis, endTuple), null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "2921e7bf0d74a65fdcc71d3ce3053037d14e4d44", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "             String sessionTTL = getParam(\"session-ttl-seconds\");\n             if (sessionTTL != null) {\n                 MapConfig mapConfig = hzConfig.getMapConfig(clusterMapName);\n                mapConfig.setTimeToLiveSeconds(Integer.valueOf(sessionTTL));\n                 hzConfig.addMapConfig(mapConfig);\n             }\n         } catch (UnsupportedOperationException ignored) {", "fixed": "             String sessionTTL = getParam(\"session-ttl-seconds\");\n             if (sessionTTL != null) {\n                 MapConfig mapConfig = hzConfig.getMapConfig(clusterMapName);\n                mapConfig.setTimeToLiveSeconds(Integer.parseInt(sessionTTL));\n                 hzConfig.addMapConfig(mapConfig);\n             }\n         } catch (UnsupportedOperationException ignored) {", "sourceBeforeFix": "Integer.valueOf(sessionTTL)", "sourceAfterFix": "Integer.parseInt(sessionTTL)"}
{"fixCommitSHA1": "e08f74620ba29298d59c97e7327cbe51fbd5b39e", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t\tpressedButton = button;\r\n \t\ttouchDownX = x;\r\n \t\ttouchDownY = y;\r\n\t\tvisualPressedTime = TimeUtils.nanoTime() + visualPressedDuration * 1000000000;\r\n \t\treturn true;\r\n \t}\r", "fixed": " \t\tpressedButton = button;\r\n \t\ttouchDownX = x;\r\n \t\ttouchDownY = y;\r\n\t\tvisualPressedTime = TimeUtils.millis() + (long)(visualPressedDuration * 1000);\r\n \t\treturn true;\r\n \t}\r", "sourceBeforeFix": "TimeUtils.nanoTime()", "sourceAfterFix": "TimeUtils.millis()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": "grammarBuilder.append(\"  | '(' e ')'   {$v = $e.v;}\ngrammarBuilder.append(\"  | left=e INC  {$v = $left.v + 1;}\ngrammarBuilder.append(\"  | left=e DEC  {$v = $left.v - 1;}\n\t\tgrammarBuilder.append(\"  | ID          {$v = 3}\n \t\tgrammarBuilder.append(\"  ;\\n\");\n \t\tgrammarBuilder.append(\"ID : 'a'..'z'+ ;\\n\");\n \t\tgrammarBuilder.append(\"INT : '0'..'9'+ ;\\n\");", "fixed": "grammarBuilder.append(\"  | '(' e ')'   {$v = $e.v;}\ngrammarBuilder.append(\"  | left=e INC  {$v = $left.v + 1;}\ngrammarBuilder.append(\"  | left=e DEC  {$v = $left.v - 1;}\n\t\tgrammarBuilder.append(\"  | ID          {$v = 3;}\n \t\tgrammarBuilder.append(\"  ;\\n\");\n \t\tgrammarBuilder.append(\"ID : 'a'..'z'+ ;\\n\");\n \t\tgrammarBuilder.append(\"INT : '0'..'9'+ ;\\n\");", "sourceBeforeFix": "new StringBuilder(254)", "sourceAfterFix": "new StringBuilder(253)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15867, value = \"Cannot use %s with the same value for parameters %s and %s. \" +\n             \"Use %s to redeploy the same content or %s to replace content with a new version with the same name.\")\n     String cannotUseSameValueForParameters(String opName, String param1, String param2, String redeployOpName, String replaceOpName);", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10867, value = \"Cannot use %s with the same value for parameters %s and %s. \" +\n             \"Use %s to redeploy the same content or %s to replace content with a new version with the same name.\")\n     String cannotUseSameValueForParameters(String opName, String param1, String param2, String redeployOpName, String replaceOpName);", "sourceBeforeFix": "id=15839", "sourceAfterFix": "id=10839"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "fixed": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "sourceBeforeFix": "GL20.glUniform1(location,toIntBuffer(v,offset,count))", "sourceAfterFix": "GL20.glUniform1iv(location,toIntBuffer(v,offset,count))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "04ad420f594bedd8cd5c40160d67585f70686a9c", "projectName": "aws.aws-sdk-java", "bugType": "Change Identifier Used", "problem": "                 try {\n                     return unmarshaller.unmarshall(jsonContent.jsonNode);\n                 } catch (Exception e) {\n                    LOG.error(\"Unable to unmarshall exception content\", e);\n                     return null;\n                 }\n             }", "fixed": "                 try {\n                     return unmarshaller.unmarshall(jsonContent.jsonNode);\n                 } catch (Exception e) {\n                    LOG.info(\"Unable to unmarshall exception content\", e);\n                     return null;\n                 }\n             }", "sourceBeforeFix": "LOG.error(\"Unable to unmarshall exception content\",e)", "sourceAfterFix": "LOG.info(\"Unable to unmarshall exception content\",e)"}
{"fixCommitSHA1": "e2ac6f8c326490b85b9ad9e0a67d53ffb7fc2842", "projectName": "Atmosphere.atmosphere", "bugType": "Change Identifier Used", "problem": "     public final static String SUSPEND = NettyCometSupport.class.getName() + \".suspend\";\n     public final static String RESUME = NettyCometSupport.class.getName() + \".resume\";\n    private static final Logger logger = LoggerFactory.getLogger(BlockingIOCometSupport.class);\n     public NettyCometSupport(AtmosphereConfig config) {\n         super(config);", "fixed": "     public final static String SUSPEND = NettyCometSupport.class.getName() + \".suspend\";\n     public final static String RESUME = NettyCometSupport.class.getName() + \".resume\";\n    private static final Logger logger = LoggerFactory.getLogger(NettyCometSupport.class);\n     public NettyCometSupport(AtmosphereConfig config) {\n         super(config);", "sourceBeforeFix": "BlockingIOCometSupport.class", "sourceAfterFix": "NettyCometSupport.class"}
{"fixCommitSHA1": "1daccd54d2ff2ecdb21d8c60268600c37febbb70", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "       } else {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           for (int i = 0; i < BLOCKS_PER_FILE; i ++) {\n             buf.DATA.get(mBuf.array());", "fixed": "       } else {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           for (int i = 0; i < BLOCKS_PER_FILE; i ++) {\n             buf.DATA.get(mBuf.array());", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "c26f75c7940a77e85f38406258c453a08ff75376", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "         });\n         MockEndpoint result = MockEndpoint.resolve(ctx, \"mock:result\");\n         clientMock.setScheduler(ctx.getExecutorServiceManager().newScheduledThreadPool(clientMock, \"ClientMock Scheduler\", 1));\n        registry.put(\"amazonSQSClient\", clientMock);\n         result.expectedMessageCount(0);", "fixed": "         });\n         MockEndpoint result = MockEndpoint.resolve(ctx, \"mock:result\");\n         clientMock.setScheduler(ctx.getExecutorServiceManager().newScheduledThreadPool(clientMock, \"ClientMock Scheduler\", 1));\n        registry.bind(\"amazonSQSClient\", clientMock);\n         result.expectedMessageCount(0);", "sourceBeforeFix": "registry.put(\"amazonSQSClient\",clientMock)", "sourceAfterFix": "registry.bind(\"amazonSQSClient\",clientMock)"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsCsv(String path, int batchSize) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), batchSize, null);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsCsv(String path, int batchSize) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), batchSize, null);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15839, value = \"Operation failed or was rolled back on all servers.\")\n     String operationFailedOrRolledBack();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10839, value = \"Operation failed or was rolled back on all servers.\")\n     String operationFailedOrRolledBack();\n     /**", "sourceBeforeFix": "id=15868", "sourceAfterFix": "id=10868"}
{"fixCommitSHA1": "40e1d9174e1dd15ed95b03a4cf8944384b1aaa2c", "projectName": "apache.hbase", "bugType": "Same Function More Args", "problem": "     MutableLong previousPushedSeqId = pushed.getUnchecked(encodedNameAsString);\n     if (seqId == previousPushedSeqId.longValue() + 1) {\n      LOG.trace(\"The sequence id for {} is continuous, pass\");\n       previousPushedSeqId.increment();\n       return true;\n     }", "fixed": "     MutableLong previousPushedSeqId = pushed.getUnchecked(encodedNameAsString);\n     if (seqId == previousPushedSeqId.longValue() + 1) {\n      LOG.trace(\"The sequence id for {} is continuous, pass\", entry);\n       previousPushedSeqId.increment();\n       return true;\n     }", "sourceBeforeFix": "LOG.trace(\"The sequence id for {} is continuous, pass\")", "sourceAfterFix": "LOG.trace(\"The sequence id for {} is continuous, pass\",entry)"}
{"fixCommitSHA1": "a37ff1aed07d334d9a8808558c1498d274fbb6a6", "projectName": "gephi.gephi", "bugType": "Change Numeric Literal", "problem": "     private Color color = new Color(0.6f, 0.6f, 0.6f);\n    private float size = 1f;\n     public ActionsToolbar() {\n         initDesign();", "fixed": "     private Color color = new Color(0.6f, 0.6f, 0.6f);\n    private float size = 10.0f;\n     public ActionsToolbar() {\n         initDesign();", "sourceBeforeFix": "size=1f", "sourceAfterFix": "size=10.0f"}
{"fixCommitSHA1": "038ea1803bae1cf3be279b36395b4de4e0ff39b5", "projectName": "openhab.openhab", "bugType": "Wrong Function Name", "problem": " \t */\n \tpublic GarageDoorData getGarageData() throws InvalidLoginException,\n \t\t\tIOException {\n\t\tlogger.debug(\"Retreiveing door data\");\n \t\tString url = String.format(\n \t\t\t\t\"%s/api/v4/userdevicedetails/get?appId=%s&SecurityToken=%s\",\n \t\t\t\tWEBSITE, enc(appId), enc(getSecurityToken()));", "fixed": " \t */\n \tpublic GarageDoorData getGarageData() throws InvalidLoginException,\n \t\t\tIOException {\n\t\tlogger.trace(\"Retreiveing door data\");\n \t\tString url = String.format(\n \t\t\t\t\"%s/api/v4/userdevicedetails/get?appId=%s&SecurityToken=%s\",\n \t\t\t\tWEBSITE, enc(appId), enc(getSecurityToken()));", "sourceBeforeFix": "logger.debug(\"Received MyQ  JSON: {}\",dataString)", "sourceAfterFix": "logger.trace(\"Received MyQ  JSON: {}\",dataString)"}
{"fixCommitSHA1": "423fca2f16ef73c1e4bce7cf11660a510be1456e", "projectName": "apache.hbase", "bugType": "Wrong Function Name", "problem": "       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Current assignment of \" +\n          Bytes.toString(info.getRegionName()) +\n           \" is not valid: serverInfo: \" + storedInfo + \", passed startCode: \" +\n           startCode + \", storedInfo.startCode: \" +\n           ((storedInfo != null)? storedInfo.getStartCode(): -1) +", "fixed": "       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Current assignment of \" +\n          info.getRegionNameAsString() +\n           \" is not valid: serverInfo: \" + storedInfo + \", passed startCode: \" +\n           startCode + \", storedInfo.startCode: \" +\n           ((storedInfo != null)? storedInfo.getStartCode(): -1) +", "sourceBeforeFix": "info.getRegionName()", "sourceAfterFix": "info.getRegionNameAsString()"}
{"fixCommitSHA1": "4f952dac30892ce9458bee0403d908ee642c4481", "projectName": "wildfly.wildfly", "bugType": "Change Boolean Literal", "problem": "                     .setXmlName(Attribute.MODE.getLocalName())\n                     .setAllowExpression(true)\n                     .setFlags(AttributeAccess.Flag.RESTART_ALL_SERVICES)\n                    .setValidator(new EnumValidator<TransactionMode>(TransactionMode.class, true, false))\n                     .setDefaultValue(new ModelNode().set(TransactionMode.NONE.name()))\n                     .build();\n     SimpleAttributeDefinition MODIFICATION_QUEUE_SIZE =", "fixed": "                     .setXmlName(Attribute.MODE.getLocalName())\n                     .setAllowExpression(true)\n                     .setFlags(AttributeAccess.Flag.RESTART_ALL_SERVICES)\n                    .setValidator(new EnumValidator<TransactionMode>(TransactionMode.class, true, true))\n                     .setDefaultValue(new ModelNode().set(TransactionMode.NONE.name()))\n                     .build();\n     SimpleAttributeDefinition MODIFICATION_QUEUE_SIZE =", "sourceBeforeFix": "new EnumValidator<TransactionMode>(TransactionMode.class,true,false)", "sourceAfterFix": "new EnumValidator<TransactionMode>(TransactionMode.class,true,true)"}
{"fixCommitSHA1": "28e091abd22c4fd873287e54f41667591b2fbd97", "projectName": "xetorthio.jedis", "bugType": "Change Modifier", "problem": " public class JedisByteHashMap implements Map<byte[], byte[]>, Cloneable, Serializable {\n   private static final long serialVersionUID = -6971431362627219416L;\n  private Map<ByteArrayWrapper, byte[]> internalMap = new HashMap<ByteArrayWrapper, byte[]>();\n   @Override\n   public void clear() {", "fixed": " public class JedisByteHashMap implements Map<byte[], byte[]>, Cloneable, Serializable {\n   private static final long serialVersionUID = -6971431362627219416L;\n  private transient Map<ByteArrayWrapper, byte[]> internalMap = new HashMap<ByteArrayWrapper, byte[]>();\n   @Override\n   public void clear() {", "sourceBeforeFix": "2", "sourceAfterFix": "130"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedCxfEndpointBuilder\n             extends\n                 AdvancedCxfEndpointConsumerBuilder, AdvancedCxfEndpointProducerBuilder {\n         default CxfEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedCxfEndpointBuilder\n             extends\n                 AdvancedCxfEndpointConsumerBuilder, AdvancedCxfEndpointProducerBuilder {\n         default CxfEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform1iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform1(location, v);\r\n \t}\r\n \t@Override\r\n \tpublic void glUniform1iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform1(location, toIntBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform2f (int location, float x, float y) {\r", "fixed": " \t}\r\n \tpublic void glUniform1iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform1iv(location, v);\r\n \t}\r\n \t@Override\r\n \tpublic void glUniform1iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform1iv(location, toIntBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform2f (int location, float x, float y) {\r", "sourceBeforeFix": "GL20.glUniform4(location,v)", "sourceAfterFix": "GL20.glUniform4fv(location,v)"}
{"fixCommitSHA1": "d76ba8118cca9f2f1c4f0e89e2dd15a9db02f7e8", "projectName": "libgdx.libgdx", "bugType": "Change Binary Operator", "problem": " \t\t\tcase MotionEvent.ACTION_DOWN:\r\n \t\t\tcase MotionEvent.ACTION_POINTER_DOWN:\r\nrealPointerIndex = input.getFreePointerIndex();\n\t\t\t\tif (realPointerIndex > AndroidInput.NUM_TOUCHES) break;\r\n \t\t\t\tinput.realId[realPointerIndex] = pointerId;\r\n \t\t\t\tx = (int)event.getX(pointerIndex);\r\n \t\t\t\ty = (int)event.getY(pointerIndex);\r", "fixed": " \t\t\tcase MotionEvent.ACTION_DOWN:\r\n \t\t\tcase MotionEvent.ACTION_POINTER_DOWN:\r\nrealPointerIndex = input.getFreePointerIndex();\n\t\t\t\tif (realPointerIndex >= AndroidInput.NUM_TOUCHES) break;\r\n \t\t\t\tinput.realId[realPointerIndex] = pointerId;\r\n \t\t\t\tx = (int)event.getX(pointerIndex);\r\n \t\t\t\ty = (int)event.getY(pointerIndex);\r", "sourceBeforeFix": "realPointerIndex > AndroidInput.NUM_TOUCHES", "sourceAfterFix": "realPointerIndex >= AndroidInput.NUM_TOUCHES"}
{"fixCommitSHA1": "46125686874f5b69bcdb6f4c9bef3f900a7057c6", "projectName": "netty.netty", "bugType": "Change Numeric Literal", "problem": "                         processSelectedKeys(selector.selectedKeys());\n                     }\n                     long currentTimeNanos = System.nanoTime();\n                    if (currentTimeNanos - lastConnectTimeoutCheckTimeNanos >= 500 * 1000000L) {\n                         lastConnectTimeoutCheckTimeNanos = currentTimeNanos;\n                         processConnectTimeout(selector.keys(), currentTimeNanos);\n                     }", "fixed": "                         processSelectedKeys(selector.selectedKeys());\n                     }\n                     long currentTimeNanos = System.nanoTime();\n                    if (currentTimeNanos - lastConnectTimeoutCheckTimeNanos >= 10 * 1000000L) {\n                         lastConnectTimeoutCheckTimeNanos = currentTimeNanos;\n                         processConnectTimeout(selector.keys(), currentTimeNanos);\n                     }", "sourceBeforeFix": "selector.select(500)", "sourceAfterFix": "selector.select(10)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "780e4a27f74b52de0a0fff72c71d0006c60a2165", "projectName": "druid-io.druid", "bugType": "Change Numeric Literal", "problem": "         )\n     );\n    queryNotifyLatch.await(25, TimeUnit.MILLISECONDS);\n     Assert.assertEquals(1, factory.getSegmentReferences().size());", "fixed": "         )\n     );\n    queryNotifyLatch.await(1000, TimeUnit.MILLISECONDS);\n     Assert.assertEquals(1, factory.getSegmentReferences().size());", "sourceBeforeFix": "queryNotifyLatch.await(25,TimeUnit.MILLISECONDS)", "sourceAfterFix": "queryNotifyLatch.await(1000,TimeUnit.MILLISECONDS)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface ApnsEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedApnsEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface ApnsEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedApnsEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "54d3c99469b923b409ce1a52b6d1181984470b11", "projectName": "netty.netty", "bugType": "Wrong Function Name", "problem": "                     t = newT;\n                 }\n                connectPromise.setFailure(t);\n                 closeIfClosed();\n             } finally {", "fixed": "                     t = newT;\n                 }\n                connectPromise.tryFailure(t);\n                 closeIfClosed();\n             } finally {", "sourceBeforeFix": "connectPromise.setFailure(t)", "sourceAfterFix": "connectPromise.tryFailure(t)"}
{"fixCommitSHA1": "d31a409d8f87800c523f1cc4f7862f716cac7313", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "                 List<ChannelSftp.LsEntry> files = operations.listFiles(file.getParent());\n                 for (ChannelSftp.LsEntry f : files) {\n                     if (f.getFilename().equals(file.getFileName())) {\n                        newLastModified = f.getAttrs().getATime();\n                         newLength = f.getAttrs().getSize();\n                     }\n                 }", "fixed": "                 List<ChannelSftp.LsEntry> files = operations.listFiles(file.getParent());\n                 for (ChannelSftp.LsEntry f : files) {\n                     if (f.getFilename().equals(file.getFileName())) {\n                        newLastModified = f.getAttrs().getMTime();\n                         newLength = f.getAttrs().getSize();\n                     }\n                 }", "sourceBeforeFix": "f.getAttrs().getATime()", "sourceAfterFix": "f.getAttrs().getMTime()"}
{"fixCommitSHA1": "c888434580c601ac9c4734e19d8eefac63518031", "projectName": "swagger-api.swagger-codegen", "bugType": "Wrong Function Name", "problem": "             + (StringUtils.isEmpty(modelPackage) ? \"\" : (modelPackage + \"/\")) + dataType;\n     }\n     private String getJSDocTypeWithBraces(CodegenModel cm, CodegenProperty cp) {\n         return \"{\" + getJSDocType(cm, cp) + \"}\";\n     }\n     private String getJSDocType(CodegenModel cm, CodegenProperty cp) {\n         if (Boolean.TRUE.equals(cp.isContainer)) {", "fixed": "             + (StringUtils.isEmpty(modelPackage) ? \"\" : (modelPackage + \"/\")) + dataType;\n     }\n    \n     private String getJSDocType(CodegenModel cm, CodegenProperty cp) {\n         if (Boolean.TRUE.equals(cp.isContainer)) {", "sourceBeforeFix": "getJSDocTypeWithBraces(cp)", "sourceAfterFix": "getJSDocType(cp)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15846, value = \"Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.\")\n     String invalidRolloutPlanLess(String name, String propertyName, int value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10846, value = \"Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.\")\n     String invalidRolloutPlanLess(String name, String propertyName, int value);\n     /**", "sourceBeforeFix": "id=15860", "sourceAfterFix": "id=10860"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15859, value = \"A slave domain controller cannot accept deployment content uploads\")\n     String slaveCannotAcceptUploads();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10859, value = \"A slave domain controller cannot accept deployment content uploads\")\n     String slaveCannotAcceptUploads();\n     /**", "sourceBeforeFix": "id=15858", "sourceAfterFix": "id=10858"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "5b13fe70c25812157a1e4432135eb9639e72bc6a", "projectName": "apache.flink", "bugType": "Wrong Function Name", "problem": " \t\tfinal Sink output = new Sink(\"allUsers.json\").withInputs(union);\n \t\texpectedPlan.setSinks(output);\n\t\tassertEquals(expectedPlan, actualPlan);\n \t}\n }", "fixed": " \t\tfinal Sink output = new Sink(\"allUsers.json\").withInputs(union);\n \t\texpectedPlan.setSinks(output);\n\t\tassertPlanEquals(expectedPlan, actualPlan);\n \t}\n }", "sourceBeforeFix": "assertEquals(expectedPlan,actualPlan)", "sourceAfterFix": "assertPlanEquals(expectedPlan,actualPlan)"}
{"fixCommitSHA1": "f3a240337ca4534b2a61fc9f004b56472c0e1371", "projectName": "openhab.openhab", "bugType": "Change Identifier Used", "problem": "     logger.debug(\"got a query\");\n     if (!isProperlyConfigured) {\n      logger.error(\"Configuration for influxdb not yet loaded or broken.\");\n       return Collections.emptyList();\n     }\n     if (!isConnected()) {\n      logger.error(\"InfluxDB is not yet connected\");\n       return Collections.emptyList();\n     }", "fixed": "     logger.debug(\"got a query\");\n     if (!isProperlyConfigured) {\n      logger.warn(\"Configuration for influxdb not yet loaded or broken.\");\n       return Collections.emptyList();\n     }\n     if (!isConnected()) {\n      logger.warn(\"InfluxDB is not yet connected\");\n       return Collections.emptyList();\n     }", "sourceBeforeFix": "logger.error(\"Configuration for influxdb not yet loaded or broken.\")", "sourceAfterFix": "logger.warn(\"Configuration for influxdb not yet loaded or broken.\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  private final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "204d9f571caab35a0adb72ffd87fd9c85a12300a", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "       if (!phNames.contains(phName)) {\n         throw new MalformedException(\n             \"Unrecognized message placeholder referenced: \" + phName,\n            objLitNode);\n       }\n     }", "fixed": "       if (!phNames.contains(phName)) {\n         throw new MalformedException(\n             \"Unrecognized message placeholder referenced: \" + phName,\n            node);\n       }\n     }", "sourceBeforeFix": "new MalformedException(\"Unrecognized message placeholder referenced: \" + phName,objLitNode)", "sourceAfterFix": "new MalformedException(\"Unrecognized message placeholder referenced: \" + phName,node)"}
{"fixCommitSHA1": "5bc5353c7899d3a51ffbab8faedd6ebc95587f6f", "projectName": "neo4j.neo4j", "bugType": "Change Identifier Used", "problem": "         URI firstNode = createNode();\n         addProperty(firstNode, \"name\", \"Joe Strummer\");\n         URI secondNode = createNode();\n        addProperty(firstNode, \"band\", \"The Clash\");", "fixed": "         URI firstNode = createNode();\n         addProperty(firstNode, \"name\", \"Joe Strummer\");\n         URI secondNode = createNode();\n        addProperty(secondNode, \"band\", \"The Clash\");", "sourceBeforeFix": "addProperty(firstNode,\"band\",\"The Clash\")", "sourceAfterFix": "addProperty(secondNode,\"band\",\"The Clash\")"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShader(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "fixed": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShaderiv(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "sourceBeforeFix": "GL11.glTexParameter(target,pname,params)", "sourceAfterFix": "GL11.glTexParameterfv(target,pname,params)"}
{"fixCommitSHA1": "b186ed3519d4627f3352aa65db3d8283d1e8beda", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "         abstract void processCall(Packet packet, SemaphoreProxy semaphoreProxy, Integer value, boolean flag);\n         public void processCall(Node node, Packet packet) {\n            final SemaphoreProxy semaphoreProxy = (SemaphoreProxy) factory.getSemaphore(packet.name);\n             final Integer value = (Integer) toObject(packet.getValueData());\n             final boolean flag = (Boolean) toObject(packet.getKeyData());\n             processCall(packet, semaphoreProxy, value, flag);", "fixed": "         abstract void processCall(Packet packet, SemaphoreProxy semaphoreProxy, Integer value, boolean flag);\n         public void processCall(Node node, Packet packet) {\n            final SemaphoreProxy semaphoreProxy = (SemaphoreProxy) factory.getOrCreateProxyByName(packet.name);\n             final Integer value = (Integer) toObject(packet.getValueData());\n             final boolean flag = (Boolean) toObject(packet.getKeyData());\n             processCall(packet, semaphoreProxy, value, flag);", "sourceBeforeFix": "factory.getSemaphore(packet.name)", "sourceAfterFix": "factory.getOrCreateProxyByName(packet.name)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15861, value = \"Cannot remove deployment %s from the domain as it is still used by server groups %s\")\n     String cannotRemoveDeploymentInUse(String name, List<String> groups);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10861, value = \"Cannot remove deployment %s from the domain as it is still used by server groups %s\")\n     String cannotRemoveDeploymentInUse(String name, List<String> groups);\n     /**", "sourceBeforeFix": "id=15852", "sourceAfterFix": "id=10852"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * @throws IOException Thrown, if the serialization encountered an I/O related error. Typically raised by the\n \t *                     output view, which may have an underlying I/O channel to which it delegates.\n \t */\n\tpublic void serialize(T record, DataOutputView target) throws IOException;\n \t/**\n \t * De-serializes a record from the given source input view into the given target record instance.", "fixed": " \t * @throws IOException Thrown, if the serialization encountered an I/O related error. Typically raised by the\n \t *                     output view, which may have an underlying I/O channel to which it delegates.\n \t */\n\tpublic abstract void serialize(T record, DataOutputView target) throws IOException;\n \t/**\n \t * De-serializes a record from the given source input view into the given target record instance.", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "c46a39b13e1bfccdc09301b26f9cc4804d417c3b", "projectName": "druid-io.druid", "bugType": "Same Function More Args", "problem": "   public void testMove() throws Exception\n   {\n     MockStorageService mockS3Client = new MockStorageService();\n    S3DataSegmentMover mover = new S3DataSegmentMover(mockS3Client);\n     mockS3Client.putObject(\"main\", new S3Object(\"baseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/index.zip\"));\n     mockS3Client.putObject(\"main\", new S3Object(\"baseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/descriptor.json\"));", "fixed": "   public void testMove() throws Exception\n   {\n     MockStorageService mockS3Client = new MockStorageService();\n    S3DataSegmentMover mover = new S3DataSegmentMover(mockS3Client, new S3DataSegmentPusherConfig());\n     mockS3Client.putObject(\"main\", new S3Object(\"baseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/index.zip\"));\n     mockS3Client.putObject(\"main\", new S3Object(\"baseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/descriptor.json\"));", "sourceBeforeFix": "new S3DataSegmentMover(mockS3Client)", "sourceAfterFix": "new S3DataSegmentMover(mockS3Client,new S3DataSegmentPusherConfig())"}
{"fixCommitSHA1": "3eb03ea8da9525d9615fcef99c0f3dcc3f1218c9", "projectName": "facebook.presto", "bugType": "Wrong Function Name", "problem": "     protected R visitCreateTable(CreateTable node, C context)\n     {\n        return visitNode(node, context);\n     }\n     protected R visitDropTable(DropTable node, C context)\n     {\n        return visitNode(node, context);\n     }\n }", "fixed": "     protected R visitCreateTable(CreateTable node, C context)\n     {\n        return visitStatement(node, context);\n     }\n     protected R visitDropTable(DropTable node, C context)\n     {\n        return visitStatement(node, context);\n     }\n }", "sourceBeforeFix": "visitNode(node,context)", "sourceAfterFix": "visitStatement(node,context)"}
{"fixCommitSHA1": "1f8fb8ad37dbd4cb4be77d827ba19e857bd451d1", "projectName": "Activiti.Activiti", "bugType": "Change Identifier Used", "problem": "               log.debug(\"Optimistic locking exception : \" + exception);\n             } else {\n              log.debug(\"Error while closing command context\", exception);\n             }\n             transactionContext.rollback();", "fixed": "               log.debug(\"Optimistic locking exception : \" + exception);\n             } else {\n              log.error(\"Error while closing command context\", exception);\n             }\n             transactionContext.rollback();", "sourceBeforeFix": "log.debug(\"Error while closing command context\",exception)", "sourceAfterFix": "log.error(\"Error while closing command context\",exception)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedToMe(Paging paging) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_to_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedToMe(Paging paging) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_to_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",null,true))"}
{"fixCommitSHA1": "5221c15e183cb7029a305766d137d909f77e8941", "projectName": "google.guice", "bugType": "Wrong Function Name", "problem": "       ProvisionListener[] listeners) {\n     this.source = source;\n     this.keyMatcher = typeMatcher;\n    this.listeners = ImmutableList.of(listeners);\n   }\n   ", "fixed": "       ProvisionListener[] listeners) {\n     this.source = source;\n     this.keyMatcher = typeMatcher;\n    this.listeners = ImmutableList.copyOf(listeners);\n   }\n   ", "sourceBeforeFix": "ImmutableList.of(listeners)", "sourceAfterFix": "ImmutableList.copyOf(listeners)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "fixed": "   }\n   \n  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "ea98386dfd18da047c877a2320cfdcf15df2ea06", "projectName": "facebook.presto", "bugType": "Change Modifier", "problem": "             .ifFalse(type.invoke(\"hash\", int.class, blockRef, blockPosition));\n     }\n    private void generateRowEqualsRowMethod(\n             ClassDefinition classDefinition,\n             CallSiteBinder callSiteBinder,\n             List<Type> joinChannelTypes)", "fixed": "             .ifFalse(type.invoke(\"hash\", int.class, blockRef, blockPosition));\n     }\n    private static void generateRowEqualsRowMethod(\n             ClassDefinition classDefinition,\n             CallSiteBinder callSiteBinder,\n             List<Type> joinChannelTypes)", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n            statistics.addRemoveTimeNano(System.nanoTime() - start);\n         }\n         return result;\n     }", "fixed": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n            statistics.addRemoveTimeNanos(System.nanoTime() - start);\n         }\n         return result;\n     }", "sourceBeforeFix": "statistics.addGetTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addGetTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r", "fixed": " \t}\r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r", "sourceBeforeFix": "GL20.glUniform3(location,v)", "sourceAfterFix": "GL20.glUniform3fv(location,v)"}
{"fixCommitSHA1": "cb6f6e26c12839e59243f25bfb142ec5e5b71135", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "     public static class MyBean {\n        @org.apache.camel.RecipientList(strategyRef = \"myStrategy\", parallelProcessing = true, timeout = 2000)\n         public String[] route(String body) {\n             return new String[] {\"direct:a\", \"direct:b\", \"direct:c\"};\n         }", "fixed": "     public static class MyBean {\n        @org.apache.camel.RecipientList(strategyRef = \"myStrategy\", parallelProcessing = true, timeout = 1000)\n         public String[] route(String body) {\n             return new String[] {\"direct:a\", \"direct:b\", \"direct:c\"};\n         }", "sourceBeforeFix": "assertEquals(2000,timeout)", "sourceAfterFix": "assertEquals(1000,timeout)"}
{"fixCommitSHA1": "981f6d224f6adbfca7c62e73ef7f86f3bfc29f4a", "projectName": "wildfly.wildfly", "bugType": "Wrong Function Name", "problem": "                 d.setMinorVersion(Integer.parseInt(servletVersion.charAt(2) + \"\"));\n             } else {\n                 d.setMajorVersion(3);\n                d.setMajorVersion(1);\n             }", "fixed": "                 d.setMinorVersion(Integer.parseInt(servletVersion.charAt(2) + \"\"));\n             } else {\n                 d.setMajorVersion(3);\n                d.setMinorVersion(1);\n             }", "sourceBeforeFix": "d.setMajorVersion(1)", "sourceAfterFix": "d.setMinorVersion(1)"}
{"fixCommitSHA1": "d33a3d853e6465ec8985d1a1b36b7d64f066c130", "projectName": "openhab.openhab", "bugType": "Wrong Function Name", "problem": " \t\t\tif (bindingConfig.getAction() == BindingAction.RELOAD_VARIABLES) {\n \t\t\t\tstateHolder.reloadVariables();\n \t\t\t} else if (bindingConfig.getAction() == BindingAction.RELOAD_DATAPOINTS) {\n\t\t\t\tstateHolder.reloadVariables();\n \t\t\t} else {\n \t\t\t\tlogger.warn(\"Unknown action {}\", bindingConfig.getAction());\n \t\t\t}", "fixed": " \t\t\tif (bindingConfig.getAction() == BindingAction.RELOAD_VARIABLES) {\n \t\t\t\tstateHolder.reloadVariables();\n \t\t\t} else if (bindingConfig.getAction() == BindingAction.RELOAD_DATAPOINTS) {\n\t\t\t\tstateHolder.reloadDatapoints();\n \t\t\t} else {\n \t\t\t\tlogger.warn(\"Unknown action {}\", bindingConfig.getAction());\n \t\t\t}", "sourceBeforeFix": "stateHolder.reloadVariables()", "sourceAfterFix": "stateHolder.reloadDatapoints()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "4497d9362a4347a82acc9d611df544eb64e2ca18", "projectName": "netty.netty", "bugType": "More Specific If", "problem": "             fireChannelClosed(pairedChannel);\n         } finally {\n             future.setSuccess();\n            if (localAddress != null) {\n                 LocalChannelRegistry.unregister(localAddress);\n             }\n         }", "fixed": "             fireChannelClosed(pairedChannel);\n         } finally {\n             future.setSuccess();\n            if (localAddress != null && getParent() == null) {\n                 LocalChannelRegistry.unregister(localAddress);\n             }\n         }", "sourceBeforeFix": "localAddress != null", "sourceAfterFix": "localAddress != null && getParent() == null"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsCsv(String path, long millis, OUT endTuple) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, endTuple);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsCsv(String path, long millis, OUT endTuple) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, endTuple);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface PropertiesEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedPropertiesEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface PropertiesEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedPropertiesEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "0a2b272cb8cb45faafd95a3bbc9e9af813620e09", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "         super(name, service.getNodeEngine());\n         this.partitionId = partitionId;\n         this.lockNamespace = new DefaultObjectNamespace(MultiMapService.SERVICE_NAME, name);\n        final LockService lockService = nodeEngine.getService(LockService.SERVICE_NAME);\n         this.lockStore = lockService == null ? null : lockService.createLockStore(partitionId, lockNamespace);\n         this.creationTime = currentTimeMillis();\n     }", "fixed": "         super(name, service.getNodeEngine());\n         this.partitionId = partitionId;\n         this.lockNamespace = new DefaultObjectNamespace(MultiMapService.SERVICE_NAME, name);\n        final LockService lockService = nodeEngine.getSharedService(LockService.SERVICE_NAME);\n         this.lockStore = lockService == null ? null : lockService.createLockStore(partitionId, lockNamespace);\n         this.creationTime = currentTimeMillis();\n     }", "sourceBeforeFix": "nodeEngine.getService(LockService.SERVICE_NAME)", "sourceAfterFix": "nodeEngine.getSharedService(LockService.SERVICE_NAME)"}
{"fixCommitSHA1": "8e9c4a899c3532b3a6866525a5977129f4af78ea", "projectName": "facebook.presto", "bugType": "Change Identifier Used", "problem": "     HIVE_SERDE_NOT_FOUND(18, EXTERNAL),\n     HIVE_UNSUPPORTED_FORMAT(19, EXTERNAL),\n    HIVE_PARTITION_READ_ONLY(20, EXTERNAL),\n    HIVE_TOO_MANY_OPEN_PARTITIONS(21, EXTERNAL),\n     HIVE_CONCURRENT_MODIFICATION_DETECTED(22, EXTERNAL),\n     HIVE_COLUMN_ORDER_MISMATCH(23, USER_ERROR),\n     HIVE_FILE_MISSING_COLUMN_NAMES(24, EXTERNAL),", "fixed": "     HIVE_SERDE_NOT_FOUND(18, EXTERNAL),\n     HIVE_UNSUPPORTED_FORMAT(19, EXTERNAL),\n    HIVE_PARTITION_READ_ONLY(20, USER_ERROR),\n    HIVE_TOO_MANY_OPEN_PARTITIONS(21, USER_ERROR),\n     HIVE_CONCURRENT_MODIFICATION_DETECTED(22, EXTERNAL),\n     HIVE_COLUMN_ORDER_MISMATCH(23, USER_ERROR),\n     HIVE_FILE_MISSING_COLUMN_NAMES(24, EXTERNAL),", "sourceBeforeFix": "HIVE_PARTITION_OFFLINE(6,EXTERNAL)", "sourceAfterFix": "HIVE_PARTITION_OFFLINE(6,USER_ERROR)"}
{"fixCommitSHA1": "f43cca9e4e3ea39ccf02fc3743be77ae4d7b80ab", "projectName": "pardom.ActiveAndroid", "bugType": "Wrong Function Name", "problem": " \t\t\t\t}\n \t\t\t\telse if (ReflectionUtils.isTypeSerializer(discoveredClass)) {\n \t\t\t\t\tTypeSerializer typeSerializer = (TypeSerializer) discoveredClass.newInstance();\n\t\t\t\t\tmTypeSerializers.put(typeSerializer.getClass(), typeSerializer);\n \t\t\t\t}\n \t\t\t}\n \t\t\tcatch (ClassNotFoundException e) {", "fixed": " \t\t\t\t}\n \t\t\t\telse if (ReflectionUtils.isTypeSerializer(discoveredClass)) {\n \t\t\t\t\tTypeSerializer typeSerializer = (TypeSerializer) discoveredClass.newInstance();\n\t\t\t\t\tmTypeSerializers.put(typeSerializer.getDeserializedType(), typeSerializer);\n \t\t\t\t}\n \t\t\t}\n \t\t\tcatch (ClassNotFoundException e) {", "sourceBeforeFix": "typeSerializer.getClass()", "sourceAfterFix": "typeSerializer.getDeserializedType()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "d2b19965df52e66385a2d7146887a44cea50330a", "projectName": "google.closure-compiler", "bugType": "Wrong Function Name", "problem": "   }\n   void recordFunctionInformation() {\n    logger.info(\"Recording function information\");\n     startPass(\"recordFunctionInformation\");\n     RecordFunctionInformation recordFunctionInfoPass =\n         new RecordFunctionInformation(", "fixed": "   }\n   void recordFunctionInformation() {\n    logger.fine(\"Recording function information\");\n     startPass(\"recordFunctionInformation\");\n     RecordFunctionInformation recordFunctionInfoPass =\n         new RecordFunctionInformation(", "sourceBeforeFix": "logger.info(\"Recording function information\")", "sourceAfterFix": "logger.fine(\"Recording function information\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "a536b4a6a33b85f40af44fca53b33d8c0d8656a1", "projectName": "openhab.openhab", "bugType": "Change Binary Operator", "problem": "if (itemMap.getSoapValueParser() == null) {\n             NodeList nlDataOutNodes = response.getSOAPPart().getElementsByTagName(itemMap.getReadDataOutName());\n            if (nlDataOutNodes != null & nlDataOutNodes.getLength() > 0) {\n                 value = nlDataOutNodes.item(0).getTextContent();\n             } else {", "fixed": "if (itemMap.getSoapValueParser() == null) {\n             NodeList nlDataOutNodes = response.getSOAPPart().getElementsByTagName(itemMap.getReadDataOutName());\n            if (nlDataOutNodes != null && nlDataOutNodes.getLength() > 0) {\n                 value = nlDataOutNodes.item(0).getTextContent();\n             } else {", "sourceBeforeFix": "nlDataOutNodes != null & nlDataOutNodes.getLength() > 0", "sourceAfterFix": "nlDataOutNodes != null && nlDataOutNodes.getLength() > 0"}
{"fixCommitSHA1": "3dddcc4cdf4a74ddbd4607c6aaee5bdd8ac46c27", "projectName": "gephi.gephi", "bugType": "Change Modifier", "problem": "     }\n     @Override\n    public List<EdgeModel> getSelectedEdges() {\n         List<EdgeModel> selected = new ArrayList<>();\n         for (Iterator<EdgeModel> itr = octree.getEdgeIterator(); itr.hasNext();) {\n             EdgeModel edgeModel = itr.next();", "fixed": "     }\n     @Override\n    public synchronized List<EdgeModel> getSelectedEdges() {\n         List<EdgeModel> selected = new ArrayList<>();\n         for (Iterator<EdgeModel> itr = octree.getEdgeIterator(); itr.hasNext();) {\n             EdgeModel edgeModel = itr.next();", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "ea98386dfd18da047c877a2320cfdcf15df2ea06", "projectName": "facebook.presto", "bugType": "Change Modifier", "problem": "                 .retLong();\n     }\n    private void generateAppendToMethod(ClassDefinition classDefinition, CallSiteBinder callSiteBinder, List<Type> types, List<FieldDefinition> channelFields)\n     {\n         Parameter blockIndex = arg(\"blockIndex\", int.class);\n         Parameter blockPosition = arg(\"blockPosition\", int.class);", "fixed": "                 .retLong();\n     }\n    private static void generateAppendToMethod(ClassDefinition classDefinition, CallSiteBinder callSiteBinder, List<Type> types, List<FieldDefinition> channelFields)\n     {\n         Parameter blockIndex = arg(\"blockIndex\", int.class);\n         Parameter blockPosition = arg(\"blockPosition\", int.class);", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "eb4fd212d3307ddbab60a5acccef6473dfa0490f", "projectName": "springside.springside4", "bugType": "Same Function Less Args", "problem": " \t\tcheckToken(token);\r\n \t\tAccount currentUser = accountService.getLoginUser(token);\r\n \t\tList<Book> books = adminService.listMyBook(currentUser.id, pageable);\r\n\t\treturn BeanMapper.mapList(books, Book.class, BookDto.class);\r\n \t}\r\n \t@RequestMapping(value = \"/api/myborrowedbook\", produces = MediaTypes.JSON_UTF_8)\r", "fixed": " \t\tcheckToken(token);\r\n \t\tAccount currentUser = accountService.getLoginUser(token);\r\n \t\tList<Book> books = adminService.listMyBook(currentUser.id, pageable);\r\n\t\treturn BeanMapper.mapList(books, BookDto.class);\r\n \t}\r\n \t@RequestMapping(value = \"/api/myborrowedbook\", produces = MediaTypes.JSON_UTF_8)\r", "sourceBeforeFix": "BeanMapper.mapList(books,Book.class,BookDto.class)", "sourceAfterFix": "BeanMapper.mapList(books,BookDto.class)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface NettyHttpEndpointBuilder\n             extends\n                 NettyHttpEndpointConsumerBuilder, NettyHttpEndpointProducerBuilder {\n         default AdvancedNettyHttpEndpointBuilder advanced() {", "fixed": "     \n    public interface NettyHttpEndpointBuilder\n             extends\n                 NettyHttpEndpointConsumerBuilder, NettyHttpEndpointProducerBuilder {\n         default AdvancedNettyHttpEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<Status> getUserTimeline(Paging paging) throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline.json\"\n                 , null, paging.asPostParameterList(), true));\n     }", "fixed": "      */\n     public ResponseList<Status> getUserTimeline(Paging paging) throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline.json\"\n                 , null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweets/\" + statusId+ \".json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweets/\" + statusId+ \".json\",true))"}
{"fixCommitSHA1": "a076b497cd3ad3b559d00c145d3504441472a48b", "projectName": "gephi.gephi", "bugType": "Change Identifier Used", "problem": "     public int getDegree(Node node) {\n         view.checkUpdate();\n         AbstractNode absNode = checkNode(node);\n        int count = view.getClusteredLayerInDegree(absNode);\n         return count;\n     }", "fixed": "     public int getDegree(Node node) {\n         view.checkUpdate();\n         AbstractNode absNode = checkNode(node);\n        int count = view.getClusteredLayerDegree(absNode);\n         return count;\n     }", "sourceBeforeFix": "view.getClusteredLayerInDegree(absNode)", "sourceAfterFix": "view.getClusteredLayerDegree(absNode)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShader(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "fixed": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShaderiv(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "sourceBeforeFix": "GL20.glUniformMatrix2(location,transpose,value)", "sourceAfterFix": "GL20.glUniformMatrix2fv(location,transpose,value)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "6156922ad6d8d2c4965dbdd10f4f2b65b13b9e76", "projectName": "netty.netty", "bugType": "Wrong Function Name", "problem": "         Object msg = e.getMessage();\n         if (msg instanceof HttpResponse && ((HttpResponse) msg).getStatus().getCode() == 100) {\n            ctx.sendDownstream(e);\n         } else if (msg instanceof HttpMessage) {\n             HttpMessage m = (HttpMessage) msg;", "fixed": "         Object msg = e.getMessage();\n         if (msg instanceof HttpResponse && ((HttpResponse) msg).getStatus().getCode() == 100) {\n            ctx.sendUpstream(e);\n         } else if (msg instanceof HttpMessage) {\n             HttpMessage m = (HttpMessage) msg;", "sourceBeforeFix": "ctx.sendDownstream(e)", "sourceAfterFix": "ctx.sendUpstream(e)"}
{"fixCommitSHA1": "d7bdd87355d4c5b9d3145210eb25e7695decb9f9", "projectName": "alibaba.fastjson", "bugType": "Change Operand ", "problem": "         boolean isDoubleA = isDouble(clazzA);\n         boolean isDoubleB = isDouble(clazzB);\n        if ((isDoubleA && isDoubleB) || (isDoubleA && isIntA) || (isDoubleB && isIntA)) {\n             return a.doubleValue() == b.doubleValue();\n         }", "fixed": "         boolean isDoubleA = isDouble(clazzA);\n         boolean isDoubleB = isDouble(clazzB);\n        if ((isDoubleA && isDoubleB) || (isDoubleA && isIntB) || (isDoubleB && isIntA)) {\n             return a.doubleValue() == b.doubleValue();\n         }", "sourceBeforeFix": "isDoubleA && isIntA", "sourceAfterFix": "isDoubleA && isIntB"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsText(String path) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), 1, null);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsText(String path) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), 1, null);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "9716d2ae673a576cb345c3bfb24cf71654d8f112", "projectName": "openhab.openhab", "bugType": "Wrong Function Name", "problem": " \t\t\tObjectMapper mapper = new ObjectMapper();\n \t\t\tJsonNode rootNode = mapper.readTree(dataString);\n \t\t\tint returnCode = rootNode.get(\"ReturnCode\").asInt();\n\t\t\tlogger.debug(\"myq ReturnCode: {}\", returnCode);\n \t\t\tMyQResponseCode rc = MyQResponseCode.fromCode(returnCode);", "fixed": " \t\t\tObjectMapper mapper = new ObjectMapper();\n \t\t\tJsonNode rootNode = mapper.readTree(dataString);\n \t\t\tint returnCode = rootNode.get(\"ReturnCode\").asInt();\n\t\t\tlogger.trace(\"myq ReturnCode: {}\", returnCode);\n \t\t\tMyQResponseCode rc = MyQResponseCode.fromCode(returnCode);", "sourceBeforeFix": "logger.debug(\"Received MyQ  JSON: {}\",dataString)", "sourceAfterFix": "logger.trace(\"Received MyQ  JSON: {}\",dataString)"}
{"fixCommitSHA1": "4438c63f6b3b2e15431e50dd7d6d62b0baf3da38", "projectName": "swagger-api.swagger-codegen", "bugType": "Same Function More Args", "problem": "                 Arrays.asList(\n                         \"bool\",\n                         \"qint32\",\n                        \"qint64\")\n         );\n         supportingFiles.add(new SupportingFile(\"helpers-header.mustache\", sourceFolder, PREFIX + \"Helpers.h\"));", "fixed": "                 Arrays.asList(\n                         \"bool\",\n                         \"qint32\",\n                        \"qint64\",\n                        \"float\",\n                        \"double\")\n         );\n         supportingFiles.add(new SupportingFile(\"helpers-header.mustache\", sourceFolder, PREFIX + \"Helpers.h\"));", "sourceBeforeFix": "Arrays.asList(\"bool\",\"qint32\",\"qint64\")", "sourceAfterFix": "Arrays.asList(\"bool\",\"qint32\",\"qint64\",\"float\",\"double\")"}
{"fixCommitSHA1": "a7f54a539a4c8f92f4895934480061a2ccbcd499", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "     }\n     private static void writeElement(XMLExtendedStreamWriter writer, ModelNode model, Attribute attribute) throws XMLStreamException {\n        attribute.getDefinition().getAttributeMarshaller().marshallAsElement(attribute.getDefinition(), model, false, writer);\n     }\n }", "fixed": "     }\n     private static void writeElement(XMLExtendedStreamWriter writer, ModelNode model, Attribute attribute) throws XMLStreamException {\n        attribute.getDefinition().getMarshaller().marshallAsElement(attribute.getDefinition(), model, false, writer);\n     }\n }", "sourceBeforeFix": "attribute.getDefinition().getAttributeMarshaller()", "sourceAfterFix": "attribute.getDefinition().getMarshaller()"}
{"fixCommitSHA1": "88a1c1de41e145d7c39abe4d6dc4f3fd51545748", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t\tbinder.bind(new MutablePropertyValues(Collections.singletonMap(\"server.address\",\n \t\t\t\t\"127.0.0.1\")));\n \t\tassertFalse(binder.getBindingResult().hasErrors());\n\t\tassertEquals(InetAddress.getLocalHost(), this.properties.getAddress());\n \t}\n \t@Test", "fixed": " \t\tbinder.bind(new MutablePropertyValues(Collections.singletonMap(\"server.address\",\n \t\t\t\t\"127.0.0.1\")));\n \t\tassertFalse(binder.getBindingResult().hasErrors());\n\t\tassertEquals(InetAddress.getByName(\"127.0.0.1\"), this.properties.getAddress());\n \t}\n \t@Test", "sourceBeforeFix": "InetAddress.getLocalHost()", "sourceAfterFix": "InetAddress.getByName(\"127.0.0.1\")"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @return property value in the type of the default value\n \t * @since 1.7\n \t */\n\tpublic <T> T getGlobalPropertyValue(String propertyName, T defaultValue) throws APIException;\n \t/**\n \t * @param aClass class of object getting length for", "fixed": " \t * @return property value in the type of the default value\n \t * @since 1.7\n \t */\n\tpublic <T> T getGlobalPropertyValue(String propertyName, T defaultValue);\n \t/**\n \t * @param aClass class of object getting length for", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "6bae902bd35ed4f57e7a5d612b7ad9b72f4559bc", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "     node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n     Node node2 = Node.newString(Token.NAME, \"f\");\n     node2.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n    assertTrue(node1.checkTreeTypeAwareEqualsSilent(node2));\n   }\n   public void testCheckTreeTypeAwareEqualsSameNull() {", "fixed": "     node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n     Node node2 = Node.newString(Token.NAME, \"f\");\n     node2.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n    assertTrue(node1.isEquivalentToTyped(node2));\n   }\n   public void testCheckTreeTypeAwareEqualsSameNull() {", "sourceBeforeFix": "node1.checkTreeTypeAwareEqualsSilent(node2)", "sourceAfterFix": "node1.isEquivalentToTyped(node2)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15837, value = \"One of the groups does not define neither \" + SERVER_GROUP + \" nor \" + CONCURRENT_GROUPS + \": %s\")\n     String unexpectedInSeriesGroup(String rolloutPlan);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10837, value = \"One of the groups does not define neither \" + SERVER_GROUP + \" nor \" + CONCURRENT_GROUPS + \": %s\")\n     String unexpectedInSeriesGroup(String rolloutPlan);\n     /**", "sourceBeforeFix": "id=15868", "sourceAfterFix": "id=10868"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "a4662237bc467310f0dc1c28aa621f84571225b1", "projectName": "Activiti.Activiti", "bugType": "Change Numeric Literal", "problem": "     processEngineConfiguration.setClock(testClock);\n    testClock.setCurrentTime(new Date(0));\n     runtimeService.startProcessInstanceByKey(\"testTimerCancelledEvent\");\n     listener.clearEventsReceived();", "fixed": "     processEngineConfiguration.setClock(testClock);\n    testClock.setCurrentTime(new Date(1));\n     runtimeService.startProcessInstanceByKey(\"testTimerCancelledEvent\");\n     listener.clearEventsReceived();", "sourceBeforeFix": "new Date(0)", "sourceAfterFix": "new Date(1)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  private final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e7bf415427b37bbc760ff9b9c69650db8ec477e4", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnBean(Client.class)\n\t@ConditionalOnEnablednHealthIndicator(\"elasticsearch\")\n \t@EnableConfigurationProperties(ElasticsearchHealthIndicatorProperties.class)\n \tpublic static class ElasticsearchHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<ElasticsearchHealthIndicator, Client> {", "fixed": " \t@Configuration\n \t@ConditionalOnBean(Client.class)\n\t@ConditionalOnEnabledHealthIndicator(\"elasticsearch\")\n \t@EnableConfigurationProperties(ElasticsearchHealthIndicatorProperties.class)\n \tpublic static class ElasticsearchHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<ElasticsearchHealthIndicator, Client> {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"redis\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"redis\")"}
{"fixCommitSHA1": "8aab1afc88021a77f7f180e6cf8fd09989dcb9f6", "projectName": "Atmosphere.atmosphere", "bugType": "Change Identifier Used", "problem": "      */\n     public void destroy() {\n         isDestroyed.set(true);\n        cache.remove(this);\n     }\n     private boolean destroyed(){", "fixed": "      */\n     public void destroy() {\n         isDestroyed.set(true);\n        cache.remove(r);\n     }\n     private boolean destroyed(){", "sourceBeforeFix": "cache.remove(this)", "sourceAfterFix": "cache.remove(r)"}
{"fixCommitSHA1": "8d5807a3dcbeb32b2289c7adea8ddd011588253f", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "      * @param children An array of Object containing the inserted, removed, or changed objects.\n      * @see EventListenerList\n      */\n    void fireTreeStructureChanged(Object source, Object[] path,\n                                   int[] childIndices,\n                                   Object... children) {", "fixed": "      * @param children An array of Object containing the inserted, removed, or changed objects.\n      * @see EventListenerList\n      */\n    final void fireTreeStructureChanged(Object source, Object[] path,\n                                   int[] childIndices,\n                                   Object... children) {", "sourceBeforeFix": "0", "sourceAfterFix": "16"}
{"fixCommitSHA1": "ccc86e9f1cddebc731ac1ccabdd469df11d72d8b", "projectName": "apache.flink", "bugType": "Change Numeric Literal", "problem": " \t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.createRemoteEnvironment(\"localhost\", flinkPort);\n \t\tenv.enableCheckpointing(500);\n \t\tenv.setParallelism(parallelism);\n\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(3, 0));\n \t\tenv.getConfig().disableSysoutLogging();\n \t\tFlinkKafkaConsumerBase<Integer> kafkaSource = kafkaServer.getConsumer(topic, schema, standardProps);", "fixed": " \t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.createRemoteEnvironment(\"localhost\", flinkPort);\n \t\tenv.enableCheckpointing(500);\n \t\tenv.setParallelism(parallelism);\n\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(1, 0));\n \t\tenv.getConfig().disableSysoutLogging();\n \t\tFlinkKafkaConsumerBase<Integer> kafkaSource = kafkaServer.getConsumer(topic, schema, standardProps);", "sourceBeforeFix": "RestartStrategies.fixedDelayRestart(3,0)", "sourceAfterFix": "RestartStrategies.fixedDelayRestart(1,0)"}
{"fixCommitSHA1": "2921e7bf0d74a65fdcc71d3ce3053037d14e4d44", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "     protected void handleMultiMapTryLock(String[] args) {\n         String key = args[1];\n        long time = (args.length > 2) ? Long.valueOf(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMultiMap().tryLock(key);", "fixed": "     protected void handleMultiMapTryLock(String[] args) {\n         String key = args[1];\n        long time = (args.length > 2) ? Long.parseLong(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMultiMap().tryLock(key);", "sourceBeforeFix": "Long.valueOf(args[2])", "sourceAfterFix": "Long.parseLong(args[2])"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface KafkaEndpointBuilder\n             extends\n                 KafkaEndpointConsumerBuilder, KafkaEndpointProducerBuilder {\n         default AdvancedKafkaEndpointBuilder advanced() {", "fixed": "     \n    public interface KafkaEndpointBuilder\n             extends\n                 KafkaEndpointConsumerBuilder, KafkaEndpointProducerBuilder {\n         default AdvancedKafkaEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShader(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "fixed": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShaderiv(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "sourceBeforeFix": "GL11.glTexParameter(target,pname,params)", "sourceAfterFix": "GL11.glTexParameterfv(target,pname,params)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": " };\n   \n  private final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler", "fixed": " };\n   \n  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "d21216740a86906787667da2daf2c939b5e3b18b", "projectName": "gephi.gephi", "bugType": "More Specific If", "problem": "                 }\n                if (selectedFile != null) {\n                     String filePath = selectedFile.getAbsolutePath();\n                     filePath = filePath.substring(0, filePath.lastIndexOf(\".\"));\n                     filePath = filePath.concat(fileFilter.getExtensions().get(0));", "fixed": "                 }\n                if (selectedFile != null && fileFilter != null) {\n                     String filePath = selectedFile.getAbsolutePath();\n                     filePath = filePath.substring(0, filePath.lastIndexOf(\".\"));\n                     filePath = filePath.concat(fileFilter.getExtensions().get(0));", "sourceBeforeFix": "selectedFile != null", "sourceAfterFix": "selectedFile != null && fileFilter != null"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15839, value = \"Operation failed or was rolled back on all servers.\")\n     String operationFailedOrRolledBack();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10839, value = \"Operation failed or was rolled back on all servers.\")\n     String operationFailedOrRolledBack();\n     /**", "sourceBeforeFix": "id=15853", "sourceAfterFix": "id=10853"}
{"fixCommitSHA1": "09c8b466c280738cdce89b83e0ee6a92dc02710f", "projectName": "stanfordnlp.CoreNLP", "bugType": "Change Numeric Literal", "problem": "     if (quoteMatcher.matches()) {\n       String[] ret = new String[3];\n       ret[0] = \"\\\"\";\n      ret[1] = quoteMatcher.group(0);\n       ret[2] = \"\\\"\";\n       return ret;", "fixed": "     if (quoteMatcher.matches()) {\n       String[] ret = new String[3];\n       ret[0] = \"\\\"\";\n      ret[1] = quoteMatcher.group(1);\n       ret[2] = \"\\\"\";\n       return ret;", "sourceBeforeFix": "quoteMatcher.group(0)", "sourceAfterFix": "quoteMatcher.group(1)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  private final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetProgramiv (int program, int pname, IntBuffer params) {\r\n\t\tGL20.glGetProgram(program, pname, params);\r\n \t}\r\n \tpublic void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tEXTFramebufferObject.glGetRenderbufferParameterEXT(target, pname, params);\r\n \t}\r\n \tpublic String glGetShaderInfoLog (int shader) {\r", "fixed": " \t}\r\n \tpublic void glGetProgramiv (int program, int pname, IntBuffer params) {\r\n\t\tGL20.glGetProgramiv(program, pname, params);\r\n \t}\r\n \tpublic void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tEXTFramebufferObject.glGetRenderbufferParameterivEXT(target, pname, params);\r\n \t}\r\n \tpublic String glGetShaderInfoLog (int shader) {\r", "sourceBeforeFix": "EXTFramebufferObject.glGetFramebufferAttachmentParameterEXT(target,attachment,pname,params)", "sourceAfterFix": "EXTFramebufferObject.glGetFramebufferAttachmentParameterivEXT(target,attachment,pname,params)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedHipchatEndpointBuilder\n             extends\n                 AdvancedHipchatEndpointConsumerBuilder, AdvancedHipchatEndpointProducerBuilder {\n         default HipchatEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedHipchatEndpointBuilder\n             extends\n                 AdvancedHipchatEndpointConsumerBuilder, AdvancedHipchatEndpointProducerBuilder {\n         default HipchatEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "7692923b6fe8b8ef72ebd628e28fa1aeaf11861d", "projectName": "Atmosphere.atmosphere", "bugType": "Wrong Function Name", "problem": "     @Override\n     public PoolableProvider returnBroadcaster(Broadcaster b) {\n        logger.info(\"Return Object {} now at size {}\", b, count.getAndDecrement());\n         try {\n             genericObjectPool.returnObject(b);\n         } catch (IllegalStateException ex) {", "fixed": "     @Override\n     public PoolableProvider returnBroadcaster(Broadcaster b) {\n        logger.trace(\"Return Object {} now at size {}\", b, count.getAndDecrement());\n         try {\n             genericObjectPool.returnObject(b);\n         } catch (IllegalStateException ex) {", "sourceBeforeFix": "logger.info(\"Creating Object {}\",count.getAndIncrement())", "sourceAfterFix": "logger.trace(\"Creating Object {}\",count.getAndIncrement())"}
{"fixCommitSHA1": "19fded26397f0c6ea1f26c6faa9a4c72aea7ccc6", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "     }\n     @Deprecated @Override\n    public Class getClass()\n     {\n        return super.getClass();\n     }\n }", "fixed": "     }\n     @Deprecated @Override\n    public int hashCode()\n     {\n        return super.hashCode();\n     }\n }", "sourceBeforeFix": "super.getClass()", "sourceAfterFix": "super.hashCode()"}
{"fixCommitSHA1": "fd7865e44d4101c9d625c5835e14a2851a8b34bc", "projectName": "hazelcast.hazelcast", "bugType": "Same Function Less Args", "problem": "     }\n     public <T> Future<T> submit(Runnable task, T result) {\n        return submit(new RunnableAdapter<T>(task, result));\n     }\n     public Future<?> submit(Runnable task) {", "fixed": "     }\n     public <T> Future<T> submit(Runnable task, T result) {\n        return submit(new RunnableAdapter<T>(task));\n     }\n     public Future<?> submit(Runnable task) {", "sourceBeforeFix": "new RunnableAdapter<T>(task,result)", "sourceAfterFix": "new RunnableAdapter<T>(task)"}
{"fixCommitSHA1": "544edb296479cbd05f35381b20a651e9d022e197", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         context.start();\n         for (int i = 0; i < 10; i++) {\n            getMockEndpoint(\"mock:\" + i).expectedMessageCount(1000);\n         }\n         ExecutorService executors = Executors.newFixedThreadPool(20);\n        for (int i = 0; i < 1000; i++) {\n             executors.execute(new Runnable() {\n                 public void run() {\n                     for (int i = 0; i < 10; i++) {", "fixed": "         context.start();\n         for (int i = 0; i < 10; i++) {\n            getMockEndpoint(\"mock:\" + i).expectedMessageCount(200);\n         }\n         ExecutorService executors = Executors.newFixedThreadPool(20);\n        for (int i = 0; i < 200; i++) {\n             executors.execute(new Runnable() {\n                 public void run() {\n                     for (int i = 0; i < 10; i++) {", "sourceBeforeFix": "i < 1000", "sourceAfterFix": "i < 200"}
{"fixCommitSHA1": "9a582720939c1b4098430d1ab439b9ce045eaf06", "projectName": "checkstyle.checkstyle", "bugType": "Delete Throws Exception", "problem": "         @Override\n         public void endElement(String namespaceURI,\n                                String localName,\n                               String qName)\n            throws SAXException {\n             if (qName.equals(MODULE)) {\n                 final Configuration recentModule =", "fixed": "         @Override\n         public void endElement(String namespaceURI,\n                                String localName,\n                               String qName) {\n             if (qName.equals(MODULE)) {\n                 final Configuration recentModule =", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedKMSEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default KMSEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedKMSEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default KMSEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n            file = new RandomAccessFile(FOLDER + (mWorkerId + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());", "fixed": "         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n            file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "pId + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should delete global properties from database\n \t */\n \t@Authorized(PrivilegeConstants.PURGE_GLOBAL_PROPERTIES)\n\tpublic void purgeGlobalProperties(List<GlobalProperty> globalProperties) throws APIException;\n \t/**\n \t * Save the given global property to the database. If the global property already exists,", "fixed": " \t * @should delete global properties from database\n \t */\n \t@Authorized(PrivilegeConstants.PURGE_GLOBAL_PROPERTIES)\n\tpublic void purgeGlobalProperties(List<GlobalProperty> globalProperties);\n \t/**\n \t * Save the given global property to the database. If the global property already exists,", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8998e8b7b968250096364d48006a5c8708531290", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic Texture (FileHandle file, Format format, boolean useMipMaps) {\r\n\t\tif (file.name().contains(\".etc1\")) {\r\n \t\t\tcreate(new ETC1TextureData(file, useMipMaps));\r\n \t\t} else {\r\n \t\t\tcreate(new FileTextureData(file, null, format, useMipMaps));\r", "fixed": " \t}\r\n \tpublic Texture (FileHandle file, Format format, boolean useMipMaps) {\r\n\t\tif (file.name().endsWith(\".etc1\")) {\r\n \t\t\tcreate(new ETC1TextureData(file, useMipMaps));\r\n \t\t} else {\r\n \t\t\tcreate(new FileTextureData(file, null, format, useMipMaps));\r", "sourceBeforeFix": "file.name().contains(\".etc1\")", "sourceAfterFix": "file.name().endsWith(\".etc1\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "c30e67b81a0d9ac45c4151d20a960e542ad97b4f", "projectName": "dropwizard.dropwizard", "bugType": "Change Identifier Used", "problem": "     @Test\n     public void returnsA404WhenNotFound() throws Exception {\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getRequestURI()).thenReturn(\"/tasks/test\");\n         servlet.service(request, response);", "fixed": "     @Test\n     public void returnsA404WhenNotFound() throws Exception {\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getServletPath()).thenReturn(\"/tasks/test\");\n         servlet.service(request, response);", "sourceBeforeFix": "request.getRequestURI()", "sourceAfterFix": "request.getServletPath()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15850, value = \"No handler for operation %s at address %s\")\n     String noHandlerForOperation(String operationName, PathAddress address);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10850, value = \"No handler for operation %s at address %s\")\n     String noHandlerForOperation(String operationName, PathAddress address);\n     /**", "sourceBeforeFix": "id=15843", "sourceAfterFix": "id=10843"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_kr_1() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub1445\uc6d46\uc77c\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_kr_1() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub1445\uc6d46\uc77c\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "c30e67b81a0d9ac45c4151d20a960e542ad97b4f", "projectName": "dropwizard.dropwizard", "bugType": "Wrong Function Name", "problem": "     @SuppressWarnings(\"unchecked\")\n     public void returnsA500OnExceptions() throws Exception {\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getRequestURI()).thenReturn(\"/tasks/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.<String>of()));\n         final RuntimeException ex = new RuntimeException(\"whoops\");", "fixed": "     @SuppressWarnings(\"unchecked\")\n     public void returnsA500OnExceptions() throws Exception {\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getServletPath()).thenReturn(\"/tasks/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.<String>of()));\n         final RuntimeException ex = new RuntimeException(\"whoops\");", "sourceBeforeFix": "request.getRequestURI()", "sourceAfterFix": "request.getServletPath()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsCsv(String path) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), 1, null);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsCsv(String path) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), 1, null);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "be1426a22096f6e95d36f389a5ea9b8a38482ebe", "projectName": "netty.netty", "bugType": "Wrong Function Name", "problem": "                 }\n             } catch (SocketException e) {\n                logger.error(\"Failed to enumerate network interfaces\", e);\n             }\n         }", "fixed": "                 }\n             } catch (SocketException e) {\n                logger.warn(\"Failed to enumerate network interfaces\", e);\n             }\n         }", "sourceBeforeFix": "logger.error(\"Failed to enumerate network interfaces\",e)", "sourceAfterFix": "logger.warn(\"Failed to enumerate network interfaces\",e)"}
{"fixCommitSHA1": "1daccd54d2ff2ecdb21d8c60268600c37febbb70", "projectName": "Alluxio.alluxio", "bugType": "Change Operand ", "problem": "       if (mWrite) {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n           OutputStream os = mHdfsFs.create(new Path(filePath));\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n            mBuf.array()[0] = (byte) (k + mWorkerId);\n             os.write(mBuf.array());\n           }\n           os.close();", "fixed": "       if (mWrite) {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           OutputStream os = mHdfsFs.create(new Path(filePath));\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n            mBuf.putInt(0, k + mWorkerId);\n             os.write(mBuf.array());\n           }\n           os.close();", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "3d732616366b93a75351f4f43ecaa80d2d544abe", "projectName": "apache.hadoop", "bugType": "Change Identifier Used", "problem": "         if (!root.exists()) {\n           if (startOpt != StartupOption.FORMAT) {\n            LOG.info(\"Storage directory \" + rootPath + \" does not exist\");\n             return StorageState.NON_EXISTENT;\n           }\n           LOG.info(rootPath + \" does not exist. Creating ...\");", "fixed": "         if (!root.exists()) {\n           if (startOpt != StartupOption.FORMAT) {\n            LOG.warn(\"Storage directory \" + rootPath + \" does not exist\");\n             return StorageState.NON_EXISTENT;\n           }\n           LOG.info(rootPath + \" does not exist. Creating ...\");", "sourceBeforeFix": "LOG.info(rootPath + \"is not a directory\")", "sourceAfterFix": "LOG.warn(rootPath + \"is not a directory\")"}
{"fixCommitSHA1": "1a89a3fedeff90da5fa2e62fa49b26bfd8ec7f24", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "       return HConstants.NORMAL_QOS;\n     }\nif (methodName.equals(\"scan\")) {\n       ScanRequest request = (ScanRequest)param;\n       if (!request.hasScannerId()) {\n         return HConstants.NORMAL_QOS;", "fixed": "       return HConstants.NORMAL_QOS;\n     }\nif (methodName.equalsIgnoreCase(\"scan\")) {\n       ScanRequest request = (ScanRequest)param;\n       if (!request.hasScannerId()) {\n         return HConstants.NORMAL_QOS;", "sourceBeforeFix": "methodName.equals(\"scan\")", "sourceAfterFix": "methodName.equalsIgnoreCase(\"scan\")"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15867, value = \"Cannot use %s with the same value for parameters %s and %s. \" +\n             \"Use %s to redeploy the same content or %s to replace content with a new version with the same name.\")\n     String cannotUseSameValueForParameters(String opName, String param1, String param2, String redeployOpName, String replaceOpName);", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10867, value = \"Cannot use %s with the same value for parameters %s and %s. \" +\n             \"Use %s to redeploy the same content or %s to replace content with a new version with the same name.\")\n     String cannotUseSameValueForParameters(String opName, String param1, String param2, String redeployOpName, String replaceOpName);", "sourceBeforeFix": "id=15859", "sourceAfterFix": "id=10859"}
{"fixCommitSHA1": "a10a471f4cb04226367516267fa636f257ef9807", "projectName": "yusuke.twitter4j", "bugType": "Change Numeric Literal", "problem": "         this.limit = limit;\n         this.remaining = remaining;\n         this.resetTimeInSeconds = resetTimeInSeconds;\n        this.secondsUntilReset = (int) ((resetTimeInSeconds * 1000 - System.currentTimeMillis()) / 1000);\n     }\n     RateLimitStatusJSONImpl(JSONObject json) throws TwitterException {", "fixed": "         this.limit = limit;\n         this.remaining = remaining;\n         this.resetTimeInSeconds = resetTimeInSeconds;\n        this.secondsUntilReset = (int) ((resetTimeInSeconds * 1000L - System.currentTimeMillis()) / 1000);\n     }\n     RateLimitStatusJSONImpl(JSONObject json) throws TwitterException {", "sourceBeforeFix": "resetTimeInSeconds * 1000", "sourceAfterFix": "resetTimeInSeconds * 1000L"}
{"fixCommitSHA1": "3b0e5ccc430c5ae4187e6139535c32cc17bb2a2b", "projectName": "facebook.presto", "bugType": "Change Identifier Used", "problem": "             String splitsSummary = String.format(\"Splits: %,4d total, %,4d pending, %,4d running, %,4d done\",\n                     globalExecutionStats.getSplits(),\n                     max(0, globalExecutionStats.getSplits() - globalExecutionStats.getStartedSplits()),\n                    max(0, globalExecutionStats.getSplits() - globalExecutionStats.getCompletedSplits()),\n                     globalExecutionStats.getCompletedSplits());\n             reprintLine(splitsSummary);", "fixed": "             String splitsSummary = String.format(\"Splits: %,4d total, %,4d pending, %,4d running, %,4d done\",\n                     globalExecutionStats.getSplits(),\n                     max(0, globalExecutionStats.getSplits() - globalExecutionStats.getStartedSplits()),\n                    max(0, globalExecutionStats.getStartedSplits() - globalExecutionStats.getCompletedSplits()),\n                     globalExecutionStats.getCompletedSplits());\n             reprintLine(splitsSummary);", "sourceBeforeFix": "globalExecutionStats.getSplits()", "sourceAfterFix": "globalExecutionStats.getStartedSplits()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "13e2b9ecce47206e0bdf8209ee0efebb12eb3401", "projectName": "wildfly.wildfly", "bugType": "Wrong Function Name", "problem": "         URL url = Thread.currentThread().getContextClassLoader().getResource(name);\n         Assert.assertNotNull(url);\n        XMLStreamReader reader = XMLInputFactory.newFactory().createXMLStreamReader(new StreamSource(url.toString()));\n         mapper.parseDocument(operations, reader);\n         return operations;", "fixed": "         URL url = Thread.currentThread().getContextClassLoader().getResource(name);\n         Assert.assertNotNull(url);\n        XMLStreamReader reader = XMLInputFactory.newInstance().createXMLStreamReader(new StreamSource(url.toString()));\n         mapper.parseDocument(operations, reader);\n         return operations;", "sourceBeforeFix": "XMLInputFactory.newFactory()", "sourceAfterFix": "XMLInputFactory.newInstance()"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsCsv(String path, long millis) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, null);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsCsv(String path, long millis) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, null);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "af07edf1ab9024a78cb280e85982b1d6661a09ad", "projectName": "apache.hadoop", "bugType": "Change Modifier", "problem": "     return list;\n   }\n  protected void setProperties(Properties props) {\n     super.setProperties(props);\n   }", "fixed": "     return list;\n   }\n  @InterfaceAudience.Private\n  public void setProperties(Properties props) {\n     super.setProperties(props);\n   }", "sourceBeforeFix": "4", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "1a9bb447fd14415ef270f3dd7af8a0d4e0017177", "projectName": "Atmosphere.atmosphere", "bugType": "Change Identifier Used", "problem": "     @Override\n     public final AtmosphereResource create(AtmosphereConfig config,\n                                            Broadcaster broadcaster,\n                                           DefaultAtmosphereRequest request,\n                                            AtmosphereResponse response,\n                                            AsyncSupport<?> a,\n                                            AtmosphereHandler handler,", "fixed": "     @Override\n     public final AtmosphereResource create(AtmosphereConfig config,\n                                            Broadcaster broadcaster,\n                                           AtmosphereRequest request,\n                                            AtmosphereResponse response,\n                                            AsyncSupport<?> a,\n                                            AtmosphereHandler handler,", "sourceBeforeFix": "DefaultAtmosphereRequest request", "sourceAfterFix": "AtmosphereRequest request"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface HdfsEndpointBuilder\n             extends\n                 HdfsEndpointConsumerBuilder, HdfsEndpointProducerBuilder {\n         default AdvancedHdfsEndpointBuilder advanced() {", "fixed": "     \n    public interface HdfsEndpointBuilder\n             extends\n                 HdfsEndpointConsumerBuilder, HdfsEndpointProducerBuilder {\n         default AdvancedHdfsEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "b7e092e821021b7c0dbd91eacfe369181bfa28b8", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t\t@ConditionalOnMissingBean\n \t\tRSocketServerBootstrap rSocketServerBootstrap(RSocketServerFactory rSocketServerFactory,\n \t\t\t\tRSocketMessageHandler rSocketMessageHandler) {\n\t\t\treturn new RSocketServerBootstrap(rSocketServerFactory, rSocketMessageHandler.serverAcceptor());\n \t\t}\n \t}", "fixed": " \t\t@ConditionalOnMissingBean\n \t\tRSocketServerBootstrap rSocketServerBootstrap(RSocketServerFactory rSocketServerFactory,\n \t\t\t\tRSocketMessageHandler rSocketMessageHandler) {\n\t\t\treturn new RSocketServerBootstrap(rSocketServerFactory, rSocketMessageHandler.serverResponder());\n \t\t}\n \t}", "sourceBeforeFix": "rSocketMessageHandler.serverAcceptor()", "sourceAfterFix": "rSocketMessageHandler.serverResponder()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15870, value = \"Unknown server group %s\")\n     IllegalStateException unknownServerGroup(String serverGroup);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10870, value = \"Unknown server group %s\")\n     IllegalStateException unknownServerGroup(String serverGroup);\n     /**", "sourceBeforeFix": "id=15853", "sourceAfterFix": "id=10853"}
{"fixCommitSHA1": "76c1a65927e07c951bdadcb309b930babf620cbe", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "        Thread.sleep(1000);\n         transactionTemplate.execute(new TransactionCallback<Object>() {\n             public Object doInTransaction(TransactionStatus status) {", "fixed": "        Thread.sleep(2000);\n         transactionTemplate.execute(new TransactionCallback<Object>() {\n             public Object doInTransaction(TransactionStatus status) {", "sourceBeforeFix": "Thread.sleep(1000)", "sourceAfterFix": "Thread.sleep(2000)"}
{"fixCommitSHA1": "76cdeff309003cab769ba0005bffeb711383084d", "projectName": "chrisbanes.Android-PullToRefresh", "bugType": "Change Operand ", "problem": " \t\t}\n \t\tif (doScroll) {\n\t\t\tsmoothScrollTo(mode == MODE_PULL_DOWN_TO_REFRESH ? -headerHeight : headerHeight);\n \t\t}\n \t}", "fixed": " \t\t}\n \t\tif (doScroll) {\n\t\t\tsmoothScrollTo(currentMode == MODE_PULL_DOWN_TO_REFRESH ? -headerHeight : headerHeight);\n \t\t}\n \t}", "sourceBeforeFix": "mode == MODE_PULL_DOWN_TO_REFRESH", "sourceAfterFix": "currentMode == MODE_PULL_DOWN_TO_REFRESH"}
{"fixCommitSHA1": "ff34b04700d0417df1049e4d749fdf430076965b", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "         }\n     }\n    private static boolean shouldAppendSpace(StringBuffer text, char firstCharToAppend) {\n         final boolean result;\n         if (text.length() == 0) {", "fixed": "         }\n     }\n    private static boolean shouldAppendSpace(StringBuilder text, char firstCharToAppend) {\n         final boolean result;\n         if (text.length() == 0) {", "sourceBeforeFix": "final StringBuffer result=new StringBuffer(20); ", "sourceAfterFix": "final StringBuilder result=new StringBuilder(20); "}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15844, value = \"Invalid rollout plan. Server group %s appears more than once in the plan.\")\n     String invalidRolloutPlanGroupAlreadyExists(String group);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10844, value = \"Invalid rollout plan. Server group %s appears more than once in the plan.\")\n     String invalidRolloutPlanGroupAlreadyExists(String group);\n     /**", "sourceBeforeFix": "id=15871", "sourceAfterFix": "id=10871"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     @ApiOperation(value = \"Creates list of users with given input array\", notes = \"\", tags={ \"user\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Void.class) })\n    void createUsersWithArrayInput(@Valid List<User> body);\n     @POST\n     @Path(\"/createWithList\")", "fixed": "     @ApiOperation(value = \"Creates list of users with given input array\", notes = \"\", tags={ \"user\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Void.class) })\n    void createUsersWithArrayInput(@Valid List<User> body) throws Exception;\n     @POST\n     @Path(\"/createWithList\")", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "9716d2ae673a576cb345c3bfb24cf71654d8f112", "projectName": "openhab.openhab", "bugType": "Wrong Function Name", "problem": " \t\t\tObjectMapper mapper = new ObjectMapper();\n \t\t\tJsonNode rootNode = mapper.readTree(dataString);\n \t\t\tint returnCode = rootNode.get(\"ReturnCode\").asInt();\n\t\t\tlogger.debug(\"myq ReturnCode: {}\", returnCode);\n \t\t\tMyQResponseCode rc = MyQResponseCode.fromCode(returnCode);", "fixed": " \t\t\tObjectMapper mapper = new ObjectMapper();\n \t\t\tJsonNode rootNode = mapper.readTree(dataString);\n \t\t\tint returnCode = rootNode.get(\"ReturnCode\").asInt();\n\t\t\tlogger.trace(\"myq ReturnCode: {}\", returnCode);\n \t\t\tMyQResponseCode rc = MyQResponseCode.fromCode(returnCode);", "sourceBeforeFix": "logger.debug(\"Retreiveing door data\")", "sourceAfterFix": "logger.trace(\"Retreiveing door data\")"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": " import org.jboss.logging.Messages;\n /**\n * This module is using message IDs in the range 10900-10999. This file is using the subset 10975-10999 for domain\n* controller non-logger messages. See http:\n  * JBAS message id blocks.\n  * <p/>", "fixed": " import org.jboss.logging.Messages;\n /**\n * This module is using message IDs in the range 10800-10899. This file is using the subset 10830-10899 for domain\n* controller non-logger messages. See http:\n  * JBAS message id blocks.\n  * <p/>", "sourceBeforeFix": "id=15865", "sourceAfterFix": "id=10865"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  private final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15839, value = \"Operation failed or was rolled back on all servers.\")\n     String operationFailedOrRolledBack();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10839, value = \"Operation failed or was rolled back on all servers.\")\n     String operationFailedOrRolledBack();\n     /**", "sourceBeforeFix": "id=15850", "sourceAfterFix": "id=10850"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  private final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "c888434580c601ac9c4734e19d8eefac63518031", "projectName": "swagger-api.swagger-codegen", "bugType": "Wrong Function Name", "problem": "             + (StringUtils.isEmpty(modelPackage) ? \"\" : (modelPackage + \"/\")) + dataType;\n     }\n     private String getJSDocTypeWithBraces(CodegenModel cm, CodegenProperty cp) {\n         return \"{\" + getJSDocType(cm, cp) + \"}\";\n     }\n     private String getJSDocType(CodegenModel cm, CodegenProperty cp) {\n         if (Boolean.TRUE.equals(cp.isContainer)) {", "fixed": "             + (StringUtils.isEmpty(modelPackage) ? \"\" : (modelPackage + \"/\")) + dataType;\n     }\n    \n     private String getJSDocType(CodegenModel cm, CodegenProperty cp) {\n         if (Boolean.TRUE.equals(cp.isContainer)) {", "sourceBeforeFix": "getJSDocTypeWithBraces(cm,var)", "sourceAfterFix": "getJSDocType(cm,var)"}
{"fixCommitSHA1": "dff64bf31f0406905c321e100e29d3600cf618e3", "projectName": "apache.camel", "bugType": "Missing Throws Exception", "problem": "      * Allow this route to be run as an application\n      *\n      * @param args\n      */\n    public static void main(String[] args) {\n         new Main().run(args);\n     }", "fixed": "      * Allow this route to be run as an application\n      *\n      * @param args\n     * @throws Exception \n      */\n    public static void main(String[] args) throws Exception {\n         new Main().run(args);\n     }", "sourceBeforeFix": "9", "sourceAfterFix": "9"}
{"fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "projectName": "Alluxio.alluxio", "bugType": "Change Operand ", "problem": "       } else {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n           InputStream is = mHdfsFs.open(new Path(filePath));\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;", "fixed": "       } else {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           InputStream is = mHdfsFs.open(new Path(filePath));\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;", "sourceBeforeFix": "k < THREADS", "sourceAfterFix": "k < FILES"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "65c15a0c969d964875b2b988ff5f63d419e6a832", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    private class ExchangeNotifier extends EventNotifierSupport {\n         public void notify(EventObject event) throws Exception {\n             if (event instanceof ExchangeCreatedEvent) {", "fixed": "     \n    private final class ExchangeNotifier extends EventNotifierSupport {\n         public void notify(EventObject event) throws Exception {\n             if (event instanceof ExchangeCreatedEvent) {", "sourceBeforeFix": "2", "sourceAfterFix": "18"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15845, value = \"Invalid rollout plan. Server group %s has a %s value of %s; must be between 0 and 100.\")\n     String invalidRolloutPlanRange(String name, String propertyName, int value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10845, value = \"Invalid rollout plan. Server group %s has a %s value of %s; must be between 0 and 100.\")\n     String invalidRolloutPlanRange(String name, String propertyName, int value);\n     /**", "sourceBeforeFix": "id=15871", "sourceAfterFix": "id=10871"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15840, value = \"Interrupted waiting for result from server %s\")\n     String interruptedAwaitingResultFromServer(ServerIdentity server);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10840, value = \"Interrupted waiting for result from server %s\")\n     String interruptedAwaitingResultFromServer(ServerIdentity server);\n     /**", "sourceBeforeFix": "id=15863", "sourceAfterFix": "id=10863"}
{"fixCommitSHA1": "7fe4af53a9c206fb201115be870694283f877740", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "      */\n     public static SortedMap<String, Properties> findComponents(CamelContext camelContext) throws LoadPropertiesException {\n         ClassResolver resolver = camelContext.getClassResolver();\n        LOG.info(\"Finding all components using class resolver: {} -> {}\", new Object[]{resolver});\n         Enumeration<URL> iter = resolver.loadAllResourcesAsURL(COMPONENT_DESCRIPTOR);\n         return findComponents(camelContext, iter);\n     }", "fixed": "      */\n     public static SortedMap<String, Properties> findComponents(CamelContext camelContext) throws LoadPropertiesException {\n         ClassResolver resolver = camelContext.getClassResolver();\n        LOG.debug(\"Finding all components using class resolver: {} -> {}\", new Object[]{resolver});\n         Enumeration<URL> iter = resolver.loadAllResourcesAsURL(COMPONENT_DESCRIPTOR);\n         return findComponents(camelContext, iter);\n     }", "sourceBeforeFix": "LOG.info(\"Finding components in url: {}\",url)", "sourceAfterFix": "LOG.trace(\"Finding components in url: {}\",url)"}
{"fixCommitSHA1": "c9a67786483edaf7480cc73cdec2e492a7f16f46", "projectName": "apache.hive", "bugType": "Change Identifier Used", "problem": "     String[] partKeyTypes = pcolTypes.trim().split(\":\");\n     if (partSpec.size() != partKeyTypes.length) {\n        throw new HiveException(\"Internal error : Partition Spec size, \" + partProps.size() +\n                 \" doesn't match partition key definition size, \" + partKeyTypes.length);\n     }\n     boolean hasVC = vcs != null && !vcs.isEmpty();", "fixed": "     String[] partKeyTypes = pcolTypes.trim().split(\":\");\n     if (partSpec.size() != partKeyTypes.length) {\n        throw new HiveException(\"Internal error : Partition Spec size, \" + partSpec.size() +\n                 \" doesn't match partition key definition size, \" + partKeyTypes.length);\n     }\n     boolean hasVC = vcs != null && !vcs.isEmpty();", "sourceBeforeFix": "partProps.size()", "sourceAfterFix": "partSpec.size()"}
{"fixCommitSHA1": "e1d89ddbf6028369fd3117ff648fc6f16a1786fe", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "                     span.log(fields);\n                 }\n             } catch (Throwable t) {\n                LOG.error(\"OpenTracing: Failed to capture tracing data\", t);\n             }\n             return message;\n         }", "fixed": "                     span.log(fields);\n                 }\n             } catch (Throwable t) {\n                LOG.warn(\"OpenTracing: Failed to capture tracing data\", t);\n             }\n             return message;\n         }", "sourceBeforeFix": "LOG.error(\"OpenTracing: Failed to capture tracing data\",t)", "sourceAfterFix": "LOG.warn(\"OpenTracing: Failed to capture tracing data\",t)"}
{"fixCommitSHA1": "afa23f7192a27a30797fac848c59081b94cbe34c", "projectName": "wildfly.wildfly", "bugType": "Change Modifier", "problem": " public interface StatelessSessionLocal extends EJBLocalObject {\n     \n    public String echo(String arg) throws RemoteException;\n     \n    public void noop();\n }", "fixed": " public interface StatelessSessionLocal extends EJBLocalObject {\n     \n    String echo(String arg) throws RemoteException;\n     \n    void noop();\n }", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "fixed": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2fv(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2fv(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "sourceBeforeFix": "GL20.glUniform4(location,toFloatBuffer(v,offset,count << 2))", "sourceAfterFix": "GL20.glUniform4fv(location,toFloatBuffer(v,offset,count << 2))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "9e6f96dbfc8bf1ae1ffbe0115f53f1de0fc86ffc", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         final R record = createRecord(value, expirationTime);\n         updateHasExpiringEntry(record);\n         if (isEventsEnabled()) {\n            publishEvent(createCacheCreatedEvent(keyData, toEventData(value), expirationTime, origin, completionId));\n         }\n         return record;\n     }", "fixed": "         final R record = createRecord(value, expirationTime);\n         updateHasExpiringEntry(record);\n         if (isEventsEnabled()) {\n            publishEvent(createCacheCreatedEvent(toEventData(keyData), toEventData(value),\n                                                 expirationTime, origin, completionId));\n         }\n         return record;\n     }", "sourceBeforeFix": "toHeapData(key)", "sourceAfterFix": "toEventData(key)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15852, value = \"Caught %s storing deployment content -- %s\")\n     String caughtExceptionStoringDeploymentContent(String exceptionName, Throwable exception);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10852, value = \"Caught %s storing deployment content -- %s\")\n     String caughtExceptionStoringDeploymentContent(String exceptionName, Throwable exception);\n     /**", "sourceBeforeFix": "id=15848", "sourceAfterFix": "id=10848"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface GoogleDriveEndpointBuilder\n             extends\n                 GoogleDriveEndpointConsumerBuilder, GoogleDriveEndpointProducerBuilder {\n         default AdvancedGoogleDriveEndpointBuilder advanced() {", "fixed": "     \n    public interface GoogleDriveEndpointBuilder\n             extends\n                 GoogleDriveEndpointConsumerBuilder, GoogleDriveEndpointProducerBuilder {\n         default AdvancedGoogleDriveEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "a536b4a6a33b85f40af44fca53b33d8c0d8656a1", "projectName": "openhab.openhab", "bugType": "Change Binary Operator", "problem": "                         }\n                     } else {\nNodeList nlDataOutNodes = sm.getSOAPPart().getElementsByTagName(mapping.getReadDataOutName());\n                        if (nlDataOutNodes != null & nlDataOutNodes.getLength() > 0) {\n                             String url = nlDataOutNodes.item(0).getTextContent();", "fixed": "                         }\n                     } else {\nNodeList nlDataOutNodes = sm.getSOAPPart().getElementsByTagName(mapping.getReadDataOutName());\n                        if (nlDataOutNodes != null && nlDataOutNodes.getLength() > 0) {\n                             String url = nlDataOutNodes.item(0).getTextContent();", "sourceBeforeFix": "nlDataOutNodes != null & nlDataOutNodes.getLength() > 0", "sourceAfterFix": "nlDataOutNodes != null && nlDataOutNodes.getLength() > 0"}
{"fixCommitSHA1": "79946366e1ab141ef2b595e0079dcac7b913da2b", "projectName": "checkstyle.checkstyle", "bugType": "Wrong Function Name", "problem": "         };\n         verify(checkConfig,\n                getPath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\"), expected);\n     }\n     @Test", "fixed": "         };\n         verify(checkConfig,\n                getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\"),\n                expected);\n     }\n     @Test", "sourceBeforeFix": "getPath(\"InputPackageDeclarationDiffDirectory.java\")", "sourceAfterFix": "getNonCompilablePath(\"InputPackageDeclarationDiffDirectory.java\")"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t */\n \t@Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)\n\tpublic SortedMap<String, String> getSystemVariables() throws APIException;\n \t/**\n \t * Get a map of all the System Information. Java, user, time, runtime properties, etc", "fixed": " \t */\n \t@Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)\n\tpublic SortedMap<String, String> getSystemVariables();\n \t/**\n \t * Get a map of all the System Information. Java, user, time, runtime properties, etc", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n \t * @throws IOException Thrown if any of the two views raises an exception.\n \t */\n\tpublic void copy(DataInputView source, DataOutputView target) throws IOException;\n }", "fixed": " \t * \n \t * @throws IOException Thrown if any of the two views raises an exception.\n \t */\n\tpublic abstract void copy(DataInputView source, DataOutputView target) throws IOException;\n }", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "5cdfcd29a2d89e658f5f37aad3deb6130eeb47af", "projectName": "Atmosphere.atmosphere", "bugType": "Wrong Function Name", "problem": "     @Override\n     public WebSocket write(String s) throws IOException {\n        if (isOpen()) webSocketConnection.getRemote().sendString(s);\n         return this;\n     }\n     @Override\n     public WebSocket write(byte[] b, int offset, int length) throws IOException {\n        if (isOpen()) webSocketConnection.getRemote().sendBytes(ByteBuffer.wrap(b, offset, length));\n         return this;\n     }", "fixed": "     @Override\n     public WebSocket write(String s) throws IOException {\n        if (isOpen()) webSocketConnection.getRemote().sendStringByFuture(s);\n         return this;\n     }\n     @Override\n     public WebSocket write(byte[] b, int offset, int length) throws IOException {\n        if (isOpen()) webSocketConnection.getRemote().sendBytesByFuture(ByteBuffer.wrap(b, offset, length));\n         return this;\n     }", "sourceBeforeFix": "webSocketConnection.getRemote().sendBytes(ByteBuffer.wrap(b,offset,length))", "sourceAfterFix": "webSocketConnection.getRemote().sendBytesByFuture(ByteBuffer.wrap(b,offset,length))"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15849, value = \"Operation %s for address %s can only be handled by the \" +\n             \"master Domain Controller; this host is not the master Domain Controller\")\n     String masterDomainControllerOnlyOperation(String operation, PathAddress address);", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10849, value = \"Operation %s for address %s can only be handled by the \" +\n             \"master Domain Controller; this host is not the master Domain Controller\")\n     String masterDomainControllerOnlyOperation(String operation, PathAddress address);", "sourceBeforeFix": "id=15860", "sourceAfterFix": "id=10860"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "3dddcc4cdf4a74ddbd4607c6aaee5bdd8ac46c27", "projectName": "gephi.gephi", "bugType": "Change Modifier", "problem": "     }\n     @Override\n    public List<EdgeModel> getSelectedEdges() {\n         List<EdgeModel> selected = new ArrayList<>();\n         for (Iterator<EdgeModel> itr = octree.getEdgeIterator(); itr.hasNext();) {\n             EdgeModel edgeModel = itr.next();", "fixed": "     }\n     @Override\n    public synchronized List<EdgeModel> getSelectedEdges() {\n         List<EdgeModel> selected = new ArrayList<>();\n         for (Iterator<EdgeModel> itr = octree.getEdgeIterator(); itr.hasNext();) {\n             EdgeModel edgeModel = itr.next();", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "9754de49878983bf090655203e0c880cccad7b2e", "projectName": "Atmosphere.atmosphere", "bugType": "Wrong Function Name", "problem": "             logger.debug(\"Active clients {}\", activeClients());\n         }\n        long now = System.nanoTime();\n         String messageId = UUID.randomUUID().toString();\n         CacheMessage cacheMessage = new CacheMessage(messageId, e);\n         synchronized (messages) {", "fixed": "             logger.debug(\"Active clients {}\", activeClients());\n         }\n        long now = System.currentTimeMillis();\n         String messageId = UUID.randomUUID().toString();\n         CacheMessage cacheMessage = new CacheMessage(messageId, e);\n         synchronized (messages) {", "sourceBeforeFix": "System.nanoTime()", "sourceAfterFix": "System.currentTimeMillis()"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface PropertiesEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedPropertiesEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface PropertiesEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedPropertiesEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "5d6b0ad639f597e0245d7b4591f383f4f12c23d7", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         @Override\n         public void onResponse(Object response) {\n             boolean executing = Boolean.TRUE.equals(response);\n            invocation.logger.warning(\"'is-executing': \" + executing + \" -> \" + invocation);\n             if (!executing) {\n                 setOperationTimeout();\n             }", "fixed": "         @Override\n         public void onResponse(Object response) {\n             boolean executing = Boolean.TRUE.equals(response);\n            invocation.logger.finest(\"'is-executing': \" + executing + \" -> \" + invocation);\n             if (!executing) {\n                 setOperationTimeout();\n             }", "sourceBeforeFix": "invocation.logger.warning(\"Asking if operation execution has been started: \" + invocation)", "sourceAfterFix": "invocation.logger.finest(\"Asking if operation execution has been started: \" + invocation)"}
{"fixCommitSHA1": "63e47d927e70c83a170b0d2f93deb7f460ef54a3", "projectName": "hazelcast.hazelcast", "bugType": "Change Numeric Literal", "problem": "             }\n         });\n         topic.publish(message);\n        assertTrue(latch.await(100, TimeUnit.MILLISECONDS));\n     }\n     @Test", "fixed": "             }\n         });\n         topic.publish(message);\n        assertTrue(latch.await(10000, TimeUnit.MILLISECONDS));\n     }\n     @Test", "sourceBeforeFix": "latch.await(100,TimeUnit.MILLISECONDS)", "sourceAfterFix": "latch.await(10000,TimeUnit.MILLISECONDS)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<Status> getFriendsTimeline(Paging paging) throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\",null, paging.asPostParameterList(), true));\n     }\n     /**", "fixed": "      */\n     public ResponseList<Status> getFriendsTimeline(Paging paging) throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\",null, paging.asPostParameterList(), true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))"}
{"fixCommitSHA1": "76063c69b78baee602935b2296eeac234030b5de", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Wrong Function Name", "problem": "                     requestTimeout = p.getRequestTimeoutInMs();\n                 }\n                finishChannel(channel.getPipeline().getContext(NettyAsyncHttpProvider.class));\n                 abort(this.nettyResponseFuture, new TimeoutException(String.format(\"No response received after %s\", requestTimeout)));\n                 this.nettyResponseFuture = null;", "fixed": "                     requestTimeout = p.getRequestTimeoutInMs();\n                 }\n                markChannelNotReadable(channel.getPipeline().getContext(NettyAsyncHttpProvider.class));\n                 abort(this.nettyResponseFuture, new TimeoutException(String.format(\"No response received after %s\", requestTimeout)));\n                 this.nettyResponseFuture = null;", "sourceBeforeFix": "finishChannel(channel.getPipeline().getContext(NettyAsyncHttpProvider.class))", "sourceAfterFix": "markChannelNotReadable(channel.getPipeline().getContext(NettyAsyncHttpProvider.class))"}
{"fixCommitSHA1": "3757a700a89638e5747d966bdaa8266b62c974c8", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "   }\n   @GwtIncompatible(\"Reader/Writer\")\n  private void testStreamingEncodingWithSeparators(\n       BaseEncoding encoding, String decoded, String encoded) throws IOException {\n     testStreamingEncoding(encoding, decoded, encoded);", "fixed": "   }\n   @GwtIncompatible(\"Reader/Writer\")\n  private static void testStreamingEncodingWithSeparators(\n       BaseEncoding encoding, String decoded, String encoded) throws IOException {\n     testStreamingEncoding(encoding, decoded, encoded);", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "01fec049c0fb6b1c326d802687f3093b502123e0", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": " \t\t\t\t\t\t\ttry {\r\n \t\t\t\t\t\t\t\tModuleFactory.stopModule(mod, true, true);\r\n \t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tcatch (Throwable t3) {\r\n \t\t\t\t\t\t\t\tlog.trace(\"Unable to shutdown module:\" + mod, t3);\r", "fixed": " \t\t\t\t\t\t\ttry {\r\n \t\t\t\t\t\t\t\tModuleFactory.stopModule(mod, true, true);\r\n \t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tcatch (Exception t3) {\r\n \t\t\t\t\t\t\t\tlog.trace(\"Unable to shutdown module:\" + mod, t3);\r", "sourceBeforeFix": "Throwable t2", "sourceAfterFix": "Exception t2"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleAlternativesWithCommonLabel_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(730);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {System.out.println($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "fixed": " \tpublic void testMultipleAlternativesWithCommonLabel_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(729);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {System.out.println($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "sourceBeforeFix": "new StringBuilder(247)", "sourceAfterFix": "new StringBuilder(246)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedToMe() throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_to_me.json\",\n                 null, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedToMe() throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_to_me.json\",\n                 null, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))"}
{"fixCommitSHA1": "09694b9eaf40fff637428b473b8fdcef8f8c37c2", "projectName": "Alluxio.alluxio", "bugType": "Change Numeric Literal", "problem": "       \"alluxio.worker.block.allocator.MaxFreeAllocator\"),\n   WORKER_BIND_HOST(Name.WORKER_BIND_HOST, \"0.0.0.0\"),\n   WORKER_BLOCK_HEARTBEAT_INTERVAL_MS(Name.WORKER_BLOCK_HEARTBEAT_INTERVAL_MS, 1000),\n  WORKER_BLOCK_HEARTBEAT_TIMEOUT_MS(Name.WORKER_BLOCK_HEARTBEAT_TIMEOUT_MS, 10000),\n   WORKER_BLOCK_THREADS_MAX(Name.WORKER_BLOCK_THREADS_MAX, 2048),\n   WORKER_BLOCK_THREADS_MIN(Name.WORKER_BLOCK_THREADS_MIN, 256),\n   WORKER_DATA_BIND_HOST(Name.WORKER_DATA_BIND_HOST, \"0.0.0.0\"),", "fixed": "       \"alluxio.worker.block.allocator.MaxFreeAllocator\"),\n   WORKER_BIND_HOST(Name.WORKER_BIND_HOST, \"0.0.0.0\"),\n   WORKER_BLOCK_HEARTBEAT_INTERVAL_MS(Name.WORKER_BLOCK_HEARTBEAT_INTERVAL_MS, 1000),\n  WORKER_BLOCK_HEARTBEAT_TIMEOUT_MS(Name.WORKER_BLOCK_HEARTBEAT_TIMEOUT_MS, 60000),\n   WORKER_BLOCK_THREADS_MAX(Name.WORKER_BLOCK_THREADS_MAX, 2048),\n   WORKER_BLOCK_THREADS_MIN(Name.WORKER_BLOCK_THREADS_MIN, 256),\n   WORKER_DATA_BIND_HOST(Name.WORKER_DATA_BIND_HOST, \"0.0.0.0\"),", "sourceBeforeFix": "WORKER_SESSION_TIMEOUT_MS(Name.WORKER_SESSION_TIMEOUT_MS,10000)", "sourceAfterFix": "WORKER_SESSION_TIMEOUT_MS(Name.WORKER_SESSION_TIMEOUT_MS,60000)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "09998d1155cda1399a7624c7ed79b4611d974c4b", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t}\n \t@ImportAutoConfiguration(classes = ThymeleafAutoConfiguration.class)\n\t@UnrelatedOne\n \tstatic class ImportAutoConfigurationWithItemsTwo {\n \t}", "fixed": " \t}\n \t@ImportAutoConfiguration(classes = ThymeleafAutoConfiguration.class)\n\t@UnrelatedTwo\n \tstatic class ImportAutoConfigurationWithItemsTwo {\n \t}", "sourceBeforeFix": "ImportAutoConfigurationWithItemsOne.class", "sourceAfterFix": "ImportAutoConfigurationWithItemsTwo.class"}
{"fixCommitSHA1": "1adccc7a5bdc515f01ae6bd644097ab85336bd84", "projectName": "hazelcast.hazelcast", "bugType": "Same Function More Args", "problem": "         populateNearCache(clientMap, 1000);\n        HazelcastInstance member = hazelcastFactory.newHazelcastInstance();\n         final ClearEventCounterEventHandler handler = new ClearEventCounterEventHandler();", "fixed": "         populateNearCache(clientMap, 1000);\n        HazelcastInstance member = hazelcastFactory.newHazelcastInstance(newConfig());\n         final ClearEventCounterEventHandler handler = new ClearEventCounterEventHandler();", "sourceBeforeFix": "hazelcastFactory.newHazelcastClient()", "sourceAfterFix": "hazelcastFactory.newHazelcastClient(newClientConfig())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "af87fe0e2580cafb6b563688f119b3d40ae100f2", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "     @Before\n     public void setUpAdminObjects() throws NamingException {\n         server1Proxy = lookupAdminObject(TestSuiteEnvironment.getServerAddress(), \"8280\");\n        server2Proxy = lookupAdminObject(TestSuiteEnvironment.getServerAddress(), \"8380\");\n         Assert.assertNotNull(server1Proxy);\n         Assert.assertNotNull(server2Proxy);\n     }", "fixed": "     @Before\n     public void setUpAdminObjects() throws NamingException {\n         server1Proxy = lookupAdminObject(TestSuiteEnvironment.getServerAddress(), \"8280\");\n        server2Proxy = lookupAdminObject(TestSuiteEnvironment.getServerAddressNode1(), \"8380\");\n         Assert.assertNotNull(server1Proxy);\n         Assert.assertNotNull(server2Proxy);\n     }", "sourceBeforeFix": "TestSuiteEnvironment.getServerAddress()", "sourceAfterFix": "TestSuiteEnvironment.getServerAddressNode1()"}
{"fixCommitSHA1": "9497ad1ed12287f6d3b02e0bc66695f85e279954", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "     }\n     public void setDataCoding(byte dataCoding) {\n        this.alphabet = dataCoding;\n     }\n     public byte getAlphabet() {", "fixed": "     }\n     public void setDataCoding(byte dataCoding) {\n        this.dataCoding = dataCoding;\n     }\n     public byte getAlphabet() {", "sourceBeforeFix": "this.alphabet", "sourceAfterFix": "this.dataCoding"}
{"fixCommitSHA1": "e70960913c07d921dea470857f9bcdb67f38959f", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "      * Set the ignore pattern.\n      * @param format a <code>String</code> value\n      */\n    public void setIgnorePattern(String format) {\n         ignorePattern = Utils.createPattern(format);\n     }\n }", "fixed": "      * Set the ignore pattern.\n      * @param format a <code>String</code> value\n      */\n    public final void setIgnorePattern(String format) {\n         ignorePattern = Utils.createPattern(format);\n     }\n }", "sourceBeforeFix": "1", "sourceAfterFix": "17"}
{"fixCommitSHA1": "4665dcf9ab41c3c61cd42aad296ebfe518bfa003", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\n \t\tBuffer pixels) {\n\t\tGL.glTexSubImage2DEXT(target, level, xoffset, yoffset, width, height, format, type, pixels, Memory.getPosition(pixels));\n \t}\n \tpublic void glViewport (int x, int y, int width, int height) {", "fixed": " \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\n \t\tBuffer pixels) {\n\t\tGL.glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels, Memory.getPosition(pixels));\n \t}\n \tpublic void glViewport (int x, int y, int width, int height) {", "sourceBeforeFix": "GL.glBindTextureEXT(target,texture)", "sourceAfterFix": "GL.glBindTexture(target,texture)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface S3EndpointBuilder\n             extends\n                 S3EndpointConsumerBuilder, S3EndpointProducerBuilder {\n         default AdvancedS3EndpointBuilder advanced() {", "fixed": "     \n    public interface S3EndpointBuilder\n             extends\n                 S3EndpointConsumerBuilder, S3EndpointProducerBuilder {\n         default AdvancedS3EndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 15866, value = \"%s is null\")\n     IllegalArgumentException nullVar(String name);\n     /**", "fixed": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 10866, value = \"%s is null\")\n     IllegalArgumentException nullVar(String name);\n     /**", "sourceBeforeFix": "id=15841", "sourceAfterFix": "id=10841"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "54a0202fd530f5e76de06cbfc3e1da97f8cdf808", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "         entry = journalReader.read();\n       } catch (IOException e) {\n         LOG.warn(\"{}: Failed to read from journal: {}\", mMaster.getName(), e);\n        if (retry.attemptRetry()) {\n           continue;\n         }\n         throw new RuntimeException(e);", "fixed": "         entry = journalReader.read();\n       } catch (IOException e) {\n         LOG.warn(\"{}: Failed to read from journal: {}\", mMaster.getName(), e);\n        if (retry.attempt()) {\n           continue;\n         }\n         throw new RuntimeException(e);", "sourceBeforeFix": "retry.attemptRetry()", "sourceAfterFix": "retry.attempt()"}
{"fixCommitSHA1": "75d818e95d12ebd6c5c600bd2c8fb2657e0200da", "projectName": "Atmosphere.atmosphere", "bugType": "Change Identifier Used", "problem": "         AtmosphereRequest request = r.getRequest();\n         String cacheHeader = request.getHeader(X_CACHE_DATE);\n        r.getResponse().setHeader(X_CACHE_DATE, String.valueOf(System.currentTimeMillis()));\n         if (cacheHeader == null || cacheHeader.isEmpty()) {\n             return Collections.emptyList();\n         }", "fixed": "         AtmosphereRequest request = r.getRequest();\n         String cacheHeader = request.getHeader(X_CACHE_DATE);\n        r.getResponse().setHeader(X_CACHE_DATE, String.valueOf(System.nanoTime()));\n         if (cacheHeader == null || cacheHeader.isEmpty()) {\n             return Collections.emptyList();\n         }", "sourceBeforeFix": "System.currentTimeMillis()", "sourceAfterFix": "System.nanoTime()"}
{"fixCommitSHA1": "4dd18ed5c3188be2cfb14efce62e71ae6f19243a", "projectName": "dropwizard.dropwizard", "bugType": "Wrong Function Name", "problem": "         final PrintWriter output = mock(PrintWriter.class);\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getServletPath()).thenReturn(\"/tasks/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.of(\"runs\")));\n         when(request.getParameterValues(\"runs\")).thenReturn(new String[]{\"1\"});\n         when(response.getWriter()).thenReturn(output);", "fixed": "         final PrintWriter output = mock(PrintWriter.class);\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getPathInfo()).thenReturn(\"/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.of(\"runs\")));\n         when(request.getParameterValues(\"runs\")).thenReturn(new String[]{\"1\"});\n         when(response.getWriter()).thenReturn(output);", "sourceBeforeFix": "request.getServletPath()", "sourceAfterFix": "request.getPathInfo()"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites(int page) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"favorites.json\", \"page\", String.valueOf(page), true));\n     }\n     /**", "fixed": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites(int page) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"favorites.json\", \"page\", String.valueOf(page), true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\",true))"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<Status> getFriendsTimeline(Paging paging) throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\",null, paging.asPostParameterList(), true));\n     }\n     /**", "fixed": "      */\n     public ResponseList<Status> getFriendsTimeline(Paging paging) throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\",null, paging.asPostParameterList(), true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))"}
{"fixCommitSHA1": "53ebdf6a3f20e1b5ba4958e08ec1c31698d74c98", "projectName": "libgdx.libgdx", "bugType": "More Specific If", "problem": " \t\t\tNode node = nodes.get(i);\r\n \t\t\tif (node.actor.getY() < low) break;\r\n \t\t\tif (!node.isSelectable()) continue;\r\n\t\t\tif (node.actor.getY() <= high) selectedNodes.add(node);\r\n \t\t\tif (node.expanded) selectNodes(node.children, low, high);\r\n \t\t}\r\n \t}\r", "fixed": " \t\t\tNode node = nodes.get(i);\r\n \t\t\tif (node.actor.getY() < low) break;\r\n \t\t\tif (!node.isSelectable()) continue;\r\n\t\t\tif (node.actor.getY() <= high && !selectedNodes.contains(node, true)) selectedNodes.add(node);\r\n \t\t\tif (node.expanded) selectNodes(node.children, low, high);\r\n \t\t}\r\n \t}\r", "sourceBeforeFix": "node.actor.getY() <= high", "sourceAfterFix": "node.actor.getY() <= high && !selectedNodes.contains(node,true)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface CordaEndpointBuilder\n             extends\n                 CordaEndpointConsumerBuilder, CordaEndpointProducerBuilder {\n         default AdvancedCordaEndpointBuilder advanced() {", "fixed": "     \n    public interface CordaEndpointBuilder\n             extends\n                 CordaEndpointConsumerBuilder, CordaEndpointProducerBuilder {\n         default AdvancedCordaEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "536a8fa49fc8ce69e42af6004dc328ddc2ded045", "projectName": "Graylog2.graylog2-server", "bugType": "Change Identifier Used", "problem": "         final Map<String, String> result = ImmutableMap.of(\"alarmcallback_id\", id);\n         final URI alarmCallbackUri = UriBuilder.fromResource(AlarmCallbackResource.class)\n                 .path(\"{alarmCallbackId}\")\n                .build(id);\n         return Response.created(alarmCallbackUri).entity(result).build();\n     }", "fixed": "         final Map<String, String> result = ImmutableMap.of(\"alarmcallback_id\", id);\n         final URI alarmCallbackUri = UriBuilder.fromResource(AlarmCallbackResource.class)\n                 .path(\"{alarmCallbackId}\")\n                .build(streamid, id);\n         return Response.created(alarmCallbackUri).entity(result).build();\n     }", "sourceBeforeFix": "UriBuilder.fromResource(AlarmCallbackResource.class).path(\"{alarmCallbackId}\").build(id)", "sourceAfterFix": "UriBuilder.fromResource(AlarmCallbackResource.class).path(\"{alarmCallbackId}\").build(streamid,id)"}
{"fixCommitSHA1": "46fa8090954480eecdeb6e7367f0e30655853f42", "projectName": "checkstyle.checkstyle", "bugType": "Same Function More Args", "problem": "     private static String getIndentation(DetailNode node) {\n         final boolean isLastChild = JavadocUtils.getNextSibling(node) == null;\n         DetailNode currentNode = node;\n        final StringBuilder indentation = new StringBuilder();\n         while (currentNode.getParent() != null) {\n             currentNode = currentNode.getParent();\n             if (currentNode.getParent() == null) {", "fixed": "     private static String getIndentation(DetailNode node) {\n         final boolean isLastChild = JavadocUtils.getNextSibling(node) == null;\n         DetailNode currentNode = node;\n        final StringBuilder indentation = new StringBuilder(1024);\n         while (currentNode.getParent() != null) {\n             currentNode = currentNode.getParent();\n             if (currentNode.getParent() == null) {", "sourceBeforeFix": "new StringBuilder()", "sourceAfterFix": "new StringBuilder(1024)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "c5e7dea98700e040d6dd872015b8dac472b9aa2d", "projectName": "checkstyle.checkstyle", "bugType": "Wrong Function Name", "problem": "     public void testGetRequiredTokens() {\n         InterfaceIsTypeCheck obj = new InterfaceIsTypeCheck();\n         int[] expected = {TokenTypes.INTERFACE_DEF};\n        assertArrayEquals(expected, obj.getAcceptableTokens());\n     }\n }", "fixed": "     public void testGetRequiredTokens() {\n         InterfaceIsTypeCheck obj = new InterfaceIsTypeCheck();\n         int[] expected = {TokenTypes.INTERFACE_DEF};\n        assertArrayEquals(expected, obj.getRequiredTokens());\n     }\n }", "sourceBeforeFix": "obj.getAcceptableTokens()", "sourceAfterFix": "obj.getRequiredTokens()"}
{"fixCommitSHA1": "fa187b882171fc0c6cf049a85bcaae26d2261328", "projectName": "libgdx.libgdx", "bugType": "Change Operand ", "problem": " \t\tif (objects == null) throw new IllegalArgumentException(\"objects cannot be null.\");\r\n \t\tfor (int i = 0, n = objects.size; i < n; i++) {\r\n \t\t\tObject object = objects.get(i);\r\n\t\t\tif (objects == null) continue;\r\n \t\t\tReflectionPool pool = typePools.get(object.getClass());\r\nif (pool == null) return;\n \t\t\tpool.free(object);\r", "fixed": " \t\tif (objects == null) throw new IllegalArgumentException(\"objects cannot be null.\");\r\n \t\tfor (int i = 0, n = objects.size; i < n; i++) {\r\n \t\t\tObject object = objects.get(i);\r\n\t\t\tif (object == null) continue;\r\n \t\t\tReflectionPool pool = typePools.get(object.getClass());\r\nif (pool == null) return;\n \t\t\tpool.free(object);\r", "sourceBeforeFix": "objects == null", "sourceAfterFix": "object == null"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should exclude not allowed locales\n \t * @should cache results for a user\n \t */\n\tpublic List<Locale> getSearchLocales() throws APIException;\n \t/**\n \t * Used by Spring to set the http client for accessing the openmrs implementation service", "fixed": " \t * @should exclude not allowed locales\n \t * @should cache results for a user\n \t */\n\tpublic List<Locale> getSearchLocales();\n \t/**\n \t * Used by Spring to set the http client for accessing the openmrs implementation service", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n* @see\n \t */\n\tpublic boolean equalToReference(T candidate);\n \t/**\n \t * This method compares the element that has been set as reference in this type accessor, to the", "fixed": " \t * \n* @see\n \t */\n\tpublic abstract boolean equalToReference(T candidate);\n \t/**\n \t * This method compares the element that has been set as reference in this type accessor, to the", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "f8c20919f9c2e18e48142c2712e34298f98b983e", "projectName": "spring-projects.spring-boot", "bugType": "Wrong Function Name", "problem": " \t@Test\n \tpublic void startServletAndFilter() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n\t\tthis.container = factory.getEmbdeddedServletContainer(\n \t\t\t\texampleServletRegistration(), new FilterRegistrationBean(\n \t\t\t\t\t\tnew ExampleFilter()));\nassertThat(getResponse(\"http:", "fixed": " \t@Test\n \tpublic void startServletAndFilter() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n\t\tthis.container = factory.getEmbeddedServletContainer(\n \t\t\t\texampleServletRegistration(), new FilterRegistrationBean(\n \t\t\t\t\t\tnew ExampleFilter()));\nassertThat(getResponse(\"http:", "sourceBeforeFix": "factory.getEmbdeddedServletContainer(initializers[0],initializers[1])", "sourceAfterFix": "factory.getEmbeddedServletContainer(initializers[0],initializers[1])"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n \t * @throws IOException Thrown if any of the two views raises an exception.\n \t */\n\tpublic void copy(DataInputView source, DataOutputView target) throws IOException;\n }", "fixed": " \t * \n \t * @throws IOException Thrown if any of the two views raises an exception.\n \t */\n\tpublic abstract void copy(DataInputView source, DataOutputView target) throws IOException;\n }", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShader(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "fixed": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShaderiv(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "sourceBeforeFix": "GL20.glGetVertexAttrib(index,pname,params)", "sourceAfterFix": "GL20.glGetVertexAttribfv(index,pname,params)"}
{"fixCommitSHA1": "6207b66e20a807c1cc74c914f2734c5dab5bfea7", "projectName": "druid-io.druid", "bugType": "Same Function More Args", "problem": "     final PlannerConfig plannerConfig = new PlannerConfig();\n     final DruidSchema druidSchema = CalciteTests.createMockSchema(conglomerate, walker, plannerConfig);\n    final SystemSchema systemSchema = CalciteTests.createMockSystemSchema(druidSchema, walker);\n     final DruidOperatorTable operatorTable = new DruidOperatorTable(\n         ImmutableSet.of(new DoublesSketchSqlAggregator()),\n         ImmutableSet.of()", "fixed": "     final PlannerConfig plannerConfig = new PlannerConfig();\n     final DruidSchema druidSchema = CalciteTests.createMockSchema(conglomerate, walker, plannerConfig);\n    final SystemSchema systemSchema = CalciteTests.createMockSystemSchema(druidSchema, walker, plannerConfig);\n     final DruidOperatorTable operatorTable = new DruidOperatorTable(\n         ImmutableSet.of(new DoublesSketchSqlAggregator()),\n         ImmutableSet.of()", "sourceBeforeFix": "CalciteTests.createMockSystemSchema(druidSchema,walker)", "sourceAfterFix": "CalciteTests.createMockSystemSchema(druidSchema,walker,plannerConfig)"}
{"fixCommitSHA1": "55ed50c4975cf694828d46ee9ca32ce72a9ef913", "projectName": "clojure.clojure", "bugType": "Wrong Function Name", "problem": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 20:\r\n\t\t\treturn invoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "fixed": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 20:\r\n\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "sourceBeforeFix": "invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())", "sourceAfterFix": "doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())"}
{"fixCommitSHA1": "98c988a5bd57ee4324cc80cf87be5993a00a537b", "projectName": "apache.camel", "bugType": "Change Caller in Function Call", "problem": "         }\n         Map<String, Object> responseModels = IntrospectionSupport.extractProperties(parameters, \"responseModel.\");\n        for (Map.Entry<String, Object> entry : requestModels.entrySet()) {\n             configuration.addResponseModel(\n                 entry.getKey(),\n                 EndpointHelper.resolveParameter(context, (String)entry.getValue(), Class.class));", "fixed": "         }\n         Map<String, Object> responseModels = IntrospectionSupport.extractProperties(parameters, \"responseModel.\");\n        for (Map.Entry<String, Object> entry : responseModels.entrySet()) {\n             configuration.addResponseModel(\n                 entry.getKey(),\n                 EndpointHelper.resolveParameter(context, (String)entry.getValue(), Class.class));", "sourceBeforeFix": "requestModels.entrySet()", "sourceAfterFix": "responseModels.entrySet()"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getUserListStatuses(String user, int id, Paging paging) throws TwitterException {\n        return Status.constructStatuses(get(getApiBaseURL() + V1 + user +\n                 \"/lists/\" + id + \"/statuses.json\", new PostParameter[0],\n                 paging.asPostParameterList(Paging.SMCP, Paging.PER_PAGE), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getUserListStatuses(String user, int id, Paging paging) throws TwitterException {\n        return Status.createStatuseList(get(getApiBaseURL() + V1 + user +\n                 \"/lists/\" + id + \"/statuses.json\", new PostParameter[0],\n                 paging.asPostParameterList(Paging.SMCP, Paging.PER_PAGE), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))"}
{"fixCommitSHA1": "3b47b9b23bf3f10d124f26f37dff3245fe09ec56", "projectName": "wildfly.wildfly", "bugType": "Change Caller in Function Call", "problem": "             if (!queueLength.isDefined() || queueLength.asInt() == Integer.MAX_VALUE) {\n                 if (coreThreads.isDefined() && coreThreads.asInt() <= 0) {\n                    throw EeLogger.ROOT_LOGGER.invalidCoreThreadsSize(coreThreads.asString());\n                 }\n             }", "fixed": "             if (!queueLength.isDefined() || queueLength.asInt() == Integer.MAX_VALUE) {\n                 if (coreThreads.isDefined() && coreThreads.asInt() <= 0) {\n                    throw EeLogger.ROOT_LOGGER.invalidCoreThreadsSize(queueLength.asString());\n                 }\n             }", "sourceBeforeFix": "coreThreads.asString()", "sourceAfterFix": "queueLength.asString()"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface HazelcastRingbufferEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedHazelcastRingbufferEndpointBuilder advanced() {", "fixed": "     \n    public interface HazelcastRingbufferEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedHazelcastRingbufferEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface KafkaEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedKafkaEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface KafkaEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedKafkaEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "f9374238b2870cad6c090589ec18933983e1c902", "projectName": "checkstyle.checkstyle", "bugType": "Same Function More Args", "problem": "          * @param column the column number.\n          * @param text the text of the suppression.\n          * @param on <code>true</code> if the tag turns checkstyle reporting.\n          * @throws ConversionException if unable to parse expanded text.\n          * on.\n          */\n        public Tag(int line, int column, String text, boolean on)\n             throws ConversionException\n         {\n             this.line = line;", "fixed": "          * @param column the column number.\n          * @param text the text of the suppression.\n          * @param on <code>true</code> if the tag turns checkstyle reporting.\n         * @param filter the {@code SuppressionCommentFilter} with the context\n          * @throws ConversionException if unable to parse expanded text.\n          * on.\n          */\n        public Tag(int line, int column, String text, boolean on, SuppressionCommentFilter filter)\n             throws ConversionException\n         {\n             this.line = line;", "sourceBeforeFix": "new Tag(line,column,text,on)", "sourceAfterFix": "new Tag(line,column,text,on,this)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface SjmsEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedSjmsEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface SjmsEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedSjmsEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedGoogleSheetsEndpointBuilder\n             extends\n                 AdvancedGoogleSheetsEndpointConsumerBuilder, AdvancedGoogleSheetsEndpointProducerBuilder {\n         default GoogleSheetsEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedGoogleSheetsEndpointBuilder\n             extends\n                 AdvancedGoogleSheetsEndpointConsumerBuilder, AdvancedGoogleSheetsEndpointProducerBuilder {\n         default GoogleSheetsEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "c32df371abcbee7ebbb77e6bf6a429d3f3f4134b", "projectName": "netty.netty", "bugType": "Change Caller in Function Call", "problem": "             tmpBuf.clear().position(index).limit(index + length);\n         } catch (IllegalArgumentException e) {\n             throw new IndexOutOfBoundsException(\"Too many bytes to read - Need \"\n                    + (index + length) + \", maximum is \" + data.limit());\n         }\n         tmpBuf.get(dst, dstIndex, length);\n     }", "fixed": "             tmpBuf.clear().position(index).limit(index + length);\n         } catch (IllegalArgumentException e) {\n             throw new IndexOutOfBoundsException(\"Too many bytes to read - Need \"\n                    + (index + length) + \", maximum is \" + buffer.limit());\n         }\n         tmpBuf.get(dst, dstIndex, length);\n     }", "sourceBeforeFix": "data.limit()", "sourceAfterFix": "buffer.limit()"}
{"fixCommitSHA1": "e97382e401f58108ad645dee2076ddd110a3e7e9", "projectName": "facebook.presto", "bugType": "Change Identifier Used", "problem": "             throw new IOException(\"Failed to list directory: \" + dir);\n         }\n         for (File file : files) {\n            Files.delete(file.toPath());\n         }\n        Files.delete(dir.toPath());\n     }\n }", "fixed": "             throw new IOException(\"Failed to list directory: \" + dir);\n         }\n         for (File file : files) {\n            Files.deleteIfExists(file.toPath());\n         }\n        Files.deleteIfExists(dir.toPath());\n     }\n }", "sourceBeforeFix": "Files.delete(file.toPath())", "sourceAfterFix": "Files.deleteIfExists(file.toPath())"}
{"fixCommitSHA1": "0a2b272cb8cb45faafd95a3bbc9e9af813620e09", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "     }\n     public void destroy() {\n        final LockService lockService = nodeEngine.getService(LockService.SERVICE_NAME);\n         if (lockService != null) {\n             lockService.clearLockStore(partitionId, lockNamespace);\n         }", "fixed": "     }\n     public void destroy() {\n        final LockService lockService = nodeEngine.getSharedService(LockService.SERVICE_NAME);\n         if (lockService != null) {\n             lockService.clearLockStore(partitionId, lockNamespace);\n         }", "sourceBeforeFix": "nodeEngine.getService(LockService.SERVICE_NAME)", "sourceAfterFix": "nodeEngine.getSharedService(LockService.SERVICE_NAME)"}
{"fixCommitSHA1": "225c805e0416ad90aa2d71a978de8be697949ecf", "projectName": "wildfly.wildfly", "bugType": "Change Caller in Function Call", "problem": "             if (!file.exists()) {\n                 return null;\n             }\n            return new VFSEntryResource(file, root.toURL());\n         } catch (MalformedURLException e) {\n             return null;", "fixed": "             if (!file.exists()) {\n                 return null;\n             }\n            return new VFSEntryResource(file, file.toURL());\n         } catch (MalformedURLException e) {\n             return null;", "sourceBeforeFix": "root.toURL()", "sourceAfterFix": "file.toURL()"}
{"fixCommitSHA1": "9f0d922f042d7342252ad2e1476ae45002c89cfd", "projectName": "openhab.openhab", "bugType": "Change Numeric Literal", "problem": "                     } else {\r\n                         sendColor(command, bridgeId, bulb);\r\n                     }\r\n                }\r\n                if (command instanceof PercentType) {\r\n                     sendPercent(bulb, rgbwSteps, bridgeId, (PercentType) command, BindingType.brightness);\r\n                 }\r\n             }\r", "fixed": "                     } else {\r\n                         sendColor(command, bridgeId, bulb);\r\n                     }\r\n                } else if (command instanceof PercentType) {\r\n                     sendPercent(bulb, rgbwSteps, bridgeId, (PercentType) command, BindingType.brightness);\r\n                 }\r\n             }\r", "sourceBeforeFix": "Thread.sleep(50)", "sourceAfterFix": "Thread.sleep(100)"}
{"fixCommitSHA1": "a82a81905c6c9034a910fa906ff84a487226213d", "projectName": "Alluxio.alluxio", "bugType": "Wrong Function Name", "problem": "       }\n     }\n     if (selectedDirView == null) {\n      LOG.error(\"Failed to freeSpace: No StorageDirView has enough capacity of {} bytes\",\n           availableBytes);\n       return null;\n     }", "fixed": "       }\n     }\n     if (selectedDirView == null) {\n      LOG.warn(\"Failed to freeSpace: No StorageDirView has enough capacity of {} bytes\",\n           availableBytes);\n       return null;\n     }", "sourceBeforeFix": "LOG.error(\"Failed to freeSpace: No StorageDirView has enough capacity of {} bytes\",availableBytes)", "sourceAfterFix": "LOG.warn(\"Failed to freeSpace: No StorageDirView has enough capacity of {} bytes\",availableBytes)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "f02bbb70a692cc8ce3789533e5cc0984fabb4299", "projectName": "neo4j.neo4j", "bugType": "Change Numeric Literal", "problem": "     @Test\n     public void makeSureStoreCantBeUpgradedByBatchInserterEvenIfExplicitlyToldTo() throws Exception\n     {\n        String path = path( 11 );\n         new EmbeddedGraphDatabase( path ).shutdown();\n         setOlderNeoStoreVersion( path );", "fixed": "     @Test\n     public void makeSureStoreCantBeUpgradedByBatchInserterEvenIfExplicitlyToldTo() throws Exception\n     {\n        String path = path( 14 );\n         new EmbeddedGraphDatabase( path ).shutdown();\n         setOlderNeoStoreVersion( path );", "sourceBeforeFix": "path(11)", "sourceAfterFix": "path(14)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserLists(String user, long cursor) throws TwitterException {\n        return twitter4j.List.constructListOfLists(get(getApiBaseURL() + V1 +\n                 user + \"/lists.json?cursor=\" + cursor, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserLists(String user, long cursor) throws TwitterException {\n        return twitter4j.List.createListList(get(getApiBaseURL() + V1 +\n                 user + \"/lists.json?cursor=\" + cursor, true));\n     }", "sourceBeforeFix": "SavedSearch.constructSavedSearches(get(getBaseURL() + \"saved_searches.json\",true))", "sourceAfterFix": "SavedSearch.createSavedSearchList(get(getBaseURL() + \"saved_searches.json\",true))"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetProgramiv (int program, int pname, IntBuffer params) {\r\n\t\tGL20.glGetProgram(program, pname, params);\r\n \t}\r\n \tpublic void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tEXTFramebufferObject.glGetRenderbufferParameterEXT(target, pname, params);\r\n \t}\r\n \tpublic String glGetShaderInfoLog (int shader) {\r", "fixed": " \t}\r\n \tpublic void glGetProgramiv (int program, int pname, IntBuffer params) {\r\n\t\tGL20.glGetProgramiv(program, pname, params);\r\n \t}\r\n \tpublic void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tEXTFramebufferObject.glGetRenderbufferParameterivEXT(target, pname, params);\r\n \t}\r\n \tpublic String glGetShaderInfoLog (int shader) {\r", "sourceBeforeFix": "GL20.glUniform2(location,v)", "sourceAfterFix": "GL20.glUniform2fv(location,v)"}
{"fixCommitSHA1": "ed13d3007bbe9cb7df8641d2e287bf94c314fb86", "projectName": "facebook.presto", "bugType": "Change Identifier Used", "problem": "             return false;\n         }\n        long newReservation = memoryReservation.getAndAdd(bytes);\n         if (newReservation > maxMemoryReservation) {\n             memoryReservation.getAndAdd(-bytes);\n             return false;", "fixed": "             return false;\n         }\n        long newReservation = memoryReservation.addAndGet(bytes);\n         if (newReservation > maxMemoryReservation) {\n             memoryReservation.getAndAdd(-bytes);\n             return false;", "sourceBeforeFix": "memoryReservation.getAndAdd(bytes)", "sourceAfterFix": "memoryReservation.addAndGet(bytes)"}
{"fixCommitSHA1": "c115ee1550ecf4bc8164e59a4f69b59addd50cc6", "projectName": "spring-projects.spring-boot", "bugType": "Same Function Less Args", "problem": " \tprivate final MockEnvironment environment = new MockEnvironment();\n\tprivate final JmxEndpointProperties properties = new JmxEndpointProperties(\n\t\t\tthis.environment);\n \tprivate final MBeanServer mBeanServer = mock(MBeanServer.class);", "fixed": " \tprivate final MockEnvironment environment = new MockEnvironment();\n\tprivate final JmxEndpointProperties properties = new JmxEndpointProperties();\n \tprivate final MBeanServer mBeanServer = mock(MBeanServer.class);", "sourceBeforeFix": "new JmxEndpointProperties(this.environment)", "sourceAfterFix": "new JmxEndpointProperties()"}
{"fixCommitSHA1": "557a51f3ac19cf4b2ffbcb32354152c88643398d", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "     assertEquals(10, removalListener.getCount());\n   }\n  private void getAll(LoadingCache<Integer, Integer> cache, List<Integer> keys) {\n     for (int i : keys) {\n       cache.getUnchecked(i);\n     }", "fixed": "     assertEquals(10, removalListener.getCount());\n   }\n  private static void getAll(LoadingCache<Integer, Integer> cache, List<Integer> keys) {\n     for (int i : keys) {\n       cache.getUnchecked(i);\n     }", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetsOfMe() throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweets_of_me.json\",\n                 null, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetsOfMe() throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweets_of_me.json\",\n                 null, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",null,true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8b9791f8b4b1154d6a053de901a5efd2105409e5", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "         return configuration.getSslCipherSuites();\n     }\n    public void setRequestRequiredAcks(Integer requestRequiredAcks) {\n         configuration.setRequestRequiredAcks(requestRequiredAcks);\n     }", "fixed": "         return configuration.getSslCipherSuites();\n     }\n    public void setRequestRequiredAcks(String requestRequiredAcks) {\n         configuration.setRequestRequiredAcks(requestRequiredAcks);\n     }", "sourceBeforeFix": "Integer requestRequiredAcks", "sourceAfterFix": "String requestRequiredAcks"}
{"fixCommitSHA1": "42cf20c9f1842cc9257fe271b7b8bc4367795b57", "projectName": "druid-io.druid", "bugType": "Change Numeric Literal", "problem": " {\n   @JsonProperty\n   @Min(0)\n  private int numConnections = 5;\n   @JsonProperty\n   private Period readTimeout = new Period(\"PT15M\");", "fixed": " {\n   @JsonProperty\n   @Min(0)\n  private int numConnections = 20;\n   @JsonProperty\n   private Period readTimeout = new Period(\"PT15M\");", "sourceBeforeFix": "numConnections=5", "sourceAfterFix": "numConnections=20"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "06d716c08a00fc5e3fb3ecf12e1dbb703756e9c9", "projectName": "apache.storm", "bugType": "Less Specific If", "problem": "             int port = Utils.getInt(conf.get(Config.DRPC_INVOCATIONS_PORT));\n             List<String> servers = (List<String>) conf.get(Config.DRPC_SERVERS);\n            if(servers.isEmpty()) {\n                 throw new RuntimeException(\"No DRPC servers configured for topology\");   \n             }\n             if(numTasks < servers.size()) {", "fixed": "             int port = Utils.getInt(conf.get(Config.DRPC_INVOCATIONS_PORT));\n             List<String> servers = (List<String>) conf.get(Config.DRPC_SERVERS);\n            if(servers == null || servers.isEmpty()) {\n                 throw new RuntimeException(\"No DRPC servers configured for topology\");   \n             }\n             if(numTasks < servers.size()) {", "sourceBeforeFix": "servers.isEmpty()", "sourceAfterFix": "servers == null || servers.isEmpty()"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_de() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"06.05.2016\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_de() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"06.05.2016\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedSedaEndpointBuilder\n             extends\n                 AdvancedSedaEndpointConsumerBuilder, AdvancedSedaEndpointProducerBuilder {\n         default SedaEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedSedaEndpointBuilder\n             extends\n                 AdvancedSedaEndpointConsumerBuilder, AdvancedSedaEndpointProducerBuilder {\n         default SedaEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public Trends getCurrentTrends() throws TwitterException {\n        return Trends.constructTrendsList(get(getSearchBaseURL() + \"trends/current.json\"\n                 , false)).get(0);\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public Trends getCurrentTrends() throws TwitterException {\n        return Trends.createTrendsList(get(getSearchBaseURL() + \"trends/current.json\"\n                 , false)).get(0);\n     }", "sourceBeforeFix": "DirectMessage.constructDirectMessages(get(getBaseURL() + \"direct_messages.json\",true))", "sourceAfterFix": "DirectMessage.createDirectMessageList(get(getBaseURL() + \"direct_messages.json\",true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "5b13fe70c25812157a1e4432135eb9639e72bc6a", "projectName": "apache.flink", "bugType": "Wrong Function Name", "problem": " \t\tfinal Sink normalizedPersons = new Sink(\"normalizedPersons.json\").withInputs(replace);\n \t\texpectedPlan.setSinks(normalizedPersons);\n\t\tassertEquals(expectedPlan, actualPlan);\n \t}\n }", "fixed": " \t\tfinal Sink normalizedPersons = new Sink(\"normalizedPersons.json\").withInputs(replace);\n \t\texpectedPlan.setSinks(normalizedPersons);\n\t\tassertPlanEquals(expectedPlan, actualPlan);\n \t}\n }", "sourceBeforeFix": "assertEquals(expectedPlan,actualPlan)", "sourceAfterFix": "assertPlanEquals(expectedPlan,actualPlan)"}
{"fixCommitSHA1": "6bae902bd35ed4f57e7a5d612b7ad9b72f4559bc", "projectName": "google.closure-compiler", "bugType": "Wrong Function Name", "problem": "   public void testCheckTreeEqualsBooleanSame() {\n     Node node1 = new Node(1);\n    assertEquals(true, node1.checkTreeEqualsSilent(node1));\n   }\n   public void testCheckTreeEqualsBooleanDifferent() {\n     Node node1 = new Node(1);\n     Node node2 = new Node(2);\n    assertEquals(false, node1.checkTreeEqualsSilent(node2));\n   }\n   public void testCheckTreeEqualsImplDifferentIncProp() {", "fixed": "   public void testCheckTreeEqualsBooleanSame() {\n     Node node1 = new Node(1);\n    assertEquals(true, node1.isEquivalentTo(node1));\n   }\n   public void testCheckTreeEqualsBooleanDifferent() {\n     Node node1 = new Node(1);\n     Node node2 = new Node(2);\n    assertEquals(false, node1.isEquivalentTo(node2));\n   }\n   public void testCheckTreeEqualsImplDifferentIncProp() {", "sourceBeforeFix": "node1.checkTreeEqualsSilent(node2)", "sourceAfterFix": "node1.isEquivalentTo(node2)"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": "grammarBuilder.append(\"  | '(' e ')'   {$v = $e.v;}\ngrammarBuilder.append(\"  | left=e INC  {$v = $left.v + 1;}\ngrammarBuilder.append(\"  | left=e DEC  {$v = $left.v - 1;}\n\t\tgrammarBuilder.append(\"  | ID          {$v = 3}\n \t\tgrammarBuilder.append(\"  ;\\n\");\n \t\tgrammarBuilder.append(\"ID : 'a'..'z'+ ;\\n\");\n \t\tgrammarBuilder.append(\"INT : '0'..'9'+ ;\\n\");", "fixed": "grammarBuilder.append(\"  | '(' e ')'   {$v = $e.v;}\ngrammarBuilder.append(\"  | left=e INC  {$v = $left.v + 1;}\ngrammarBuilder.append(\"  | left=e DEC  {$v = $left.v - 1;}\n\t\tgrammarBuilder.append(\"  | ID          {$v = 3;}\n \t\tgrammarBuilder.append(\"  ;\\n\");\n \t\tgrammarBuilder.append(\"ID : 'a'..'z'+ ;\\n\");\n \t\tgrammarBuilder.append(\"INT : '0'..'9'+ ;\\n\");", "sourceBeforeFix": "new StringBuilder(254)", "sourceAfterFix": "new StringBuilder(253)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedFlatpackEndpointBuilder\n             extends\n                 AdvancedFlatpackEndpointConsumerBuilder, AdvancedFlatpackEndpointProducerBuilder {\n         default FlatpackEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedFlatpackEndpointBuilder\n             extends\n                 AdvancedFlatpackEndpointConsumerBuilder, AdvancedFlatpackEndpointProducerBuilder {\n         default FlatpackEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "b7a82854871f76fbc0bda0c5fec2be699fc46b68", "projectName": "hazelcast.hazelcast", "bugType": "Change Numeric Literal", "problem": "     private static final int MAX_SECONDS = 60 * 10;\n     private static final int NUMBER_OF_CLIENTS = 8;\n    private static final int THREADS_PER_CLIENT = 8;\n     private static final String MAP_NAME = randomString();", "fixed": "     private static final int MAX_SECONDS = 60 * 10;\n     private static final int NUMBER_OF_CLIENTS = 8;\n    private static final int THREADS_PER_CLIENT = 4;\n     private static final String MAP_NAME = randomString();", "sourceBeforeFix": "THREADS_PER_CLIENT=8", "sourceAfterFix": "THREADS_PER_CLIENT=4"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform3fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform3(location, v);\r\n \t}\r\n \tpublic void glUniform3fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform3(location, toFloatBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform3i (int location, int x, int y, int z) {\r", "fixed": " \t}\r\n \tpublic void glUniform3fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform3fv(location, v);\r\n \t}\r\n \tpublic void glUniform3fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform3fv(location, toFloatBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform3i (int location, int x, int y, int z) {\r", "sourceBeforeFix": "GL20.glUniform4(location,v)", "sourceAfterFix": "GL20.glUniform4iv(location,v)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  private final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "6ca971f8904a41334a7b811033c0c146e9a3f45a", "projectName": "Alluxio.alluxio", "bugType": "Same Function More Args", "problem": "    * @param timer a timer to add to the scheduler\n    */\n   public static void addTimer(ScheduledTimer timer) {\n    Preconditions.checkNotNull(timer);\n     try (LockResource r = new LockResource(sLock)) {\n       Preconditions.checkState(!sTimers.containsKey(timer.getThreadName()),\n           \"The timer for thread %s is already waiting to be scheduled\", timer.getThreadName());", "fixed": "    * @param timer a timer to add to the scheduler\n    */\n   public static void addTimer(ScheduledTimer timer) {\n    Preconditions.checkNotNull(timer, \"timer\");\n     try (LockResource r = new LockResource(sLock)) {\n       Preconditions.checkState(!sTimers.containsKey(timer.getThreadName()),\n           \"The timer for thread %s is already waiting to be scheduled\", timer.getThreadName());", "sourceBeforeFix": "Preconditions.checkNotNull(timer)", "sourceAfterFix": "Preconditions.checkNotNull(timer,\"timer\")"}
{"fixCommitSHA1": "499d9d3f89368592549f1ec3701f5a7616113a4c", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \t@Test\n \tpublic void testTokenAndRuleContextString() throws Exception {\n \t\tmkdir(parserpkgdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(167);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s\\n\");\n \t\tgrammarBuilder.append(\"@init {\\n\");", "fixed": " \t@Test\n \tpublic void testTokenAndRuleContextString() throws Exception {\n \t\tmkdir(parserpkgdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(194);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s\\n\");\n \t\tgrammarBuilder.append(\"@init {\\n\");", "sourceBeforeFix": "new StringBuilder(167)", "sourceAfterFix": "new StringBuilder(194)"}
{"fixCommitSHA1": "057871ac29b57a45bbbe7ce6328c942056e075ab", "projectName": "wildfly.wildfly", "bugType": "Wrong Function Name", "problem": "     @Override\n     public ModelNode getModelDescription(Locale locale) {\n        return DeploymentDescription.getDeployDeploymentOperation(locale);\n     }\n     public void execute(OperationContext context, ModelNode operation) throws OperationFailedException {", "fixed": "     @Override\n     public ModelNode getModelDescription(Locale locale) {\n        return DeploymentDescription.getReplaceDeploymentOperation(locale);\n     }\n     public void execute(OperationContext context, ModelNode operation) throws OperationFailedException {", "sourceBeforeFix": "DeploymentDescription.getDeployDeploymentOperation(locale)", "sourceAfterFix": "DeploymentDescription.getReplaceDeploymentOperation(locale)"}
{"fixCommitSHA1": "51271a02806489a2e2b5539475eb2131fd29b77d", "projectName": "google.closure-compiler", "bugType": "Change Caller in Function Call", "problem": "     compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED_OBFUSCATED);\n    GatherGettersAndSetterProperties.update(compiler, externs, root);\n   }\n   /**", "fixed": "     compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED_OBFUSCATED);\n    GatherGetterAndSetterProperties.update(compiler, externs, root);\n   }\n   /**", "sourceBeforeFix": "GatherGettersAndSetterProperties.update(compiler,externs,root)", "sourceAfterFix": "GatherGetterAndSetterProperties.update(compiler,externs,root)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "ea98386dfd18da047c877a2320cfdcf15df2ea06", "projectName": "facebook.presto", "bugType": "Change Modifier", "problem": "                 .retInt();\n     }\n    private void generateGetSizeInBytesMethod(ClassDefinition classDefinition, FieldDefinition sizeField)\n     {\n         MethodDefinition method = classDefinition.declareMethod(a(PUBLIC), \"getSizeInBytes\", type(long.class));", "fixed": "                 .retInt();\n     }\n    private static void generateGetSizeInBytesMethod(ClassDefinition classDefinition, FieldDefinition sizeField)\n     {\n         MethodDefinition method = classDefinition.declareMethod(a(PUBLIC), \"getSizeInBytes\", type(long.class));", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "5d379423cb8f460bf7e84ec0f6c290dba044fb23", "projectName": "libgdx.libgdx", "bugType": "Change Numeric Literal", "problem": " \tpublic void resume(Application app) \r\n \t{\r\n \t\tdevice = app.getAudio().newAudioDevice(true);\r\n\t\trecorder = app.getAudio().newAudioRecoder( 22050, true );\t\t\r\n \t}\t\r\n }\r", "fixed": " \tpublic void resume(Application app) \r\n \t{\r\n \t\tdevice = app.getAudio().newAudioDevice(true);\r\n\t\trecorder = app.getAudio().newAudioRecoder( 44100, true );\t\t\r\n \t}\t\r\n }\r", "sourceBeforeFix": "app.getAudio().newAudioRecoder(22050,true)", "sourceAfterFix": "app.getAudio().newAudioRecoder(44100,true)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetsOfMe() throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweets_of_me.json\",\n                 null, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetsOfMe() throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweets_of_me.json\",\n                 null, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface S3EndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedS3EndpointProducerBuilder advanced() {", "fixed": "     \n    public interface S3EndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedS3EndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "d270a8582b50321bc4b8a5921ff2439022a403d2", "projectName": "checkstyle.checkstyle", "bugType": "Less Specific If", "problem": "              token = token.getParent())\n         {\n             final int type = token.getType();\n            if (type == TokenTypes.CLASS_DEF) {\nbreak;\n             }\n             else if (type == TokenTypes.LITERAL_NEW) {\nbreak;", "fixed": "              token = token.getParent())\n         {\n             final int type = token.getType();\n            if (type == TokenTypes.CLASS_DEF\n                || type == TokenTypes.ENUM_DEF\n                || type == TokenTypes.INTERFACE_DEF)\n            {\nbreak;\n             }\n             else if (type == TokenTypes.LITERAL_NEW) {\nbreak;", "sourceBeforeFix": "type == TokenTypes.CLASS_DEF", "sourceAfterFix": "type == TokenTypes.CLASS_DEF || type == TokenTypes.ENUM_DEF || type == TokenTypes.ANNOTATION_DEF"}
{"fixCommitSHA1": "6e4e6d32757138712bcba38d7ab1ed8ae97cdcb5", "projectName": "apache.hive", "bugType": "Change Identifier Used", "problem": "         for(int i = 0; i < fields.size(); ++i) {\n           StructField left = other.get(i);\n           StructField right = fields.get(i);\n          if (!(left.getFieldName().equals(right.getFieldName()) &&\n                 left.getFieldObjectInspector().equals\n                     (right.getFieldObjectInspector()))) {\n             return false;", "fixed": "         for(int i = 0; i < fields.size(); ++i) {\n           StructField left = other.get(i);\n           StructField right = fields.get(i);\n          if (!(left.getFieldName().equalsIgnoreCase(right.getFieldName()) &&\n                 left.getFieldObjectInspector().equals\n                     (right.getFieldObjectInspector()))) {\n             return false;", "sourceBeforeFix": "left.getFieldName().equals(right.getFieldName())", "sourceAfterFix": "left.getFieldName().equalsIgnoreCase(right.getFieldName())"}
{"fixCommitSHA1": "79c128ee2c9a9f6c24fc6941840e5ef354d8bd78", "projectName": "gephi.gephi", "bugType": "Change Binary Operator", "problem": "     }\n     public boolean hasAttributes() {\n        return edgeData.getAttributes() == null;\n     }\n     public void setAttributes(Attributes attributes) {", "fixed": "     }\n     public boolean hasAttributes() {\n        return edgeData.getAttributes() != null;\n     }\n     public void setAttributes(Attributes attributes) {", "sourceBeforeFix": "edgeData.getAttributes() == null", "sourceAfterFix": "edgeData.getAttributes() != null"}
{"fixCommitSHA1": "19c2a076c25faf94ae9e8f4072f2a4590c9ee1fe", "projectName": "spring-projects.spring-boot", "bugType": "Wrong Function Name", "problem": " \t\t\t\tnew FileWriter(this.temporaryFolder.newFile(\"test.txt\")));\n \t\tAbstractEmbeddedServletContainerFactory factory = getFactory();\n \t\tfactory.setDocumentRoot(this.temporaryFolder.getRoot());\n\t\tthis.container = factory.getEmbdeddedServletContainer();\nassertThat(getResponse(\"http:\n \t}", "fixed": " \t\t\t\tnew FileWriter(this.temporaryFolder.newFile(\"test.txt\")));\n \t\tAbstractEmbeddedServletContainerFactory factory = getFactory();\n \t\tfactory.setDocumentRoot(this.temporaryFolder.getRoot());\n\t\tthis.container = factory.getEmbeddedServletContainer();\nassertThat(getResponse(\"http:\n \t}", "sourceBeforeFix": "factory.getEmbdeddedServletContainer(initializers[0],initializers[1])", "sourceAfterFix": "factory.getEmbeddedServletContainer(initializers[0],initializers[1])"}
{"fixCommitSHA1": "9716d2ae673a576cb345c3bfb24cf71654d8f112", "projectName": "openhab.openhab", "bugType": "Change Identifier Used", "problem": " \t@Override\n \tpublic void internalReceiveCommand(String itemName, Command command) {\n \t\tsuper.internalReceiveCommand(itemName, command);\n\t\tlogger.debug(\"MyQ binding received command '{}' for item '{}'\",\n \t\t\t\tcommand, itemName);\n \t\tif (myqOnlineData != null) {\n \t\t\tcomputeCommandForItem(command, itemName);", "fixed": " \t@Override\n \tpublic void internalReceiveCommand(String itemName, Command command) {\n \t\tsuper.internalReceiveCommand(itemName, command);\n\t\tlogger.trace(\"MyQ binding received command '{}' for item '{}'\",\n \t\t\t\tcommand, itemName);\n \t\tif (myqOnlineData != null) {\n \t\t\tcomputeCommandForItem(command, itemName);", "sourceBeforeFix": "logger.debug(\"rapidRefreshFutureEnd stopping\")", "sourceAfterFix": "logger.trace(\"rapidRefreshFutureEnd stopping\")"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n* @see NormalizableKey\n \t */\n\tpublic void putNormalizedKey(T record, byte[] target, int offset, int numBytes);\n \t/**\n \t * Writes the record in such a fashion that all keys are normalizing and at the beginning of the serialized data.", "fixed": " \t * \n* @see NormalizableKey\n \t */\n\tpublic abstract void putNormalizedKey(T record, byte[] target, int offset, int numBytes);\n \t/**\n \t * Writes the record in such a fashion that all keys are normalizing and at the beginning of the serialized data.", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "1ab08ad4abff024bdd3fbeb6f08a1a4a61c49b65", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "         }\n     }\n    private void checkFile(String filename) throws Exception {\n         final FileText text = new FileText(new File(filename),\n                            System.getProperty(\"file.encoding\", \"UTF-8\"));\n         final FileContents contents = new FileContents(text);", "fixed": "         }\n     }\n    private static void checkFile(String filename) throws Exception {\n         final FileText text = new FileText(new File(filename),\n                            System.getProperty(\"file.encoding\", \"UTF-8\"));\n         final FileContents contents = new FileContents(text);", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "51271a02806489a2e2b5539475eb2131fd29b77d", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "         }\n         if ((verifyGetterAndSetterUpdates || verifyNoNewGettersOrSetters) && i == 0) {\n          GatherGettersAndSetterProperties.update(compiler, externsRoot, mainRoot);\n         }\n         recentChange.reset();", "fixed": "         }\n         if ((verifyGetterAndSetterUpdates || verifyNoNewGettersOrSetters) && i == 0) {\n          GatherGetterAndSetterProperties.update(compiler, externsRoot, mainRoot);\n         }\n         recentChange.reset();", "sourceBeforeFix": "GatherGettersAndSetterProperties.update(compiler,externsRoot,mainRoot)", "sourceAfterFix": "GatherGetterAndSetterProperties.update(compiler,externsRoot,mainRoot)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCachePuts(1);\n            statistics.addPutTimeNano(System.nanoTime() - start);\n         }\n         return result;\n     }", "fixed": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCachePuts(1);\n            statistics.addPutTimeNanos(System.nanoTime() - start);\n         }\n         return result;\n     }", "sourceBeforeFix": "statistics.addPutTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addPutTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "a27a122e62bf3ab286d0b045515eecfbabe5b375", "projectName": "jersey.jersey", "bugType": "Change Caller in Function Call", "problem": "                         warnings.append(LocalizationMessages.WARNING_MSG(error.getMessage())).append('\\n');\n                         break;\n                     case HINT:\n                        warnings.append(LocalizationMessages.HINT_MSG(error.getMessage())).append('\\n');\n                         break;\n                 }\n             }", "fixed": "                         warnings.append(LocalizationMessages.WARNING_MSG(error.getMessage())).append('\\n');\n                         break;\n                     case HINT:\n                        hints.append(LocalizationMessages.HINT_MSG(error.getMessage())).append('\\n');\n                         break;\n                 }\n             }", "sourceBeforeFix": "warnings.append(LocalizationMessages.HINT_MSG(error.getMessage()))", "sourceAfterFix": "hints.append(LocalizationMessages.HINT_MSG(error.getMessage()))"}
{"fixCommitSHA1": "9e76b5319ef9790d8bce27eacbc2aff4ba312cac", "projectName": "netty.netty", "bugType": "Wrong Function Name", "problem": "         try {\n             InetAddress address = resolver.resolve(\"10.0.0.1\").syncUninterruptibly().getNow();\n            assertEquals(\"10.0.0.1\", address.getHostName());\n         } finally {\n             resolver.close();\n         }", "fixed": "         try {\n             InetAddress address = resolver.resolve(\"10.0.0.1\").syncUninterruptibly().getNow();\n            assertEquals(\"10.0.0.1\", address.getHostAddress());\n         } finally {\n             resolver.close();\n         }", "sourceBeforeFix": "address.getHostName()", "sourceAfterFix": "address.getHostAddress()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "3694d51c4eb8bdce7a0d15d2705efd704a54fd74", "projectName": "antlr.antlr4", "bugType": "Less Specific If", "problem": " \t\t\t\t\tSystem.out.format(\"\\tMode\\tStates\\tConfigs\\tMode%n\");\n \t\t\t\t\tfor (int i = 0; i < modeToDFA.length; i++) {\n \t\t\t\t\t\tDFA dfa = modeToDFA[i];\n\t\t\t\t\t\tif (dfa == null) {\n \t\t\t\t\t\t\tcontinue;\n \t\t\t\t\t\t}", "fixed": " \t\t\t\t\tSystem.out.format(\"\\tMode\\tStates\\tConfigs\\tMode%n\");\n \t\t\t\t\tfor (int i = 0; i < modeToDFA.length; i++) {\n \t\t\t\t\t\tDFA dfa = modeToDFA[i];\n\t\t\t\t\t\tif (dfa == null || dfa.states.isEmpty()) {\n \t\t\t\t\t\t\tcontinue;\n \t\t\t\t\t\t}", "sourceBeforeFix": "dfa == null", "sourceAfterFix": "dfa == null || dfa.states.isEmpty()"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform3(location, v);\r\n \t}\r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform3(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r", "fixed": " \t}\r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform3iv(location, v);\r\n \t}\r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform3iv(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r", "sourceBeforeFix": "GL20.glUniform4(location,v)", "sourceAfterFix": "GL20.glUniform4fv(location,v)"}
{"fixCommitSHA1": "42e0782a5258626a58177d154ca0cf3da87cdf7a", "projectName": "Atmosphere.atmosphere", "bugType": "Wrong Function Name", "problem": "      * @param r {@link AtmosphereResource}\n      */\n     public void unRegisterUuidForFindCandidate(AtmosphereResource r) {\n        logger.debug(\"Removing: {}\", r);\n         resources.remove(r.uuid());\n     }", "fixed": "      * @param r {@link AtmosphereResource}\n      */\n     public void unRegisterUuidForFindCandidate(AtmosphereResource r) {\n        logger.trace(\"Removing: {}\", r);\n         resources.remove(r.uuid());\n     }", "sourceBeforeFix": "logger.debug(\"Removing: {}\",r)", "sourceAfterFix": "logger.trace(\"Removing: {}\",r)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform1iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform1(location, v);\r\n \t}\r\n \t@Override\r\n \tpublic void glUniform1iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform1(location, toIntBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform2f (int location, float x, float y) {\r", "fixed": " \t}\r\n \tpublic void glUniform1iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform1iv(location, v);\r\n \t}\r\n \t@Override\r\n \tpublic void glUniform1iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform1iv(location, toIntBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform2f (int location, float x, float y) {\r", "sourceBeforeFix": "GL15.glGetBufferParameter(target,pname,params)", "sourceAfterFix": "GL15.glGetBufferParameteriv(target,pname,params)"}
{"fixCommitSHA1": "1b7db61b0e56c54c771ab34206774a6b5a992430", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         if (store != null) {\n             store.deleteAll(keysObject);\n            toBeRemovedKeys.clear();\n         }\n         clearRecordsMap(lockedRecords);", "fixed": "         if (store != null) {\n             store.deleteAll(keysObject);\n            toBeRemovedKeys.removeAll(keysToDelete);\n         }\n         clearRecordsMap(lockedRecords);", "sourceBeforeFix": "toBeRemovedKeys.clear()", "sourceAfterFix": "toBeRemovedKeys.removeAll(keysToDelete)"}
{"fixCommitSHA1": "67b2f81aec955a5ba6faa505da0c5298e78e1e6e", "projectName": "brettwooldridge.HikariCP", "bugType": "Change Binary Operator", "problem": "          for (int i = list.size() - 1; i >= 0; i--) {\n             final T bagEntry = (T) (weakThreadLocals ? ((WeakReference) list.remove(i)).get() : list.remove(i));\n            if (bagEntry != null & bagEntry.state().compareAndSet(STATE_NOT_IN_USE, STATE_IN_USE)) {\n                return bagEntry;\n             }\n          }", "fixed": "          for (int i = list.size() - 1; i >= 0; i--) {\n             final T bagEntry = (T) (weakThreadLocals ? ((WeakReference) list.remove(i)).get() : list.remove(i));\n            if (bagEntry != null && bagEntry.state().compareAndSet(STATE_NOT_IN_USE, STATE_IN_USE)) {\n                return bagEntry;\n             }\n          }", "sourceBeforeFix": "bagEntry != null & bagEntry.state().compareAndSet(STATE_NOT_IN_USE,STATE_IN_USE)", "sourceAfterFix": "bagEntry != null && bagEntry.state().compareAndSet(STATE_NOT_IN_USE,STATE_IN_USE)"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "                 } else {\n                     statistics.increaseCacheHits(1);\n                 }\n                statistics.addGetTimeNano(System.nanoTime() - start);\n             }\n         }\n     }", "fixed": "                 } else {\n                     statistics.increaseCacheHits(1);\n                 }\n                statistics.addGetTimeNanos(System.nanoTime() - start);\n             }\n         }\n     }", "sourceBeforeFix": "statistics.addGetTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addGetTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedLinkedInEndpointBuilder\n             extends\n                 AdvancedLinkedInEndpointConsumerBuilder, AdvancedLinkedInEndpointProducerBuilder {\n         default LinkedInEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedLinkedInEndpointBuilder\n             extends\n                 AdvancedLinkedInEndpointConsumerBuilder, AdvancedLinkedInEndpointProducerBuilder {\n         default LinkedInEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "423fca2f16ef73c1e4bce7cf11660a510be1456e", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "       return false;\n     }\n     if (!info.isOffline()) {\n      LOG.warn(\"Region is split but not offline: \" + info.getRegionName());\n     }\n     return true;\n   }", "fixed": "       return false;\n     }\n     if (!info.isOffline()) {\n      LOG.warn(\"Region is split but not offline: \" +\n        info.getRegionNameAsString());\n     }\n     return true;\n   }", "sourceBeforeFix": "parent.getRegionName()", "sourceAfterFix": "parent.getRegionNameAsString()"}
{"fixCommitSHA1": "f3a240337ca4534b2a61fc9f004b56472c0e1371", "projectName": "openhab.openhab", "bugType": "Change Identifier Used", "problem": "       logger\n           .error(\n              \"database connection error may be wrong password, username or dbname: {}\",\n               e.getMessage());\n     }\n   }", "fixed": "       logger\n           .error(\n              \"database error: {}\",\n               e.getMessage());\n     }\n   }", "sourceBeforeFix": "logger.error(\"Configuration for influxdb not yet loaded or broken.\")", "sourceAfterFix": "logger.warn(\"Configuration for influxdb not yet loaded or broken.\")"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_kr_1() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub1445\uc6d46\uc77c\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_kr_1() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub1445\uc6d46\uc77c\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform2iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toIntBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform3f (int location, float x, float y, float z) {\r", "fixed": " \t}\r\n \tpublic void glUniform2iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform2iv(location, v);\r\n \t}\r\n \tpublic void glUniform2iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform2iv(location, toIntBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform3f (int location, float x, float y, float z) {\r", "sourceBeforeFix": "GL15.glGetBufferParameter(target,pname,params)", "sourceAfterFix": "GL15.glGetBufferParameteriv(target,pname,params)"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_cn() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016-05-06\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_cn() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016-05-06\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "1c3c663ba7d55fcd33af1502ca426274d51d2ba1", "projectName": "apache.flink", "bugType": "Change Binary Operator", "problem": " \t\t}\n\t\tfor (int i = 0; i < maxIndex; i++) {\n \t\t\tfor (Map.Entry<String, Consumer<String>> subKey : subKeyValidation.entrySet()) {\n \t\t\t\tfinal String fullKey = key + '.' + i + '.' + subKey.getKey();\n \t\t\t\tif (properties.containsKey(fullKey)) {", "fixed": " \t\t}\n\t\tfor (int i = 0; i <= maxIndex; i++) {\n \t\t\tfor (Map.Entry<String, Consumer<String>> subKey : subKeyValidation.entrySet()) {\n \t\t\t\tfinal String fullKey = key + '.' + i + '.' + subKey.getKey();\n \t\t\t\tif (properties.containsKey(fullKey)) {", "sourceBeforeFix": "i < maxIndex", "sourceAfterFix": "i <= maxIndex"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleAlternativesWithCommonLabel_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(561);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "fixed": " \tpublic void testMultipleAlternativesWithCommonLabel_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(560);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "sourceBeforeFix": "new StringBuilder(561)", "sourceAfterFix": "new StringBuilder(560)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  private final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "533c5cb8f6bda878779fffb1a4adc792f62a81a7", "projectName": "alibaba.canal", "bugType": "Wrong Function Name", "problem": "                         break;\n                     }\n                    tableError |= parseOneRow(rowDataBuilder, event, buffer, event.getChangeColumns(), true, tableMeta);\n                 }\n                 rowChangeBuider.addRowDatas(rowDataBuilder.build());", "fixed": "                         break;\n                     }\n                    tableError |= parseOneRow(rowDataBuilder, event, buffer, changeColumns, true, tableMeta);\n                 }\n                 rowChangeBuider.addRowDatas(rowDataBuilder.build());", "sourceBeforeFix": "event.getColumns()", "sourceAfterFix": "event.getChangeColumns()"}
{"fixCommitSHA1": "8b9791f8b4b1154d6a053de901a5efd2105409e5", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "         this.bufferMemorySize = bufferMemorySize;\n     }\n    public Integer getRequestRequiredAcks() {\n         return requestRequiredAcks;\n     }", "fixed": "         this.bufferMemorySize = bufferMemorySize;\n     }\n    public String getRequestRequiredAcks() {\n         return requestRequiredAcks;\n     }", "sourceBeforeFix": "@UriParam(label=\"producer\",defaultValue=\"1\") private Integer requestRequiredAcks=1; ", "sourceAfterFix": "@UriParam(label=\"producer\",defaultValue=\"1\") private String requestRequiredAcks=\"1\"; "}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  private final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "f5309e8856186f5105e0bfcefda1273330f36ac0", "projectName": "jersey.jersey", "bugType": "Same Function Less Args", "problem": " \t\tClientConfig jerseyConfig = new ClientConfig();\n \t\tClient client = ClientBuilder.newClient(jerseyConfig);\n\t\tclient = client.register(new HttpDigestAuthFilter(DIGEST_TEST_LOGIN, DIGEST_TEST_PASS, 1));\n \t\tWebTarget resource = client.target(getBaseUri()).path(\"auth-digest\");", "fixed": " \t\tClientConfig jerseyConfig = new ClientConfig();\n \t\tClient client = ClientBuilder.newClient(jerseyConfig);\n\t\tclient = client.register(new HttpDigestAuthFilter(DIGEST_TEST_LOGIN, DIGEST_TEST_PASS));\n \t\tWebTarget resource = client.target(getBaseUri()).path(\"auth-digest\");", "sourceBeforeFix": "new HttpDigestAuthFilter(DIGEST_TEST_LOGIN,DIGEST_TEST_PASS,1)", "sourceAfterFix": "new HttpDigestAuthFilter(DIGEST_TEST_LOGIN,DIGEST_TEST_PASS)"}
{"fixCommitSHA1": "84520f4023ad743c10e6c06fa173828bafcbcab6", "projectName": "Graylog2.graylog2-server", "bugType": "Change Identifier Used", "problem": "         user.update(changeRequest);\n         flash(\"success\", \"User '\" + user.getFullName() + \"' was updated successfully\");\n        return redirect(routes.UsersController.index());\n     }\n     private boolean checkRequireOldPassword(String username) {", "fixed": "         user.update(changeRequest);\n         flash(\"success\", \"User '\" + user.getFullName() + \"' was updated successfully\");\n        return redirect(routes.UsersController.editUserForm(username));\n     }\n     private boolean checkRequireOldPassword(String username) {", "sourceBeforeFix": "routes.UsersController.index()", "sourceAfterFix": "routes.UsersController.editUserForm(username)"}
{"fixCommitSHA1": "39ad7f7a0c808f4a36310d078a5a2c11ee884612", "projectName": "alibaba.druid", "bugType": "Change Binary Operator", "problem": "         public String getFullName() {\r\n             if (fullName == null) {\r\n                if (table != null) {\r\n                     fullName = name;\r\n                 } else {\r\n                     fullName = table + '.' + name;\r", "fixed": "         public String getFullName() {\r\n             if (fullName == null) {\r\n                if (table == null) {\r\n                     fullName = name;\r\n                 } else {\r\n                     fullName = table + '.' + name;\r", "sourceBeforeFix": "table != null", "sourceAfterFix": "table == null"}
{"fixCommitSHA1": "0f2731335aac2410e85d739743e8589cce75846c", "projectName": "gephi.gephi", "bugType": "Less Specific If", "problem": "                     TextManager.this.model = VizController.getInstance().getVizModel().getTextModel();\n                    if (model.getNodeTextColumns() == null) {\n                         AttributeController attributeController = Lookup.getDefault().lookup(AttributeController.class);\n                         if (attributeController != null && attributeController.getModel() != null) {\n                             AttributeModel attributeModel = attributeController.getModel();", "fixed": "                     TextManager.this.model = VizController.getInstance().getVizModel().getTextModel();\n                    if (model.getNodeTextColumns() == null || model.getNodeTextColumns().length == 0) {\n                         AttributeController attributeController = Lookup.getDefault().lookup(AttributeController.class);\n                         if (attributeController != null && attributeController.getModel() != null) {\n                             AttributeModel attributeModel = attributeController.getModel();", "sourceBeforeFix": "model.getNodeTextColumns() == null", "sourceAfterFix": "model.getNodeTextColumns() == null || model.getNodeTextColumns().length == 0"}
{"fixCommitSHA1": "89b4aa976ee9aa4ccf8c404bdcd7b9e32dfb4c3e", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "                         AuthorizationResult ar = context.authorize(rrOp, EnumSet.of(Action.ActionEffect.ADDRESS));\n                         if (ar.getDecision() == AuthorizationResult.Decision.DENY) {\n                            filteredData.addAccessRestrictedResource(absoluteChildAddr);\n                         } else {\n                             ModelNode childMap = directChildren.get(childType);\n                             if (childMap == null) {", "fixed": "                         AuthorizationResult ar = context.authorize(rrOp, EnumSet.of(Action.ActionEffect.ADDRESS));\n                         if (ar.getDecision() == AuthorizationResult.Decision.DENY) {\n                            localFilteredData.addAccessRestrictedResource(absoluteChildAddr);\n                         } else {\n                             ModelNode childMap = directChildren.get(childType);\n                             if (childMap == null) {", "sourceBeforeFix": "filteredData.addAccessRestrictedResource(absoluteChildAddr)", "sourceAfterFix": "localFilteredData.addAccessRestrictedResource(absoluteChildAddr)"}
{"fixCommitSHA1": "8abd59029e7c0bc0973b492fd84a386b26661bc7", "projectName": "alibaba.dubbo", "bugType": "Wrong Function Name", "problem": "             cfg.setThreadModel(ThreadModel.MANUAL);\n             cfg.getSessionConfig().setTcpNoDelay(true);\n             cfg.getSessionConfig().setKeepAlive(true);\n            int timeout = getTimeout();\n             cfg.setConnectTimeout(timeout < 1000 ? 1 : timeout / 1000);\n             connector.getFilterChain().addLast(\"codec\", new ProtocolCodecFilter(new MinaCodecAdapter(getCodec(), getUrl(), this)));", "fixed": "             cfg.setThreadModel(ThreadModel.MANUAL);\n             cfg.getSessionConfig().setTcpNoDelay(true);\n             cfg.getSessionConfig().setKeepAlive(true);\n            int timeout = getConnectTimeout();\n             cfg.setConnectTimeout(timeout < 1000 ? 1 : timeout / 1000);\n             connector.getFilterChain().addLast(\"codec\", new ProtocolCodecFilter(new MinaCodecAdapter(getCodec(), getUrl(), this)));", "sourceBeforeFix": "getTimeout()", "sourceAfterFix": "getConnectTimeout()"}
{"fixCommitSHA1": "a35860eadb4400f069e306ccd76f1a19ecfb3ba1", "projectName": "google.guava", "bugType": "Change Identifier Used", "problem": "   }\n   @Override\n  public N removeInEdge(Object edge, boolean isSelfLoop) {\n     if (!isSelfLoop) {\n       return removeOutEdge(edge);\n     }", "fixed": "   }\n   @Override\n  public N removeInEdge(E edge, boolean isSelfLoop) {\n     if (!isSelfLoop) {\n       return removeOutEdge(edge);\n     }", "sourceBeforeFix": "Object edge", "sourceAfterFix": "E edge"}
{"fixCommitSHA1": "78051257136d79f17c1dab7c814557f40e163c48", "projectName": "swagger-api.swagger-codegen", "bugType": "Change Identifier Used", "problem": "     @Override\n     protected void addAdditionPropertiesToCodeGenModel(CodegenModel codegenModel, ModelImpl swaggerModel) {\n        codegenModel.additionalPropertiesType = getSwaggerType(swaggerModel.getAdditionalProperties());\n         addImport(codegenModel, codegenModel.additionalPropertiesType);\n     }", "fixed": "     @Override\n     protected void addAdditionPropertiesToCodeGenModel(CodegenModel codegenModel, ModelImpl swaggerModel) {\n        codegenModel.additionalPropertiesType = getTypeDeclaration(swaggerModel.getAdditionalProperties());\n         addImport(codegenModel, codegenModel.additionalPropertiesType);\n     }", "sourceBeforeFix": "getSwaggerType(swaggerModel.getAdditionalProperties())", "sourceAfterFix": "getTypeDeclaration(swaggerModel.getAdditionalProperties())"}
{"fixCommitSHA1": "dfb39dfaeaafc913d827d42aff17a56fe3f9c535", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         return this;\n     }\n    public Collection<String> getAddressList() {\n         if (addressList.size() == 0) {\n             addAddress(\"localhost\");\n         }", "fixed": "         return this;\n     }\n    public List<String> getAddresses() {\n         if (addressList.size() == 0) {\n             addAddress(\"localhost\");\n         }", "sourceBeforeFix": "Collection<String>", "sourceAfterFix": "List<String>"}
{"fixCommitSHA1": "8328666cb87ec2daf4a1ae67be86c8622a5d10bf", "projectName": "alibaba.druid", "bugType": "Wrong Function Name", "problem": "                     return;\r\n                 }\r\n                LOG.warn(\"clear parameter error\", ex);\r\n             }\r\n         }\r", "fixed": "                     return;\r\n                 }\r\n                LOG.error(\"clear parameter error\", ex);\r\n             }\r\n         }\r", "sourceBeforeFix": "LOG.warn(\"clear parameter error\",ex)", "sourceAfterFix": "LOG.error(\"clear parameter error\",ex)"}
{"fixCommitSHA1": "4e43e3b74a2ce09a26e9795a9739d388b1fb787b", "projectName": "facebook.presto", "bugType": "Change Identifier Used", "problem": "                 pageBuilder.declarePosition();\n                 for (int i = 0; i < outputChannels.length; i++) {\n                     int channel = outputChannels[i];\n                    Type type = types.get(channel);\n                     type.appendTo(next[channel], 0, pageBuilder.getBlockBuilder(i));\n                 }\n                 if (generateRowNumber) {", "fixed": "                 pageBuilder.declarePosition();\n                 for (int i = 0; i < outputChannels.length; i++) {\n                     int channel = outputChannels[i];\n                    Type type = types.get(i);\n                     type.appendTo(next[channel], 0, pageBuilder.getBlockBuilder(i));\n                 }\n                 if (generateRowNumber) {", "sourceBeforeFix": "types.get(channel)", "sourceAfterFix": "types.get(i)"}
{"fixCommitSHA1": "ccc86e9f1cddebc731ac1ccabdd469df11d72d8b", "projectName": "apache.flink", "bugType": "Change Numeric Literal", "problem": " \t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.createRemoteEnvironment(\"localhost\", flinkPort);\n \t\tenv.enableCheckpointing(500);\n \t\tenv.setParallelism(parallelism);\n\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(3, 0));\n \t\tenv.getConfig().disableSysoutLogging();\n \t\tFlinkKafkaConsumerBase<Integer> kafkaSource = kafkaServer.getConsumer(topic, schema, standardProps);", "fixed": " \t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.createRemoteEnvironment(\"localhost\", flinkPort);\n \t\tenv.enableCheckpointing(500);\n \t\tenv.setParallelism(parallelism);\n\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(1, 0));\n \t\tenv.getConfig().disableSysoutLogging();\n \t\tFlinkKafkaConsumerBase<Integer> kafkaSource = kafkaServer.getConsumer(topic, schema, standardProps);", "sourceBeforeFix": "RestartStrategies.fixedDelayRestart(3,0)", "sourceAfterFix": "RestartStrategies.fixedDelayRestart(1,0)"}
{"fixCommitSHA1": "b877b45840b3166f0c9213337595fbc506075197", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": " @RestController\n public class PetController {\n    private static String[] PETS = new String[]{\"Snoopy\", \"Fido\", \"Tony the Tiger\"};\n     @RequestMapping(value = \"/petById/{id}\", produces = \"application/json\")\n     public String petById(@PathVariable(\"id\") Integer id) {", "fixed": " @RestController\n public class PetController {\n    private static final String[] PETS = new String[]{\"Snoopy\", \"Fido\", \"Tony the Tiger\"};\n     @RequestMapping(value = \"/petById/{id}\", produces = \"application/json\")\n     public String petById(@PathVariable(\"id\") Integer id) {", "sourceBeforeFix": "10", "sourceAfterFix": "26"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "f8c20919f9c2e18e48142c2712e34298f98b983e", "projectName": "spring-projects.spring-boot", "bugType": "Wrong Function Name", "problem": " \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tfactory.setPort(8081);\n \t\tthis.container = factory\n\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\nassertThat(getResponse(\"http:\n \t}", "fixed": " \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tfactory.setPort(8081);\n \t\tthis.container = factory\n\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\nassertThat(getResponse(\"http:\n \t}", "sourceBeforeFix": "factory.getEmbdeddedServletContainer()", "sourceAfterFix": "factory.getEmbeddedServletContainer()"}
{"fixCommitSHA1": "7b511d8200aae05bef86085f9b101d37b9fce4ef", "projectName": "netty.netty", "bugType": "Change Identifier Used", "problem": "         if (maskPayload) {\n             int random = (int) (Math.random() * Integer.MAX_VALUE);\n             mask = ByteBuffer.allocate(4).putInt(random).array();\n            header.writeBytes(mask);\n             int counter = 0;\n             for (int i = data.readerIndex(); i < data.writerIndex(); i ++) {", "fixed": "         if (maskPayload) {\n             int random = (int) (Math.random() * Integer.MAX_VALUE);\n             mask = ByteBuffer.allocate(4).putInt(random).array();\n            out.writeBytes(mask);\n             int counter = 0;\n             for (int i = data.readerIndex(); i < data.writerIndex(); i ++) {", "sourceBeforeFix": "header.writeBytes(mask)", "sourceAfterFix": "out.writeBytes(mask)"}
{"fixCommitSHA1": "14db1773526284bfc9837a4ef9121862dc8544fb", "projectName": "hazelcast.hazelcast", "bugType": "Change Modifier", "problem": " class DataRecord extends AbstractRecord<Data> {\n    protected Data value;\n     DataRecord(Data value) {\n         this.value = value;", "fixed": " class DataRecord extends AbstractRecord<Data> {\n    protected volatile Data value;\n     DataRecord(Data value) {\n         this.value = value;", "sourceBeforeFix": "4", "sourceAfterFix": "68"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15871, value = \"Unknown server %s\")\n     IllegalStateException unknownServer(ServerIdentity server);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10871, value = \"Unknown server %s\")\n     IllegalStateException unknownServer(ServerIdentity server);\n     /**", "sourceBeforeFix": "id=15850", "sourceAfterFix": "id=10850"}
{"fixCommitSHA1": "a2f57d22e2e88c8b51ef24980d5ed2ac5df507e0", "projectName": "stanfordnlp.CoreNLP", "bugType": "Change Identifier Used", "problem": "       empiricalCountsForADoc(eHat4Update, ind);\n      expectedCountsForADoc(weights, ind);\n       /* the commented out code below is to iterate over the batch docs instead of iterating over all\n          parameters at the end, which is more efficient; but it would also require us to clearUpdateEs()", "fixed": "       empiricalCountsForADoc(eHat4Update, ind);\n      expectedCountsForADoc(weights, e4Update, ind);\n       /* the commented out code below is to iterate over the batch docs instead of iterating over all\n          parameters at the end, which is more efficient; but it would also require us to clearUpdateEs()", "sourceBeforeFix": "expectedCountsForADoc(weights,ind)", "sourceAfterFix": "expectedCountsForADoc(weights,e4Update,ind)"}
{"fixCommitSHA1": "cfecfd3093204505dda0a21835fd4f55be94960d", "projectName": "openmrs.openmrs-core", "bugType": "Change Boolean Literal", "problem": " \t\t\tmap.put(\"forms\", Context.getFormService().getForms());\r\n \t\t\tString reason = \"\";\r\n\t\t\tfor (Obs o : encounter.getObsAtTopLevel(false)) {\r\n \t\t\t\tif (o.isVoided()){\r", "fixed": " \t\t\tmap.put(\"forms\", Context.getFormService().getForms());\r\n \t\t\tString reason = \"\";\r\n\t\t\tfor (Obs o : encounter.getObsAtTopLevel(true)) {\r\n \t\t\t\tif (o.isVoided()){\r", "sourceBeforeFix": "encounter.getObsAtTopLevel(false)", "sourceAfterFix": "encounter.getObsAtTopLevel(true)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "f006de8639371e844451db9024bcf4c8823b45b6", "projectName": "druid-io.druid", "bugType": "Wrong Function Name", "problem": "       } else {\n         Set<String> metricsSet = new HashSet<>();\n         for (TimelineObjectHolder<String, DataSegment> timelineObjectHolder : timeLineSegments) {\n          metricsSet.addAll(timelineObjectHolder.getObject().getChunk(0).getObject().getDimensions());\n         }\n         metricsList = Lists.newArrayList(metricsSet);\n       }", "fixed": "       } else {\n         Set<String> metricsSet = new HashSet<>();\n         for (TimelineObjectHolder<String, DataSegment> timelineObjectHolder : timeLineSegments) {\n          metricsSet.addAll(timelineObjectHolder.getObject().getChunk(0).getObject().getMetrics());\n         }\n         metricsList = Lists.newArrayList(metricsSet);\n       }", "sourceBeforeFix": "timelineObjectHolder.getObject().getChunk(0).getObject().getDimensions()", "sourceAfterFix": "timelineObjectHolder.getObject().getChunk(0).getObject().getMetrics()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15841, value = \"Exception getting result from server %s: %s\")\n     String exceptionAwaitingResultFromServer(ServerIdentity server, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10841, value = \"Exception getting result from server %s: %s\")\n     String exceptionAwaitingResultFromServer(ServerIdentity server, String message);\n     /**", "sourceBeforeFix": "id=15852", "sourceAfterFix": "id=10852"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15850, value = \"No handler for operation %s at address %s\")\n     String noHandlerForOperation(String operationName, PathAddress address);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10850, value = \"No handler for operation %s at address %s\")\n     String noHandlerForOperation(String operationName, PathAddress address);\n     /**", "sourceBeforeFix": "id=15851", "sourceAfterFix": "id=10851"}
{"fixCommitSHA1": "95cb60790924d1df7e4e2f091a368c22c02852e3", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "      * group.\n      * @author max\n      */\n    class ImportDetails\n     {\n         \n         private String importFullPath;", "fixed": "      * group.\n      * @author max\n      */\n    static class ImportDetails\n     {\n         \n         private String importFullPath;", "sourceBeforeFix": "0", "sourceAfterFix": "8"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "23efcad891c91fc131ed4729c734ff6b122197df", "projectName": "Activiti.Activiti", "bugType": "Change Identifier Used", "problem": " \t * a barrier for starting and a barrier for completing the command, so they each insert a new variable guaranteed.\n \t */\n \tpublic void testDuplicateVariableInsertOnTask() throws Exception {\n\t\tString processDefinitionId = deployOneTaskProcess();\n \t\tfinal ProcessInstance processInstance = runtimeService.startProcessInstanceById(processDefinitionId);\n \t\tfinal Task task = taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();", "fixed": " \t * a barrier for starting and a barrier for completing the command, so they each insert a new variable guaranteed.\n \t */\n \tpublic void testDuplicateVariableInsertOnTask() throws Exception {\n\t\tString processDefinitionId = deployOneTaskTestProcess();\n \t\tfinal ProcessInstance processInstance = runtimeService.startProcessInstanceById(processDefinitionId);\n \t\tfinal Task task = taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();", "sourceBeforeFix": "deployOneTaskProcess()", "sourceAfterFix": "deployOneTaskTestProcess()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "435805f612bf78ee0d2fd93cd90fa6c6740e17c2", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         String uri = getScpUri() + \"?username=admin&password=admin&chmod=640&knownHostsFile=\" + getKnownHostsFile();\n         template.sendBodyAndHeader(uri, \"Bonjour Monde\", Exchange.FILE_NAME, \"monde.txt\");\n        Thread.sleep(200);\n         File file = new File(getScpPath() + \"/monde.txt\");\n         assertFileExists(file.getAbsolutePath());", "fixed": "         String uri = getScpUri() + \"?username=admin&password=admin&chmod=640&knownHostsFile=\" + getKnownHostsFile();\n         template.sendBodyAndHeader(uri, \"Bonjour Monde\", Exchange.FILE_NAME, \"monde.txt\");\n        Thread.sleep(500);\n         File file = new File(getScpPath() + \"/monde.txt\");\n         assertFileExists(file.getAbsolutePath());", "sourceBeforeFix": "Thread.sleep(200)", "sourceAfterFix": "Thread.sleep(500)"}
{"fixCommitSHA1": "f60f4dbdad22bbd4ef94ce1b01eb63f9adeb7659", "projectName": "alibaba.druid", "bugType": "Delete Throws Exception", "problem": "     }\r\n    public Number integerValue() throws NumberFormatException {\r\n         long result = 0;\r\n         boolean negative = false;\r\n         int i = np, max = np + sp;\r", "fixed": "     }\r\n    public Number integerValue() {\r\n         long result = 0;\r\n         boolean negative = false;\r\n         int i = np, max = np + sp;\r", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "5b13fe70c25812157a1e4432135eb9639e72bc6a", "projectName": "apache.flink", "bugType": "Wrong Function Name", "problem": " \t\tfinal Sink output = new Sink(\"allUsers.json\").withInputs(union);\n \t\texpectedPlan.setSinks(output);\n\t\tassertEquals(expectedPlan, actualPlan);\n \t}\n }", "fixed": " \t\tfinal Sink output = new Sink(\"allUsers.json\").withInputs(union);\n \t\texpectedPlan.setSinks(output);\n\t\tassertPlanEquals(expectedPlan, actualPlan);\n \t}\n }", "sourceBeforeFix": "assertEquals(expectedPlan,actualPlan)", "sourceAfterFix": "assertPlanEquals(expectedPlan,actualPlan)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "9771ba62390a56363b20e52f12a8b9b34c51da62", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "     public void testSendLotsOfMessagesSimultaneouslyButOnly3GetThrough() throws Exception {\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedMessageCount(3);\n         mock.setResultWaitTime(4000);\n         final List<Exchange> sentExchanges = Collections.synchronizedList(new ArrayList<Exchange>());", "fixed": "     public void testSendLotsOfMessagesSimultaneouslyButOnly3GetThrough() throws Exception {\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedMinimumMessageCount(3);\n         mock.setResultWaitTime(4000);\n         final List<Exchange> sentExchanges = Collections.synchronizedList(new ArrayList<Exchange>());", "sourceBeforeFix": "mock.expectedMessageCount(2)", "sourceAfterFix": "mock.expectedMinimumMessageCount(2)"}
{"fixCommitSHA1": "0656040933973f55afa8b6e8f53140b6f76b7446", "projectName": "apache.hive", "bugType": "Change Unary Operator\t", "problem": "             break;\n           }\n           switch (schemeField.id) {\ncase -1:\n               if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {\n                 struct.rqst = new WriteNotificationLogRequest();\n                 struct.rqst.read(iprot);", "fixed": "             break;\n           }\n           switch (schemeField.id) {\ncase 1:\n               if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {\n                 struct.rqst = new WriteNotificationLogRequest();\n                 struct.rqst.read(iprot);", "sourceBeforeFix": "-1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      * @param hostName the name of the host.\n      */\n     @LogMessage(level = Level.WARN)\n    @Message(id = 15805, value = \"Caught exception awaiting final response from host %s\")\n     void caughtExceptionAwaitingFinalResponse(@Cause Throwable cause, String hostName);\n     /**", "fixed": "      * @param hostName the name of the host.\n      */\n     @LogMessage(level = Level.WARN)\n    @Message(id = 10805, value = \"Caught exception awaiting final response from host %s\")\n     void caughtExceptionAwaitingFinalResponse(@Cause Throwable cause, String hostName);\n     /**", "sourceBeforeFix": "id=15804", "sourceAfterFix": "id=10804"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface CwEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedCwEndpointBuilder advanced() {\n             return (AdvancedCwEndpointBuilder) this;\n         }", "fixed": "     \n    public interface CwEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedCwEndpointBuilder advanced() {\n             return (AdvancedCwEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "303eb811e0432ef3e843c20cbc282a1bf0007d2a", "projectName": "Alluxio.alluxio", "bugType": "Wrong Function Name", "problem": "   public void stopTest() throws Exception {\n     mMaster.stop();\n     Mockito.verify(mRMClient).unregisterApplicationMaster(FinalApplicationStatus.SUCCEEDED, \"\", \"\");\n    Mockito.verify(mRMClient).start();\n   }\n   /**", "fixed": "   public void stopTest() throws Exception {\n     mMaster.stop();\n     Mockito.verify(mRMClient).unregisterApplicationMaster(FinalApplicationStatus.SUCCEEDED, \"\", \"\");\n    Mockito.verify(mRMClient).stop();\n   }\n   /**", "sourceBeforeFix": "Mockito.verify(mRMClient).start()", "sourceAfterFix": "Mockito.verify(mRMClient).stop()"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedByMe() throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",\n                 null, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedByMe() throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",\n                 null, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))"}
{"fixCommitSHA1": "01d18f2c3db799d144cc8e3308da3fb2ade19417", "projectName": "google.guava", "bugType": "Change Identifier Used", "problem": "     private final Condition delegate;\n     @SuppressWarnings(\"unused\")\n    private final Object strongReference;\n    WeakSafeCondition(Condition delegate, Object strongReference) {\n       this.delegate = delegate;\n       this.strongReference = strongReference;\n     }", "fixed": "     private final Condition delegate;\n     @SuppressWarnings(\"unused\")\n    private final WeakSafeReadWriteLock strongReference;\n    WeakSafeCondition(Condition delegate, WeakSafeReadWriteLock strongReference) {\n       this.delegate = delegate;\n       this.strongReference = strongReference;\n     }", "sourceBeforeFix": "@SuppressWarnings(\"unused\") private final Object strongReference; ", "sourceAfterFix": "@SuppressWarnings(\"unused\") private final WeakSafeReadWriteLock strongReference; "}
{"fixCommitSHA1": "2f77b4e6a3f1ab8bd855476a15a4ab2f6f7ae32c", "projectName": "neo4j.neo4j", "bugType": "Wrong Function Name", "problem": "         \t\t\"order by min(length(p)), user.name\";\n         gen.get().addSnippet( \"query-get-members\", createCypherSnippet( query ) );\n         result = engine.execute( query )\n                .toString();\n         assertTrue( result.contains(\"Engin\") );\n         gen.get()\n                 .addSnippet( \"o-query-get-members\",", "fixed": "         \t\t\"order by min(length(p)), user.name\";\n         gen.get().addSnippet( \"query-get-members\", createCypherSnippet( query ) );\n         result = engine.execute( query )\n                .dumpToString();\n         assertTrue( result.contains(\"Engin\") );\n         gen.get()\n                 .addSnippet( \"o-query-get-members\",", "sourceBeforeFix": "engine.execute(query).toString()", "sourceAfterFix": "engine.execute(query).dumpToString()"}
{"fixCommitSHA1": "31a360700bc11b55dc64e89c7b6f8b660b50bddb", "projectName": "Graylog2.graylog2-server", "bugType": "Wrong Function Name", "problem": "     }\n     protected List<ResultMessageSummary> resultMessageListtoValueList(List<ResultMessage> resultMessages) {\n        final List<ResultMessageSummary> result = Lists.newArrayListWithExpectedSize(resultMessages.size());\n         for (ResultMessage resultMessage : resultMessages) {\n             result.add(ResultMessageSummary.create(resultMessage.highlightRanges, resultMessage.getMessage(), resultMessage.getIndex()));", "fixed": "     }\n     protected List<ResultMessageSummary> resultMessageListtoValueList(List<ResultMessage> resultMessages) {\n        final List<ResultMessageSummary> result = Lists.newArrayListWithCapacity(resultMessages.size());\n         for (ResultMessage resultMessage : resultMessages) {\n             result.add(ResultMessageSummary.create(resultMessage.highlightRanges, resultMessage.getMessage(), resultMessage.getIndex()));", "sourceBeforeFix": "Lists.newArrayListWithExpectedSize(resultMessages.size())", "sourceAfterFix": "Lists.newArrayListWithCapacity(resultMessages.size())"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface ElsqlEndpointBuilder\n             extends\n                 ElsqlEndpointConsumerBuilder, ElsqlEndpointProducerBuilder {\n         default AdvancedElsqlEndpointBuilder advanced() {", "fixed": "     \n    public interface ElsqlEndpointBuilder\n             extends\n                 ElsqlEndpointConsumerBuilder, ElsqlEndpointProducerBuilder {\n         default AdvancedElsqlEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "884163c6775a5600123a026c4cd7e0d91b57338e", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "     private void registerEventJournalConfig(EventJournalConfig eventJournalConfig, ConfigCheckMode configCheckMode) {\n         String mapName = eventJournalConfig.getMapName();\n        String cacheName = eventJournalConfig.getMapName();\n         synchronized (journalMutex) {\n             EventJournalConfig currentMapJournalConfig = null;\n             if (mapName != null) {", "fixed": "     private void registerEventJournalConfig(EventJournalConfig eventJournalConfig, ConfigCheckMode configCheckMode) {\n         String mapName = eventJournalConfig.getMapName();\n        String cacheName = eventJournalConfig.getCacheName();\n         synchronized (journalMutex) {\n             EventJournalConfig currentMapJournalConfig = null;\n             if (mapName != null) {", "sourceBeforeFix": "eventJournalConfig.getMapName()", "sourceAfterFix": "eventJournalConfig.getCacheName()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15843, value = \"Invalid rollout plan. Plan operations affect server groups %s that are not reflected in the rollout plan\")\n     String invalidRolloutPlan(Set<String> groups);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10843, value = \"Invalid rollout plan. Plan operations affect server groups %s that are not reflected in the rollout plan\")\n     String invalidRolloutPlan(Set<String> groups);\n     /**", "sourceBeforeFix": "id=15869", "sourceAfterFix": "id=10869"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleAlternativesWithCommonLabel_1() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(730);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {System.out.println($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "fixed": " \tpublic void testMultipleAlternativesWithCommonLabel_1() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(729);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {System.out.println($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "sourceBeforeFix": "new StringBuilder(247)", "sourceAfterFix": "new StringBuilder(246)"}
{"fixCommitSHA1": "79946366e1ab141ef2b595e0079dcac7b913da2b", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "         final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;\n         verify(checkConfig,\n                getPath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\"), expected);\n     }\n     @Test", "fixed": "         final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;\n         verify(checkConfig,\n                getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\"),\n                expected);\n     }\n     @Test", "sourceBeforeFix": "getPath(\"InputPackageDeclarationDiffDirectory.java\")", "sourceAfterFix": "getNonCompilablePath(\"InputPackageDeclarationDiffDirectory.java\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "c30e67b81a0d9ac45c4151d20a960e542ad97b4f", "projectName": "dropwizard.dropwizard", "bugType": "Wrong Function Name", "problem": "         final PrintWriter output = mock(PrintWriter.class);\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getRequestURI()).thenReturn(\"/tasks/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.<String>of()));\n         when(response.getWriter()).thenReturn(output);", "fixed": "         final PrintWriter output = mock(PrintWriter.class);\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getServletPath()).thenReturn(\"/tasks/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.<String>of()));\n         when(response.getWriter()).thenReturn(output);", "sourceBeforeFix": "request.getRequestURI()", "sourceAfterFix": "request.getServletPath()"}
{"fixCommitSHA1": "9ade53da21a13bf55b876bdccc42d3d674b37642", "projectName": "apache.camel", "bugType": "Change Unary Operator\t", "problem": "             setHost(value);\n         }\n        if (getProtocol() != null && isIgnoreUriScheme()) {\n             String scheme = uri.getScheme();\n             if (scheme != null) {\n                 setProtocol(scheme);", "fixed": "             setHost(value);\n         }\n        if (getProtocol() != null && !isIgnoreUriScheme()) {\n             String scheme = uri.getScheme();\n             if (scheme != null) {\n                 setProtocol(scheme);", "sourceBeforeFix": "isIgnoreUriScheme()", "sourceAfterFix": "!isIgnoreUriScheme()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  private final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface TwitterDirectMessageEndpointBuilder\n             extends\n                 TwitterDirectMessageEndpointConsumerBuilder, TwitterDirectMessageEndpointProducerBuilder {\n         default AdvancedTwitterDirectMessageEndpointBuilder advanced() {", "fixed": "     \n    public interface TwitterDirectMessageEndpointBuilder\n             extends\n                 TwitterDirectMessageEndpointConsumerBuilder, TwitterDirectMessageEndpointProducerBuilder {\n         default AdvancedTwitterDirectMessageEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "bd1c245cbffa4781672c63d144277bb4e244d7f6", "projectName": "apache.flink", "bugType": "Change Numeric Literal", "problem": " \t\tProperties producerProps = new Properties();\n\t\tproducerProps.setProperty(\"max.request.size\", Integer.toString(1024 * 1024 * 14));\n \t\tproducerProps.setProperty(\"retries\", \"3\");\n \t\tproducerProps.setProperty(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, brokerConnectionStrings);", "fixed": " \t\tProperties producerProps = new Properties();\n\t\tproducerProps.setProperty(\"max.request.size\", Integer.toString(1024 * 1024 * 15));\n \t\tproducerProps.setProperty(\"retries\", \"3\");\n \t\tproducerProps.setProperty(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, brokerConnectionStrings);", "sourceBeforeFix": "1024 * 1024 * 14", "sourceAfterFix": "1024 * 1024 * 15"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsText(String path, int batchSize) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), batchSize, null);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsText(String path, int batchSize) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), batchSize, null);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "79946366e1ab141ef2b595e0079dcac7b913da2b", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "         checkConfig.addAttribute(\"matchDirectoryStructure\", \"false\");\n         final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;\n        verify(checkConfig, getPath(\"InputPackageDeclarationDiffDirectory.java\"), expected);\n     }\n     @Test", "fixed": "         checkConfig.addAttribute(\"matchDirectoryStructure\", \"false\");\n         final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;\n        verify(checkConfig, getNonCompilablePath(\"InputPackageDeclarationDiffDirectory.java\"),\n                expected);\n     }\n     @Test", "sourceBeforeFix": "getPath(\"InputPackageDeclarationDiffDirectory.java\")", "sourceAfterFix": "getNonCompilablePath(\"InputPackageDeclarationDiffDirectory.java\")"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface IgniteCacheEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedIgniteCacheEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface IgniteCacheEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedIgniteCacheEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15863, value = \"%s is not a valid URL -- %s\")\n     String invalidUrl(String url, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10863, value = \"%s is not a valid URL -- %s\")\n     String invalidUrl(String url, String message);\n     /**", "sourceBeforeFix": "id=15863", "sourceAfterFix": "id=10863"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "a772531235259480a08e539c706b5884fbe6bfd6", "projectName": "stanfordnlp.CoreNLP", "bugType": "Change Caller in Function Call", "problem": "    */\n   public void preCompute(Set<Integer> toPreCompute) {\n     long startTime = System.currentTimeMillis();\n    saved = new double[toPreCompute.size()][config.hiddenSize];\n     for (int x : toPreCompute) {\n       int mapX = preMap.get(x);\n       int tok = x / config.numTokens;", "fixed": "    */\n   public void preCompute(Set<Integer> toPreCompute) {\n     long startTime = System.currentTimeMillis();\n    saved = new double[preMap.size()][config.hiddenSize];\n     for (int x : toPreCompute) {\n       int mapX = preMap.get(x);\n       int tok = x / config.numTokens;", "sourceBeforeFix": "toPreCompute.size()", "sourceAfterFix": "preMap.size()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e0bd630e8adb61a9085a2cc3eb1302fcba9a47fd", "projectName": "alibaba.dubbo", "bugType": "Change Numeric Literal", "problem": "URL publishUrl = URL.valueOf(\"dubbo:\n         metadataReportService1.publishConsumer(publishUrl);\n        Thread.sleep(100);\n         Assert.assertTrue(metadataReportService1.metadataReport instanceof JTestMetadataReport4Test);", "fixed": "URL publishUrl = URL.valueOf(\"dubbo:\n         metadataReportService1.publishConsumer(publishUrl);\n        Thread.sleep(300);\n         Assert.assertTrue(metadataReportService1.metadataReport instanceof JTestMetadataReport4Test);", "sourceBeforeFix": "Thread.sleep(100)", "sourceAfterFix": "Thread.sleep(300)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedEventAdminEndpointBuilder\n             extends\n                 AdvancedEventAdminEndpointConsumerBuilder, AdvancedEventAdminEndpointProducerBuilder {\n         default EventAdminEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedEventAdminEndpointBuilder\n             extends\n                 AdvancedEventAdminEndpointConsumerBuilder, AdvancedEventAdminEndpointProducerBuilder {\n         default EventAdminEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "1abf653a0774560f3da680505689e05978d75e07", "projectName": "mybatis.mybatis-3", "bugType": "More Specific If", "problem": "   }\n   private void configureConnection(Connection conn) throws SQLException {\n    if (autoCommit != conn.getAutoCommit()) {\n       conn.setAutoCommit(autoCommit);\n     }\n     if (defaultTransactionIsolationLevel != null) {", "fixed": "   }\n   private void configureConnection(Connection conn) throws SQLException {\n    if (autoCommit != null && autoCommit != conn.getAutoCommit()) {\n       conn.setAutoCommit(autoCommit);\n     }\n     if (defaultTransactionIsolationLevel != null) {", "sourceBeforeFix": "autoCommit != conn.getAutoCommit()", "sourceAfterFix": "autoCommit != null && autoCommit != conn.getAutoCommit()"}
{"fixCommitSHA1": "169a41db1ab014b0d2a10046055ab789c8c763bd", "projectName": "neo4j.neo4j", "bugType": "Same Function More Args", "problem": "     private TransactionalGraph getGremlinWrappedGraph() throws DatabaseBlockedException\n     {\n        return new Neo4jGraph( database.graph );\n     }\n }", "fixed": "     private TransactionalGraph getGremlinWrappedGraph() throws DatabaseBlockedException\n     {\n        return new Neo4jGraph( database.graph, false );\n     }\n }", "sourceBeforeFix": "new Neo4jGraph(database.graph)", "sourceAfterFix": "new Neo4jGraph(database.graph,false)"}
{"fixCommitSHA1": "ec6db0e0ab4948c4056a7c13da54f67c26c1ccaf", "projectName": "openhab.openhab", "bugType": "Less Specific If", "problem": " \t\t\t\tList<ZWaveDbConfigurationParameter> configList = database.getProductConfigParameters();\n\t\t\t\tif(configList.size() == 0) {\n \t\t\t\t\tbreak;\n \t\t\t\t}", "fixed": " \t\t\t\tList<ZWaveDbConfigurationParameter> configList = database.getProductConfigParameters();\n\t\t\t\tif(configList == null || configList.size() == 0) {\n \t\t\t\t\tbreak;\n \t\t\t\t}", "sourceBeforeFix": "configList.size() == 0", "sourceAfterFix": "configList == null || configList.size() == 0"}
{"fixCommitSHA1": "d41aad3b391de7aeb6b43e16692b974e5a35148e", "projectName": "JakeWharton.ActionBarSherlock", "bugType": "Change Identifier Used", "problem": "         private Method mMethod;\r\n         public InflatedOnMenuItemClickListener(String methodName) {\r\n            final Class<?> localClass = MenuInflater.this.getClass();\r\n             try {\r\n                 mMethod = localClass.getMethod(methodName, PARAM_TYPES);\r\n             } catch (Exception e) {\r", "fixed": "         private Method mMethod;\r\n         public InflatedOnMenuItemClickListener(String methodName) {\r\n            final Class<?> localClass = mContext.getClass();\r\n             try {\r\n                 mMethod = localClass.getMethod(methodName, PARAM_TYPES);\r\n             } catch (Exception e) {\r", "sourceBeforeFix": "mMethod.invoke(MenuInflater.this,params)", "sourceAfterFix": "mMethod.invoke(mContext,params)"}
{"fixCommitSHA1": "45bf206c4d10874716feb5ef11f55a041bd22111", "projectName": "stanfordnlp.CoreNLP", "bugType": "Change Identifier Used", "problem": "   }\n   public static TwoDimensionalMap<String, String, SimpleMatrix> averageBinaryMatrices(List<TwoDimensionalMap<String, String, SimpleMatrix>> maps) {\n    TwoDimensionalMap<String, String, SimpleMatrix> averages = new TwoDimensionalMap<String, String, SimpleMatrix>();\n     for (Pair<String, String> binary : getBinaryMatrixNames(maps)) {\n       int count = 0;\n       SimpleMatrix matrix = null;", "fixed": "   }\n   public static TwoDimensionalMap<String, String, SimpleMatrix> averageBinaryMatrices(List<TwoDimensionalMap<String, String, SimpleMatrix>> maps) {\n    TwoDimensionalMap<String, String, SimpleMatrix> averages = TwoDimensionalMap.treeMap();\n     for (Pair<String, String> binary : getBinaryMatrixNames(maps)) {\n       int count = 0;\n       SimpleMatrix matrix = null;", "sourceBeforeFix": "Generics.newHashMap()", "sourceAfterFix": "Generics.newTreeMap()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  private final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  private final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "926479e9046655b04ca5b9204a84b575ae4aa3f7", "projectName": "netty.netty", "bugType": "Change Modifier", "problem": "     private final WebSocketVersion version;\n    private boolean handshakeComplete;\n     private final String expectedSubprotocol;\n    private String actualSubprotocol;\n     protected final HttpHeaders customHeaders;", "fixed": "     private final WebSocketVersion version;\n    private volatile boolean handshakeComplete;\n     private final String expectedSubprotocol;\n    private volatile String actualSubprotocol;\n     protected final HttpHeaders customHeaders;", "sourceBeforeFix": "2", "sourceAfterFix": "66"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedEC2EndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default EC2EndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedEC2EndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default EC2EndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedDataSetTestEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default DataSetTestEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedDataSetTestEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default DataSetTestEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "e9cad4da3a814bcde46c10c0e4da2fc84f99d815", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t\n\tprotected boolean isRunning = true;\n \t/**\n \t * Instantiates a new {@link AbstractStormSpoutWrapper} that wraps the given Storm {@link IRichSpout spout} such", "fixed": " \t\n\tprotected volatile boolean isRunning = true;\n \t/**\n \t * Instantiates a new {@link AbstractStormSpoutWrapper} that wraps the given Storm {@link IRichSpout spout} such", "sourceBeforeFix": "4", "sourceAfterFix": "68"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15870, value = \"Unknown server group %s\")\n     IllegalStateException unknownServerGroup(String serverGroup);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10870, value = \"Unknown server group %s\")\n     IllegalStateException unknownServerGroup(String serverGroup);\n     /**", "sourceBeforeFix": "id=15868", "sourceAfterFix": "id=10868"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15868, value = \"Deployment %s is already started\")\n     String deploymentAlreadyStarted(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10868, value = \"Deployment %s is already started\")\n     String deploymentAlreadyStarted(String name);\n     /**", "sourceBeforeFix": "id=15851", "sourceAfterFix": "id=10851"}
{"fixCommitSHA1": "7cf7647e546201d3f175860526888cd92b3927b3", "projectName": "apache.storm", "bugType": "More Specific If", "problem": "             Long id = (Long) tuple.getValue(0);\n             Long timeDeltaMs = (Long) tuple.getValue(1);\n             TupleInfo tupleInfo = (TupleInfo) pending.remove(id);\n            if (tupleInfo.getMessageId() != null) {\n                 if (taskId != tupleInfo.getTaskId()) {\n                     throw new RuntimeException(\"Fatal error, mismatched task ids: \" + taskId + \" \" + tupleInfo.getTaskId());\n                 }", "fixed": "             Long id = (Long) tuple.getValue(0);\n             Long timeDeltaMs = (Long) tuple.getValue(1);\n             TupleInfo tupleInfo = (TupleInfo) pending.remove(id);\n            if (tupleInfo != null && tupleInfo.getMessageId() != null) {\n                 if (taskId != tupleInfo.getTaskId()) {\n                     throw new RuntimeException(\"Fatal error, mismatched task ids: \" + taskId + \" \" + tupleInfo.getTaskId());\n                 }", "sourceBeforeFix": "tupleInfo.getMessageId() != null", "sourceAfterFix": "tupleInfo != null && tupleInfo.getMessageId() != null"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "2921e7bf0d74a65fdcc71d3ce3053037d14e4d44", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "     protected void handleMultiMapTryLock(String[] args) {\n         String key = args[1];\n        long time = (args.length > 2) ? Long.valueOf(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMultiMap().tryLock(key);", "fixed": "     protected void handleMultiMapTryLock(String[] args) {\n         String key = args[1];\n        long time = (args.length > 2) ? Long.parseLong(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMultiMap().tryLock(key);", "sourceBeforeFix": "Long.valueOf(args[2])", "sourceAfterFix": "Long.parseLong(args[2])"}
{"fixCommitSHA1": "27c73d4725381f5827b144fc4ead6c8e3a8ad83f", "projectName": "hazelcast.hazelcast", "bugType": "Change Modifier", "problem": "     private Object value;\n    public ObjectRecord() {\n     }\n    public ObjectRecord(Data key, Object value) {\n         super(key);\n         this.value = value;\n     }", "fixed": "     private Object value;\n    ObjectRecord() {\n     }\n    ObjectRecord(Data key, Object value) {\n         super(key);\n         this.value = value;\n     }", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "a63faf44e1b103a49d25a15c720fc5940ae9fc07", "projectName": "square.retrofit", "bugType": "Change Identifier Used", "problem": "     assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n     Type mBodyGeneric = new TypeToken<Maybe<List<String>>>() {}.getType();\n    assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n     Type fBodyGeneric = new TypeToken<Flowable<List<String>>>() {}.getType();\n    assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n     Type oResponseClass = new TypeToken<Observable<Response<String>>>() {}.getType();", "fixed": "     assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n     Type mBodyGeneric = new TypeToken<Maybe<List<String>>>() {}.getType();\n    assertThat(factory.get(mBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n     Type fBodyGeneric = new TypeToken<Flowable<List<String>>>() {}.getType();\n    assertThat(factory.get(fBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n     Type oResponseClass = new TypeToken<Observable<Response<String>>>() {}.getType();", "sourceBeforeFix": "factory.get(sBodyWildcard,NO_ANNOTATIONS,retrofit)", "sourceAfterFix": "factory.get(mBodyWildcard,NO_ANNOTATIONS,retrofit)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface SedaEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedSedaEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface SedaEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedSedaEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "aafd3788df73bd0d21c9411014a7cbda0a5bbd17", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "     if (options.closurePass && options.removeAbstractMethods) {\n      passes.add(removeAbstractMethods);\n     }", "fixed": "     if (options.closurePass && options.removeAbstractMethods) {\n      passes.add(closureCodeRemoval);\n     }", "sourceBeforeFix": "new GoogleCodeRemoval(compiler)", "sourceAfterFix": "new ClosureCodeRemoval(compiler)"}
{"fixCommitSHA1": "39aa03261a00c409f29341c286febaec99468d65", "projectName": "apache.flink", "bugType": "Change Boolean Literal", "problem": " \t\t\tfinal CompressionLevel compressionLevel, int indexOfOutputGate, int indexOfInputGate,\n \t\t\tfinal DistributionPattern distributionPattern) throws JobGraphDefinitionException {\n \t\tthis.connectTo(vertex, channelType, compressionLevel, indexOfOutputGate, indexOfInputGate, distributionPattern,\n\t\t\tfalse);\n \t}\n \t/**", "fixed": " \t\t\tfinal CompressionLevel compressionLevel, int indexOfOutputGate, int indexOfInputGate,\n \t\t\tfinal DistributionPattern distributionPattern) throws JobGraphDefinitionException {\n \t\tthis.connectTo(vertex, channelType, compressionLevel, indexOfOutputGate, indexOfInputGate, distributionPattern,\n\t\t\ttrue);\n \t}\n \t/**", "sourceBeforeFix": "this.connectTo(vertex,channelType,compressionLevel,-1,-1,distributionPattern,false)", "sourceAfterFix": "this.connectTo(vertex,channelType,compressionLevel,-1,-1,distributionPattern,true)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "9716d2ae673a576cb345c3bfb24cf71654d8f112", "projectName": "openhab.openhab", "bugType": "Change Identifier Used", "problem": " \t@Override\n \tpublic void internalReceiveCommand(String itemName, Command command) {\n \t\tsuper.internalReceiveCommand(itemName, command);\n\t\tlogger.debug(\"MyQ binding received command '{}' for item '{}'\",\n \t\t\t\tcommand, itemName);\n \t\tif (myqOnlineData != null) {\n \t\t\tcomputeCommandForItem(command, itemName);", "fixed": " \t@Override\n \tpublic void internalReceiveCommand(String itemName, Command command) {\n \t\tsuper.internalReceiveCommand(itemName, command);\n\t\tlogger.trace(\"MyQ binding received command '{}' for item '{}'\",\n \t\t\t\tcommand, itemName);\n \t\tif (myqOnlineData != null) {\n \t\t\tcomputeCommandForItem(command, itemName);", "sourceBeforeFix": "logger.debug(\"Invalid Account Credentials\")", "sourceAfterFix": "logger.trace(\"Invalid Account Credentials\")"}
{"fixCommitSHA1": "c30e67b81a0d9ac45c4151d20a960e542ad97b4f", "projectName": "dropwizard.dropwizard", "bugType": "Change Identifier Used", "problem": "     @Override\n     protected void doPost(HttpServletRequest req,\n                           HttpServletResponse resp) throws ServletException, IOException {\n        final Task task = tasks.get(req.getRequestURI());\n         if (task != null) {\n             try {\n                 resp.setContentType(MediaType.TEXT_PLAIN);", "fixed": "     @Override\n     protected void doPost(HttpServletRequest req,\n                           HttpServletResponse resp) throws ServletException, IOException {\n        final Task task = tasks.get(req.getServletPath());\n         if (task != null) {\n             try {\n                 resp.setContentType(MediaType.TEXT_PLAIN);", "sourceBeforeFix": "req.getRequestURI()", "sourceAfterFix": "req.getServletPath()"}
{"fixCommitSHA1": "7e53685310fa22abd12307e141511184fa6ede3a", "projectName": "apache.hive", "bugType": "Change Identifier Used", "problem": "   public void setOutputFormatClass(Class<? extends HiveOutputFormat> outputFormatClass) {\n     this.outputFormatClass = outputFormatClass;\n     tPartition.getSd().setOutputFormat(HiveFileFormatUtils\n        .getOutputFormatSubstitute(outputFormatClass).toString());\n   }\n   final public Class<? extends InputFormat> getInputFormatClass()", "fixed": "   public void setOutputFormatClass(Class<? extends HiveOutputFormat> outputFormatClass) {\n     this.outputFormatClass = outputFormatClass;\n     tPartition.getSd().setOutputFormat(HiveFileFormatUtils\n        .getOutputFormatSubstitute(outputFormatClass).getName());\n   }\n   final public Class<? extends InputFormat> getInputFormatClass()", "sourceBeforeFix": "HiveFileFormatUtils.getOutputFormatSubstitute(outputFormatClass).toString()", "sourceAfterFix": "HiveFileFormatUtils.getOutputFormatSubstitute(outputFormatClass).getName()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "f9c863f126519ad2cfd7af4cef3eed04e8f87ea3", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"processKey\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;F)Ljava/lang/String;\");\n         } else if (propertyClass == double.class) {\n            mw.visitVarInsn(DLOAD, context.var(\"double\"));\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"processKey\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;D)Ljava/lang/String;\");\n         } else if (propertyClass == boolean.class) {", "fixed": "             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"processKey\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;F)Ljava/lang/String;\");\n         } else if (propertyClass == double.class) {\n            mw.visitVarInsn(DLOAD, context.var(\"double\", 2));\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"processKey\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;D)Ljava/lang/String;\");\n         } else if (propertyClass == boolean.class) {", "sourceBeforeFix": "context.var(\"double\")", "sourceAfterFix": "context.var(\"double\",2)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "2f880c73edb600ab92cdd580ac74f7388b5c6135", "projectName": "Alluxio.alluxio", "bugType": "Change Modifier", "problem": "     }\n   }\n  public void unpinFile(int fileId) {\n     if (INACTIVE) {\n       return;\n     }", "fixed": "     }\n   }\n  public synchronized void unpinFile(int fileId) {\n     if (INACTIVE) {\n       return;\n     }", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_tw() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016/05/06\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_tw() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016/05/06\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "64dff91895f9df55fe3a07217a333efa4d37d92a", "projectName": "apache.hbase", "bugType": "Wrong Function Name", "problem": "     try {\n       jarFile = new JarInputStream(new FileInputStream(jarFileName));\n     } catch (IOException ioEx) {\n      LOG.error(\"Failed to look for classes in \" + jarFileName + \": \" + ioEx);\n       throw ioEx;\n     }", "fixed": "     try {\n       jarFile = new JarInputStream(new FileInputStream(jarFileName));\n     } catch (IOException ioEx) {\n      LOG.warn(\"Failed to look for classes in \" + jarFileName + \": \" + ioEx);\n       throw ioEx;\n     }", "sourceBeforeFix": "LOG.error(\"Ignoring duplicate class \" + className)", "sourceAfterFix": "LOG.warn(\"Ignoring duplicate class \" + className)"}
{"fixCommitSHA1": "6c4cfa7a18d589462f14a2165932d17e46c8f510", "projectName": "alibaba.druid", "bugType": "Change Modifier", "problem": "     private final static Log   LOG         = LogFactory.getLog(DruidPooledConnection.class);\r\n     protected Connection       conn;\r\n    protected DruidConnectionHolder holder;\r\n     protected TransactionInfo  transactionInfo;\r\n     private final boolean      dupCloseLogEnable;\r\n     private boolean            traceEnable = false;\r", "fixed": "     private final static Log   LOG         = LogFactory.getLog(DruidPooledConnection.class);\r\n     protected Connection       conn;\r\n    protected volatile DruidConnectionHolder holder;\r\n     protected TransactionInfo  transactionInfo;\r\n     private final boolean      dupCloseLogEnable;\r\n     private boolean            traceEnable = false;\r", "sourceBeforeFix": "4", "sourceAfterFix": "68"}
{"fixCommitSHA1": "c25f3ed04a7dcad130303a10f6d235e7ee7b36fd", "projectName": "libgdx.libgdx", "bugType": "Change Unary Operator\t", "problem": " \t\tif (handle.delete()) fail();\r\n \t\tif (handle.list().length != 0) fail();\r\n \t\tif (handle.child(\"meow\").exists()) fail();\r\n\t\tif (handle.parent().exists()) fail();\r\n \t\ttry {\r\n \t\t\thandle.read().close();\r\n \t\t\tfail();\r", "fixed": " \t\tif (handle.delete()) fail();\r\n \t\tif (handle.list().length != 0) fail();\r\n \t\tif (handle.child(\"meow\").exists()) fail();\r\n\t\tif (!handle.parent().exists()) fail();\r\n \t\ttry {\r\n \t\t\thandle.read().close();\r\n \t\t\tfail();\r", "sourceBeforeFix": "handle.parent().exists()", "sourceAfterFix": "!handle.parent().exists()"}
{"fixCommitSHA1": "b3c2d1521f396a5d30a132be0d4e6d648ddc6444", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t\t\tmetrics.addAll(getStatistics(\"integration.handler.\" + name + \".duration\",\n \t\t\t\t\texporter.getHandlerDuration(name)));\n \t\t}\n\t\tmetrics.add(new Metric<Long>(\"integration.activeHandlerCount\", exporter\n\t\t\t\t.getActiveHandlerCountLong()));\n \t\tmetrics.add(new Metric<Integer>(\"integration.handlerCount\", exporter\n \t\t\t\t.getHandlerCount()));\n \t\tmetrics.add(new Metric<Integer>(\"integration.channelCount\", exporter", "fixed": " \t\t\tmetrics.addAll(getStatistics(\"integration.handler.\" + name + \".duration\",\n \t\t\t\t\texporter.getHandlerDuration(name)));\n \t\t}\n\t\tmetrics.add(new Metric<Integer>(\"integration.activeHandlerCount\", exporter\n\t\t\t\t.getActiveHandlerCount()));\n \t\tmetrics.add(new Metric<Integer>(\"integration.handlerCount\", exporter\n \t\t\t\t.getHandlerCount()));\n \t\tmetrics.add(new Metric<Integer>(\"integration.channelCount\", exporter", "sourceBeforeFix": "Metric<Long>", "sourceAfterFix": "Metric<Integer>"}
{"fixCommitSHA1": "f9c863f126519ad2cfd7af4cef3eed04e8f87ea3", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"processKey\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;C)Ljava/lang/String;\");\n         } else if (propertyClass == long.class) {\n            mw.visitVarInsn(LLOAD, context.var(\"long\"));\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"processKey\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;J)Ljava/lang/String;\");\n         } else if (propertyClass == float.class) {", "fixed": "             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"processKey\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;C)Ljava/lang/String;\");\n         } else if (propertyClass == long.class) {\n            mw.visitVarInsn(LLOAD, context.var(\"long\", 2));\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"processKey\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;J)Ljava/lang/String;\");\n         } else if (propertyClass == float.class) {", "sourceBeforeFix": "context.var(\"long\")", "sourceAfterFix": "context.var(\"long\",2)"}
{"fixCommitSHA1": "ae4c271f7068895d43ad42712cb64b5bc81525a3", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "           throws IOException, AlluxioException, InterruptedException {\n     final long deadline = System.currentTimeMillis() + tunit.toMillis(timeout);\n    final long pollPeriod = Configuration.getLong(PropertyKey.USER_FILE_WAITCOMPLETED_POLL_MS);\n     boolean completed = false;\n     long timeleft = deadline - System.currentTimeMillis();", "fixed": "           throws IOException, AlluxioException, InterruptedException {\n     final long deadline = System.currentTimeMillis() + tunit.toMillis(timeout);\n    final long pollPeriod = Configuration.getMs(PropertyKey.USER_FILE_WAITCOMPLETED_POLL_MS);\n     boolean completed = false;\n     long timeleft = deadline - System.currentTimeMillis();", "sourceBeforeFix": "Configuration.getLong(PropertyKey.USER_FILE_WAITCOMPLETED_POLL_MS)", "sourceAfterFix": "Configuration.getMs(PropertyKey.USER_FILE_WAITCOMPLETED_POLL_MS)"}
{"fixCommitSHA1": "9467bef8ea9a62658b32dd43a76f4f98087d1986", "projectName": "apache.hadoop", "bugType": "Change Unary Operator\t", "problem": "             \"--attr\", \"foo=bar\",\n             \"--attr\", \"foo=glarch\"};\n     rc = ks.run(args4);\n    assertEquals(-1, rc);\n     \n     deleteKey(ks, \"keyattr1\");", "fixed": "             \"--attr\", \"foo=bar\",\n             \"--attr\", \"foo=glarch\"};\n     rc = ks.run(args4);\n    assertEquals(1, rc);\n     \n     deleteKey(ks, \"keyattr1\");", "sourceBeforeFix": "-1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "014f2410e81ed3ecc6b82fbac49ab345aab6e90f", "projectName": "junit-team.junit", "bugType": "Change Modifier", "problem": "     private static final String DELTA= \"void delta()\";\n     private static final String EPSILON= \"void epsilon()\";\n    private static class Dummy {\n         Object alpha(int i, double d, Thread t) {return null;}\n         void beta(int[][] x) {}\n         int gamma() {return 0;}", "fixed": "     private static final String DELTA= \"void delta()\";\n     private static final String EPSILON= \"void epsilon()\";\n    static class Dummy {\n         Object alpha(int i, double d, Thread t) {return null;}\n         void beta(int[][] x) {}\n         int gamma() {return 0;}", "sourceBeforeFix": "10", "sourceAfterFix": "8"}
{"fixCommitSHA1": "486b290863a66641b0ec30dbf2d9e349733cae44", "projectName": "apache.hbase", "bugType": "Wrong Function Name", "problem": "    */\n   public void flush(final String tableNameOrRegionName)\n   throws IOException, InterruptedException {\n    flush(Bytes.toBytesBinary(tableNameOrRegionName));\n   }\n   /**", "fixed": "    */\n   public void flush(final String tableNameOrRegionName)\n   throws IOException, InterruptedException {\n    flush(Bytes.toBytes(tableNameOrRegionName));\n   }\n   /**", "sourceBeforeFix": "Bytes.toBytesBinary(tableNameOrRegionName)", "sourceAfterFix": "Bytes.toBytes(tableNameOrRegionName)"}
{"fixCommitSHA1": "2b0752b688e6f27129f344050787e9546adc004a", "projectName": "hazelcast.hazelcast", "bugType": "Change Numeric Literal", "problem": "         OperationService opService = getOperationService(local);\n         int partitionId = getPartitionId(remote);\n        opService.invokeOnPartition(null, new SlowOperation(callTimeoutMs * 2), partitionId);\n        Future f = opService.invokeOnPartition(null, new DummyOperation(), partitionId);\n         try {\n             f.get(3 * callTimeoutMs, MILLISECONDS);", "fixed": "         OperationService opService = getOperationService(local);\n         int partitionId = getPartitionId(remote);\n        opService.invokeOnPartition(new SlowOperation(callTimeoutMs * 2).setPartitionId(partitionId));\n        Future f = opService.invokeOnPartition(new DummyOperation().setPartitionId(partitionId));\n         try {\n             f.get(3 * callTimeoutMs, MILLISECONDS);", "sourceBeforeFix": "callTimeoutMs=5000", "sourceAfterFix": "callTimeoutMs=10000"}
{"fixCommitSHA1": "014f2410e81ed3ecc6b82fbac49ab345aab6e90f", "projectName": "junit-team.junit", "bugType": "Change Modifier", "problem": "     private static final String DELTA= \"void delta()\";\n     private static final String EPSILON= \"void epsilon()\";\n    private static class Dummy {\n         Object alpha(int i, double d, Thread t) {return null;}\n         void beta(int[][] x) {}\n         int gamma() {return 0;}", "fixed": "     private static final String DELTA= \"void delta()\";\n     private static final String EPSILON= \"void epsilon()\";\n    static class Dummy {\n         Object alpha(int i, double d, Thread t) {return null;}\n         void beta(int[][] x) {}\n         int gamma() {return 0;}", "sourceBeforeFix": "10", "sourceAfterFix": "8"}
{"fixCommitSHA1": "1daccd54d2ff2ecdb21d8c60268600c37febbb70", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "       mBuf.flip();\n       for (int pId = mLeft; pId < mRight; pId ++) {\n         long startTimeMs = System.currentTimeMillis();\n        TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n         OutStream os = file.getOutStream(WriteType.MUST_CACHE);\n         for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n          mBuf.array()[0] = (byte) (k + mWorkerId);\n           os.write(mBuf.array());\n         }\n         os.close();", "fixed": "       mBuf.flip();\n       for (int pId = mLeft; pId < mRight; pId ++) {\n         long startTimeMs = System.currentTimeMillis();\n        TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n         OutStream os = file.getOutStream(WriteType.MUST_CACHE);\n         for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n          mBuf.putInt(0, k + mWorkerId);\n           os.write(mBuf.array());\n         }\n         os.close();", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "38eb6222bddaf49c3c9ae73ddef0cfe4ff5efa48", "projectName": "alibaba.dubbo", "bugType": "Change Numeric Literal", "problem": "     @Test\n     public void test_Decode_Error_Length() throws IOException {\n        byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, 0x20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n         Person person = new Person();\n         byte[] request = getRequestBytes(person, header);", "fixed": "     @Test\n     public void test_Decode_Error_Length() throws IOException {\n        byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, 0x02, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n         Person person = new Person();\n         byte[] request = getRequestBytes(person, header);", "sourceBeforeFix": "{MAGIC_HIGH,MAGIC_LOW,0x20,20,0,0,0,0,0,0,0,0,0,0,0,0}", "sourceAfterFix": "{MAGIC_HIGH,MAGIC_LOW,0x02,20,0,0,0,0,0,0,0,0,0,0,0,0}"}
{"fixCommitSHA1": "fd3e0ff191f3e26b09f52f538748133b65f40740", "projectName": "apache.hbase", "bugType": "Change Operand ", "problem": "       if (expMsg.contains(\"No FileSystem for scheme\")) {\n         newMsg =\n             \"Unsupported filesystem scheme found in the backup target url. Error Message: \"\n                + newMsg;\n         LOG.error(newMsg);\n         throw new IOException(newMsg);\n       } else {", "fixed": "       if (expMsg.contains(\"No FileSystem for scheme\")) {\n         newMsg =\n             \"Unsupported filesystem scheme found in the backup target url. Error Message: \"\n                + expMsg;\n         LOG.error(newMsg);\n         throw new IOException(newMsg);\n       } else {", "sourceBeforeFix": "\"Unsupported filesystem scheme found in the backup target url. Error Message: \" + newMsg", "sourceAfterFix": "\"Unsupported filesystem scheme found in the backup target url. Error Message: \" + expMsg"}
{"fixCommitSHA1": "97b8bc59615d4da0c51a91fef22ab462a8d69766", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "         final Object child = new ParseTreeTablePresentation(null).getChild(tree, 1);\n         Assert.assertTrue(\"Invalid child type\", child instanceof DetailAST);\n         Assert.assertEquals(\"Invalid child token type\",\n                TokenTypes.BLOCK_COMMENT_BEGIN, ((AST) child).getType());\n     }\n     @Test", "fixed": "         final Object child = new ParseTreeTablePresentation(null).getChild(tree, 1);\n         Assert.assertTrue(\"Invalid child type\", child instanceof DetailAST);\n         Assert.assertEquals(\"Invalid child token type\",\n                TokenTypes.BLOCK_COMMENT_BEGIN, ((DetailAST) child).getType());\n     }\n     @Test", "sourceBeforeFix": "(AST)child", "sourceAfterFix": "(DetailAST)child"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface MailEndpointBuilder\n             extends\n                 MailEndpointConsumerBuilder, MailEndpointProducerBuilder {\n         default AdvancedMailEndpointBuilder advanced() {", "fixed": "     \n    public interface MailEndpointBuilder\n             extends\n                 MailEndpointConsumerBuilder, MailEndpointProducerBuilder {\n         default AdvancedMailEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getMentions() throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",\n                 null, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getMentions() throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",\n                 null, true));\n     }", "sourceBeforeFix": "SavedSearch.constructSavedSearches(get(getBaseURL() + \"saved_searches.json\",true))", "sourceAfterFix": "SavedSearch.createSavedSearchList(get(getBaseURL() + \"saved_searches.json\",true))"}
{"fixCommitSHA1": "038ea1803bae1cf3be279b36395b4de4e0ff39b5", "projectName": "openhab.openhab", "bugType": "Wrong Function Name", "problem": " \t\tpollResetFuture = pollService.schedule(new Runnable() {\n \t\t\tpublic void run() {\n\t\t\t\tlogger.debug(\"rapidRefreshFutureEnd stopping\");\n \t\t\t\tschedulePoll(refreshInterval);\n \t\t\t}\n \t\t}, MAX_RAPID_REFRESH, TimeUnit.MILLISECONDS);", "fixed": " \t\tpollResetFuture = pollService.schedule(new Runnable() {\n \t\t\tpublic void run() {\n\t\t\t\tlogger.trace(\"rapidRefreshFutureEnd stopping\");\n \t\t\t\tschedulePoll(refreshInterval);\n \t\t\t}\n \t\t}, MAX_RAPID_REFRESH, TimeUnit.MILLISECONDS);", "sourceBeforeFix": "logger.debug(\"rapidRefreshFuture scheduleing for {} millis\",millis)", "sourceAfterFix": "logger.trace(\"rapidRefreshFuture scheduleing for {} millis\",millis)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  private final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "d5d886baf0d9ab5b389dd4276bf13cf8032c7df7", "projectName": "gephi.gephi", "bugType": "Less Specific If", "problem": "             } else if (\"target\".equals(key)) {\n                 NodeDraft target = container.getNode(value.toString());\n                 edgeDraft.setTarget(target);\n            } else if (\"value\".equals(key)) {\n                 if (value instanceof Double) {\n                     edgeDraft.setWeight(((Double) value).floatValue());\n                 }", "fixed": "             } else if (\"target\".equals(key)) {\n                 NodeDraft target = container.getNode(value.toString());\n                 edgeDraft.setTarget(target);\n            } else if (\"value\".equals(key) || \"weight\".equals(key)) {\n                 if (value instanceof Double) {\n                     edgeDraft.setWeight(((Double) value).floatValue());\n                 }", "sourceBeforeFix": "\"value\".equals(key)", "sourceAfterFix": "\"value\".equals(key) || \"weight\".equals(key)"}
{"fixCommitSHA1": "e2119d33293008fcc876f5fcd58ede2993eb24d6", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnBean(Client.class)\n\t@ConditionalOnEnablednHealthIndicator(\"elasticsearch\")\n \t@EnableConfigurationProperties(ElasticsearchHealthIndicatorProperties.class)\n \tpublic static class ElasticsearchHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<ElasticsearchHealthIndicator, Client> {", "fixed": " \t@Configuration\n \t@ConditionalOnBean(Client.class)\n\t@ConditionalOnEnabledHealthIndicator(\"elasticsearch\")\n \t@EnableConfigurationProperties(ElasticsearchHealthIndicatorProperties.class)\n \tpublic static class ElasticsearchHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<ElasticsearchHealthIndicator, Client> {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"elasticsearch\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"elasticsearch\")"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsText(String path) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), 1, null);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsText(String path) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), 1, null);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "36f71405ee04602e76844b255e44f146bb476161", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": " \t\tConceptNumeric cn = new ConceptNumeric(c);\r\n \t\tfor (ConceptSet cSet : cn.getConceptSets()) {\r\n\t\t\tAssert.assertSame(cn, cSet.getConcept());\r\n \t\t}\r\n \t}\r", "fixed": " \t\tConceptNumeric cn = new ConceptNumeric(c);\r\n \t\tfor (ConceptSet cSet : cn.getConceptSets()) {\r\n\t\t\tAssert.assertSame(cn, cSet.getConceptSet());\r\n \t\t}\r\n \t}\r", "sourceBeforeFix": "cSet.getConcept()", "sourceAfterFix": "cSet.getConceptSet()"}
{"fixCommitSHA1": "4aecd0d356c9990ebf8039b4b412fa08ca0c9353", "projectName": "stanfordnlp.CoreNLP", "bugType": "Wrong Function Name", "problem": "       log(FORCE, t);\n       exitCode = 1;\n     }\nendTrack(\"main\");\n     if (exit) {\n       System.exit(exitCode);\n     }", "fixed": "       log(FORCE, t);\n       exitCode = 1;\n     }\nendTracksTo(\"main\");\n     if (exit) {\n       System.exit(exitCode);\n     }", "sourceBeforeFix": "endTrack(\"main\")", "sourceAfterFix": "endTracksTo(\"main\")"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 15830, value = \"Registration of remote hosts is not supported on slave host controllers\")\n     String slaveControllerCannotAcceptOtherSlaves();\n     /**", "fixed": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 10830, value = \"Registration of remote hosts is not supported on slave host controllers\")\n     String slaveControllerCannotAcceptOtherSlaves();\n     /**", "sourceBeforeFix": "id=15830", "sourceAfterFix": "id=10830"}
{"fixCommitSHA1": "5592f80e96e7fe3b7751c441efdd8eba6ccfc4ba", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  static class FlagUsageException extends Exception {\n     private static final long serialVersionUID = 1L;\n     FlagUsageException(String message) {", "fixed": "   \n  protected static class FlagUsageException extends Exception {\n     private static final long serialVersionUID = 1L;\n     FlagUsageException(String message) {", "sourceBeforeFix": "8", "sourceAfterFix": "12"}
{"fixCommitSHA1": "5b13fe70c25812157a1e4432135eb9639e72bc6a", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t\tfinal Sink output = new Sink(\"output.json\").withInputs(selection);\n \t\texpectedPlan.setSinks(output);\n\t\tassertEquals(expectedPlan, actualPlan);\n \t}\n \t@Test", "fixed": " \t\tfinal Sink output = new Sink(\"output.json\").withInputs(selection);\n \t\texpectedPlan.setSinks(output);\n\t\tassertPlanEquals(expectedPlan, actualPlan);\n \t}\n \t@Test", "sourceBeforeFix": "assertEquals(expectedPlan,actualPlan)", "sourceAfterFix": "assertPlanEquals(expectedPlan,actualPlan)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "fixed": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4fv(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4fv(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "sourceBeforeFix": "GL11.glTexParameter(target,pname,params)", "sourceAfterFix": "GL11.glTexParameterfv(target,pname,params)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "fixed": "   }\n   \n  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "3d3f3d5f9c1243bdc111bd463e2f3afc23384d13", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "      * @author Stephen Bloch\n      * June 19, 2003\n      */\n    private abstract static class LexicalFrame\n     {\n         \n         private final Set<String> varNames;", "fixed": "      * @author Stephen Bloch\n      * June 19, 2003\n      */\n    private static class LexicalFrame\n     {\n         \n         private final Set<String> varNames;", "sourceBeforeFix": "1034", "sourceAfterFix": "10"}
{"fixCommitSHA1": "435805f612bf78ee0d2fd93cd90fa6c6740e17c2", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         String uri = getScpUri() + \"?username=admin&privateKeyFile=src/test/resources/camel-key.priv&privateKeyFilePassphrase=password&knownHostsFile=\" + getKnownHostsFile();\n         template.sendBodyAndHeader(uri, \"Hallo Welt\", Exchange.FILE_NAME, \"welt.txt\");\n        Thread.sleep(200);\n         File file = new File(getScpPath() + \"/welt.txt\");\n         assertFileExists(file.getAbsolutePath());", "fixed": "         String uri = getScpUri() + \"?username=admin&privateKeyFile=src/test/resources/camel-key.priv&privateKeyFilePassphrase=password&knownHostsFile=\" + getKnownHostsFile();\n         template.sendBodyAndHeader(uri, \"Hallo Welt\", Exchange.FILE_NAME, \"welt.txt\");\n        Thread.sleep(500);\n         File file = new File(getScpPath() + \"/welt.txt\");\n         assertFileExists(file.getAbsolutePath());", "sourceBeforeFix": "Thread.sleep(200)", "sourceAfterFix": "Thread.sleep(500)"}
{"fixCommitSHA1": "4af3d1f01144d5a959934641e66abfcb94644b0a", "projectName": "hazelcast.hazelcast", "bugType": "Delete Throws Exception", "problem": "     HazelcastInstance server1;\n     @Before\n    public void setUp() throws Exception {\n         NearCacheConfig nearCacheConfig = newNearCacheConfig();\n         nearCacheConfig.setInvalidateOnChange(true);", "fixed": "     HazelcastInstance server1;\n     @Before\n    public void setUp() {\n         NearCacheConfig nearCacheConfig = newNearCacheConfig();\n         nearCacheConfig.setInvalidateOnChange(true);", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "26b56d3addb34b409bf10b819a1e70ea2ad46b71", "projectName": "netty.netty", "bugType": "Change Identifier Used", "problem": "             }\n             for (; i < srcEndIdx; i ++) {\n                T m = src[srcIdx];\n                 if (m == null) {\n                     throw new NullPointerException(\"src[\" + srcIdx + ']');\n                 }", "fixed": "             }\n             for (; i < srcEndIdx; i ++) {\n                T m = src[i];\n                 if (m == null) {\n                     throw new NullPointerException(\"src[\" + srcIdx + ']');\n                 }", "sourceBeforeFix": "src[srcIdx]", "sourceAfterFix": "src[i]"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "      * Builder for endpoint producers for the Azure Storage Queue Service\n      * component.\n      */\n    public static interface QueueServiceEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedQueueServiceEndpointProducerBuilder advanced() {", "fixed": "      * Builder for endpoint producers for the Azure Storage Queue Service\n      * component.\n      */\n    public interface QueueServiceEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedQueueServiceEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface Olingo4EndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedOlingo4EndpointProducerBuilder advanced() {", "fixed": "     \n    public interface Olingo4EndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedOlingo4EndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15868, value = \"Deployment %s is already started\")\n     String deploymentAlreadyStarted(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10868, value = \"Deployment %s is already started\")\n     String deploymentAlreadyStarted(String name);\n     /**", "sourceBeforeFix": "id=15837", "sourceAfterFix": "id=10837"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": " import org.jboss.logging.Messages;\n /**\n * This module is using message IDs in the range 10900-10999. This file is using the subset 10975-10999 for domain\n* controller non-logger messages. See http:\n  * JBAS message id blocks.\n  * <p/>", "fixed": " import org.jboss.logging.Messages;\n /**\n * This module is using message IDs in the range 10800-10899. This file is using the subset 10830-10899 for domain\n* controller non-logger messages. See http:\n  * JBAS message id blocks.\n  * <p/>", "sourceBeforeFix": "id=15834", "sourceAfterFix": "id=10834"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_in() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"06-05-2016\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_in() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"06-05-2016\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "356ec6bd0161edfd46b42ffe55961d52884eb7f0", "projectName": "wildfly.wildfly", "bugType": "Change Binary Operator", "problem": "         attr = bindingGroup.get(DEFAULT_INTERFACE);\n         writeAttribute(writer, Attribute.DEFAULT_INTERFACE, attr.asString());\n        if (fromServer && bindingGroup.hasDefined(PORT_OFFSET) && bindingGroup.get(PORT_OFFSET).asInt() >= 0) {\n             attr = bindingGroup.get(PORT_OFFSET);\n             writeAttribute(writer, Attribute.PORT_OFFSET, attr.asString());\n         }", "fixed": "         attr = bindingGroup.get(DEFAULT_INTERFACE);\n         writeAttribute(writer, Attribute.DEFAULT_INTERFACE, attr.asString());\n        if (fromServer && bindingGroup.hasDefined(PORT_OFFSET) && bindingGroup.get(PORT_OFFSET).asInt() > 0) {\n             attr = bindingGroup.get(PORT_OFFSET);\n             writeAttribute(writer, Attribute.PORT_OFFSET, attr.asString());\n         }", "sourceBeforeFix": "offset >= 0", "sourceAfterFix": "offset > 0"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     }, tags={ \"pet\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 405, message = \"Invalid input\", response = Void.class) })\n    void updatePetWithForm(@PathParam(\"petId\") @ApiParam(\"ID of pet that needs to be updated\") Long petId,@FormParam(value = \"name\")  String name,@FormParam(value = \"status\")  String status);\n     @POST\n     @Path(\"/{petId}/uploadImage\")", "fixed": "     }, tags={ \"pet\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 405, message = \"Invalid input\", response = Void.class) })\n    void updatePetWithForm(@PathParam(\"petId\") @ApiParam(\"ID of pet that needs to be updated\") Long petId,@FormParam(value = \"name\")  String name,@FormParam(value = \"status\")  String status) throws Exception;\n     @POST\n     @Path(\"/{petId}/uploadImage\")", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AtmosphereWebsocketEndpointBuilder\n             extends\n                 AtmosphereWebsocketEndpointConsumerBuilder, AtmosphereWebsocketEndpointProducerBuilder {\n         default AdvancedAtmosphereWebsocketEndpointBuilder advanced() {", "fixed": "     \n    public interface AtmosphereWebsocketEndpointBuilder\n             extends\n                 AtmosphereWebsocketEndpointConsumerBuilder, AtmosphereWebsocketEndpointProducerBuilder {\n         default AdvancedAtmosphereWebsocketEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleActionsPredicatesOptions_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(239);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");", "fixed": " \tpublic void testMultipleActionsPredicatesOptions_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(238);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");", "sourceBeforeFix": "new StringBuilder(561)", "sourceAfterFix": "new StringBuilder(560)"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCachePuts(1);\n            statistics.addPutTimeNano(System.nanoTime() - start);\n         }\n         return result;\n     }", "fixed": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCachePuts(1);\n            statistics.addPutTimeNanos(System.nanoTime() - start);\n         }\n         return result;\n     }", "sourceBeforeFix": "statistics.addGetTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addGetTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "5bcda0dcda632007620256bcc654628a81ab50f0", "projectName": "apache.hive", "bugType": "Less Specific If", "problem": "     if (s == null || regex == null) {\n       return null;\n     }\n    if (!regex.equals(lastRegex)) {\n       lastRegex.set(regex);\n       p = Pattern.compile(regex.toString());\n     }", "fixed": "     if (s == null || regex == null) {\n       return null;\n     }\n    if (!regex.equals(lastRegex) || p == null) {\n       lastRegex.set(regex);\n       p = Pattern.compile(regex.toString());\n     }", "sourceBeforeFix": "!regex.equals(lastRegex)", "sourceAfterFix": "!regex.equals(lastRegex) || p == null"}
{"fixCommitSHA1": "b282b8181d18ddfd3ba30089e65114696995462f", "projectName": "alibaba.druid", "bugType": "Wrong Function Name", "problem": "                 if (LOG == null) {\n                     LOG = LogFactory.getLog(DruidDriver.class);\n                 }\n                LOG.error(\"register druid-driver mbean error\", ex);\n             }\n             return true;", "fixed": "                 if (LOG == null) {\n                     LOG = LogFactory.getLog(DruidDriver.class);\n                 }\n                LOG.warn(\"register druid-driver mbean error\", ex);\n             }\n             return true;", "sourceBeforeFix": "LOG.error(\"register druid-driver mbean error\",ex)", "sourceAfterFix": "LOG.warn(\"register druid-driver mbean error\",ex)"}
{"fixCommitSHA1": "364ae9baf3824dc4e0e56b2b681f8302731e8cdd", "projectName": "apache.hive", "bugType": "Same Function More Args", "problem": "         ret = getMS().deletePartitionColumnStatistics(dbName, tableName,\n                                                       convertedPartName, partVals, colName);\n       } finally {\n        endFunction(\"delete_column_statistics_by_partition: \", ret != false);\n       }\n       return ret;\n     }", "fixed": "         ret = getMS().deletePartitionColumnStatistics(dbName, tableName,\n                                                       convertedPartName, partVals, colName);\n       } finally {\n        endFunction(\"delete_column_statistics_by_partition: \", ret != false, null);\n       }\n       return ret;\n     }", "sourceBeforeFix": "endFunction(\"get_column_statistics_by_table: \",statsObj != null)", "sourceAfterFix": "endFunction(\"get_column_statistics_by_table: \",statsObj != null,null)"}
{"fixCommitSHA1": "3dddcc4cdf4a74ddbd4607c6aaee5bdd8ac46c27", "projectName": "gephi.gephi", "bugType": "Change Modifier", "problem": "     }\n     @Override\n    public void mouseMove() {\n         if (vizConfig.isSelectionEnable() && rectangleSelection) {\n             Rectangle rectangle = (Rectangle) currentSelectionArea;", "fixed": "     }\n     @Override\n    public synchronized void mouseMove() {\n         if (vizConfig.isSelectionEnable() && rectangleSelection) {\n             Rectangle rectangle = (Rectangle) currentSelectionArea;", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15846, value = \"Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.\")\n     String invalidRolloutPlanLess(String name, String propertyName, int value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10846, value = \"Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.\")\n     String invalidRolloutPlanLess(String name, String propertyName, int value);\n     /**", "sourceBeforeFix": "id=15868", "sourceAfterFix": "id=10868"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<DirectMessage> getSentDirectMessages(Paging paging) throws\n             TwitterException {\n        return DirectMessage.constructDirectMessages(get(getBaseURL() +\n                 \"direct_messages/sent.json\", new PostParameter[0],\n                 paging.asPostParameterList(), true));\n     }", "fixed": "      */\n     public ResponseList<DirectMessage> getSentDirectMessages(Paging paging) throws\n             TwitterException {\n        return DirectMessage.createDirectMessageList(get(getBaseURL() +\n                 \"direct_messages/sent.json\", new PostParameter[0],\n                 paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline.json\",true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface JGroupsEndpointBuilder\n             extends\n                 JGroupsEndpointConsumerBuilder, JGroupsEndpointProducerBuilder {\n         default AdvancedJGroupsEndpointBuilder advanced() {", "fixed": "     \n    public interface JGroupsEndpointBuilder\n             extends\n                 JGroupsEndpointConsumerBuilder, JGroupsEndpointProducerBuilder {\n         default AdvancedJGroupsEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "1b50e64ae913b5521dcc38f5eaf7a637acf5ecd2", "projectName": "Alluxio.alluxio", "bugType": "Change Operand ", "problem": "     if (mConnected) {\n       try {\n        if (mHeartbeat != null) {\n           mHeartbeatExecutor.heartbeat();\n         }\n         mProtocol.getTransport().close();", "fixed": "     if (mConnected) {\n       try {\n        if (mHeartbeatExecutor != null) {\n           mHeartbeatExecutor.heartbeat();\n         }\n         mProtocol.getTransport().close();", "sourceBeforeFix": "mHeartbeat != null", "sourceAfterFix": "mHeartbeatExecutor != null"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n  private final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "d2b19965df52e66385a2d7146887a44cea50330a", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "   @Override\n   public void process(Node externs, Node root) {\n    logger.info(\"Aliasing common strings\");\n     NodeTraversal.traverse(compiler, root, this);", "fixed": "   @Override\n   public void process(Node externs, Node root) {\n    logger.fine(\"Aliasing common strings\");\n     NodeTraversal.traverse(compiler, root, this);", "sourceBeforeFix": "logger.info(sb.toString())", "sourceAfterFix": "logger.fine(sb.toString())"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "fixed": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniformfv(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniformiv(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "sourceBeforeFix": "EXTFramebufferObject.glGetRenderbufferParameterEXT(target,pname,params)", "sourceAfterFix": "EXTFramebufferObject.glGetRenderbufferParameterivEXT(target,pname,params)"}
{"fixCommitSHA1": "da81d5ef25e71ae77bb98e0184aed2cb125fc1a6", "projectName": "Activiti.Activiti", "bugType": "Wrong Function Name", "problem": "     moveByMinutes(9 * 60 * 24);\n    waitForJobExecutorToProcessAllJobsAndExecutableTimerJobs(10000, 200);", "fixed": "     moveByMinutes(9 * 60 * 24);\n    executeJobExecutorForTime(10000, 200);", "sourceBeforeFix": "waitForJobExecutorToProcessAllJobsAndExecutableTimerJobs(10000,200)", "sourceAfterFix": "executeJobExecutorForTime(10000,200)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15848, value = \"Exception getting result from host %s: %s\")\n     String exceptionAwaitingResultFromHost(String name, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10848, value = \"Exception getting result from host %s: %s\")\n     String exceptionAwaitingResultFromHost(String name, String message);\n     /**", "sourceBeforeFix": "id=15847", "sourceAfterFix": "id=10847"}
{"fixCommitSHA1": "0cb756acf8ee44c28bee8b9ea626e2a65cee5880", "projectName": "google.guava", "bugType": "Change Caller in Function Call", "problem": "     rng.nextBytes(bytes);\n     ByteBuffer littleEndian = ByteBuffer.wrap(bytes).order(ByteOrder.LITTLE_ENDIAN);\n     ByteBuffer bigEndian = ByteBuffer.wrap(bytes).order(ByteOrder.BIG_ENDIAN);\n    assertEquals(hashFunction.hashBytes(littleEndian), hashFunction.hashBytes(littleEndian));\n     assertEquals(ByteOrder.LITTLE_ENDIAN, littleEndian.order());\n    assertEquals(ByteOrder.BIG_ENDIAN, littleEndian.order());\n   }\n   static void assertHasherByteBufferPreservesByteOrder(HashFunction hashFunction) {", "fixed": "     rng.nextBytes(bytes);\n     ByteBuffer littleEndian = ByteBuffer.wrap(bytes).order(ByteOrder.LITTLE_ENDIAN);\n     ByteBuffer bigEndian = ByteBuffer.wrap(bytes).order(ByteOrder.BIG_ENDIAN);\n    assertEquals(hashFunction.hashBytes(littleEndian), hashFunction.hashBytes(bigEndian));\n     assertEquals(ByteOrder.LITTLE_ENDIAN, littleEndian.order());\n    assertEquals(ByteOrder.BIG_ENDIAN, bigEndian.order());\n   }\n   static void assertHasherByteBufferPreservesByteOrder(HashFunction hashFunction) {", "sourceBeforeFix": "littleEndian.order()", "sourceAfterFix": "bigEndian.order()"}
{"fixCommitSHA1": "9f857ec87fe63bec133675da8a0bc4ad203de7e0", "projectName": "apache.camel", "bugType": "Same Function Less Args", "problem": "     public BoxConsumer(BoxEndpoint endpoint, Processor processor) {\n         super(endpoint, processor);\n        apiMethod = ApiConsumerHelper.findMethod(endpoint, this, log);\n         properties = new HashMap<String, Object>();\n         properties.putAll(endpoint.getEndpointProperties());", "fixed": "     public BoxConsumer(BoxEndpoint endpoint, Processor processor) {\n         super(endpoint, processor);\n        apiMethod = ApiConsumerHelper.findMethod(endpoint, this);\n         properties = new HashMap<String, Object>();\n         properties.putAll(endpoint.getEndpointProperties());", "sourceBeforeFix": "ApiConsumerHelper.findMethod(endpoint,this,log)", "sourceAfterFix": "ApiConsumerHelper.findMethod(endpoint,this)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15847, value = \"Interrupted waiting for result from host %s\")\n     String interruptedAwaitingResultFromHost(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10847, value = \"Interrupted waiting for result from host %s\")\n     String interruptedAwaitingResultFromHost(String name);\n     /**", "sourceBeforeFix": "id=15835", "sourceAfterFix": "id=10835"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public Trends getCurrentTrends(boolean excludeHashTags) throws TwitterException {\n        return Trends.constructTrendsList(get(getSearchBaseURL() + \"trends/current.json\"\n                 + (excludeHashTags ? \"?exclude=hashtags\" : \"\"), false)).get(0);\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public Trends getCurrentTrends(boolean excludeHashTags) throws TwitterException {\n        return Trends.createTrendsList(get(getSearchBaseURL() + \"trends/current.json\"\n                 + (excludeHashTags ? \"?exclude=hashtags\" : \"\"), false)).get(0);\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites/\" + id+ \".json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites/\" + id+ \".json\",new PostParameter[0],true))"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsText(String path, long millis) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), millis, null);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsText(String path, long millis) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), millis, null);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShader(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "fixed": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShaderiv(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "sourceBeforeFix": "GL20.glUniform1(location,toFloatBuffer(v,offset,count))", "sourceAfterFix": "GL20.glUniform1fv(location,toFloatBuffer(v,offset,count))"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public List<Trends> getDailyTrends() throws TwitterException {\n        return Trends.constructTrendsList(get(getSearchBaseURL() + \"trends/daily.json\", false));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n      */\n     public List<Trends> getDailyTrends() throws TwitterException {\n        return Trends.createTrendsList(get(getSearchBaseURL() + \"trends/daily.json\", false));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))"}
{"fixCommitSHA1": "4665dcf9ab41c3c61cd42aad296ebfe518bfa003", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\n \tpublic void glDrawArrays (int mode, int first, int count) {\n\t\tGL.glDrawArraysEXT(mode, first, count);\n \t}\n \tpublic void glDrawElements (int mode, int count, int type, Buffer indices) {", "fixed": " \t}\n \tpublic void glDrawArrays (int mode, int first, int count) {\n\t\tGL.glDrawArrays(mode, first, count);\n \t}\n \tpublic void glDrawElements (int mode, int count, int type, Buffer indices) {", "sourceBeforeFix": "GL.glDrawArraysEXT(mode,first,count)", "sourceAfterFix": "GL.glDrawArrays(mode,first,count)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<Status> getHomeTimeline() throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/home_timeline.json\", true));\n     }", "fixed": "      */\n     public ResponseList<Status> getHomeTimeline() throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/home_timeline.json\", true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweets/\" + statusId+ \".json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweets/\" + statusId+ \".json\",true))"}
{"fixCommitSHA1": "adfcb4891e9193c5e0c92f60a7de75d4ca3f6a9d", "projectName": "facebook.presto", "bugType": "Wrong Function Name", "problem": "             Map<HashComputation, Symbol> hashSymbols = new HashMap<>(source.getHashSymbols());\n            hashSymbols.keySet().retainAll(result.getOutputSymbols());\n             return new PlanWithProperties(result, hashSymbols);\n         }", "fixed": "             Map<HashComputation, Symbol> hashSymbols = new HashMap<>(source.getHashSymbols());\n            hashSymbols.values().retainAll(result.getOutputSymbols());\n             return new PlanWithProperties(result, hashSymbols);\n         }", "sourceBeforeFix": "hashSymbols.keySet()", "sourceAfterFix": "hashSymbols.values()"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform3fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform3(location, v);\r\n \t}\r\n \tpublic void glUniform3fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform3(location, toFloatBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform3i (int location, int x, int y, int z) {\r", "fixed": " \t}\r\n \tpublic void glUniform3fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform3fv(location, v);\r\n \t}\r\n \tpublic void glUniform3fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform3fv(location, toFloatBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform3i (int location, int x, int y, int z) {\r", "sourceBeforeFix": "GL20.glUniformMatrix3(location,transpose,value)", "sourceAfterFix": "GL20.glUniformMatrix3fv(location,transpose,value)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface HazelcastMultimapEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedHazelcastMultimapEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface HazelcastMultimapEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedHazelcastMultimapEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "544edb296479cbd05f35381b20a651e9d022e197", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         context.start();\n         for (int i = 0; i < 10; i++) {\n            getMockEndpoint(\"mock:\" + i).expectedMessageCount(1000);\n         }\n         ExecutorService executors = Executors.newFixedThreadPool(20);\n        for (int i = 0; i < 1000; i++) {\n             executors.execute(new Runnable() {\n                 public void run() {\n                     for (int i = 0; i < 10; i++) {", "fixed": "         context.start();\n         for (int i = 0; i < 10; i++) {\n            getMockEndpoint(\"mock:\" + i).expectedMessageCount(200);\n         }\n         ExecutorService executors = Executors.newFixedThreadPool(20);\n        for (int i = 0; i < 200; i++) {\n             executors.execute(new Runnable() {\n                 public void run() {\n                     for (int i = 0; i < 10; i++) {", "sourceBeforeFix": "getMockEndpoint(\"mock:\" + i).expectedMessageCount(1000)", "sourceAfterFix": "getMockEndpoint(\"mock:\" + i).expectedMessageCount(200)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": " import org.jboss.logging.Messages;\n /**\n * This module is using message IDs in the range 10900-10999. This file is using the subset 10975-10999 for domain\n* controller non-logger messages. See http:\n  * JBAS message id blocks.\n  * <p/>", "fixed": " import org.jboss.logging.Messages;\n /**\n * This module is using message IDs in the range 10800-10899. This file is using the subset 10830-10899 for domain\n* controller non-logger messages. See http:\n  * JBAS message id blocks.\n  * <p/>", "sourceBeforeFix": "id=15835", "sourceAfterFix": "id=10835"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "546f336e25b26d072f96e2cda139b885858ed5b0", "projectName": "checkstyle.checkstyle", "bugType": "Wrong Function Name", "problem": "      * @param timestamp the timestamp of the file\n      */\n     void put(String fileName, long timestamp) {\n        details.put(fileName, Long.toString(timestamp));\n     }\n     /**", "fixed": "      * @param timestamp the timestamp of the file\n      */\n     void put(String fileName, long timestamp) {\n        details.setProperty(fileName, Long.toString(timestamp));\n     }\n     /**", "sourceBeforeFix": "details.put(fileName,Long.toString(timestamp))", "sourceAfterFix": "details.setProperty(fileName,Long.toString(timestamp))"}
{"fixCommitSHA1": "6bb73b52e050c6fcb98478e632c7ed54df8c451e", "projectName": "spring-projects.spring-security-oauth", "bugType": "More Specific If", "problem": " \t\tform.add(\"code\", context.getAuthorizationCode());\n \t\tString redirectUri = resource.getPreEstablishedRedirectUri();\n\t\tif (redirectUri == null) {\n\t\t\tredirectUri = String.valueOf(context==null ? null : context.getPreservedState());\n \t\t} else {\n \t\t\tform.add(\"state\", String.valueOf(context.getPreservedState()));", "fixed": " \t\tform.add(\"code\", context.getAuthorizationCode());\n \t\tString redirectUri = resource.getPreEstablishedRedirectUri();\n\t\tif (context!=null && redirectUri == null) {\n\t\t\tredirectUri = String.valueOf(context.getPreservedState());\n \t\t} else {\n \t\t\tform.add(\"state\", String.valueOf(context.getPreservedState()));", "sourceBeforeFix": "redirectUri == null", "sourceAfterFix": "context != null && redirectUri == null"}
{"fixCommitSHA1": "83b9dd427535bce39be43a9e8224cdbc352d7427", "projectName": "square.okhttp", "bugType": "Change Modifier", "problem": "   final Hpack.Reader hpackReader;\n   \n  public Http2Reader(BufferedSource source, boolean client) {\n     this.source = source;\n     this.client = client;\n     this.continuation = new ContinuationSource(this.source);", "fixed": "   final Hpack.Reader hpackReader;\n   \n  Http2Reader(BufferedSource source, boolean client) {\n     this.source = source;\n     this.client = client;\n     this.continuation = new ContinuationSource(this.source);", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "c1301c436ddb98e943d087a35b5ae97aa8c1420c", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "   private GetStatusOptions() {\n     mCommonOptions = CommonOptions.defaults()\n        .setTtl(Configuration.getLong(PropertyKey.USER_FILE_LOAD_TTL))\n         .setTtlAction(Configuration.getEnum(PropertyKey.USER_FILE_LOAD_TTL_ACTION,\n             TtlAction.class));\n     mLoadMetadataType =", "fixed": "   private GetStatusOptions() {\n     mCommonOptions = CommonOptions.defaults()\n        .setTtl(Configuration.getMs(PropertyKey.USER_FILE_LOAD_TTL))\n         .setTtlAction(Configuration.getEnum(PropertyKey.USER_FILE_LOAD_TTL_ACTION,\n             TtlAction.class));\n     mLoadMetadataType =", "sourceBeforeFix": "Configuration.getLong(PropertyKey.USER_FILE_LOAD_TTL)", "sourceAfterFix": "Configuration.getMs(PropertyKey.USER_FILE_LOAD_TTL)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "           \"functions are set.\");\n   \n  private final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "           \"functions are set.\");\n   \n  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "9e756fefbb053926754108335e3ad78b586439ac", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "             public void configure() {\n                 WebsocketComponent websocketComponent = (WebsocketComponent) context.getComponent(\"websocket\");\n                 websocketComponent.setPort(port);\n                websocketComponent.setMaxThreads(11);\n                 websocketComponent.setMinThreads(1);\nfrom(\"websocket:", "fixed": "             public void configure() {\n                 WebsocketComponent websocketComponent = (WebsocketComponent) context.getComponent(\"websocket\");\n                 websocketComponent.setPort(port);\n                websocketComponent.setMaxThreads(20);\n                 websocketComponent.setMinThreads(1);\nfrom(\"websocket:", "sourceBeforeFix": "websocketComponent.setMaxThreads(11)", "sourceAfterFix": "websocketComponent.setMaxThreads(20)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e2ecd6fd07c9c2bb437463cca31a7f18e525675f", "projectName": "facebook.presto", "bugType": "Change Identifier Used", "problem": "         this.start = start;\n     }\n    protected abstract BlockBuilder getBlock();\n     private void checkReadablePosition(int position)\n     {", "fixed": "         this.start = start;\n     }\n    protected abstract Block getBlock();\n     private void checkReadablePosition(int position)\n     {", "sourceBeforeFix": "protected abstract BlockBuilder getBlock(); ", "sourceAfterFix": "protected abstract Block getBlock(); "}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface JCacheEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedJCacheEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface JCacheEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedJCacheEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  private final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "f40a8efd0788a6385a62ef5052f71f3e6b7db295", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t\tfinal float ty = target.y - y * dot;\r\n \t\tfinal float tz = target.z - z * dot;\r\n \t\tfinal float l2 = tx * tx + ty * ty + tz * tz;\r\n\t\tfinal float dl = (l2 == 0 || l2 == 1f) ? 1f : 1f / (float)Math.sqrt(l2);\r\n\t\treturn this.mul((float)Math.cos(theta)).add(tx * dl * st, ty * dl * st, tz * dl * st).nor();\r\n \t}\r\n \t\r", "fixed": " \t\tfinal float ty = target.y - y * dot;\r\n \t\tfinal float tz = target.z - z * dot;\r\n \t\tfinal float l2 = tx * tx + ty * ty + tz * tz;\r\n\t\tfinal float dl = st * ((l2 == 0 || l2 == 1f) ? 1f : 1f / (float)Math.sqrt(l2));\r\n\t\treturn this.mul((float)Math.cos(theta)).add(tx * dl, ty * dl, tz * dl).nor();\r\n \t}\r\n \t\r", "sourceBeforeFix": "y / vz", "sourceAfterFix": "z / vz"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15871, value = \"Unknown server %s\")\n     IllegalStateException unknownServer(ServerIdentity server);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10871, value = \"Unknown server %s\")\n     IllegalStateException unknownServer(ServerIdentity server);\n     /**", "sourceBeforeFix": "id=15839", "sourceAfterFix": "id=10839"}
{"fixCommitSHA1": "76cdeff309003cab769ba0005bffeb711383084d", "projectName": "chrisbanes.Android-PullToRefresh", "bugType": "Change Identifier Used", "problem": " \t\t}\n \t\tif (doScroll) {\n\t\t\tsmoothScrollTo(mode == MODE_PULL_DOWN_TO_REFRESH ? -headerHeight : headerHeight);\n \t\t}\n \t}", "fixed": " \t\t}\n \t\tif (doScroll) {\n\t\t\tsmoothScrollTo(currentMode == MODE_PULL_DOWN_TO_REFRESH ? -headerHeight : headerHeight);\n \t\t}\n \t}", "sourceBeforeFix": "mode == MODE_PULL_DOWN_TO_REFRESH", "sourceAfterFix": "currentMode == MODE_PULL_DOWN_TO_REFRESH"}
{"fixCommitSHA1": "fcea9dfeb6b2e12cb04602baac67b3a1c3cb58c9", "projectName": "wildfly.wildfly", "bugType": "Same Function More Args", "problem": "     SimpleAttributeDefinition VALUE = SimpleAttributeDefinitionBuilder.create(\"value\", ModelType.STRING).build();\n    SimpleAttributeDefinition NEW_LEVEL = SimpleAttributeDefinitionBuilder.create(\"new-level\", ModelType.STRING).\n             setCorrector(CaseParameterCorrector.TO_UPPER).\n             setValidator(new LogLevelValidator(true)).\n             build();", "fixed": "     SimpleAttributeDefinition VALUE = SimpleAttributeDefinitionBuilder.create(\"value\", ModelType.STRING).build();\n    SimpleAttributeDefinition NEW_LEVEL = SimpleAttributeDefinitionBuilder.create(\"new-level\", ModelType.STRING, true).\n             setCorrector(CaseParameterCorrector.TO_UPPER).\n             setValidator(new LogLevelValidator(true)).\n             build();", "sourceBeforeFix": "SimpleAttributeDefinitionBuilder.create(\"min-level\",ModelType.STRING)", "sourceAfterFix": "SimpleAttributeDefinitionBuilder.create(\"min-level\",ModelType.STRING,true)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should delete global properties from database\n \t */\n \t@Authorized(PrivilegeConstants.PURGE_GLOBAL_PROPERTIES)\n\tpublic void purgeGlobalProperties(List<GlobalProperty> globalProperties) throws APIException;\n \t/**\n \t * Save the given global property to the database. If the global property already exists,", "fixed": " \t * @should delete global properties from database\n \t */\n \t@Authorized(PrivilegeConstants.PURGE_GLOBAL_PROPERTIES)\n\tpublic void purgeGlobalProperties(List<GlobalProperty> globalProperties);\n \t/**\n \t * Save the given global property to the database. If the global property already exists,", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface JooqEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedJooqEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface JooqEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedJooqEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "3deba86fbc98387501b2076b82c35ac78a56de21", "projectName": "square.javapoet", "bugType": "Change Identifier Used", "problem": "   }\n   @Test public void eolComment() throws IOException {\n    javaWriter.emitSingleLineCOmment(\"foo\");\nassertCode(\"\n   }", "fixed": "   }\n   @Test public void eolComment() throws IOException {\n    javaWriter.emitSingleLineComment(\"foo\");\nassertCode(\"\n   }", "sourceBeforeFix": "javaWriter.emitSingleLineCOmment(\"foo\")", "sourceAfterFix": "javaWriter.emitSingleLineComment(\"foo\")"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should fail for an invalid object\n \t * @should throw throw APIException if the input is null\n \t */\n\tpublic void validate(Object object, Errors errors) throws APIException;\n \t/**\n \t * Returns a list of locales used by the user when searching.", "fixed": " \t * @should fail for an invalid object\n \t * @should throw throw APIException if the input is null\n \t */\n\tpublic void validate(Object object, Errors errors);\n \t/**\n \t * Returns a list of locales used by the user when searching.", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "0eea03987839ba88fac6015355a2b067d6cfe436", "projectName": "Alluxio.alluxio", "bugType": "Change Modifier", "problem": " @RunWith(PowerMockRunner.class)\n @PrepareForTest(Permission.class)\npublic class MkdirsOptionsTest {\n   ", "fixed": " @RunWith(PowerMockRunner.class)\n @PrepareForTest(Permission.class)\npublic final class MkdirsOptionsTest {\n   ", "sourceBeforeFix": "1", "sourceAfterFix": "17"}
{"fixCommitSHA1": "ea36259d22c518ae70f5eb951123c74351be48b6", "projectName": "hazelcast.hazelcast", "bugType": "Change Numeric Literal", "problem": "         final String newValue = \"NEW_VALUE\";\n         map.put(key, oldValue);\n        map.lock(key, 4, TimeUnit.SECONDS);\n         final CountDownLatch tryPutReturned = new CountDownLatch(1);\n         new Thread() {\n             public void run() {\n                map.tryPut(key, newValue, 8, TimeUnit.SECONDS);\n                 tryPutReturned.countDown();\n             }\n         }.start();", "fixed": "         final String newValue = \"NEW_VALUE\";\n         map.put(key, oldValue);\n        map.lock(key, 1, TimeUnit.SECONDS);\n         final CountDownLatch tryPutReturned = new CountDownLatch(1);\n         new Thread() {\n             public void run() {\n                map.tryPut(key, newValue, 60, TimeUnit.SECONDS);\n                 tryPutReturned.countDown();\n             }\n         }.start();", "sourceBeforeFix": "map.tryPut(key,value,8,TimeUnit.SECONDS)", "sourceAfterFix": "map.tryPut(key,value,60,TimeUnit.SECONDS)"}
{"fixCommitSHA1": "46fa8090954480eecdeb6e7367f0e30655853f42", "projectName": "checkstyle.checkstyle", "bugType": "Same Function More Args", "problem": "      * @return canonical type's name\n      */\n     private static String getCanonicalName(DetailAST type) {\n        final StringBuilder canonicalNameBuilder = new StringBuilder();\n         DetailAST toVisit = type.getFirstChild();\n         while (toVisit != null) {\n             toVisit = getNextSubTreeNode(toVisit, type);", "fixed": "      * @return canonical type's name\n      */\n     private static String getCanonicalName(DetailAST type) {\n        final StringBuilder canonicalNameBuilder = new StringBuilder(256);\n         DetailAST toVisit = type.getFirstChild();\n         while (toVisit != null) {\n             toVisit = getNextSubTreeNode(toVisit, type);", "sourceBeforeFix": "new StringBuilder()", "sourceAfterFix": "new StringBuilder(256)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n  private final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform1iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform1(location, v);\r\n \t}\r\n \t@Override\r\n \tpublic void glUniform1iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform1(location, toIntBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform2f (int location, float x, float y) {\r", "fixed": " \t}\r\n \tpublic void glUniform1iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform1iv(location, v);\r\n \t}\r\n \t@Override\r\n \tpublic void glUniform1iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform1iv(location, toIntBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform2f (int location, float x, float y) {\r", "sourceBeforeFix": "GL11.glGetFloat(pname,params)", "sourceAfterFix": "GL11.glGetFloatv(pname,params)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "38eb6222bddaf49c3c9ae73ddef0cfe4ff5efa48", "projectName": "alibaba.dubbo", "bugType": "Change Numeric Literal", "problem": "     @Test\n     public void test_Decode_Error_Response_Object() throws IOException {\n        byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, 0x20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n         Person person = new Person();\n         byte[] request = getRequestBytes(person, header);", "fixed": "     @Test\n     public void test_Decode_Error_Response_Object() throws IOException {\n        byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, 0x02, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n         Person person = new Person();\n         byte[] request = getRequestBytes(person, header);", "sourceBeforeFix": "(byte)0xdf", "sourceAfterFix": "(byte)0xe2"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform2iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toIntBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform3f (int location, float x, float y, float z) {\r", "fixed": " \t}\r\n \tpublic void glUniform2iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform2iv(location, v);\r\n \t}\r\n \tpublic void glUniform2iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform2iv(location, toIntBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform3f (int location, float x, float y, float z) {\r", "sourceBeforeFix": "EXTFramebufferObject.glGetFramebufferAttachmentParameterEXT(target,attachment,pname,params)", "sourceAfterFix": "EXTFramebufferObject.glGetFramebufferAttachmentParameterivEXT(target,attachment,pname,params)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should return default value if property name does not exist\n \t * @should not fail with null default value\n \t */\n\tpublic String getGlobalProperty(String propertyName, String defaultValue) throws APIException;\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>", "fixed": " \t * @should return default value if property name does not exist\n \t * @should not fail with null default value\n \t */\n\tpublic String getGlobalProperty(String propertyName, String defaultValue);\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15848, value = \"Exception getting result from host %s: %s\")\n     String exceptionAwaitingResultFromHost(String name, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10848, value = \"Exception getting result from host %s: %s\")\n     String exceptionAwaitingResultFromHost(String name, String message);\n     /**", "sourceBeforeFix": "id=15857", "sourceAfterFix": "id=10857"}
{"fixCommitSHA1": "84340b3f05d39437b725f2f5510f44e862f98b19", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "                 }\n                exchange.addRequestHeader(HttpHeaders.AUTHORIZATION,\n                         \"OAuth \" + accessToken);\n             }\n         };", "fixed": "                 }\n                exchange.setRequestHeader(HttpHeaders.AUTHORIZATION,\n                         \"OAuth \" + accessToken);\n             }\n         };", "sourceBeforeFix": "exchange.addRequestHeader(HttpHeaders.AUTHORIZATION,\"OAuth \" + accessToken)", "sourceAfterFix": "exchange.setRequestHeader(HttpHeaders.AUTHORIZATION,\"OAuth \" + accessToken)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform1fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform1(location, v);\r\n \t}\r\n \tpublic void glUniform1fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform1(location, toFloatBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform1i (int location, int x) {\r", "fixed": " \t}\r\n \tpublic void glUniform1fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform1fv(location, v);\r\n \t}\r\n \tpublic void glUniform1fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform1fv(location, toFloatBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform1i (int location, int x) {\r", "sourceBeforeFix": "GL20.glUniformMatrix4(location,transpose,toFloatBuffer(value,offset,count << 4))", "sourceAfterFix": "GL20.glUniformMatrix4fv(location,transpose,toFloatBuffer(value,offset,count << 4))"}
{"fixCommitSHA1": "22d5241b5f75631e9cfda82a6912a2555eecb165", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "         if (channel == null) {\n             initializeChannel();\n             if (endpoint.isSynchronous()) {\n                LOG.info(\"Getting synchronous method stub from channel\");\n                 grpcStub = GrpcUtils.constructGrpcBlockingStub(configuration.getServicePackage(), configuration.getServiceName(), channel, endpoint.getCamelContext());\n             } else {\n                LOG.info(\"Getting asynchronous method stub from channel\");\n                 grpcStub = GrpcUtils.constructGrpcAsyncStub(configuration.getServicePackage(), configuration.getServiceName(), channel, endpoint.getCamelContext());\n             }\n         }", "fixed": "         if (channel == null) {\n             initializeChannel();\n             if (endpoint.isSynchronous()) {\n                LOG.debug(\"Getting synchronous method stub from channel\");\n                 grpcStub = GrpcUtils.constructGrpcBlockingStub(configuration.getServicePackage(), configuration.getServiceName(), channel, endpoint.getCamelContext());\n             } else {\n                LOG.debug(\"Getting asynchronous method stub from channel\");\n                 grpcStub = GrpcUtils.constructGrpcAsyncStub(configuration.getServicePackage(), configuration.getServiceName(), channel, endpoint.getCamelContext());\n             }\n         }", "sourceBeforeFix": "LOG.info(\"Getting synchronous method stub from channel\")", "sourceAfterFix": "LOG.debug(\"Getting synchronous method stub from channel\")"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface IgniteEventsEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default AdvancedIgniteEventsEndpointBuilder advanced() {", "fixed": "     \n    public interface IgniteEventsEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default AdvancedIgniteEventsEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "2ccd6714a1039f58ba171438af36ffada86343e1", "projectName": "Bukkit.Bukkit", "bugType": "Change Caller in Function Call", "problem": "             final double delta = Math.sqrt(deltaX * deltaX + deltaY * deltaY + deltaZ * deltaZ) / 2.0D;\n             if (delta > 0.0D) {\n                soundLocation.add(deltaX / delta, deltaY / delta, deltaZ / delta);\n             }\n            player.playSound(soundLocation, soundArg, (float) minimumVolume, (float) pitch);\n         } else {\n             player.playSound(soundLocation, soundArg, (float) volume, (float) pitch);\n         }", "fixed": "             final double delta = Math.sqrt(deltaX * deltaX + deltaY * deltaY + deltaZ * deltaZ) / 2.0D;\n             if (delta > 0.0D) {\n                location.add(deltaX / delta, deltaY / delta, deltaZ / delta);\n             }\n            player.playSound(location, soundArg, (float) minimumVolume, (float) pitch);\n         } else {\n             player.playSound(soundLocation, soundArg, (float) volume, (float) pitch);\n         }", "sourceBeforeFix": "soundLocation.add(deltaX / delta,deltaY / delta,deltaZ / delta)", "sourceAfterFix": "location.add(deltaX / delta,deltaY / delta,deltaZ / delta)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15847, value = \"Interrupted waiting for result from host %s\")\n     String interruptedAwaitingResultFromHost(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10847, value = \"Interrupted waiting for result from host %s\")\n     String interruptedAwaitingResultFromHost(String name);\n     /**", "sourceBeforeFix": "id=15830", "sourceAfterFix": "id=10830"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedCinderEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default CinderEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedCinderEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default CinderEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface StreamEndpointBuilder\n             extends\n                 StreamEndpointConsumerBuilder, StreamEndpointProducerBuilder {\n         default AdvancedStreamEndpointBuilder advanced() {", "fixed": "     \n    public interface StreamEndpointBuilder\n             extends\n                 StreamEndpointConsumerBuilder, StreamEndpointProducerBuilder {\n         default AdvancedStreamEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "9467bef8ea9a62658b32dd43a76f4f98087d1986", "projectName": "apache.hadoop", "bugType": "Change Unary Operator\t", "problem": "             \"--attr\", \"foo=bar\",\n             \"--attr\", \"foo=glarch\"};\n     rc = ks.run(args4);\n    assertEquals(-1, rc);\n     \n     deleteKey(ks, \"keyattr1\");", "fixed": "             \"--attr\", \"foo=bar\",\n             \"--attr\", \"foo=glarch\"};\n     rc = ks.run(args4);\n    assertEquals(1, rc);\n     \n     deleteKey(ks, \"keyattr1\");", "sourceBeforeFix": "-1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "d4468b05034b3c4166195394e88eed6633bec842", "projectName": "jersey.jersey", "bugType": "Change Caller in Function Call", "problem": " /*\n  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n  *\n * Copyright (c) 2012-2015 Oracle and/or its affiliates. All rights reserved.\n  *\n  * The contents of this file are subject to the terms of either the GNU\n  * General Public License Version 2 only (\"GPL\") or the Common Development", "fixed": " /*\n  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n  *\n * Copyright (c) 2012-2016 Oracle and/or its affiliates. All rights reserved.\n  *\n  * The contents of this file are subject to the terms of either the GNU\n  * General Public License Version 2 only (\"GPL\") or the Common Development", "sourceBeforeFix": "warnings.append(LocalizationMessages.HINT_MSG(error.getMessage()))", "sourceAfterFix": "hints.append(LocalizationMessages.HINT_MSG(error.getMessage()))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "bbfc2b18a1b5ed3968212db115410ee515dca460", "projectName": "jersey.jersey", "bugType": "Change Numeric Literal", "problem": "     @Override\n     protected void configureClient(ClientConfig clientConfig) {\n        clientConfig.property(ClientProperties.READ_TIMEOUT, 1000);\n     }\n     @Test", "fixed": "     @Override\n     protected void configureClient(ClientConfig clientConfig) {\n        clientConfig.property(ClientProperties.READ_TIMEOUT, 2000);\n     }\n     @Test", "sourceBeforeFix": "clientConfig.property(ClientProperties.READ_TIMEOUT,1000)", "sourceAfterFix": "clientConfig.property(ClientProperties.READ_TIMEOUT,2000)"}
{"fixCommitSHA1": "95aa9c0ad64a2feccfc97ccb2c1194e9ac83872d", "projectName": "wildfly.wildfly", "bugType": "Same Function More Args", "problem": "         configuration.getCreateDependencies().add(new DependencyConfigurator<StatefulSessionComponentCreateService>() {\n             @Override\n             public void configureDependency(ServiceBuilder<?> builder, StatefulSessionComponentCreateService service) {\n                builder.addDependency(RegistryInstallerService.SERVICE_NAME);\n                 builder.addDependency(DependencyType.OPTIONAL, EJBRemoteConnectorService.SERVICE_NAME);\n             }\n         });", "fixed": "         configuration.getCreateDependencies().add(new DependencyConfigurator<StatefulSessionComponentCreateService>() {\n             @Override\n             public void configureDependency(ServiceBuilder<?> builder, StatefulSessionComponentCreateService service) {\n                builder.addDependency(DependencyType.OPTIONAL, RegistryInstallerService.SERVICE_NAME);\n                 builder.addDependency(DependencyType.OPTIONAL, EJBRemoteConnectorService.SERVICE_NAME);\n             }\n         });", "sourceBeforeFix": "builder.addDependency(RegistryInstallerService.SERVICE_NAME)", "sourceAfterFix": "builder.addDependency(DependencyType.OPTIONAL,RegistryInstallerService.SERVICE_NAME)"}
{"fixCommitSHA1": "261e9a2bab6ff12d200a5445425b7fbf3258529b", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "     \n     private static final long serialVersionUID = -8493693409423365387L;\n     \n    protected TreeTableCellRenderer tree;\n     private JTextArea editor;\n     private List<Integer> lines2position;", "fixed": "     \n     private static final long serialVersionUID = -8493693409423365387L;\n     \n    protected final TreeTableCellRenderer tree;\n     private JTextArea editor;\n     private List<Integer> lines2position;", "sourceBeforeFix": "4", "sourceAfterFix": "20"}
{"fixCommitSHA1": "6bae902bd35ed4f57e7a5d612b7ad9b72f4559bc", "projectName": "google.closure-compiler", "bugType": "Wrong Function Name", "problem": "     Node node1 = Node.newString(Token.NAME, \"f\");\n     node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n     Node node2 = Node.newString(Token.NAME, \"f\");\n    assertFalse(node1.checkTreeTypeAwareEqualsSilent(node2));\n   }\n   public void testVarArgs1() {", "fixed": "     Node node1 = Node.newString(Token.NAME, \"f\");\n     node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n     Node node2 = Node.newString(Token.NAME, \"f\");\n    assertFalse(node1.isEquivalentToTyped(node2));\n   }\n   public void testVarArgs1() {", "sourceBeforeFix": "node1.checkTreeTypeAwareEqualsSilent(node2)", "sourceAfterFix": "node1.isEquivalentToTyped(node2)"}
{"fixCommitSHA1": "dbc0ca8d1cb03f2da2c8fc0062e5d4b681fef11a", "projectName": "hazelcast.hazelcast", "bugType": "Same Function Less Args", "problem": "         final NormalResponse normalResponse = new NormalResponse(null, 1, 0, false);\n         Data data = serializationService.toData(normalResponse);\n        final Packet packet = new Packet(data, 0, serializationService.getPortableContext());\n         packet.setHeader(Packet.HEADER_RESPONSE);\n         packet.setHeader(Packet.HEADER_OP);\n         executor.execute(packet);", "fixed": "         final NormalResponse normalResponse = new NormalResponse(null, 1, 0, false);\n         Data data = serializationService.toData(normalResponse);\n        final Packet packet = new Packet(data, 0);\n         packet.setHeader(Packet.HEADER_RESPONSE);\n         packet.setHeader(Packet.HEADER_OP);\n         executor.execute(packet);", "sourceBeforeFix": "new Packet(data,operation.getPartitionId(),serializationService.getPortableContext())", "sourceAfterFix": "new Packet(data,operation.getPartitionId())"}
{"fixCommitSHA1": "aebe2ca06a3fb220c7211b174c85250f36afae25", "projectName": "wildfly.wildfly", "bugType": "Same Function Swap Args", "problem": "             Assert.fail(\"Test should fail, user shouldn't be allowed to invoke that method\");\n         } catch (WebServiceException e) {\n            Assert.assertEquals(e.getCause().getMessage(), getNotAllowedExceptionMessage(\"helloForNone\"));\n         }\n     }", "fixed": "             Assert.fail(\"Test should fail, user shouldn't be allowed to invoke that method\");\n         } catch (WebServiceException e) {\n            Assert.assertEquals(getNotAllowedExceptionMessage(\"helloForNone\"), e.getCause().getMessage());\n         }\n     }", "sourceBeforeFix": "Assert.assertEquals(e.getCause().getMessage(),getNotAllowedExceptionMessage(\"helloForNone\"))", "sourceAfterFix": "Assert.assertEquals(getNotAllowedExceptionMessage(\"helloForNone\"),e.getCause().getMessage())"}
{"fixCommitSHA1": "8f24815a4a794c1d01bc65696ddc4628a82be322", "projectName": "brettwooldridge.HikariCP", "bugType": "Change Numeric Literal", "problem": "          TestElf.setSlf4jTargetStream(LeakTask.class, ps);\n          Connection connection = ds.getConnection();\n         PoolUtilities.quietlySleep(TimeUnit.SECONDS.toMillis(4));\n          ps.close();\n          connection.close();\n          String s = new String(baos.toByteArray());", "fixed": "          TestElf.setSlf4jTargetStream(LeakTask.class, ps);\n          Connection connection = ds.getConnection();\n         PoolUtilities.quietlySleep(TimeUnit.SECONDS.toMillis(5));\n          ps.close();\n          connection.close();\n          String s = new String(baos.toByteArray());", "sourceBeforeFix": "TimeUnit.SECONDS.toMillis(4)", "sourceAfterFix": "TimeUnit.SECONDS.toMillis(5)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedTikaEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default TikaEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedTikaEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default TikaEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "7d5e825abd68a4ffcb86865149b917edf76a47b6", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "     public static DetailAST annotatingWhat(DetailAST ast)\n     {\n         if (ast == null) {\n            throw new NullPointerException(\"the ast is null\");\n         }\n         if (ast.getType() != TokenTypes.ANNOTATION) {", "fixed": "     public static DetailAST annotatingWhat(DetailAST ast)\n     {\n         if (ast == null) {\n            throw new IllegalArgumentException(\"the ast is null\");\n         }\n         if (ast.getType() != TokenTypes.ANNOTATION) {", "sourceBeforeFix": "new NullPointerException(\"the ast is null\")", "sourceAfterFix": "new IllegalArgumentException(\"the ast is null\")"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface WebsocketEndpointBuilder\n             extends\n                 WebsocketEndpointConsumerBuilder, WebsocketEndpointProducerBuilder {\n         default AdvancedWebsocketEndpointBuilder advanced() {", "fixed": "     \n    public interface WebsocketEndpointBuilder\n             extends\n                 WebsocketEndpointConsumerBuilder, WebsocketEndpointProducerBuilder {\n         default AdvancedWebsocketEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  private final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "43b2fa49ca351c05c453c8cd0eec32ce6277c830", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " public class Label extends Widget {\r\n \tprivate LabelStyle style;\r\n \tprivate final TextBounds bounds = new TextBounds();\r\n\tprivate String text;\r\n \tprivate BitmapFontCache cache;\r\n \tprivate float prefWidth, prefHeight;\r\n \tprivate int labelAlign = Align.LEFT;\r", "fixed": " public class Label extends Widget {\r\n \tprivate LabelStyle style;\r\n \tprivate final TextBounds bounds = new TextBounds();\r\n\tprivate CharSequence text;\r\n \tprivate BitmapFontCache cache;\r\n \tprivate float prefWidth, prefHeight;\r\n \tprivate int labelAlign = Align.LEFT;\r", "sourceBeforeFix": "String text", "sourceAfterFix": "CharSequence text"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   }\n   \n  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "82a43727c308f2401468d4306c1ba2b5095f54b5", "projectName": "netty.netty", "bugType": "Change Boolean Literal", "problem": "     private static void testIsBufferCopyNeededForWrite(ByteBufAllocator alloc) {\n         ByteBuf byteBuf = alloc.directBuffer();\n         assertFalse(isBufferCopyNeededForWrite(byteBuf));\n        assertTrue(isBufferCopyNeededForWrite(byteBuf.asReadOnly()));\n         assertTrue(byteBuf.release());\n         byteBuf = alloc.heapBuffer();", "fixed": "     private static void testIsBufferCopyNeededForWrite(ByteBufAllocator alloc) {\n         ByteBuf byteBuf = alloc.directBuffer();\n         assertFalse(isBufferCopyNeededForWrite(byteBuf));\n        assertFalse(isBufferCopyNeededForWrite(byteBuf.asReadOnly()));\n         assertTrue(byteBuf.release());\n         byteBuf = alloc.heapBuffer();", "sourceBeforeFix": "assertCompositeByteBufIsBufferCopyNeededForWrite(alloc,2,0,false)", "sourceAfterFix": "assertCompositeByteBufIsBufferCopyNeededForWrite(alloc,2,0,true)"}
{"fixCommitSHA1": "5b13fe70c25812157a1e4432135eb9639e72bc6a", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t\tfinal Sink result = new Sink(\"result.json\").withInputs(join);\n \t\texpectedPlan.setSinks(result);\n\t\tassertEquals(expectedPlan, actualPlan);\n \t}\n \t@Test", "fixed": " \t\tfinal Sink result = new Sink(\"result.json\").withInputs(join);\n \t\texpectedPlan.setSinks(result);\n\t\tassertPlanEquals(expectedPlan, actualPlan);\n \t}\n \t@Test", "sourceBeforeFix": "assertEquals(expectedPlan,actualPlan)", "sourceAfterFix": "assertPlanEquals(expectedPlan,actualPlan)"}
{"fixCommitSHA1": "9c9dc0b7973cadf42086027afc7b47387ebed73f", "projectName": "google.auto", "bugType": "Change Identifier Used", "problem": "   @Override\n   public synchronized void init(ProcessingEnvironment processingEnv) {\n     super.init(processingEnv);\n    Dagger_AutoFactoryProcessorComponent.builder()\n         .processorModule(new ProcessorModule(processingEnv))\n         .build()\n         .injectProcessor(this);", "fixed": "   @Override\n   public synchronized void init(ProcessingEnvironment processingEnv) {\n     super.init(processingEnv);\n    DaggerAutoFactoryProcessorComponent.builder()\n         .processorModule(new ProcessorModule(processingEnv))\n         .build()\n         .injectProcessor(this);", "sourceBeforeFix": "Dagger_AutoFactoryProcessorComponent.builder()", "sourceAfterFix": "DaggerAutoFactoryProcessorComponent.builder()"}
{"fixCommitSHA1": "f8c20919f9c2e18e48142c2712e34298f98b983e", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \tpublic void restartWithKeepAlive() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tthis.container = factory\n\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n \t\tMultiThreadedHttpConnectionManager connectionManager = new MultiThreadedHttpConnectionManager();\n \t\tHttpClient client = new HttpClient(connectionManager);", "fixed": " \tpublic void restartWithKeepAlive() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tthis.container = factory\n\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \t\tMultiThreadedHttpConnectionManager connectionManager = new MultiThreadedHttpConnectionManager();\n \t\tHttpClient client = new HttpClient(connectionManager);", "sourceBeforeFix": "factory.getEmbdeddedServletContainer(initializers[0],initializers[1])", "sourceAfterFix": "factory.getEmbeddedServletContainer(initializers[0],initializers[1])"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n            statistics.addRemoveTimeNano(System.nanoTime() - start);\n         }\n         return result;\n     }", "fixed": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n            statistics.addRemoveTimeNanos(System.nanoTime() - start);\n         }\n         return result;\n     }", "sourceBeforeFix": "statistics.addGetTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addGetTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "5b13fe70c25812157a1e4432135eb9639e72bc6a", "projectName": "apache.flink", "bugType": "Wrong Function Name", "problem": " \t\tfinal Sink output = new Sink(\"output.json\").withInputs(selection);\n \t\texpectedPlan.setSinks(output);\n\t\tassertEquals(expectedPlan, actualPlan);\n \t}\n \t@Test", "fixed": " \t\tfinal Sink output = new Sink(\"output.json\").withInputs(selection);\n \t\texpectedPlan.setSinks(output);\n\t\tassertPlanEquals(expectedPlan, actualPlan);\n \t}\n \t@Test", "sourceBeforeFix": "assertEquals(expectedPlan,actualPlan)", "sourceAfterFix": "assertPlanEquals(expectedPlan,actualPlan)"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_kr_3() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub14405\uc6d46\uc77c\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_kr_3() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub14405\uc6d46\uc77c\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "d910b3d997e1c40528aab2212fe356a8598bb738", "projectName": "clojure.clojure", "bugType": "Change Identifier Used", "problem": " \telse {\n \t\tClass c = coll.getClass();\n \t\tClass sc = c.getSuperclass();\n\t\tthrow new IllegalArgumentException(\"Don't know how to create ISeq from: \" + c.getSimpleName());\n \t}\n }", "fixed": " \telse {\n \t\tClass c = coll.getClass();\n \t\tClass sc = c.getSuperclass();\n\t\tthrow new IllegalArgumentException(\"Don't know how to create ISeq from: \" + c.getName());\n \t}\n }", "sourceBeforeFix": "c.getSimpleName()", "sourceAfterFix": "c.getName()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "a421ca3133ddf727a147e87455a5511444d8d4bb", "projectName": "google.auto", "bugType": "Change Identifier Used", "problem": "     ImmutableListMultimap.Builder<String, FactoryMethodDescriptor> indexedMethods =\n         ImmutableListMultimap.builder();\n    ImmutableSet.Builder<ImplemetationMethodDescriptor> implemetationMethodDescriptors =\n         ImmutableSet.builder();\n     for (Element element : roundEnv.getElementsAnnotatedWith(AutoFactory.class)) {\n       Optional<AutoFactoryDeclaration> declaration = declarationFactory.createIfValid(element);", "fixed": "     ImmutableListMultimap.Builder<String, FactoryMethodDescriptor> indexedMethods =\n         ImmutableListMultimap.builder();\n    ImmutableSet.Builder<ImplementationMethodDescriptor> implementationMethodDescriptors =\n         ImmutableSet.builder();\n     for (Element element : roundEnv.getElementsAnnotatedWith(AutoFactory.class)) {\n       Optional<AutoFactoryDeclaration> declaration = declarationFactory.createIfValid(element);", "sourceBeforeFix": "implemetationMethodDescriptors.build()", "sourceAfterFix": "implementationMethodDescriptors.build()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15833, value = \"%s is missing %s: %s\")\n     String requiredChildIsMissing(String parent, String child, String parentSpec);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10833, value = \"%s is missing %s: %s\")\n     String requiredChildIsMissing(String parent, String child, String parentSpec);\n     /**", "sourceBeforeFix": "id=15867", "sourceAfterFix": "id=10867"}
{"fixCommitSHA1": "7504963a65930f0b3332774f8a6d0db70c94fa12", "projectName": "Alluxio.alluxio", "bugType": "Change Modifier", "problem": "     LOG.error(\"TachyonClient accessLocalFile(\" + fileId + \") failed\");\n   }\n  public void addCheckpoint(int fileId) \n       throws FileDoesNotExistException, SuspectedFileSizeException, FailedToCheckpointException {\n     connectAndGetLocalWorker();\n     if (!mConnected) {", "fixed": "     LOG.error(\"TachyonClient accessLocalFile(\" + fileId + \") failed\");\n   }\n  public synchronized void addCheckpoint(int fileId) \n       throws FileDoesNotExistException, SuspectedFileSizeException, FailedToCheckpointException {\n     connectAndGetLocalWorker();\n     if (!mConnected) {", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "fa5635c39e3000406103657977b98efa79bd4512", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      * {@inheritDoc}\n      */\n     public List<Trends> getWeeklyTrends(Date date, boolean excludeHashTags) throws TwitterException {\n        return TrendsJSONImpl.createTrendsList(http.get(conf.getSearchBaseURL()\n                 + \"trends/weekly.json?date=\" + toDateStr(date)\n                 + (excludeHashTags ? \"&exclude=hashtags\" : \"\")));\n     }", "fixed": "      * {@inheritDoc}\n      */\n     public List<Trends> getWeeklyTrends(Date date, boolean excludeHashTags) throws TwitterException {\n        return TrendsJSONImpl.createTrendsList(http.get(conf.getRestBaseURL()\n                 + \"trends/weekly.json?date=\" + toDateStr(date)\n                 + (excludeHashTags ? \"&exclude=hashtags\" : \"\")));\n     }", "sourceBeforeFix": "conf.getSearchBaseURL()", "sourceAfterFix": "conf.getRestBaseURL()"}
{"fixCommitSHA1": "64dff91895f9df55fe3a07217a333efa4d37d92a", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "     try {\n       jarFile = new JarInputStream(new FileInputStream(jarFileName));\n     } catch (IOException ioEx) {\n      LOG.error(\"Failed to look for classes in \" + jarFileName + \": \" + ioEx);\n       throw ioEx;\n     }", "fixed": "     try {\n       jarFile = new JarInputStream(new FileInputStream(jarFileName));\n     } catch (IOException ioEx) {\n      LOG.warn(\"Failed to look for classes in \" + jarFileName + \": \" + ioEx);\n       throw ioEx;\n     }", "sourceBeforeFix": "LOG.error(\"Ignoring duplicate class \" + className)", "sourceAfterFix": "LOG.warn(\"Ignoring duplicate class \" + className)"}
{"fixCommitSHA1": "a3b9f6f1ebb21dd528effcceba2ac207f40b15e8", "projectName": "alibaba.canal", "bugType": "More Specific If", "problem": "     }\n     public static String unescapeName(String name) {\n        if (name.length() > 2) {\n             char c0 = name.charAt(0);\n             char x0 = name.charAt(name.length() - 1);\n             if ((c0 == '\"' && x0 == '\"') || (c0 == '`' && x0 == '`')) {", "fixed": "     }\n     public static String unescapeName(String name) {\n        if (name != null && name.length() > 2) {\n             char c0 = name.charAt(0);\n             char x0 = name.charAt(name.length() - 1);\n             if ((c0 == '\"' && x0 == '\"') || (c0 == '`' && x0 == '`')) {", "sourceBeforeFix": "name.length() > 2", "sourceAfterFix": "name != null && name.length() > 2"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15849, value = \"Operation %s for address %s can only be handled by the \" +\n             \"master Domain Controller; this host is not the master Domain Controller\")\n     String masterDomainControllerOnlyOperation(String operation, PathAddress address);", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10849, value = \"Operation %s for address %s can only be handled by the \" +\n             \"master Domain Controller; this host is not the master Domain Controller\")\n     String masterDomainControllerOnlyOperation(String operation, PathAddress address);", "sourceBeforeFix": "id=15845", "sourceAfterFix": "id=10845"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15862, value = \"Invalid '%s' value: %d, the maximum index is %d\")\n     String invalidValue(String name, int value, int maxIndex);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10862, value = \"Invalid '%s' value: %d, the maximum index is %d\")\n     String invalidValue(String name, int value, int maxIndex);\n     /**", "sourceBeforeFix": "id=15839", "sourceAfterFix": "id=10839"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<Status> getHomeTimeline() throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/home_timeline.json\", true));\n     }", "fixed": "      */\n     public ResponseList<Status> getHomeTimeline() throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/home_timeline.json\", true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweets/\" + statusId+ \".json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweets/\" + statusId+ \".json\",true))"}
{"fixCommitSHA1": "d2b19965df52e66385a2d7146887a44cea50330a", "projectName": "google.closure-compiler", "bugType": "Wrong Function Name", "problem": "   \n   ControlFlowGraph<Node> computeCFG() {\n    logger.info(\"Computing Control Flow Graph\");\n     Tracer tracer = newTracer(\"computeCFG\");\n     ControlFlowAnalysis cfa = new ControlFlowAnalysis(this, true, false);\n     process(cfa);", "fixed": "   \n   ControlFlowGraph<Node> computeCFG() {\n    logger.fine(\"Computing Control Flow Graph\");\n     Tracer tracer = newTracer(\"computeCFG\");\n     ControlFlowAnalysis cfa = new ControlFlowAnalysis(this, true, false);\n     process(cfa);", "sourceBeforeFix": "logger.info(\"Creating extern file for exports\")", "sourceAfterFix": "logger.fine(\"Creating extern file for exports\")"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should set uuid on implementation id global property\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)\n\tpublic void setImplementationId(ImplementationId implementationId) throws APIException;\n \t/**\n \t * Gets the list of locales which the administrator has allowed for use on the system. This is", "fixed": " \t * @should set uuid on implementation id global property\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)\n\tpublic void setImplementationId(ImplementationId implementationId);\n \t/**\n \t * Gets the list of locales which the administrator has allowed for use on the system. This is", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "9467bef8ea9a62658b32dd43a76f4f98087d1986", "projectName": "apache.hadoop", "bugType": "Change Unary Operator\t", "problem": "             \"--attr\", \"foo=bar\",\n             \"--attr\", \"foo=glarch\"};\n     rc = ks.run(args4);\n    assertEquals(-1, rc);\n     \n     deleteKey(ks, \"keyattr1\");", "fixed": "             \"--attr\", \"foo=bar\",\n             \"--attr\", \"foo=glarch\"};\n     rc = ks.run(args4);\n    assertEquals(1, rc);\n     \n     deleteKey(ks, \"keyattr1\");", "sourceBeforeFix": "-1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "0ffdc3246d1bd202e6cef4b486ffb4e9257b0311", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         if (target == this) {\n             task.run();\n         } else {\n            target.addTask(task);\n         }\n     }", "fixed": "         if (target == this) {\n             task.run();\n         } else {\n            target.addTaskAndWakeup(task);\n         }\n     }", "sourceBeforeFix": "target.addTask(task)", "sourceAfterFix": "target.addTaskAndWakeup(task)"}
{"fixCommitSHA1": "daba0256b7cf360824aebb3ff176d5937c862e46", "projectName": "openmrs.openmrs-core", "bugType": "Change Numeric Literal", "problem": " \t\texecuteDataSet(ADMIN_INITIAL_DATA_XML);\n \t\tAdministrationService as = Context.getAdministrationService();\n\t\tAssert.assertEquals(20, as.getAllGlobalProperties().size());\n \t\tas.purgeGlobalProperty(as.getGlobalPropertyObject(\"a_valid_gp_key\"));\n\t\tAssert.assertEquals(19, as.getAllGlobalProperties().size());\n \t}\n \t/**", "fixed": " \t\texecuteDataSet(ADMIN_INITIAL_DATA_XML);\n \t\tAdministrationService as = Context.getAdministrationService();\n\t\tAssert.assertEquals(21, as.getAllGlobalProperties().size());\n \t\tas.purgeGlobalProperty(as.getGlobalPropertyObject(\"a_valid_gp_key\"));\n\t\tAssert.assertEquals(20, as.getAllGlobalProperties().size());\n \t}\n \t/**", "sourceBeforeFix": "Assert.assertEquals(20,Context.getAdministrationService().getAllGlobalProperties().size())", "sourceAfterFix": "Assert.assertEquals(21,Context.getAdministrationService().getAllGlobalProperties().size())"}
{"fixCommitSHA1": "4665dcf9ab41c3c61cd42aad296ebfe518bfa003", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\n \tpublic void glPolygonOffset (float factor, float units) {\n\t\tGL.glPolygonOffsetEXT(factor, units);\n \t}\n \tpublic void glReadPixels (int x, int y, int width, int height, int format, int type, Buffer pixels) {", "fixed": " \t}\n \tpublic void glPolygonOffset (float factor, float units) {\n\t\tGL.glPolygonOffset(factor, units);\n \t}\n \tpublic void glReadPixels (int x, int y, int width, int height, int format, int type, Buffer pixels) {", "sourceBeforeFix": "GL.glPolygonOffsetEXT(factor,units)", "sourceAfterFix": "GL.glPolygonOffset(factor,units)"}
{"fixCommitSHA1": "55ed50c4975cf694828d46ee9ca32ce72a9ef913", "projectName": "clojure.clojure", "bugType": "Change Identifier Used", "problem": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 11:\r\n\t\t\treturn invoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "fixed": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 11:\r\n\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "sourceBeforeFix": "invoke(args)", "sourceAfterFix": "doInvoke(args)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "0682e8dd41045e3375b61d3d76f6e6991e98c869", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "             }\n         }\n         if (simple.getToReceivedDate() != null) {\n            String s = simple.getFromSentDate();\n             if (s.startsWith(\"now\")) {\n                 long offset = extractOffset(s, typeConverter);\n                 builder = builder.and(new NowSearchTerm(SearchTermBuilder.Comparison.LE.asNum(), false, offset));", "fixed": "             }\n         }\n         if (simple.getToReceivedDate() != null) {\n            String s = simple.getToReceivedDate();\n             if (s.startsWith(\"now\")) {\n                 long offset = extractOffset(s, typeConverter);\n                 builder = builder.and(new NowSearchTerm(SearchTermBuilder.Comparison.LE.asNum(), false, offset));", "sourceBeforeFix": "simple.getFromSentDate()", "sourceAfterFix": "simple.getToReceivedDate()"}
{"fixCommitSHA1": "04ad420f594bedd8cd5c40160d67585f70686a9c", "projectName": "aws.aws-sdk-java", "bugType": "Wrong Function Name", "problem": "             try {\n                 rawJsonContent = IOUtils.toString(httpResponse.getContent());\n             } catch (Exception e) {\n                LOG.error(\"Unable to read HTTP response content\", e);\n             }\n             return new JsonContent(rawJsonContent);", "fixed": "             try {\n                 rawJsonContent = IOUtils.toString(httpResponse.getContent());\n             } catch (Exception e) {\n                LOG.info(\"Unable to read HTTP response content\", e);\n             }\n             return new JsonContent(rawJsonContent);", "sourceBeforeFix": "LOG.error(\"Unable to unmarshall exception content\",e)", "sourceAfterFix": "LOG.info(\"Unable to unmarshall exception content\",e)"}
{"fixCommitSHA1": "54470b2994b692297a41ef87a54e04995ce8c2e2", "projectName": "stanfordnlp.CoreNLP", "bugType": "Wrong Function Name", "problem": "       log(FORCE, t);\n       exitCode = 1;\n     }\nendTrack(\"main\");\n     if (exit) {\n       System.exit(exitCode);\n     }", "fixed": "       log(FORCE, t);\n       exitCode = 1;\n     }\nendTracksTo(\"main\");\n     if (exit) {\n       System.exit(exitCode);\n     }", "sourceBeforeFix": "endTrack(\"main\")", "sourceAfterFix": "endTracksTo(\"main\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "98a8875db1735c4a60bf1989fd727217a739baf0", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "template.sendBodyAndHeader(\"file:\n         MockEndpoint mock = getMockEndpoint(\"mock:result2\");\n        mock.expectedBodiesReceived(\"Hello World 2\");\n         assertMockEndpointsSatisfied();\n         oneExchangeDone.matchesMockWaitTime();", "fixed": "template.sendBodyAndHeader(\"file:\n         MockEndpoint mock = getMockEndpoint(\"mock:result2\");\n        mock.expectedBodiesReceivedInAnyOrder(\"Hello World 2\");\n         assertMockEndpointsSatisfied();\n         oneExchangeDone.matchesMockWaitTime();", "sourceBeforeFix": "mock.expectedBodiesReceived(\"Hello World 3\")", "sourceAfterFix": "mock.expectedBodiesReceivedInAnyOrder(\"Hello World 3\")"}
{"fixCommitSHA1": "780a95c41d5d9ddafe1a237628183020746825a8", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t * before growing the backing table. */\n \tpublic IntIntMap (int initialCapacity, float loadFactor) {\n \t\tif (initialCapacity < 0) throw new IllegalArgumentException(\"initialCapacity must be >= 0: \" + initialCapacity);\n\t\tif (capacity > 1 << 30) throw new IllegalArgumentException(\"initialCapacity is too large: \" + initialCapacity);\n \t\tcapacity = MathUtils.nextPowerOfTwo(initialCapacity);\n \t\tif (loadFactor <= 0) throw new IllegalArgumentException(\"loadFactor must be > 0: \" + loadFactor);", "fixed": " \t * before growing the backing table. */\n \tpublic IntIntMap (int initialCapacity, float loadFactor) {\n \t\tif (initialCapacity < 0) throw new IllegalArgumentException(\"initialCapacity must be >= 0: \" + initialCapacity);\n\t\tif (initialCapacity > 1 << 30) throw new IllegalArgumentException(\"initialCapacity is too large: \" + initialCapacity);\n \t\tcapacity = MathUtils.nextPowerOfTwo(initialCapacity);\n \t\tif (loadFactor <= 0) throw new IllegalArgumentException(\"loadFactor must be > 0: \" + loadFactor);", "sourceBeforeFix": "capacity > 1 << 30", "sourceAfterFix": "initialCapacity > 1 << 30"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform1fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform1(location, v);\r\n \t}\r\n \tpublic void glUniform1fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform1(location, toFloatBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform1i (int location, int x) {\r", "fixed": " \t}\r\n \tpublic void glUniform1fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform1fv(location, v);\r\n \t}\r\n \tpublic void glUniform1fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform1fv(location, toFloatBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform1i (int location, int x) {\r", "sourceBeforeFix": "GL20.glUniform1(location,toFloatBuffer(v,offset,count))", "sourceAfterFix": "GL20.glUniform1fv(location,toFloatBuffer(v,offset,count))"}
{"fixCommitSHA1": "f9c863f126519ad2cfd7af4cef3eed04e8f87ea3", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"processKey\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;F)Ljava/lang/String;\");\n         } else if (propertyClass == double.class) {\n            mw.visitVarInsn(DLOAD, context.var(\"double\"));\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"processKey\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;D)Ljava/lang/String;\");\n         } else if (propertyClass == boolean.class) {", "fixed": "             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"processKey\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;F)Ljava/lang/String;\");\n         } else if (propertyClass == double.class) {\n            mw.visitVarInsn(DLOAD, context.var(\"double\", 2));\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"processKey\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;D)Ljava/lang/String;\");\n         } else if (propertyClass == boolean.class) {", "sourceBeforeFix": "context.var(\"long\")", "sourceAfterFix": "context.var(\"long\",2)"}
{"fixCommitSHA1": "41ff1f19d2188256f4c38928e7a5dd837c5d2edd", "projectName": "naver.pinpoint", "bugType": "Wrong Function Name", "problem": "     @Deprecated\n     @Override\n     public void put(final byte[] v) {\n        put(v);\n     }\n     @Override", "fixed": "     @Deprecated\n     @Override\n     public void put(final byte[] v) {\n        putBytes(v);\n     }\n     @Override", "sourceBeforeFix": "put(v)", "sourceAfterFix": "putBytes(v)"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @return property value in the type of the default value\n \t * @since 1.7\n \t */\n\tpublic <T> T getGlobalPropertyValue(String propertyName, T defaultValue) throws APIException;\n \t/**\n \t * @param aClass class of object getting length for", "fixed": " \t * @return property value in the type of the default value\n \t * @since 1.7\n \t */\n\tpublic <T> T getGlobalPropertyValue(String propertyName, T defaultValue);\n \t/**\n \t * @param aClass class of object getting length for", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "1d5647b92215f0ceabced59275225ad829061663", "projectName": "spring-projects.spring-boot", "bugType": "Change Modifier", "problem": " \tprivate int port = Integer.valueOf(System.getProperty(\"port\"));\n \t@Test\n\tpublic void testHome() throws Exception {\nString url = \"http:\n \t\tResponseEntity<String> entity = this.rest.getForEntity(url, String.class);\n \t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);", "fixed": " \tprivate int port = Integer.valueOf(System.getProperty(\"port\"));\n \t@Test\n\tvoid testHome() throws Exception {\nString url = \"http:\n \t\tResponseEntity<String> entity = this.rest.getForEntity(url, String.class);\n \t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "2230a91829f39b72973e6fecf275d9c664911ca0", "projectName": "clojure.clojure", "bugType": "Change Caller in Function Call", "problem": " \t\t}\n \tcatch(LispReader.ReaderException e)\n \t\t{\n\t\tthrow new CompilerException(sourceName, e.line, e.getCause());\n \t\t}\n \tfinally\n \t\t{", "fixed": " \t\t}\n \tcatch(LispReader.ReaderException e)\n \t\t{\n\t\tthrow new CompilerException(sourcePath, e.line, e.getCause());\n \t\t}\n \tfinally\n \t\t{", "sourceBeforeFix": "SOURCE.deref()", "sourceAfterFix": "SOURCE_PATH.deref()"}
{"fixCommitSHA1": "9716d2ae673a576cb345c3bfb24cf71654d8f112", "projectName": "openhab.openhab", "bugType": "Change Identifier Used", "problem": " \t */\n \tpublic GarageDoorData getGarageData() throws InvalidLoginException,\n \t\t\tIOException {\n\t\tlogger.debug(\"Retreiveing door data\");\n \t\tString url = String.format(\n \t\t\t\t\"%s/api/v4/userdevicedetails/get?appId=%s&SecurityToken=%s\",\n \t\t\t\tWEBSITE, enc(appId), enc(getSecurityToken()));", "fixed": " \t */\n \tpublic GarageDoorData getGarageData() throws InvalidLoginException,\n \t\t\tIOException {\n\t\tlogger.trace(\"Retreiveing door data\");\n \t\tString url = String.format(\n \t\t\t\t\"%s/api/v4/userdevicedetails/get?appId=%s&SecurityToken=%s\",\n \t\t\t\tWEBSITE, enc(appId), enc(getSecurityToken()));", "sourceBeforeFix": "logger.debug(\"attempting to login\")", "sourceAfterFix": "logger.trace(\"attempting to login\")"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * @param candidate The candidate to check.\n \t * @return True, if the candidate is equal to the reference, false otherwise.\n \t */\n\tpublic boolean equalToReference(T2 candidate);\n\tpublic int compareToReference(T2 candidate);\n }", "fixed": " \t * @param candidate The candidate to check.\n \t * @return True, if the candidate is equal to the reference, false otherwise.\n \t */\n\tpublic abstract boolean equalToReference(T2 candidate);\n\tpublic abstract int compareToReference(T2 candidate);\n }", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  private final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "cdeb155b1c6305dda738ce6eb8d4283b12a535fc", "projectName": "apache.camel", "bugType": "Same Function Less Args", "problem": "         FacebookEndpointConfiguration config = new FacebookEndpointConfiguration();\n        IntrospectionSupport.setProperties(config, componentProperties, null);\n         return config;\n     }", "fixed": "         FacebookEndpointConfiguration config = new FacebookEndpointConfiguration();\n        IntrospectionSupport.setProperties(config, componentProperties);\n         return config;\n     }", "sourceBeforeFix": "IntrospectionSupport.setProperties(config,componentProperties,null)", "sourceAfterFix": "IntrospectionSupport.setProperties(config,componentProperties)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites(int page) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"favorites.json\", \"page\", String.valueOf(page), true));\n     }\n     /**", "fixed": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites(int page) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"favorites.json\", \"page\", String.valueOf(page), true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",null,true))"}
{"fixCommitSHA1": "4281cc1c5d3aa51b56db9d9e251c761c52a855e3", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t * before growing the backing table. */\n \tpublic IntSet (int initialCapacity, float loadFactor) {\n \t\tif (initialCapacity < 0) throw new IllegalArgumentException(\"initialCapacity must be >= 0: \" + initialCapacity);\n\t\tif (capacity > 1 << 30) throw new IllegalArgumentException(\"initialCapacity is too large: \" + initialCapacity);\n \t\tcapacity = MathUtils.nextPowerOfTwo(initialCapacity);\n \t\tif (loadFactor <= 0) throw new IllegalArgumentException(\"loadFactor must be > 0: \" + loadFactor);", "fixed": " \t * before growing the backing table. */\n \tpublic IntSet (int initialCapacity, float loadFactor) {\n \t\tif (initialCapacity < 0) throw new IllegalArgumentException(\"initialCapacity must be >= 0: \" + initialCapacity);\n\t\tif (initialCapacity > 1 << 30) throw new IllegalArgumentException(\"initialCapacity is too large: \" + initialCapacity);\n \t\tcapacity = MathUtils.nextPowerOfTwo(initialCapacity);\n \t\tif (loadFactor <= 0) throw new IllegalArgumentException(\"loadFactor must be > 0: \" + loadFactor);", "sourceBeforeFix": "capacity > 1 << 30", "sourceAfterFix": "initialCapacity > 1 << 30"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "af233c9c353322adf1fa91d5e6ca706b9d9d98b7", "projectName": "dropwizard.dropwizard", "bugType": "Wrong Function Name", "problem": "     @Test\n     public void returnsA404WhenNotFound() throws Exception {\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getServletPath()).thenReturn(\"/tasks/test\");\n         servlet.service(request, response);", "fixed": "     @Test\n     public void returnsA404WhenNotFound() throws Exception {\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getPathInfo()).thenReturn(\"/test\");\n         servlet.service(request, response);", "sourceBeforeFix": "request.getServletPath()", "sourceAfterFix": "request.getPathInfo()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     return additionalReplacements;\n   }\n  private final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     return additionalReplacements;\n   }\n  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedFtpsEndpointBuilder\n             extends\n                 AdvancedFtpsEndpointConsumerBuilder, AdvancedFtpsEndpointProducerBuilder {\n         default FtpsEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedFtpsEndpointBuilder\n             extends\n                 AdvancedFtpsEndpointConsumerBuilder, AdvancedFtpsEndpointProducerBuilder {\n         default FtpsEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "e74cd24ff2229b060e219af33c3abe5cbf1079d1", "projectName": "apache.hbase", "bugType": "Wrong Function Name", "problem": "                   Bytes.toStringBinary(data));\n               throw e;\n             }\n            LOG.error(\"Node \" + path + \" already exists and this is not a \" +\n                 \"retry\");\n             throw e;", "fixed": "                   Bytes.toStringBinary(data));\n               throw e;\n             }\n            LOG.info(\"Node \" + path + \" already exists and this is not a \" +\n                 \"retry\");\n             throw e;", "sourceBeforeFix": "LOG.error(\"Node \" + path + \" already exists and this is not a \"+ \"retry\")", "sourceAfterFix": "LOG.info(\"Node \" + path + \" already exists and this is not a \"+ \"retry\")"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleActionsPredicatesOptions_1() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(239);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");", "fixed": " \tpublic void testMultipleActionsPredicatesOptions_1() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(238);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");", "sourceBeforeFix": "new StringBuilder(239)", "sourceAfterFix": "new StringBuilder(238)"}
{"fixCommitSHA1": "48041fee0e8a87ebebc32f085634a6cd231dd33d", "projectName": "eclipse.vert.x", "bugType": "Change Numeric Literal", "problem": "   }\n   synchronized void start(boolean checkExpired) {\n    this.timerID = checkExpired ? client.getVertx().setTimer(1, id -> checkExpired()) : -1;\n   }\n   private synchronized void checkExpired() {\n     long timestamp = System.currentTimeMillis();\n     endpointMap.values().forEach(e -> e.pool.closeIdle(timestamp));\n    timerID = client.getVertx().setTimer(1, id -> checkExpired());\n   }\n   private static final class EndpointKey {", "fixed": "   }\n   synchronized void start(boolean checkExpired) {\n    this.timerID = checkExpired ? client.getVertx().setTimer(1000, id -> checkExpired()) : -1;\n   }\n   private synchronized void checkExpired() {\n     long timestamp = System.currentTimeMillis();\n     endpointMap.values().forEach(e -> e.pool.closeIdle(timestamp));\n    timerID = client.getVertx().setTimer(1000, id -> checkExpired());\n   }\n   private static final class EndpointKey {", "sourceBeforeFix": "client.getVertx().setTimer(1,id -> checkExpired())", "sourceAfterFix": "client.getVertx().setTimer(1000,id -> checkExpired())"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15841, value = \"Exception getting result from server %s: %s\")\n     String exceptionAwaitingResultFromServer(ServerIdentity server, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10841, value = \"Exception getting result from server %s: %s\")\n     String exceptionAwaitingResultFromServer(ServerIdentity server, String message);\n     /**", "sourceBeforeFix": "id=15843", "sourceAfterFix": "id=10843"}
{"fixCommitSHA1": "64dff91895f9df55fe3a07217a333efa4d37d92a", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "         Class<?> c = makeClass(className, proceedOnExceptions);\n         if (c != null) {\n           if (!classes.add(c)) {\n            LOG.error(\"Ignoring duplicate class \" + className);\n           }\n         }\n       }", "fixed": "         Class<?> c = makeClass(className, proceedOnExceptions);\n         if (c != null) {\n           if (!classes.add(c)) {\n            LOG.warn(\"Ignoring duplicate class \" + className);\n           }\n         }\n       }", "sourceBeforeFix": "LOG.error(\"Failed to look for classes in \" + jarFileName + \": \"+ ioEx)", "sourceAfterFix": "LOG.warn(\"Failed to look for classes in \" + jarFileName + \": \"+ ioEx)"}
{"fixCommitSHA1": "2e44a1ba91557d4d6231bd46c63697776208bc9e", "projectName": "netty.netty", "bugType": "Change Numeric Literal", "problem": "             public void run() {\n                 timestamps.add(System.nanoTime());\n                 try {\n                    Thread.sleep(50);\n                 } catch (InterruptedException e) {\n                 }", "fixed": "             public void run() {\n                 timestamps.add(System.nanoTime());\n                 try {\n                    Thread.sleep(51);\n                 } catch (InterruptedException e) {\n                 }", "sourceBeforeFix": "Thread.sleep(50)", "sourceAfterFix": "Thread.sleep(51)"}
{"fixCommitSHA1": "0b302cf93edee0e2ab3c9998f380ede8e8ea7727", "projectName": "Atmosphere.atmosphere", "bugType": "Change Identifier Used", "problem": "                 }\n             }\n         }\n        return r;\n     }\n     private boolean isAtmosphereResourceValid(AtmosphereResource r) {", "fixed": "                 }\n             }\n         }\n        return this;\n     }\n     private boolean isAtmosphereResourceValid(AtmosphereResource r) {", "sourceBeforeFix": "return r; ", "sourceAfterFix": "return this; "}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_in() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"06-05-2016\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_in() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"06-05-2016\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "d2418b99ef96450104f978d8e50c7ca762235080", "projectName": "spring-projects.spring-boot", "bugType": "Change Modifier", "problem": " \tprivate static class MockPrincipalWrapper extends HttpServletRequestWrapper {\n\t\tpublic MockPrincipalWrapper(HttpServletRequest request) {\n \t\t\tsuper(request);\n \t\t}", "fixed": " \tprivate static class MockPrincipalWrapper extends HttpServletRequestWrapper {\n\t\tMockPrincipalWrapper(HttpServletRequest request) {\n \t\t\tsuper(request);\n \t\t}", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsCsv(String path, int batchSize) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), batchSize, null);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsCsv(String path, int batchSize) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), batchSize, null);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "2921e7bf0d74a65fdcc71d3ce3053037d14e4d44", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "             if (timeout == null) {\n                 println(lock.tryLock());\n             } else {\n                long time = Long.valueOf(timeout);\n                 try {\n                     println(lock.tryLock(time, TimeUnit.SECONDS));\n                 } catch (InterruptedException e) {", "fixed": "             if (timeout == null) {\n                 println(lock.tryLock());\n             } else {\n                long time = Long.parseLong(timeout);\n                 try {\n                     println(lock.tryLock(time, TimeUnit.SECONDS));\n                 } catch (InterruptedException e) {", "sourceBeforeFix": "Long.valueOf(args[2])", "sourceAfterFix": "Long.parseLong(args[2])"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "fixed": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "sourceBeforeFix": "GL20.glUniform3(location,toIntBuffer(v,offset,count * 3))", "sourceAfterFix": "GL20.glUniform3iv(location,toIntBuffer(v,offset,count * 3))"}
{"fixCommitSHA1": "6899744572ba4d61d410f4fd039109da97cbf977", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t\t\txx *= lx;\r\n \t\t\txy *= lx;\r\n \t\t\txz *= lx;\r\n\t\t\tyz *= ly;\r\n \t\t\tyy *= ly;\r\n \t\t\tyz *= ly;\r\n \t\t\tzx *= lz;\r", "fixed": " \t\t\txx *= lx;\r\n \t\t\txy *= lx;\r\n \t\t\txz *= lx;\r\n\t\t\tyx *= ly;\r\n \t\t\tyy *= ly;\r\n \t\t\tyz *= ly;\r\n \t\t\tzx *= lz;\r", "sourceBeforeFix": "yz*=ly", "sourceAfterFix": "yx*=ly"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites(String id) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"favorites/\" + id + \".json\", new PostParameter[0], true));\n     }\n     /**", "fixed": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites(String id) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"favorites/\" + id + \".json\", new PostParameter[0], true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\",true))"}
{"fixCommitSHA1": "3a06b2912286fded8cd90996525876b73d87ea92", "projectName": "facebook.presto", "bugType": "Change Identifier Used", "problem": "         jaxrsBinder(binder).bind(QueryExecutionResource.class);\n        jaxrsBinder(binder).bind(WebAppResource.class);\n         jaxrsBinder(binder).bind(QueryResource.class);", "fixed": "         jaxrsBinder(binder).bind(QueryExecutionResource.class);\n        jaxrsBinder(binder).bind(WebUiResource.class);\n         jaxrsBinder(binder).bind(QueryResource.class);", "sourceBeforeFix": "WebAppResource.class", "sourceAfterFix": "WebUiResource.class"}
{"fixCommitSHA1": "b2fe91c9b8394067bccfb56650dbe376b100a890", "projectName": "hazelcast.hazelcast", "bugType": "Change Numeric Literal", "problem": "         new Thread() {\n             public void run() {\n                 try {\n                    if (mm.tryLock(key, 4, TimeUnit.SECONDS)) {\n                         tryLockSuccess.countDown();\n                     }\n                 } catch (InterruptedException e) {", "fixed": "         new Thread() {\n             public void run() {\n                 try {\n                    if (mm.tryLock(key, 10, TimeUnit.SECONDS)) {\n                         tryLockSuccess.countDown();\n                     }\n                 } catch (InterruptedException e) {", "sourceBeforeFix": "mm.tryLock(key,4,TimeUnit.SECONDS)", "sourceAfterFix": "mm.tryLock(key,10,TimeUnit.SECONDS)"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleAlternativesWithCommonLabel_1() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(561);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "fixed": " \tpublic void testMultipleAlternativesWithCommonLabel_1() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(560);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "sourceBeforeFix": "new StringBuilder(561)", "sourceAfterFix": "new StringBuilder(560)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface NeutronEndpointBuilder\n            extends\n                EndpointProducerBuilder {\n         default AdvancedNeutronEndpointBuilder advanced() {\n             return (AdvancedNeutronEndpointBuilder) this;\n         }", "fixed": "     \n    public interface NeutronEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedNeutronEndpointBuilder advanced() {\n             return (AdvancedNeutronEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "68cdbf73818c9d76ccad723dd4e86651a7479954", "projectName": "stanfordnlp.CoreNLP", "bugType": "Change Identifier Used", "problem": "     }\n     boolean foundOut = outgoingEdges.containsKey(source) && outgoingEdges.get(source).containsKey(dest) &&\n         outgoingEdges.get(source).get(dest).remove(data);\n    boolean foundIn = incomingEdges.containsKey(source) && incomingEdges.get(source).containsKey(dest) &&\n         incomingEdges.get(dest).get(source).remove(data);\n     if (foundOut && !foundIn) {\n       throw new AssertionError(\"Edge found in outgoing but not incoming\");", "fixed": "     }\n     boolean foundOut = outgoingEdges.containsKey(source) && outgoingEdges.get(source).containsKey(dest) &&\n         outgoingEdges.get(source).get(dest).remove(data);\n    boolean foundIn = incomingEdges.containsKey(dest) && incomingEdges.get(dest).containsKey(source) &&\n         incomingEdges.get(dest).get(source).remove(data);\n     if (foundOut && !foundIn) {\n       throw new AssertionError(\"Edge found in outgoing but not incoming\");", "sourceBeforeFix": "incomingEdges.containsKey(source)", "sourceAfterFix": "incomingEdges.containsKey(dest)"}
{"fixCommitSHA1": "994da4e53abe98a0f0004d7bb8c57e08c621570d", "projectName": "Atmosphere.atmosphere", "bugType": "Same Function More Args", "problem": "         });\n         AtmosphereRequest request = new AtmosphereRequest.Builder().destroyable(false).body(\"yoComet\").pathInfo(\"/a\").build();\n        processor.open(w, request);\n         processor.invokeWebSocketProtocol(w, \"yoWebSocket\");\n         processor.notifyListener(w, new WebSocketEventListener.WebSocketEvent(\"Disconnect\", DISCONNECT, w));", "fixed": "         });\n         AtmosphereRequest request = new AtmosphereRequest.Builder().destroyable(false).body(\"yoComet\").pathInfo(\"/a\").build();\n        processor.open(w, request, AtmosphereResponse.newInstance(framework.getAtmosphereConfig(), request, w));\n         processor.invokeWebSocketProtocol(w, \"yoWebSocket\");\n         processor.notifyListener(w, new WebSocketEventListener.WebSocketEvent(\"Disconnect\", DISCONNECT, w));", "sourceBeforeFix": "processor.open(w,request)", "sourceAfterFix": "processor.open(w,request,AtmosphereResponse.newInstance(framework.getAtmosphereConfig(),request,w))"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15857, value = \"Only 1 piece of content is currently supported (AS7-431)\")\n     String as7431();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10857, value = \"Only 1 piece of content is currently supported (AS7-431)\")\n     String as7431();\n     /**", "sourceBeforeFix": "id=15868", "sourceAfterFix": "id=10868"}
{"fixCommitSHA1": "f9374238b2870cad6c090589ec18933983e1c902", "projectName": "checkstyle.checkstyle", "bugType": "Same Function More Args", "problem": "      */\n     private void addTag(String text, int line, int column, boolean on)\n     {\n        final Tag tag = new Tag(line, column, text, on);\n         tags.add(tag);\n     }\n }", "fixed": "      */\n     private void addTag(String text, int line, int column, boolean on)\n     {\n        final Tag tag = new Tag(line, column, text, on, this);\n         tags.add(tag);\n     }\n }", "sourceBeforeFix": "new Tag(line,column,text,on)", "sourceAfterFix": "new Tag(line,column,text,on,this)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "fixed": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2fv(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2fv(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "sourceBeforeFix": "GL20.glGetUniform(program,location,params)", "sourceAfterFix": "GL20.glGetUniformiv(program,location,params)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public List<Trends> getWeeklyTrends() throws TwitterException {\n        return Trends.constructTrendsList(get(getSearchBaseURL()\n                 + \"trends/weekly.json\", false));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public List<Trends> getWeeklyTrends() throws TwitterException {\n        return Trends.createTrendsList(get(getSearchBaseURL()\n                 + \"trends/weekly.json\", false));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface DropboxEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedDropboxEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface DropboxEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedDropboxEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface CouchDbEndpointBuilder\n             extends\n                 CouchDbEndpointConsumerBuilder, CouchDbEndpointProducerBuilder {\n         default AdvancedCouchDbEndpointBuilder advanced() {", "fixed": "     \n    public interface CouchDbEndpointBuilder\n             extends\n                 CouchDbEndpointConsumerBuilder, CouchDbEndpointProducerBuilder {\n         default AdvancedCouchDbEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface GoogleCalendarEndpointBuilder\n             extends\n                 GoogleCalendarEndpointConsumerBuilder, GoogleCalendarEndpointProducerBuilder {\n         default AdvancedGoogleCalendarEndpointBuilder advanced() {", "fixed": "     \n    public interface GoogleCalendarEndpointBuilder\n             extends\n                 GoogleCalendarEndpointConsumerBuilder, GoogleCalendarEndpointProducerBuilder {\n         default AdvancedGoogleCalendarEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15836, value = SERVER_GROUP + \" expects one and only one child: %s\")\n     String serverGroupExpectsSingleChild(String rolloutPlan);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10836, value = SERVER_GROUP + \" expects one and only one child: %s\")\n     String serverGroupExpectsSingleChild(String rolloutPlan);\n     /**", "sourceBeforeFix": "id=15836", "sourceAfterFix": "id=10836"}
{"fixCommitSHA1": "fd172432f0b7fcb65b990ece77a85fe10ea42c21", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t\t\t}\n\t\t\tthrow new IOException(\"OPening request timed out.\");\n \t\t}\n \t\tpublic FSDataInputStream getFSDataInputStream() {", "fixed": " \t\t\t}\n\t\t\tthrow new IOException(\"Opening request timed out.\");\n \t\t}\n \t\tpublic FSDataInputStream getFSDataInputStream() {", "sourceBeforeFix": "2", "sourceAfterFix": "66"}
{"fixCommitSHA1": "98c988a5bd57ee4324cc80cf87be5993a00a537b", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "         }\n         Map<String, Object> responseModels = IntrospectionSupport.extractProperties(parameters, \"responseModel.\");\n        for (Map.Entry<String, Object> entry : requestModels.entrySet()) {\n             configuration.addResponseModel(\n                 entry.getKey(),\n                 EndpointHelper.resolveParameter(context, (String)entry.getValue(), Class.class));", "fixed": "         }\n         Map<String, Object> responseModels = IntrospectionSupport.extractProperties(parameters, \"responseModel.\");\n        for (Map.Entry<String, Object> entry : responseModels.entrySet()) {\n             configuration.addResponseModel(\n                 entry.getKey(),\n                 EndpointHelper.resolveParameter(context, (String)entry.getValue(), Class.class));", "sourceBeforeFix": "requestModels.entrySet()", "sourceAfterFix": "responseModels.entrySet()"}
{"fixCommitSHA1": "af233c9c353322adf1fa91d5e6ca706b9d9d98b7", "projectName": "dropwizard.dropwizard", "bugType": "Change Identifier Used", "problem": "         final PrintWriter output = mock(PrintWriter.class);\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getServletPath()).thenReturn(\"/tasks/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.<String>of()));\n         when(response.getWriter()).thenReturn(output);", "fixed": "         final PrintWriter output = mock(PrintWriter.class);\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getPathInfo()).thenReturn(\"/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.<String>of()));\n         when(response.getWriter()).thenReturn(output);", "sourceBeforeFix": "request.getServletPath()", "sourceAfterFix": "request.getPathInfo()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "5755cf96d1689e1eda7dd2d7e03f1eff3bf5a074", "projectName": "perwendel.spark", "bugType": "Change Identifier Used", "problem": "      *\n      * @return Type of exception\n      */\n    public Class<? extends Exception> exceptionClass() {\n         return this.exceptionClass;\n     }", "fixed": "      *\n      * @return Type of exception\n      */\n    public Class<? extends T> exceptionClass() {\n         return this.exceptionClass;\n     }", "sourceBeforeFix": "Exception exception", "sourceAfterFix": "T exception"}
{"fixCommitSHA1": "e669002a9698f48bc48ee0138798f7acf655c33d", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "     }\n     public List<BacklogTracerEventMessage> dumpTracedMessages(String nodeId) {\n        List<BacklogTracerEventMessage> answer = new ArrayList<>();\n         if (nodeId != null) {\n             for (BacklogTracerEventMessage message : queue) {\n                 if (nodeId.equals(message.getToNode()) || nodeId.equals(message.getRouteId())) {", "fixed": "     }\n     public List<BacklogTracerEventMessage> dumpTracedMessages(String nodeId) {\n        List<BacklogTracerEventMessage> answer = new ArrayList<BacklogTracerEventMessage>();\n         if (nodeId != null) {\n             for (BacklogTracerEventMessage message : queue) {\n                 if (nodeId.equals(message.getToNode()) || nodeId.equals(message.getRouteId())) {", "sourceBeforeFix": "100 * 1000", "sourceAfterFix": "10 * 1000"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15859, value = \"A slave domain controller cannot accept deployment content uploads\")\n     String slaveCannotAcceptUploads();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10859, value = \"A slave domain controller cannot accept deployment content uploads\")\n     String slaveCannotAcceptUploads();\n     /**", "sourceBeforeFix": "id=15867", "sourceAfterFix": "id=10867"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15858, value = \"No deployment content with hash %s is available in the deployment content repository.\")\n     String noDeploymentContentWithHash(String hash);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10858, value = \"No deployment content with hash %s is available in the deployment content repository.\")\n     String noDeploymentContentWithHash(String hash);\n     /**", "sourceBeforeFix": "id=15832", "sourceAfterFix": "id=10832"}
{"fixCommitSHA1": "46941b16a30e493238924701f938cbf3318eb355", "projectName": "Alluxio.alluxio", "bugType": "Same Function More Args", "problem": "    * @return the number of blocks\n    */\n   public int getNumberOfBlocks() {\n    Preconditions.checkNotNull(mBlockIdsOnTiers);\n     int numberOfBlocks = 0;\n     for (List<Long> blockIds : mBlockIdsOnTiers.values()) {", "fixed": "    * @return the number of blocks\n    */\n   public int getNumberOfBlocks() {\n    Preconditions.checkNotNull(mBlockIdsOnTiers, \"mBlockIdsOnTiers\");\n     int numberOfBlocks = 0;\n     for (List<Long> blockIds : mBlockIdsOnTiers.values()) {", "sourceBeforeFix": "Preconditions.checkNotNull(mBlockIdsOnTiers)", "sourceAfterFix": "Preconditions.checkNotNull(mBlockIdsOnTiers,\"mBlockIdsOnTiers\")"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15845, value = \"Invalid rollout plan. Server group %s has a %s value of %s; must be between 0 and 100.\")\n     String invalidRolloutPlanRange(String name, String propertyName, int value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10845, value = \"Invalid rollout plan. Server group %s has a %s value of %s; must be between 0 and 100.\")\n     String invalidRolloutPlanRange(String name, String propertyName, int value);\n     /**", "sourceBeforeFix": "id=15870", "sourceAfterFix": "id=10870"}
{"fixCommitSHA1": "af233c9c353322adf1fa91d5e6ca706b9d9d98b7", "projectName": "dropwizard.dropwizard", "bugType": "Change Identifier Used", "problem": "     @SuppressWarnings(\"unchecked\")\n     public void returnsA500OnExceptions() throws Exception {\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getServletPath()).thenReturn(\"/tasks/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.<String>of()));\n         final RuntimeException ex = new RuntimeException(\"whoops\");", "fixed": "     @SuppressWarnings(\"unchecked\")\n     public void returnsA500OnExceptions() throws Exception {\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getPathInfo()).thenReturn(\"/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.<String>of()));\n         final RuntimeException ex = new RuntimeException(\"whoops\");", "sourceBeforeFix": "request.getServletPath()", "sourceAfterFix": "request.getPathInfo()"}
{"fixCommitSHA1": "b1068dc55c95d1000e07b71d3a9d9a2fd26bfff9", "projectName": "junit-team.junit", "bugType": "Same Function More Args", "problem": " \t\tif (name == null)\n \t\t\treturn null;\n \t\ttry {\n\t\t\treturn Class.forName(name);\n \t\t} catch (ClassNotFoundException e) {\n \t\t\treturn null;\n \t\t}", "fixed": " \t\tif (name == null)\n \t\t\treturn null;\n \t\ttry {\n\t\t\treturn Class.forName(name, false, getClass().getClassLoader());\n \t\t} catch (ClassNotFoundException e) {\n \t\t\treturn null;\n \t\t}", "sourceBeforeFix": "Class.forName(name)", "sourceAfterFix": "Class.forName(name,false,getClass().getClassLoader())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "d2314c583d3463e3fa020e9d42aecf91b55c582c", "projectName": "apache.hadoop", "bugType": "Change Identifier Used", "problem": "   private void setTrackingUrlToRMAppPage() {\n     originalTrackingUrl = pjoin(\n        WebAppUtils.getResolvedRMWebAppURLWithoutScheme(conf),\n         \"cluster\", \"app\", getAppAttemptId().getApplicationId());\n     proxiedTrackingUrl = originalTrackingUrl;\n   }", "fixed": "   private void setTrackingUrlToRMAppPage() {\n     originalTrackingUrl = pjoin(\n        WebAppUtils.getResolvedRMWebAppURLWithScheme(conf),\n         \"cluster\", \"app\", getAppAttemptId().getApplicationId());\n     proxiedTrackingUrl = originalTrackingUrl;\n   }", "sourceBeforeFix": "WebAppUtils.getResolvedRMWebAppURLWithoutScheme(conf)", "sourceAfterFix": "WebAppUtils.getResolvedRMWebAppURLWithScheme(conf)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "3757a700a89638e5747d966bdaa8266b62c974c8", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "     assertEquals(encoded, encoding.encode(bytes));\n   }\n  private void testDecodes(BaseEncoding encoding, String encoded, String decoded) {\n     byte[] bytes;\n     try {\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();", "fixed": "     assertEquals(encoded, encoding.encode(bytes));\n   }\n  private static void testDecodes(BaseEncoding encoding, String encoded, String decoded) {\n     byte[] bytes;\n     try {\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "f4d9e1c650ee6988bcd1807aaf02b74e3779358b", "projectName": "spring-projects.spring-boot", "bugType": "Change Modifier", "problem": " \t}\n \t@Test\n\tpublic void whenWhenValueNotMatchesShouldSupportChainedCalls() {\n \t\tthis.map.from(\"123\").when(\"456\"::equals).when(\"123\"::equals).toCall(Assertions::fail);\n \t}\n \t@Test\n\tpublic void whenWhenValueMatchesShouldSupportChainedCalls() {\n \t\tString result = this.map.from(\"123\").when((s) -> s.contains(\"2\")).when(\"123\"::equals).toInstance(String::new);\n \t\tassertThat(result).isEqualTo(\"123\");\n \t}", "fixed": " \t}\n \t@Test\n\tvoid whenWhenValueNotMatchesShouldSupportChainedCalls() {\n \t\tthis.map.from(\"123\").when(\"456\"::equals).when(\"123\"::equals).toCall(Assertions::fail);\n \t}\n \t@Test\n\tvoid whenWhenValueMatchesShouldSupportChainedCalls() {\n \t\tString result = this.map.from(\"123\").when((s) -> s.contains(\"2\")).when(\"123\"::equals).toInstance(String::new);\n \t\tassertThat(result).isEqualTo(\"123\");\n \t}", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "54e74976040f09efb4a645107f6963ddc5b344ec", "projectName": "neo4j.neo4j", "bugType": "Change Numeric Literal", "problem": " final class MuninnPagedFile implements PagedFile\n {\n     private static int stripeFactor = Integer.getInteger(\n            \"org.neo4j.io.pagecache.impl.muninn.MuninnPagedFile.stripeFactor\", 8 );\n     static final int translationTableStripeLevel = 1 << stripeFactor;\n     static final int translationTableStripeMask = translationTableStripeLevel - 1;", "fixed": " final class MuninnPagedFile implements PagedFile\n {\n     private static int stripeFactor = Integer.getInteger(\n            \"org.neo4j.io.pagecache.impl.muninn.MuninnPagedFile.stripeFactor\", 10 );\n     static final int translationTableStripeLevel = 1 << stripeFactor;\n     static final int translationTableStripeMask = translationTableStripeLevel - 1;", "sourceBeforeFix": "Primitive.longObjectMap(32)", "sourceAfterFix": "Primitive.longObjectMap(8)"}
{"fixCommitSHA1": "19c2a076c25faf94ae9e8f4072f2a4590c9ee1fe", "projectName": "spring-projects.spring-boot", "bugType": "Wrong Function Name", "problem": " \t@Test\n \tpublic void startServletAndFilter() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n\t\tthis.container = factory.getEmbdeddedServletContainer(\n \t\t\t\texampleServletRegistration(), new FilterRegistrationBean(\n \t\t\t\t\t\tnew ExampleFilter()));\nassertThat(getResponse(\"http:", "fixed": " \t@Test\n \tpublic void startServletAndFilter() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n\t\tthis.container = factory.getEmbeddedServletContainer(\n \t\t\t\texampleServletRegistration(), new FilterRegistrationBean(\n \t\t\t\t\t\tnew ExampleFilter()));\nassertThat(getResponse(\"http:", "sourceBeforeFix": "factory.getEmbdeddedServletContainer(initializers[0],initializers[1])", "sourceAfterFix": "factory.getEmbeddedServletContainer(initializers[0],initializers[1])"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream.\n \t */\n\tpublic DataStream<OUT> print() {\n \t\tDataStream<OUT> inputStream = this.copy();\n \t\tPrintSinkFunction<OUT> printFunction = new PrintSinkFunction<OUT>();\n\t\tDataStream<OUT> returnStream = addSink(inputStream, printFunction, null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());", "fixed": " \t * \n \t * @return The closed DataStream.\n \t */\n\tpublic DataStreamSink<OUT> print() {\n \t\tDataStream<OUT> inputStream = this.copy();\n \t\tPrintSinkFunction<OUT> printFunction = new PrintSinkFunction<OUT>();\n\t\tDataStreamSink<OUT> returnStream = addSink(inputStream, printFunction, null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "08c4c8d9c86d4c97a545f3f4a2d0486f078b344c", "projectName": "hazelcast.hazelcast", "bugType": "Change Boolean Literal", "problem": "         for (; ; ) {\n             String id = prefix + randomString();\n             Partition partition = partitionService.getPartition(id);\n            if (comparePartitionOwnership(true, localMember, partition)) {\n                 return id;\n             }\n         }", "fixed": "         for (; ; ) {\n             String id = prefix + randomString();\n             Partition partition = partitionService.getPartition(id);\n            if (comparePartitionOwnership(false, localMember, partition)) {\n                 return id;\n             }\n         }", "sourceBeforeFix": "comparePartitionOwnership(true,localMember,partition)", "sourceAfterFix": "comparePartitionOwnership(false,localMember,partition)"}
{"fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n            file = new RandomAccessFile(FOLDER + (mWorkerId + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());", "fixed": "         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n            file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "pId + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "fixed": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4fv(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4fv(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "sourceBeforeFix": "GL11.glGetTexParameter(target,pname,params)", "sourceAfterFix": "GL11.glGetTexParameteriv(target,pname,params)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e9f14f107361d9cef5582c2d2a8e657691e76ec6", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "     Mockito.when(mockRegionScanner.getRegionInfo()).thenReturn(mockRegionInfo);\n     Mockito.when(mockRS.getRegion((RegionSpecifier)Mockito.any())).thenReturn(mockRegion);\n     Mockito.when(mockRegion.getRegionInfo()).thenReturn(mockRegionInfo);\n    Mockito.when(mockRegionInfo.isMetaRegion()).thenReturn(true);\n     qosFunction.setRegionServer(mockRS);\n     assertTrue (qosFunction.apply(rpcRequest) == HConstants.HIGH_QOS);\n    Mockito.when(mockRegionInfo.isMetaRegion()).thenReturn(false);\n     assertTrue (qosFunction.apply(rpcRequest) == HConstants.NORMAL_QOS);\n   }", "fixed": "     Mockito.when(mockRegionScanner.getRegionInfo()).thenReturn(mockRegionInfo);\n     Mockito.when(mockRS.getRegion((RegionSpecifier)Mockito.any())).thenReturn(mockRegion);\n     Mockito.when(mockRegion.getRegionInfo()).thenReturn(mockRegionInfo);\n    Mockito.when(mockRegionInfo.isMetaTable()).thenReturn(true);\n     qosFunction.setRegionServer(mockRS);\n     assertTrue (qosFunction.apply(rpcRequest) == HConstants.HIGH_QOS);\n    Mockito.when(mockRegionInfo.isMetaTable()).thenReturn(false);\n     assertTrue (qosFunction.apply(rpcRequest) == HConstants.NORMAL_QOS);\n   }", "sourceBeforeFix": "mockRegionInfo.isMetaRegion()", "sourceAfterFix": "mockRegionInfo.isMetaTable()"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface CxfRsEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedCxfRsEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface CxfRsEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedCxfRsEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "f207bc7996e970fb75d00fd340bcfbc2efd44bfd", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "    */\n   private void faultTestDataCheck(List<Pair<Integer, String>> answer) throws IOException {\n     TachyonFS tfs = mLocalTachyonClusterMultiMaster.getClient();\n    List<String> files = mTfs.ls(Constants.PATH_SEPARATOR, true);\n     Assert.assertEquals(answer.size(), files.size());\n     for (int k = 0; k < answer.size(); k ++) {\n       Assert.assertEquals(answer.get(k).getSecond(), tfs.getFile(answer.get(k).getFirst())", "fixed": "    */\n   private void faultTestDataCheck(List<Pair<Integer, String>> answer) throws IOException {\n     TachyonFS tfs = mLocalTachyonClusterMultiMaster.getClient();\n    List<String> files = tfs.ls(Constants.PATH_SEPARATOR, true);\n     Assert.assertEquals(answer.size(), files.size());\n     for (int k = 0; k < answer.size(); k ++) {\n       Assert.assertEquals(answer.get(k).getSecond(), tfs.getFile(answer.get(k).getFirst())", "sourceBeforeFix": "mTfs.ls(Constants.PATH_SEPARATOR,true)", "sourceAfterFix": "tfs.ls(Constants.PATH_SEPARATOR,true)"}
{"fixCommitSHA1": "7504963a65930f0b3332774f8a6d0db70c94fa12", "projectName": "Alluxio.alluxio", "bugType": "Change Modifier", "problem": "     CLIENT.user_deleteById(fileId);\n   }\n  public ClientFileInfo user_getClientFileInfoByPath(String path)\n       throws FileDoesNotExistException, InvalidPathException, TException {\n     return CLIENT.user_getClientFileInfoByPath(path);\n   }\n  public ClientFileInfo user_getClientFileInfoById(int id)\n       throws FileDoesNotExistException, TException {\n     return CLIENT.user_getClientFileInfoById(id);\n   }", "fixed": "     CLIENT.user_deleteById(fileId);\n   }\n  public synchronized ClientFileInfo user_getClientFileInfoByPath(String path)\n       throws FileDoesNotExistException, InvalidPathException, TException {\n     return CLIENT.user_getClientFileInfoByPath(path);\n   }\n  public synchronized ClientFileInfo user_getClientFileInfoById(int id)\n       throws FileDoesNotExistException, TException {\n     return CLIENT.user_getClientFileInfoById(id);\n   }", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "4b52e5d010469405c1ec24baa2f8457f3eada222", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic boolean keyDown (int keycode) {\r\n\t\tInputProcessor[] items = processors.begin();\r\n \t\ttry {\r\n \t\t\tfor (int i = 0, n = processors.size; i < n; i++)\r\n\t\t\t\tif (items[i].keyDown(keycode)) return true;\r\n \t\t} finally {\r\n \t\t\tprocessors.end();\r\n \t\t}\r", "fixed": " \t}\r\n \tpublic boolean keyDown (int keycode) {\r\n\t\tObject[] items = processors.begin();\r\n \t\ttry {\r\n \t\t\tfor (int i = 0, n = processors.size; i < n; i++)\r\n\t\t\t\tif (((InputProcessor)items[i]).keyDown(keycode)) return true;\r\n \t\t} finally {\r\n \t\t\tprocessors.end();\r\n \t\t}\r", "sourceBeforeFix": "InputProcessor[]", "sourceAfterFix": "Object[]"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedAtomixSetEndpointBuilder\n             extends\n                 AdvancedAtomixSetEndpointConsumerBuilder, AdvancedAtomixSetEndpointProducerBuilder {\n         default AtomixSetEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedAtomixSetEndpointBuilder\n             extends\n                 AdvancedAtomixSetEndpointConsumerBuilder, AdvancedAtomixSetEndpointProducerBuilder {\n         default AtomixSetEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "3757a700a89638e5747d966bdaa8266b62c974c8", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "   }\n   @GwtIncompatible(\"Reader/Writer\")\n  private void testStreamingEncodingWithCasing(\n       BaseEncoding encoding, String decoded, String encoded) throws IOException {\n     testStreamingEncodingWithSeparators(encoding, decoded, encoded);\n     testStreamingEncodingWithSeparators(encoding.upperCase(), decoded, Ascii.toUpperCase(encoded));", "fixed": "   }\n   @GwtIncompatible(\"Reader/Writer\")\n  private static void testStreamingEncodingWithCasing(\n       BaseEncoding encoding, String decoded, String encoded) throws IOException {\n     testStreamingEncodingWithSeparators(encoding, decoded, encoded);\n     testStreamingEncodingWithSeparators(encoding.upperCase(), decoded, Ascii.toUpperCase(encoded));", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "f7fc6c9d499231af985ed9f99de287aca5b4c0cf", "projectName": "wildfly.wildfly", "bugType": "Change Boolean Literal", "problem": "             ModelNode operation = createOpNode(\"subsystem=undertow/server=default-server/https-listener=https2\",\n                     ModelDescriptionConstants.REMOVE);\n            operation.get(OPERATION_HEADERS, ALLOW_RESOURCE_SERVICE_RESTART).set(true);\n             Utils.applyUpdate(operation, managementClient.getControllerClient());\n             operation = createOpNode(\"socket-binding-group=standard-sockets/socket-binding=https2\",", "fixed": "             ModelNode operation = createOpNode(\"subsystem=undertow/server=default-server/https-listener=https2\",\n                     ModelDescriptionConstants.REMOVE);\n            operation.get(OPERATION_HEADERS, ALLOW_RESOURCE_SERVICE_RESTART).set(false);\n             Utils.applyUpdate(operation, managementClient.getControllerClient());\n             operation = createOpNode(\"socket-binding-group=standard-sockets/socket-binding=https2\",", "sourceBeforeFix": "operation.get(OPERATION_HEADERS,ALLOW_RESOURCE_SERVICE_RESTART).set(true)", "sourceAfterFix": "operation.get(OPERATION_HEADERS,ALLOW_RESOURCE_SERVICE_RESTART).set(false)"}
{"fixCommitSHA1": "175ce3aa1fdf3ce5d8c4a6965edbfc6254d1488b", "projectName": "openhab.openhab", "bugType": "Change Numeric Literal", "problem": " \t\t\tfilter.setItemName(item.getName());\n \t\t\tfilter.setOrdering(Ordering.DESCENDING);\n\t\t\tfilter.setPageSize(3);\n \t\t\tint startPage = 0;\n \t\t\tfilter.setPageNumber(startPage);", "fixed": " \t\t\tfilter.setItemName(item.getName());\n \t\t\tfilter.setOrdering(Ordering.DESCENDING);\n\t\t\tfilter.setPageSize(1000);\n \t\t\tint startPage = 0;\n \t\t\tfilter.setPageNumber(startPage);", "sourceBeforeFix": "filter.setPageSize(3)", "sourceAfterFix": "filter.setPageSize(1000)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedGoogleCalendarStreamEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default GoogleCalendarStreamEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedGoogleCalendarStreamEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default GoogleCalendarStreamEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "c888434580c601ac9c4734e19d8eefac63518031", "projectName": "swagger-api.swagger-codegen", "bugType": "Change Identifier Used", "problem": "         return cp.isEnum || !languageSpecificPrimitives.contains(cp.baseType == null ? cp.dataType : cp.baseType);\n     }\n     private String getJSDocTypeWithBraces(CodegenOperation co) {\n         String jsDocType = getJSDocType(co);\n         return jsDocType == null ? null : \"{\" + jsDocType + \"}\";\n     }\n     private String getJSDocType(CodegenOperation co) {\n         String returnType = trimBrackets(co.returnType);", "fixed": "         return cp.isEnum || !languageSpecificPrimitives.contains(cp.baseType == null ? cp.dataType : cp.baseType);\n     }\n    \n     private String getJSDocType(CodegenOperation co) {\n         String returnType = trimBrackets(co.returnType);", "sourceBeforeFix": "getJSDocTypeWithBraces(operation)", "sourceAfterFix": "getJSDocType(operation)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface TikaEndpointBuilder\n            extends\n                EndpointProducerBuilder {\n         default AdvancedTikaEndpointBuilder advanced() {\n             return (AdvancedTikaEndpointBuilder) this;\n         }", "fixed": "     \n    public interface TikaEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedTikaEndpointBuilder advanced() {\n             return (AdvancedTikaEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "8309c8f182b1f7febfff37ad92d724d642f56f97", "projectName": "apache.hadoop", "bugType": "Change Modifier", "problem": "   protected FSNamesystem namesystem; \n   protected final Configuration conf;\n   protected NamenodeRole role;\n  private HAState state;\n   private final boolean haEnabled;\n   private final HAContext haContext;\n   protected boolean allowStaleStandbyReads;", "fixed": "   protected FSNamesystem namesystem; \n   protected final Configuration conf;\n   protected NamenodeRole role;\n  private volatile HAState state;\n   private final boolean haEnabled;\n   private final HAContext haContext;\n   protected boolean allowStaleStandbyReads;", "sourceBeforeFix": "2", "sourceAfterFix": "66"}
{"fixCommitSHA1": "04ad420f594bedd8cd5c40160d67585f70686a9c", "projectName": "aws.aws-sdk-java", "bugType": "Change Identifier Used", "problem": "             try {\n                 rawJsonContent = IOUtils.toString(httpResponse.getContent());\n             } catch (Exception e) {\n                LOG.error(\"Unable to read HTTP response content\", e);\n             }\n             return new JsonContent(rawJsonContent);", "fixed": "             try {\n                 rawJsonContent = IOUtils.toString(httpResponse.getContent());\n             } catch (Exception e) {\n                LOG.info(\"Unable to read HTTP response content\", e);\n             }\n             return new JsonContent(rawJsonContent);", "sourceBeforeFix": "LOG.error(\"Unable to unmarshall exception content\",e)", "sourceAfterFix": "LOG.info(\"Unable to unmarshall exception content\",e)"}
{"fixCommitSHA1": "68cd97ff6b0a506c2a2688c966c2a55870d6f466", "projectName": "dropwizard.dropwizard", "bugType": "Wrong Function Name", "problem": "         final HttpConnectionFactory http11 = buildHttpConnectionFactory(httpConfig);\n         final HTTP2ServerConnectionFactory http2c = new HTTP2CServerConnectionFactory(httpConfig);\n         http2c.setMaxConcurrentStreams(maxConcurrentStreams);\n        http2c.setInitialStreamSendWindow(initialStreamSendWindow);", "fixed": "         final HttpConnectionFactory http11 = buildHttpConnectionFactory(httpConfig);\n         final HTTP2ServerConnectionFactory http2c = new HTTP2CServerConnectionFactory(httpConfig);\n         http2c.setMaxConcurrentStreams(maxConcurrentStreams);\n        http2c.setInitialStreamRecvWindow(initialStreamSendWindow);", "sourceBeforeFix": "http2c.setInitialStreamSendWindow(initialStreamSendWindow)", "sourceAfterFix": "http2c.setInitialStreamRecvWindow(initialStreamSendWindow)"}
{"fixCommitSHA1": "a7f54a539a4c8f92f4895934480061a2ccbcd499", "projectName": "wildfly.wildfly", "bugType": "Wrong Function Name", "problem": "     }\n     private static void writeAttribute(XMLExtendedStreamWriter writer, ModelNode model, Attribute attribute) throws XMLStreamException {\n        attribute.getDefinition().getAttributeMarshaller().marshallAsAttribute(attribute.getDefinition(), model, true, writer);\n     }\n     private static void writeElement(XMLExtendedStreamWriter writer, ModelNode model, Attribute attribute) throws XMLStreamException {\n        attribute.getDefinition().getAttributeMarshaller().marshallAsElement(attribute.getDefinition(), model, true, writer);\n     }\n     private static void writeThreadPoolElements(XMLElement element, ThreadPoolResourceDefinition pool, XMLExtendedStreamWriter writer, ModelNode container) throws XMLStreamException {", "fixed": "     }\n     private static void writeAttribute(XMLExtendedStreamWriter writer, ModelNode model, Attribute attribute) throws XMLStreamException {\n        attribute.getDefinition().getMarshaller().marshallAsAttribute(attribute.getDefinition(), model, true, writer);\n     }\n     private static void writeElement(XMLExtendedStreamWriter writer, ModelNode model, Attribute attribute) throws XMLStreamException {\n        attribute.getDefinition().getMarshaller().marshallAsElement(attribute.getDefinition(), model, true, writer);\n     }\n     private static void writeThreadPoolElements(XMLElement element, ThreadPoolResourceDefinition pool, XMLExtendedStreamWriter writer, ModelNode container) throws XMLStreamException {", "sourceBeforeFix": "attribute.getDefinition().getAttributeMarshaller()", "sourceAfterFix": "attribute.getDefinition().getMarshaller()"}
{"fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "       } else {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           for (int i = 0; i < BLOCKS_PER_FILE; i ++) {\n             buf.DATA.get(mBuf.array());", "fixed": "       } else {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           for (int i = 0; i < BLOCKS_PER_FILE; i ++) {\n             buf.DATA.get(mBuf.array());", "sourceBeforeFix": "k < THREADS", "sourceAfterFix": "k < FILES"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedJBPMEndpointBuilder\n             extends\n                 AdvancedJBPMEndpointConsumerBuilder, AdvancedJBPMEndpointProducerBuilder {\n         default JBPMEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedJBPMEndpointBuilder\n             extends\n                 AdvancedJBPMEndpointConsumerBuilder, AdvancedJBPMEndpointProducerBuilder {\n         default JBPMEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "4665dcf9ab41c3c61cd42aad296ebfe518bfa003", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\n \tpublic void glDeleteTextures (int n, IntBuffer textures) {\n\t\tGL.glDeleteTexturesEXT(n, textures, Memory.getPosition(textures));\n \t}\n \tpublic void glDepthFunc (int func) {", "fixed": " \t}\n \tpublic void glDeleteTextures (int n, IntBuffer textures) {\n\t\tGL.glDeleteTextures(n, textures, Memory.getPosition(textures));\n \t}\n \tpublic void glDepthFunc (int func) {", "sourceBeforeFix": "GL.glGenTexturesEXT(n,textures,Memory.getPosition(textures))", "sourceAfterFix": "GL.glGenTextures(n,textures,Memory.getPosition(textures))"}
