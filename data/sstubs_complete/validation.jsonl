{"fixCommitSHA1": "099bf2014a8cd43c270c5900ce9d34689287d0ef", "projectName": "Alluxio.alluxio", "bugType": "Change Numeric Literal", "problem": "         LsCommand.STATE_FILE_IN_MEMORY, testUser, testUser, files[0].getPermission(),\n         files[0].isFolder());\n     expected +=\n        getLsResultStr(\"/testRoot/testDir\", files[1].getCreationTimeMs(), 0, LsCommand.STATE_FOLDER,\n             testUser, testUser, files[1].getPermission(), files[1].isFolder());\n     expected += getLsResultStr(\"/testRoot/testDir/testFileB\", files[2].getCreationTimeMs(), 20,\n         LsCommand.STATE_FILE_IN_MEMORY, testUser, testUser, files[2].getPermission(),", "fixed": "         LsCommand.STATE_FILE_IN_MEMORY, testUser, testUser, files[0].getPermission(),\n         files[0].isFolder());\n     expected +=\n        getLsResultStr(\"/testRoot/testDir\", files[1].getCreationTimeMs(), 1, LsCommand.STATE_FOLDER,\n             testUser, testUser, files[1].getPermission(), files[1].isFolder());\n     expected += getLsResultStr(\"/testRoot/testDir/testFileB\", files[2].getCreationTimeMs(), 20,\n         LsCommand.STATE_FILE_IN_MEMORY, testUser, testUser, files[2].getPermission(),", "sourceBeforeFix": "getLsNoAclResultStr(\"/testRoot/testDir\",files[1].getCreationTimeMs(),0,LsCommand.STATE_FOLDER)", "sourceAfterFix": "getLsNoAclResultStr(\"/testRoot/testDir\",files[1].getCreationTimeMs(),1,LsCommand.STATE_FOLDER)"}
{"fixCommitSHA1": "9bcf32ab62047ea4913d9cde9f9e73e7acbfcda6", "projectName": "Graylog2.graylog2-server", "bugType": "Change Numeric Literal", "problem": "         assertEquals(1, serverStub.callsToProcessBufferInserter);\n         assertNull(lm.getField(\"id\"));\n         assertEquals(\"foo\", lm.getField(\"_something\"));\n        assertEquals(8, lm.getFields().size());\n     }\n     @Test", "fixed": "         assertEquals(1, serverStub.callsToProcessBufferInserter);\n         assertNull(lm.getField(\"id\"));\n         assertEquals(\"foo\", lm.getField(\"_something\"));\n        assertEquals(5, lm.getFields().size());\n     }\n     @Test", "sourceBeforeFix": "assertEquals(8,lm.getFields().size())", "sourceAfterFix": "assertEquals(5,lm.getFields().size())"}
{"fixCommitSHA1": "5f78aa9c52a2f28419a5fa646ab28ee273e17e6a", "projectName": "hazelcast.hazelcast", "bugType": "Change Modifier", "problem": "     }\n     @Override\n    public Connection getOrConnect(Address address, boolean silent) {\n         return getOrConnect(address);\n     }\n    public void block(Address address) {\n         blockedAddresses.add(address);\n         Connection connection = getConnection(address);\n         if (connection != null) {", "fixed": "     }\n     @Override\n    public synchronized Connection getOrConnect(Address address, boolean silent) {\n         return getOrConnect(address);\n     }\n    public synchronized void block(Address address) {\n         blockedAddresses.add(address);\n         Connection connection = getConnection(address);\n         if (connection != null) {", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "be32765c0ef5c0c0b48f8c649e971595a439013a", "projectName": "gephi.gephi", "bugType": "Change Caller in Function Call", "problem": "         if (sizeModeClass.equals(\"FixedSizeMode\")) {\n             sizeMode = VizController.getInstance().getTextManager().getSizeModes()[0];\n        } else if (colorModeClass.equals(\"ProportionalSizeMode\")) {\n             sizeMode = VizController.getInstance().getTextManager().getSizeModes()[2];\n        } else if (colorModeClass.equals(\"ScaledSizeMode\")) {\n             sizeMode = VizController.getInstance().getTextManager().getSizeModes()[1];\n         }", "fixed": "         if (sizeModeClass.equals(\"FixedSizeMode\")) {\n             sizeMode = VizController.getInstance().getTextManager().getSizeModes()[0];\n        } else if (sizeModeClass.equals(\"ProportionalSizeMode\")) {\n             sizeMode = VizController.getInstance().getTextManager().getSizeModes()[2];\n        } else if (sizeModeClass.equals(\"ScaledSizeMode\")) {\n             sizeMode = VizController.getInstance().getTextManager().getSizeModes()[1];\n         }", "sourceBeforeFix": "colorModeClass.equals(\"ScaledSizeMode\")", "sourceAfterFix": "sizeModeClass.equals(\"ScaledSizeMode\")"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": " import org.jboss.logging.Messages;\n /**\n * This module is using message IDs in the range 10900-10999. This file is using the subset 10975-10999 for domain\n* controller non-logger messages. See http:\n  * JBAS message id blocks.\n  * <p/>", "fixed": " import org.jboss.logging.Messages;\n /**\n * This module is using message IDs in the range 10800-10899. This file is using the subset 10830-10899 for domain\n* controller non-logger messages. See http:\n  * JBAS message id blocks.\n  * <p/>", "sourceBeforeFix": "id=15845", "sourceAfterFix": "id=10845"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8f42f10cb9c29872b83f2a3595248c8c9f28326d", "projectName": "Bukkit.Bukkit", "bugType": "Same Function More Args", "problem": "             playerLocation.setY(y);\n             playerLocation.setZ(z);\n            player.teleport(playerLocation);\n             Command.broadcastCommandMessage(sender, String.format(\"Teleported %s to %.2f, %.2f, %.2f\", player.getDisplayName(), x, y, z));\n         }\n         return true;", "fixed": "             playerLocation.setY(y);\n             playerLocation.setZ(z);\n            player.teleport(playerLocation, TeleportCause.COMMAND);\n             Command.broadcastCommandMessage(sender, String.format(\"Teleported %s to %.2f, %.2f, %.2f\", player.getDisplayName(), x, y, z));\n         }\n         return true;", "sourceBeforeFix": "player.teleport(playerLocation)", "sourceAfterFix": "player.teleport(playerLocation,TeleportCause.COMMAND)"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     }, tags={ \"pet\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid pet value\", response = Void.class) })\n    void deletePet(@PathParam(\"petId\") @ApiParam(\"Pet id to delete\") Long petId,@HeaderParam(\"api_key\")   String apiKey);\n     @GET\n     @Path(\"/findByStatus\")", "fixed": "     }, tags={ \"pet\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid pet value\", response = Void.class) })\n    void deletePet(@PathParam(\"petId\") @ApiParam(\"Pet id to delete\") Long petId,@HeaderParam(\"api_key\")   String apiKey) throws Exception;\n     @GET\n     @Path(\"/findByStatus\")", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15867, value = \"Cannot use %s with the same value for parameters %s and %s. \" +\n             \"Use %s to redeploy the same content or %s to replace content with a new version with the same name.\")\n     String cannotUseSameValueForParameters(String opName, String param1, String param2, String redeployOpName, String replaceOpName);", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10867, value = \"Cannot use %s with the same value for parameters %s and %s. \" +\n             \"Use %s to redeploy the same content or %s to replace content with a new version with the same name.\")\n     String cannotUseSameValueForParameters(String opName, String param1, String param2, String redeployOpName, String replaceOpName);", "sourceBeforeFix": "id=15838", "sourceAfterFix": "id=10838"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e1626ef3aeecb1ccf7acf4056fb7bcf23243be25", "projectName": "apache.hive", "bugType": "Change Numeric Literal", "problem": "     SignableVertexSpec vertexProto = builder.build();\n    TaskSpec taskSpec = Converters.getTaskSpecfromProto(vertexProto, 0, 0, null);\n     assertEquals(\"dagName\", taskSpec.getDAGName());\n     assertEquals(\"vertexName\", taskSpec.getVertexName());", "fixed": "     SignableVertexSpec vertexProto = builder.build();\n    TaskSpec taskSpec = Converters.getTaskSpecfromProto(vertexProto, 0, 0, tezTaskAttemptId);\n     assertEquals(\"dagName\", taskSpec.getDAGName());\n     assertEquals(\"vertexName\", taskSpec.getVertexName());", "sourceBeforeFix": "timeout=5000", "sourceAfterFix": "timeout=10000"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "dbc0ca8d1cb03f2da2c8fc0062e5d4b681fef11a", "projectName": "hazelcast.hazelcast", "bugType": "Same Function Less Args", "problem": "         final NormalResponse normalResponse = new NormalResponse(null, 1, 0, false);\n         Data data = serializationService.toData(normalResponse);\n        final Packet packet = new Packet(data, 0, serializationService.getPortableContext());\n         packet.setHeader(Packet.HEADER_RESPONSE);\n         packet.setHeader(Packet.HEADER_OP);\n         executor.execute(packet);", "fixed": "         final NormalResponse normalResponse = new NormalResponse(null, 1, 0, false);\n         Data data = serializationService.toData(normalResponse);\n        final Packet packet = new Packet(data, 0);\n         packet.setHeader(Packet.HEADER_RESPONSE);\n         packet.setHeader(Packet.HEADER_OP);\n         executor.execute(packet);", "sourceBeforeFix": "new Packet(data,0,serializationService.getPortableContext())", "sourceAfterFix": "new Packet(data,0)"}
{"fixCommitSHA1": "93a9fb352d11fb796964cbe4650b4a247d908b58", "projectName": "naver.pinpoint", "bugType": "Change Modifier", "problem": "     }\n    private class Sl4jCommonLogger implements CommonLogger {\n         private final Logger logger;", "fixed": "     }\n    private static class Sl4jCommonLogger implements CommonLogger {\n         private final Logger logger;", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "38a6c7171c5c3d76d348d8db8c550412f59b5e7d", "projectName": "pardom.ActiveAndroid", "bugType": "Change Identifier Used", "problem": " \t\tnew Delete().from(type).where(\"Id=?\", id).execute();\n \t}\n\tpublic static <T extends Model> T load(Class<? extends Model> type, long id) {\n \t\treturn new Select().from(type).where(\"Id=?\", id).executeSingle();\n \t}", "fixed": " \t\tnew Delete().from(type).where(\"Id=?\", id).execute();\n \t}\n\tpublic static <T extends Model> T load(Class<T> type, long id) {\n \t\treturn new Select().from(type).where(\"Id=?\", id).executeSingle();\n \t}", "sourceBeforeFix": "E extends Model", "sourceAfterFix": "T extends Model"}
{"fixCommitSHA1": "00644912992eceb3de7d2dc0213a05bf2844c1b2", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "                 } catch (InterruptedException e) {\n                     e.printStackTrace();\n                 }\n                hz1.getLifecycleService().terminate();\n             }\n         };", "fixed": "                 } catch (InterruptedException e) {\n                     e.printStackTrace();\n                 }\n                hz1.getLifecycleService().shutdown();\n             }\n         };", "sourceBeforeFix": "hz1.getLifecycleService().terminate()", "sourceAfterFix": "hz1.getLifecycleService().shutdown()"}
{"fixCommitSHA1": "f3a240337ca4534b2a61fc9f004b56472c0e1371", "projectName": "openhab.openhab", "bugType": "Wrong Function Name", "problem": "     logger.debug(\"got a query\");\n     if (!isProperlyConfigured) {\n      logger.error(\"Configuration for influxdb not yet loaded or broken.\");\n       return Collections.emptyList();\n     }\n     if (!isConnected()) {\n      logger.error(\"InfluxDB is not yet connected\");\n       return Collections.emptyList();\n     }", "fixed": "     logger.debug(\"got a query\");\n     if (!isProperlyConfigured) {\n      logger.warn(\"Configuration for influxdb not yet loaded or broken.\");\n       return Collections.emptyList();\n     }\n     if (!isConnected()) {\n      logger.warn(\"InfluxDB is not yet connected\");\n       return Collections.emptyList();\n     }", "sourceBeforeFix": "logger.error(\"Configuration for influxdb not yet loaded or broken.\")", "sourceAfterFix": "logger.warn(\"Configuration for influxdb not yet loaded or broken.\")"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform2iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toIntBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform3f (int location, float x, float y, float z) {\r", "fixed": " \t}\r\n \tpublic void glUniform2iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform2iv(location, v);\r\n \t}\r\n \tpublic void glUniform2iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform2iv(location, toIntBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform3f (int location, float x, float y, float z) {\r", "sourceBeforeFix": "GL20.glUniform3(location,v)", "sourceAfterFix": "GL20.glUniform3fv(location,v)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites(int page) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"favorites.json\", \"page\", String.valueOf(page), true));\n     }\n     /**", "fixed": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites(int page) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"favorites.json\", \"page\", String.valueOf(page), true));\n     }\n     /**", "sourceBeforeFix": "SavedSearch.constructSavedSearches(get(getBaseURL() + \"saved_searches.json\",true))", "sourceAfterFix": "SavedSearch.createSavedSearchList(get(getBaseURL() + \"saved_searches.json\",true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15846, value = \"Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.\")\n     String invalidRolloutPlanLess(String name, String propertyName, int value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10846, value = \"Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.\")\n     String invalidRolloutPlanLess(String name, String propertyName, int value);\n     /**", "sourceBeforeFix": "id=15867", "sourceAfterFix": "id=10867"}
{"fixCommitSHA1": "55afa119b8685a70ea6335e973814a345e99e2bb", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Change Modifier", "problem": "   final String key, value;\n  Parameter(String key, String value) {\n     this.key = key;\n     this.value = value;\n   }", "fixed": "   final String key, value;\n  public Parameter(String key, String value) {\n     this.key = key;\n     this.value = value;\n   }", "sourceBeforeFix": "0", "sourceAfterFix": "1"}
{"fixCommitSHA1": "a35860eadb4400f069e306ccd76f1a19ecfb3ba1", "projectName": "google.guava", "bugType": "Change Identifier Used", "problem": "   @SuppressWarnings(\"unchecked\")\n   @Override\n  public void removePredecessor(Object node) {\n     Object previousValue = adjacentNodeValues.get(node);\n     if (previousValue == PRED) {\n       adjacentNodeValues.remove(node);", "fixed": "   @SuppressWarnings(\"unchecked\")\n   @Override\n  public void removePredecessor(N node) {\n     Object previousValue = adjacentNodeValues.get(node);\n     if (previousValue == PRED) {\n       adjacentNodeValues.remove(node);", "sourceBeforeFix": "Object node", "sourceAfterFix": "N node"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n* @see java.lang.Object\n \t */\n\tpublic int hash(T record);\n \t/**\n \t * Sets the given element as the comparison reference for future calls to", "fixed": " \t * \n* @see java.lang.Object\n \t */\n\tpublic abstract int hash(T record);\n \t/**\n \t * Sets the given element as the comparison reference for future calls to", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15853, value = \"Unexpected initial path key %s\")\n     IllegalStateException unexpectedInitialPathKey(String key);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10853, value = \"Unexpected initial path key %s\")\n     IllegalStateException unexpectedInitialPathKey(String key);\n     /**", "sourceBeforeFix": "id=15869", "sourceAfterFix": "id=10869"}
{"fixCommitSHA1": "0592e84a3c07b4451e81d2eecc0c51af384858d2", "projectName": "alibaba.dubbo", "bugType": "Change Identifier Used", "problem": "             new LinkedBlockingQueue<Runnable>(100),\n             new NamedThreadFactory(\"Close-ExecutorService-Timer\", true));\n    public static boolean isShutdown(Executor executor) {\n         if (executor instanceof ExecutorService) {\n            if (((ExecutorService) executor).isShutdown()) {\n                 return true;\n             }\n         }", "fixed": "             new LinkedBlockingQueue<Runnable>(100),\n             new NamedThreadFactory(\"Close-ExecutorService-Timer\", true));\n    public static boolean isTerminated(Executor executor) {\n         if (executor instanceof ExecutorService) {\n            if (((ExecutorService) executor).isTerminated()) {\n                 return true;\n             }\n         }", "sourceBeforeFix": "((ExecutorService)executor).isShutdown()", "sourceAfterFix": "((ExecutorService)executor).isTerminated()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15839, value = \"Operation failed or was rolled back on all servers.\")\n     String operationFailedOrRolledBack();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10839, value = \"Operation failed or was rolled back on all servers.\")\n     String operationFailedOrRolledBack();\n     /**", "sourceBeforeFix": "id=15859", "sourceAfterFix": "id=10859"}
{"fixCommitSHA1": "f94694c2231e5c1025b76bcfe0337304a76ec94a", "projectName": "checkstyle.checkstyle", "bugType": "Wrong Function Name", "problem": "                     if (getColumnClass(counter) == ParseTreeTableModel.class) {\n                         final MouseEvent mouseEvent = (MouseEvent) event;\n                         final MouseEvent newMouseEvent = new MouseEvent(tree, mouseEvent.getID(),\n                                mouseEvent.getWhen(), mouseEvent.getModifiers(),\n                                 mouseEvent.getX() - getCellRect(0, counter, true).x,\n                                 mouseEvent.getY(), mouseEvent.getClickCount(),\n                                 mouseEvent.isPopupTrigger());", "fixed": "                     if (getColumnClass(counter) == ParseTreeTableModel.class) {\n                         final MouseEvent mouseEvent = (MouseEvent) event;\n                         final MouseEvent newMouseEvent = new MouseEvent(tree, mouseEvent.getID(),\n                                mouseEvent.getWhen(), mouseEvent.getModifiersEx(),\n                                 mouseEvent.getX() - getCellRect(0, counter, true).x,\n                                 mouseEvent.getY(), mouseEvent.getClickCount(),\n                                 mouseEvent.isPopupTrigger());", "sourceBeforeFix": "mouseEvent.getModifiers()", "sourceAfterFix": "mouseEvent.getModifiersEx()"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should fail if global property being updated does not already exist\n \t * @should update a global property whose typed value is handled by a custom datatype\n \t */\n\tpublic void updateGlobalProperty(String propertyName, String propertyValue) throws IllegalStateException;\n \t/**\n \t * Save the given global property to the database", "fixed": " \t * @should fail if global property being updated does not already exist\n \t * @should update a global property whose typed value is handled by a custom datatype\n \t */\n\tpublic void updateGlobalProperty(String propertyName, String propertyValue);\n \t/**\n \t * Save the given global property to the database", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fc80cf0f323b8f45dd7e80f5a4cc814ae6d691a7", "projectName": "druid-io.druid", "bugType": "Same Function More Args", "problem": "   public void testMoveException() throws Exception\n   {\n     MockStorageService mockS3Client = new MockStorageService();\n    S3DataSegmentMover mover = new S3DataSegmentMover(mockS3Client);\n     mover.move(\n         sourceSegment,", "fixed": "   public void testMoveException() throws Exception\n   {\n     MockStorageService mockS3Client = new MockStorageService();\n    S3DataSegmentMover mover = new S3DataSegmentMover(mockS3Client, new S3DataSegmentPusherConfig());\n     mover.move(\n         sourceSegment,", "sourceBeforeFix": "new S3DataSegmentMover(mockS3Client)", "sourceAfterFix": "new S3DataSegmentMover(mockS3Client,new S3DataSegmentPusherConfig())"}
{"fixCommitSHA1": "dfdec00456bd035f37996a190dd9b97a6ed5af0f", "projectName": "apache.camel", "bugType": "Same Function More Args", "problem": "         trackingObj = dbCol.findOne(filter);\n         if (trackingObj == null) {\n             dbCol.insert(filter, WriteConcern.SAFE);\n            trackingObj = dbCol.findOne();\n         }\n         trackingObj = new BasicDBObject(\"_id\", trackingObj.get(\"_id\"));", "fixed": "         trackingObj = dbCol.findOne(filter);\n         if (trackingObj == null) {\n             dbCol.insert(filter, WriteConcern.SAFE);\n            trackingObj = dbCol.findOne(filter);\n         }\n         trackingObj = new BasicDBObject(\"_id\", trackingObj.get(\"_id\"));", "sourceBeforeFix": "dbCol.findOne()", "sourceAfterFix": "dbCol.findOne(filter)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 15872, value = \"Invalid code %d\")\n     IllegalArgumentException invalidCode(int code);\n }", "fixed": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 10872, value = \"Invalid code %d\")\n     IllegalArgumentException invalidCode(int code);\n }", "sourceBeforeFix": "id=15835", "sourceAfterFix": "id=10835"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsText(String path, int batchSize, OUT endTuple) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), batchSize, endTuple);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsText(String path, int batchSize, OUT endTuple) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), batchSize, endTuple);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "20d8ac67dc04e9e0c4484af769b156bcd75ef00b", "projectName": "alibaba.canal", "bugType": "Missing Throws Exception", "problem": "     private SocketChannel channel;\r\n    public MysqlQueryExecutor(MysqlConnector connector){\r\n         if (!connector.isConnected()) {\r\n            throw new RuntimeException(\"should execute connector.connect() first\");\r\n         }\r\n         this.channel = connector.getChannel();\r", "fixed": "     private SocketChannel channel;\r\n    public MysqlQueryExecutor(MysqlConnector connector) throws IOException{\r\n         if (!connector.isConnected()) {\r\n            throw new IOException(\"should execute connector.connect() first\");\r\n         }\r\n         this.channel = connector.getChannel();\r", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "9716d2ae673a576cb345c3bfb24cf71654d8f112", "projectName": "openhab.openhab", "bugType": "Change Identifier Used", "problem": " \t\t\tString payload, String payloadType, boolean retry)\n \t\t\tthrows IOException, InvalidLoginException {\n\t\tlogger.debug(\"Requsting URL {}\", url);\n \t\tString dataString = executeUrl(method, url, header,\n \t\t\t\tpayload == null ? null : IOUtils.toInputStream(payload),\n \t\t\t\tpayloadType, timeout);\n\t\tlogger.debug(\"Received MyQ  JSON: {}\", dataString);\n \t\tif (dataString == null) {\n \t\t\tthrow new IOException(\"Null response from MyQ server\");", "fixed": " \t\t\tString payload, String payloadType, boolean retry)\n \t\t\tthrows IOException, InvalidLoginException {\n\t\tlogger.trace(\"Requsting URL {}\", url);\n \t\tString dataString = executeUrl(method, url, header,\n \t\t\t\tpayload == null ? null : IOUtils.toInputStream(payload),\n \t\t\t\tpayloadType, timeout);\n\t\tlogger.trace(\"Received MyQ  JSON: {}\", dataString);\n \t\tif (dataString == null) {\n \t\t\tthrow new IOException(\"Null response from MyQ server\");", "sourceBeforeFix": "logger.debug(\"attempting to login\")", "sourceAfterFix": "logger.trace(\"attempting to login\")"}
{"fixCommitSHA1": "7dac3f1da5a04390d597b09fcc03ad08892a99d1", "projectName": "Graylog2.graylog2-server", "bugType": "Change Identifier Used", "problem": "         return Sets.newHashSet();\n     }\n    public int total() {\n         try {\n            return Cache.getOrElse(TOTAL_CNT_CACHE_KEY, new Callable<Integer>() {\n                 @Override\n                public Integer call() throws Exception {\n                     MessageCountResponse response = api.get(MessageCountResponse.class).path(\"/count/total\").execute();\n                     return response.events;\n                 }", "fixed": "         return Sets.newHashSet();\n     }\n    public long total() {\n         try {\n            return Cache.getOrElse(TOTAL_CNT_CACHE_KEY, new Callable<Long>() {\n                 @Override\n                public Long call() throws Exception {\n                     MessageCountResponse response = api.get(MessageCountResponse.class).path(\"/count/total\").execute();\n                     return response.events;\n                 }", "sourceBeforeFix": "Callable<Integer>", "sourceAfterFix": "Callable<Long>"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedZooKeeperMasterEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default ZooKeeperMasterEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedZooKeeperMasterEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default ZooKeeperMasterEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "projectName": "Alluxio.alluxio", "bugType": "Change Operand ", "problem": "       } else {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           for (int i = 0; i < BLOCKS_PER_FILE; i ++) {\n             buf.DATA.get(mBuf.array());", "fixed": "       } else {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           for (int i = 0; i < BLOCKS_PER_FILE; i ++) {\n             buf.DATA.get(mBuf.array());", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedHazelcastMultimapEndpointBuilder\n             extends\n                 AdvancedHazelcastMultimapEndpointConsumerBuilder, AdvancedHazelcastMultimapEndpointProducerBuilder {\n         default HazelcastMultimapEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedHazelcastMultimapEndpointBuilder\n             extends\n                 AdvancedHazelcastMultimapEndpointConsumerBuilder, AdvancedHazelcastMultimapEndpointProducerBuilder {\n         default HazelcastMultimapEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "099bf2014a8cd43c270c5900ce9d34689287d0ef", "projectName": "Alluxio.alluxio", "bugType": "Change Numeric Literal", "problem": "         LsCommand.STATE_FILE_IN_MEMORY, testUser, testUser, files[0].getPermission(),\n         files[0].isFolder());\n     expected +=\n        getLsResultStr(\"/testRoot/testDir\", files[1].getCreationTimeMs(), 0, LsCommand.STATE_FOLDER,\n             testUser, testUser, files[1].getPermission(), files[1].isFolder());\n     expected += getLsResultStr(\"/testRoot/testFileC\", files[3].getCreationTimeMs(), 30,\n         LsCommand.STATE_FILE_NOT_IN_MEMORY, testUser, testUser, files[3].getPermission(),", "fixed": "         LsCommand.STATE_FILE_IN_MEMORY, testUser, testUser, files[0].getPermission(),\n         files[0].isFolder());\n     expected +=\n        getLsResultStr(\"/testRoot/testDir\", files[1].getCreationTimeMs(), 1, LsCommand.STATE_FOLDER,\n             testUser, testUser, files[1].getPermission(), files[1].isFolder());\n     expected += getLsResultStr(\"/testRoot/testFileC\", files[3].getCreationTimeMs(), 30,\n         LsCommand.STATE_FILE_NOT_IN_MEMORY, testUser, testUser, files[3].getPermission(),", "sourceBeforeFix": "getLsNoAclResultStr(\"/testRoot/testDir\",files[1].getCreationTimeMs(),0,LsCommand.STATE_FOLDER)", "sourceAfterFix": "getLsNoAclResultStr(\"/testRoot/testDir\",files[1].getCreationTimeMs(),1,LsCommand.STATE_FOLDER)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "df7a39a682e60326a8db7542da54d8f2308e5df1", "projectName": "druid-io.druid", "bugType": "Change Numeric Literal", "problem": "                               if (multiValueRow.size() == 0) {\n                                 return null;\n                               } else if (multiValueRow.size() == 1) {\n                                return columnVals.lookupName(multiValueRow.get(1));\n                               } else {\n                                 final String[] strings = new String[multiValueRow.size()];\n                                 for (int i = 0 ; i < multiValueRow.size() ; i++) {", "fixed": "                               if (multiValueRow.size() == 0) {\n                                 return null;\n                               } else if (multiValueRow.size() == 1) {\n                                return columnVals.lookupName(multiValueRow.get(0));\n                               } else {\n                                 final String[] strings = new String[multiValueRow.size()];\n                                 for (int i = 0 ; i < multiValueRow.size() ; i++) {", "sourceBeforeFix": "multiValueRow.get(1)", "sourceAfterFix": "multiValueRow.get(0)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "6b39c5db276e94dd4295254ac279e482703716af", "projectName": "openhab.openhab", "bugType": "Change Identifier Used", "problem": " \t\t\t} else if (e instanceof TimeoutException) {\n \t\t\t\tlogger.debug(\"[{}]: Websocket timeout error\", connection.getHost());\n \t\t\t} else {\n\t\t\t\tlogger.error(\"[{}]: Websocket error: {}\", connection.getHost(), e.getMessage());\n \t\t\t}\n \t\t}", "fixed": " \t\t\t} else if (e instanceof TimeoutException) {\n \t\t\t\tlogger.debug(\"[{}]: Websocket timeout error\", connection.getHost());\n \t\t\t} else {\n\t\t\t\tlogger.debug(\"[{}]: Websocket error: {}\", connection.getHost(), e.getMessage());\n \t\t\t}\n \t\t}", "sourceBeforeFix": "logger.error(\"[{}]: Websocket error: {}\",connection.getHost(),e.getMessage())", "sourceAfterFix": "logger.debug(\"[{}]: Websocket error: {}\",connection.getHost(),e.getMessage())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "0b3166b35fac48f68ba84f1110421d99c4222244", "projectName": "openhab.openhab", "bugType": "Change Numeric Literal", "problem": "     @Override\n     public byte[] decodeMessage() {\n        byte[] data = new byte[17];\n         data[0] = 0x11;\n         data[1] = RFXComBaseMessage.PacketType.ENERGY.toByte();", "fixed": "     @Override\n     public byte[] decodeMessage() {\n        byte[] data = new byte[18];\n         data[0] = 0x11;\n         data[1] = RFXComBaseMessage.PacketType.ENERGY.toByte();", "sourceBeforeFix": "new byte[17]", "sourceAfterFix": "new byte[18]"}
{"fixCommitSHA1": "73a03b5e232d8f7049a03361e0454cb2eecb90c7", "projectName": "hazelcast.hazelcast", "bugType": "Change Numeric Literal", "problem": "         };\n         thread.start();\n        instance2.getLifecycleService().shutdown();\n         semaphore.release();\n         HazelcastInstance instance3 = factory.newHazelcastInstance();", "fixed": "         };\n         thread.start();\n        instance2.shutdown();\n         semaphore.release();\n         HazelcastInstance instance3 = factory.newHazelcastInstance();", "sourceBeforeFix": "timeout=30000", "sourceAfterFix": "timeout=120000"}
{"fixCommitSHA1": "fdb0411ff888217d8accbe07c1b916bbb780bd68", "projectName": "hazelcast.hazelcast", "bugType": "Change Boolean Literal", "problem": "             }\r\n             final InetAddress inetAddress = InetAddress.getByName(currentAddress);\r\n             ServerSocket serverSocket = serverSocketChannel.socket();\r\n            serverSocket.setReuseAddress(false);\r\n             InetSocketAddress isa;\r\n             int port = config.getPort();\r", "fixed": "             }\r\n             final InetAddress inetAddress = InetAddress.getByName(currentAddress);\r\n             ServerSocket serverSocket = serverSocketChannel.socket();\r\n            \r\n            serverSocket.setReuseAddress(true);\r\n             InetSocketAddress isa;\r\n             int port = config.getPort();\r", "sourceBeforeFix": "serverSocket.setReuseAddress(false)", "sourceAfterFix": "serverSocket.setReuseAddress(true)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8097cb4e299f056973c04abeaad879eb55f44775", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "                 } catch (InterruptedException e) {\n                     e.printStackTrace();\n                 }\n                hz1.getLifecycleService().terminate();\n             }\n         };", "fixed": "                 } catch (InterruptedException e) {\n                     e.printStackTrace();\n                 }\n                hz1.getLifecycleService().shutdown();\n             }\n         };", "sourceBeforeFix": "hz1.getLifecycleService().terminate()", "sourceAfterFix": "hz1.getLifecycleService().shutdown()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     return additionalReplacements;\n   }\n  private final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     return additionalReplacements;\n   }\n  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedKMSEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default KMSEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedKMSEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default KMSEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "eb008892d5d730c4c3c14991ae19650d010f0547", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "           break;\n         case Token.CASE:\n           if (controlCanExit(n.getFirstChild())) {\n            compiler.report(JSError.make(currentStatement, Es6ToEs3Converter.CANNOT_CONVERT_YET,\n               \"Case statements that contain yields\"));\n             return false;\n           }", "fixed": "           break;\n         case Token.CASE:\n           if (controlCanExit(n.getFirstChild())) {\n            compiler.report(JSError.make(n, Es6ToEs3Converter.CANNOT_CONVERT_YET,\n               \"Case statements that contain yields\"));\n             return false;\n           }", "sourceBeforeFix": "JSError.make(currentStatement,Es6ToEs3Converter.CANNOT_CONVERT,\"Undecomposable expression\")", "sourceAfterFix": "JSError.make(n,Es6ToEs3Converter.CANNOT_CONVERT,\"Undecomposable expression\")"}
{"fixCommitSHA1": "2fadb63b063757fcdddcbfee0514252d8cbc2433", "projectName": "libgdx.libgdx", "bugType": "Change Modifier", "problem": " \tpublic static class Parameters extends AssetLoaderParameters<TiledMap> {\n \t\t\n\t\tboolean yUp = true;\n \t}\n \tprotected static final int FLAG_FLIP_HORIZONTALLY = 0x80000000;", "fixed": " \tpublic static class Parameters extends AssetLoaderParameters<TiledMap> {\n \t\t\n\t\tpublic boolean yUp = true;\n \t}\n \tprotected static final int FLAG_FLIP_HORIZONTALLY = 0x80000000;", "sourceBeforeFix": "0", "sourceAfterFix": "1"}
{"fixCommitSHA1": "0e2a0eede5bf85f3c1f64e5752501eddf9ab7202", "projectName": "google.guava", "bugType": "Change Identifier Used", "problem": "     CONSTANT_VALUES_PAIRED_STATS = accumulator.snapshot();\n   }\n  static final List<PairedStats> ALL_PAIRED_STATS =\n       ImmutableList.of(\n           EMPTY_PAIRED_STATS,\n           ONE_VALUE_PAIRED_STATS,", "fixed": "     CONSTANT_VALUES_PAIRED_STATS = accumulator.snapshot();\n   }\n  static final ImmutableList<PairedStats> ALL_PAIRED_STATS =\n       ImmutableList.of(\n           EMPTY_PAIRED_STATS,\n           ONE_VALUE_PAIRED_STATS,", "sourceBeforeFix": "List<Stats>", "sourceAfterFix": "ImmutableList<Stats>"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15862, value = \"Invalid '%s' value: %d, the maximum index is %d\")\n     String invalidValue(String name, int value, int maxIndex);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10862, value = \"Invalid '%s' value: %d, the maximum index is %d\")\n     String invalidValue(String name, int value, int maxIndex);\n     /**", "sourceBeforeFix": "id=15831", "sourceAfterFix": "id=10831"}
{"fixCommitSHA1": "2bebfdb7769796ed8adb1815a3319135456de196", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         assertMockEndpointsSatisfied();\n        Thread.sleep(200);\n         File local = new File(\"target/lwd/hello.txt\").getAbsoluteFile();", "fixed": "         assertMockEndpointsSatisfied();\n        Thread.sleep(2000);\n         File local = new File(\"target/lwd/hello.txt\").getAbsoluteFile();", "sourceBeforeFix": "Thread.sleep(200)", "sourceAfterFix": "Thread.sleep(2000)"}
{"fixCommitSHA1": "4b484774d8da196c30b41d0d20c0274276c94498", "projectName": "neo4j.neo4j", "bugType": "Wrong Function Name", "problem": "     public GraphDatabaseService newHighlyAvailableDatabase( String path )\n     {\n        return newEmbeddedDatabaseBuilder( path ).newGraphDatabase();\n     }\n     public GraphDatabaseBuilder newHighlyAvailableDatabaseBuilder( final String path )", "fixed": "     public GraphDatabaseService newHighlyAvailableDatabase( String path )\n     {\n        return newHighlyAvailableDatabaseBuilder( path ).newGraphDatabase();\n     }\n     public GraphDatabaseBuilder newHighlyAvailableDatabaseBuilder( final String path )", "sourceBeforeFix": "newEmbeddedDatabaseBuilder(path)", "sourceAfterFix": "newHighlyAvailableDatabaseBuilder(path)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface ServerEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedServerEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface ServerEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedServerEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "038ea1803bae1cf3be279b36395b4de4e0ff39b5", "projectName": "openhab.openhab", "bugType": "Wrong Function Name", "problem": " \t\t\tString payload, String payloadType, boolean retry)\n \t\t\tthrows IOException, InvalidLoginException {\n\t\tlogger.debug(\"Requsting URL {}\", url);\n \t\tString dataString = executeUrl(method, url, header,\n \t\t\t\tpayload == null ? null : IOUtils.toInputStream(payload),\n \t\t\t\tpayloadType, timeout);\n\t\tlogger.debug(\"Received MyQ  JSON: {}\", dataString);\n \t\tif (dataString == null) {\n \t\t\tthrow new IOException(\"Null response from MyQ server\");", "fixed": " \t\t\tString payload, String payloadType, boolean retry)\n \t\t\tthrows IOException, InvalidLoginException {\n\t\tlogger.trace(\"Requsting URL {}\", url);\n \t\tString dataString = executeUrl(method, url, header,\n \t\t\t\tpayload == null ? null : IOUtils.toInputStream(payload),\n \t\t\t\tpayloadType, timeout);\n\t\tlogger.trace(\"Received MyQ  JSON: {}\", dataString);\n \t\tif (dataString == null) {\n \t\t\tthrow new IOException(\"Null response from MyQ server\");", "sourceBeforeFix": "logger.debug(\"attempting to login\")", "sourceAfterFix": "logger.trace(\"attempting to login\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "fixed": "   }\n   \n  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should save properties with case difference only\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_GLOBAL_PROPERTIES)\n\tpublic List<GlobalProperty> saveGlobalProperties(List<GlobalProperty> props) throws APIException;\n \t/**\n \t * Completely remove the given global property from the database", "fixed": " \t * @should save properties with case difference only\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_GLOBAL_PROPERTIES)\n\tpublic List<GlobalProperty> saveGlobalProperties(List<GlobalProperty> props);\n \t/**\n \t * Completely remove the given global property from the database", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "e2efffc72002968f835a0ea6a70f8e7762752b15", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": " \t\tConceptName assumedDuplicateName = ConceptNameTest.createMockConceptName(3, Context.getLocale(), null, true);\r\n \t\tassumedDuplicateName.setName(duplicateName.getName());\r\n \t\tnewConcept.addName(assumedDuplicateName);\r\n\t\tErrors errors = new BindException(concept, \"concept\");\r\n \t\tnew ConceptValidator().validate(newConcept, errors);\r\n \t\tAssert.assertEquals(false, errors.hasErrors());\r\n \t}\r", "fixed": " \t\tConceptName assumedDuplicateName = ConceptNameTest.createMockConceptName(3, Context.getLocale(), null, true);\r\n \t\tassumedDuplicateName.setName(duplicateName.getName());\r\n \t\tnewConcept.addName(assumedDuplicateName);\r\n\t\tErrors errors = new BindException(newConcept, \"concept\");\r\n \t\tnew ConceptValidator().validate(newConcept, errors);\r\n \t\tAssert.assertEquals(false, errors.hasErrors());\r\n \t}\r", "sourceBeforeFix": "new BindException(concept,\"concept\")", "sourceAfterFix": "new BindException(newConcept,\"concept\")"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "fixed": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttribfv(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttribiv(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "sourceBeforeFix": "GL20.glUniformMatrix2(location,transpose,toFloatBuffer(value,offset,count << 2))", "sourceAfterFix": "GL20.glUniformMatrix2fv(location,transpose,toFloatBuffer(value,offset,count << 2))"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n \t * @throws IOException Thrown if any of the two views raises an exception.\n \t */\n\tpublic void copy(DataInputView source, DataOutputView target) throws IOException;\n }", "fixed": " \t * \n \t * @throws IOException Thrown if any of the two views raises an exception.\n \t */\n\tpublic abstract void copy(DataInputView source, DataOutputView target) throws IOException;\n }", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStream<OUT> writeAsText(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsText<OUT> format, int batchSize, OUT endTuple) {\n\t\tDataStream<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByBatches<OUT>(\n \t\t\t\tpath, format, batchSize, endTuple), null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "fixed": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStreamSink<OUT> writeAsText(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsText<OUT> format, int batchSize, OUT endTuple) {\n\t\tDataStreamSink<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByBatches<OUT>(\n \t\t\t\tpath, format, batchSize, endTuple), null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "5f86ce7ea99b1bbb661b683bf2ffcac69d9f17ec", "projectName": "apache.hadoop", "bugType": "Change Numeric Literal", "problem": "     String locations1 = \"[disk]/dir0,[DISK]/dir1,[sSd]/dir2,[disK]/dir3,[ram_disk]/dir4\";\n     conf.set(DFS_DATANODE_DATA_DIR_KEY, locations1);\n     locations = DataNode.getStorageLocations(conf);\n    assertThat(locations.size(), is(4));\n     assertThat(locations.get(0).getStorageType(), is(StorageType.DISK));\n     assertThat(locations.get(0).getUri(), is(dir0.toURI()));\n     assertThat(locations.get(1).getStorageType(), is(StorageType.DISK));", "fixed": "     String locations1 = \"[disk]/dir0,[DISK]/dir1,[sSd]/dir2,[disK]/dir3,[ram_disk]/dir4\";\n     conf.set(DFS_DATANODE_DATA_DIR_KEY, locations1);\n     locations = DataNode.getStorageLocations(conf);\n    assertThat(locations.size(), is(5));\n     assertThat(locations.get(0).getStorageType(), is(StorageType.DISK));\n     assertThat(locations.get(0).getUri(), is(dir0.toURI()));\n     assertThat(locations.get(1).getStorageType(), is(StorageType.DISK));", "sourceBeforeFix": "is(4)", "sourceAfterFix": "is(5)"}
{"fixCommitSHA1": "41467c8004b716fb78002c3139ea771b70ed165d", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tprivate void renderCached () {\r\n\t\tcache5.setColor(red);\r\n \t\tcache5.draw(spriteBatch);\r\n \t\tcache1.draw(spriteBatch);\r", "fixed": " \t}\r\n \tprivate void renderCached () {\r\n\t\tcache5.setColors(red);\r\n \t\tcache5.draw(spriteBatch);\r\n \t\tcache1.draw(spriteBatch);\r", "sourceBeforeFix": "cache5.setColor(red)", "sourceAfterFix": "cache5.setColors(red)"}
{"fixCommitSHA1": "3841ff0cd87dd048dff43379df81153ed9bcf265", "projectName": "hazelcast.hazelcast", "bugType": "Change Numeric Literal", "problem": "         OperationService opService = getOperationService(local);\n         int partitionId = getPartitionId(remote);\n        opService.invokeOnPartition(null, new SlowOperation(callTimeoutMs * 2), partitionId);\n        ICompletableFuture f = opService.invokeOnPartition(null, new DummyOperation(), partitionId);\n         ExecutionCallback callback = mock(ExecutionCallback.class);\n         f.andThen(callback);", "fixed": "         OperationService opService = getOperationService(local);\n         int partitionId = getPartitionId(remote);\n        opService.invokeOnPartition(new SlowOperation(callTimeoutMs * 2).setPartitionId(partitionId));\n        ICompletableFuture f = opService.invokeOnPartition(new DummyOperation().setPartitionId(partitionId));\n         ExecutionCallback callback = mock(ExecutionCallback.class);\n         f.andThen(callback);", "sourceBeforeFix": "callTimeoutMs=5000", "sourceAfterFix": "callTimeoutMs=10000"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public List<Trends> getWeeklyTrends(Date date, boolean excludeHashTags) throws TwitterException {\n        return Trends.constructTrendsList(get(getSearchBaseURL()\n                 + \"trends/weekly.json?date=\" + toDateStr(date)\n                 + (excludeHashTags ? \"&exclude=hashtags\" : \"\"), false));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public List<Trends> getWeeklyTrends(Date date, boolean excludeHashTags) throws TwitterException {\n        return Trends.createTrendsList(get(getSearchBaseURL()\n                 + \"trends/weekly.json?date=\" + toDateStr(date)\n                 + (excludeHashTags ? \"&exclude=hashtags\" : \"\"), false));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_to_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_to_me.json\",null,true))"}
{"fixCommitSHA1": "5221c15e183cb7029a305766d137d909f77e8941", "projectName": "google.guice", "bugType": "Wrong Function Name", "problem": "     this.source = checkNotNull(source, \"source\");\n     this.classMatcher = checkNotNull(classMatcher, \"classMatcher\");\n     this.methodMatcher = checkNotNull(methodMatcher, \"methodMatcher\");\n    this.interceptors = ImmutableList.of(interceptors);\n   }\n   public Object getSource() {", "fixed": "     this.source = checkNotNull(source, \"source\");\n     this.classMatcher = checkNotNull(classMatcher, \"classMatcher\");\n     this.methodMatcher = checkNotNull(methodMatcher, \"methodMatcher\");\n    this.interceptors = ImmutableList.copyOf(interceptors);\n   }\n   public Object getSource() {", "sourceBeforeFix": "ImmutableList.of(interceptors)", "sourceAfterFix": "ImmutableList.copyOf(interceptors)"}
{"fixCommitSHA1": "6ee0105ac80d34691c4a073e87397ed0fc6b68c4", "projectName": "facebook.presto", "bugType": "Change Operand ", "problem": "         }\n         int[] ids = new int[length];\n         for (int i = 0; i < length; i++) {\n            ids[i] = length % dictionarySize;\n         }\n         return new DictionaryBlock(length, builder.build(), wrappedIntArray(ids));\n     }", "fixed": "         }\n         int[] ids = new int[length];\n         for (int i = 0; i < length; i++) {\n            ids[i] = i % dictionarySize;\n         }\n         return new DictionaryBlock(length, builder.build(), wrappedIntArray(ids));\n     }", "sourceBeforeFix": "length % dictionarySize", "sourceAfterFix": "i % dictionarySize"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetProgramiv (int program, int pname, IntBuffer params) {\r\n\t\tGL20.glGetProgram(program, pname, params);\r\n \t}\r\n \tpublic void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tEXTFramebufferObject.glGetRenderbufferParameterEXT(target, pname, params);\r\n \t}\r\n \tpublic String glGetShaderInfoLog (int shader) {\r", "fixed": " \t}\r\n \tpublic void glGetProgramiv (int program, int pname, IntBuffer params) {\r\n\t\tGL20.glGetProgramiv(program, pname, params);\r\n \t}\r\n \tpublic void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tEXTFramebufferObject.glGetRenderbufferParameterivEXT(target, pname, params);\r\n \t}\r\n \tpublic String glGetShaderInfoLog (int shader) {\r", "sourceBeforeFix": "GL20.glGetUniform(program,location,params)", "sourceAfterFix": "GL20.glGetUniformfv(program,location,params)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedStompEndpointBuilder\n             extends\n                 AdvancedStompEndpointConsumerBuilder, AdvancedStompEndpointProducerBuilder {\n         default StompEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedStompEndpointBuilder\n             extends\n                 AdvancedStompEndpointConsumerBuilder, AdvancedStompEndpointProducerBuilder {\n         default StompEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface SftpEndpointBuilder\n             extends\n                 SftpEndpointConsumerBuilder, SftpEndpointProducerBuilder {\n         default AdvancedSftpEndpointBuilder advanced() {", "fixed": "     \n    public interface SftpEndpointBuilder\n             extends\n                 SftpEndpointConsumerBuilder, SftpEndpointProducerBuilder {\n         default AdvancedSftpEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fbc26e589318e29e5971fe526c114cb66e2fea5f", "projectName": "facebook.presto", "bugType": "Same Function More Args", "problem": "     @Override\n     public int hashCode()\n     {\n        return Objects.hash(expressions);\n     }\n     @Override", "fixed": "     @Override\n     public int hashCode()\n     {\n        return Objects.hash(expressions, withOrdinality);\n     }\n     @Override", "sourceBeforeFix": "Objects.hash(expressions)", "sourceAfterFix": "Objects.hash(expressions,withOrdinality)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "84d6e4785ecad972742bb1bb869cfc3a5efa731d", "projectName": "cucumber.cucumber-jvm", "bugType": "Change Modifier", "problem": "         Executable testMethod = injectorSourceFactory::create;\n         InjectorSourceInstantiationFailed actualThrown = assertThrows(InjectorSourceInstantiationFailed.class, testMethod);\n         assertAll(\"Checking Exception including cause\",\n            () -> assertThat(\"Unexpected exception message\", actualThrown.getMessage(), is(equalTo(\"Instantiation of 'some.bogus.Class' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a   zero args constructor.\"))),\n             () -> assertThat(\"Unexpected exception cause class\", actualThrown.getCause(), isA(ClassNotFoundException.class))\n         );\n     }", "fixed": "         Executable testMethod = injectorSourceFactory::create;\n         InjectorSourceInstantiationFailed actualThrown = assertThrows(InjectorSourceInstantiationFailed.class, testMethod);\n         assertAll(\"Checking Exception including cause\",\n            () -> assertThat(\"Unexpected exception message\", actualThrown.getMessage(), is(equalTo(\"Instantiation of 'some.bogus.Class' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a public zero args constructor.\"))),\n             () -> assertThat(\"Unexpected exception cause class\", actualThrown.getCause(), isA(ClassNotFoundException.class))\n         );\n     }", "sourceBeforeFix": "8", "sourceAfterFix": "9"}
{"fixCommitSHA1": "3b47b9b23bf3f10d124f26f37dff3245fe09ec56", "projectName": "wildfly.wildfly", "bugType": "Change Caller in Function Call", "problem": "             if (queueLength.isDefined() && queueLength.asInt() == 0) {\n                 if (coreThreads.isDefined() && coreThreads.asInt() <= 0) {\n                    throw EeLogger.ROOT_LOGGER.invalidCoreThreadsSize(coreThreads.asString());\n                 }\n             }", "fixed": "             if (queueLength.isDefined() && queueLength.asInt() == 0) {\n                 if (coreThreads.isDefined() && coreThreads.asInt() <= 0) {\n                    throw EeLogger.ROOT_LOGGER.invalidCoreThreadsSize(queueLength.asString());\n                 }\n             }", "sourceBeforeFix": "coreThreads.asString()", "sourceAfterFix": "queueLength.asString()"}
{"fixCommitSHA1": "ef11886bf2190370a0f3fd287616763826239c48", "projectName": "openmrs.openmrs-core", "bugType": "Wrong Function Name", "problem": " \t\trel.setPersonA(personA);\r\n \t\trel.setPersonB(personB);\r\n \t\trel.setRelationshipType(relType);\r\n\t\tps.createRelationship(rel);\r\n \t}\r\n \tpublic void voidRelationship(Integer relationshipId, String voidReason) {\r", "fixed": " \t\trel.setPersonA(personA);\r\n \t\trel.setPersonB(personB);\r\n \t\trel.setRelationshipType(relType);\r\n\t\tps.saveRelationship(rel);\r\n \t}\r\n \tpublic void voidRelationship(Integer relationshipId, String voidReason) {\r", "sourceBeforeFix": "ps.createRelationship(rel)", "sourceAfterFix": "ps.saveRelationship(rel)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15844, value = \"Invalid rollout plan. Server group %s appears more than once in the plan.\")\n     String invalidRolloutPlanGroupAlreadyExists(String group);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10844, value = \"Invalid rollout plan. Server group %s appears more than once in the plan.\")\n     String invalidRolloutPlanGroupAlreadyExists(String group);\n     /**", "sourceBeforeFix": "id=15854", "sourceAfterFix": "id=10854"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "26f1133593498a87216f0dd4954ff7c07313b740", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "    * Expects the JS to generate one bad-read warning.\n    */\n   private void assertRedeclare(String js) {\n    testWarning(js, VariableReferenceCheck.REDECLARED_VARIABLE);\n   }\n   /**", "fixed": "    * Expects the JS to generate one bad-read warning.\n    */\n   private void assertRedeclare(String js) {\n    testError(js, VariableReferenceCheck.REDECLARED_VARIABLE);\n   }\n   /**", "sourceBeforeFix": "testWarning(js,VariableReferenceCheck.REDECLARED_VARIABLE)", "sourceAfterFix": "testError(js,VariableReferenceCheck.REDECLARED_VARIABLE)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "fixed": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "sourceBeforeFix": "GL11.glTexParameter(target,pname,params)", "sourceAfterFix": "GL11.glTexParameterfv(target,pname,params)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform2iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toIntBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform3f (int location, float x, float y, float z) {\r", "fixed": " \t}\r\n \tpublic void glUniform2iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform2iv(location, v);\r\n \t}\r\n \tpublic void glUniform2iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform2iv(location, toIntBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform3f (int location, float x, float y, float z) {\r", "sourceBeforeFix": "GL20.glGetShader(shader,pname,params)", "sourceAfterFix": "GL20.glGetShaderiv(shader,pname,params)"}
{"fixCommitSHA1": "9e1e4f79c76f39c8d6efccbf8351e7d13ced8007", "projectName": "netty.netty", "bugType": "Change Identifier Used", "problem": "         if (msgInfo == null) {\n             return new SctpMessage(protocolIdentifier, streamIdentifier, unordered, content().duplicate());\n         } else {\n            return new SctpMessage(msgInfo, content().copy());\n         }\n     }", "fixed": "         if (msgInfo == null) {\n             return new SctpMessage(protocolIdentifier, streamIdentifier, unordered, content().duplicate());\n         } else {\n            return new SctpMessage(msgInfo, content().duplicate());\n         }\n     }", "sourceBeforeFix": "content().copy()", "sourceAfterFix": "content().duplicate()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15836, value = SERVER_GROUP + \" expects one and only one child: %s\")\n     String serverGroupExpectsSingleChild(String rolloutPlan);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10836, value = SERVER_GROUP + \" expects one and only one child: %s\")\n     String serverGroupExpectsSingleChild(String rolloutPlan);\n     /**", "sourceBeforeFix": "id=15857", "sourceAfterFix": "id=10857"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface GoogleSheetsEndpointBuilder\n             extends\n                 GoogleSheetsEndpointConsumerBuilder, GoogleSheetsEndpointProducerBuilder {\n         default AdvancedGoogleSheetsEndpointBuilder advanced() {", "fixed": "     \n    public interface GoogleSheetsEndpointBuilder\n             extends\n                 GoogleSheetsEndpointConsumerBuilder, GoogleSheetsEndpointProducerBuilder {\n         default AdvancedGoogleSheetsEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "      * Advanced builder for endpoint for the Azure Storage Queue Service\n      * component.\n      */\n    public static interface AdvancedQueueServiceEndpointBuilder\n             extends\n                 AdvancedQueueServiceEndpointConsumerBuilder, AdvancedQueueServiceEndpointProducerBuilder {\n         default QueueServiceEndpointBuilder basic() {", "fixed": "      * Advanced builder for endpoint for the Azure Storage Queue Service\n      * component.\n      */\n    public interface AdvancedQueueServiceEndpointBuilder\n             extends\n                 AdvancedQueueServiceEndpointConsumerBuilder, AdvancedQueueServiceEndpointProducerBuilder {\n         default QueueServiceEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "6a6e67b3003df3da728a2366f951b7efe857a6e7", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "     public void testRecipientListParallel() throws Exception {\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedBodiesReceived(\"c\", \"b\", \"a\");\n         template.sendBodyAndHeader(\"direct:start\", \"Hello World\", \"foo\", \"direct:a,direct:b,direct:c\");", "fixed": "     public void testRecipientListParallel() throws Exception {\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedBodiesReceivedInAnyOrder(\"c\", \"b\", \"a\");\n         template.sendBodyAndHeader(\"direct:start\", \"Hello World\", \"foo\", \"direct:a,direct:b,direct:c\");", "sourceBeforeFix": "mock.expectedBodiesReceived(\"c\",\"b\",\"a\")", "sourceAfterFix": "mock.expectedBodiesReceivedInAnyOrder(\"c\",\"b\",\"a\")"}
{"fixCommitSHA1": "69bf835b58721b263b5ecaca7de2c327e3c29d7f", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "     }\n     @Override\n    public void dispatchEvent(ReplicationMessage event, ReplicatedMessageListener listener) {\n         listener.onMessage(event);\n     }", "fixed": "     }\n     @Override\n    public void dispatchEvent(IdentifiedDataSerializable event, ReplicatedMessageListener listener) {\n         listener.onMessage(event);\n     }", "sourceBeforeFix": "EventPublishingService<ReplicationMessage,ReplicatedMessageListener>", "sourceAfterFix": "EventPublishingService<IdentifiedDataSerializable,ReplicatedMessageListener>"}
{"fixCommitSHA1": "65c15a0c969d964875b2b988ff5f63d419e6a832", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    private class CompoundEventPredicate implements EventPredicate {\n         private List<EventPredicate> predicates = new ArrayList<EventPredicate>();", "fixed": "     \n    private final class CompoundEventPredicate implements EventPredicate {\n         private List<EventPredicate> predicates = new ArrayList<EventPredicate>();", "sourceBeforeFix": "2", "sourceAfterFix": "18"}
{"fixCommitSHA1": "36f71405ee04602e76844b255e44f146bb476161", "projectName": "openmrs.openmrs-core", "bugType": "Wrong Function Name", "problem": " \t\tConceptNumeric cn = new ConceptNumeric(c);\r\n \t\tfor (ConceptSet cSet : cn.getConceptSets()) {\r\n\t\t\tAssert.assertSame(cn, cSet.getConcept());\r\n \t\t}\r\n \t}\r", "fixed": " \t\tConceptNumeric cn = new ConceptNumeric(c);\r\n \t\tfor (ConceptSet cSet : cn.getConceptSets()) {\r\n\t\t\tAssert.assertSame(cn, cSet.getConceptSet());\r\n \t\t}\r\n \t}\r", "sourceBeforeFix": "cSet.getConcept()", "sourceAfterFix": "cSet.getConceptSet()"}
{"fixCommitSHA1": "39fe5a830bb4e05a85bef3e52115c708f9409abf", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "     @Before\n     public void setUpAdminObjects() throws NamingException {\n         server1Proxy = lookupAdminObject(TestSuiteEnvironment.getServerAddress(), \"8280\");\n        server2Proxy = lookupAdminObject(TestSuiteEnvironment.getServerAddress(), \"8380\");\n         Assert.assertNotNull(server1Proxy);\n         Assert.assertNotNull(server2Proxy);\n     }", "fixed": "     @Before\n     public void setUpAdminObjects() throws NamingException {\n         server1Proxy = lookupAdminObject(TestSuiteEnvironment.getServerAddress(), \"8280\");\n        server2Proxy = lookupAdminObject(TestSuiteEnvironment.getServerAddressNode1(), \"8380\");\n         Assert.assertNotNull(server1Proxy);\n         Assert.assertNotNull(server2Proxy);\n     }", "sourceBeforeFix": "TestSuiteEnvironment.getServerAddress()", "sourceAfterFix": "TestSuiteEnvironment.getServerAddressNode1()"}
{"fixCommitSHA1": "333a6469ffec02354a56d1a5eb5867dc16da58a0", "projectName": "jhy.jsoup", "bugType": "Same Function More Args", "problem": "         }\n         public String cookie(String name) {\n            Validate.notNull(name, \"Cookie name must not be null\");\n             return cookies.get(name);\n         }", "fixed": "         }\n         public String cookie(String name) {\n            Validate.notEmpty(name, \"Cookie name must not be empty\");\n             return cookies.get(name);\n         }", "sourceBeforeFix": "Validate.notEmpty(\"Cookie name must not be empty\")", "sourceAfterFix": "Validate.notEmpty(name,\"Cookie name must not be empty\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15856, value = \"Invalid url stream.\")\n     String invalidUrlStream();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10856, value = \"Invalid url stream.\")\n     String invalidUrlStream();\n     /**", "sourceBeforeFix": "id=15842", "sourceAfterFix": "id=10842"}
{"fixCommitSHA1": "4bf80610fd2a67d952312e808edebdb74ebc26bb", "projectName": "Graylog2.graylog2-server", "bugType": "Change Numeric Literal", "problem": "         final PaginatedList<TestDTO> page2 = dbService.findPaginatedWithQueryFilterAndSort(DBQuery.empty(), filter, DBSort.asc(\"title\"), 2, 2);\n         assertThat(page2.pagination().getCount()).isEqualTo(2);\n        assertThat(page2.pagination().getGlobalTotal()).isEqualTo(7);\n         assertThat(page2.delegate())\n                 .extracting(\"title\")\n                 .containsExactly(\"hello4\", \"hello5\");", "fixed": "         final PaginatedList<TestDTO> page2 = dbService.findPaginatedWithQueryFilterAndSort(DBQuery.empty(), filter, DBSort.asc(\"title\"), 2, 2);\n         assertThat(page2.pagination().getCount()).isEqualTo(2);\n        assertThat(page2.pagination().getGlobalTotal()).isEqualTo(5);\n         assertThat(page2.delegate())\n                 .extracting(\"title\")\n                 .containsExactly(\"hello4\", \"hello5\");", "sourceBeforeFix": "assertThat(page1.pagination().getGlobalTotal()).isEqualTo(7)", "sourceAfterFix": "assertThat(page1.pagination().getGlobalTotal()).isEqualTo(5)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getUserListStatuses(String user, int id, Paging paging) throws TwitterException {\n        return Status.constructStatuses(get(getApiBaseURL() + V1 + user +\n                 \"/lists/\" + id + \"/statuses.json\", new PostParameter[0],\n                 paging.asPostParameterList(Paging.SMCP, Paging.PER_PAGE), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getUserListStatuses(String user, int id, Paging paging) throws TwitterException {\n        return Status.createStatuseList(get(getApiBaseURL() + V1 + user +\n                 \"/lists/\" + id + \"/statuses.json\", new PostParameter[0],\n                 paging.asPostParameterList(Paging.SMCP, Paging.PER_PAGE), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))"}
{"fixCommitSHA1": "11112748e114a68d1e8d1934e73ba8c947df9414", "projectName": "Alluxio.alluxio", "bugType": "Change Boolean Literal", "problem": "     }\n     System.out.println(\"Validation succeeded.\");\n    return false;\n   }\n   private static boolean validateWorkers(String name) throws InterruptedException {", "fixed": "     }\n     System.out.println(\"Validation succeeded.\");\n    return true;\n   }\n   private static boolean validateWorkers(String name) throws InterruptedException {", "sourceBeforeFix": "return false; ", "sourceAfterFix": "return true; "}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  private final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedSlackEndpointBuilder\n             extends\n                 AdvancedSlackEndpointConsumerBuilder, AdvancedSlackEndpointProducerBuilder {\n         default SlackEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedSlackEndpointBuilder\n             extends\n                 AdvancedSlackEndpointConsumerBuilder, AdvancedSlackEndpointProducerBuilder {\n         default SlackEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "eb307fa6f37ac8ec695b2f556e543969503418f5", "projectName": "junit-team.junit", "bugType": "Same Function More Args", "problem": " \t\tif (name == null)\n \t\t\treturn null;\n \t\ttry {\n\t\t\treturn Class.forName(name);\n \t\t} catch (ClassNotFoundException e) {\n \t\t\treturn null;\n \t\t}", "fixed": " \t\tif (name == null)\n \t\t\treturn null;\n \t\ttry {\n\t\t\treturn Class.forName(name, false, getClass().getClassLoader());\n \t\t} catch (ClassNotFoundException e) {\n \t\t\treturn null;\n \t\t}", "sourceBeforeFix": "Class.forName(name)", "sourceAfterFix": "Class.forName(name,false,getClass().getClassLoader())"}
{"fixCommitSHA1": "a7a654c82f3eb1374001032a44b08b6b105b4992", "projectName": "netty.netty", "bugType": "Change Boolean Literal", "problem": "         WebSocketServerHandshakerFactory wsFactory = new WebSocketServerHandshakerFactory(\n                getWebSocketLocation(req), null, false);\n         handshaker = wsFactory.newHandshaker(req);\n         if (handshaker == null) {\n             WebSocketServerHandshakerFactory.sendUnsupportedVersionResponse(ctx.channel());", "fixed": "         WebSocketServerHandshakerFactory wsFactory = new WebSocketServerHandshakerFactory(\n                getWebSocketLocation(req), null, true);\n         handshaker = wsFactory.newHandshaker(req);\n         if (handshaker == null) {\n             WebSocketServerHandshakerFactory.sendUnsupportedVersionResponse(ctx.channel());", "sourceBeforeFix": "new WebSocketServerHandshakerFactory(getWebSocketLocation(req),null,false)", "sourceAfterFix": "new WebSocketServerHandshakerFactory(getWebSocketLocation(req),null,true)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15856, value = \"Invalid url stream.\")\n     String invalidUrlStream();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10856, value = \"Invalid url stream.\")\n     String invalidUrlStream();\n     /**", "sourceBeforeFix": "id=15857", "sourceAfterFix": "id=10857"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedMvelEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default MvelEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedMvelEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default MvelEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "014f2410e81ed3ecc6b82fbac49ab345aab6e90f", "projectName": "junit-team.junit", "bugType": "Change Modifier", "problem": "     }\n     @FixMethodOrder(MethodSorters.DEFAULT)\n    private static class DummySortWithDefault {\n         Object alpha(int i, double d, Thread t) {return null;}\n         void beta(int[][] x) {}\n         int gamma() {return 0;}", "fixed": "     }\n     @FixMethodOrder(MethodSorters.DEFAULT)\n    static class DummySortWithDefault {\n         Object alpha(int i, double d, Thread t) {return null;}\n         void beta(int[][] x) {}\n         int gamma() {return 0;}", "sourceBeforeFix": "10", "sourceAfterFix": "8"}
{"fixCommitSHA1": "038ea1803bae1cf3be279b36395b4de4e0ff39b5", "projectName": "openhab.openhab", "bugType": "Wrong Function Name", "problem": " \t\t\tString payload, String payloadType, boolean retry)\n \t\t\tthrows IOException, InvalidLoginException {\n\t\tlogger.debug(\"Requsting URL {}\", url);\n \t\tString dataString = executeUrl(method, url, header,\n \t\t\t\tpayload == null ? null : IOUtils.toInputStream(payload),\n \t\t\t\tpayloadType, timeout);\n\t\tlogger.debug(\"Received MyQ  JSON: {}\", dataString);\n \t\tif (dataString == null) {\n \t\t\tthrow new IOException(\"Null response from MyQ server\");", "fixed": " \t\t\tString payload, String payloadType, boolean retry)\n \t\t\tthrows IOException, InvalidLoginException {\n\t\tlogger.trace(\"Requsting URL {}\", url);\n \t\tString dataString = executeUrl(method, url, header,\n \t\t\t\tpayload == null ? null : IOUtils.toInputStream(payload),\n \t\t\t\tpayloadType, timeout);\n\t\tlogger.trace(\"Received MyQ  JSON: {}\", dataString);\n \t\tif (dataString == null) {\n \t\t\tthrow new IOException(\"Null response from MyQ server\");", "sourceBeforeFix": "logger.debug(\"Retreiveing door data\")", "sourceAfterFix": "logger.trace(\"Retreiveing door data\")"}
{"fixCommitSHA1": "04a010c8499fbc96b1e5a99bdbebaf0b38d24586", "projectName": "libgdx.libgdx", "bugType": "Change Binary Operator", "problem": " \tpublic void addAll (char[] array, int offset, int length) {\r\n \t\tchar[] items = this.items;\r\n \t\tint sizeNeeded = size + length ;\r\n\t\tif (sizeNeeded >= items.length) items = resize(Math.max(8, (int)(sizeNeeded * 1.75f)));\r\n \t\tSystem.arraycopy(array, offset, items, size, length);\r\n \t\tsize += length;\r\n \t}\r", "fixed": " \tpublic void addAll (char[] array, int offset, int length) {\r\n \t\tchar[] items = this.items;\r\n \t\tint sizeNeeded = size + length ;\r\n\t\tif (sizeNeeded > items.length) items = resize(Math.max(8, (int)(sizeNeeded * 1.75f)));\r\n \t\tSystem.arraycopy(array, offset, items, size, length);\r\n \t\tsize += length;\r\n \t}\r", "sourceBeforeFix": "sizeNeeded >= items.length", "sourceAfterFix": "sizeNeeded > items.length"}
{"fixCommitSHA1": "3691be4c1f9974b445e682c6d290306700eab602", "projectName": "Atmosphere.atmosphere", "bugType": "Change Identifier Used", "problem": "             final Map<String, String> m = new HashMap<String, String>();\n             for (Map.Entry<String,AtmosphereHandlerWrapper> e : config.handlers().entrySet()) {\n                 UriTemplate t = new UriTemplate(e.getKey());\n                logger.trace(\"Trying to map {} to {}\", t, path);\n                 if (t.match(path, m)) {\n                     atmosphereHandlerWrapper = e.getValue();\n                     logger.trace(\"Mapped {} to {}\", t, e.getValue());", "fixed": "             final Map<String, String> m = new HashMap<String, String>();\n             for (Map.Entry<String,AtmosphereHandlerWrapper> e : config.handlers().entrySet()) {\n                 UriTemplate t = new UriTemplate(e.getKey());\n                logger.debug(\"Trying to map {} to {}\", t, path);\n                 if (t.match(path, m)) {\n                     atmosphereHandlerWrapper = e.getValue();\n                     logger.trace(\"Mapped {} to {}\", t, e.getValue());", "sourceBeforeFix": "logger.trace(\"Trying to map {} to {}\",t,path)", "sourceAfterFix": "logger.debug(\"Trying to map {} to {}\",t,path)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedHazelcastTopicEndpointBuilder\n             extends\n                 AdvancedHazelcastTopicEndpointConsumerBuilder, AdvancedHazelcastTopicEndpointProducerBuilder {\n         default HazelcastTopicEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedHazelcastTopicEndpointBuilder\n             extends\n                 AdvancedHazelcastTopicEndpointConsumerBuilder, AdvancedHazelcastTopicEndpointProducerBuilder {\n         default HazelcastTopicEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "e2119d33293008fcc876f5fcd58ede2993eb24d6", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t}\n \t@Configuration\n\t@ConditionalOnEnablednHealthIndicator(\"diskspace\")\n \tpublic static class DiskSpaceHealthIndicatorConfiguration {\n \t\t@Bean", "fixed": " \t}\n \t@Configuration\n\t@ConditionalOnEnabledHealthIndicator(\"diskspace\")\n \tpublic static class DiskSpaceHealthIndicatorConfiguration {\n \t\t@Bean", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"solr\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"solr\")"}
{"fixCommitSHA1": "5755cf96d1689e1eda7dd2d7e03f1eff3bf5a074", "projectName": "perwendel.spark", "bugType": "Change Identifier Used", "problem": "      * @param request   The request object providing information about the HTTP request\n      * @param response  The response object providing functionality for modifying the response\n      */\n    public abstract void handle(Exception exception, Request request, Response response);\n }", "fixed": "      * @param request   The request object providing information about the HTTP request\n      * @param response  The response object providing functionality for modifying the response\n      */\n    public abstract void handle(T exception, Request request, Response response);\n }", "sourceBeforeFix": "? extends Exception", "sourceAfterFix": "? extends T"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "56713d36c65344d448b58f697bb109c882f44dc0", "projectName": "apache.flink", "bugType": "Change Numeric Literal", "problem": " \tprivate static final Log LOG = LogFactory.getLog(ByteBufferedChannelManager.class);\n\tprivate static final int DEFAULT_NUMBER_OF_READ_BUFFERS = 128;\n\tprivate static final int DEFAULT_NUMBER_OF_WRITE_BUFFERS = 128;\nprivate static final int DEFAULT_BUFFER_SIZE_IN_BYTES = 128 * 1024;\n \tprivate static final boolean DEFAULT_ALLOW_SPILLING = true;", "fixed": " \tprivate static final Log LOG = LogFactory.getLog(ByteBufferedChannelManager.class);\n\tprivate static final int DEFAULT_NUMBER_OF_READ_BUFFERS = 256;\n\tprivate static final int DEFAULT_NUMBER_OF_WRITE_BUFFERS = 256;\nprivate static final int DEFAULT_BUFFER_SIZE_IN_BYTES = 64 * 1024;\n \tprivate static final boolean DEFAULT_ALLOW_SPILLING = true;", "sourceBeforeFix": "128 * 1024", "sourceAfterFix": "64 * 1024"}
{"fixCommitSHA1": "e2119d33293008fcc876f5fcd58ede2993eb24d6", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnBean(SolrServer.class)\n\t@ConditionalOnEnablednHealthIndicator(\"solr\")\n \tpublic static class SolrHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<SolrHealthIndicator, SolrServer> {", "fixed": " \t@Configuration\n \t@ConditionalOnBean(SolrServer.class)\n\t@ConditionalOnEnabledHealthIndicator(\"solr\")\n \tpublic static class SolrHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<SolrHealthIndicator, SolrServer> {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"mongo\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"mongo\")"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15860, value = \"No deployment with name %s found\")\n     String noDeploymentContentWithName(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10860, value = \"No deployment with name %s found\")\n     String noDeploymentContentWithName(String name);\n     /**", "sourceBeforeFix": "id=15839", "sourceAfterFix": "id=10839"}
{"fixCommitSHA1": "c131546eaadd07baf950bd6a44d07ee42d109e4c", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t\t\tActorRef rpcEndpoint,\n \t\t\tTime timeout,\n \t\t\tlong maximumFramesize,\n\t\t\t@Nullable CompletableFuture<Boolean> terminationFuture) {\n \t\tthis.address = Preconditions.checkNotNull(address);\n \t\tthis.hostname = Preconditions.checkNotNull(hostname);", "fixed": " \t\t\tActorRef rpcEndpoint,\n \t\t\tTime timeout,\n \t\t\tlong maximumFramesize,\n\t\t\t@Nullable CompletableFuture<Void> terminationFuture) {\n \t\tthis.address = Preconditions.checkNotNull(address);\n \t\tthis.hostname = Preconditions.checkNotNull(hostname);", "sourceBeforeFix": "CompletableFuture<Boolean>", "sourceAfterFix": "CompletableFuture<Void>"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsCsv(String path, long millis) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, null);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsCsv(String path, long millis) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, null);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "fixed": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniformfv(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniformiv(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "sourceBeforeFix": "GL20.glUniform1(location,toIntBuffer(v,offset,count))", "sourceAfterFix": "GL20.glUniform1iv(location,toIntBuffer(v,offset,count))"}
{"fixCommitSHA1": "01652fca46c0149bb14ed9f159224213175c30d7", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "         when(mock.getColumn()).thenReturn(1);\n         when(mock.getMessage()).thenReturn(\"Mocked message.\");\n         when(mock.getFileName()).thenReturn(\"InputMockFile.java\");\n        final AuditEvemtFormatter formatter = new AuditEventDefaultFormatter();\n         final String expected = \"[WARN] InputMockFile.java:1:1: Mocked message. [TestModule]\";", "fixed": "         when(mock.getColumn()).thenReturn(1);\n         when(mock.getMessage()).thenReturn(\"Mocked message.\");\n         when(mock.getFileName()).thenReturn(\"InputMockFile.java\");\n        final AuditEventFormatter formatter = new AuditEventDefaultFormatter();\n         final String expected = \"[WARN] InputMockFile.java:1:1: Mocked message. [TestModule]\";", "sourceBeforeFix": "final AuditEvemtFormatter formatter=new AuditEventDefaultFormatter(); ", "sourceAfterFix": "final AuditEventFormatter formatter=new AuditEventDefaultFormatter(); "}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "      * Builder for endpoint producers for the Hazelcast Replicated Map\n      * component.\n      */\n    public static interface HazelcastReplicatedmapEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedHazelcastReplicatedmapEndpointProducerBuilder advanced() {", "fixed": "      * Builder for endpoint producers for the Hazelcast Replicated Map\n      * component.\n      */\n    public interface HazelcastReplicatedmapEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedHazelcastReplicatedmapEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  private final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface TwitterSearchEndpointBuilder\n             extends\n                 TwitterSearchEndpointConsumerBuilder, TwitterSearchEndpointProducerBuilder {\n         default AdvancedTwitterSearchEndpointBuilder advanced() {", "fixed": "     \n    public interface TwitterSearchEndpointBuilder\n             extends\n                 TwitterSearchEndpointConsumerBuilder, TwitterSearchEndpointProducerBuilder {\n         default AdvancedTwitterSearchEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "d222fc981c938bd3543ee61f22422d20efcdcd94", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         String uri = getScpUri() + \"?username=admin&password=admin&chmod=640&knownHostsFile=\" + getKnownHostsFile();\n         template.sendBodyAndHeader(uri, \"Bonjour Monde\", Exchange.FILE_NAME, \"monde.txt\");\n        Thread.sleep(500);\n         File file = new File(getScpPath() + \"/monde.txt\");\n         assertFileExists(file.getAbsolutePath());", "fixed": "         String uri = getScpUri() + \"?username=admin&password=admin&chmod=640&knownHostsFile=\" + getKnownHostsFile();\n         template.sendBodyAndHeader(uri, \"Bonjour Monde\", Exchange.FILE_NAME, \"monde.txt\");\n        Thread.sleep(800);\n         File file = new File(getScpPath() + \"/monde.txt\");\n         assertFileExists(file.getAbsolutePath());", "sourceBeforeFix": "Thread.sleep(500)", "sourceAfterFix": "Thread.sleep(800)"}
{"fixCommitSHA1": "0b302cf93edee0e2ab3c9998f380ede8e8ea7727", "projectName": "Atmosphere.atmosphere", "bugType": "Change Identifier Used", "problem": "             }\n             if (resources.contains(r)) {\n                return r;\n             }", "fixed": "             }\n             if (resources.contains(r)) {\n                return this;\n             }", "sourceBeforeFix": "return r; ", "sourceAfterFix": "return this; "}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface HazelcastMultimapEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedHazelcastMultimapEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface HazelcastMultimapEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedHazelcastMultimapEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "5221c15e183cb7029a305766d137d909f77e8941", "projectName": "google.guice", "bugType": "Wrong Function Name", "problem": "     for (int t = 0; t < types.length; t++) {\n       result[t] = resolve(types[t]);\n     }\n    return ImmutableList.of(result);\n   }\n   /**", "fixed": "     for (int t = 0; t < types.length; t++) {\n       result[t] = resolve(types[t]);\n     }\n    return ImmutableList.copyOf(result);\n   }\n   /**", "sourceBeforeFix": "ImmutableList.of(result)", "sourceAfterFix": "ImmutableList.copyOf(result)"}
{"fixCommitSHA1": "c801fd79fae4bf687cbf44ae8d391b080508a2dd", "projectName": "facebook.presto", "bugType": "Change Identifier Used", "problem": "             return false;\n         }\n        if (!expected.getType().equals(actual.getType().toString())) {\n             return false;\n         }", "fixed": "             return false;\n         }\n        if (!expected.getType().equalsIgnoreCase(actual.getType().toString())) {\n             return false;\n         }", "sourceBeforeFix": "expected.getType().equals(actual.getType().toString())", "sourceAfterFix": "expected.getType().equalsIgnoreCase(actual.getType().toString())"}
{"fixCommitSHA1": "04a010c8499fbc96b1e5a99bdbebaf0b38d24586", "projectName": "libgdx.libgdx", "bugType": "Change Binary Operator", "problem": "* @return {@link\n \tpublic long[] ensureCapacity (int additionalCapacity) {\r\n \t\tint sizeNeeded = size + additionalCapacity;\r\n\t\tif (sizeNeeded >= items.length) resize(Math.max(8, sizeNeeded));\r\n \t\treturn items;\r\n \t}\r", "fixed": "* @return {@link\n \tpublic long[] ensureCapacity (int additionalCapacity) {\r\n \t\tint sizeNeeded = size + additionalCapacity;\r\n\t\tif (sizeNeeded > items.length) resize(Math.max(8, sizeNeeded));\r\n \t\treturn items;\r\n \t}\r", "sourceBeforeFix": "sizeNeeded >= items.length", "sourceAfterFix": "sizeNeeded > items.length"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "2a4442771eee1cc9e857f6999b3ead8e7cc43fd4", "projectName": "Activiti.Activiti", "bugType": "Wrong Function Name", "problem": "               log.debug(\"Optimistic locking exception : \" + exception);\n             } else {\n              log.error(\"Error while closing command context\", exception);\n             }\n             transactionContext.rollback();", "fixed": "               log.debug(\"Optimistic locking exception : \" + exception);\n             } else {\n              log.debug(\"Error while closing command context\", exception);\n             }\n             transactionContext.rollback();", "sourceBeforeFix": "log.error(\"Error while closing command context\",exception)", "sourceAfterFix": "log.debug(\"Error while closing command context\",exception)"}
{"fixCommitSHA1": "419fb4a4dee3cd001631daa06fe6b8c30095b468", "projectName": "apache.hadoop", "bugType": "Change Identifier Used", "problem": "       try {\n         if(UserGroupInformation.isSecurityEnabled())\n          UserGroupInformation.getCurrentUser().reloginFromKeytab();\n         long now = Time.now();", "fixed": "       try {\n         if(UserGroupInformation.isSecurityEnabled())\n          UserGroupInformation.getCurrentUser().checkTGTAndReloginFromKeytab();\n         long now = Time.now();", "sourceBeforeFix": "UserGroupInformation.getCurrentUser().reloginFromKeytab()", "sourceAfterFix": "UserGroupInformation.getCurrentUser().checkTGTAndReloginFromKeytab()"}
{"fixCommitSHA1": "0d1567da0b7e884712265b38780704b026e8edc4", "projectName": "netty.netty", "bugType": "Change Modifier", "problem": "         classPool.appendClassPath(new ClassClassPath(NoOpTypeParameterMatcher.class));\n     }\n    public void appendClassPath(ClassPath classpath) {\n         classPool.appendClassPath(classpath);\n     }\n    public void appendClassPath(String pathname) throws NotFoundException {\n         classPool.appendClassPath(pathname);\n     }", "fixed": "         classPool.appendClassPath(new ClassClassPath(NoOpTypeParameterMatcher.class));\n     }\n    public static void appendClassPath(ClassPath classpath) {\n         classPool.appendClassPath(classpath);\n     }\n    public static void appendClassPath(String pathname) throws NotFoundException {\n         classPool.appendClassPath(pathname);\n     }", "sourceBeforeFix": "1", "sourceAfterFix": "9"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedEhcacheEndpointBuilder\n             extends\n                 AdvancedEhcacheEndpointConsumerBuilder, AdvancedEhcacheEndpointProducerBuilder {\n         default EhcacheEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedEhcacheEndpointBuilder\n             extends\n                 AdvancedEhcacheEndpointConsumerBuilder, AdvancedEhcacheEndpointProducerBuilder {\n         default EhcacheEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15851, value = \"Operation targets host %s but that host is not registered\")\n     String invalidOperationTargetHost(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10851, value = \"Operation targets host %s but that host is not registered\")\n     String invalidOperationTargetHost(String name);\n     /**", "sourceBeforeFix": "id=15859", "sourceAfterFix": "id=10859"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15834, value = \"%s recognizes only %s as children: %s\")\n     String unrecognizedChildren(String parent, String children, String parentSpec);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10834, value = \"%s recognizes only %s as children: %s\")\n     String unrecognizedChildren(String parent, String children, String parentSpec);\n     /**", "sourceBeforeFix": "id=15849", "sourceAfterFix": "id=10849"}
{"fixCommitSHA1": "61cfdd767197dafcc4f201c5ec7577601b20ce25", "projectName": "netty.netty", "bugType": "Change Identifier Used", "problem": "     private int getStreamId(HttpHeaders httpHeaders) {\n         return httpHeaders.getInt(HttpConversionUtil.ExtensionHeaderNames.STREAM_ID.text(),\n            connection.remote().nextStreamId());\n     }\n     @Override", "fixed": "     private int getStreamId(HttpHeaders httpHeaders) {\n         return httpHeaders.getInt(HttpConversionUtil.ExtensionHeaderNames.STREAM_ID.text(),\n                                  connection.remote().incrementAndGetNextStreamId());\n     }\n     @Override", "sourceBeforeFix": "connection.remote().nextStreamId()", "sourceAfterFix": "connection.remote().incrementAndGetNextStreamId()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r", "fixed": " \t}\r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r", "sourceBeforeFix": "GL20.glGetShader(shader,pname,params)", "sourceAfterFix": "GL20.glGetShaderiv(shader,pname,params)"}
{"fixCommitSHA1": "fcea9dfeb6b2e12cb04602baac67b3a1c3cb58c9", "projectName": "wildfly.wildfly", "bugType": "Same Function More Args", "problem": "     SimpleAttributeDefinition ENCODING = SimpleAttributeDefinitionBuilder.create(\"encoding\", ModelType.STRING, true).build();\n    SimpleAttributeDefinition FILE = SimpleAttributeDefinitionBuilder.create(\"file\", ModelType.OBJECT, true).\n             setCorrector(FileCorrector.INSTANCE).\n             setValidator(new FileValidator()).\n             build();", "fixed": "     SimpleAttributeDefinition ENCODING = SimpleAttributeDefinitionBuilder.create(\"encoding\", ModelType.STRING, true).build();\n    SimpleAttributeDefinition FILE = SimpleAttributeDefinitionBuilder.create(\"file\", ModelType.OBJECT, false).\n             setCorrector(FileCorrector.INSTANCE).\n             setValidator(new FileValidator()).\n             build();", "sourceBeforeFix": "SimpleAttributeDefinitionBuilder.create(\"min-level\",ModelType.STRING)", "sourceAfterFix": "SimpleAttributeDefinitionBuilder.create(\"min-level\",ModelType.STRING,true)"}
{"fixCommitSHA1": "29df30760cabf94b75aa00035ef75ce465775916", "projectName": "hazelcast.hazelcast", "bugType": "Same Function More Args", "problem": "             responsePacketHandler.handle(responsePacket);\n         } catch (Throwable e) {\n             inspectOutputMemoryError(e);\n            logger.severe(\"Failed to process response: \" + responsePacket + \" on response thread:\" + getName());\n         }\n     }", "fixed": "             responsePacketHandler.handle(responsePacket);\n         } catch (Throwable e) {\n             inspectOutputMemoryError(e);\n            logger.severe(\"Failed to process response: \" + responsePacket + \" on response thread:\" + getName(), e);\n         }\n     }", "sourceBeforeFix": "logger.severe(\"Failed to process response: \" + responsePacket + \" on response thread:\"+ getName())", "sourceAfterFix": "logger.severe(\"Failed to process response: \" + responsePacket + \" on response thread:\"+ getName(),e)"}
{"fixCommitSHA1": "315a7ab26e5b9cbe1aba47ed1c574c0630be8248", "projectName": "wildfly.wildfly", "bugType": "Same Function Swap Args", "problem": "             final List<MessageListener> messageListeners = resourceAdapterRepository.getMessageListeners(raIdentifier);\n             if (messageListeners == null || messageListeners.isEmpty()) {\n                throw MESSAGES.unknownMessageListenerType(resourceAdapterName, messageListenerInterface.getName());\n             }\n             MessageListener requiredMessageListener = null;", "fixed": "             final List<MessageListener> messageListeners = resourceAdapterRepository.getMessageListeners(raIdentifier);\n             if (messageListeners == null || messageListeners.isEmpty()) {\n                throw MESSAGES.unknownMessageListenerType(messageListenerInterface.getName(), resourceAdapterName);\n             }\n             MessageListener requiredMessageListener = null;", "sourceBeforeFix": "MESSAGES.unknownMessageListenerType(resourceAdapterName,messageListenerInterface.getName())", "sourceAfterFix": "MESSAGES.unknownMessageListenerType(messageListenerInterface.getName(),resourceAdapterName)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweets(long statusId) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL()\n                 + \"statuses/retweets/\" + statusId + \".json\", true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweets(long statusId) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL()\n                 + \"statuses/retweets/\" + statusId + \".json\", true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_to_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_to_me.json\",null,true))"}
{"fixCommitSHA1": "7d7049f9007a940fc7a20f28b706c1144c59223c", "projectName": "JakeWharton.ActionBarSherlock", "bugType": "Change Binary Operator", "problem": " \t\t\t\t} catch (Exception e) {\r\n \t\t\t\t\tthrow new InflateException(e);\r\n \t\t\t\t}\r\n\t\t\t} else if (itemActionLayout >= 0) {\r\n \t\t\t\titem.setActionView(itemActionLayout);\r\n \t\t\t}\r\n \t\t}\r", "fixed": " \t\t\t\t} catch (Exception e) {\r\n \t\t\t\t\tthrow new InflateException(e);\r\n \t\t\t\t}\r\n\t\t\t} else if (itemActionLayout > 0) {\r\n \t\t\t\titem.setActionView(itemActionLayout);\r\n \t\t\t}\r\n \t\t}\r", "sourceBeforeFix": "itemActionLayout >= 0", "sourceAfterFix": "itemActionLayout > 0"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      * @param hostName the name of the host.\n      */\n     @LogMessage(level = Level.WARN)\n    @Message(id = 15804, value = \"Interrupted awaiting final response from host %s\")\n     void interruptedAwaitingFinalResponse(String hostName);\n     /**", "fixed": "      * @param hostName the name of the host.\n      */\n     @LogMessage(level = Level.WARN)\n    @Message(id = 10804, value = \"Interrupted awaiting final response from host %s\")\n     void interruptedAwaitingFinalResponse(String hostName);\n     /**", "sourceBeforeFix": "id=15809", "sourceAfterFix": "id=10809"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<Status> getHomeTimeline(Paging paging) throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/home_timeline.json\", null, paging.asPostParameterList(), true));\n     }\n     /**", "fixed": "      */\n     public ResponseList<Status> getHomeTimeline(Paging paging) throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/home_timeline.json\", null, paging.asPostParameterList(), true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))"}
{"fixCommitSHA1": "39fe5a830bb4e05a85bef3e52115c708f9409abf", "projectName": "wildfly.wildfly", "bugType": "Wrong Function Name", "problem": "                     new ModelNode[] { removeDwm, removeContext });\n             mcc.execute(compositeOp);\n             ServerReload.executeReloadAndWaitForCompletion(mcc, 60000, false,\n                    TestSuiteEnvironment.getServerAddress(), serverPort);\n         }\n         protected abstract Policy getPolicy();", "fixed": "                     new ModelNode[] { removeDwm, removeContext });\n             mcc.execute(compositeOp);\n             ServerReload.executeReloadAndWaitForCompletion(mcc, 60000, false,\n                    CONTAINER_0.equals(containerId) ? TestSuiteEnvironment.getServerAddress() : TestSuiteEnvironment.getServerAddressNode1(),\n                    serverPort);\n         }\n         protected abstract Policy getPolicy();", "sourceBeforeFix": "TestSuiteEnvironment.getServerAddress()", "sourceAfterFix": "TestSuiteEnvironment.getServerAddressNode1()"}
{"fixCommitSHA1": "8097cb4e299f056973c04abeaad879eb55f44775", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "                 } catch (InterruptedException e) {\n                     e.printStackTrace();\n                 }\n                hz1.getLifecycleService().terminate();\n             }\n         };", "fixed": "                 } catch (InterruptedException e) {\n                     e.printStackTrace();\n                 }\n                hz1.getLifecycleService().shutdown();\n             }\n         };", "sourceBeforeFix": "hz1.getLifecycleService().terminate()", "sourceAfterFix": "hz1.getLifecycleService().shutdown()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "16767e5187b0d75a180aa8a3678d7afe6bc6f0da", "projectName": "facebook.presto", "bugType": "Same Function Swap Args", "problem": "         this.queryManager = checkNotNull(queryManager, \"queryManager is null\");\n         this.httpClient = checkNotNull(httpClient, \"httpClient is null\");\n        queryPurger.scheduleAtFixedRate(new PurgeQueriesRunnable(queries.keySet(), queryManager), 200, 200, TimeUnit.MILLISECONDS);\n     }\n     @PreDestroy", "fixed": "         this.queryManager = checkNotNull(queryManager, \"queryManager is null\");\n         this.httpClient = checkNotNull(httpClient, \"httpClient is null\");\n        queryPurger.scheduleWithFixedDelay(new PurgeQueriesRunnable(queries.keySet(), queryManager), 200, 200, TimeUnit.MILLISECONDS);\n     }\n     @PreDestroy", "sourceBeforeFix": "Sets.difference(liveQueries,queryIdsSnapshot)", "sourceAfterFix": "Sets.difference(queryIdsSnapshot,liveQueries)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15836, value = SERVER_GROUP + \" expects one and only one child: %s\")\n     String serverGroupExpectsSingleChild(String rolloutPlan);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10836, value = SERVER_GROUP + \" expects one and only one child: %s\")\n     String serverGroupExpectsSingleChild(String rolloutPlan);\n     /**", "sourceBeforeFix": "id=15849", "sourceAfterFix": "id=10849"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "fixed": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "sourceBeforeFix": "GL20.glUniform4(location,v)", "sourceAfterFix": "GL20.glUniform4fv(location,v)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform2iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toIntBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform3f (int location, float x, float y, float z) {\r", "fixed": " \t}\r\n \tpublic void glUniform2iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform2iv(location, v);\r\n \t}\r\n \tpublic void glUniform2iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform2iv(location, toIntBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform3f (int location, float x, float y, float z) {\r", "sourceBeforeFix": "GL20.glGetUniform(program,location,params)", "sourceAfterFix": "GL20.glGetUniformiv(program,location,params)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public List<Trends> getWeeklyTrends(Date date, boolean excludeHashTags) throws TwitterException {\n        return Trends.constructTrendsList(get(getSearchBaseURL()\n                 + \"trends/weekly.json?date=\" + toDateStr(date)\n                 + (excludeHashTags ? \"&exclude=hashtags\" : \"\"), false));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public List<Trends> getWeeklyTrends(Date date, boolean excludeHashTags) throws TwitterException {\n        return Trends.createTrendsList(get(getSearchBaseURL()\n                 + \"trends/weekly.json?date=\" + toDateStr(date)\n                 + (excludeHashTags ? \"&exclude=hashtags\" : \"\"), false));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites/\" + id+ \".json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites/\" + id+ \".json\",new PostParameter[0],true))"}
{"fixCommitSHA1": "114870164ba9822afc3a92eefe5258f54a1c6a17", "projectName": "Activiti.Activiti", "bugType": "Change Identifier Used", "problem": "             assertEquals(1, taskService.createTaskQuery()\n                     .or()\n                     .taskInvolvedUser(\"involvedUser\")\n                    .taskInvolvedGroups(groups)\n                     .endOr()\n                     .count());", "fixed": "             assertEquals(1, taskService.createTaskQuery()\n                     .or()\n                     .taskInvolvedUser(\"involvedUser\")\n                    .taskInvolvedGroupsIn(groups)\n                     .endOr()\n                     .count());", "sourceBeforeFix": "taskService.createTaskQuery().or().taskInvolvedUser(\"involvedUser\").taskInvolvedGroups(groups)", "sourceAfterFix": "taskService.createTaskQuery().or().taskInvolvedUser(\"involvedUser\").taskInvolvedGroupsIn(groups)"}
{"fixCommitSHA1": "dd3cd7aa7f719f1ebbd8d191496bf304abd67f20", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "     @Override\n     public void set(K key, V value) {\n         begin();\n        transactionalMap.put(key, value);\n         commit();\n     }", "fixed": "     @Override\n     public void set(K key, V value) {\n         begin();\n        transactionalMap.set(key, value);\n         commit();\n     }", "sourceBeforeFix": "transactionalMap.put(key,value)", "sourceAfterFix": "transactionalMap.set(key,value)"}
{"fixCommitSHA1": "335f8c0d2af9c55c731dc7b44d18c5e3796f4bd6", "projectName": "hazelcast.hazelcast", "bugType": "More Specific If", "problem": "             return false;\n         }\n        if (this.referenceId == referenceId) {\n             return true;\n         }", "fixed": "             return false;\n         }\n        if (!this.transactional && this.referenceId == referenceId) {\n             return true;\n         }", "sourceBeforeFix": "this.referenceId == referenceId", "sourceAfterFix": "!transactional && this.referenceId == referenceId"}
{"fixCommitSHA1": "811f7b2271556befe5b0e74c3881d34fe1531252", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Wrong Function Name", "problem": "                         }\n                     }\n                     nettyRequest.setHeader(HttpHeaders.Names.CONTENT_LENGTH, String.valueOf(sb.length()));\n                    nettyRequest.setContent(ChannelBuffers.copiedBuffer(sb.toString().getBytes(bodyCharset)));\n                     if (!request.getHeaders().containsKey(HttpHeaders.Names.CONTENT_TYPE)) {\n                         nettyRequest.setHeader(HttpHeaders.Names.CONTENT_TYPE, \"application/x-www-form-urlencoded\");", "fixed": "                         }\n                     }\n                     nettyRequest.setHeader(HttpHeaders.Names.CONTENT_LENGTH, String.valueOf(sb.length()));\n                    nettyRequest.setContent(ChannelBuffers.wrappedBuffer(sb.toString().getBytes(bodyCharset)));\n                     if (!request.getHeaders().containsKey(HttpHeaders.Names.CONTENT_TYPE)) {\n                         nettyRequest.setHeader(HttpHeaders.Names.CONTENT_TYPE, \"application/x-www-form-urlencoded\");", "sourceBeforeFix": "ChannelBuffers.copiedBuffer(bytes,0,length)", "sourceAfterFix": "ChannelBuffers.wrappedBuffer(bytes,0,length)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedGoogleDriveEndpointBuilder\n             extends\n                 AdvancedGoogleDriveEndpointConsumerBuilder, AdvancedGoogleDriveEndpointProducerBuilder {\n         default GoogleDriveEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedGoogleDriveEndpointBuilder\n             extends\n                 AdvancedGoogleDriveEndpointConsumerBuilder, AdvancedGoogleDriveEndpointProducerBuilder {\n         default GoogleDriveEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "d7b19bfc78039804e5460a01e6d5939d2f4ce5f7", "projectName": "Alluxio.alluxio", "bugType": "Same Function More Args", "problem": "   }\n   /**\n   * Free the file or Folder from tachyon in-memory specified by argv\n    *\n    * @param path The TachyonURI path as the input of the command\n    * @return 0 if command if successful, -1 if an error occurred.", "fixed": "   }\n   /**\n   * Free the given file or folder from tachyon in-memory (recursively freeing all children \n   * if a folder)\n    *\n    * @param path The TachyonURI path as the input of the command\n    * @return 0 if command if successful, -1 if an error occurred.", "sourceBeforeFix": "mTfs.mkdirs(path)", "sourceAfterFix": "mTfs.mkdirs(path,true)"}
{"fixCommitSHA1": "7db2869ff594f72df9727513287a0a018d7b9f9d", "projectName": "neo4j.neo4j", "bugType": "Same Function More Args", "problem": "     private long translateToDate( long timeWithDate, long time, TimeZone timeIsGivenInThisTimeZone )\n     {\n        Calendar calendar = Calendar.getInstance();\n         calendar.setTimeInMillis( timeWithDate );\n         Calendar timeCalendar = Calendar.getInstance();", "fixed": "     private long translateToDate( long timeWithDate, long time, TimeZone timeIsGivenInThisTimeZone )\n     {\n        Calendar calendar = Calendar.getInstance(timeIsGivenInThisTimeZone);\n         calendar.setTimeInMillis( timeWithDate );\n         Calendar timeCalendar = Calendar.getInstance();", "sourceBeforeFix": "Calendar.getInstance()", "sourceAfterFix": "Calendar.getInstance(timeIsGivenInThisTimeZone)"}
{"fixCommitSHA1": "1d5647b92215f0ceabced59275225ad829061663", "projectName": "spring-projects.spring-boot", "bugType": "Change Modifier", "problem": " \tprivate int port = Integer.valueOf(System.getProperty(\"port\"));\n \t@Test\n\tpublic void testHome() throws Exception {\nString url = \"http:\n \t\tSystem.out.println(url);\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);", "fixed": " \tprivate int port = Integer.valueOf(System.getProperty(\"port\"));\n \t@Test\n\tvoid testHome() throws Exception {\nString url = \"http:\n \t\tSystem.out.println(url);\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface KubernetesSecretsEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedKubernetesSecretsEndpointBuilder advanced() {", "fixed": "     \n    public interface KubernetesSecretsEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedKubernetesSecretsEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "51271a02806489a2e2b5539475eb2131fd29b77d", "projectName": "google.closure-compiler", "bugType": "Change Caller in Function Call", "problem": "     new StaticFieldGetterSetterInliner(root).run();\n    GatherGettersAndSetterProperties.update(compiler, externs, root);\n   }\n   class StaticFieldGetterSetterInliner {", "fixed": "     new StaticFieldGetterSetterInliner(root).run();\n    GatherGetterAndSetterProperties.update(compiler, externs, root);\n   }\n   class StaticFieldGetterSetterInliner {", "sourceBeforeFix": "GatherGettersAndSetterProperties.update(compiler,externs,root)", "sourceAfterFix": "GatherGetterAndSetterProperties.update(compiler,externs,root)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "71775a876d1b049c7dfc49ffd35eff0d3f066691", "projectName": "perwendel.spark", "bugType": "Change Modifier", "problem": "      *\n      * @param folder the location\n      */\n    public static void configureExternalStaticResources(String folder) {\n         Assert.notNull(folder, \"'folder' must not be null\");\n         if (!externalStaticResourcesSet) {", "fixed": "      *\n      * @param folder the location\n      */\n    public synchronized static void configureExternalStaticResources(String folder) {\n         Assert.notNull(folder, \"'folder' must not be null\");\n         if (!externalStaticResourcesSet) {", "sourceBeforeFix": "9", "sourceAfterFix": "41"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "0e4f46022ea79029ee6b74f98073c788b80e0e84", "projectName": "hazelcast.hazelcast", "bugType": "Same Function Less Args", "problem": "         m1.setIntAttribute(\"Test\", 321);\n        latch.await(2, TimeUnit.SECONDS);\n         assertNotNull(member.getIntAttribute(\"Test\"));\n         assertEquals(321, (int) member.getIntAttribute(\"Test\"));", "fixed": "         m1.setIntAttribute(\"Test\", 321);\n        assertOpenEventually(latch);\n         assertNotNull(member.getIntAttribute(\"Test\"));\n         assertEquals(321, (int) member.getIntAttribute(\"Test\"));", "sourceBeforeFix": "assertOpenEventually(countDownLatch,30)", "sourceAfterFix": "assertOpenEventually(countDownLatch)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15869, value = \"Unknown %s %s\")\n     String unknown(String name, String value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10869, value = \"Unknown %s %s\")\n     String unknown(String name, String value);\n     /**", "sourceBeforeFix": "id=15854", "sourceAfterFix": "id=10854"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleAlternativesWithCommonLabel_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(561);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "fixed": " \tpublic void testMultipleAlternativesWithCommonLabel_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(560);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "sourceBeforeFix": "new StringBuilder(561)", "sourceAfterFix": "new StringBuilder(560)"}
{"fixCommitSHA1": "423fca2f16ef73c1e4bce7cf11660a510be1456e", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "         if(LOG.isDebugEnabled()) {\n           LOG.debug(\"not assigning region (on kill list): \" +\n            info.getRegionName());\n         }\n         return;\n       }", "fixed": "         if(LOG.isDebugEnabled()) {\n           LOG.debug(\"not assigning region (on kill list): \" +\n            info.getRegionNameAsString());\n         }\n         return;\n       }", "sourceBeforeFix": "info.getRegionName()", "sourceAfterFix": "info.getRegionNameAsString()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  private final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 15831, value = \"The master host controller cannot register slave host controllers as it's current running mode is '%s'\")\n     String adminOnlyModeCannotAcceptSlaves(RunningMode runningMode);\n     /**", "fixed": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 10831, value = \"The master host controller cannot register slave host controllers as it's current running mode is '%s'\")\n     String adminOnlyModeCannotAcceptSlaves(RunningMode runningMode);\n     /**", "sourceBeforeFix": "id=15831", "sourceAfterFix": "id=10831"}
{"fixCommitSHA1": "75d32d68cf130e7d43dfe361a34ebc3c74e61e3b", "projectName": "hazelcast.hazelcast", "bugType": "Change Numeric Literal", "problem": "     static final HazelcastProperty MAX_TOLERATED_MISS_COUNT\n             = new HazelcastProperty(\"hazelcast.invalidation.max.tolerated.miss.count\", 10);\n     static final HazelcastProperty RECONCILIATION_INTERVAL_SECONDS\n            = new HazelcastProperty(\"hazelcast.invalidation.reconciliation.interval.seconds\", 1, SECONDS);\n     static final HazelcastProperty MIN_RECONCILIATION_INTERVAL_SECONDS\n            = new HazelcastProperty(\"hazelcast.invalidation.min.reconciliation.interval.seconds\", 1, SECONDS);\n     static final long RESCHEDULE_FAILED_INITIALIZATION_AFTER_MILLIS = 500;", "fixed": "     static final HazelcastProperty MAX_TOLERATED_MISS_COUNT\n             = new HazelcastProperty(\"hazelcast.invalidation.max.tolerated.miss.count\", 10);\n     static final HazelcastProperty RECONCILIATION_INTERVAL_SECONDS\n            = new HazelcastProperty(\"hazelcast.invalidation.reconciliation.interval.seconds\", 60, SECONDS);\n     static final HazelcastProperty MIN_RECONCILIATION_INTERVAL_SECONDS\n            = new HazelcastProperty(\"hazelcast.invalidation.min.reconciliation.interval.seconds\", 30, SECONDS);\n     static final long RESCHEDULE_FAILED_INITIALIZATION_AFTER_MILLIS = 500;", "sourceBeforeFix": "new HazelcastProperty(\"hazelcast.invalidation.reconciliation.interval.seconds\",1,SECONDS)", "sourceAfterFix": "new HazelcastProperty(\"hazelcast.invalidation.reconciliation.interval.seconds\",60,SECONDS)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 15866, value = \"%s is null\")\n     IllegalArgumentException nullVar(String name);\n     /**", "fixed": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 10866, value = \"%s is null\")\n     IllegalArgumentException nullVar(String name);\n     /**", "sourceBeforeFix": "id=15832", "sourceAfterFix": "id=10832"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "3cde0f0f90341c21562d893992181650049985b8", "projectName": "Graylog2.graylog2-server", "bugType": "Change Identifier Used", "problem": "     @Parameter(value = \"default_message_output_class\")\n     private String defaultMessageOutputClass = \"\";\n    @Parameter(value = \"collector_expiration_threshold\", validator = PositiveIntegerValidator.class)\n     private Duration collectorExpirationThreshold = Duration.days(14);\n    @Parameter(value = \"collector_inactive_threshold\", validator = PositiveIntegerValidator.class)\n     private Duration collectorInactiveThreshold = Duration.minutes(1);\n     @Parameter(value = \"dashboard_widget_default_cache_time\", validator = PositiveDurationValidator.class)", "fixed": "     @Parameter(value = \"default_message_output_class\")\n     private String defaultMessageOutputClass = \"\";\n    @Parameter(value = \"collector_expiration_threshold\", validator = PositiveDurationValidator.class)\n     private Duration collectorExpirationThreshold = Duration.days(14);\n    @Parameter(value = \"collector_inactive_threshold\", validator = PositiveDurationValidator.class)\n     private Duration collectorInactiveThreshold = Duration.minutes(1);\n     @Parameter(value = \"dashboard_widget_default_cache_time\", validator = PositiveDurationValidator.class)", "sourceBeforeFix": "PositiveIntegerValidator.class", "sourceAfterFix": "PositiveDurationValidator.class"}
{"fixCommitSHA1": "8969566d0926bdd2ef438e8c9ba6e8e196f7ba7d", "projectName": "xetorthio.jedis", "bugType": "Change Identifier Used", "problem": "     new JedisClusterCommand<Integer>(connectionHandler, maxRedirections) {\n       @Override\n       public Integer execute(Jedis connection) {\n        connection.subscribe(jedisPubSub, patterns);\n         return 0;\n       }\n     }.runWithAnyNode();", "fixed": "     new JedisClusterCommand<Integer>(connectionHandler, maxRedirections) {\n       @Override\n       public Integer execute(Jedis connection) {\n        connection.psubscribe(jedisPubSub, patterns);\n         return 0;\n       }\n     }.runWithAnyNode();", "sourceBeforeFix": "connection.subscribe(jedisPubSub,patterns)", "sourceAfterFix": "connection.psubscribe(jedisPubSub,patterns)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public Trends getCurrentTrends(boolean excludeHashTags) throws TwitterException {\n        return Trends.constructTrendsList(get(getSearchBaseURL() + \"trends/current.json\"\n                 + (excludeHashTags ? \"?exclude=hashtags\" : \"\"), false)).get(0);\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public Trends getCurrentTrends(boolean excludeHashTags) throws TwitterException {\n        return Trends.createTrendsList(get(getSearchBaseURL() + \"trends/current.json\"\n                 + (excludeHashTags ? \"?exclude=hashtags\" : \"\"), false)).get(0);\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",null,true))"}
{"fixCommitSHA1": "5bcda0dcda632007620256bcc654628a81ab50f0", "projectName": "apache.hive", "bugType": "Less Specific If", "problem": "     if (s == null || regex == null) {\n       return null;\n     }\n    if (!regex.equals(lastRegex)) {\n       lastRegex = regex;\n       p = Pattern.compile(regex);\n     }", "fixed": "     if (s == null || regex == null) {\n       return null;\n     }\n    if (!regex.equals(lastRegex) || p == null) {\n       lastRegex = regex;\n       p = Pattern.compile(regex);\n     }", "sourceBeforeFix": "!regex.equals(lastRegex)", "sourceAfterFix": "!regex.equals(lastRegex) || p == null"}
{"fixCommitSHA1": "bdd386e699e23c48524b822b9b890b077f294c69", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     return value;\n   }\n  private boolean isIdentifierStart(char ch) {\n     switch (ch) {\n     case '$':\n     case '_':", "fixed": "     return value;\n   }\n  private static boolean isIdentifierStart(char ch) {\n     switch (ch) {\n     case '$':\n     case '_':", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleActionsPredicatesOptions_1() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(247);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {System.out.println($ctx.toStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");", "fixed": " \tpublic void testMultipleActionsPredicatesOptions_1() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {System.out.println($ctx.toStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");", "sourceBeforeFix": "new StringBuilder(247)", "sourceAfterFix": "new StringBuilder(246)"}
{"fixCommitSHA1": "dfce500be84e220ac42f32a09f0a4fa55fd3fbb9", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "     public void testSendAccountBean() throws Exception {\n         long start = System.currentTimeMillis();\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedMessageCount(2);\n         assertMockEndpointsSatisfied();\n         long delta = System.currentTimeMillis() - start;", "fixed": "     public void testSendAccountBean() throws Exception {\n         long start = System.currentTimeMillis();\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedMinimumMessageCount(2);\n         assertMockEndpointsSatisfied();\n         long delta = System.currentTimeMillis() - start;", "sourceBeforeFix": "mock.expectedMessageCount(2)", "sourceAfterFix": "mock.expectedMinimumMessageCount(2)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "ff7d97dc1a7222e6c207a95f429aa5bfde5155ee", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     private String charset;\n     private int bpos;\n    public XMLStreamReaderInputStream(XMLStreamReader reader, String charset, XMLOutputFactory outfactory) {\n         this.reader = reader;\n         this.buffer = new byte[BUFFER_SIZE];\n         this.chunk = new TrimmableByteArrayOutputStream();", "fixed": "     private String charset;\n     private int bpos;\n    XMLStreamReaderInputStream(XMLStreamReader reader, String charset, XMLOutputFactory outfactory) {\n         this.reader = reader;\n         this.buffer = new byte[BUFFER_SIZE];\n         this.chunk = new TrimmableByteArrayOutputStream();", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "e3f3ae5f48a12ad28a8506302f1a440ed4e2fb17", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t\t\ttry {\r\n \t\t\t\tin = new DataInputStream(new BufferedInputStream(new GZIPInputStream(pkmFile.read())));\r\n \t\t\t\tint fileSize = in.readInt();\r\n\t\t\t\tcompressedData = BufferUtils.newByteBuffer(fileSize);\r\n \t\t\t\tint readBytes = 0;\r\n \t\t\t\twhile ((readBytes = in.read(buffer)) != -1) {\r\n \t\t\t\t\tcompressedData.put(buffer, 0, readBytes);\r", "fixed": " \t\t\ttry {\r\n \t\t\t\tin = new DataInputStream(new BufferedInputStream(new GZIPInputStream(pkmFile.read())));\r\n \t\t\t\tint fileSize = in.readInt();\r\n\t\t\t\tcompressedData = BufferUtils.newUnsafeByteBuffer(fileSize);\r\n \t\t\t\tint readBytes = 0;\r\n \t\t\t\twhile ((readBytes = in.read(buffer)) != -1) {\r\n \t\t\t\t\tcompressedData.put(buffer, 0, readBytes);\r", "sourceBeforeFix": "BufferUtils.newByteBuffer(fileSize)", "sourceAfterFix": "BufferUtils.newUnsafeByteBuffer(fileSize)"}
{"fixCommitSHA1": "c97c9dfa0c92465351ea13a2c44b080f56fdaf60", "projectName": "Alluxio.alluxio", "bugType": "Change Binary Operator", "problem": "     }\n     int toRead = (int) Math.min(len, remaining());\nif (mBufferIsValid && mBuffer.remaining() > toRead) {\n       mBuffer.get(b, off, toRead);\n       mPos += toRead;\n       mBlockIsRead = true;", "fixed": "     }\n     int toRead = (int) Math.min(len, remaining());\nif (mBufferIsValid && mBuffer.remaining() >= toRead) {\n       mBuffer.get(b, off, toRead);\n       mPos += toRead;\n       mBlockIsRead = true;", "sourceBeforeFix": "mBuffer.remaining() > toRead", "sourceAfterFix": "mBuffer.remaining() >= toRead"}
{"fixCommitSHA1": "0d252a7fbd2a1b85faa7feb487c39aaa97208209", "projectName": "stanfordnlp.CoreNLP", "bugType": "Change Identifier Used", "problem": "       }\n       int index = unpackIndex(i);\n       float score = unpackScore(i);\n      packed[j] = pack(index, score);\n       ++j;\n     }\n     packed = newPacked;", "fixed": "       }\n       int index = unpackIndex(i);\n       float score = unpackScore(i);\n      newPacked[j] = pack(index, score);\n       ++j;\n     }\n     packed = newPacked;", "sourceBeforeFix": "packed[j]", "sourceAfterFix": "newPacked[j]"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform2iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toIntBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform3f (int location, float x, float y, float z) {\r", "fixed": " \t}\r\n \tpublic void glUniform2iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform2iv(location, v);\r\n \t}\r\n \tpublic void glUniform2iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform2iv(location, toIntBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform3f (int location, float x, float y, float z) {\r", "sourceBeforeFix": "GL20.glUniform2(location,toFloatBuffer(v,offset,count << 1))", "sourceAfterFix": "GL20.glUniform2fv(location,toFloatBuffer(v,offset,count << 1))"}
{"fixCommitSHA1": "ea13a9c821a275561e56c45d5f0b90479904508d", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         }\n         doRemoveRecord(key, source);\n         if (isEventsEnabled()) {\n            publishEvent(createCacheExpiredEvent(key, toEventData(record), CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                  origin, IGNORE_COMPLETION));\n         }\n         return true;", "fixed": "         }\n         doRemoveRecord(key, source);\n         if (isEventsEnabled()) {\n            publishEvent(createCacheExpiredEvent(toEventData(key), toEventData(record),\n                                                 CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                  origin, IGNORE_COMPLETION));\n         }\n         return true;", "sourceBeforeFix": "toHeapData(key)", "sourceAfterFix": "toEventData(key)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "f8cc32b31367f0cc4e42435a20793897cb432a40", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t\t\treturn;\n \t\t}\n\t\ttime.put(delta);\n \t\tfinal float currentLoad = delta == 0f ? 0f : current / delta;\n \t\tload.put((delta > 1f) ? currentLoad : delta * currentLoad + (1f - delta) * load.latest);", "fixed": " \t\t\treturn;\n \t\t}\n\t\ttime.put(current);\n \t\tfinal float currentLoad = delta == 0f ? 0f : current / delta;\n \t\tload.put((delta > 1f) ? currentLoad : delta * currentLoad + (1f - delta) * load.latest);", "sourceBeforeFix": "time.put(delta)", "sourceAfterFix": "time.put(current)"}
{"fixCommitSHA1": "296ba4ff8db020176e5b6abe058052a1314cd2ee", "projectName": "openhab.openhab", "bugType": "Same Function More Args", "problem": " \t */\n \tstatic public DecimalType evolutionRate(Item item, AbstractInstant timestamp, String serviceName) {\n \t\tDecimalType result = null;\n\t\tHistoricItem itemThen = historicState(item, timestamp);\n \t\tif (itemThen != null) {\n \t\t\tDecimalType valueThen = (DecimalType) itemThen.getState();\n \t\t\tDecimalType valueNow = (DecimalType) item.getStateAs(DecimalType.class);", "fixed": " \t */\n \tstatic public DecimalType evolutionRate(Item item, AbstractInstant timestamp, String serviceName) {\n \t\tDecimalType result = null;\n\t\tHistoricItem itemThen = historicState(item, timestamp, serviceName);\n \t\tif (itemThen != null) {\n \t\t\tDecimalType valueThen = (DecimalType) itemThen.getState();\n \t\t\tDecimalType valueNow = (DecimalType) item.getStateAs(DecimalType.class);", "sourceBeforeFix": "historicState(item,timestamp)", "sourceAfterFix": "historicState(item,timestamp,serviceName)"}
{"fixCommitSHA1": "46125686874f5b69bcdb6f4c9bef3f900a7057c6", "projectName": "netty.netty", "bugType": "Change Numeric Literal", "problem": "                 wakenUp.set(false);\n                 try {\n                    int selectedKeyCount = selector.select(500);", "fixed": "                 wakenUp.set(false);\n                 try {\n                    int selectedKeyCount = selector.select(10);", "sourceBeforeFix": "selector.select(500)", "sourceAfterFix": "selector.select(10)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "79946366e1ab141ef2b595e0079dcac7b913da2b", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "             \"1: \" + getCheckMessage(MSG_KEY_MISMATCH),\n         };\n        verify(checkConfig, getPath(\"InputPackageDeclarationDiffDirectoryAtParent.java\"), expected);\n     }\n     @Test", "fixed": "             \"1: \" + getCheckMessage(MSG_KEY_MISMATCH),\n         };\n        verify(checkConfig,\n                getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtParent.java\"),\n                expected);\n     }\n     @Test", "sourceBeforeFix": "getPath(\"InputPackageDeclarationDiffDirectory.java\")", "sourceAfterFix": "getNonCompilablePath(\"InputPackageDeclarationDiffDirectory.java\")"}
{"fixCommitSHA1": "97d07253e2933dbca0d08cd19072503506bda863", "projectName": "netty.netty", "bugType": "Change Numeric Literal", "problem": "         new SpdySessionStatus(1, \"PROTOCOL_ERROR\");\n     \n     public static final SpdySessionStatus INTERNAL_ERROR =\n        new SpdySessionStatus(11, \"INTERNAL_ERROR\");\n     /**\n      * Returns the {@link SpdySessionStatus} represented by the specified code.", "fixed": "         new SpdySessionStatus(1, \"PROTOCOL_ERROR\");\n     \n     public static final SpdySessionStatus INTERNAL_ERROR =\n        new SpdySessionStatus(2, \"INTERNAL_ERROR\");\n     /**\n      * Returns the {@link SpdySessionStatus} represented by the specified code.", "sourceBeforeFix": "case 11: ", "sourceAfterFix": "case 2: "}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     @ApiOperation(value = \"Logs out current logged in user session\", notes = \"\", tags={ \"user\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Void.class) })\n    void logoutUser();\n     @PUT\n     @Path(\"/{username}\")", "fixed": "     @ApiOperation(value = \"Logs out current logged in user session\", notes = \"\", tags={ \"user\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Void.class) })\n    void logoutUser() throws Exception;\n     @PUT\n     @Path(\"/{username}\")", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "e1d74627f527eb147f041030d9b853190a5c1046", "projectName": "spring-projects.spring-boot", "bugType": "Change Modifier", "problem": "  * {@link EnableAutoConfiguration Auto-configuration} for Spring REST Docs.\n  *\n  * @author Andy Wilkinson\n  */\n @Configuration\n @ConditionalOnWebApplication\n @EnableConfigurationProperties\nclass RestDocsAutoConfiguration {\n \t@Bean\n \t@ConditionalOnMissingBean(MockMvcRestDocumentationConfigurer.class)", "fixed": "  * {@link EnableAutoConfiguration Auto-configuration} for Spring REST Docs.\n  *\n  * @author Andy Wilkinson\n * @since 1.4.0\n  */\n @Configuration\n @ConditionalOnWebApplication\n @EnableConfigurationProperties\npublic class RestDocsAutoConfiguration {\n \t@Bean\n \t@ConditionalOnMissingBean(MockMvcRestDocumentationConfigurer.class)", "sourceBeforeFix": "0", "sourceAfterFix": "1"}
{"fixCommitSHA1": "daba0256b7cf360824aebb3ff176d5937c862e46", "projectName": "openmrs.openmrs-core", "bugType": "Change Numeric Literal", "problem": " \t@Verifies(value = \"should return all global properties in the database\", method = \"getAllGlobalProperties()\")\n \tpublic void getAllGlobalProperties_shouldReturnAllGlobalPropertiesInTheDatabase() throws Exception {\n \t\texecuteDataSet(ADMIN_INITIAL_DATA_XML);\n\t\tAssert.assertEquals(20, Context.getAdministrationService().getAllGlobalProperties().size());\n \t}\n \t/**", "fixed": " \t@Verifies(value = \"should return all global properties in the database\", method = \"getAllGlobalProperties()\")\n \tpublic void getAllGlobalProperties_shouldReturnAllGlobalPropertiesInTheDatabase() throws Exception {\n \t\texecuteDataSet(ADMIN_INITIAL_DATA_XML);\n\t\tAssert.assertEquals(21, Context.getAdministrationService().getAllGlobalProperties().size());\n \t}\n \t/**", "sourceBeforeFix": "Assert.assertEquals(19,as.getAllGlobalProperties().size())", "sourceAfterFix": "Assert.assertEquals(20,as.getAllGlobalProperties().size())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  private final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  private final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  private final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15843, value = \"Invalid rollout plan. Plan operations affect server groups %s that are not reflected in the rollout plan\")\n     String invalidRolloutPlan(Set<String> groups);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10843, value = \"Invalid rollout plan. Plan operations affect server groups %s that are not reflected in the rollout plan\")\n     String invalidRolloutPlan(Set<String> groups);\n     /**", "sourceBeforeFix": "id=15838", "sourceAfterFix": "id=10838"}
{"fixCommitSHA1": "cb84b2788aeed6aad2bc4b1acb98290e060861e2", "projectName": "apache.hbase", "bugType": "Wrong Function Name", "problem": "       Assert.assertEquals(2, result.size());\n       hbck.assigns(Arrays.asList(result.keySet().toArray(new String[0])).stream()\n           .map(regionName -> regionName.split(\"\\\\.\")[1]).collect(Collectors.toList()));\n      ProcedureTestingUtility.waitNoProcedureRunning(master.getMasterProcedureExecutor());\n       result = hbck.getFailedSplitMergeLegacyRegions(Arrays.asList(TableName.valueOf(testTable)));\n       Assert.assertEquals(0, result.size());", "fixed": "       Assert.assertEquals(2, result.size());\n       hbck.assigns(Arrays.asList(result.keySet().toArray(new String[0])).stream()\n           .map(regionName -> regionName.split(\"\\\\.\")[1]).collect(Collectors.toList()));\n      ProcedureTestingUtility.waitAllProcedures(master.getMasterProcedureExecutor());\n       result = hbck.getFailedSplitMergeLegacyRegions(Arrays.asList(TableName.valueOf(testTable)));\n       Assert.assertEquals(0, result.size());", "sourceBeforeFix": "ProcedureTestingUtility.waitNoProcedureRunning(master.getMasterProcedureExecutor())", "sourceAfterFix": "ProcedureTestingUtility.waitAllProcedures(master.getMasterProcedureExecutor())"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCachePuts(1);\n            statistics.addPutTimeNano(System.nanoTime() - start);\n         }\n         return result;\n     }", "fixed": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCachePuts(1);\n            statistics.addPutTimeNanos(System.nanoTime() - start);\n         }\n         return result;\n     }", "sourceBeforeFix": "statistics.addPutTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addPutTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "a63faf44e1b103a49d25a15c720fc5940ae9fc07", "projectName": "square.retrofit", "bugType": "Change Identifier Used", "problem": "     assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mBodyWildcard = new TypeToken<Maybe<? extends String>>() {}.getType();\n    assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fBodyWildcard = new TypeToken<Flowable<? extends String>>() {}.getType();\n    assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oBodyGeneric = new TypeToken<Observable<List<String>>>() {}.getType();", "fixed": "     assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mBodyWildcard = new TypeToken<Maybe<? extends String>>() {}.getType();\n    assertThat(factory.get(mBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fBodyWildcard = new TypeToken<Flowable<? extends String>>() {}.getType();\n    assertThat(factory.get(fBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oBodyGeneric = new TypeToken<Observable<List<String>>>() {}.getType();", "sourceBeforeFix": "factory.get(sResultWildcard,NO_ANNOTATIONS,retrofit)", "sourceAfterFix": "factory.get(mResultWildcard,NO_ANNOTATIONS,retrofit)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "08d6809933b9ad51cba7731ec5de7e35857e9b22", "projectName": "openhab.openhab", "bugType": "Change Identifier Used", "problem": " \t */\n \t@Override\n \tpublic Collection<Item> getItems() {\n\t\tSet<Item> items = new HashSet<Item>();\n \t\tfor (String name : modelRepository.getAllModelNamesOfType(\"items\")) {\n \t\t\titems.addAll(getItemsFromModel(name));\n \t\t}", "fixed": " \t */\n \t@Override\n \tpublic Collection<Item> getItems() {\n\t\tList<Item> items = new ArrayList<Item>();\n \t\tfor (String name : modelRepository.getAllModelNamesOfType(\"items\")) {\n \t\t\titems.addAll(getItemsFromModel(name));\n \t\t}", "sourceBeforeFix": "Set<Item>", "sourceAfterFix": "List<Item>"}
{"fixCommitSHA1": "86c753a14931a2cace312a5c55ee139feb5ad012", "projectName": "spring-projects.spring-boot", "bugType": "Change Numeric Literal", "problem": " \t\tEnvironmentTestUtils.addEnvironment(this.context, \"security.ignored:none\");\n \t\tthis.context.refresh();\n\t\tassertEquals(2,\n \t\t\t\tthis.context.getBean(FilterChainProxy.class).getFilterChains().size());\n \t}", "fixed": " \t\tEnvironmentTestUtils.addEnvironment(this.context, \"security.ignored:none\");\n \t\tthis.context.refresh();\n\t\tassertEquals(3,\n \t\t\t\tthis.context.getBean(FilterChainProxy.class).getFilterChains().size());\n \t}", "sourceBeforeFix": "assertEquals(2,this.context.getBean(FilterChainProxy.class).getFilterChains().size())", "sourceAfterFix": "assertEquals(3,this.context.getBean(FilterChainProxy.class).getFilterChains().size())"}
{"fixCommitSHA1": "79c128ee2c9a9f6c24fc6941840e5ef354d8bd78", "projectName": "gephi.gephi", "bugType": "Change Binary Operator", "problem": "     }\n     public boolean hasAttributes() {\n        return nodeData.getAttributes() == null;\n     }\n     public void setAttributes(Attributes attributes) {", "fixed": "     }\n     public boolean hasAttributes() {\n        return nodeData.getAttributes() != null;\n     }\n     public void setAttributes(Attributes attributes) {", "sourceBeforeFix": "nodeData.getAttributes() == null", "sourceAfterFix": "nodeData.getAttributes() != null"}
{"fixCommitSHA1": "ea626ef8c390dc81c71b3a16521cf591611bc5df", "projectName": "netty.netty", "bugType": "Change Identifier Used", "problem": "         }\n     }\n    private SSLEngineResult sslReadErrorResult(int err, int bytesConsumed, int bytesProduced) throws SSLException {", "fixed": "         }\n     }\n    private SSLEngineResult sslReadErrorResult(int error, int stackError, int bytesConsumed, int bytesProduced)\n            throws SSLException {", "sourceBeforeFix": "SSL.getErrorString(err)", "sourceAfterFix": "SSL.getErrorString(stackError)"}
{"fixCommitSHA1": "e70960913c07d921dea470857f9bcdb67f38959f", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "          * @param importGroup\n          *        import group.\n          */\n        public void setImportGroup(String importGroup) {\n             this.importGroup = importGroup;\n         }", "fixed": "          * @param importGroup\n          *        import group.\n          */\n        public final void setImportGroup(String importGroup) {\n             this.importGroup = importGroup;\n         }", "sourceBeforeFix": "1", "sourceAfterFix": "17"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "         @ApiResponse(code = 200, message = \"successful operation\", response = Pet.class),\n         @ApiResponse(code = 400, message = \"Invalid ID supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"Pet not found\", response = Void.class) })\n    Pet getPetById(@PathParam(\"petId\") @ApiParam(\"ID of pet to return\") Long petId);\n     @PUT\n     @Consumes({ \"application/json\", \"application/xml\" })", "fixed": "         @ApiResponse(code = 200, message = \"successful operation\", response = Pet.class),\n         @ApiResponse(code = 400, message = \"Invalid ID supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"Pet not found\", response = Void.class) })\n    Pet getPetById(@PathParam(\"petId\") @ApiParam(\"ID of pet to return\") Long petId) throws Exception;\n     @PUT\n     @Consumes({ \"application/json\", \"application/xml\" })", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "a63faf44e1b103a49d25a15c720fc5940ae9fc07", "projectName": "square.retrofit", "bugType": "Change Identifier Used", "problem": "     assertThat(factory.get(sResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResponseWildcard = new TypeToken<Maybe<Response<? extends String>>>() {}.getType();\n    assertThat(factory.get(sResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResponseWildcard = new TypeToken<Flowable<Response<? extends String>>>() {}.getType();\n    assertThat(factory.get(sResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oResultClass = new TypeToken<Observable<Result<String>>>() {}.getType();", "fixed": "     assertThat(factory.get(sResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResponseWildcard = new TypeToken<Maybe<Response<? extends String>>>() {}.getType();\n    assertThat(factory.get(mResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResponseWildcard = new TypeToken<Flowable<Response<? extends String>>>() {}.getType();\n    assertThat(factory.get(fResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oResultClass = new TypeToken<Observable<Result<String>>>() {}.getType();", "sourceBeforeFix": "factory.get(sResponseWildcard,NO_ANNOTATIONS,retrofit)", "sourceAfterFix": "factory.get(mResponseWildcard,NO_ANNOTATIONS,retrofit)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedJcloudsEndpointBuilder\n             extends\n                 AdvancedJcloudsEndpointConsumerBuilder, AdvancedJcloudsEndpointProducerBuilder {\n         default JcloudsEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedJcloudsEndpointBuilder\n             extends\n                 AdvancedJcloudsEndpointConsumerBuilder, AdvancedJcloudsEndpointProducerBuilder {\n         default JcloudsEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface RssEndpointBuilder\n            extends\n                EndpointConsumerBuilder {\n         default AdvancedRssEndpointBuilder advanced() {\n             return (AdvancedRssEndpointBuilder) this;\n         }", "fixed": "     \n    public interface RssEndpointBuilder extends EndpointConsumerBuilder {\n         default AdvancedRssEndpointBuilder advanced() {\n             return (AdvancedRssEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should delete global properties from database\n \t */\n \t@Authorized(PrivilegeConstants.PURGE_GLOBAL_PROPERTIES)\n\tpublic void purgeGlobalProperties(List<GlobalProperty> globalProperties) throws APIException;\n \t/**\n \t * Save the given global property to the database. If the global property already exists,", "fixed": " \t * @should delete global properties from database\n \t */\n \t@Authorized(PrivilegeConstants.PURGE_GLOBAL_PROPERTIES)\n\tpublic void purgeGlobalProperties(List<GlobalProperty> globalProperties);\n \t/**\n \t * Save the given global property to the database. If the global property already exists,", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "       if (TACHYON_STREAMING_READ) {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n           InputStream is = file.getInStream(ReadType.CACHE);\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;", "fixed": "       if (TACHYON_STREAMING_READ) {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           InputStream is = file.getInStream(ReadType.CACHE);\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "fixed": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttribfv(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttribiv(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "sourceBeforeFix": "GL20.glUniform1(location,toIntBuffer(v,offset,count))", "sourceAfterFix": "GL20.glUniform1iv(location,toIntBuffer(v,offset,count))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "4597da262b00311e03c657db986f712387def622", "projectName": "swagger-api.swagger-core", "bugType": "Change Identifier Used", "problem": "         final ModelImpl model = Json.mapper().readValue(json, ModelImpl.class);\n        assertFalse(model.getUniqueItems());\n     }\n }\n\\ No newline at end of file", "fixed": "         final ModelImpl model = Json.mapper().readValue(json, ModelImpl.class);\n        assertTrue(model.getUniqueItems());\n     }\n }\n\\ No newline at end of file", "sourceBeforeFix": "assertFalse(model.getUniqueItems())", "sourceAfterFix": "assertTrue(model.getUniqueItems())"}
{"fixCommitSHA1": "a4c5847e42fcba0f109de1a3d312d94588249e66", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "     }\n     public Predicate createPredicate(RouteContext routeContext) {\n        ExpressionType predicateType = getCompletePredicate();\n         if (predicateType != null && predicate == null) {\n             predicate = predicateType.createPredicate(routeContext);\n         }", "fixed": "     }\n     public Predicate createPredicate(RouteContext routeContext) {\n        ExpressionType predicateType = getHandledPredicate();\n         if (predicateType != null && predicate == null) {\n             predicate = predicateType.createPredicate(routeContext);\n         }", "sourceBeforeFix": "getCompletePredicate()", "sourceAfterFix": "getHandledPredicate()"}
{"fixCommitSHA1": "39fe5a830bb4e05a85bef3e52115c708f9409abf", "projectName": "wildfly.wildfly", "bugType": "Wrong Function Name", "problem": "                     new ModelNode[] { removeDwm, removeContext });\n             mcc.execute(compositeOp);\n             ServerReload.executeReloadAndWaitForCompletion(mcc, 60000, false,\n                    TestSuiteEnvironment.getServerAddress(), serverPort);\n         }\n         protected abstract Policy getPolicy();", "fixed": "                     new ModelNode[] { removeDwm, removeContext });\n             mcc.execute(compositeOp);\n             ServerReload.executeReloadAndWaitForCompletion(mcc, 60000, false,\n                    CONTAINER_0.equals(containerId) ? TestSuiteEnvironment.getServerAddress() : TestSuiteEnvironment.getServerAddressNode1(),\n                    serverPort);\n         }\n         protected abstract Policy getPolicy();", "sourceBeforeFix": "TestSuiteEnvironment.getServerAddress()", "sourceAfterFix": "TestSuiteEnvironment.getServerAddressNode1()"}
{"fixCommitSHA1": "75fccf13c0a0323179f37083f4249f8a4be38d85", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "                 thread.shutdown();\n             }\n             synchronized (ticket) {\n                ticket.notify();\n             }\n         }\n     }", "fixed": "                 thread.shutdown();\n             }\n             synchronized (ticket) {\n                ticket.notifyAll();\n             }\n         }\n     }", "sourceBeforeFix": "ticket.notify()", "sourceAfterFix": "ticket.notifyAll()"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "         if (isStatisticsEnabled()) {\n             if (result) {\n                 statistics.increaseCachePuts(1);\n                statistics.addPutTimeNano(System.nanoTime() - start);\n             }\n            statistics.addGetTimeNano(System.nanoTime() - start);\n             if (isHit) {\n                 statistics.increaseCacheHits(1);\n             } else {", "fixed": "         if (isStatisticsEnabled()) {\n             if (result) {\n                 statistics.increaseCachePuts(1);\n                statistics.addPutTimeNanos(System.nanoTime() - start);\n             }\n            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (isHit) {\n                 statistics.increaseCacheHits(1);\n             } else {", "sourceBeforeFix": "statistics.addGetTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addGetTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  private final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "4b52e5d010469405c1ec24baa2f8457f3eada222", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic boolean keyDown (int keycode) {\r\n\t\tInputProcessor[] items = processors.begin();\r\n \t\ttry {\r\n \t\t\tfor (int i = 0, n = processors.size; i < n; i++)\r\n\t\t\t\tif (items[i].keyDown(keycode)) return true;\r\n \t\t} finally {\r\n \t\t\tprocessors.end();\r\n \t\t}\r", "fixed": " \t}\r\n \tpublic boolean keyDown (int keycode) {\r\n\t\tObject[] items = processors.begin();\r\n \t\ttry {\r\n \t\t\tfor (int i = 0, n = processors.size; i < n; i++)\r\n\t\t\t\tif (((InputProcessor)items[i]).keyDown(keycode)) return true;\r\n \t\t} finally {\r\n \t\t\tprocessors.end();\r\n \t\t}\r", "sourceBeforeFix": "InputProcessor[]", "sourceAfterFix": "Object[]"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface GoogleSheetsEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedGoogleSheetsEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface GoogleSheetsEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedGoogleSheetsEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "17657bf3a6a679b6d203c9c915c5a7f4c7752ae5", "projectName": "apache.camel", "bugType": "Same Function Swap Args", "problem": "         if (id != null) {\n             builder.getAdviceWithTasks().add(AdviceWithTasks.afterById(route, id, answer, selectFirst, selectLast, selectFrom, selectTo, maxDeep));\n         } else if (toString != null) {\n            builder.getAdviceWithTasks().add(AdviceWithTasks.afterByToString(route, toString, answer, selectLast, selectFirst, selectFrom, selectTo, maxDeep));\n         } else if (type != null) {\n             builder.getAdviceWithTasks().add(AdviceWithTasks.afterByType(route, type, answer, selectFirst, selectLast, selectFrom, selectTo, maxDeep));\n         }", "fixed": "         if (id != null) {\n             builder.getAdviceWithTasks().add(AdviceWithTasks.afterById(route, id, answer, selectFirst, selectLast, selectFrom, selectTo, maxDeep));\n         } else if (toString != null) {\n            builder.getAdviceWithTasks().add(AdviceWithTasks.afterByToString(route, toString, answer, selectFirst, selectLast, selectFrom, selectTo, maxDeep));\n         } else if (type != null) {\n             builder.getAdviceWithTasks().add(AdviceWithTasks.afterByType(route, type, answer, selectFirst, selectLast, selectFrom, selectTo, maxDeep));\n         }", "sourceBeforeFix": "AdviceWithTasks.removeByToString(route,toString,selectLast,selectFirst,selectFrom,selectTo,maxDeep)", "sourceAfterFix": "AdviceWithTasks.removeByToString(route,toString,selectFirst,selectLast,selectFrom,selectTo,maxDeep)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public List<Trends> getWeeklyTrends(Date date, boolean excludeHashTags) throws TwitterException {\n        return Trends.constructTrendsList(get(getSearchBaseURL()\n                 + \"trends/weekly.json?date=\" + toDateStr(date)\n                 + (excludeHashTags ? \"&exclude=hashtags\" : \"\"), false));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public List<Trends> getWeeklyTrends(Date date, boolean excludeHashTags) throws TwitterException {\n        return Trends.createTrendsList(get(getSearchBaseURL()\n                 + \"trends/weekly.json?date=\" + toDateStr(date)\n                 + (excludeHashTags ? \"&exclude=hashtags\" : \"\"), false));\n     }", "sourceBeforeFix": "DirectMessage.constructDirectMessages(get(getBaseURL() + \"direct_messages.json\",true))", "sourceAfterFix": "DirectMessage.createDirectMessageList(get(getBaseURL() + \"direct_messages.json\",true))"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface ServerEndpointBuilder\n             extends\n                 ServerEndpointConsumerBuilder, ServerEndpointProducerBuilder {\n         default AdvancedServerEndpointBuilder advanced() {", "fixed": "     \n    public interface ServerEndpointBuilder\n             extends\n                 ServerEndpointConsumerBuilder, ServerEndpointProducerBuilder {\n         default AdvancedServerEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface JcrEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedJcrEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface JcrEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedJcrEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "9771ba62390a56363b20e52f12a8b9b34c51da62", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "     public void testSamplingUsingmessageFrequency() throws Exception {\n         long totalMessages = 100;\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedMessageCount(10);\n         mock.setResultWaitTime(100);\n         for (int i = 0; i < totalMessages; i++) {", "fixed": "     public void testSamplingUsingmessageFrequency() throws Exception {\n         long totalMessages = 100;\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedMinimumMessageCount(10);\n         mock.setResultWaitTime(100);\n         for (int i = 0; i < totalMessages; i++) {", "sourceBeforeFix": "mock.expectedMessageCount(10)", "sourceAfterFix": "mock.expectedMinimumMessageCount(10)"}
{"fixCommitSHA1": "c7203473b49f29927a4f5e9438b5e38ab21e3428", "projectName": "naver.pinpoint", "bugType": "Change Identifier Used", "problem": "     @Override\n     public Map<AgentInfo, PinpointRouteResponse> invoke(List<AgentInfo> agentInfoList, byte[] payload)\n             throws TException {\n        return invoke(agentInfoList, payload, DEFUALT_FUTURE_TIMEOUT);\n     }\n     @Override", "fixed": "     @Override\n     public Map<AgentInfo, PinpointRouteResponse> invoke(List<AgentInfo> agentInfoList, byte[] payload)\n             throws TException {\n        return invoke(agentInfoList, payload, DEFAULT_FUTURE_TIMEOUT);\n     }\n     @Override", "sourceBeforeFix": "invoke(agentInfo,payload,DEFUALT_FUTURE_TIMEOUT)", "sourceAfterFix": "invoke(agentInfo,payload,DEFAULT_FUTURE_TIMEOUT)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "5a58a4ac4be0bee7c3ab573f6bf325f68cb3df85", "projectName": "openmrs.openmrs-core", "bugType": "Change Modifier", "problem": " \t */\r\n \t@Override\r\n \t@Transactional(readOnly = true)\r\n\tpublic Set<Class<? extends CustomDatatype<?>>> getAllDatatypeClasses() {\r\n \t\tif (datatypeClasses == null) {\r\n \t\t\tpopulateBeanListsFromContext();\r\n \t\t}\r", "fixed": " \t */\r\n \t@Override\r\n \t@Transactional(readOnly = true)\r\n\tpublic synchronized Set<Class<? extends CustomDatatype<?>>> getAllDatatypeClasses() {\r\n \t\tif (datatypeClasses == null) {\r\n \t\t\tpopulateBeanListsFromContext();\r\n \t\t}\r", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": " };\n   \n  private final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler", "fixed": " };\n   \n  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "55ed50c4975cf694828d46ee9ca32ce72a9ef913", "projectName": "clojure.clojure", "bugType": "Change Identifier Used", "problem": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 17:\r\n\t\t\treturn invoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "fixed": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 17:\r\n\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "sourceBeforeFix": "invoke(args.first(),(args=args.rest()).first(),args.rest())", "sourceAfterFix": "doInvoke(args.first(),(args=args.rest()).first(),args.rest())"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     }, tags={ \"pet\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid pet value\", response = Void.class) })\n    void deletePet(@PathParam(\"petId\") @ApiParam(\"Pet id to delete\") Long petId,@HeaderParam(\"api_key\")   String apiKey);\n     @GET\n     @Path(\"/findByStatus\")", "fixed": "     }, tags={ \"pet\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid pet value\", response = Void.class) })\n    void deletePet(@PathParam(\"petId\") @ApiParam(\"Pet id to delete\") Long petId,@HeaderParam(\"api_key\")   String apiKey) throws Exception;\n     @GET\n     @Path(\"/findByStatus\")", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15850, value = \"No handler for operation %s at address %s\")\n     String noHandlerForOperation(String operationName, PathAddress address);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10850, value = \"No handler for operation %s at address %s\")\n     String noHandlerForOperation(String operationName, PathAddress address);\n     /**", "sourceBeforeFix": "id=15862", "sourceAfterFix": "id=10862"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedJiraEndpointBuilder\n             extends\n                 AdvancedJiraEndpointConsumerBuilder, AdvancedJiraEndpointProducerBuilder {\n         default JiraEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedJiraEndpointBuilder\n             extends\n                 AdvancedJiraEndpointConsumerBuilder, AdvancedJiraEndpointProducerBuilder {\n         default JiraEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "2b27f6006b63686c9e8f1ff03b411ab2a6d1c791", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "         template.sendBodyAndHeader(serverUri, \"Hello World\", HttpProducer.QUERY, \"one=uno&two=dos\");\n        assertMockEndpointsSatisifed();\n     }\n     protected RouteBuilder createRouteBuilder() throws Exception {", "fixed": "         template.sendBodyAndHeader(serverUri, \"Hello World\", HttpProducer.QUERY, \"one=uno&two=dos\");\n        assertMockEndpointsSatisfied();\n     }\n     protected RouteBuilder createRouteBuilder() throws Exception {", "sourceBeforeFix": "assertMockEndpointsSatisifed()", "sourceAfterFix": "assertMockEndpointsSatisfied()"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites() throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"favorites.json\", new PostParameter[0], true));\n     }\n     /**", "fixed": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites() throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"favorites.json\", new PostParameter[0], true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15870, value = \"Unknown server group %s\")\n     IllegalStateException unknownServerGroup(String serverGroup);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10870, value = \"Unknown server group %s\")\n     IllegalStateException unknownServerGroup(String serverGroup);\n     /**", "sourceBeforeFix": "id=15863", "sourceAfterFix": "id=10863"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface CouchbaseEndpointBuilder\n             extends\n                 CouchbaseEndpointConsumerBuilder, CouchbaseEndpointProducerBuilder {\n         default AdvancedCouchbaseEndpointBuilder advanced() {", "fixed": "     \n    public interface CouchbaseEndpointBuilder\n             extends\n                 CouchbaseEndpointConsumerBuilder, CouchbaseEndpointProducerBuilder {\n         default AdvancedCouchbaseEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "270185aba54cef1d8ce59ec347b5623f2e502afe", "projectName": "clojure.clojure", "bugType": "Change Identifier Used", "problem": " \telse\n \t\t{\n \t\tISeq s = RT.seq(sizeOrSeq);\n\t\tint size = s.count();\n \t\tlong[] ret = new long[size];\n \t\tfor(int i = 0; i < size && s != null; i++, s = s.next())\n \t\t\tret[i] = ((Number) s.first()).longValue();", "fixed": " \telse\n \t\t{\n \t\tISeq s = RT.seq(sizeOrSeq);\n\t\tint size = RT.count(s);\n \t\tlong[] ret = new long[size];\n \t\tfor(int i = 0; i < size && s != null; i++, s = s.next())\n \t\t\tret[i] = ((Number) s.first()).longValue();", "sourceBeforeFix": "s.count()", "sourceAfterFix": "RT.count(s)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "fixed": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "sourceBeforeFix": "GL20.glUniform4(location,toIntBuffer(v,offset,count << 2))", "sourceAfterFix": "GL20.glUniform4iv(location,toIntBuffer(v,offset,count << 2))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  private final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15863, value = \"%s is not a valid URL -- %s\")\n     String invalidUrl(String url, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10863, value = \"%s is not a valid URL -- %s\")\n     String invalidUrl(String url, String message);\n     /**", "sourceBeforeFix": "id=15840", "sourceAfterFix": "id=10840"}
{"fixCommitSHA1": "0283c451f04f498fc7c7f359ef020d6da46d2a0f", "projectName": "naver.pinpoint", "bugType": "Wrong Function Name", "problem": "     public JvmGcDetailedBo map(TJvmGcDetailed tJvmGcDetailed) {\n         JvmGcDetailedBo jvmGcDetailedBo = new JvmGcDetailedBo();\n         jvmGcDetailedBo.setGcNewCount(tJvmGcDetailed.getJvmGcNewCount());\n        jvmGcDetailedBo.setGcNewTime(tJvmGcDetailed.getJvmGcNewCount());\n         jvmGcDetailedBo.setCodeCacheUsed(tJvmGcDetailed.getJvmPoolCodeCacheUsed());\n         jvmGcDetailedBo.setNewGenUsed(tJvmGcDetailed.getJvmPoolNewGenUsed());\n         jvmGcDetailedBo.setOldGenUsed(tJvmGcDetailed.getJvmPoolOldGenUsed());", "fixed": "     public JvmGcDetailedBo map(TJvmGcDetailed tJvmGcDetailed) {\n         JvmGcDetailedBo jvmGcDetailedBo = new JvmGcDetailedBo();\n         jvmGcDetailedBo.setGcNewCount(tJvmGcDetailed.getJvmGcNewCount());\n        jvmGcDetailedBo.setGcNewTime(tJvmGcDetailed.getJvmGcNewTime());\n         jvmGcDetailedBo.setCodeCacheUsed(tJvmGcDetailed.getJvmPoolCodeCacheUsed());\n         jvmGcDetailedBo.setNewGenUsed(tJvmGcDetailed.getJvmPoolNewGenUsed());\n         jvmGcDetailedBo.setOldGenUsed(tJvmGcDetailed.getJvmPoolOldGenUsed());", "sourceBeforeFix": "tJvmGcDetailed.getJvmGcNewCount()", "sourceAfterFix": "tJvmGcDetailed.getJvmGcNewTime()"}
{"fixCommitSHA1": "0fd824c3bb2382df4ab9495810bab20150db3960", "projectName": "netty.netty", "bugType": "More Specific If", "problem": "             notifyHandlerException(t);\n         } finally {\n             ChannelBufferHolder<Object> inbound = ctx.inbound();\n            if (inbound.isEmpty() && inbound.hasByteBuffer()) {\n                 inbound.byteBuffer().discardReadBytes();\n             }\n         }", "fixed": "             notifyHandlerException(t);\n         } finally {\n             ChannelBufferHolder<Object> inbound = ctx.inbound();\n            if (!inbound.isBypass() && inbound.isEmpty() && inbound.hasByteBuffer()) {\n                 inbound.byteBuffer().discardReadBytes();\n             }\n         }", "sourceBeforeFix": "inbound.isEmpty() && inbound.hasByteBuffer()", "sourceAfterFix": "!inbound.isBypass() && inbound.isEmpty() && inbound.hasByteBuffer()"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<Status> getUserTimeline(String id, Paging paging)\n             throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline/\" + id + \".json\",\n                 null, paging.asPostParameterList(), http.isAuthenticationEnabled()));\n     }", "fixed": "      */\n     public ResponseList<Status> getUserTimeline(String id, Paging paging)\n             throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline/\" + id + \".json\",\n                 null, paging.asPostParameterList(), http.isAuthenticationEnabled()));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",null,true))"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<Status> getUserTimeline(String id, Paging paging)\n             throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline/\" + id + \".json\",\n                 null, paging.asPostParameterList(), http.isAuthenticationEnabled()));\n     }", "fixed": "      */\n     public ResponseList<Status> getUserTimeline(String id, Paging paging)\n             throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline/\" + id + \".json\",\n                 null, paging.asPostParameterList(), http.isAuthenticationEnabled()));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweets_of_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweets_of_me.json\",null,true))"}
{"fixCommitSHA1": "0b302cf93edee0e2ab3c9998f380ede8e8ea7727", "projectName": "Atmosphere.atmosphere", "bugType": "Change Identifier Used", "problem": "      * {@inheritDoc}\n      */\n     @Override\n    public AtmosphereResource addAtmosphereResource(AtmosphereResource r) {\n         try {\n             if (destroyed.get()) {\n                 logger.debug(DESTROYED, getID(), \"addAtmosphereResource(AtmosphereResource<?, ?> r\");\n                return r;\n             }\n             start();", "fixed": "      * {@inheritDoc}\n      */\n     @Override\n    public Broadcaster addAtmosphereResource(AtmosphereResource r) {\n         try {\n             if (destroyed.get()) {\n                 logger.debug(DESTROYED, getID(), \"addAtmosphereResource(AtmosphereResource<?, ?> r\");\n                return this;\n             }\n             start();", "sourceBeforeFix": "return r; ", "sourceAfterFix": "return this; "}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface DirectEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedDirectEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface DirectEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedDirectEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedKinesisEndpointBuilder\n             extends\n                 AdvancedKinesisEndpointConsumerBuilder, AdvancedKinesisEndpointProducerBuilder {\n         default KinesisEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedKinesisEndpointBuilder\n             extends\n                 AdvancedKinesisEndpointConsumerBuilder, AdvancedKinesisEndpointProducerBuilder {\n         default KinesisEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  private final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "be32765c0ef5c0c0b48f8c649e971595a439013a", "projectName": "gephi.gephi", "bugType": "Change Identifier Used", "problem": "         if (sizeModeClass.equals(\"FixedSizeMode\")) {\n             sizeMode = VizController.getInstance().getTextManager().getSizeModes()[0];\n        } else if (colorModeClass.equals(\"ProportionalSizeMode\")) {\n             sizeMode = VizController.getInstance().getTextManager().getSizeModes()[2];\n        } else if (colorModeClass.equals(\"ScaledSizeMode\")) {\n             sizeMode = VizController.getInstance().getTextManager().getSizeModes()[1];\n         }", "fixed": "         if (sizeModeClass.equals(\"FixedSizeMode\")) {\n             sizeMode = VizController.getInstance().getTextManager().getSizeModes()[0];\n        } else if (sizeModeClass.equals(\"ProportionalSizeMode\")) {\n             sizeMode = VizController.getInstance().getTextManager().getSizeModes()[2];\n        } else if (sizeModeClass.equals(\"ScaledSizeMode\")) {\n             sizeMode = VizController.getInstance().getTextManager().getSizeModes()[1];\n         }", "sourceBeforeFix": "colorModeClass.equals(\"ScaledSizeMode\")", "sourceAfterFix": "sizeModeClass.equals(\"ScaledSizeMode\")"}
{"fixCommitSHA1": "5324bb65a6b5d94652f950f2b03fd6345fb6f66d", "projectName": "openhab.openhab", "bugType": "Change Identifier Used", "problem": " \t\t\t\t} catch (IOException e) {\n \t\t\t\t\tlogger.error(\"Could not open url '{}' for sending it via XMPP\", attachmentUrl, e);\n \t\t\t\t} finally {\n\t\t\t\t\tIOUtils.closeQuitely(is);\n \t\t\t\t}\n \t\t\t}\n \t\t} catch (NotInitializedException e) {", "fixed": " \t\t\t\t} catch (IOException e) {\n \t\t\t\t\tlogger.error(\"Could not open url '{}' for sending it via XMPP\", attachmentUrl, e);\n \t\t\t\t} finally {\n\t\t\t\t\tIOUtils.closeQuietly(is);\n \t\t\t\t}\n \t\t\t}\n \t\t} catch (NotInitializedException e) {", "sourceBeforeFix": "IOUtils.closeQuitely(is)", "sourceAfterFix": "IOUtils.closeQuietly(is)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "cb8447af2886a43d50cf72a3f6051343c5db645a", "projectName": "eclipse.vert.x", "bugType": "Same Function More Args", "problem": "     long now = System.currentTimeMillis();\n     StringBuilder acc = new StringBuilder(get());\n     while (!predicate.test(acc.toString())) {\n      Assert.assertTrue(System.currentTimeMillis() - now < 5000);\n       try {\n         Thread.sleep(1);\n       } catch (InterruptedException e) {", "fixed": "     long now = System.currentTimeMillis();\n     StringBuilder acc = new StringBuilder(get());\n     while (!predicate.test(acc.toString())) {\n      Assert.assertTrue(\"Was not expecting this output \" + acc, System.currentTimeMillis() - now < 5000);\n       try {\n         Thread.sleep(1);\n       } catch (InterruptedException e) {", "sourceBeforeFix": "Assert.assertTrue(System.currentTimeMillis() - now < 5000)", "sourceAfterFix": "Assert.assertTrue(\"Was not expecting this output \" + acc,System.currentTimeMillis() - now < 5000)"}
{"fixCommitSHA1": "28ba4cee88e6eb983244cb85dcd91e5f150f7e32", "projectName": "Atmosphere.atmosphere", "bugType": "More Specific If", "problem": "         String s = (String) req.getAttribute(SUSPENDED_ATMOSPHERE_RESOURCE_UUID);\n         if (s == null) {\n             s = response.getHeader(HeaderConfig.X_ATMOSPHERE_TRACKING_ID);\n            if (s == null) {\n                 String tmp = req.getHeader(HeaderConfig.X_ATMOSPHERE_TRACKING_ID);\n                s = !tmp.equalsIgnoreCase(\"0\") ? tmp : null;\n             }\n         }\n         uuid = s == null ? UUID.randomUUID().toString() : s;", "fixed": "         String s = (String) req.getAttribute(SUSPENDED_ATMOSPHERE_RESOURCE_UUID);\n         if (s == null) {\n             s = response.getHeader(HeaderConfig.X_ATMOSPHERE_TRACKING_ID);\n            if (s == null && req != null) {\n                 String tmp = req.getHeader(HeaderConfig.X_ATMOSPHERE_TRACKING_ID);\n                s = tmp != null && !tmp.equalsIgnoreCase(\"0\") ? tmp : null;\n             }\n         }\n         uuid = s == null ? UUID.randomUUID().toString() : s;", "sourceBeforeFix": "s == null", "sourceAfterFix": "s == null && req != null"}
{"fixCommitSHA1": "cf879b3c6018dac6e6788ac9e341cbc7f85864a5", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         repo.setDeadLetterUri(\"direct:dead\");\n        repo.setRecoveryInterval(500, TimeUnit.MILLISECONDS);\n         super.setUp();\n     }", "fixed": "         repo.setDeadLetterUri(\"direct:dead\");\n        repo.setRecoveryInterval(1000, TimeUnit.MILLISECONDS);\n         super.setUp();\n     }", "sourceBeforeFix": "repo.setRecoveryInterval(500,TimeUnit.MILLISECONDS)", "sourceAfterFix": "repo.setRecoveryInterval(1000,TimeUnit.MILLISECONDS)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedFileEndpointBuilder\n             extends\n                 AdvancedFileEndpointConsumerBuilder, AdvancedFileEndpointProducerBuilder {\n         default FileEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedFileEndpointBuilder\n             extends\n                 AdvancedFileEndpointConsumerBuilder, AdvancedFileEndpointProducerBuilder {\n         default FileEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "efdc1c8c89efe76a650fbaa9fd870126cb391feb", "projectName": "Graylog2.graylog2-server", "bugType": "Change Binary Operator", "problem": "     }\n     private void checkClusterVersion(Version clusterVersion) {\n        if (!clusterVersion.onOrAfter(MINIMUM_ES_VERSION) && !clusterVersion.onOrBefore(MAXIMUM_ES_VERSION)) {\n             LOG.error(\"Elasticsearch node is of the wrong version {}, it must be between {} and {}! \"\n                             + \"Please make sure you are running the correct version of Elasticsearch.\",\n                     clusterVersion, MINIMUM_ES_VERSION, MAXIMUM_ES_VERSION);", "fixed": "     }\n     private void checkClusterVersion(Version clusterVersion) {\n        if (!clusterVersion.onOrAfter(MINIMUM_ES_VERSION) || !clusterVersion.onOrBefore(MAXIMUM_ES_VERSION)) {\n             LOG.error(\"Elasticsearch node is of the wrong version {}, it must be between {} and {}! \"\n                             + \"Please make sure you are running the correct version of Elasticsearch.\",\n                     clusterVersion, MINIMUM_ES_VERSION, MAXIMUM_ES_VERSION);", "sourceBeforeFix": "!clusterVersion.onOrAfter(MINIMUM_ES_VERSION) && !clusterVersion.onOrBefore(MAXIMUM_ES_VERSION)", "sourceAfterFix": "!clusterVersion.onOrAfter(MINIMUM_ES_VERSION) || !clusterVersion.onOrBefore(MAXIMUM_ES_VERSION)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15850, value = \"No handler for operation %s at address %s\")\n     String noHandlerForOperation(String operationName, PathAddress address);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10850, value = \"No handler for operation %s at address %s\")\n     String noHandlerForOperation(String operationName, PathAddress address);\n     /**", "sourceBeforeFix": "id=15868", "sourceAfterFix": "id=10868"}
{"fixCommitSHA1": "c5e7dea98700e040d6dd872015b8dac472b9aa2d", "projectName": "checkstyle.checkstyle", "bugType": "Wrong Function Name", "problem": "     public void testGetRequiredTokens() {\n         ThrowsCountCheck obj = new ThrowsCountCheck();\n         int[] expected = {TokenTypes.LITERAL_THROWS};\n        assertArrayEquals(expected, obj.getAcceptableTokens());\n     }\n }", "fixed": "     public void testGetRequiredTokens() {\n         ThrowsCountCheck obj = new ThrowsCountCheck();\n         int[] expected = {TokenTypes.LITERAL_THROWS};\n        assertArrayEquals(expected, obj.getRequiredTokens());\n     }\n }", "sourceBeforeFix": "obj.getAcceptableTokens()", "sourceAfterFix": "obj.getRequiredTokens()"}
{"fixCommitSHA1": "26604fde31e9f4586c18209285b7b5c3bc80d51e", "projectName": "facebook.presto", "bugType": "Change Modifier", "problem": "         }\n     }\n    public Set<PlanNodeId> getNoMoreSplits()\n     {\n         ImmutableSet.Builder<PlanNodeId> noMoreSplits = ImmutableSet.builder();\n         for (Entry<PlanNodeId, DriverSplitRunnerFactory> entry : partitionedDriverFactories.entrySet()) {", "fixed": "         }\n     }\n    public synchronized Set<PlanNodeId> getNoMoreSplits()\n     {\n         ImmutableSet.Builder<PlanNodeId> noMoreSplits = ImmutableSet.builder();\n         for (Entry<PlanNodeId, DriverSplitRunnerFactory> entry : partitionedDriverFactories.entrySet()) {", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      * @param hostName   the name of the host.\n      */\n     @LogMessage(level = Level.WARN)\n    @Message(id = 15803, value = \"Caught exception awaiting final response from server %s on host %s\")\n     void caughtExceptionAwaitingFinalResponse(@Cause Throwable cause, String serverName, String hostName);\n     /**", "fixed": "      * @param hostName   the name of the host.\n      */\n     @LogMessage(level = Level.WARN)\n    @Message(id = 10803, value = \"Caught exception awaiting final response from server %s on host %s\")\n     void caughtExceptionAwaitingFinalResponse(@Cause Throwable cause, String serverName, String hostName);\n     /**", "sourceBeforeFix": "id=15802", "sourceAfterFix": "id=10802"}
{"fixCommitSHA1": "486b290863a66641b0ec30dbf2d9e349733cae44", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "    */\n   public void closeRegion(final String regionname, final String serverName)\n   throws IOException {\n    closeRegion(Bytes.toBytesBinary(regionname), serverName);\n   }\n   /**", "fixed": "    */\n   public void closeRegion(final String regionname, final String serverName)\n   throws IOException {\n    closeRegion(Bytes.toBytes(regionname), serverName);\n   }\n   /**", "sourceBeforeFix": "Bytes.toBytesBinary(tableOrRegionName)", "sourceAfterFix": "Bytes.toBytes(tableOrRegionName)"}
{"fixCommitSHA1": "d825792ac494dd0257e0c2ec7acd60100ecfe700", "projectName": "libgdx.libgdx", "bugType": "Change Binary Operator", "problem": " \t\t\tif (fValue > 1) fValue = 1;\r\n \t\t\tif (fValue < -1) fValue = -1;\r\n \t\t\tshort value = (short)(fValue * Short.MAX_VALUE);\r\n\t\t\tbytes[j] = (byte)(value | 0xff);\r\n \t\t\tbytes[j + 1] = (byte)(value >> 8);\r\n \t\t}\r", "fixed": " \t\t\tif (fValue > 1) fValue = 1;\r\n \t\t\tif (fValue < -1) fValue = -1;\r\n \t\t\tshort value = (short)(fValue * Short.MAX_VALUE);\r\n\t\t\tbytes[j] = (byte)(value & 0xff);\r\n \t\t\tbytes[j + 1] = (byte)(value >> 8);\r\n \t\t}\r", "sourceBeforeFix": "value | 0xff", "sourceAfterFix": "value & 0xff"}
{"fixCommitSHA1": "e04cbbf23e9273cca31b1cc12142e34fae753542", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "          *  Does class have non-private ctors.\n          *  @return true if class has non-private ctors\n          */\n        boolean isWithNonPrivateCtor() {\n             return withNonPrivateCtor;\n         }", "fixed": "          *  Does class have non-private ctors.\n          *  @return true if class has non-private ctors\n          */\n        private boolean isWithNonPrivateCtor() {\n             return withNonPrivateCtor;\n         }", "sourceBeforeFix": "0", "sourceAfterFix": "2"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface GitEndpointBuilder\n             extends\n                 GitEndpointConsumerBuilder, GitEndpointProducerBuilder {\n         default AdvancedGitEndpointBuilder advanced() {", "fixed": "     \n    public interface GitEndpointBuilder\n             extends\n                 GitEndpointConsumerBuilder, GitEndpointProducerBuilder {\n         default AdvancedGitEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "3ff50741ae92e513825b787591ba82e4ee00026e", "projectName": "yusuke.twitter4j", "bugType": "Change Caller in Function Call", "problem": "                     jsonArray = new JSONArray(responseAsString);\n                 }\n                 if (CONF.isPrettyDebugEnabled()) {\n                    logger.debug(json.toString(1));\n                 }\n             } catch (JSONException jsone) {\n                 if (logger.isDebugEnabled()) {", "fixed": "                     jsonArray = new JSONArray(responseAsString);\n                 }\n                 if (CONF.isPrettyDebugEnabled()) {\n                    logger.debug(jsonArray.toString(1));\n                 }\n             } catch (JSONException jsone) {\n                 if (logger.isDebugEnabled()) {", "sourceBeforeFix": "json.toString(1)", "sourceAfterFix": "jsonArray.toString(1)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedCaffeineLoadCacheEndpointBuilder\n             extends\n                 AdvancedCaffeineLoadCacheEndpointConsumerBuilder, AdvancedCaffeineLoadCacheEndpointProducerBuilder {\n         default CaffeineLoadCacheEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedCaffeineLoadCacheEndpointBuilder\n             extends\n                 AdvancedCaffeineLoadCacheEndpointConsumerBuilder, AdvancedCaffeineLoadCacheEndpointProducerBuilder {\n         default CaffeineLoadCacheEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     return additionalReplacements;\n   }\n  private final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     return additionalReplacements;\n   }\n  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "9716d2ae673a576cb345c3bfb24cf71654d8f112", "projectName": "openhab.openhab", "bugType": "Change Identifier Used", "problem": " \t\tif (pollFuture != null && !pollFuture.isCancelled())\n \t\t\tpollFuture.cancel(false);\n\t\tlogger.debug(\"rapidRefreshFuture scheduleing for {} millis\", millis);\n \t\tpollFuture = pollService.scheduleAtFixedRate(new Runnable() {\n \t\t\t@Override", "fixed": " \t\tif (pollFuture != null && !pollFuture.isCancelled())\n \t\t\tpollFuture.cancel(false);\n\t\tlogger.trace(\"rapidRefreshFuture scheduleing for {} millis\", millis);\n \t\tpollFuture = pollService.scheduleAtFixedRate(new Runnable() {\n \t\t\t@Override", "sourceBeforeFix": "logger.debug(\"Invalid Account Credentials\")", "sourceAfterFix": "logger.trace(\"Invalid Account Credentials\")"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15856, value = \"Invalid url stream.\")\n     String invalidUrlStream();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10856, value = \"Invalid url stream.\")\n     String invalidUrlStream();\n     /**", "sourceBeforeFix": "id=15837", "sourceAfterFix": "id=10837"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface InfinispanEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedInfinispanEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface InfinispanEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedInfinispanEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface BraintreeEndpointBuilder\n             extends\n                 BraintreeEndpointConsumerBuilder, BraintreeEndpointProducerBuilder {\n         default AdvancedBraintreeEndpointBuilder advanced() {", "fixed": "     \n    public interface BraintreeEndpointBuilder\n             extends\n                 BraintreeEndpointConsumerBuilder, BraintreeEndpointProducerBuilder {\n         default AdvancedBraintreeEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "038ea1803bae1cf3be279b36395b4de4e0ff39b5", "projectName": "openhab.openhab", "bugType": "Wrong Function Name", "problem": " \t\tif (pollFuture != null && !pollFuture.isCancelled())\n \t\t\tpollFuture.cancel(false);\n\t\tlogger.debug(\"rapidRefreshFuture scheduleing for {} millis\", millis);\n \t\tpollFuture = pollService.scheduleAtFixedRate(new Runnable() {\n \t\t\t@Override", "fixed": " \t\tif (pollFuture != null && !pollFuture.isCancelled())\n \t\t\tpollFuture.cancel(false);\n\t\tlogger.trace(\"rapidRefreshFuture scheduleing for {} millis\", millis);\n \t\tpollFuture = pollService.scheduleAtFixedRate(new Runnable() {\n \t\t\t@Override", "sourceBeforeFix": "logger.debug(\"rapidRefreshFuture scheduleing for {} millis\",millis)", "sourceAfterFix": "logger.trace(\"rapidRefreshFuture scheduleing for {} millis\",millis)"}
{"fixCommitSHA1": "099bf2014a8cd43c270c5900ce9d34689287d0ef", "projectName": "Alluxio.alluxio", "bugType": "Change Numeric Literal", "problem": "     String expected = \"\";\n     expected += getLsNoAclResultStr(\"/testRoot/testFileA\", files[0].getCreationTimeMs(), 10,\n         LsCommand.STATE_FILE_IN_MEMORY);\n    expected += getLsNoAclResultStr(\"/testRoot/testDir\", files[1].getCreationTimeMs(), 0,\n         LsCommand.STATE_FOLDER);\n     expected += getLsNoAclResultStr(\"/testRoot/testFileC\", files[3].getCreationTimeMs(), 30,\n         LsCommand.STATE_FILE_NOT_IN_MEMORY);", "fixed": "     String expected = \"\";\n     expected += getLsNoAclResultStr(\"/testRoot/testFileA\", files[0].getCreationTimeMs(), 10,\n         LsCommand.STATE_FILE_IN_MEMORY);\n    expected += getLsNoAclResultStr(\"/testRoot/testDir\", files[1].getCreationTimeMs(), 1,\n         LsCommand.STATE_FOLDER);\n     expected += getLsNoAclResultStr(\"/testRoot/testFileC\", files[3].getCreationTimeMs(), 30,\n         LsCommand.STATE_FILE_NOT_IN_MEMORY);", "sourceBeforeFix": "getLsNoAclResultStr(\"/testRoot/testDir\",files[1].getCreationTimeMs(),0,LsCommand.STATE_FOLDER)", "sourceAfterFix": "getLsNoAclResultStr(\"/testRoot/testDir\",files[1].getCreationTimeMs(),1,LsCommand.STATE_FOLDER)"}
{"fixCommitSHA1": "5e7873ebd45790d9d72eb9d312de4611dc97f796", "projectName": "Activiti.Activiti", "bugType": "Change Numeric Literal", "problem": "     assertEquals(0, historyService.createHistoricActivityInstanceQuery().unfinished().list().size());\n     if (processEngineConfiguration.getHistoryLevel()==ProcessEngineConfigurationImpl.HISTORYLEVEL_FULL) {\n      assertEquals(2, historyService.createHistoricActivityInstanceQuery().finished().list().size());\n     } else if (processEngineConfiguration.getHistoryLevel()>=ProcessEngineConfigurationImpl.HISTORYLEVEL_ACTIVITY) {\n      assertEquals(1, historyService.createHistoricActivityInstanceQuery().finished().list().size());\n     } else {\n       assertEquals(0, historyService.createHistoricActivityInstanceQuery().finished().list().size());\n     }", "fixed": "     assertEquals(0, historyService.createHistoricActivityInstanceQuery().unfinished().list().size());\n     if (processEngineConfiguration.getHistoryLevel()==ProcessEngineConfigurationImpl.HISTORYLEVEL_FULL) {\n      assertEquals(3, historyService.createHistoricActivityInstanceQuery().finished().list().size());\n     } else if (processEngineConfiguration.getHistoryLevel()>=ProcessEngineConfigurationImpl.HISTORYLEVEL_ACTIVITY) {\n      assertEquals(3, historyService.createHistoricActivityInstanceQuery().finished().list().size());\n     } else {\n       assertEquals(0, historyService.createHistoricActivityInstanceQuery().finished().list().size());\n     }", "sourceBeforeFix": "assertEquals(2,historyService.createHistoricActivityInstanceQuery().finished().list().size())", "sourceAfterFix": "assertEquals(3,historyService.createHistoricActivityInstanceQuery().finished().list().size())"}
{"fixCommitSHA1": "ceb0d5e68bc6cbf8015be6d5dd785991fbc81455", "projectName": "apache.hbase", "bugType": "Same Function More Args", "problem": "     Thread.yield();\n    response = client.get(path);\n     assertEquals(response.getCode(), 404);", "fixed": "     Thread.yield();\n    response = client.get(path, MIMETYPE_XML);\n     assertEquals(response.getCode(), 404);", "sourceBeforeFix": "client.get(path)", "sourceAfterFix": "client.get(path,MIMETYPE_PROTOBUF)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  private final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "daba0256b7cf360824aebb3ff176d5937c862e46", "projectName": "openmrs.openmrs-core", "bugType": "Change Numeric Literal", "problem": " \t\texecuteDataSet(ADMIN_INITIAL_DATA_XML);\n \t\tAdministrationService as = Context.getAdministrationService();\n\t\tAssert.assertEquals(20, as.getAllGlobalProperties().size());\n \t\tas.purgeGlobalProperty(as.getGlobalPropertyObject(\"a_valid_gp_key\"));\n\t\tAssert.assertEquals(19, as.getAllGlobalProperties().size());\n \t}\n \t/**", "fixed": " \t\texecuteDataSet(ADMIN_INITIAL_DATA_XML);\n \t\tAdministrationService as = Context.getAdministrationService();\n\t\tAssert.assertEquals(21, as.getAllGlobalProperties().size());\n \t\tas.purgeGlobalProperty(as.getGlobalPropertyObject(\"a_valid_gp_key\"));\n\t\tAssert.assertEquals(20, as.getAllGlobalProperties().size());\n \t}\n \t/**", "sourceBeforeFix": "Assert.assertEquals(20,as.getAllGlobalProperties().size())", "sourceAfterFix": "Assert.assertEquals(21,as.getAllGlobalProperties().size())"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n \t * @param toCompare The element to set as the comparison reference.\n \t */\n\tpublic void setReference(T toCompare);\n \t/**\n \t * Checks, whether the given element is equal to the element that has been set as the comparison", "fixed": " \t * \n \t * @param toCompare The element to set as the comparison reference.\n \t */\n\tpublic abstract void setReference(T toCompare);\n \t/**\n \t * Checks, whether the given element is equal to the element that has been set as the comparison", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "7e6659ce3641a8747059ad871780490a79d1b020", "projectName": "google.guice", "bugType": "Change Identifier Used", "problem": "         return (T) fastConstructor.newInstance(arguments);\n       }\n       public List<Parameter<?>> getParameters() {\n        return Parameter.forConstructor(errorHandler, fastConstructor);\n       }\n       public Member getMember() {\n        return fastConstructor.getJavaConstructor();\n       }\n     };\n   }", "fixed": "         return (T) fastConstructor.newInstance(arguments);\n       }\n       public List<Parameter<?>> getParameters() {\n        return Parameter.forConstructor(errorHandler, constructor);\n       }\n       public Member getMember() {\n        return constructor;\n       }\n     };\n   }", "sourceBeforeFix": "Parameter.forConstructor(errorHandler,fastConstructor)", "sourceAfterFix": "Parameter.forConstructor(errorHandler,constructor)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15836, value = SERVER_GROUP + \" expects one and only one child: %s\")\n     String serverGroupExpectsSingleChild(String rolloutPlan);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10836, value = SERVER_GROUP + \" expects one and only one child: %s\")\n     String serverGroupExpectsSingleChild(String rolloutPlan);\n     /**", "sourceBeforeFix": "id=15870", "sourceAfterFix": "id=10870"}
{"fixCommitSHA1": "de2fe75563710a6907f6bbab9214b8047d79b99b", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    private static interface ChannelCallback<T> {\n         T doWithChannel(Channel channel) throws Exception;\n     }", "fixed": "     \n    private interface ChannelCallback<T> {\n         T doWithChannel(Channel channel) throws Exception;\n     }", "sourceBeforeFix": "10", "sourceAfterFix": "2"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getMentions(Paging paging) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getMentions(Paging paging) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline.json\",true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsText(String path, int batchSize) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), batchSize, null);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsText(String path, int batchSize) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), batchSize, null);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "546f336e25b26d072f96e2cda139b885858ed5b0", "projectName": "checkstyle.checkstyle", "bugType": "Wrong Function Name", "problem": "         }\n         else {\n            details.put(CONFIG_HASH_KEY, currentConfigHash);\n         }\n     }", "fixed": "         }\n         else {\n            details.setProperty(CONFIG_HASH_KEY, currentConfigHash);\n         }\n     }", "sourceBeforeFix": "details.put(CONFIG_HASH_KEY,currentConfigHash)", "sourceAfterFix": "details.setProperty(CONFIG_HASH_KEY,currentConfigHash)"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream.\n \t */\n\tpublic DataStream<OUT> print() {\n \t\tDataStream<OUT> inputStream = this.copy();\n \t\tPrintSinkFunction<OUT> printFunction = new PrintSinkFunction<OUT>();\n\t\tDataStream<OUT> returnStream = addSink(inputStream, printFunction, null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());", "fixed": " \t * \n \t * @return The closed DataStream.\n \t */\n\tpublic DataStreamSink<OUT> print() {\n \t\tDataStream<OUT> inputStream = this.copy();\n \t\tPrintSinkFunction<OUT> printFunction = new PrintSinkFunction<OUT>();\n\t\tDataStreamSink<OUT> returnStream = addSink(inputStream, printFunction, null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15867, value = \"Cannot use %s with the same value for parameters %s and %s. \" +\n             \"Use %s to redeploy the same content or %s to replace content with a new version with the same name.\")\n     String cannotUseSameValueForParameters(String opName, String param1, String param2, String redeployOpName, String replaceOpName);", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10867, value = \"Cannot use %s with the same value for parameters %s and %s. \" +\n             \"Use %s to redeploy the same content or %s to replace content with a new version with the same name.\")\n     String cannotUseSameValueForParameters(String opName, String param1, String param2, String redeployOpName, String replaceOpName);", "sourceBeforeFix": "id=15862", "sourceAfterFix": "id=10862"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsCsv(String path, long millis) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, null);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsCsv(String path, long millis) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, null);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedHazelcastMultimapEndpointBuilder\n             extends\n                 AdvancedHazelcastMultimapEndpointConsumerBuilder, AdvancedHazelcastMultimapEndpointProducerBuilder {\n         default HazelcastMultimapEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedHazelcastMultimapEndpointBuilder\n             extends\n                 AdvancedHazelcastMultimapEndpointConsumerBuilder, AdvancedHazelcastMultimapEndpointProducerBuilder {\n         default HazelcastMultimapEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface JmsEndpointBuilder\n             extends\n                 JmsEndpointConsumerBuilder, JmsEndpointProducerBuilder {\n         default AdvancedJmsEndpointBuilder advanced() {", "fixed": "     \n    public interface JmsEndpointBuilder\n             extends\n                 JmsEndpointConsumerBuilder, JmsEndpointProducerBuilder {\n         default AdvancedJmsEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "2462c82c0ea8766f40cf454c57557a5c63d2c09d", "projectName": "druid-io.druid", "bugType": "Change Numeric Literal", "problem": "   private static final PartitionsSpec DEFAULT_PARTITIONS_SPEC = HashedPartitionsSpec.makeDefaultHashedPartitionsSpec();\n   private static final Map<DateTime, List<HadoopyShardSpec>> DEFAULT_SHARD_SPECS = ImmutableMap.of();\n   private static final IndexSpec DEFAULT_INDEX_SPEC = new IndexSpec();\n  private static final int DEFAULT_ROW_FLUSH_BOUNDARY = 80000;\n   private static final boolean DEFAULT_USE_COMBINER = false;\n   private static final Boolean DEFAULT_BUILD_V9_DIRECTLY = Boolean.FALSE;\n   private static final int DEFAULT_NUM_BACKGROUND_PERSIST_THREADS = 0;", "fixed": "   private static final PartitionsSpec DEFAULT_PARTITIONS_SPEC = HashedPartitionsSpec.makeDefaultHashedPartitionsSpec();\n   private static final Map<DateTime, List<HadoopyShardSpec>> DEFAULT_SHARD_SPECS = ImmutableMap.of();\n   private static final IndexSpec DEFAULT_INDEX_SPEC = new IndexSpec();\n  private static final int DEFAULT_ROW_FLUSH_BOUNDARY = 75000;\n   private static final boolean DEFAULT_USE_COMBINER = false;\n   private static final Boolean DEFAULT_BUILD_V9_DIRECTLY = Boolean.FALSE;\n   private static final int DEFAULT_NUM_BACKGROUND_PERSIST_THREADS = 0;", "sourceBeforeFix": "DEFAULT_ROW_FLUSH_BOUNDARY=80000", "sourceAfterFix": "DEFAULT_ROW_FLUSH_BOUNDARY=75000"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "      * Builder for endpoint for the Kubernetes Persistent Volume Claim\n      * component.\n      */\n    public static interface KubernetesPersistentVolumesClaimsEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedKubernetesPersistentVolumesClaimsEndpointBuilder advanced() {", "fixed": "      * Builder for endpoint for the Kubernetes Persistent Volume Claim\n      * component.\n      */\n    public interface KubernetesPersistentVolumesClaimsEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedKubernetesPersistentVolumesClaimsEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "fixed": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "sourceBeforeFix": "GL20.glUniform3(location,v)", "sourceAfterFix": "GL20.glUniform3iv(location,v)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface GuavaEventBusEndpointBuilder\n             extends\n                 GuavaEventBusEndpointConsumerBuilder, GuavaEventBusEndpointProducerBuilder {\n         default AdvancedGuavaEventBusEndpointBuilder advanced() {", "fixed": "     \n    public interface GuavaEventBusEndpointBuilder\n             extends\n                 GuavaEventBusEndpointConsumerBuilder, GuavaEventBusEndpointProducerBuilder {\n         default AdvancedGuavaEventBusEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedSqlStoredEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default SqlStoredEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedSqlStoredEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default SqlStoredEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform3(location, v);\r\n \t}\r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform3(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r", "fixed": " \t}\r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform3iv(location, v);\r\n \t}\r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform3iv(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r", "sourceBeforeFix": "GL20.glGetVertexAttrib(index,pname,params)", "sourceAfterFix": "GL20.glGetVertexAttribiv(index,pname,params)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "fixed": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttribfv(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttribiv(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "sourceBeforeFix": "GL20.glUniformMatrix2(location,transpose,value)", "sourceAfterFix": "GL20.glUniformMatrix2fv(location,transpose,value)"}
{"fixCommitSHA1": "55ed50c4975cf694828d46ee9ca32ce72a9ef913", "projectName": "clojure.clojure", "bugType": "Change Identifier Used", "problem": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 12:\r\n\t\t\treturn invoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "fixed": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 12:\r\n\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "sourceBeforeFix": "invoke(args)", "sourceAfterFix": "doInvoke(args)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "26307cbc3e1ce776eb2f3ccd40ca216f7edcdbc6", "projectName": "netty.netty", "bugType": "More Specific If", "problem": "         if (getPath() == null && c.getPath() != null) {\n             return -1;\n        } else if (c.getPath() == null) {\n             return 1;\n         }\n         v = getPath().compareTo(c.getPath());", "fixed": "         if (getPath() == null && c.getPath() != null) {\n             return -1;\n        } else if (c.getPath() == null && getPath() != null) {\n             return 1;\n         }\n         v = getPath().compareTo(c.getPath());", "sourceBeforeFix": "that.getDomain() == null", "sourceAfterFix": "that.getDomain() == null && getDomain() != null"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface FtpsEndpointBuilder\n             extends\n                 FtpsEndpointConsumerBuilder, FtpsEndpointProducerBuilder {\n         default AdvancedFtpsEndpointBuilder advanced() {", "fixed": "     \n    public interface FtpsEndpointBuilder\n             extends\n                 FtpsEndpointConsumerBuilder, FtpsEndpointProducerBuilder {\n         default AdvancedFtpsEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "97d07253e2933dbca0d08cd19072503506bda863", "projectName": "netty.netty", "bugType": "Change Numeric Literal", "problem": "         new SpdySessionStatus(1, \"PROTOCOL_ERROR\");\n     \n     public static final SpdySessionStatus INTERNAL_ERROR =\n        new SpdySessionStatus(11, \"INTERNAL_ERROR\");\n     /**\n      * Returns the {@link SpdySessionStatus} represented by the specified code.", "fixed": "         new SpdySessionStatus(1, \"PROTOCOL_ERROR\");\n     \n     public static final SpdySessionStatus INTERNAL_ERROR =\n        new SpdySessionStatus(2, \"INTERNAL_ERROR\");\n     /**\n      * Returns the {@link SpdySessionStatus} represented by the specified code.", "sourceBeforeFix": "new SpdySessionStatus(11,\"INTERNAL_ERROR\")", "sourceAfterFix": "new SpdySessionStatus(2,\"INTERNAL_ERROR\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "ea98386dfd18da047c877a2320cfdcf15df2ea06", "projectName": "facebook.presto", "bugType": "Change Modifier", "problem": "                 .retInt();\n     }\n    private void generateGetSizeInBytesMethod(ClassDefinition classDefinition, FieldDefinition sizeField)\n     {\n         MethodDefinition method = classDefinition.declareMethod(a(PUBLIC), \"getSizeInBytes\", type(long.class));", "fixed": "                 .retInt();\n     }\n    private static void generateGetSizeInBytesMethod(ClassDefinition classDefinition, FieldDefinition sizeField)\n     {\n         MethodDefinition method = classDefinition.declareMethod(a(PUBLIC), \"getSizeInBytes\", type(long.class));", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid username supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"User not found\", response = Void.class) })\n    void testEndpointParameters(@FormParam(value = \"number\")  BigDecimal number,@FormParam(value = \"double\")  Double _double,@FormParam(value = \"pattern_without_delimiter\")  String patternWithoutDelimiter,@FormParam(value = \"byte\")  byte[] _byte,@FormParam(value = \"integer\")  Integer integer,@FormParam(value = \"int32\")  Integer int32,@FormParam(value = \"int64\")  Long int64,@FormParam(value = \"float\")  Float _float,@FormParam(value = \"string\")  String string,@FormParam(value = \"binary\")  byte[] binary,@FormParam(value = \"date\")  LocalDate date,@FormParam(value = \"dateTime\")  Date dateTime,@FormParam(value = \"password\")  String password,@FormParam(value = \"callback\")  String paramCallback);\n     @GET\n     @Consumes({ \"*/*\" })", "fixed": "     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid username supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"User not found\", response = Void.class) })\n    void testEndpointParameters(@FormParam(value = \"number\")  BigDecimal number,@FormParam(value = \"double\")  Double _double,@FormParam(value = \"pattern_without_delimiter\")  String patternWithoutDelimiter,@FormParam(value = \"byte\")  byte[] _byte,@FormParam(value = \"integer\")  Integer integer,@FormParam(value = \"int32\")  Integer int32,@FormParam(value = \"int64\")  Long int64,@FormParam(value = \"float\")  Float _float,@FormParam(value = \"string\")  String string,@FormParam(value = \"binary\")  byte[] binary,@FormParam(value = \"date\")  LocalDate date,@FormParam(value = \"dateTime\")  Date dateTime,@FormParam(value = \"password\")  String password,@FormParam(value = \"callback\")  String paramCallback) throws Exception;\n     @GET\n     @Consumes({ \"*/*\" })", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "4374760010679cae216f1c512564626520e00238", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t\t\tif (ClassReflection.isAssignableFrom(Enum.class, actualType)) {\n\t\t\t\tif (knownType == null || knownType != actualType) {\n \t\t\t\t\tif (actualType.getEnumConstants() == null) actualType = actualType.getSuperclass();", "fixed": " \t\t\tif (ClassReflection.isAssignableFrom(Enum.class, actualType)) {\n\t\t\t\tif (typeName != null && (knownType == null || knownType != actualType)) {\n \t\t\t\t\tif (actualType.getEnumConstants() == null) actualType = actualType.getSuperclass();", "sourceBeforeFix": "knownType != null", "sourceAfterFix": "typeName != null"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @return property value in the type of the default value\n \t * @since 1.7\n \t */\n\tpublic <T> T getGlobalPropertyValue(String propertyName, T defaultValue) throws APIException;\n \t/**\n \t * @param aClass class of object getting length for", "fixed": " \t * @return property value in the type of the default value\n \t * @since 1.7\n \t */\n\tpublic <T> T getGlobalPropertyValue(String propertyName, T defaultValue);\n \t/**\n \t * @param aClass class of object getting length for", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "ef11886bf2190370a0f3fd287616763826239c48", "projectName": "openmrs.openmrs-core", "bugType": "Wrong Function Name", "problem": " \t\tVector<RelationshipListItem> ret = new Vector<RelationshipListItem>();\r\n \t\tList<Relationship> rels = Context.getPersonService()\r\n\t\t        .getRelationships(Context.getPersonService().getPerson(personId));\r\n \t\tfor (Relationship rel : rels) {\r\n \t\t\tif (!rel.isVoided()\r\n \t\t\t        && (relationshipTypeId == null || rel.getRelationshipType().getRelationshipTypeId().equals(\r", "fixed": " \t\tVector<RelationshipListItem> ret = new Vector<RelationshipListItem>();\r\n \t\tList<Relationship> rels = Context.getPersonService()\r\n\t\t        .getRelationshipsByPerson(Context.getPersonService().getPerson(personId));\r\n \t\tfor (Relationship rel : rels) {\r\n \t\t\tif (!rel.isVoided()\r\n \t\t\t        && (relationshipTypeId == null || rel.getRelationshipType().getRelationshipTypeId().equals(\r", "sourceBeforeFix": "ps.createRelationship(rel)", "sourceAfterFix": "ps.saveRelationship(rel)"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n*  @see java.util.Comparator\n \t */\n\tpublic int compare(DataInputView firstSource, DataInputView secondSource) throws IOException;", "fixed": " \t * \n*  @see java.util.Comparator\n \t */\n\tpublic abstract int compare(DataInputView firstSource, DataInputView secondSource) throws IOException;", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "22d5241b5f75631e9cfda82a6912a2555eecb165", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "     @Override\n     protected void doStop() throws Exception {\n         if (channel != null) {\n            LOG.trace(\"Terminating channel to the remote gRPC server\");\n             channel.shutdown().shutdownNow();\n             channel = null;\n             grpcStub = null;", "fixed": "     @Override\n     protected void doStop() throws Exception {\n         if (channel != null) {\n            LOG.debug(\"Terminating channel to the remote gRPC server\");\n             channel.shutdown().shutdownNow();\n             channel = null;\n             grpcStub = null;", "sourceBeforeFix": "LOG.trace(\"Terminating channel to the remote gRPC server\")", "sourceAfterFix": "LOG.debug(\"Terminating channel to the remote gRPC server\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  private final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "dcb45a2aad0c25e059fec8893272d09a9c660987", "projectName": "checkstyle.checkstyle", "bugType": "Same Function More Args", "problem": "             @Override\n             public void checkAssertion() throws IOException {\n                 final String expectedPath = getFilePath(\"main/\") + File.separator;\n                final StringBuilder sb = new StringBuilder();\n                 sb.append(\"Starting audit...\").append(System.getProperty(\"line.separator\"));\n                 final String format = \"[WARN] %s.java:%s: %s [FileLength]\";\n                 for (String[] outputValue : outputValues) {", "fixed": "             @Override\n             public void checkAssertion() throws IOException {\n                 final String expectedPath = getFilePath(\"main/\") + File.separator;\n                final StringBuilder sb = new StringBuilder(28);\n                 sb.append(\"Starting audit...\").append(System.getProperty(\"line.separator\"));\n                 final String format = \"[WARN] %s.java:%s: %s [FileLength]\";\n                 for (String[] outputValue : outputValues) {", "sourceBeforeFix": "new StringBuilder()", "sourceAfterFix": "new StringBuilder(28)"}
{"fixCommitSHA1": "864435a71cd9e8b0dec4150284ee43372167b091", "projectName": "google.guava", "bugType": "Change Identifier Used", "problem": "     ticker.advance(4000000);\n     stopwatch.stop();\n     ticker.advance(9000000);\n    assertEquals(4, stopwatch.elapsedMillis());\n   }\n   public void testElapsedMillis_multipleSegments() {", "fixed": "     ticker.advance(4000000);\n     stopwatch.stop();\n     ticker.advance(9000000);\n    assertEquals(4, stopwatch.elapsed(MILLISECONDS));\n   }\n   public void testElapsedMillis_multipleSegments() {", "sourceBeforeFix": "stopwatch.elapsedMillis()", "sourceAfterFix": "stopwatch.elapsed(MILLISECONDS)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 15830, value = \"Registration of remote hosts is not supported on slave host controllers\")\n     String slaveControllerCannotAcceptOtherSlaves();\n     /**", "fixed": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 10830, value = \"Registration of remote hosts is not supported on slave host controllers\")\n     String slaveControllerCannotAcceptOtherSlaves();\n     /**", "sourceBeforeFix": "id=15869", "sourceAfterFix": "id=10869"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "           \"functions are set.\");\n   \n  private final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "           \"functions are set.\");\n   \n  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8c31000efa3e7745855734a2babc18fc0ab20bed", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t}\n \t@ImportAutoConfiguration(classes = ThymeleafAutoConfiguration.class)\n\t@UnrelatedOne\n \tstatic class ImportAutoConfigurationWithItemsTwo {\n \t}", "fixed": " \t}\n \t@ImportAutoConfiguration(classes = ThymeleafAutoConfiguration.class)\n\t@UnrelatedTwo\n \tstatic class ImportAutoConfigurationWithItemsTwo {\n \t}", "sourceBeforeFix": "@UnrelatedOne", "sourceAfterFix": "@UnrelatedTwo"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedKeystoneEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default KeystoneEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedKeystoneEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default KeystoneEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "f2a96ca4f2655977b45e22bba89ec5c27e3ccf07", "projectName": "openmrs.openmrs-core", "bugType": "Change Modifier", "problem": " \t\n\tprivate static List<String> updateWarnings = null;\n \t/**\n \t * Convenience method to run the changesets using Liquibase to bring the database up to a", "fixed": " \t\n\tprivate static volatile List<String> updateWarnings = null;\n \t/**\n \t * Convenience method to run the changesets using Liquibase to bring the database up to a", "sourceBeforeFix": "10", "sourceAfterFix": "74"}
{"fixCommitSHA1": "36a7be3602c37c3d766b21fa7156c09d80a27a26", "projectName": "Bukkit.Bukkit", "bugType": "Change Unary Operator\t", "problem": "             throw new IllegalArgumentException(\"Plugin is not associated with this PluginLoader\");\n         }\n        if (!plugin.isEnabled()) {\n             JavaPlugin jPlugin = (JavaPlugin)plugin;\n             server.getPluginManager().callEvent(new PluginEvent(Event.Type.PLUGIN_DISABLE, plugin));", "fixed": "             throw new IllegalArgumentException(\"Plugin is not associated with this PluginLoader\");\n         }\n        if (plugin.isEnabled()) {\n             JavaPlugin jPlugin = (JavaPlugin)plugin;\n             server.getPluginManager().callEvent(new PluginEvent(Event.Type.PLUGIN_DISABLE, plugin));", "sourceBeforeFix": "plugin.isEnabled()", "sourceAfterFix": "!plugin.isEnabled()"}
{"fixCommitSHA1": "42fab35cfd750167e66829b562b0309c8f57802b", "projectName": "Alluxio.alluxio", "bugType": "Change Boolean Literal", "problem": "     }\n     if (isBlockLocked(blockId) || !mToRemoveBlockIdSet.contains(blockId)) {\n      return false;\n     }\n     try {\n       if (!mFs.delete(getBlockFilePath(blockId), false)) {", "fixed": "     }\n     if (isBlockLocked(blockId) || !mToRemoveBlockIdSet.contains(blockId)) {\n      return true;\n     }\n     try {\n       if (!mFs.delete(getBlockFilePath(blockId), false)) {", "sourceBeforeFix": "return false; ", "sourceAfterFix": "return true; "}
{"fixCommitSHA1": "cd6dbb2f60e8638505d6d8934c23023b740cfe25", "projectName": "neo4j.neo4j", "bugType": "More Specific If", "problem": "             fail |= inconsistent( record,\n                     \"next record set but length less than maximum\" );\n         }\n        if ( record.getLength() > store.getRecordSize()\n                                   - store.getRecordHeaderSize() )\n         {\n             fail |= inconsistent( record,\n                     \"length larger than maximum for store\" );\n         }", "fixed": "             fail |= inconsistent( record,\n                     \"next record set but length less than maximum\" );\n         }\n        if ( record.getId() != 0\n             && record.getLength() > store.getRecordSize()\n                                   - store.getRecordHeaderSize() )\n         {\n            \n             fail |= inconsistent( record,\n                     \"length larger than maximum for store\" );\n         }", "sourceBeforeFix": "record.getLength() > store.getRecordSize() - store.getRecordHeaderSize()", "sourceAfterFix": "record.getId() != 0 && record.getLength() > store.getRecordSize() - store.getRecordHeaderSize()"}
{"fixCommitSHA1": "1d5647b92215f0ceabced59275225ad829061663", "projectName": "spring-projects.spring-boot", "bugType": "Change Modifier", "problem": " \t}\n \t@Test\n\tpublic void testHealth() throws Exception {\nString url = \"http:\n \t\tSystem.out.println(url);\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);", "fixed": " \t}\n \t@Test\n\tvoid testHealth() throws Exception {\nString url = \"http:\n \t\tSystem.out.println(url);\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "adb4b87fa8867e9511b47773c165f2b12fdc27ef", "projectName": "netty.netty", "bugType": "Change Identifier Used", "problem": "         AbstractAioChannel ch = null;\n         try {\n             ch = findChannel(command);\n        } catch (Exception e) {\n         }", "fixed": "         AbstractAioChannel ch = null;\n         try {\n             ch = findChannel(command);\n        } catch (Throwable t) {\n         }", "sourceBeforeFix": "Exception e", "sourceAfterFix": "Throwable t"}
{"fixCommitSHA1": "888d20138863d627e56808fdcc6288133a8ad4ff", "projectName": "Bukkit.Bukkit", "bugType": "Change Numeric Literal", "problem": "     DIAMOND(264),\n     IRON_INGOT(265),\n     GOLD_INGOT(266),\n    IRON_SWORD(267, 1, 59),\n     WOOD_SWORD(268, 1, 59),\n     WOOD_SPADE(269, 1, 59),\n     WOOD_PICKAXE(270, 1, 59),", "fixed": "     DIAMOND(264),\n     IRON_INGOT(265),\n     GOLD_INGOT(266),\n    IRON_SWORD(267, 1, 250),\n     WOOD_SWORD(268, 1, 59),\n     WOOD_SPADE(269, 1, 59),\n     WOOD_PICKAXE(270, 1, 59),", "sourceBeforeFix": "IRON_SWORD(267,1,59)", "sourceAfterFix": "IRON_SWORD(267,1,250)"}
{"fixCommitSHA1": "e608cc292c0100c32f7659e10fb1341d68428fc9", "projectName": "stanfordnlp.CoreNLP", "bugType": "Change Identifier Used", "problem": " \t\tcase \"contigo\":\n \t\tcase \"consigo\":\n \t\tdefault:\n\t\t\tFirst = word.substring(0, 3);\n \t\t\tsecond = word.substring(3, 5);\n \t\t}", "fixed": " \t\tcase \"contigo\":\n \t\tcase \"consigo\":\n \t\tdefault:\n\t\t\tfirst = word.substring(0, 3);\n \t\t\tsecond = word.substring(3, 5);\n \t\t}", "sourceBeforeFix": "First=word.substring(0,3)", "sourceAfterFix": "first=word.substring(0,3)"}
{"fixCommitSHA1": "4bf80610fd2a67d952312e808edebdb74ebc26bb", "projectName": "Graylog2.graylog2-server", "bugType": "Change Numeric Literal", "problem": "         final PaginatedList<TestDTO> page3 = dbService.findPaginatedWithQueryFilterAndSort(DBQuery.empty(), filter, DBSort.asc(\"title\"), 3, 2);\n         assertThat(page3.pagination().getCount()).isEqualTo(1);\n        assertThat(page3.pagination().getGlobalTotal()).isEqualTo(7);\n         assertThat(page3.delegate())\n                 .extracting(\"title\")\n                 .containsExactly(\"hello6\");", "fixed": "         final PaginatedList<TestDTO> page3 = dbService.findPaginatedWithQueryFilterAndSort(DBQuery.empty(), filter, DBSort.asc(\"title\"), 3, 2);\n         assertThat(page3.pagination().getCount()).isEqualTo(1);\n        assertThat(page3.pagination().getGlobalTotal()).isEqualTo(5);\n         assertThat(page3.delegate())\n                 .extracting(\"title\")\n                 .containsExactly(\"hello6\");", "sourceBeforeFix": "assertThat(page1.pagination().getGlobalTotal()).isEqualTo(7)", "sourceAfterFix": "assertThat(page1.pagination().getGlobalTotal()).isEqualTo(5)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetProgramiv (int program, int pname, IntBuffer params) {\r\n\t\tGL20.glGetProgram(program, pname, params);\r\n \t}\r\n \tpublic void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tEXTFramebufferObject.glGetRenderbufferParameterEXT(target, pname, params);\r\n \t}\r\n \tpublic String glGetShaderInfoLog (int shader) {\r", "fixed": " \t}\r\n \tpublic void glGetProgramiv (int program, int pname, IntBuffer params) {\r\n\t\tGL20.glGetProgramiv(program, pname, params);\r\n \t}\r\n \tpublic void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tEXTFramebufferObject.glGetRenderbufferParameterivEXT(target, pname, params);\r\n \t}\r\n \tpublic String glGetShaderInfoLog (int shader) {\r", "sourceBeforeFix": "GL20.glUniformMatrix2(location,transpose,value)", "sourceAfterFix": "GL20.glUniformMatrix2fv(location,transpose,value)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e04cbbf23e9273cca31b1cc12142e34fae753542", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "         \n        void addName(String nameToAdd) {\n             varNames.add(nameToAdd);\n         }", "fixed": "         \n        private void addName(String nameToAdd) {\n             varNames.add(nameToAdd);\n         }", "sourceBeforeFix": "0", "sourceAfterFix": "2"}
{"fixCommitSHA1": "4665dcf9ab41c3c61cd42aad296ebfe518bfa003", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\n \tpublic void glBindTexture (int target, int texture) {\n\t\tGL.glBindTextureEXT(target, texture);\n \t}\n \tpublic void glBlendFunc (int sfactor, int dfactor) {", "fixed": " \t}\n \tpublic void glBindTexture (int target, int texture) {\n\t\tGL.glBindTexture(target, texture);\n \t}\n \tpublic void glBlendFunc (int sfactor, int dfactor) {", "sourceBeforeFix": "GL.glGenTexturesEXT(n,toBuffer(textures,offset),0)", "sourceAfterFix": "GL.glGenTextures(n,toBuffer(textures,offset),0)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "           \"functions are set.\");\n   \n  private final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "           \"functions are set.\");\n   \n  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "2", "sourceAfterFix": "0"}
{"fixCommitSHA1": "c97c55c5fe3bd7a54b9f36cf68f17b5cf19ecaf3", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Change Identifier Used", "problem": "     }\n     private Channel lookupInCache(Url url) {\n        Channel channel = connectionsPool.get(url);\n         if (channel != null) {\n             /**\n              * The Channel will eventually be closed by Netty and will becomes invalid.", "fixed": "     }\n     private Channel lookupInCache(Url url) {\n        Channel channel = connectionsPool.get(url.getBaseUrl());\n         if (channel != null) {\n             /**\n              * The Channel will eventually be closed by Netty and will becomes invalid.", "sourceBeforeFix": "Entry<Url,Channel>", "sourceAfterFix": "Entry<String,Channel>"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 15866, value = \"%s is null\")\n     IllegalArgumentException nullVar(String name);\n     /**", "fixed": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 10866, value = \"%s is null\")\n     IllegalArgumentException nullVar(String name);\n     /**", "sourceBeforeFix": "id=15837", "sourceAfterFix": "id=10837"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fd37bb87cc8aa1cf713c2f4ddfd2ec95be096d70", "projectName": "stanfordnlp.CoreNLP", "bugType": "Change Identifier Used", "problem": "         Class[] argsClass = { String.class };\n         Object[] arguments = { op.testOptions.taggerSerializedFile };\n         System.err.printf(\"Loading tagger from serialized file %s ...\\n\",op.testOptions.taggerSerializedFile);\n        tagger = (Function<List<? extends HasWord>,ArrayList<TaggedWord>>) Class.forName(\"edu.stanford.nlp.tagger.maxent.MaxentTagger\").getConstructor(argsClass).newInstance(arguments);\n       } catch (RuntimeException e) {\n         throw e;\n       } catch (Exception e) {", "fixed": "         Class[] argsClass = { String.class };\n         Object[] arguments = { op.testOptions.taggerSerializedFile };\n         System.err.printf(\"Loading tagger from serialized file %s ...\\n\",op.testOptions.taggerSerializedFile);\n        tagger = (Function<List<? extends HasWord>,List<TaggedWord>>) Class.forName(\"edu.stanford.nlp.tagger.maxent.MaxentTagger\").getConstructor(argsClass).newInstance(arguments);\n       } catch (RuntimeException e) {\n         throw e;\n       } catch (Exception e) {", "sourceBeforeFix": "ArrayList<TaggedWord>", "sourceAfterFix": "List<TaggedWord>"}
{"fixCommitSHA1": "53694f29adf8c68992e1b966c86380219f438c14", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         String uri = getScpUri() + \"?username=admin&password=admin&chmod=640&knownHostsFile=\" + getKnownHostsFile();\n         template.sendBodyAndHeader(uri, \"Bonjour Monde\", Exchange.FILE_NAME, \"monde.txt\");\n        Thread.sleep(100);\n         File file = new File(getScpPath() + \"/monde.txt\");\n         assertFileExists(file.getAbsolutePath());", "fixed": "         String uri = getScpUri() + \"?username=admin&password=admin&chmod=640&knownHostsFile=\" + getKnownHostsFile();\n         template.sendBodyAndHeader(uri, \"Bonjour Monde\", Exchange.FILE_NAME, \"monde.txt\");\n        Thread.sleep(200);\n         File file = new File(getScpPath() + \"/monde.txt\");\n         assertFileExists(file.getAbsolutePath());", "sourceBeforeFix": "Thread.sleep(100)", "sourceAfterFix": "Thread.sleep(200)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "63b7f0d065c51b125f53c90c1c61e2eda9068929", "projectName": "libgdx.libgdx", "bugType": "Less Specific If", "problem": " \t\t\tpublic void touchUp (InputEvent event, float x, float y, int pointer, int button) {\r\n \t\t\t\tif (pointer != draggingPointer) return;\r\n \t\t\t\tdraggingPointer = -1;\r\n\t\t\t\tif (!calculatePositionAndValue(x, y)) {\r\n \t\t\t\t\tChangeEvent changeEvent = Pools.obtain(ChangeEvent.class);\r\n \t\t\t\t\tfire(changeEvent);\r", "fixed": " \t\t\tpublic void touchUp (InputEvent event, float x, float y, int pointer, int button) {\r\n \t\t\t\tif (pointer != draggingPointer) return;\r\n \t\t\t\tdraggingPointer = -1;\r\n\t\t\t\tif (event.isTouchFocusCancel() || !calculatePositionAndValue(x, y)) {\r\n \t\t\t\t\tChangeEvent changeEvent = Pools.obtain(ChangeEvent.class);\r\n \t\t\t\t\tfire(changeEvent);\r", "sourceBeforeFix": "!calculatePositionAndValue(x,y)", "sourceAfterFix": "event.isTouchFocusCancel() || !calculatePositionAndValue(x,y)"}
{"fixCommitSHA1": "8616612734924c0a8a9781aed94669c866b12981", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "         try {\n             final String echo = localEcho.echo(message);\n             Assert.fail(\"Remote invocation on a local view \" + LocalEcho.class.getName() + \" was expected to fail\");\n        } catch (EJBException nsee) {\n             logger.trace(\"Got the expected exception on invoking on a local view, remotely\", nsee);\n         }", "fixed": "         try {\n             final String echo = localEcho.echo(message);\n             Assert.fail(\"Remote invocation on a local view \" + LocalEcho.class.getName() + \" was expected to fail\");\n        } catch (IllegalStateException nsee) {\n             logger.trace(\"Got the expected exception on invoking on a local view, remotely\", nsee);\n         }", "sourceBeforeFix": "EJBException nsee", "sourceAfterFix": "IllegalStateException nsee"}
{"fixCommitSHA1": "5b13fe70c25812157a1e4432135eb9639e72bc6a", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t\tfinal Sink output = new Sink(\"output.json\").withInputs(selection);\n \t\texpectedPlan.setSinks(output);\n\t\tassertEquals(expectedPlan, actualPlan);\n \t}\n \t@Test", "fixed": " \t\tfinal Sink output = new Sink(\"output.json\").withInputs(selection);\n \t\texpectedPlan.setSinks(output);\n\t\tassertPlanEquals(expectedPlan, actualPlan);\n \t}\n \t@Test", "sourceBeforeFix": "assertEquals(expectedPlan,actualPlan)", "sourceAfterFix": "assertPlanEquals(expectedPlan,actualPlan)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedSWFEndpointBuilder\n             extends\n                 AdvancedSWFEndpointConsumerBuilder, AdvancedSWFEndpointProducerBuilder {\n         default SWFEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedSWFEndpointBuilder\n             extends\n                 AdvancedSWFEndpointConsumerBuilder, AdvancedSWFEndpointProducerBuilder {\n         default SWFEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "cb84b2788aeed6aad2bc4b1acb98290e060861e2", "projectName": "apache.hbase", "bugType": "Wrong Function Name", "problem": "       Assert.assertEquals(1, result.size());\n       hbck.assigns(Arrays.asList(result.keySet().toArray(new String[0])).stream()\n           .map(regionName -> regionName.split(\"\\\\.\")[1]).collect(Collectors.toList()));\n      ProcedureTestingUtility.waitNoProcedureRunning(master.getMasterProcedureExecutor());\n       result = hbck.getFailedSplitMergeLegacyRegions(Arrays.asList(TableName.valueOf(testTable)));\n       Assert.assertEquals(0, result.size());", "fixed": "       Assert.assertEquals(1, result.size());\n       hbck.assigns(Arrays.asList(result.keySet().toArray(new String[0])).stream()\n           .map(regionName -> regionName.split(\"\\\\.\")[1]).collect(Collectors.toList()));\n      ProcedureTestingUtility.waitAllProcedures(master.getMasterProcedureExecutor());\n       result = hbck.getFailedSplitMergeLegacyRegions(Arrays.asList(TableName.valueOf(testTable)));\n       Assert.assertEquals(0, result.size());", "sourceBeforeFix": "ProcedureTestingUtility.waitNoProcedureRunning(master.getMasterProcedureExecutor())", "sourceAfterFix": "ProcedureTestingUtility.waitAllProcedures(master.getMasterProcedureExecutor())"}
{"fixCommitSHA1": "a63faf44e1b103a49d25a15c720fc5940ae9fc07", "projectName": "square.retrofit", "bugType": "Change Identifier Used", "problem": "     assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResponseClass = new TypeToken<Maybe<Response<String>>>() {}.getType();\n    assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResponseClass = new TypeToken<Flowable<Response<String>>>() {}.getType();\n    assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oResponseWildcard = new TypeToken<Observable<Response<? extends String>>>() {}.getType();", "fixed": "     assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResponseClass = new TypeToken<Maybe<Response<String>>>() {}.getType();\n    assertThat(factory.get(mResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResponseClass = new TypeToken<Flowable<Response<String>>>() {}.getType();\n    assertThat(factory.get(fResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oResponseWildcard = new TypeToken<Observable<Response<? extends String>>>() {}.getType();", "sourceBeforeFix": "factory.get(sResponseWildcard,NO_ANNOTATIONS,retrofit)", "sourceAfterFix": "factory.get(fResponseWildcard,NO_ANNOTATIONS,retrofit)"}
{"fixCommitSHA1": "ea2aedf398263a18ebda9343e97127686a2f61d9", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "     mThriftServer = createThriftServer();\n     mWorkerNetAddress =\n         new NetAddress(BlockWorkerUtils.getWorkerAddress(mTachyonConf).getAddress()\n            .getCanonicalHostName(), thriftServerPort, mDataServer.getPort());\n     int webPort = mTachyonConf.getInt(Constants.WORKER_WEB_PORT, Constants.DEFAULT_WORKER_WEB_PORT);", "fixed": "     mThriftServer = createThriftServer();\n     mWorkerNetAddress =\n         new NetAddress(BlockWorkerUtils.getWorkerAddress(mTachyonConf).getAddress()\n            .getHostAddress(), thriftServerPort, mDataServer.getPort());\n     int webPort = mTachyonConf.getInt(Constants.WORKER_WEB_PORT, Constants.DEFAULT_WORKER_WEB_PORT);", "sourceBeforeFix": "BlockWorkerUtils.getWorkerAddress(mTachyonConf).getAddress().getCanonicalHostName()", "sourceAfterFix": "BlockWorkerUtils.getWorkerAddress(mTachyonConf).getAddress().getHostAddress()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15849, value = \"Operation %s for address %s can only be handled by the \" +\n             \"master Domain Controller; this host is not the master Domain Controller\")\n     String masterDomainControllerOnlyOperation(String operation, PathAddress address);", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10849, value = \"Operation %s for address %s can only be handled by the \" +\n             \"master Domain Controller; this host is not the master Domain Controller\")\n     String masterDomainControllerOnlyOperation(String operation, PathAddress address);", "sourceBeforeFix": "id=15856", "sourceAfterFix": "id=10856"}
{"fixCommitSHA1": "435805f612bf78ee0d2fd93cd90fa6c6740e17c2", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         String uri = getScpUri() + \"?username=admin&password=admin&knownHostsFile=\" + getKnownHostsFile();\n         template.sendBodyAndHeader(uri, \"Bye World\", Exchange.FILE_NAME, \"mysub/bye.txt\");\n        Thread.sleep(200);\n         File file = new File(getScpPath() + \"/mysub/bye.txt\");\n         assertFileExists(file.getAbsolutePath());", "fixed": "         String uri = getScpUri() + \"?username=admin&password=admin&knownHostsFile=\" + getKnownHostsFile();\n         template.sendBodyAndHeader(uri, \"Bye World\", Exchange.FILE_NAME, \"mysub/bye.txt\");\n        Thread.sleep(500);\n         File file = new File(getScpPath() + \"/mysub/bye.txt\");\n         assertFileExists(file.getAbsolutePath());", "sourceBeforeFix": "Thread.sleep(200)", "sourceAfterFix": "Thread.sleep(500)"}
{"fixCommitSHA1": "edc53a74553f19c2ec83ab7c12945758ba6084bf", "projectName": "apache.flink", "bugType": "Change Binary Operator", "problem": " \t\tint msgType = buf.readInt();\n \t\tKvStateRequestType[] values = KvStateRequestType.values();\n\t\tif (msgType >= 0 && msgType <= values.length) {\n \t\t\treturn values[msgType];\n \t\t} else {\n \t\t\tthrow new IllegalArgumentException(\"Illegal message type with index \" + msgType);", "fixed": " \t\tint msgType = buf.readInt();\n \t\tKvStateRequestType[] values = KvStateRequestType.values();\n\t\tif (msgType >= 0 && msgType < values.length) {\n \t\t\treturn values[msgType];\n \t\t} else {\n \t\t\tthrow new IllegalArgumentException(\"Illegal message type with index \" + msgType);", "sourceBeforeFix": "msgType <= values.length", "sourceAfterFix": "msgType < values.length"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public List<Trends> getDailyTrends(Date date, boolean excludeHashTags) throws TwitterException {\n        return Trends.constructTrendsList(get(getSearchBaseURL()\n                 + \"trends/daily.json?date=\" + toDateStr(date)\n                 + (excludeHashTags ? \"&exclude=hashtags\" : \"\"), false));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public List<Trends> getDailyTrends(Date date, boolean excludeHashTags) throws TwitterException {\n        return Trends.createTrendsList(get(getSearchBaseURL()\n                 + \"trends/daily.json?date=\" + toDateStr(date)\n                 + (excludeHashTags ? \"&exclude=hashtags\" : \"\"), false));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\",true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface Sjms2EndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedSjms2EndpointProducerBuilder advanced() {", "fixed": "     \n    public interface Sjms2EndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedSjms2EndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should return null if no implementation id is defined yet\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)\n\tpublic ImplementationId getImplementationId() throws APIException;\n \t/**\n \t * Set the given <code>implementationId</code> as this implementation's unique id", "fixed": " \t * @should return null if no implementation id is defined yet\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)\n\tpublic ImplementationId getImplementationId();\n \t/**\n \t * Set the given <code>implementationId</code> as this implementation's unique id", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform1iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform1(location, v);\r\n \t}\r\n \t@Override\r\n \tpublic void glUniform1iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform1(location, toIntBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform2f (int location, float x, float y) {\r", "fixed": " \t}\r\n \tpublic void glUniform1iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform1iv(location, v);\r\n \t}\r\n \t@Override\r\n \tpublic void glUniform1iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform1iv(location, toIntBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform2f (int location, float x, float y) {\r", "sourceBeforeFix": "EXTFramebufferObject.glGetFramebufferAttachmentParameterEXT(target,attachment,pname,params)", "sourceAfterFix": "EXTFramebufferObject.glGetFramebufferAttachmentParameterivEXT(target,attachment,pname,params)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "5ac2955ff4451c72db1e157dda76786f30511679", "projectName": "eclipse.vert.x", "bugType": "Change Numeric Literal", "problem": "     int receiverBufferSize = TestUtils.randomPortInt();\n     Random rand = new Random();\n     boolean reuseAddress = rand.nextBoolean();\n    int trafficClass = TestUtils.randomByte() + 127;\n     boolean tcpNoDelay = rand.nextBoolean();\n     boolean tcpKeepAlive = rand.nextBoolean();\n     int soLinger = TestUtils.randomPositiveInt();", "fixed": "     int receiverBufferSize = TestUtils.randomPortInt();\n     Random rand = new Random();\n     boolean reuseAddress = rand.nextBoolean();\n    int trafficClass = TestUtils.randomByte() + 128;\n     boolean tcpNoDelay = rand.nextBoolean();\n     boolean tcpKeepAlive = rand.nextBoolean();\n     int soLinger = TestUtils.randomPositiveInt();", "sourceBeforeFix": "TestUtils.randomByte() + 127", "sourceAfterFix": "TestUtils.randomByte() + 128"}
{"fixCommitSHA1": "fd2bf7d972c703a603f7ec043b96649347f7e184", "projectName": "facebook.presto", "bugType": "Change Numeric Literal", "problem": "         httpClientBinder(binder).bindHttpClient(\"memoryManager\", ForMemoryManager.class)\n                 .withTracing()\n                 .withConfigDefaults(config -> {\n                    config.setIdleTimeout(new Duration(2, SECONDS));\n                     config.setRequestTimeout(new Duration(10, SECONDS));\n                 });", "fixed": "         httpClientBinder(binder).bindHttpClient(\"memoryManager\", ForMemoryManager.class)\n                 .withTracing()\n                 .withConfigDefaults(config -> {\n                    config.setIdleTimeout(new Duration(30, SECONDS));\n                     config.setRequestTimeout(new Duration(10, SECONDS));\n                 });", "sourceBeforeFix": "new Duration(2,SECONDS)", "sourceAfterFix": "new Duration(30,SECONDS)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": " import org.jboss.logging.MessageLogger;\n /**\n * This module is using message IDs in the range 10900-10999. This file is using the subset 10950-10974 for domain\n* controller logger messages. See http:\n  * JBAS message id blocks.\n  * <p/>", "fixed": " import org.jboss.logging.MessageLogger;\n /**\n * This module is using message IDs in the range 10800-10999. This file is using the subset 10800-10829 for domain\n* controller logger messages. See http:\n  * JBAS message id blocks.\n  * <p/>", "sourceBeforeFix": "id=15805", "sourceAfterFix": "id=10805"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_cn_2() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e745\u670806\u65e5\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_cn_2() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e745\u670806\u65e5\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "9771ba62390a56363b20e52f12a8b9b34c51da62", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "     public void testSamplingFromExchangeStream() throws Exception {\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedMessageCount(2);\n         mock.setResultWaitTime(3000);\n         List<Exchange> sentExchanges = new ArrayList<Exchange>();", "fixed": "     public void testSamplingFromExchangeStream() throws Exception {\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedMinimumMessageCount(2);\n         mock.setResultWaitTime(3000);\n         List<Exchange> sentExchanges = new ArrayList<Exchange>();", "sourceBeforeFix": "mock.expectedMessageCount(10)", "sourceAfterFix": "mock.expectedMinimumMessageCount(10)"}
{"fixCommitSHA1": "3dddcc4cdf4a74ddbd4607c6aaee5bdd8ac46c27", "projectName": "gephi.gephi", "bugType": "Change Modifier", "problem": "     }\n     @Override\n    public void display(GL2 gl, GLU glu) {\n         markTime++;\n         VizModel vizModel = VizController.getInstance().getVizModel();", "fixed": "     }\n     @Override\n    public synchronized void display(GL2 gl, GLU glu) {\n         markTime++;\n         VizModel vizModel = VizController.getInstance().getVizModel();", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "014f2410e81ed3ecc6b82fbac49ab345aab6e90f", "projectName": "junit-team.junit", "bugType": "Change Modifier", "problem": "     }\n     @FixMethodOrder(MethodSorters.DEFAULT)\n    private static class DummySortWithDefault {\n         Object alpha(int i, double d, Thread t) {return null;}\n         void beta(int[][] x) {}\n         int gamma() {return 0;}", "fixed": "     }\n     @FixMethodOrder(MethodSorters.DEFAULT)\n    static class DummySortWithDefault {\n         Object alpha(int i, double d, Thread t) {return null;}\n         void beta(int[][] x) {}\n         int gamma() {return 0;}", "sourceBeforeFix": "10", "sourceAfterFix": "8"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 15832, value = \"There is already a registered host named '%s'\")\n     String slaveAlreadyRegistered(String slaveName);\n     /**", "fixed": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 10832, value = \"There is already a registered host named '%s'\")\n     String slaveAlreadyRegistered(String slaveName);\n     /**", "sourceBeforeFix": "id=15836", "sourceAfterFix": "id=10836"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface GoogleDriveEndpointBuilder\n             extends\n                 GoogleDriveEndpointConsumerBuilder, GoogleDriveEndpointProducerBuilder {\n         default AdvancedGoogleDriveEndpointBuilder advanced() {", "fixed": "     \n    public interface GoogleDriveEndpointBuilder\n             extends\n                 GoogleDriveEndpointConsumerBuilder, GoogleDriveEndpointProducerBuilder {\n         default AdvancedGoogleDriveEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedRabbitMQEndpointBuilder\n             extends\n                 AdvancedRabbitMQEndpointConsumerBuilder, AdvancedRabbitMQEndpointProducerBuilder {\n         default RabbitMQEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedRabbitMQEndpointBuilder\n             extends\n                 AdvancedRabbitMQEndpointConsumerBuilder, AdvancedRabbitMQEndpointProducerBuilder {\n         default RabbitMQEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "8a9e1bcbff1ff10cf122b23b3a1aa437f02a2086", "projectName": "gephi.gephi", "bugType": "Change Unary Operator\t", "problem": "         org.gephi.graph.api.TextData sourceEdgeTextData = sourceEdgeData.getTextData();\n         String label = sourceEdgeData.getLabel();\n        if (sourceEdgeTextData != null && sourceEdgeTextData.getText() != null && sourceEdgeTextData.getText().isEmpty() && sourceEdgeTextData.isVisible()) {\n             label = sourceEdgeTextData.getText();\n         } else if (sourceEdgeTextData != null && !sourceEdgeTextData.isVisible()) {\n             label = null;", "fixed": "         org.gephi.graph.api.TextData sourceEdgeTextData = sourceEdgeData.getTextData();\n         String label = sourceEdgeData.getLabel();\n        if (sourceEdgeTextData != null && sourceEdgeTextData.getText() != null && !sourceEdgeTextData.getText().isEmpty() && sourceEdgeTextData.isVisible()) {\n             label = sourceEdgeTextData.getText();\n         } else if (sourceEdgeTextData != null && !sourceEdgeTextData.isVisible()) {\n             label = null;", "sourceBeforeFix": "sourceEdgeTextData.getText().isEmpty()", "sourceAfterFix": "!sourceEdgeTextData.getText().isEmpty()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e2efffc72002968f835a0ea6a70f8e7762752b15", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": " \t@Test\r\n \t@Verifies(value = \"should pass if the duplicate ConceptName is neither preferred nor fully Specified\", method = \"validate(Object,Errors)\")\r\n \tpublic void validate_shouldPassIfTheDuplicateConceptNameIsNeitherPreferredNorFullySpecified() throws Exception {\r\n\t\tContext.setLocale(Context.getLocale());\r\n \t\tConcept concept = Context.getConceptService().getConcept(5497);\r\n \t\tConceptName duplicateName = new ConceptName(\"duplicate name\", Context.getLocale());\r", "fixed": " \t@Test\r\n \t@Verifies(value = \"should pass if the duplicate ConceptName is neither preferred nor fully Specified\", method = \"validate(Object,Errors)\")\r\n \tpublic void validate_shouldPassIfTheDuplicateConceptNameIsNeitherPreferredNorFullySpecified() throws Exception {\r\n\t\tContext.setLocale(new Locale(\"en\"));\r\n \t\tConcept concept = Context.getConceptService().getConcept(5497);\r\n \t\tConceptName duplicateName = new ConceptName(\"duplicate name\", Context.getLocale());\r", "sourceBeforeFix": "new BindException(concept,\"concept\")", "sourceAfterFix": "new BindException(newConcept,\"concept\")"}
{"fixCommitSHA1": "5038fc76c950029c78681dff816d7465f6acbb91", "projectName": "apache.hbase", "bugType": "Wrong Function Name", "problem": "             outResult.add(cell);\n             count++;\n             totalBytesRead += CellUtil.estimatedSerializedSizeOf(cell);\n            totalHeapSize += CellUtil.estimatedHeapSizeOf(cell);\n             if (totalBytesRead > maxRowSize) {\n               throw new RowTooBigException(\"Max row size allowed: \" + maxRowSize\n               + \", but the row is bigger than that.\");", "fixed": "             outResult.add(cell);\n             count++;\n             totalBytesRead += CellUtil.estimatedSerializedSizeOf(cell);\n            totalHeapSize += CellUtil.estimatedHeapSizeOfWithoutTags(cell);\n             if (totalBytesRead > maxRowSize) {\n               throw new RowTooBigException(\"Max row size allowed: \" + maxRowSize\n               + \", but the row is bigger than that.\");", "sourceBeforeFix": "CellUtil.estimatedHeapSizeOf(cell)", "sourceAfterFix": "CellUtil.estimatedHeapSizeOfWithoutTags(cell)"}
{"fixCommitSHA1": "79946366e1ab141ef2b595e0079dcac7b913da2b", "projectName": "checkstyle.checkstyle", "bugType": "Wrong Function Name", "problem": "         checkConfig.addAttribute(\"matchDirectoryStructure\", \"false\");\n         final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;\n        verify(checkConfig, getPath(\"InputPackageDeclarationDiffDirectory.java\"), expected);\n     }\n     @Test", "fixed": "         checkConfig.addAttribute(\"matchDirectoryStructure\", \"false\");\n         final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;\n        verify(checkConfig, getNonCompilablePath(\"InputPackageDeclarationDiffDirectory.java\"),\n                expected);\n     }\n     @Test", "sourceBeforeFix": "getPath(\"InputPackageDeclarationDiffDirectoryAtParent.java\")", "sourceAfterFix": "getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtParent.java\")"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform3(location, v);\r\n \t}\r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform3(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r", "fixed": " \t}\r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform3iv(location, v);\r\n \t}\r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform3iv(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r", "sourceBeforeFix": "GL20.glUniformMatrix4(location,transpose,value)", "sourceAfterFix": "GL20.glUniformMatrix4fv(location,transpose,value)"}
{"fixCommitSHA1": "d90c2e643a15cec40c8a48f11a515bb7b2ffde3e", "projectName": "Alluxio.alluxio", "bugType": "Wrong Function Name", "problem": "       long sessionId = IdUtils.createSessionId();\n       long blockSize = openUfsBlockOptions.getBlockSize();\n       boolean isSourceLocal = mLocalWorkerAddress.getHost().equals(request.getSourceHost())\n          && mLocalWorkerAddress.getRpcPort() == request.getSourcePort();\n       try {\n         if (isSourceLocal) {", "fixed": "       long sessionId = IdUtils.createSessionId();\n       long blockSize = openUfsBlockOptions.getBlockSize();\n       boolean isSourceLocal = mLocalWorkerAddress.getHost().equals(request.getSourceHost())\n          && mLocalWorkerAddress.getDataPort() == request.getSourcePort();\n       try {\n         if (isSourceLocal) {", "sourceBeforeFix": "mLocalWorkerAddress.getRpcPort()", "sourceAfterFix": "mLocalWorkerAddress.getDataPort()"}
{"fixCommitSHA1": "5324bb65a6b5d94652f950f2b03fd6345fb6f66d", "projectName": "openhab.openhab", "bugType": "Wrong Function Name", "problem": " \t\t\t\t} catch (IOException e) {\n \t\t\t\t\tlogger.error(\"Could not open url '{}' for sending it via XMPP\", attachmentUrl, e);\n \t\t\t\t} finally {\n\t\t\t\t\tIOUtils.closeQuitely(is);\n \t\t\t\t}\n \t\t\t}\n \t\t} catch (NotInitializedException e) {", "fixed": " \t\t\t\t} catch (IOException e) {\n \t\t\t\t\tlogger.error(\"Could not open url '{}' for sending it via XMPP\", attachmentUrl, e);\n \t\t\t\t} finally {\n\t\t\t\t\tIOUtils.closeQuietly(is);\n \t\t\t\t}\n \t\t\t}\n \t\t} catch (NotInitializedException e) {", "sourceBeforeFix": "IOUtils.closeQuitely(is)", "sourceAfterFix": "IOUtils.closeQuietly(is)"}
{"fixCommitSHA1": "d7b19bfc78039804e5460a01e6d5939d2f4ce5f7", "projectName": "Alluxio.alluxio", "bugType": "Same Function More Args", "problem": "   }\n   /**\n   * Free the file or Folder from tachyon in-memory specified by argv\n    *\n    * @param path The TachyonURI path as the input of the command\n    * @return 0 if command if successful, -1 if an error occurred.", "fixed": "   }\n   /**\n   * Free the given file or folder from tachyon in-memory (recursively freeing all children \n   * if a folder)\n    *\n    * @param path The TachyonURI path as the input of the command\n    * @return 0 if command if successful, -1 if an error occurred.", "sourceBeforeFix": "mTfs.delete(mTfs.open(path))", "sourceAfterFix": "mTfs.delete(mTfs.open(path),true)"}
{"fixCommitSHA1": "d50e8bff665f2272ffc93e15099db69d4292a130", "projectName": "apache.flink", "bugType": "Change Numeric Literal", "problem": " \tprivate static final Logger LOG = LoggerFactory.getLogger(Utils.class);\n\tprivate static final int DEFAULT_HEAP_LIMIT_CAP = 500;\n \tprivate static final float DEFAULT_YARN_HEAP_CUTOFF_RATIO = 0.8f;\n \t/**", "fixed": " \tprivate static final Logger LOG = LoggerFactory.getLogger(Utils.class);\n\tprivate static final int DEFAULT_HEAP_LIMIT_CAP = 700;\n \tprivate static final float DEFAULT_YARN_HEAP_CUTOFF_RATIO = 0.8f;\n \t/**", "sourceBeforeFix": "DEFAULT_HEAP_LIMIT_CAP=500", "sourceAfterFix": "DEFAULT_HEAP_LIMIT_CAP=700"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e468368e908ffe056690c2399d9e0b59557af2d8", "projectName": "google.closure-compiler", "bugType": "Less Specific If", "problem": "     if (NodeUtil.isFunctionBind(expr)) {\n       return true;\n     }\n    if (!expr.isGetProp() || !expr.getLastChild().getString().equals(\"bind\")) {\n       return false;\n     }\n     Node recv = expr.getFirstChild();", "fixed": "     if (NodeUtil.isFunctionBind(expr)) {\n       return true;\n     }\n    if (!expr.isGetProp() || !expr.isQualifiedName()\n        || !expr.getLastChild().getString().equals(\"bind\")) {\n       return false;\n     }\n     Node recv = expr.getFirstChild();", "sourceBeforeFix": "!expr.isGetProp() || !expr.getLastChild().getString().equals(\"bind\")", "sourceAfterFix": "!expr.isGetProp() || !expr.isQualifiedName() || !expr.getLastChild().getString().equals(\"bind\")"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 15872, value = \"Invalid code %d\")\n     IllegalArgumentException invalidCode(int code);\n }", "fixed": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 10872, value = \"Invalid code %d\")\n     IllegalArgumentException invalidCode(int code);\n }", "sourceBeforeFix": "id=15860", "sourceAfterFix": "id=10860"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  private final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsText(String path, long millis, OUT endTuple) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), millis, endTuple);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsText(String path, long millis, OUT endTuple) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), millis, endTuple);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15848, value = \"Exception getting result from host %s: %s\")\n     String exceptionAwaitingResultFromHost(String name, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10848, value = \"Exception getting result from host %s: %s\")\n     String exceptionAwaitingResultFromHost(String name, String message);\n     /**", "sourceBeforeFix": "id=15855", "sourceAfterFix": "id=10855"}
{"fixCommitSHA1": "0ac7ee76635e28f3f8b88c575a53e8d700c5f4e5", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "       Configuration.getBoolean(PropertyKey.USER_FILE_PASSIVE_CACHE_ENABLED);\n   private static final int UNINITIALIZED_BLOCK_INDEX = -1;\n   private static final int EOF_DATA = -1;\n  private static final int EOF_BLOCK_ID = -1;\n   \n   private final InStreamOptions mInStreamOptions;", "fixed": "       Configuration.getBoolean(PropertyKey.USER_FILE_PASSIVE_CACHE_ENABLED);\n   private static final int UNINITIALIZED_BLOCK_INDEX = -1;\n   private static final int EOF_DATA = -1;\n  private static final long EOF_BLOCK_ID = -1;\n   \n   private final InStreamOptions mInStreamOptions;", "sourceBeforeFix": "return EOF_BLOCK_ID; ", "sourceAfterFix": "return EOF_DATA; "}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "53fd1f7f2e34c70008553640fdf2123e41a02592", "projectName": "spring-projects.spring-boot", "bugType": "Change Binary Operator", "problem": " \t\t@Override\n \t\tprotected boolean removeEldestEntry(Map.Entry<K, List<PropertyMapping>> eldest) {\n\t\t\treturn size() >= this.capacity;\n \t\t}", "fixed": " \t\t@Override\n \t\tprotected boolean removeEldestEntry(Map.Entry<K, List<PropertyMapping>> eldest) {\n\t\t\treturn size() > this.capacity;\n \t\t}", "sourceBeforeFix": "size() >= this.capacity", "sourceAfterFix": "size() > this.capacity"}
{"fixCommitSHA1": "5be7bae54f193a7a9c6adf15e323af1e187a7592", "projectName": "stanfordnlp.CoreNLP", "bugType": "Change Caller in Function Call", "problem": "           Transition transition = parser.transitionIndex.get(predictedTransition.object());\n           State newState = transition.apply(state, predictedTransition.score());\n          if (bestState == null || newState.score() < bestState.score()) {\n             bestState = newState;\n           }\n           beam.add(newState);", "fixed": "           Transition transition = parser.transitionIndex.get(predictedTransition.object());\n           State newState = transition.apply(state, predictedTransition.score());\n          if (bestState == null || bestState.score() < newState.score()) {\n             bestState = newState;\n           }\n           beam.add(newState);", "sourceBeforeFix": "newState.score()", "sourceAfterFix": "bestState.score()"}
{"fixCommitSHA1": "04a010c8499fbc96b1e5a99bdbebaf0b38d24586", "projectName": "libgdx.libgdx", "bugType": "Change Binary Operator", "problem": " \tpublic void addAll (int[] array, int offset, int length) {\r\n \t\tint[] items = this.items;\r\n \t\tint sizeNeeded = size + length;\r\n\t\tif (sizeNeeded >= items.length) items = resize(Math.max(8, (int)(sizeNeeded * 1.75f)));\r\n \t\tSystem.arraycopy(array, offset, items, size, length);\r\n \t\tsize += length;\r\n \t}\r", "fixed": " \tpublic void addAll (int[] array, int offset, int length) {\r\n \t\tint[] items = this.items;\r\n \t\tint sizeNeeded = size + length;\r\n\t\tif (sizeNeeded > items.length) items = resize(Math.max(8, (int)(sizeNeeded * 1.75f)));\r\n \t\tSystem.arraycopy(array, offset, items, size, length);\r\n \t\tsize += length;\r\n \t}\r", "sourceBeforeFix": "sizeNeeded >= items.length", "sourceAfterFix": "sizeNeeded > items.length"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fc78d3384d12c17b4a4234a1d8f1568bf4dd3bc4", "projectName": "swagger-api.swagger-core", "bugType": "Wrong Function Name", "problem": "                 if (setter != null) {\n                     if (paramType == null) {\n                        paramType = setter.getRawParameterTypes() != null ? setter.getRawParameterTypes()[0] : null;\n                     }\n                     for (final Annotation fieldAnnotation : setter.annotations()) {", "fixed": "                 if (setter != null) {\n                     if (paramType == null) {\n                        paramType = setter.getParameterType(0); \n                     }\n                     for (final Annotation fieldAnnotation : setter.annotations()) {", "sourceBeforeFix": "getter.getRawReturnType()", "sourceAfterFix": "getter.getType()"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface RedisEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedRedisEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface RedisEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedRedisEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface BeanstalkEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedBeanstalkEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface BeanstalkEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedBeanstalkEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": " };\n   \n  private final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler", "fixed": " };\n   \n  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "5e1423f749d6b030e153083e8667b43b11e43a7f", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         assertTrue(repo.contains(\"e.txt\"));\n         resetMocks();\n        notify = new NotifyBuilder(context).whenDone(4).create();\n         getMockEndpoint(\"mock:result\").expectedMessageCount(2);", "fixed": "         assertTrue(repo.contains(\"e.txt\"));\n         resetMocks();\n        notify = new NotifyBuilder(context).whenDone(2).create();\n         getMockEndpoint(\"mock:result\").expectedMessageCount(2);", "sourceBeforeFix": "new NotifyBuilder(context).whenDone(4)", "sourceAfterFix": "new NotifyBuilder(context).whenDone(2)"}
{"fixCommitSHA1": "2921e7bf0d74a65fdcc71d3ce3053037d14e4d44", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "     protected void handleQOffer(String[] args) {\n         long timeout = 0;\n         if (args.length > 2) {\n            timeout = Long.valueOf(args[2]);\n         }\n         try {\n             boolean offered = getQueue().offer(args[1], timeout, TimeUnit.SECONDS);", "fixed": "     protected void handleQOffer(String[] args) {\n         long timeout = 0;\n         if (args.length > 2) {\n            timeout = Long.parseLong(args[2]);\n         }\n         try {\n             boolean offered = getQueue().offer(args[1], timeout, TimeUnit.SECONDS);", "sourceBeforeFix": "Long.valueOf(args[2])", "sourceAfterFix": "Long.parseLong(args[2])"}
{"fixCommitSHA1": "53694f29adf8c68992e1b966c86380219f438c14", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         String uri = getScpUri() + \"?username=admin&password=admin&knownHostsFile=\" + getKnownHostsFile();\n         template.sendBodyAndHeader(uri, \"Hello World\", Exchange.FILE_NAME, \"hello.txt\");\n        Thread.sleep(100);\n         File file = new File(getScpPath() + \"/hello.txt\");\n         assertFileExists(file.getAbsolutePath());", "fixed": "         String uri = getScpUri() + \"?username=admin&password=admin&knownHostsFile=\" + getKnownHostsFile();\n         template.sendBodyAndHeader(uri, \"Hello World\", Exchange.FILE_NAME, \"hello.txt\");\n        Thread.sleep(200);\n         File file = new File(getScpPath() + \"/hello.txt\");\n         assertFileExists(file.getAbsolutePath());", "sourceBeforeFix": "Thread.sleep(100)", "sourceAfterFix": "Thread.sleep(200)"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * @return True, if all normalized key comparisons should invert the sign of the comparison result,\n \t *         false if the normalized key should be used as is.\n \t */\n\tpublic boolean invertNormalizedKey();", "fixed": " \t * @return True, if all normalized key comparisons should invert the sign of the comparison result,\n \t *         false if the normalized key should be used as is.\n \t */\n\tpublic abstract boolean invertNormalizedKey();", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "84d6e4785ecad972742bb1bb869cfc3a5efa731d", "projectName": "cucumber.cucumber-jvm", "bugType": "Change Modifier", "problem": "         Executable testMethod = injectorSourceFactory::create;\n         InjectorSourceInstantiationFailed actualThrown = assertThrows(InjectorSourceInstantiationFailed.class, testMethod);\n         assertAll(\"Checking Exception including cause\",\n            () -> assertThat(\"Unexpected exception message\", actualThrown.getMessage(), is(equalTo(\"Instantiation of 'java.lang.String' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a   zero args constructor.\"))),\n             () -> assertThat(\"Unexpected exception cause class\", actualThrown.getCause(), isA(ClassCastException.class))\n         );\n     }", "fixed": "         Executable testMethod = injectorSourceFactory::create;\n         InjectorSourceInstantiationFailed actualThrown = assertThrows(InjectorSourceInstantiationFailed.class, testMethod);\n         assertAll(\"Checking Exception including cause\",\n            () -> assertThat(\"Unexpected exception message\", actualThrown.getMessage(), is(equalTo(\"Instantiation of 'java.lang.String' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a public zero args constructor.\"))),\n             () -> assertThat(\"Unexpected exception cause class\", actualThrown.getCause(), isA(ClassCastException.class))\n         );\n     }", "sourceBeforeFix": "0", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15860, value = \"No deployment with name %s found\")\n     String noDeploymentContentWithName(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10860, value = \"No deployment with name %s found\")\n     String noDeploymentContentWithName(String name);\n     /**", "sourceBeforeFix": "id=15847", "sourceAfterFix": "id=10847"}
{"fixCommitSHA1": "427bea8bae3af37769a58f579767d54cb7af415a", "projectName": "alibaba.druid", "bugType": "Wrong Function Name", "problem": "                     mbeanServer.registerMBean(instance, objectName);\r\n                 }\r\n             } catch (Exception ex) {\r\n                getLog().error(\"register druid-driver mbean error\", ex);\r\n             }\r\n             return true;\r", "fixed": "                     mbeanServer.registerMBean(instance, objectName);\r\n                 }\r\n             } catch (Exception ex) {\r\n                getLog().warn(\"register druid-driver mbean error\", ex);\r\n             }\r\n             return true;\r", "sourceBeforeFix": "getLog().error(\"register druid-driver mbean error\",ex)", "sourceAfterFix": "getLog().warn(\"register druid-driver mbean error\",ex)"}
{"fixCommitSHA1": "36861f2d8c45c809ce7d13944320bb144dbc6757", "projectName": "libgdx.libgdx", "bugType": "Change Operand ", "problem": " \t\tif (tiled != null) return tiled;\r\n \t\tDrawable drawable = optional(name, Drawable.class);\r\n\t\tif (tiled != null) {\r\n \t\t\tif (!(drawable instanceof TiledDrawable)) {\r\n \t\t\t\tthrow new GdxRuntimeException(\"Drawable found but is not a TiledDrawable: \" + name + \", \"\r\n \t\t\t\t\t+ drawable.getClass().getName());\r\n \t\t\t}\r\n\t\t\treturn tiled;\r\n \t\t}\r\n \t\ttiled = new TiledDrawable(getRegion(name));\r", "fixed": " \t\tif (tiled != null) return tiled;\r\n \t\tDrawable drawable = optional(name, Drawable.class);\r\n\t\tif (drawable != null) {\r\n \t\t\tif (!(drawable instanceof TiledDrawable)) {\r\n \t\t\t\tthrow new GdxRuntimeException(\"Drawable found but is not a TiledDrawable: \" + name + \", \"\r\n \t\t\t\t\t+ drawable.getClass().getName());\r\n \t\t\t}\r\n\t\t\treturn (TiledDrawable)drawable;\r\n \t\t}\r\n \t\ttiled = new TiledDrawable(getRegion(name));\r", "sourceBeforeFix": "tiled != null", "sourceAfterFix": "drawable != null"}
{"fixCommitSHA1": "41d67a3d7b3c2cc86be1792d79083f0d56981d2f", "projectName": "swagger-api.swagger-core", "bugType": "Wrong Function Name", "problem": "                     apiParam = new ApiImplicitParamWrapper((ApiImplicitParam) item);\n                 } else if (\"javax.ws.rs.DefaultValue\".equals(item.annotationType().getName())) {\n                     try {\n                        rsDefault = (String) item.getClass().getMethod(\"value\").invoke(item);\n                     } catch (Exception ex) {\n                         LOGGER.error(\"Invocation of value method failed\", ex);\n                     }", "fixed": "                     apiParam = new ApiImplicitParamWrapper((ApiImplicitParam) item);\n                 } else if (\"javax.ws.rs.DefaultValue\".equals(item.annotationType().getName())) {\n                     try {\n                        rsDefault = (String) item.annotationType().getMethod(\"value\").invoke(item);\n                     } catch (Exception ex) {\n                         LOGGER.error(\"Invocation of value method failed\", ex);\n                     }", "sourceBeforeFix": "item.getClass()", "sourceAfterFix": "item.annotationType()"}
{"fixCommitSHA1": "bafb1f877934f826d5f74f9f33e824dd1aa30432", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "         return getOutputFactory().createXMLEventWriter(result);\n     }\n    @Converter\n     public XMLStreamWriter createXMLStreamWriter(OutputStream outputStream) throws XMLStreamException {\n         return getOutputFactory().createXMLStreamWriter(outputStream);\n     }", "fixed": "         return getOutputFactory().createXMLEventWriter(result);\n     }\n    @Deprecated\n     public XMLStreamWriter createXMLStreamWriter(OutputStream outputStream) throws XMLStreamException {\n         return getOutputFactory().createXMLStreamWriter(outputStream);\n     }", "sourceBeforeFix": "@Converter", "sourceAfterFix": "@Deprecated"}
{"fixCommitSHA1": "df43a7a353d1f56e6996170bd74f7a6267eb2bb8", "projectName": "libgdx.libgdx", "bugType": "Same Function More Args", "problem": " \t\n \tpublic Container<T> prefSize (float width, float height) {\n\t\tprefSize(new Fixed(width));\n \t\treturn this;\n \t}", "fixed": " \t\n \tpublic Container<T> prefSize (float width, float height) {\n\t\tprefSize(new Fixed(width), new Fixed(height));\n \t\treturn this;\n \t}", "sourceBeforeFix": "maxSize(new Fixed(width))", "sourceAfterFix": "maxSize(new Fixed(width),new Fixed(height))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "fixed": "   }\n   \n  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleAlternativesWithCommonLabel_4() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(561);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "fixed": " \tpublic void testMultipleAlternativesWithCommonLabel_4() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(560);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "sourceBeforeFix": "new StringBuilder(561)", "sourceAfterFix": "new StringBuilder(560)"}
{"fixCommitSHA1": "8b59afeaaa4458b6d21d88b2edc0d22ed04d9798", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "         getMockEndpoint(\"mock:error\").expectedMessageCount(2);\n        resultEndpoint.expectedBodiesReceived(\"one\", \"three\");\n         sendMessage(\"1\", \"one\");\n         sendMessage(\"2\", \"two\");", "fixed": "         getMockEndpoint(\"mock:error\").expectedMessageCount(2);\n        resultEndpoint.expectedBodiesReceivedInAnyOrder(\"one\", \"three\");\n         sendMessage(\"1\", \"one\");\n         sendMessage(\"2\", \"two\");", "sourceBeforeFix": "resultEndpoint.expectedBodiesReceived(\"one\",\"two\",\"three\")", "sourceAfterFix": "resultEndpoint.expectedBodiesReceivedInAnyOrder(\"one\",\"two\",\"three\")"}
{"fixCommitSHA1": "51271a02806489a2e2b5539475eb2131fd29b77d", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "           MapDifference<String, PropertyAccessKind> sourceDifference =\n               Maps.difference(\n                   compiler.getSourceGetterAndSetterProperties(),\n                  GatherGettersAndSetterProperties.gather(compiler, mainRoot));\n           assertWithMessage(\"Pass did not update new source getters / setters\")\n               .that(sourceDifference.entriesOnlyOnRight())\n               .isEmpty();", "fixed": "           MapDifference<String, PropertyAccessKind> sourceDifference =\n               Maps.difference(\n                   compiler.getSourceGetterAndSetterProperties(),\n                  GatherGetterAndSetterProperties.gather(compiler, mainRoot));\n           assertWithMessage(\"Pass did not update new source getters / setters\")\n               .that(sourceDifference.entriesOnlyOnRight())\n               .isEmpty();", "sourceBeforeFix": "GatherGettersAndSetterProperties.update(compiler,externsRoot,mainRoot)", "sourceAfterFix": "GatherGetterAndSetterProperties.update(compiler,externsRoot,mainRoot)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface WordpressEndpointBuilder\n             extends\n                 WordpressEndpointConsumerBuilder, WordpressEndpointProducerBuilder {\n         default AdvancedWordpressEndpointBuilder advanced() {", "fixed": "     \n    public interface WordpressEndpointBuilder\n             extends\n                 WordpressEndpointConsumerBuilder, WordpressEndpointProducerBuilder {\n         default AdvancedWordpressEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "f4764e5d440eb811cf9b5a54717615abaa99ed7d", "projectName": "swagger-api.swagger-core", "bugType": "More Specific If", "problem": "         if (ObjectProperty.isType(type) || node.get(\"properties\") != null) {\n             detailNode = node.get(\"additionalProperties\");\n            if (detailNode != null) {\n                 Property items = propertyFromNode(detailNode);\n                 if (items != null) {\n                     MapProperty mapProperty = new MapProperty(items).description(description);", "fixed": "         if (ObjectProperty.isType(type) || node.get(\"properties\") != null) {\n             detailNode = node.get(\"additionalProperties\");\n            if (detailNode != null && detailNode.getNodeType().equals(JsonNodeType.OBJECT)) {\n                 Property items = propertyFromNode(detailNode);\n                 if (items != null) {\n                     MapProperty mapProperty = new MapProperty(items).description(description);", "sourceBeforeFix": "detailNode != null", "sourceAfterFix": "detailNode != null && detailNode.getNodeType().equals(JsonNodeType.OBJECT)"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "             }\n         }\n         if (isStatisticsEnabled()) {\n            statistics.addGetTimeNano(System.nanoTime() - start);\n         }\n         CacheEntryProcessorEntry entry = new CacheEntryProcessorEntry(key, record, this, now);\n         final Object process = entryProcessor.process(entry, arguments);", "fixed": "             }\n         }\n         if (isStatisticsEnabled()) {\n            statistics.addGetTimeNanos(System.nanoTime() - start);\n         }\n         CacheEntryProcessorEntry entry = new CacheEntryProcessorEntry(key, record, this, now);\n         final Object process = entryProcessor.process(entry, arguments);", "sourceBeforeFix": "statistics.addPutTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addPutTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  private final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": " };\n   \n  private final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler", "fixed": " };\n   \n  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsText(String path, int batchSize) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), batchSize, null);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsText(String path, int batchSize) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), batchSize, null);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface SqsEndpointBuilder\n             extends\n                 SqsEndpointConsumerBuilder, SqsEndpointProducerBuilder {\n         default AdvancedSqsEndpointBuilder advanced() {", "fixed": "     \n    public interface SqsEndpointBuilder\n             extends\n                 SqsEndpointConsumerBuilder, SqsEndpointProducerBuilder {\n         default AdvancedSqsEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "a6c394118fad3819a98baf4142fb59f6db3735f0", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "         for (String type : types) {\n            Class<?> clazz = classResolver.resolveClass(type);\n             appendModels(clazz, swagger);\n         }", "fixed": "         for (String type : types) {\n            Class<?> clazz = classResolver.resolveMandatoryClass(type);\n             appendModels(clazz, swagger);\n         }", "sourceBeforeFix": "classResolver.resolveClass(type)", "sourceAfterFix": "classResolver.resolveMandatoryClass(type)"}
{"fixCommitSHA1": "35e2253c8ceb7dc8f9d0d97355491fdf0b34db89", "projectName": "JakeWharton.ActionBarSherlock", "bugType": "Change Numeric Literal", "problem": "         try {\n             ((TextView) getView()).setText(s);\n         } catch (ClassCastException e) {\n            Log.e(IcsToast.TAG, \"This Toast was not created with IcsToast.makeText\", e);\n         }\n     }\n }", "fixed": "         try {\n             ((TextView) getView()).setText(s);\n         } catch (ClassCastException e) {\n            Log.e(TAG, \"This Toast was not created with IcsToast.makeText\", e);\n         }\n     }\n }", "sourceBeforeFix": "view.setTextColor(0xFFDADADA)", "sourceAfterFix": "view.setTextColor(0xffffffff)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   }\n   \n  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15862, value = \"Invalid '%s' value: %d, the maximum index is %d\")\n     String invalidValue(String name, int value, int maxIndex);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10862, value = \"Invalid '%s' value: %d, the maximum index is %d\")\n     String invalidValue(String name, int value, int maxIndex);\n     /**", "sourceBeforeFix": "id=15832", "sourceAfterFix": "id=10832"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  private final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should execute sql containing group by\n \t */\n \t@Authorized(PrivilegeConstants.SQL_LEVEL_ACCESS)\n\tpublic List<List<Object>> executeSQL(String sql, boolean selectOnly) throws APIException;\n \t/**\n \t * Get the implementation id stored for this server Returns null if no implementation id has", "fixed": " \t * @should execute sql containing group by\n \t */\n \t@Authorized(PrivilegeConstants.SQL_LEVEL_ACCESS)\n\tpublic List<List<Object>> executeSQL(String sql, boolean selectOnly);\n \t/**\n \t * Get the implementation id stored for this server Returns null if no implementation id has", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface LinkedInEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedLinkedInEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface LinkedInEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedLinkedInEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "af87fe0e2580cafb6b563688f119b3d40ae100f2", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "     @Before\n     public void setUpAdminObjects() throws NamingException {\n         server1Proxy = lookupAdminObject(TestSuiteEnvironment.getServerAddress(), \"8280\");\n        server2Proxy = lookupAdminObject(TestSuiteEnvironment.getServerAddress(), \"8380\");\n         Assert.assertNotNull(server1Proxy);\n         Assert.assertNotNull(server2Proxy);\n     }", "fixed": "     @Before\n     public void setUpAdminObjects() throws NamingException {\n         server1Proxy = lookupAdminObject(TestSuiteEnvironment.getServerAddress(), \"8280\");\n        server2Proxy = lookupAdminObject(TestSuiteEnvironment.getServerAddressNode1(), \"8380\");\n         Assert.assertNotNull(server1Proxy);\n         Assert.assertNotNull(server2Proxy);\n     }", "sourceBeforeFix": "TestSuiteEnvironment.getServerAddress()", "sourceAfterFix": "TestSuiteEnvironment.getServerAddressNode1()"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsCsv(String path, long millis) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, null);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsCsv(String path, long millis) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, null);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "f135cc4188dd173e8fc175bc5d26cf1a970ac39e", "projectName": "wildfly.wildfly", "bugType": "Wrong Function Name", "problem": "                 ModelNode oldResponse = response;\n                 try {\n                     flags = EnumSet.noneOf(Flag.class);\n                    response = step.response;\n                     ModelNode newOperation = operation = step.operation;\n                     modelAddress = PathAddress.pathAddress(newOperation.get(ADDRESS));\n                     step.handler.execute(this, newOperation);", "fixed": "                 ModelNode oldResponse = response;\n                 try {\n                     flags = EnumSet.noneOf(Flag.class);\n                    response = this.response = step.response;\n                     ModelNode newOperation = operation = step.operation;\n                     modelAddress = PathAddress.pathAddress(newOperation.get(ADDRESS));\n                     step.handler.execute(this, newOperation);", "sourceBeforeFix": "response.set(ROLLED_BACK)", "sourceAfterFix": "response.get(ROLLED_BACK)"}
{"fixCommitSHA1": "f9c863f126519ad2cfd7af4cef3eed04e8f87ea3", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"processKey\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;F)Ljava/lang/String;\");\n         } else if (propertyClass == double.class) {\n            mw.visitVarInsn(DLOAD, context.var(\"double\"));\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"processKey\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;D)Ljava/lang/String;\");\n         } else if (propertyClass == boolean.class) {", "fixed": "             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"processKey\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;F)Ljava/lang/String;\");\n         } else if (propertyClass == double.class) {\n            mw.visitVarInsn(DLOAD, context.var(\"double\", 2));\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"processKey\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;D)Ljava/lang/String;\");\n         } else if (propertyClass == boolean.class) {", "sourceBeforeFix": "context.var(\"double\")", "sourceAfterFix": "context.var(\"double\",2)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetsOfMe() throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweets_of_me.json\",\n                 null, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetsOfMe() throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweets_of_me.json\",\n                 null, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweets_of_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweets_of_me.json\",null,true))"}
{"fixCommitSHA1": "fceec74c60a1d72c1582f9d8871cbe1a0eb37fcf", "projectName": "hazelcast.hazelcast", "bugType": "Change Operand ", "problem": "     }\n     public ILock getLock(Object key) {\n        if (name == null) {\n             throw new NullPointerException(\"Retrieving a lock instance with a null key is not allowed!\");\n         }\n         return getDistributedObject(LockService.SERVICE_NAME, node.getSerializationService().toData(key));", "fixed": "     }\n     public ILock getLock(Object key) {\n        if (key == null) {\n             throw new NullPointerException(\"Retrieving a lock instance with a null key is not allowed!\");\n         }\n         return getDistributedObject(LockService.SERVICE_NAME, node.getSerializationService().toData(key));", "sourceBeforeFix": "name == null", "sourceAfterFix": "key == null"}
{"fixCommitSHA1": "d4468b05034b3c4166195394e88eed6633bec842", "projectName": "jersey.jersey", "bugType": "Change Caller in Function Call", "problem": "                         warnings.append(LocalizationMessages.WARNING_MSG(error.getMessage())).append('\\n');\n                         break;\n                     case HINT:\n                        warnings.append(LocalizationMessages.HINT_MSG(error.getMessage())).append('\\n');\n                         break;\n                 }\n             }", "fixed": "                         warnings.append(LocalizationMessages.WARNING_MSG(error.getMessage())).append('\\n');\n                         break;\n                     case HINT:\n                        hints.append(LocalizationMessages.HINT_MSG(error.getMessage())).append('\\n');\n                         break;\n                 }\n             }", "sourceBeforeFix": "warnings.append(LocalizationMessages.HINT_MSG(error.getMessage()))", "sourceAfterFix": "hints.append(LocalizationMessages.HINT_MSG(error.getMessage()))"}
{"fixCommitSHA1": "ecc84d22052f8489477bd263eeaa361c0d14f7f5", "projectName": "libgdx.libgdx", "bugType": "Change Operand ", "problem": " \t\tppiX = ppi;\n \t\tppiY = ppi;\n \t\tppcX = ppiX / 2.54f;\n\t\tppcY = ppcY / 2.54f;\n \t\tapp.debug(tag, \"Display: ppi=\" + ppi + \", density=\" + density);", "fixed": " \t\tppiX = ppi;\n \t\tppiY = ppi;\n \t\tppcX = ppiX / 2.54f;\n\t\tppcY = ppiY / 2.54f;\n \t\tapp.debug(tag, \"Display: ppi=\" + ppi + \", density=\" + density);", "sourceBeforeFix": "ppcY / 2.54f", "sourceAfterFix": "ppiY / 2.54f"}
{"fixCommitSHA1": "9bcf32ab62047ea4913d9cde9f9e73e7acbfcda6", "projectName": "Graylog2.graylog2-server", "bugType": "Change Numeric Literal", "problem": "         assertEquals(usedTimestamp, (Double) lm.getField(\"timestamp\"), 1e-8);\n         assertEquals(\"\u00fc\", lm.getField(\"_lol_utf8\"));\n         assertEquals(\"bar\", lm.getField(\"_foo\"));\n        assertEquals(13, lm.getFields().size());\n     }\n     @Test", "fixed": "         assertEquals(usedTimestamp, (Double) lm.getField(\"timestamp\"), 1e-8);\n         assertEquals(\"\u00fc\", lm.getField(\"_lol_utf8\"));\n         assertEquals(\"bar\", lm.getField(\"_foo\"));\n        assertEquals(11, lm.getFields().size());\n     }\n     @Test", "sourceBeforeFix": "assertEquals(8,lm.getFields().size())", "sourceAfterFix": "assertEquals(5,lm.getFields().size())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "      * Builder for endpoint for the Kubernetes Persistent Volume Claim\n      * component.\n      */\n    public static interface KubernetesPersistentVolumesClaimsEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedKubernetesPersistentVolumesClaimsEndpointBuilder advanced() {", "fixed": "      * Builder for endpoint for the Kubernetes Persistent Volume Claim\n      * component.\n      */\n    public interface KubernetesPersistentVolumesClaimsEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedKubernetesPersistentVolumesClaimsEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   }\n   \n  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "b16ab7c7615dbf555ee60f5bac09821d1886e136", "projectName": "facebook.presto", "bugType": "Change Numeric Literal", "problem": "         subgroup.setMaxQueuedQueries(4);\n         subgroup.setMaxRunningQueries(3);\n        MockQueryExecution query1 = new MockQueryExecution(1);\n         subgroup.run(query1);\n         root.processQueuedQueries();", "fixed": "         subgroup.setMaxQueuedQueries(4);\n         subgroup.setMaxRunningQueries(3);\n        MockQueryExecution query1 = new MockQueryExecution(2);\n         subgroup.run(query1);\n         root.processQueuedQueries();", "sourceBeforeFix": "new MockQueryExecution(1)", "sourceAfterFix": "new MockQueryExecution(2)"}
{"fixCommitSHA1": "615135aaa2ec18ea6c0b4785749079df4db5fd7a", "projectName": "joelittlejohn.jsonschema2pojo", "bugType": "Wrong Function Name", "problem": "         });\n         assertThat(args.didExit(), is(false));\n        assertThat(args.getSource().next().getFile(), is(\"/home/source\"));\n         assertThat(args.getTargetDirectory(), is(theFile(\"/home/target\")));\n         assertThat(args.getTargetPackage(), is(\"mypackage\"));\n         assertThat(args.isGenerateBuilders(), is(true));", "fixed": "         });\n         assertThat(args.didExit(), is(false));\n        assertThat(args.getSource().next().getFile(), endsWith(\"/home/source\"));\n         assertThat(args.getTargetDirectory(), is(theFile(\"/home/target\")));\n         assertThat(args.getTargetPackage(), is(\"mypackage\"));\n         assertThat(args.isGenerateBuilders(), is(true));", "sourceBeforeFix": "is(\"/home/source\")", "sourceAfterFix": "endsWith(\"/home/source\")"}
{"fixCommitSHA1": "1ab08ad4abff024bdd3fbeb6f08a1a4a61c49b65", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": " @PrepareForTest({ ConfigurationLoader.class, ConfigurationLoaderTest.class })\n public class ConfigurationLoaderTest {\n    private Configuration loadConfiguration(String name)\n         throws CheckstyleException {\n         return loadConfiguration(name, new Properties());\n     }\n    private Configuration loadConfiguration(\n         String name, Properties props) throws CheckstyleException {\n         final String fName =\n             \"src/test/resources/com/puppycrawl/tools/checkstyle/configs/\" + name;", "fixed": " @PrepareForTest({ ConfigurationLoader.class, ConfigurationLoaderTest.class })\n public class ConfigurationLoaderTest {\n    private static Configuration loadConfiguration(String name)\n         throws CheckstyleException {\n         return loadConfiguration(name, new Properties());\n     }\n    private static Configuration loadConfiguration(\n         String name, Properties props) throws CheckstyleException {\n         final String fName =\n             \"src/test/resources/com/puppycrawl/tools/checkstyle/configs/\" + name;", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "3dddcc4cdf4a74ddbd4607c6aaee5bdd8ac46c27", "projectName": "gephi.gephi", "bugType": "Change Modifier", "problem": "     }\n     @Override\n    public boolean updateWorld() {\n         boolean repositioned = octree.repositionNodes();\n         boolean updated = dataBridge.updateWorld();", "fixed": "     }\n     @Override\n    public synchronized boolean updateWorld() {\n         boolean repositioned = octree.repositionNodes();\n         boolean updated = dataBridge.updateWorld();", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "6d0b8df8802f95880b33ad6823598b01175e97f6", "projectName": "apache.hadoop", "bugType": "Change Boolean Literal", "problem": "   \n   public static void format(Configuration conf) throws IOException {\n    format(conf, false);\n   }\n   static NameNodeMetrics metrics;", "fixed": "   \n   public static void format(Configuration conf) throws IOException {\n    format(conf, true);\n   }\n   static NameNodeMetrics metrics;", "sourceBeforeFix": "format(conf,true)", "sourceAfterFix": "format(conf,false)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<DirectMessage> getDirectMessages(Paging paging) throws TwitterException {\n        return DirectMessage.constructDirectMessages(get(getBaseURL()\n                 + \"direct_messages.json\", null, paging.asPostParameterList(), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<DirectMessage> getDirectMessages(Paging paging) throws TwitterException {\n        return DirectMessage.createDirectMessageList(get(getBaseURL()\n                 + \"direct_messages.json\", null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites/\" + id+ \".json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites/\" + id+ \".json\",new PostParameter[0],true))"}
{"fixCommitSHA1": "af07edf1ab9024a78cb280e85982b1d6661a09ad", "projectName": "apache.hadoop", "bugType": "Change Modifier", "problem": "    * \n    * @param queueName Name of the job queue.\n    */\n  protected void setQueueName(String queueName) {\n     super.setQueueName(queueName);\n   }", "fixed": "    * \n    * @param queueName Name of the job queue.\n    */\n  @InterfaceAudience.Private\n  public void setQueueName(String queueName) {\n     super.setQueueName(queueName);\n   }", "sourceBeforeFix": "0", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedBrowseEndpointBuilder\n             extends\n                 AdvancedBrowseEndpointConsumerBuilder, AdvancedBrowseEndpointProducerBuilder {\n         default BrowseEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedBrowseEndpointBuilder\n             extends\n                 AdvancedBrowseEndpointConsumerBuilder, AdvancedBrowseEndpointProducerBuilder {\n         default BrowseEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "034b27c5e809b6f84f58d3ca0bb6b74de4452d83", "projectName": "neo4j.neo4j", "bugType": "Same Function More Args", "problem": "     private String config( TargetDirectory target, int id, int port )\n     {\n         File config = target.file( \"zookeeper\" + id + \".cfg\" );\n        File dataDir = target.directory( \"zk\" + id + \"data\" );\n         try\n         {\n             PrintWriter conf = new PrintWriter( config );", "fixed": "     private String config( TargetDirectory target, int id, int port )\n     {\n         File config = target.file( \"zookeeper\" + id + \".cfg\" );\n        File dataDir = target.directory( \"zk\" + id + \"data\", true );\n         try\n         {\n             PrintWriter conf = new PrintWriter( config );", "sourceBeforeFix": "target.directory(\"zk\" + id + \"data\")", "sourceAfterFix": "target.directory(\"zk\" + id + \"data\",true)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "0f8c0e4ff5f80aab6ab653c9aaa5a97812d2ec7c", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "     private static final Logger logger = Logger.getLogger(TransactedTopicMessageSender.class);\n    @Resource(name = \"java:/topic/myAwesomeTopic\")\n     private Topic topic;\n    @Resource(name = \"java:/ConnectionFactory\")\n     private ConnectionFactory factory;\n     @Resource", "fixed": "     private static final Logger logger = Logger.getLogger(TransactedTopicMessageSender.class);\n    @Resource(lookup = \"java:/topic/myAwesomeTopic\")\n     private Topic topic;\n    @Resource(lookup = \"java:/ConnectionFactory\")\n     private ConnectionFactory factory;\n     @Resource", "sourceBeforeFix": "name=\"java:/ConnectionFactory\"", "sourceAfterFix": "lookup=\"java:/ConnectionFactory\""}
{"fixCommitSHA1": "85d8d2fce8253c065ccaa9b02d8a30a58bbea67b", "projectName": "swagger-api.swagger-core", "bugType": "Change Identifier Used", "problem": "                 if (field != null) {\n                    paramType = field.getRawType();\n                     for (final Annotation fieldAnnotation : field.annotations()) {\n                         if (!paramAnnotations.contains(fieldAnnotation)) {", "fixed": "                 if (field != null) {\n                \tparamType = field.getType();\n                     for (final Annotation fieldAnnotation : field.annotations()) {\n                         if (!paramAnnotations.contains(fieldAnnotation)) {", "sourceBeforeFix": "getter.getRawReturnType()", "sourceAfterFix": "getter.getType()"}
{"fixCommitSHA1": "40e6bbe55f7141bd66a52261e108a1f3b575ca6f", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "                 obj = null;\n                 removed = false;\n                 if (isEventsEnabled()) {\n                    publishEvent(createCacheCompleteEvent(key, CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                           origin, completionId));\n                 }\n             } else {", "fixed": "                 obj = null;\n                 removed = false;\n                 if (isEventsEnabled()) {\n                    publishEvent(createCacheCompleteEvent(toEventData(key), CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                           origin, completionId));\n                 }\n             } else {", "sourceBeforeFix": "toHeapData(key)", "sourceAfterFix": "toEventData(key)"}
{"fixCommitSHA1": "9de2d1f83961a6ede9fa5bdf249c41253116374c", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \tprivate void registerWebTestClient(ConfigurableApplicationContext context) {\n \t\tConfigurableListableBeanFactory beanFactory = context.getBeanFactory();\n \t\tif (beanFactory instanceof BeanDefinitionRegistry) {\n\t\t\tregisterWebTestClient((BeanDefinitionRegistry) context);\n \t\t}\n \t}", "fixed": " \tprivate void registerWebTestClient(ConfigurableApplicationContext context) {\n \t\tConfigurableListableBeanFactory beanFactory = context.getBeanFactory();\n \t\tif (beanFactory instanceof BeanDefinitionRegistry) {\n\t\t\tregisterWebTestClient((BeanDefinitionRegistry) beanFactory);\n \t\t}\n \t}", "sourceBeforeFix": "(BeanDefinitionRegistry)context", "sourceAfterFix": "(BeanDefinitionRegistry)beanFactory"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface PulsarEndpointBuilder\n             extends\n                 PulsarEndpointConsumerBuilder, PulsarEndpointProducerBuilder {\n         default AdvancedPulsarEndpointBuilder advanced() {", "fixed": "     \n    public interface PulsarEndpointBuilder\n             extends\n                 PulsarEndpointConsumerBuilder, PulsarEndpointProducerBuilder {\n         default AdvancedPulsarEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "39fe5a830bb4e05a85bef3e52115c708f9409abf", "projectName": "wildfly.wildfly", "bugType": "Wrong Function Name", "problem": "     @Before\n     public void setUpAdminObjects() throws NamingException {\n         server1Proxy = lookupAdminObject(TestSuiteEnvironment.getServerAddress(), \"8280\");\n        server2Proxy = lookupAdminObject(TestSuiteEnvironment.getServerAddress(), \"8380\");\n         Assert.assertNotNull(server1Proxy);\n         Assert.assertNotNull(server2Proxy);\n     }", "fixed": "     @Before\n     public void setUpAdminObjects() throws NamingException {\n         server1Proxy = lookupAdminObject(TestSuiteEnvironment.getServerAddress(), \"8280\");\n        server2Proxy = lookupAdminObject(TestSuiteEnvironment.getServerAddressNode1(), \"8380\");\n         Assert.assertNotNull(server1Proxy);\n         Assert.assertNotNull(server2Proxy);\n     }", "sourceBeforeFix": "TestSuiteEnvironment.getServerAddress()", "sourceAfterFix": "TestSuiteEnvironment.getServerAddressNode1()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15863, value = \"%s is not a valid URL -- %s\")\n     String invalidUrl(String url, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10863, value = \"%s is not a valid URL -- %s\")\n     String invalidUrl(String url, String message);\n     /**", "sourceBeforeFix": "id=15849", "sourceAfterFix": "id=10849"}
{"fixCommitSHA1": "ab0eb48e45f11661ce366001c80eb2dcdabc89ac", "projectName": "apache.camel", "bugType": "Less Specific If", "problem": "     }\n     public synchronized ProcessorType getLastInterceptedNode() {\n        if (routeList == null) {\n             return null;\n         }\n         return routeList.get(routeList.size() - 1);", "fixed": "     }\n     public synchronized ProcessorType getLastInterceptedNode() {\n        if (routeList == null || routeList.isEmpty()) {\n             return null;\n         }\n         return routeList.get(routeList.size() - 1);", "sourceBeforeFix": "routeList == null", "sourceAfterFix": "routeList == null || routeList.isEmpty()"}
{"fixCommitSHA1": "ea13a9c821a275561e56c45d5f0b90479904508d", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "             if (record == null || isExpired) {\n                 removed = false;\n                 if (isEventsEnabled()) {\n                    publishEvent(createCacheCompleteEvent(key, CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                           origin, completionId));\n                 }\n             } else {", "fixed": "             if (record == null || isExpired) {\n                 removed = false;\n                 if (isEventsEnabled()) {\n                    publishEvent(createCacheCompleteEvent(toEventData(key), CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                           origin, completionId));\n                 }\n             } else {", "sourceBeforeFix": "toHeapData(key)", "sourceAfterFix": "toEventData(key)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<Status> getHomeTimeline(Paging paging) throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/home_timeline.json\", null, paging.asPostParameterList(), true));\n     }\n     /**", "fixed": "      */\n     public ResponseList<Status> getHomeTimeline(Paging paging) throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/home_timeline.json\", null, paging.asPostParameterList(), true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweets/\" + statusId+ \".json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweets/\" + statusId+ \".json\",true))"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 15832, value = \"There is already a registered host named '%s'\")\n     String slaveAlreadyRegistered(String slaveName);\n     /**", "fixed": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 10832, value = \"There is already a registered host named '%s'\")\n     String slaveAlreadyRegistered(String slaveName);\n     /**", "sourceBeforeFix": "id=15872", "sourceAfterFix": "id=10872"}
{"fixCommitSHA1": "ea98386dfd18da047c877a2320cfdcf15df2ea06", "projectName": "facebook.presto", "bugType": "Change Modifier", "problem": "                 .retInt();\n     }\n    private void generatePositionEqualsPositionMethod(\n             ClassDefinition classDefinition,\n             CallSiteBinder callSiteBinder,\n             List<Type> joinChannelTypes,", "fixed": "                 .retInt();\n     }\n    private static void generatePositionEqualsPositionMethod(\n             ClassDefinition classDefinition,\n             CallSiteBinder callSiteBinder,\n             List<Type> joinChannelTypes,", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15850, value = \"No handler for operation %s at address %s\")\n     String noHandlerForOperation(String operationName, PathAddress address);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10850, value = \"No handler for operation %s at address %s\")\n     String noHandlerForOperation(String operationName, PathAddress address);\n     /**", "sourceBeforeFix": "id=15841", "sourceAfterFix": "id=10841"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "038ea1803bae1cf3be279b36395b4de4e0ff39b5", "projectName": "openhab.openhab", "bugType": "Wrong Function Name", "problem": " \t@Override\n \tpublic void internalReceiveCommand(String itemName, Command command) {\n \t\tsuper.internalReceiveCommand(itemName, command);\n\t\tlogger.debug(\"MyQ binding received command '{}' for item '{}'\",\n \t\t\t\tcommand, itemName);\n \t\tif (myqOnlineData != null) {\n \t\t\tcomputeCommandForItem(command, itemName);", "fixed": " \t@Override\n \tpublic void internalReceiveCommand(String itemName, Command command) {\n \t\tsuper.internalReceiveCommand(itemName, command);\n\t\tlogger.trace(\"MyQ binding received command '{}' for item '{}'\",\n \t\t\t\tcommand, itemName);\n \t\tif (myqOnlineData != null) {\n \t\t\tcomputeCommandForItem(command, itemName);", "sourceBeforeFix": "logger.debug(\"rapidRefreshFutureEnd stopping\")", "sourceAfterFix": "logger.trace(\"rapidRefreshFutureEnd stopping\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "4665dcf9ab41c3c61cd42aad296ebfe518bfa003", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\n \t\tBuffer pixels) {\n\t\tGL.glTexSubImage2DEXT(target, level, xoffset, yoffset, width, height, format, type, pixels, Memory.getPosition(pixels));\n \t}\n \tpublic void glViewport (int x, int y, int width, int height) {", "fixed": " \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\n \t\tBuffer pixels) {\n\t\tGL.glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels, Memory.getPosition(pixels));\n \t}\n \tpublic void glViewport (int x, int y, int width, int height) {", "sourceBeforeFix": "GL.glCopyTexSubImage2DEXT(target,level,xoffset,yoffset,x,y,width,height)", "sourceAfterFix": "GL.glCopyTexSubImage2D(target,level,xoffset,yoffset,x,y,width,height)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     return additionalReplacements;\n   }\n  private final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     return additionalReplacements;\n   }\n  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should fail for an invalid object\n \t * @should throw throw APIException if the input is null\n \t */\n\tpublic void validate(Object object, Errors errors) throws APIException;\n \t/**\n \t * Returns a list of locales used by the user when searching.", "fixed": " \t * @should fail for an invalid object\n \t * @should throw throw APIException if the input is null\n \t */\n\tpublic void validate(Object object, Errors errors);\n \t/**\n \t * Returns a list of locales used by the user when searching.", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "af07edf1ab9024a78cb280e85982b1d6661a09ad", "projectName": "apache.hadoop", "bugType": "Change Modifier", "problem": "    * \n    * @param queueName Name of the job queue.\n    */\n  protected void setQueueName(String queueName) {\n     super.setQueueName(queueName);\n   }", "fixed": "    * \n    * @param queueName Name of the job queue.\n    */\n  @InterfaceAudience.Private\n  public void setQueueName(String queueName) {\n     super.setQueueName(queueName);\n   }", "sourceBeforeFix": "4", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "ccc86e9f1cddebc731ac1ccabdd469df11d72d8b", "projectName": "apache.flink", "bugType": "Change Numeric Literal", "problem": " \t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.createRemoteEnvironment(\"localhost\", flinkPort);\n \t\tenv.enableCheckpointing(500);\n \t\tenv.setParallelism(parallelism);\n\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(3, 0));\n \t\tenv.getConfig().disableSysoutLogging();\n \t\tenv.setBufferTimeout(0);", "fixed": " \t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.createRemoteEnvironment(\"localhost\", flinkPort);\n \t\tenv.enableCheckpointing(500);\n \t\tenv.setParallelism(parallelism);\n\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(1, 0));\n \t\tenv.getConfig().disableSysoutLogging();\n \t\tenv.setBufferTimeout(0);", "sourceBeforeFix": "RestartStrategies.fixedDelayRestart(3,0)", "sourceAfterFix": "RestartStrategies.fixedDelayRestart(1,0)"}
{"fixCommitSHA1": "727dd12852290f48840a8aeac91c37823112bdc7", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t\tif (getSslStoreProvider() != null) {\n \t\t\ttry {\n \t\t\t\tfactory.setKeyStore(getSslStoreProvider().getKeyStore());\n\t\t\t\tfactory.setTrustStore(getSslStoreProvider().getKeyStore());\n \t\t\t}\n \t\t\tcatch (Exception ex) {\n \t\t\t\tthrow new IllegalStateException(\"Unable to set SSL store\", ex);", "fixed": " \t\tif (getSslStoreProvider() != null) {\n \t\t\ttry {\n \t\t\t\tfactory.setKeyStore(getSslStoreProvider().getKeyStore());\n\t\t\t\tfactory.setTrustStore(getSslStoreProvider().getTrustStore());\n \t\t\t}\n \t\t\tcatch (Exception ex) {\n \t\t\t\tthrow new IllegalStateException(\"Unable to set SSL store\", ex);", "sourceBeforeFix": "getSslStoreProvider().getKeyStore()", "sourceAfterFix": "getSslStoreProvider().getTrustStore()"}
{"fixCommitSHA1": "dfb43299a88507211e9acb9a9f21a8ba54f0205a", "projectName": "iluwatar.java-design-patterns", "bugType": "Change Identifier Used", "problem": "    * @param testedPrototype  The tested prototype instance\n* @param expectedToString The expected {@link Prototype\n    */\n  public PrototypeTest(final Prototype testedPrototype, final String expectedToString) {\n     this.expectedToString = expectedToString;\n     this.testedPrototype = testedPrototype;\n   }", "fixed": "    * @param testedPrototype  The tested prototype instance\n* @param expectedToString The expected {@link Prototype\n    */\n  public PrototypeTest(final P testedPrototype, final String expectedToString) {\n     this.expectedToString = expectedToString;\n     this.testedPrototype = testedPrototype;\n   }", "sourceBeforeFix": "final Prototype testedPrototype", "sourceAfterFix": "final P testedPrototype"}
{"fixCommitSHA1": "849b3ba2b1282a89d8cf60a10891ea11a9e16bb4", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Wrong Function Name", "problem": "         Response resp = f.get(3, TimeUnit.SECONDS);\n         assertNotNull(resp);\n         assertEquals(resp.getStatusCode(), HttpServletResponse.SC_OK);\n        assertEquals(resp.getHeader(\"target\"), target);\n         client.close();\n     }", "fixed": "         Response resp = f.get(3, TimeUnit.SECONDS);\n         assertNotNull(resp);\n         assertEquals(resp.getStatusCode(), HttpServletResponse.SC_OK);\n        assertEquals(resp.getHeader(\"target\"), \"/\");\n         client.close();\n     }", "sourceBeforeFix": "r.getUri().toString()", "sourceAfterFix": "r.getUri().getPath()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": " };\n   \n  private final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler", "fixed": " };\n   \n  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8abfa48f2eb5edaf3f5a2cc2350e4e3c232f4152", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "     private class FileDropListener implements FileDrop.Listener {\n         private final JScrollPane scrollPane;\n        public FileDropListener(JScrollPane scrollPane) {\n             this.scrollPane = scrollPane;\n         }", "fixed": "     private class FileDropListener implements FileDrop.Listener {\n         private final JScrollPane scrollPane;\n        FileDropListener(JScrollPane scrollPane) {\n             this.scrollPane = scrollPane;\n         }", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "5d12b156e1150162ba3def263b2da14793304b4e", "projectName": "facebook.presto", "bugType": "Change Identifier Used", "problem": "                 Optional.empty());\n        MaterializedResult expected = MaterializedResult.resultBuilder(taskContext.getSession(), concat(probeTypes, buildPages.getTypes()))\n                 .row(\"a\", \"a\")\n                 .row(\"a\", \"a\")\n                 .row(\"b\", null)", "fixed": "                 Optional.empty());\n        MaterializedResult expected = MaterializedResult.resultBuilder(taskContext.getSession(), concat(probeTypes, buildPages.getTypesWithoutHash()))\n                 .row(\"a\", \"a\")\n                 .row(\"a\", \"a\")\n                 .row(\"b\", null)", "sourceBeforeFix": "buildPages.getTypes()", "sourceAfterFix": "buildPages.getTypesWithoutHash()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15849, value = \"Operation %s for address %s can only be handled by the \" +\n             \"master Domain Controller; this host is not the master Domain Controller\")\n     String masterDomainControllerOnlyOperation(String operation, PathAddress address);", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10849, value = \"Operation %s for address %s can only be handled by the \" +\n             \"master Domain Controller; this host is not the master Domain Controller\")\n     String masterDomainControllerOnlyOperation(String operation, PathAddress address);", "sourceBeforeFix": "id=15843", "sourceAfterFix": "id=10843"}
{"fixCommitSHA1": "82a43727c308f2401468d4306c1ba2b5095f54b5", "projectName": "netty.netty", "bugType": "Change Identifier Used", "problem": "         assertTrue(isBufferCopyNeededForWrite(byteBuf.asReadOnly()));\n         assertTrue(byteBuf.release());\n        assertCompositeByteBufIsBufferCopyNeededForWrite(alloc, 2, 0, false);\n         assertCompositeByteBufIsBufferCopyNeededForWrite(alloc, IOV_MAX + 1, 0, true);\n         assertCompositeByteBufIsBufferCopyNeededForWrite(alloc, 0, 2, true);\n         assertCompositeByteBufIsBufferCopyNeededForWrite(alloc, 1, 1, true);", "fixed": "         assertTrue(isBufferCopyNeededForWrite(byteBuf.asReadOnly()));\n         assertTrue(byteBuf.release());\n        assertCompositeByteBufIsBufferCopyNeededForWrite(alloc, 2, 0, true);\n         assertCompositeByteBufIsBufferCopyNeededForWrite(alloc, IOV_MAX + 1, 0, true);\n         assertCompositeByteBufIsBufferCopyNeededForWrite(alloc, 0, 2, true);\n         assertCompositeByteBufIsBufferCopyNeededForWrite(alloc, 1, 1, true);", "sourceBeforeFix": "assertTrue(isBufferCopyNeededForWrite(byteBuf.asReadOnly()))", "sourceAfterFix": "assertFalse(isBufferCopyNeededForWrite(byteBuf.asReadOnly()))"}
{"fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "       mBuf.flip();\n       for (int pId = mLeft; pId < mRight; pId ++) {\n         long startTimeMs = System.currentTimeMillis();\n        TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n         OutStream os = file.getOutStream(WriteType.MUST_CACHE);\n         for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n           mBuf.putInt(0, k + mWorkerId);", "fixed": "       mBuf.flip();\n       for (int pId = mLeft; pId < mRight; pId ++) {\n         long startTimeMs = System.currentTimeMillis();\n        TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n         OutStream os = file.getOutStream(WriteType.MUST_CACHE);\n         for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n           mBuf.putInt(0, k + mWorkerId);", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "e38662958d7db7030bf961d25341586cedea5f1f", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "     @Message(id = 14238, value = \"More than one timer found in database with id %s\")\n     RuntimeException moreThanOneTimerFoundWithId(String id);\n    @Message(id = 14238, value = \"The timer service has been disabled. Please add a <timer-service> entry into the ejb section of the server configuration to enable it.\")\n     String timerServiceIsNotActive();\n    @Message(id = 14239, value = \"This EJB does not have any timeout methods\")\n     String ejbHasNoTimerMethods();\n }", "fixed": "     @Message(id = 14238, value = \"More than one timer found in database with id %s\")\n     RuntimeException moreThanOneTimerFoundWithId(String id);\n    @Message(id = 14239, value = \"The timer service has been disabled. Please add a <timer-service> entry into the ejb section of the server configuration to enable it.\")\n     String timerServiceIsNotActive();\n    @Message(id = 14240, value = \"This EJB does not have any timeout methods\")\n     String ejbHasNoTimerMethods();\n }", "sourceBeforeFix": "id=14239", "sourceAfterFix": "id=14240"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should set uuid on implementation id global property\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)\n\tpublic void setImplementationId(ImplementationId implementationId) throws APIException;\n \t/**\n \t * Gets the list of locales which the administrator has allowed for use on the system. This is", "fixed": " \t * @should set uuid on implementation id global property\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)\n\tpublic void setImplementationId(ImplementationId implementationId);\n \t/**\n \t * Gets the list of locales which the administrator has allowed for use on the system. This is", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15854, value = \"Null stream at index %d\")\n     String nullStream(int index);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10854, value = \"Null stream at index %d\")\n     String nullStream(int index);\n     /**", "sourceBeforeFix": "id=15847", "sourceAfterFix": "id=10847"}
{"fixCommitSHA1": "6e0e38f09f74fb633a33cfd5c59265518bcf85be", "projectName": "netty.netty", "bugType": "Wrong Function Name", "problem": "         HttpResponse res = (HttpResponse) ch.readInbound();\n         DecoderResult dr = res.getDecoderResult();\n         assertFalse(dr.isSuccess());\n        assertFalse(dr.isFailure());\n         ensureInboundTrafficDiscarded(ch);\n     }", "fixed": "         HttpResponse res = (HttpResponse) ch.readInbound();\n         DecoderResult dr = res.getDecoderResult();\n         assertFalse(dr.isSuccess());\n        assertTrue(dr.isFailure());\n         ensureInboundTrafficDiscarded(ch);\n     }", "sourceBeforeFix": "assertFalse(dr.isFailure())", "sourceAfterFix": "assertTrue(dr.isFailure())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "cb740fb45277664eb13dd1e4cae4c98485f88174", "projectName": "stanfordnlp.CoreNLP", "bugType": "Wrong Function Name", "problem": "     SimpleMatrix fullVector = RNNUtils.concatenate(leftVector, rightVector);\n     for (int slice = 0; slice < size; ++slice) {\n       SimpleMatrix scaledFullVector = fullVector.scale(deltaFull.get(slice));\n      deltaTensor = deltaTensor.plus(Wt.getSlice(slice).mult(Wt.getSlice(slice).transpose()).mult(scaledFullVector));\n     }\n     return deltaTensor.plus(WTDeltaNoBias);\n   }", "fixed": "     SimpleMatrix fullVector = RNNUtils.concatenate(leftVector, rightVector);\n     for (int slice = 0; slice < size; ++slice) {\n       SimpleMatrix scaledFullVector = fullVector.scale(deltaFull.get(slice));\n      deltaTensor = deltaTensor.plus(Wt.getSlice(slice).plus(Wt.getSlice(slice).transpose()).mult(scaledFullVector));\n     }\n     return deltaTensor.plus(WTDeltaNoBias);\n   }", "sourceBeforeFix": "Wt.getSlice(slice).mult(Wt.getSlice(slice).transpose())", "sourceAfterFix": "Wt.getSlice(slice).plus(Wt.getSlice(slice).transpose())"}
{"fixCommitSHA1": "69170f58df0250e43066e4b56e038fced05f2268", "projectName": "alibaba.canal", "bugType": "Change Numeric Literal", "problem": "                    boolean case2 = standbyInfo == null && logPosition.getPostion().getServerId() != null\n                                     && !logPosition.getPostion().getServerId().equals(findServerId(mysqlConnection));\n                     if (case2) {\n                         long timestamp = logPosition.getPostion().getTimestamp();", "fixed": "                    boolean case2 = (standbyInfo.getAddress() == null)\n                                    && logPosition.getPostion().getServerId() != null\n                                     && !logPosition.getPostion().getServerId().equals(findServerId(mysqlConnection));\n                     if (case2) {\n                         long timestamp = logPosition.getPostion().getTimestamp();", "sourceBeforeFix": "dumpErrorCountThreshold=3", "sourceAfterFix": "dumpErrorCountThreshold=2"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedByMe() throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",\n                 null, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedByMe() throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",\n                 null, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/home_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/home_timeline.json\",true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "dfbf83ff6356fae4948cc44a1d0908defaeca45f", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t\t\t@Override\n \t\t\tpublic void onException(Throwable cause) {\n\t\t\t\tLOG.error(\"Async Kafka commit failed.\", cause);\n \t\t\t\tfailedCommits.inc();\n \t\t\t}\n \t\t};", "fixed": " \t\t\t@Override\n \t\t\tpublic void onException(Throwable cause) {\n\t\t\t\tLOG.warn(\"Async Kafka commit failed.\", cause);\n \t\t\t\tfailedCommits.inc();\n \t\t\t}\n \t\t};", "sourceBeforeFix": "LOG.error(\"Async Kafka commit failed.\",cause)", "sourceAfterFix": "LOG.warn(\"Async Kafka commit failed.\",cause)"}
{"fixCommitSHA1": "90aa627ec53873e359cba24a9af6d2163e2b7272", "projectName": "facebook.presto", "bugType": "Same Function More Args", "problem": "             return parseTimeWithoutTimeZone(session.getTimeZoneKey(), value.toStringUtf8());\n         }\n         catch (IllegalArgumentException e) {\n            throw new PrestoException(INVALID_CAST_ARGUMENT, e);\n         }\n     }", "fixed": "             return parseTimeWithoutTimeZone(session.getTimeZoneKey(), value.toStringUtf8());\n         }\n         catch (IllegalArgumentException e) {\n            throw new PrestoException(INVALID_CAST_ARGUMENT, \"Value cannot be cast to time: \" + value.toStringUtf8(), e);\n         }\n     }", "sourceBeforeFix": "new PrestoException(INVALID_CAST_ARGUMENT,e)", "sourceAfterFix": "new PrestoException(INVALID_CAST_ARGUMENT,\"Value cannot be cast to time: \" + value.toStringUtf8(),e)"}
{"fixCommitSHA1": "2f77b4e6a3f1ab8bd855476a15a4ab2f6f7ae32c", "projectName": "neo4j.neo4j", "bugType": "Change Identifier Used", "problem": "     String executeCypher( String cypher )\n     {\n         return engine.execute( cypher )\n                .toString();\n     }\n     String executeSql( String sql ) throws SQLException", "fixed": "     String executeCypher( String cypher )\n     {\n         return engine.execute( cypher )\n                .dumpToString();\n     }\n     String executeSql( String sql ) throws SQLException", "sourceBeforeFix": "engine.execute(cypher).toString()", "sourceAfterFix": "engine.execute(cypher).dumpToString()"}
{"fixCommitSHA1": "a4d8f930af1f17a6c48a9abd94f49e5fd719fc31", "projectName": "netty.netty", "bugType": "Wrong Function Name", "problem": "         if (value instanceof AsciiString) {\n             return ((AsciiString) value).parseDouble();\n         }\n        return Double.valueOf(value.toString());\n     }\n }", "fixed": "         if (value instanceof AsciiString) {\n             return ((AsciiString) value).parseDouble();\n         }\n        return Double.parseDouble(value.toString());\n     }\n }", "sourceBeforeFix": "Byte.valueOf(value.toString())", "sourceAfterFix": "Byte.parseByte(value.toString())"}
{"fixCommitSHA1": "a0f2bac065232855e4f8bb1221a60b0cbf7fd2a9", "projectName": "checkstyle.checkstyle", "bugType": "Wrong Function Name", "problem": "         checkConfig.addAttribute(\"allowThrowsTagsForSubclasses\", \"true\");\n         checkConfig.addAttribute(\"allowUndeclaredRTE\", \"true\");\n         final String[] expected = {};\n        verify(checkConfig, getSrcPath(\"checks/javadoc/Input_03.java\"), expected);\n     }\n     @Test", "fixed": "         checkConfig.addAttribute(\"allowThrowsTagsForSubclasses\", \"true\");\n         checkConfig.addAttribute(\"allowUndeclaredRTE\", \"true\");\n         final String[] expected = {};\n        verify(checkConfig, getPath(\"checks/javadoc/Input_03.java\"), expected);\n     }\n     @Test", "sourceBeforeFix": "getSrcPath(\"checks/javadoc/Input_03.java\")", "sourceAfterFix": "getPath(\"checks/javadoc/Input_03.java\")"}
{"fixCommitSHA1": "4dd18ed5c3188be2cfb14efce62e71ae6f19243a", "projectName": "dropwizard.dropwizard", "bugType": "Wrong Function Name", "problem": "     @Test\n     public void returnsA404WhenNotFound() throws Exception {\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getServletPath()).thenReturn(\"/tasks/test\");\n         servlet.service(request, response);", "fixed": "     @Test\n     public void returnsA404WhenNotFound() throws Exception {\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getPathInfo()).thenReturn(\"/test\");\n         servlet.service(request, response);", "sourceBeforeFix": "request.getServletPath()", "sourceAfterFix": "request.getPathInfo()"}
{"fixCommitSHA1": "d2b19965df52e66385a2d7146887a44cea50330a", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "    * Removes try/catch/finally statements for easier debugging.\n    */\n   void removeTryCatchFinally() {\n    logger.info(\"Remove try/catch/finally\");\n     startPass(\"removeTryCatchFinally\");\n     RemoveTryCatch r = new RemoveTryCatch(this);\n     process(r);", "fixed": "    * Removes try/catch/finally statements for easier debugging.\n    */\n   void removeTryCatchFinally() {\n    logger.fine(\"Remove try/catch/finally\");\n     startPass(\"removeTryCatchFinally\");\n     RemoveTryCatch r = new RemoveTryCatch(this);\n     process(r);", "sourceBeforeFix": "logger.info(\"Strip code\")", "sourceAfterFix": "logger.fine(\"Strip code\")"}
{"fixCommitSHA1": "4665dcf9ab41c3c61cd42aad296ebfe518bfa003", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\n \tpublic void glCopyTexImage2D (int target, int level, int internalformat, int x, int y, int width, int height, int border) {\n\t\tGL.glCopyTexImage2DEXT(target, level, internalformat, x, y, width, height, border);\n \t}\n \tpublic void glCopyTexSubImage2D (int target, int level, int xoffset, int yoffset, int x, int y, int width, int height) {\n\t\tGL.glCopyTexSubImage2DEXT(target, level, xoffset, yoffset, x, y, width, height);\n \t}\n \tpublic void glCullFace (int mode) {", "fixed": " \t}\n \tpublic void glCopyTexImage2D (int target, int level, int internalformat, int x, int y, int width, int height, int border) {\n\t\tGL.glCopyTexImage2D(target, level, internalformat, x, y, width, height, border);\n \t}\n \tpublic void glCopyTexSubImage2D (int target, int level, int xoffset, int yoffset, int x, int y, int width, int height) {\n\t\tGL.glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height);\n \t}\n \tpublic void glCullFace (int mode) {", "sourceBeforeFix": "GL.glGenTexturesEXT(n,toBuffer(textures,offset),0)", "sourceAfterFix": "GL.glGenTextures(n,toBuffer(textures,offset),0)"}
{"fixCommitSHA1": "4dd18ed5c3188be2cfb14efce62e71ae6f19243a", "projectName": "dropwizard.dropwizard", "bugType": "Wrong Function Name", "problem": "     @SuppressWarnings(\"unchecked\")\n     public void returnsA500OnExceptions() throws Exception {\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getServletPath()).thenReturn(\"/tasks/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.<String>of()));\n         final RuntimeException ex = new RuntimeException(\"whoops\");", "fixed": "     @SuppressWarnings(\"unchecked\")\n     public void returnsA500OnExceptions() throws Exception {\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getPathInfo()).thenReturn(\"/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.<String>of()));\n         final RuntimeException ex = new RuntimeException(\"whoops\");", "sourceBeforeFix": "request.getServletPath()", "sourceAfterFix": "request.getPathInfo()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "38eb6222bddaf49c3c9ae73ddef0cfe4ff5efa48", "projectName": "alibaba.dubbo", "bugType": "Change Numeric Literal", "problem": "     @Test\n     public void test_Decode_Return_Request_Event_Object() throws IOException {\n        byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, (byte) 0xff, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n         Person person = new Person();\n         byte[] request = getRequestBytes(person, header);", "fixed": "     @Test\n     public void test_Decode_Return_Request_Event_Object() throws IOException {\n        byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, (byte) 0xe2, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n         Person person = new Person();\n         byte[] request = getRequestBytes(person, header);", "sourceBeforeFix": "(byte)0xdf", "sourceAfterFix": "(byte)0xe2"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  private final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public List<Trends> getDailyTrends(Date date, boolean excludeHashTags) throws TwitterException {\n        return Trends.constructTrendsList(get(getSearchBaseURL()\n                 + \"trends/daily.json?date=\" + toDateStr(date)\n                 + (excludeHashTags ? \"&exclude=hashtags\" : \"\"), false));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public List<Trends> getDailyTrends(Date date, boolean excludeHashTags) throws TwitterException {\n        return Trends.createTrendsList(get(getSearchBaseURL()\n                 + \"trends/daily.json?date=\" + toDateStr(date)\n                 + (excludeHashTags ? \"&exclude=hashtags\" : \"\"), false));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\",true))"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15864, value = \"Error obtaining input stream from URL %s -- %s\")\n     String errorObtainingUrlStream(String url, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10864, value = \"Error obtaining input stream from URL %s -- %s\")\n     String errorObtainingUrlStream(String url, String message);\n     /**", "sourceBeforeFix": "id=15872", "sourceAfterFix": "id=10872"}
{"fixCommitSHA1": "adfcb4891e9193c5e0c92f60a7de75d4ca3f6a9d", "projectName": "facebook.presto", "bugType": "Change Identifier Used", "problem": "             Map<HashComputation, Symbol> hashSymbols = new HashMap<>(source.getHashSymbols());\n            hashSymbols.keySet().retainAll(result.getOutputSymbols());\n             return new PlanWithProperties(result, hashSymbols);\n         }", "fixed": "             Map<HashComputation, Symbol> hashSymbols = new HashMap<>(source.getHashSymbols());\n            hashSymbols.values().retainAll(result.getOutputSymbols());\n             return new PlanWithProperties(result, hashSymbols);\n         }", "sourceBeforeFix": "hashSymbols.keySet()", "sourceAfterFix": "hashSymbols.values()"}
{"fixCommitSHA1": "79958182209bbd23e048760e954e996346efa9c7", "projectName": "druid-io.druid", "bugType": "Change Numeric Literal", "problem": "     Assert.assertFalse(\"expectedIter not exhausted!?\", expectedIter.hasNext());\n   }\n  @Test(timeout = 10_000L)\n   public void testDeadLock() throws Exception\n   {\n     final URL[] urls = ((URLClassLoader)QueryGranularity.class.getClassLoader()).getURLs();", "fixed": "     Assert.assertFalse(\"expectedIter not exhausted!?\", expectedIter.hasNext());\n   }\n  @Test(timeout = 60_000L)\n   public void testDeadLock() throws Exception\n   {\n     final URL[] urls = ((URLClassLoader)QueryGranularity.class.getClassLoader()).getURLs();", "sourceBeforeFix": "timeout=10_000L", "sourceAfterFix": "timeout=60_000L"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "fixed": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttribfv(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttribiv(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "sourceBeforeFix": "GL20.glUniform1(location,toFloatBuffer(v,offset,count))", "sourceAfterFix": "GL20.glUniform1fv(location,toFloatBuffer(v,offset,count))"}
{"fixCommitSHA1": "5411f0477194933cea95f870e946426af1e4fd58", "projectName": "libgdx.libgdx", "bugType": "Change Boolean Literal", "problem": " \t\tif (a.length != b.length) {\n \t\t\tthrow new AssertionError(\"Display modes \" + Arrays.toString(a) + \" aren't equal to display modes \" + Arrays.toString(b));\n \t\t}\n\t\tboolean equal = false;\n \t\tfor (int i = 0; i < a.length; i++) {\n\t\t\tequal = isDisplayModeEqual(a[i], b[i]);\n \t\t}\n \t\tif (!equal) {\n \t\t\tthrow new AssertionError(\"Display modes \" + Arrays.toString(a) + \" aren't equal to display modes \" + Arrays.toString(b));", "fixed": " \t\tif (a.length != b.length) {\n \t\t\tthrow new AssertionError(\"Display modes \" + Arrays.toString(a) + \" aren't equal to display modes \" + Arrays.toString(b));\n \t\t}\n\t\tboolean equal = true;\n \t\tfor (int i = 0; i < a.length; i++) {\n\t\t\tequal = equal && isDisplayModeEqual(a[i], b[i]);\n \t\t}\n \t\tif (!equal) {\n \t\t\tthrow new AssertionError(\"Display modes \" + Arrays.toString(a) + \" aren't equal to display modes \" + Arrays.toString(b));", "sourceBeforeFix": "equal=false", "sourceAfterFix": "equal=true"}
{"fixCommitSHA1": "9b53590a89d388ca0af8b6535d5a873567b49ab4", "projectName": "naver.pinpoint", "bugType": "Change Identifier Used", "problem": "             throw new NullPointerException(\"uncollectedPointCreator must not be null\");\n         }\n         this.timeWindow = timeWindow;\n        this.uncollectedPointCreater = uncollectedPointCreator;\n     }\n     public Chart<P> build(List<P> sampledPoints) {", "fixed": "             throw new NullPointerException(\"uncollectedPointCreator must not be null\");\n         }\n         this.timeWindow = timeWindow;\n        this.uncollectedPointCreator = uncollectedPointCreator;\n     }\n     public Chart<P> build(List<P> sampledPoints) {", "sourceBeforeFix": "this.uncollectedPointCreater", "sourceAfterFix": "this.uncollectedPointCreator"}
{"fixCommitSHA1": "dbc0ca8d1cb03f2da2c8fc0062e5d4b681fef11a", "projectName": "hazelcast.hazelcast", "bugType": "Same Function Less Args", "problem": "         final NormalResponse normalResponse = new NormalResponse(null, 1, 0, false);\n         Data data = serializationService.toData(normalResponse);\n        final Packet packet = new Packet(data, 0, serializationService.getPortableContext());\n         packet.setHeader(Packet.HEADER_RESPONSE);\n         packet.setHeader(Packet.HEADER_OP);\n         executor.execute(packet);", "fixed": "         final NormalResponse normalResponse = new NormalResponse(null, 1, 0, false);\n         Data data = serializationService.toData(normalResponse);\n        final Packet packet = new Packet(data, 0);\n         packet.setHeader(Packet.HEADER_RESPONSE);\n         packet.setHeader(Packet.HEADER_OP);\n         executor.execute(packet);", "sourceBeforeFix": "new Packet(data,operation.getPartitionId(),serializationService.getPortableContext())", "sourceAfterFix": "new Packet(data,operation.getPartitionId())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "26307cbc3e1ce776eb2f3ccd40ca216f7edcdbc6", "projectName": "netty.netty", "bugType": "More Specific If", "problem": "         if (getPath() == null && c.getPath() != null) {\n             return -1;\n        } else if (c.getPath() == null) {\n             return 1;\n         }\n         v = getPath().compareTo(c.getPath());", "fixed": "         if (getPath() == null && c.getPath() != null) {\n             return -1;\n        } else if (c.getPath() == null && getPath() != null) {\n             return 1;\n         }\n         v = getPath().compareTo(c.getPath());", "sourceBeforeFix": "that.getPath() == null", "sourceAfterFix": "that.getPath() == null && getPath() != null"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "3d3aad91880410164be0372875fe702af44fa279", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "     try {\n       info = ShellUtils.getUnixMountInfo();\n     } catch (IOException e) {\n      LOG.warn(\"Failed to get mount information: {}\", e.getMessage());\n       return;\n     }\n     for (UnixMountInfo mountInfo : info) {", "fixed": "     try {\n       info = ShellUtils.getUnixMountInfo();\n     } catch (IOException e) {\n      LOG.debug(\"Failed to get mount information: {}\", e.getMessage());\n       return;\n     }\n     for (UnixMountInfo mountInfo : info) {", "sourceBeforeFix": "LOG.warn(\"Failed to get mount information: {}\",e.getMessage())", "sourceAfterFix": "LOG.debug(\"Failed to get mount information: {}\",e.getMessage())"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface GoogleCalendarEndpointBuilder\n             extends\n                 GoogleCalendarEndpointConsumerBuilder, GoogleCalendarEndpointProducerBuilder {\n         default AdvancedGoogleCalendarEndpointBuilder advanced() {", "fixed": "     \n    public interface GoogleCalendarEndpointBuilder\n             extends\n                 GoogleCalendarEndpointConsumerBuilder, GoogleCalendarEndpointProducerBuilder {\n         default AdvancedGoogleCalendarEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "bbfc2b18a1b5ed3968212db115410ee515dca460", "projectName": "jersey.jersey", "bugType": "Change Numeric Literal", "problem": "         @Path(\"timeout\")\n         public String getTimeout() {\n             try {\n                Thread.sleep(2000);\n             } catch (InterruptedException e) {\n                 e.printStackTrace();\n             }", "fixed": "         @Path(\"timeout\")\n         public String getTimeout() {\n             try {\n                Thread.sleep(5000);\n             } catch (InterruptedException e) {\n                 e.printStackTrace();\n             }", "sourceBeforeFix": "Thread.sleep(2000)", "sourceAfterFix": "Thread.sleep(5000)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShader(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "fixed": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShaderiv(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "sourceBeforeFix": "GL20.glUniformMatrix2(location,transpose,toFloatBuffer(value,offset,count << 2))", "sourceAfterFix": "GL20.glUniformMatrix2fv(location,transpose,toFloatBuffer(value,offset,count << 2))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  private final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "556b9e45e830a0b78912baf9e1217e92e683306d", "projectName": "openhab.openhab", "bugType": "Wrong Function Name", "problem": "   }\n   private int getTimeZone() {\n    return calendar.getTimeZone().getDSTSavings() / 3600000;\n   }\n   private boolean isDaylightSavingTime() {", "fixed": "   }\n   private int getTimeZone() {\n    return calendar.getTimeZone().getRawOffset() / 3600000;\n   }\n   private boolean isDaylightSavingTime() {", "sourceBeforeFix": "calendar.getTimeZone().getDSTSavings()", "sourceAfterFix": "calendar.getTimeZone().getRawOffset()"}
{"fixCommitSHA1": "c4c48e72c78065000c55e71bf3df9190ddb8bc09", "projectName": "facebook.presto", "bugType": "Wrong Function Name", "problem": "                 throws IOException\n         {\n             generator.writeStartObject();\n            generator.writeStringField(\"type\", value.getType().getCanonicalName());\n             generator.writeFieldName(\"value\");\n             if (value.getValue() == null) {\n                 generator.writeNull();", "fixed": "                 throws IOException\n         {\n             generator.writeStartObject();\n            generator.writeStringField(\"type\", value.getType().getName());\n             generator.writeFieldName(\"value\");\n             if (value.getValue() == null) {\n                 generator.writeNull();", "sourceBeforeFix": "value.getType().getCanonicalName()", "sourceAfterFix": "value.getType().getName()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "9467bef8ea9a62658b32dd43a76f4f98087d1986", "projectName": "apache.hadoop", "bugType": "Change Unary Operator\t", "problem": "         command = new RollCommand(keyName);\n         if (\"--help\".equals(keyName)) {\n           printKeyShellUsage();\n          return -1;\n         }\n       } else if (\"list\".equals(args[i])) {\n         command = new ListCommand();", "fixed": "         command = new RollCommand(keyName);\n         if (\"--help\".equals(keyName)) {\n           printKeyShellUsage();\n          return 1;\n         }\n       } else if (\"list\".equals(args[i])) {\n         command = new ListCommand();", "sourceBeforeFix": "-1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15862, value = \"Invalid '%s' value: %d, the maximum index is %d\")\n     String invalidValue(String name, int value, int maxIndex);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10862, value = \"Invalid '%s' value: %d, the maximum index is %d\")\n     String invalidValue(String name, int value, int maxIndex);\n     /**", "sourceBeforeFix": "id=15856", "sourceAfterFix": "id=10856"}
{"fixCommitSHA1": "fcea9dfeb6b2e12cb04602baac67b3a1c3cb58c9", "projectName": "wildfly.wildfly", "bugType": "Same Function More Args", "problem": "     SimpleAttributeDefinition ENCODING = SimpleAttributeDefinitionBuilder.create(\"encoding\", ModelType.STRING, true).build();\n    SimpleAttributeDefinition FILE = SimpleAttributeDefinitionBuilder.create(\"file\", ModelType.OBJECT, true).\n             setCorrector(FileCorrector.INSTANCE).\n             setValidator(new FileValidator()).\n             build();", "fixed": "     SimpleAttributeDefinition ENCODING = SimpleAttributeDefinitionBuilder.create(\"encoding\", ModelType.STRING, true).build();\n    SimpleAttributeDefinition FILE = SimpleAttributeDefinitionBuilder.create(\"file\", ModelType.OBJECT, false).\n             setCorrector(FileCorrector.INSTANCE).\n             setValidator(new FileValidator()).\n             build();", "sourceBeforeFix": "SimpleAttributeDefinitionBuilder.create(\"max-inclusive\",ModelType.BOOLEAN)", "sourceAfterFix": "SimpleAttributeDefinitionBuilder.create(\"max-inclusive\",ModelType.BOOLEAN,true)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "2", "sourceAfterFix": "0"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "fixed": "   }\n   \n  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "908d85817facf0cd5406a7dc8b65712e6446fd78", "projectName": "dropwizard.dropwizard", "bugType": "Change Numeric Literal", "problem": "         final GraphiteUDP graphite = argument.getValue();\n         assertThat(getField(graphite, \"hostname\")).isEqualTo(\"localhost\");\n        assertThat(getField(graphite, \"port\")).isEqualTo(8080);\n         assertThat(getField(graphite, \"address\")).isNull();\n     }", "fixed": "         final GraphiteUDP graphite = argument.getValue();\n         assertThat(getField(graphite, \"hostname\")).isEqualTo(\"localhost\");\n        assertThat(getField(graphite, \"port\")).isEqualTo(2003);\n         assertThat(getField(graphite, \"address\")).isNull();\n     }", "sourceBeforeFix": "assertThat(getField(graphite,\"port\")).isEqualTo(8080)", "sourceAfterFix": "assertThat(getField(graphite,\"port\")).isEqualTo(2003)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserLists(String user, long cursor) throws TwitterException {\n        return twitter4j.List.constructListOfLists(get(getApiBaseURL() + V1 +\n                 user + \"/lists.json?cursor=\" + cursor, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserLists(String user, long cursor) throws TwitterException {\n        return twitter4j.List.createListList(get(getApiBaseURL() + V1 +\n                 user + \"/lists.json?cursor=\" + cursor, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline.json\",true))"}
{"fixCommitSHA1": "80496087c650e01892096294ee33b6342ad6f1ef", "projectName": "facebook.presto", "bugType": "Change Modifier", "problem": " {\n     private final IdentityHashMap<JoinNode, SourceHashProvider> joinHashes = new IdentityHashMap<>();\n    public SourceHashProvider getSourceHashProvider(JoinNode node, ExecutionPlanner executionPlanner)\n     {\n         SourceHashProvider hashProvider = joinHashes.get(node);\n         if (hashProvider == null) {", "fixed": " {\n     private final IdentityHashMap<JoinNode, SourceHashProvider> joinHashes = new IdentityHashMap<>();\n    public synchronized SourceHashProvider getSourceHashProvider(JoinNode node, ExecutionPlanner executionPlanner)\n     {\n         SourceHashProvider hashProvider = joinHashes.get(node);\n         if (hashProvider == null) {", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform3fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform3(location, v);\r\n \t}\r\n \tpublic void glUniform3fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform3(location, toFloatBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform3i (int location, int x, int y, int z) {\r", "fixed": " \t}\r\n \tpublic void glUniform3fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform3fv(location, v);\r\n \t}\r\n \tpublic void glUniform3fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform3fv(location, toFloatBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform3i (int location, int x, int y, int z) {\r", "sourceBeforeFix": "GL20.glUniform1(location,v)", "sourceAfterFix": "GL20.glUniform1fv(location,v)"}
{"fixCommitSHA1": "8c5369562390bee531eb35c00744821b0c4821e3", "projectName": "xetorthio.jedis", "bugType": "Wrong Function Name", "problem": "   public Set<Tuple> zrangeByScoreWithScores(final byte[] key, final double min, final double max) {\n     checkIsInMultiOrPipeline();\n     client.zrangeByScoreWithScores(key, min, max);\n    return getBinaryTupledSet();\n   }\n   @Override", "fixed": "   public Set<Tuple> zrangeByScoreWithScores(final byte[] key, final double min, final double max) {\n     checkIsInMultiOrPipeline();\n     client.zrangeByScoreWithScores(key, min, max);\n    return getTupledSet();\n   }\n   @Override", "sourceBeforeFix": "getBinaryTupledSet()", "sourceAfterFix": "getTupledSet()"}
{"fixCommitSHA1": "4bb06fbd0a73484f025b1c254c9b44ddee9b19af", "projectName": "apache.hadoop", "bugType": "Change Identifier Used", "problem": "                   SequenceFile.CompressionType compress) throws IOException {\n       super(conf, new Path(dirName), \n             comparator(comparator), \n            keyClass(NullWritable.class), \n             compressionType(compress));\n     }", "fixed": "                   SequenceFile.CompressionType compress) throws IOException {\n       super(conf, new Path(dirName), \n             comparator(comparator), \n            valueClass(NullWritable.class), \n             compressionType(compress));\n     }", "sourceBeforeFix": "keyClass(NullWritable.class)", "sourceAfterFix": "valueClass(NullWritable.class)"}
{"fixCommitSHA1": "8aa6656b6b06d0a111a2634af080ba77cc423140", "projectName": "stanfordnlp.CoreNLP", "bugType": "Wrong Function Name", "problem": "   @Override\n   public Annotation createFromFile(File file) throws IOException {\n    return createFromFile(file.getAbsoluteFile());\n   }\n   @Override", "fixed": "   @Override\n   public Annotation createFromFile(File file) throws IOException {\n    return createFromFile(file.getAbsolutePath());\n   }\n   @Override", "sourceBeforeFix": "file.getAbsoluteFile()", "sourceAfterFix": "file.getAbsolutePath()"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetProgramiv (int program, int pname, IntBuffer params) {\r\n\t\tGL20.glGetProgram(program, pname, params);\r\n \t}\r\n \tpublic void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tEXTFramebufferObject.glGetRenderbufferParameterEXT(target, pname, params);\r\n \t}\r\n \tpublic String glGetShaderInfoLog (int shader) {\r", "fixed": " \t}\r\n \tpublic void glGetProgramiv (int program, int pname, IntBuffer params) {\r\n\t\tGL20.glGetProgramiv(program, pname, params);\r\n \t}\r\n \tpublic void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tEXTFramebufferObject.glGetRenderbufferParameterivEXT(target, pname, params);\r\n \t}\r\n \tpublic String glGetShaderInfoLog (int shader) {\r", "sourceBeforeFix": "GL11.glGetTexParameter(target,pname,params)", "sourceAfterFix": "GL11.glGetTexParameterfv(target,pname,params)"}
{"fixCommitSHA1": "8ce6064f094303387317b2f834d782b53a264251", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "         RecipientListProcessor rlp = new RecipientListProcessor(exchange.getContext(), producerCache, iter, getAggregationStrategy(),\n                                                                 isParallelProcessing(), getExecutorService(), isStreaming(), isStopOnException(), getTimeout()) {\n             @Override\n            protected ExecutorService createAggregateExecutorService(String name) {\n                 if (aggregateExecutorService == null) {\n                     aggregateExecutorService = super.createAggregateExecutorService(\"RecipientList-AggregateTask\");", "fixed": "         RecipientListProcessor rlp = new RecipientListProcessor(exchange.getContext(), producerCache, iter, getAggregationStrategy(),\n                                                                 isParallelProcessing(), getExecutorService(), isStreaming(), isStopOnException(), getTimeout()) {\n             @Override\n            protected synchronized ExecutorService createAggregateExecutorService(String name) {\n                 if (aggregateExecutorService == null) {\n                     aggregateExecutorService = super.createAggregateExecutorService(\"RecipientList-AggregateTask\");", "sourceBeforeFix": "4", "sourceAfterFix": "36"}
{"fixCommitSHA1": "7bdcee5e3dfc368e8ba9c5752aa07d049ca5b5ae", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " /*\n * Copyright 2012-2018 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.", "fixed": " /*\n * Copyright 2012-2019 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.", "sourceBeforeFix": "Assert.notNull(groupId,\"ArtifactId must not be null\")", "sourceAfterFix": "Assert.notNull(artifactId,\"ArtifactId must not be null\")"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserListMemberships(String user, long cursor) throws TwitterException {\n        return twitter4j.List.constructListOfLists(get(getApiBaseURL() + V1 +\n                 user + \"/lists/memberships.json?cursor=\" + cursor, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserListMemberships(String user, long cursor) throws TwitterException {\n        return twitter4j.List.createListList(get(getApiBaseURL() + V1 +\n                 user + \"/lists/memberships.json?cursor=\" + cursor, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  private final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "f2338bb71559d99dd76563b5cca93b8bd518b4d7", "projectName": "Alluxio.alluxio", "bugType": "Change Modifier", "problem": "    * Closes all the resources asscoated with the context. Make sure all the resources are released\n    * back to this context before calling this close. Usually, you don't need to call this.\n    */\n  public synchronized void close() {\n     mFileSystemMasterClientPool.close();\n     mFileSystemMasterClientPool = null;\n     mBlockMasterClientPool.close();", "fixed": "    * Closes all the resources asscoated with the context. Make sure all the resources are released\n    * back to this context before calling this close. Usually, you don't need to call this.\n    */\n  public void close() {\n     mFileSystemMasterClientPool.close();\n     mFileSystemMasterClientPool = null;\n     mBlockMasterClientPool.close();", "sourceBeforeFix": "33", "sourceAfterFix": "1"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should save properties with case difference only\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_GLOBAL_PROPERTIES)\n\tpublic List<GlobalProperty> saveGlobalProperties(List<GlobalProperty> props) throws APIException;\n \t/**\n \t * Completely remove the given global property from the database", "fixed": " \t * @should save properties with case difference only\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_GLOBAL_PROPERTIES)\n\tpublic List<GlobalProperty> saveGlobalProperties(List<GlobalProperty> props);\n \t/**\n \t * Completely remove the given global property from the database", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "e2119d33293008fcc876f5fcd58ede2993eb24d6", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnBean(Client.class)\n\t@ConditionalOnEnablednHealthIndicator(\"elasticsearch\")\n \t@EnableConfigurationProperties(ElasticsearchHealthIndicatorProperties.class)\n \tpublic static class ElasticsearchHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<ElasticsearchHealthIndicator, Client> {", "fixed": " \t@Configuration\n \t@ConditionalOnBean(Client.class)\n\t@ConditionalOnEnabledHealthIndicator(\"elasticsearch\")\n \t@EnableConfigurationProperties(ElasticsearchHealthIndicatorProperties.class)\n \tpublic static class ElasticsearchHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<ElasticsearchHealthIndicator, Client> {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"diskspace\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"diskspace\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "2f77b4e6a3f1ab8bd855476a15a4ab2f6f7ae32c", "projectName": "neo4j.neo4j", "bugType": "Change Identifier Used", "problem": "         String query = \"start root=node:node_auto_index(name = 'FileRoot') match root-[:contains*0..]->(parentDir)-[:leaf]->file return file\";\n         gen.get().addSnippet( \"query1\", createCypherSnippet( query ) );\n         String result = engine.execute( query )\n                .toString();\n         assertTrue( result.contains(\"File1\") );\n         gen.get()\n                 .addSnippet( \"result1\", createQueryResultSnippet( result ) );", "fixed": "         String query = \"start root=node:node_auto_index(name = 'FileRoot') match root-[:contains*0..]->(parentDir)-[:leaf]->file return file\";\n         gen.get().addSnippet( \"query1\", createCypherSnippet( query ) );\n         String result = engine.execute( query )\n                .dumpToString();\n         assertTrue( result.contains(\"File1\") );\n         gen.get()\n                 .addSnippet( \"result1\", createQueryResultSnippet( result ) );", "sourceBeforeFix": "engine.execute(query).toString()", "sourceAfterFix": "engine.execute(query).dumpToString()"}
{"fixCommitSHA1": "eba20b3dcc401fb4c873afc5948cc92fbcb00097", "projectName": "clojure.clojure", "bugType": "Wrong Function Name", "problem": " \t\tint size = s.count();\n \t\tlong[] ret = new long[size];\n \t\tfor(int i = 0; i < size && s != null; i++, s = s.rest())\n\t\t\tret[i] = ((Number) s.first()).intValue();\n \t\treturn ret;\n \t\t}\n }", "fixed": " \t\tint size = s.count();\n \t\tlong[] ret = new long[size];\n \t\tfor(int i = 0; i < size && s != null; i++, s = s.rest())\n\t\t\tret[i] = ((Number) s.first()).longValue();\n \t\treturn ret;\n \t\t}\n }", "sourceBeforeFix": "((Number)s.first()).intValue()", "sourceAfterFix": "((Number)s.first()).longValue()"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n* @see java.lang.Object\n \t */\n\tpublic int hash(T record);\n \t/**\n \t * Sets the given element as the comparison reference for future calls to", "fixed": " \t * \n* @see java.lang.Object\n \t */\n\tpublic abstract int hash(T record);\n \t/**\n \t * Sets the given element as the comparison reference for future calls to", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "63c73d11b2de514fde3e299b573334b82089045c", "projectName": "openhab.openhab", "bugType": "Same Function More Args", "problem": " \t@Test\n \tpublic void BaseCommandTest() {\n\t\tS_Command scmd = new S_Command(\"00FE30\", 20.0);\n \t\tString commandStr = scmd.getCommandString();", "fixed": " \t@Test\n \tpublic void BaseCommandTest() {\n\t\tS_Command scmd = new S_Command(\"00FE30\", 1, 20.0);\n \t\tString commandStr = scmd.getCommandString();", "sourceBeforeFix": "new S_Command(\"00FE30\",20.0)", "sourceAfterFix": "new S_Command(\"00FE30\",1,20.0)"}
{"fixCommitSHA1": "f0d0501d556efb8796138d4aa92ce4f276c93c3b", "projectName": "apache.hbase", "bugType": "Change Numeric Literal", "problem": "     grantGlobal(TEST_UTIL, toGroupEntry(GROUP_READ), Permission.Action.READ);\n     grantGlobal(TEST_UTIL, toGroupEntry(GROUP_WRITE), Permission.Action.WRITE);\n    assertEquals(5, AccessControlLists.getTablePermissions(conf, TEST_TABLE).size());\n     try {\n      assertEquals(5, AccessControlClient.getUserPermissions(systemUserConnection,\n           TEST_TABLE.toString()).size());\n     } catch (Throwable e) {\n       LOG.error(\"error during call of AccessControlClient.getUserPermissions. \", e);", "fixed": "     grantGlobal(TEST_UTIL, toGroupEntry(GROUP_READ), Permission.Action.READ);\n     grantGlobal(TEST_UTIL, toGroupEntry(GROUP_WRITE), Permission.Action.WRITE);\n    assertEquals(4, AccessControlLists.getTablePermissions(conf, TEST_TABLE).size());\n     try {\n      assertEquals(4, AccessControlClient.getUserPermissions(systemUserConnection,\n           TEST_TABLE.toString()).size());\n     } catch (Throwable e) {\n       LOG.error(\"error during call of AccessControlClient.getUserPermissions. \", e);", "sourceBeforeFix": "assertEquals(5,AccessControlLists.getTablePermissions(conf,TEST_TABLE).size())", "sourceAfterFix": "assertEquals(4,AccessControlLists.getTablePermissions(conf,TEST_TABLE).size())"}
{"fixCommitSHA1": "9b53590a89d388ca0af8b6535d5a873567b49ab4", "projectName": "naver.pinpoint", "bugType": "Change Identifier Used", "problem": "         int numTimeslots = (int) this.timeWindow.getWindowRangeCount();\n         List<P> points = new ArrayList<>(numTimeslots);\n         for (long timestamp : this.timeWindow) {\n            points.add(uncollectedPointCreater.createUnCollectedPoint(timestamp));\n         }\n         return points;\n     }", "fixed": "         int numTimeslots = (int) this.timeWindow.getWindowRangeCount();\n         List<P> points = new ArrayList<>(numTimeslots);\n         for (long timestamp : this.timeWindow) {\n            points.add(uncollectedPointCreator.createUnCollectedPoint(timestamp));\n         }\n         return points;\n     }", "sourceBeforeFix": "this.uncollectedPointCreater", "sourceAfterFix": "this.uncollectedPointCreator"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15854, value = \"Null stream at index %d\")\n     String nullStream(int index);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10854, value = \"Null stream at index %d\")\n     String nullStream(int index);\n     /**", "sourceBeforeFix": "id=15868", "sourceAfterFix": "id=10868"}
{"fixCommitSHA1": "92e7da30dab93cf23bcf64084f660426a0d9da85", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \tpublic void read(final Kryo kryo, final Input input) {\n\t\tthis.jobID = kryo.readObjectOrNull(input, JobID.class);\n \t\tthis.jobName = input.readString();", "fixed": " \tpublic void read(final Kryo kryo, final Input input) {\n\t\tthis.jobID = kryo.readObject(input, JobID.class);\n \t\tthis.jobName = input.readString();", "sourceBeforeFix": "kryo.readObjectOrNull(input,JobID.class)", "sourceAfterFix": "kryo.readObject(input,JobID.class)"}
{"fixCommitSHA1": "ee2feaf9a6c87f753e3e4e6be46752d21494bda3", "projectName": "hazelcast.hazelcast", "bugType": "Change Numeric Literal", "problem": "     }\n     static long combineToLong(int x, int y) {\n        return ((long) x << 32) | ((long) y & 0xFFFFFFFL);\n     }\n     static int extractInt(long value, boolean lowerBits) {", "fixed": "     }\n     static long combineToLong(int x, int y) {\n        return ((long) x << 32) | ((long) y & 0xFFFFFFFFL);\n     }\n     static int extractInt(long value, boolean lowerBits) {", "sourceBeforeFix": "(long)y & 0xFFFFFFFL", "sourceAfterFix": "(long)y & 0xFFFFFFFFL"}
{"fixCommitSHA1": "0682e8dd41045e3375b61d3d76f6e6991e98c869", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "             }\n         }\n         if (simple.getFromReceivedDate() != null) {\n            String s = simple.getFromSentDate();\n             if (s.startsWith(\"now\")) {\n                 long offset = extractOffset(s, typeConverter);\n                 builder = builder.and(new NowSearchTerm(SearchTermBuilder.Comparison.GE.asNum(), false, offset));", "fixed": "             }\n         }\n         if (simple.getFromReceivedDate() != null) {\n            String s = simple.getFromReceivedDate();\n             if (s.startsWith(\"now\")) {\n                 long offset = extractOffset(s, typeConverter);\n                 builder = builder.and(new NowSearchTerm(SearchTermBuilder.Comparison.GE.asNum(), false, offset));", "sourceBeforeFix": "simple.getFromSentDate()", "sourceAfterFix": "simple.getToSentDate()"}
{"fixCommitSHA1": "e2119d33293008fcc876f5fcd58ede2993eb24d6", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t}\n \t@Configuration\n\t@ConditionalOnEnablednHealthIndicator(\"diskspace\")\n \tpublic static class DiskSpaceHealthIndicatorConfiguration {\n \t\t@Bean", "fixed": " \t}\n \t@Configuration\n\t@ConditionalOnEnabledHealthIndicator(\"diskspace\")\n \tpublic static class DiskSpaceHealthIndicatorConfiguration {\n \t\t@Bean", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"mongo\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"mongo\")"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15864, value = \"Error obtaining input stream from URL %s -- %s\")\n     String errorObtainingUrlStream(String url, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10864, value = \"Error obtaining input stream from URL %s -- %s\")\n     String errorObtainingUrlStream(String url, String message);\n     /**", "sourceBeforeFix": "id=15856", "sourceAfterFix": "id=10856"}
{"fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "projectName": "Alluxio.alluxio", "bugType": "Change Operand ", "problem": "       if (TACHYON_STREAMING_READ) {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n           InputStream is = file.getInStream(ReadType.CACHE);\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;", "fixed": "       if (TACHYON_STREAMING_READ) {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           InputStream is = file.getInStream(ReadType.CACHE);\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "pId + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "296b9236fd1544637ae57d022c9e1dd9758577d0", "projectName": "druid-io.druid", "bugType": "Wrong Function Name", "problem": "       } else if (outputFS instanceof DistributedFileSystem) {\n         loadSpec = ImmutableMap.<String, Object>of(\n             \"type\", \"hdfs\",\n            \"path\", indexOutURI.getPath()\n         );\n       } else {\n         throw new ISE(\"Unknown file system[%s]\", outputFS.getClass());", "fixed": "       } else if (outputFS instanceof DistributedFileSystem) {\n         loadSpec = ImmutableMap.<String, Object>of(\n             \"type\", \"hdfs\",\n            \"path\", indexOutURI.toString()\n         );\n       } else {\n         throw new ISE(\"Unknown file system[%s]\", outputFS.getClass());", "sourceBeforeFix": "indexOutURI.getPath()", "sourceAfterFix": "indexOutURI.toString()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15860, value = \"No deployment with name %s found\")\n     String noDeploymentContentWithName(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10860, value = \"No deployment with name %s found\")\n     String noDeploymentContentWithName(String name);\n     /**", "sourceBeforeFix": "id=15872", "sourceAfterFix": "id=10872"}
{"fixCommitSHA1": "37a968f250d8e6b6cfadebb046f2eb1295cd95e4", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": "if (mod.getModuleActivator() != null)\n \t\t\t\t\tmod.getModuleActivator().willStop();\n \t\t\t}\n\t\t\tcatch (Throwable t) {\n \t\t\t\tlog.warn(\"Unable to call module's Activator.willStop() method\", t);\n \t\t\t}", "fixed": "if (mod.getModuleActivator() != null)\n \t\t\t\t\tmod.getModuleActivator().willStop();\n \t\t\t}\n\t\t\tcatch (Exception t) {\n \t\t\t\tlog.warn(\"Unable to call module's Activator.willStop() method\", t);\n \t\t\t}", "sourceBeforeFix": "Throwable t", "sourceAfterFix": "Exception t"}
{"fixCommitSHA1": "8abfa48f2eb5edaf3f5a2cc2350e4e3c232f4152", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "          * @param lineNo line of class definition.\n          * @param columnNo column of class definition.\n          */\n        public Context(String className, int lineNo, int columnNo) {\n             this.className = className;\n             this.lineNo = lineNo;\n             this.columnNo = columnNo;", "fixed": "          * @param lineNo line of class definition.\n          * @param columnNo column of class definition.\n          */\n        Context(String className, int lineNo, int columnNo) {\n             this.className = className;\n             this.lineNo = lineNo;\n             this.columnNo = columnNo;", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "e5ae9753d043d292923efc4759c2b0e2e68daa27", "projectName": "apache.camel", "bugType": "Same Function More Args", "problem": "                 configuration = new Configuration();\n                 configuration.setHostLanguage(Configuration.XQUERY);\n                 configuration.setStripsWhiteSpace(isStripsAllWhiteSpace() ? Whitespace.ALL : Whitespace.IGNORABLE);\n                LOG.debug(\"Created new Configuration {}\");\n             } else {\n                 LOG.debug(\"Using existing Configuration {}\", configuration);\n             }", "fixed": "                 configuration = new Configuration();\n                 configuration.setHostLanguage(Configuration.XQUERY);\n                 configuration.setStripsWhiteSpace(isStripsAllWhiteSpace() ? Whitespace.ALL : Whitespace.IGNORABLE);\n                LOG.debug(\"Created new Configuration {}\", configuration);\n             } else {\n                 LOG.debug(\"Using existing Configuration {}\", configuration);\n             }", "sourceBeforeFix": "LOG.debug(\"Created new Configuration {}\")", "sourceAfterFix": "LOG.debug(\"Created new Configuration {}\",configuration)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15856, value = \"Invalid url stream.\")\n     String invalidUrlStream();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10856, value = \"Invalid url stream.\")\n     String invalidUrlStream();\n     /**", "sourceBeforeFix": "id=15864", "sourceAfterFix": "id=10864"}
{"fixCommitSHA1": "2918286bf4a010c9ac8eadffb958ff10fb41ad62", "projectName": "junit-team.junit", "bugType": "Wrong Function Name", "problem": "         if (description == null) {\n             description = Description.createTestDescription(getTestClass().getJavaClass(),\n                     testName(method), method.getAnnotations());\n            fMethodDescriptions.put(method, description);\n         }\n         return description;", "fixed": "         if (description == null) {\n             description = Description.createTestDescription(getTestClass().getJavaClass(),\n                     testName(method), method.getAnnotations());\n            fMethodDescriptions.putIfAbsent(method, description);\n         }\n         return description;", "sourceBeforeFix": "fMethodDescriptions.put(method,description)", "sourceAfterFix": "fMethodDescriptions.putIfAbsent(method,description)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": " import org.jboss.logging.Messages;\n /**\n * This module is using message IDs in the range 10900-10999. This file is using the subset 10975-10999 for domain\n* controller non-logger messages. See http:\n  * JBAS message id blocks.\n  * <p/>", "fixed": " import org.jboss.logging.Messages;\n /**\n * This module is using message IDs in the range 10800-10899. This file is using the subset 10830-10899 for domain\n* controller non-logger messages. See http:\n  * JBAS message id blocks.\n  * <p/>", "sourceBeforeFix": "id=15841", "sourceAfterFix": "id=10841"}
{"fixCommitSHA1": "4541df6610696f68d6e8b1506ecb753be54e6368", "projectName": "apache.camel", "bugType": "Change Binary Operator", "problem": "         CxfEndpoint endpoint = (CxfEndpoint)camelContext.getEndpoint(\"cxf:bean:routerEndpoint\");\n        assertTrue(endpoint.getBus().getInInterceptors().size() == 1);\n         assertEquals(LoggingInInterceptor.class, endpoint.getBus().getInInterceptors().get(0).getClass());\n     }", "fixed": "         CxfEndpoint endpoint = (CxfEndpoint)camelContext.getEndpoint(\"cxf:bean:routerEndpoint\");\n        assertTrue(endpoint.getBus().getInInterceptors().size() >= 1);\n         assertEquals(LoggingInInterceptor.class, endpoint.getBus().getInInterceptors().get(0).getClass());\n     }", "sourceBeforeFix": "endpoint.getBus().getInInterceptors().size() == 1", "sourceAfterFix": "endpoint.getBus().getInInterceptors().size() >= 1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e2119d33293008fcc876f5fcd58ede2993eb24d6", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnBean(SolrServer.class)\n\t@ConditionalOnEnablednHealthIndicator(\"solr\")\n \tpublic static class SolrHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<SolrHealthIndicator, SolrServer> {", "fixed": " \t@Configuration\n \t@ConditionalOnBean(SolrServer.class)\n\t@ConditionalOnEnabledHealthIndicator(\"solr\")\n \tpublic static class SolrHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<SolrHealthIndicator, SolrServer> {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"solr\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"solr\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "6ccd858fc04359c5d203278b25ad3d9f1f53a662", "projectName": "spring-projects.spring-boot", "bugType": "Change Modifier", "problem": " \tstatic class ClientCredentialsCondition extends AnyNestedCondition {\n\t\tpublic ClientCredentialsCondition() {\n \t\t\tsuper(ConfigurationPhase.PARSE_CONFIGURATION);\n \t\t}", "fixed": " \tstatic class ClientCredentialsCondition extends AnyNestedCondition {\n\t\tClientCredentialsCondition() {\n \t\t\tsuper(ConfigurationPhase.PARSE_CONFIGURATION);\n \t\t}", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15843, value = \"Invalid rollout plan. Plan operations affect server groups %s that are not reflected in the rollout plan\")\n     String invalidRolloutPlan(Set<String> groups);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10843, value = \"Invalid rollout plan. Plan operations affect server groups %s that are not reflected in the rollout plan\")\n     String invalidRolloutPlan(Set<String> groups);\n     /**", "sourceBeforeFix": "id=15852", "sourceAfterFix": "id=10852"}
{"fixCommitSHA1": "2f880c73edb600ab92cdd580ac74f7388b5c6135", "projectName": "Alluxio.alluxio", "bugType": "Change Modifier", "problem": "     }\n   }\n  public void unpinFile(int fileId) {\n     if (INACTIVE) {\n       return;\n     }", "fixed": "     }\n   }\n  public synchronized void unpinFile(int fileId) {\n     if (INACTIVE) {\n       return;\n     }", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should delete global properties from database\n \t */\n \t@Authorized(PrivilegeConstants.PURGE_GLOBAL_PROPERTIES)\n\tpublic void purgeGlobalProperties(List<GlobalProperty> globalProperties) throws APIException;\n \t/**\n \t * Save the given global property to the database. If the global property already exists,", "fixed": " \t * @should delete global properties from database\n \t */\n \t@Authorized(PrivilegeConstants.PURGE_GLOBAL_PROPERTIES)\n\tpublic void purgeGlobalProperties(List<GlobalProperty> globalProperties);\n \t/**\n \t * Save the given global property to the database. If the global property already exists,", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedNatsEndpointBuilder\n             extends\n                 AdvancedNatsEndpointConsumerBuilder, AdvancedNatsEndpointProducerBuilder {\n         default NatsEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedNatsEndpointBuilder\n             extends\n                 AdvancedNatsEndpointConsumerBuilder, AdvancedNatsEndpointProducerBuilder {\n         default NatsEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "4281cc1c5d3aa51b56db9d9e251c761c52a855e3", "projectName": "libgdx.libgdx", "bugType": "Change Operand ", "problem": " \t * before growing the backing table. */\r\n \tpublic IdentityMap (int initialCapacity, float loadFactor) {\r\n \t\tif (initialCapacity < 0) throw new IllegalArgumentException(\"initialCapacity must be >= 0: \" + initialCapacity);\r\n\t\tif (capacity > 1 << 30) throw new IllegalArgumentException(\"initialCapacity is too large: \" + initialCapacity);\r\n \t\tcapacity = MathUtils.nextPowerOfTwo(initialCapacity);\r\n \t\tif (loadFactor <= 0) throw new IllegalArgumentException(\"loadFactor must be > 0: \" + loadFactor);\r", "fixed": " \t * before growing the backing table. */\r\n \tpublic IdentityMap (int initialCapacity, float loadFactor) {\r\n \t\tif (initialCapacity < 0) throw new IllegalArgumentException(\"initialCapacity must be >= 0: \" + initialCapacity);\r\n\t\tif (initialCapacity > 1 << 30) throw new IllegalArgumentException(\"initialCapacity is too large: \" + initialCapacity);\r\n \t\tcapacity = MathUtils.nextPowerOfTwo(initialCapacity);\r\n \t\tif (loadFactor <= 0) throw new IllegalArgumentException(\"loadFactor must be > 0: \" + loadFactor);\r", "sourceBeforeFix": "capacity > 1 << 30", "sourceAfterFix": "initialCapacity > 1 << 30"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15841, value = \"Exception getting result from server %s: %s\")\n     String exceptionAwaitingResultFromServer(ServerIdentity server, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10841, value = \"Exception getting result from server %s: %s\")\n     String exceptionAwaitingResultFromServer(ServerIdentity server, String message);\n     /**", "sourceBeforeFix": "id=15841", "sourceAfterFix": "id=10841"}
{"fixCommitSHA1": "89fc7248e8d0a2ba5a7f8ce300b5519e9c6570da", "projectName": "cucumber.cucumber-jvm", "bugType": "Change Identifier Used", "problem": "     }\n     public Runtime(ResourceLoader resourceLoader, ClassLoader classLoader, Collection<? extends Backend> backends,\n                   RuntimeOptions runtimeOptions, RuntimeGlue optionalGlue) {\n         this(resourceLoader, classLoader, backends, runtimeOptions, TimeService.SYSTEM, optionalGlue);\n     }\n     public Runtime(ResourceLoader resourceLoader, ClassLoader classLoader, Collection<? extends Backend> backends,\n                   RuntimeOptions runtimeOptions, TimeService stopWatch, RuntimeGlue optionalGlue) {\n         if (backends.isEmpty()) {\n             throw new CucumberException(\"No backends were found. Please make sure you have a backend module on your CLASSPATH.\");\n         }", "fixed": "     }\n     public Runtime(ResourceLoader resourceLoader, ClassLoader classLoader, Collection<? extends Backend> backends,\n                   RuntimeOptions runtimeOptions, Glue optionalGlue) {\n         this(resourceLoader, classLoader, backends, runtimeOptions, TimeService.SYSTEM, optionalGlue);\n     }\n     public Runtime(ResourceLoader resourceLoader, ClassLoader classLoader, Collection<? extends Backend> backends,\n                   RuntimeOptions runtimeOptions, TimeService stopWatch, Glue optionalGlue) {\n         if (backends.isEmpty()) {\n             throw new CucumberException(\"No backends were found. Please make sure you have a backend module on your CLASSPATH.\");\n         }", "sourceBeforeFix": "RuntimeGlue optionalGlue", "sourceAfterFix": "Glue optionalGlue"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsCsv(String path, long millis) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, null);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsCsv(String path, long millis) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, null);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "d2418b99ef96450104f978d8e50c7ca762235080", "projectName": "spring-projects.spring-boot", "bugType": "Change Modifier", "problem": " \tprivate static class MockPrincipalWrapper extends HttpServletRequestWrapper {\n\t\tpublic MockPrincipalWrapper(HttpServletRequest request) {\n \t\t\tsuper(request);\n \t\t}", "fixed": " \tprivate static class MockPrincipalWrapper extends HttpServletRequestWrapper {\n\t\tMockPrincipalWrapper(HttpServletRequest request) {\n \t\t\tsuper(request);\n \t\t}", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15838, value = \"Unexplained failure\")\n     String unexplainedFailure();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10838, value = \"Unexplained failure\")\n     String unexplainedFailure();\n     /**", "sourceBeforeFix": "id=15843", "sourceAfterFix": "id=10843"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "038c9b6d6103052795b6d6e1175cd964c7461bb2", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Change Modifier", "problem": "         }\n         \n        protected int readULong(final int position) throws NtlmEngineException {\n             return NtlmEngine.readULong(messageContents, position);\n         }\n         \n        protected byte[] readSecurityBuffer(final int position) throws NtlmEngineException {\n             return NtlmEngine.readSecurityBuffer(messageContents, position);\n         }", "fixed": "         }\n         \n        protected final int readULong(final int position) throws NtlmEngineException {\n             return NtlmEngine.readULong(messageContents, position);\n         }\n         \n        protected final byte[] readSecurityBuffer(final int position) throws NtlmEngineException {\n             return NtlmEngine.readSecurityBuffer(messageContents, position);\n         }", "sourceBeforeFix": "4", "sourceAfterFix": "20"}
{"fixCommitSHA1": "79946366e1ab141ef2b595e0079dcac7b913da2b", "projectName": "checkstyle.checkstyle", "bugType": "Wrong Function Name", "problem": "             \"1: \" + getCheckMessage(MSG_KEY_MISMATCH),\n         };\n        verify(checkConfig, getPath(\"InputPackageDeclarationDiffDirectoryAtParent.java\"), expected);\n     }\n     @Test", "fixed": "             \"1: \" + getCheckMessage(MSG_KEY_MISMATCH),\n         };\n        verify(checkConfig,\n                getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtParent.java\"),\n                expected);\n     }\n     @Test", "sourceBeforeFix": "getPath(\"InputPackageDeclarationDiffDirectory.java\")", "sourceAfterFix": "getNonCompilablePath(\"InputPackageDeclarationDiffDirectory.java\")"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15854, value = \"Null stream at index %d\")\n     String nullStream(int index);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10854, value = \"Null stream at index %d\")\n     String nullStream(int index);\n     /**", "sourceBeforeFix": "id=15830", "sourceAfterFix": "id=10830"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsText(String path, long millis) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), millis, null);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsText(String path, long millis) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), millis, null);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsCsv(String path, long millis, OUT endTuple) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, endTuple);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsCsv(String path, long millis, OUT endTuple) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, endTuple);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "cb6f6e26c12839e59243f25bfb142ec5e5b71135", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "             public void configure() {\n                 from(\"direct:start\").beanRef(\"myBean\", \"route\").to(\"mock:result\");\n                from(\"direct:a\").delay(3000).setBody(constant(\"A\"));\n                 from(\"direct:b\").setBody(constant(\"B\"));", "fixed": "             public void configure() {\n                 from(\"direct:start\").beanRef(\"myBean\", \"route\").to(\"mock:result\");\n                from(\"direct:a\").delay(2000).setBody(constant(\"A\"));\n                 from(\"direct:b\").setBody(constant(\"B\"));", "sourceBeforeFix": "from(\"direct:a\").delay(3000)", "sourceAfterFix": "from(\"direct:a\").delay(2000)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15863, value = \"%s is not a valid URL -- %s\")\n     String invalidUrl(String url, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10863, value = \"%s is not a valid URL -- %s\")\n     String invalidUrl(String url, String message);\n     /**", "sourceBeforeFix": "id=15862", "sourceAfterFix": "id=10862"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n            statistics.addRemoveTimeNano(System.nanoTime() - start);\n         }\n         return result;\n     }", "fixed": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n            statistics.addRemoveTimeNanos(System.nanoTime() - start);\n         }\n         return result;\n     }", "sourceBeforeFix": "statistics.addGetTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addGetTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedSoroushBotEndpointBuilder\n             extends\n                 AdvancedSoroushBotEndpointConsumerBuilder, AdvancedSoroushBotEndpointProducerBuilder {\n         default SoroushBotEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedSoroushBotEndpointBuilder\n             extends\n                 AdvancedSoroushBotEndpointConsumerBuilder, AdvancedSoroushBotEndpointProducerBuilder {\n         default SoroushBotEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "616550ff7616a0dabf8d5bab40c22c63f17d2bc4", "projectName": "gephi.gephi", "bugType": "More Specific If", "problem": "             }\n             public void unselect(Workspace workspace) {\n                if (model.getSelectedLayout() != null) {\n                     model.saveProperties(model.getSelectedLayout());\n                 }\n             }", "fixed": "             }\n             public void unselect(Workspace workspace) {\n                if (model != null && model.getSelectedLayout() != null) {\n                     model.saveProperties(model.getSelectedLayout());\n                 }\n             }", "sourceBeforeFix": "model.getSelectedLayout() != null", "sourceAfterFix": "model != null && model.getSelectedLayout() != null"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_cn_1() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e745\u67086\u65e5\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_cn_1() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e745\u67086\u65e5\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     }, tags={ \"pet\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid pet value\", response = Void.class) })\n    void deletePet(@PathParam(\"petId\") @ApiParam(\"Pet id to delete\") Long petId,@HeaderParam(\"api_key\")   String apiKey);\n     @GET\n     @Path(\"/findByStatus\")", "fixed": "     }, tags={ \"pet\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid pet value\", response = Void.class) })\n    void deletePet(@PathParam(\"petId\") @ApiParam(\"Pet id to delete\") Long petId,@HeaderParam(\"api_key\")   String apiKey) throws Exception;\n     @GET\n     @Path(\"/findByStatus\")", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15845, value = \"Invalid rollout plan. Server group %s has a %s value of %s; must be between 0 and 100.\")\n     String invalidRolloutPlanRange(String name, String propertyName, int value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10845, value = \"Invalid rollout plan. Server group %s has a %s value of %s; must be between 0 and 100.\")\n     String invalidRolloutPlanRange(String name, String propertyName, int value);\n     /**", "sourceBeforeFix": "id=15836", "sourceAfterFix": "id=10836"}
{"fixCommitSHA1": "73627df082ff499af4ca1c482f79e304905007eb", "projectName": "alibaba.canal", "bugType": "Same Function More Args", "problem": "                         }\n                         buf.append('\"').append(text).append('\"');\n                     } else {\n                        text = m_data.getFixString((int) m_length);\n                         buf.append('\"').append(text).append('\"');\n                     }", "fixed": "                         }\n                         buf.append('\"').append(text).append('\"');\n                     } else {\n                        text = m_data.getFixString((int) m_length, charsetName);\n                         buf.append('\"').append(text).append('\"');\n                     }", "sourceBeforeFix": "buffer.rewind().forward((int)n).getFixString((int)str_len)", "sourceAfterFix": "buffer.rewind().forward((int)n).getFixString((int)str_len,charsetName)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<DirectMessage> getSentDirectMessages() throws\n             TwitterException {\n        return DirectMessage.constructDirectMessages(get(getBaseURL() +\n                 \"direct_messages/sent.json\", new PostParameter[0], true));\n     }", "fixed": "      */\n     public ResponseList<DirectMessage> getSentDirectMessages() throws\n             TwitterException {\n        return DirectMessage.createDirectMessageList(get(getBaseURL() +\n                 \"direct_messages/sent.json\", new PostParameter[0], true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "5b13fe70c25812157a1e4432135eb9639e72bc6a", "projectName": "apache.flink", "bugType": "Wrong Function Name", "problem": " \t\tfinal Sink output = new Sink(\"output.json\").withInputs(selection);\n \t\texpectedPlan.setSinks(output);\n\t\tassertEquals(expectedPlan, actualPlan);\n \t}\n }", "fixed": " \t\tfinal Sink output = new Sink(\"output.json\").withInputs(selection);\n \t\texpectedPlan.setSinks(output);\n\t\tassertPlanEquals(expectedPlan, actualPlan);\n \t}\n }", "sourceBeforeFix": "assertEquals(expectedPlan,actualPlan)", "sourceAfterFix": "assertPlanEquals(expectedPlan,actualPlan)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15850, value = \"No handler for operation %s at address %s\")\n     String noHandlerForOperation(String operationName, PathAddress address);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10850, value = \"No handler for operation %s at address %s\")\n     String noHandlerForOperation(String operationName, PathAddress address);\n     /**", "sourceBeforeFix": "id=15871", "sourceAfterFix": "id=10871"}
{"fixCommitSHA1": "c131546eaadd07baf950bd6a44d07ee42d109e4c", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t\t\trpcEndpoint.start();\n\t\t\tCompletableFuture<Boolean> terminationFuture = rpcEndpoint.getTerminationFuture();\n \t\t\trpcService.stopService();", "fixed": " \t\t\trpcEndpoint.start();\n\t\t\tCompletableFuture<Void> terminationFuture = rpcEndpoint.getTerminationFuture();\n \t\t\trpcService.stopService();", "sourceBeforeFix": "CompletableFuture<Boolean>", "sourceAfterFix": "CompletableFuture<Void>"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface BrowseEndpointBuilder\n             extends\n                 BrowseEndpointConsumerBuilder, BrowseEndpointProducerBuilder {\n         default AdvancedBrowseEndpointBuilder advanced() {", "fixed": "     \n    public interface BrowseEndpointBuilder\n             extends\n                 BrowseEndpointConsumerBuilder, BrowseEndpointProducerBuilder {\n         default AdvancedBrowseEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "4bbd778f2b32c39e6f141485b1ca8294390d7046", "projectName": "libgdx.libgdx", "bugType": "Change Numeric Literal", "problem": " \t\tground.createFixture( groundBox, 1 );\r\n \t\tgroundBox.dispose();\r\n\t\tfor( int i = 0; i < 20; i++ )\r\n \t\t{\t\t\t\r\n \t\t\tboxes.add(createBox( ));\r\n \t\t}\t\t\t\r", "fixed": " \t\tground.createFixture( groundBox, 1 );\r\n \t\tgroundBox.dispose();\r\n\t\tfor( int i = 0; i < 100; i++ )\r\n \t\t{\t\t\t\r\n \t\t\tboxes.add(createBox( ));\r\n \t\t}\t\t\t\r", "sourceBeforeFix": "i < 20", "sourceAfterFix": "i < 100"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<Status> getHomeTimeline(Paging paging) throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/home_timeline.json\", null, paging.asPostParameterList(), true));\n     }\n     /**", "fixed": "      */\n     public ResponseList<Status> getHomeTimeline(Paging paging) throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/home_timeline.json\", null, paging.asPostParameterList(), true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",null,true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "55ed50c4975cf694828d46ee9ca32ce72a9ef913", "projectName": "clojure.clojure", "bugType": "Wrong Function Name", "problem": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 8:\r\n\t\t\treturn invoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "fixed": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 8:\r\n\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "sourceBeforeFix": "invoke(args)", "sourceAfterFix": "doInvoke(args)"}
{"fixCommitSHA1": "bdd386e699e23c48524b822b9b890b077f294c69", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     return true;\n   }\n  private boolean isRegularExpressionFirstChar(char ch) {\n     return isRegularExpressionChar(ch) && ch != '*';\n   }\n  private boolean isRegularExpressionChar(char ch) {\n     switch (ch) {\n     case '/':\n       return false;", "fixed": "     return true;\n   }\n  private static boolean isRegularExpressionFirstChar(char ch) {\n     return isRegularExpressionChar(ch) && ch != '*';\n   }\n  private static boolean isRegularExpressionChar(char ch) {\n     switch (ch) {\n     case '/':\n       return false;", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15862, value = \"Invalid '%s' value: %d, the maximum index is %d\")\n     String invalidValue(String name, int value, int maxIndex);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10862, value = \"Invalid '%s' value: %d, the maximum index is %d\")\n     String invalidValue(String name, int value, int maxIndex);\n     /**", "sourceBeforeFix": "id=15861", "sourceAfterFix": "id=10861"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15845, value = \"Invalid rollout plan. Server group %s has a %s value of %s; must be between 0 and 100.\")\n     String invalidRolloutPlanRange(String name, String propertyName, int value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10845, value = \"Invalid rollout plan. Server group %s has a %s value of %s; must be between 0 and 100.\")\n     String invalidRolloutPlanRange(String name, String propertyName, int value);\n     /**", "sourceBeforeFix": "id=15831", "sourceAfterFix": "id=10831"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface SjmsEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedSjmsEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface SjmsEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedSjmsEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "64dff91895f9df55fe3a07217a333efa4d37d92a", "projectName": "apache.hbase", "bugType": "Wrong Function Name", "problem": "     try {\n       jarFile = new JarInputStream(new FileInputStream(jarFileName));\n     } catch (IOException ioEx) {\n      LOG.error(\"Failed to look for classes in \" + jarFileName + \": \" + ioEx);\n       throw ioEx;\n     }", "fixed": "     try {\n       jarFile = new JarInputStream(new FileInputStream(jarFileName));\n     } catch (IOException ioEx) {\n      LOG.warn(\"Failed to look for classes in \" + jarFileName + \": \" + ioEx);\n       throw ioEx;\n     }", "sourceBeforeFix": "LOG.error(\"Failed to get next entry from \" + jarFileName + \": \"+ ioEx)", "sourceAfterFix": "LOG.warn(\"Failed to get next entry from \" + jarFileName + \": \"+ ioEx)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedEtcdEndpointBuilder\n             extends\n                 AdvancedEtcdEndpointConsumerBuilder, AdvancedEtcdEndpointProducerBuilder {\n         default EtcdEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedEtcdEndpointBuilder\n             extends\n                 AdvancedEtcdEndpointConsumerBuilder, AdvancedEtcdEndpointProducerBuilder {\n         default EtcdEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      * @param servers the servers that need to restart.\n      */\n     @LogMessage(level = Level.INFO)\n    @Message(id = 15807, value = \"Domain model has changed on re-connect. The following servers will need to be restarted for changes to take affect: %s\")\n     void domainModelChangedOnReConnect(Set<ServerIdentity> servers);\n     /**", "fixed": "      * @param servers the servers that need to restart.\n      */\n     @LogMessage(level = Level.INFO)\n    @Message(id = 10807, value = \"Domain model has changed on re-connect. The following servers will need to be restarted for changes to take affect: %s\")\n     void domainModelChangedOnReConnect(Set<ServerIdentity> servers);\n     /**", "sourceBeforeFix": "id=15802", "sourceAfterFix": "id=10802"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15853, value = \"Unexpected initial path key %s\")\n     IllegalStateException unexpectedInitialPathKey(String key);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10853, value = \"Unexpected initial path key %s\")\n     IllegalStateException unexpectedInitialPathKey(String key);\n     /**", "sourceBeforeFix": "id=15838", "sourceAfterFix": "id=10838"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   }\n   \n  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "b36e9ea007d7c4c464d81a2db0ceeef4d95095b1", "projectName": "dropwizard.metrics", "bugType": "Change Identifier Used", "problem": "         for (final Thread.State state : Thread.State.values()) {\n             gauges.put(name(state.toString().toLowerCase(), \"count\"),\n                       new Gauge<Object>() {\n                            @Override\n                           public Object getValue() {\n                                return getThreadCount(state);\n                            }\n                        });", "fixed": "         for (final Thread.State state : Thread.State.values()) {\n             gauges.put(name(state.toString().toLowerCase(), \"count\"),\n                       new Gauge<Integer>() {\n                            @Override\n                           public Integer getValue() {\n                                return getThreadCount(state);\n                            }\n                        });", "sourceBeforeFix": "@Override public Object getValue(){   return getThreadCount(state); } ", "sourceAfterFix": "@Override public Integer getValue(){   return getThreadCount(state); } "}
{"fixCommitSHA1": "2b571fd0a8120026c9e8d3a7933b1d5154576183", "projectName": "gephi.gephi", "bugType": "Same Function More Args", "problem": "                     System.out.println(\"Error:\" + errorType + \", message : \" + message);\n                 }\n             });\n            InputStreamReader isReader = new InputStreamReader(fileObject.getInputStream());\n             Xml10FilterReader filterReader = new Xml10FilterReader(isReader);\n             XMLStreamReader reader = inputFactory.createXMLStreamReader(filterReader);", "fixed": "                     System.out.println(\"Error:\" + errorType + \", message : \" + message);\n                 }\n             });\n            InputStreamReader isReader = new InputStreamReader(fileObject.getInputStream(), \"UTF-8\");\n             Xml10FilterReader filterReader = new Xml10FilterReader(isReader);\n             XMLStreamReader reader = inputFactory.createXMLStreamReader(filterReader);", "sourceBeforeFix": "new InputStreamReader(fileObject.getInputStream())", "sourceAfterFix": "new InputStreamReader(fileObject.getInputStream(),\"UTF-8\")"}
{"fixCommitSHA1": "8c24d882e69b50b29742953c424596716ef82fb5", "projectName": "facebook.presto", "bugType": "Change Identifier Used", "problem": "         public SourceOperator createOperator(DriverContext driverContext)\n         {\n             checkState(!closed, \"Factory is already closed\");\n            OperatorContext operatorContext = driverContext.addOperatorContext(operatorId, FilterAndProjectOperator.class.getSimpleName());\n             return new ScanFilterAndProjectOperator(\n                     operatorContext,\n                     sourceId,", "fixed": "         public SourceOperator createOperator(DriverContext driverContext)\n         {\n             checkState(!closed, \"Factory is already closed\");\n            OperatorContext operatorContext = driverContext.addOperatorContext(operatorId, ScanFilterAndProjectOperator.class.getSimpleName());\n             return new ScanFilterAndProjectOperator(\n                     operatorContext,\n                     sourceId,", "sourceBeforeFix": "FilterAndProjectOperator.class", "sourceAfterFix": "ScanFilterAndProjectOperator.class"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "1daccd54d2ff2ecdb21d8c60268600c37febbb70", "projectName": "Alluxio.alluxio", "bugType": "Change Operand ", "problem": "       mBuf.flip();\n       for (int pId = mLeft; pId < mRight; pId ++) {\n         long startTimeMs = System.currentTimeMillis();\n        TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n         OutStream os = file.getOutStream(WriteType.MUST_CACHE);\n         for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n          mBuf.array()[0] = (byte) (k + mWorkerId);\n           os.write(mBuf.array());\n         }\n         os.close();", "fixed": "       mBuf.flip();\n       for (int pId = mLeft; pId < mRight; pId ++) {\n         long startTimeMs = System.currentTimeMillis();\n        TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n         OutStream os = file.getOutStream(WriteType.MUST_CACHE);\n         for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n          mBuf.putInt(0, k + mWorkerId);\n           os.write(mBuf.array());\n         }\n         os.close();", "sourceBeforeFix": "k < THREADS", "sourceAfterFix": "k < FILES"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e7bf415427b37bbc760ff9b9c69650db8ec477e4", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnBean(RabbitTemplate.class)\n\t@ConditionalOnEnablednHealthIndicator(\"rabbit\")\n \tpublic static class RabbitHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<RabbitHealthIndicator, RabbitTemplate> {", "fixed": " \t@Configuration\n \t@ConditionalOnBean(RabbitTemplate.class)\n\t@ConditionalOnEnabledHealthIndicator(\"rabbit\")\n \tpublic static class RabbitHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<RabbitHealthIndicator, RabbitTemplate> {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"diskspace\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"diskspace\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "87a90ece4b3028d43e53a09af504efba07945eb9", "projectName": "Graylog2.graylog2-server", "bugType": "Change Identifier Used", "problem": "     @Override\n     public DateTime getLastSeen() {\n        return new DateTime(((Integer) fields.get(\"last_seen\")) * 1000L, DateTimeZone.UTC);\n     }\n     @Override", "fixed": "     @Override\n     public DateTime getLastSeen() {\n        return new DateTime(((Integer) fields.getOrDefault(\"last_seen\", 0)) * 1000L, DateTimeZone.UTC);\n     }\n     @Override", "sourceBeforeFix": "fields.get(\"last_seen\")", "sourceAfterFix": "fields.getOrDefault(\"last_seen\",0)"}
{"fixCommitSHA1": "e1626ef3aeecb1ccf7acf4056fb7bcf23243be25", "projectName": "apache.hive", "bugType": "Change Numeric Literal", "problem": "   }\n  @Test (timeout = 5000)\n   public void testFragmentSpecToTaskSpec() {\n     ByteBuffer procBb = ByteBuffer.allocate(4);", "fixed": "   }\n  @Test (timeout = 10000)\n   public void testFragmentSpecToTaskSpec() {\n     ByteBuffer procBb = ByteBuffer.allocate(4);", "sourceBeforeFix": "timeout=5000", "sourceAfterFix": "timeout=10000"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15843, value = \"Invalid rollout plan. Plan operations affect server groups %s that are not reflected in the rollout plan\")\n     String invalidRolloutPlan(Set<String> groups);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10843, value = \"Invalid rollout plan. Plan operations affect server groups %s that are not reflected in the rollout plan\")\n     String invalidRolloutPlan(Set<String> groups);\n     /**", "sourceBeforeFix": "id=15840", "sourceAfterFix": "id=10840"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15870, value = \"Unknown server group %s\")\n     IllegalStateException unknownServerGroup(String serverGroup);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10870, value = \"Unknown server group %s\")\n     IllegalStateException unknownServerGroup(String serverGroup);\n     /**", "sourceBeforeFix": "id=15870", "sourceAfterFix": "id=10870"}
{"fixCommitSHA1": "1a9bb447fd14415ef270f3dd7af8a0d4e0017177", "projectName": "Atmosphere.atmosphere", "bugType": "Change Identifier Used", "problem": "      */\n     @Override\n     public final AtmosphereResource create(AtmosphereConfig config,\n                                           DefaultAtmosphereRequest request,\n                                            AtmosphereResponse response,\n                                            AsyncSupport<?> a) {\n         AtmosphereResource r = null;", "fixed": "      */\n     @Override\n     public final AtmosphereResource create(AtmosphereConfig config,\n                                           AtmosphereRequest request,\n                                            AtmosphereResponse response,\n                                            AsyncSupport<?> a) {\n         AtmosphereResource r = null;", "sourceBeforeFix": "DefaultAtmosphereRequest request", "sourceAfterFix": "AtmosphereRequest request"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e2efffc72002968f835a0ea6a70f8e7762752b15", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": " \t@Test(expected = DuplicateConceptNameException.class)\r\n \t@Verifies(value = \"should fail if there is a duplicate unretired preferred name in the same locale\", method = \"validate(Object,Errors)\")\r\n \tpublic void validate_shouldFailIfThereIsADuplicateUnretiredPreferredNameInTheSameLocale() throws Exception {\r\n\t\tContext.setLocale(Context.getLocale());\r\n \t\tConcept concept = Context.getConceptService().getConcept(5497);\r\n \t\tConceptName preferredName = new ConceptName(\"preferred name\", Context.getLocale());\r\n \t\tconcept.setPreferredName(preferredName);\r", "fixed": " \t@Test(expected = DuplicateConceptNameException.class)\r\n \t@Verifies(value = \"should fail if there is a duplicate unretired preferred name in the same locale\", method = \"validate(Object,Errors)\")\r\n \tpublic void validate_shouldFailIfThereIsADuplicateUnretiredPreferredNameInTheSameLocale() throws Exception {\r\n\t\tContext.setLocale(new Locale(\"en\"));\r\n \t\tConcept concept = Context.getConceptService().getConcept(5497);\r\n \t\tConceptName preferredName = new ConceptName(\"preferred name\", Context.getLocale());\r\n \t\tconcept.setPreferredName(preferredName);\r", "sourceBeforeFix": "new BindException(concept,\"concept\")", "sourceAfterFix": "new BindException(newConcept,\"concept\")"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @return property value in the type of the default value\n \t * @since 1.7\n \t */\n\tpublic <T> T getGlobalPropertyValue(String propertyName, T defaultValue) throws APIException;\n \t/**\n \t * @param aClass class of object getting length for", "fixed": " \t * @return property value in the type of the default value\n \t * @since 1.7\n \t */\n\tpublic <T> T getGlobalPropertyValue(String propertyName, T defaultValue);\n \t/**\n \t * @param aClass class of object getting length for", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r", "fixed": " \t}\r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r", "sourceBeforeFix": "GL20.glUniform1(location,v)", "sourceAfterFix": "GL20.glUniform1fv(location,v)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "fixed": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "sourceBeforeFix": "GL20.glUniform3(location,toIntBuffer(v,offset,count * 3))", "sourceAfterFix": "GL20.glUniform3iv(location,toIntBuffer(v,offset,count * 3))"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedXQueryEndpointBuilder\n             extends\n                 AdvancedXQueryEndpointConsumerBuilder, AdvancedXQueryEndpointProducerBuilder {\n         default XQueryEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedXQueryEndpointBuilder\n             extends\n                 AdvancedXQueryEndpointConsumerBuilder, AdvancedXQueryEndpointProducerBuilder {\n         default XQueryEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   }\n   \n  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "9f06476cc59a99b9de7aed0f46b2d81da4f7d2b8", "projectName": "dropwizard.dropwizard", "bugType": "Same Function More Args", "problem": "             return CharStreams.toString(new InputStreamReader(connection.getInputStream()));\n         });\n        requestReceived.await();\n         Future<Void> serverStopped = executor.submit((Callable<Void>) () -> {\n             server.stop();", "fixed": "             return CharStreams.toString(new InputStreamReader(connection.getInputStream()));\n         });\n        requestReceived.await(10, TimeUnit.SECONDS);\n         Future<Void> serverStopped = executor.submit((Callable<Void>) () -> {\n             server.stop();", "sourceBeforeFix": "requestReceived.await()", "sourceAfterFix": "requestReceived.await(10,TimeUnit.SECONDS)"}
{"fixCommitSHA1": "3e3515f2af47dc0c1f9c080a257edb56f5eb72a7", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "         if (node.getNodeType() == Node.ELEMENT_NODE) {\n             Document doc = node.getOwnerDocument();\n             if (((Element) node).getNamespaceURI().equals(BLUEPRINT_NS)) {\n                doc.renameNode(node, SPRING_NS, node.getNodeName());\n             }\n         }\n         NodeList list = node.getChildNodes();", "fixed": "         if (node.getNodeType() == Node.ELEMENT_NODE) {\n             Document doc = node.getOwnerDocument();\n             if (((Element) node).getNamespaceURI().equals(BLUEPRINT_NS)) {\n                doc.renameNode(node, SPRING_NS, node.getLocalName());\n             }\n         }\n         NodeList list = node.getChildNodes();", "sourceBeforeFix": "element.getNodeName()", "sourceAfterFix": "element.getLocalName()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15841, value = \"Exception getting result from server %s: %s\")\n     String exceptionAwaitingResultFromServer(ServerIdentity server, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10841, value = \"Exception getting result from server %s: %s\")\n     String exceptionAwaitingResultFromServer(ServerIdentity server, String message);\n     /**", "sourceBeforeFix": "id=15837", "sourceAfterFix": "id=10837"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites(int page) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"favorites.json\", \"page\", String.valueOf(page), true));\n     }\n     /**", "fixed": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites(int page) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"favorites.json\", \"page\", String.valueOf(page), true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))"}
{"fixCommitSHA1": "d0d65aa1c8bf54b797318ab87e83b64159181d35", "projectName": "hazelcast.hazelcast", "bugType": "Same Function More Args", "problem": "         if (entries == null || entries.isEmpty()) {\n             return Collections.emptyList();\n         }\n        final List<Data> keyValueSequence = new ArrayList<Data>();\n         for (final Map.Entry<Object, Object> entry : entries.entrySet()) {\n             final Object key = entry.getKey();\n             final Object value = entry.getValue();", "fixed": "         if (entries == null || entries.isEmpty()) {\n             return Collections.emptyList();\n         }\n        final List<Data> keyValueSequence = new ArrayList<Data>(entries.size());\n         for (final Map.Entry<Object, Object> entry : entries.entrySet()) {\n             final Object key = entry.getKey();\n             final Object value = entry.getValue();", "sourceBeforeFix": "new ArrayList<Data>()", "sourceAfterFix": "new ArrayList<Data>(entries.size())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "db1e662933707e5be7f0838667dd062e968900e0", "projectName": "netty.netty", "bugType": "Change Identifier Used", "problem": "     private static Method updateByteBuffer(Checksum checksum) {\n         try {\n             Method method = checksum.getClass().getDeclaredMethod(\"update\", ByteBuffer.class);\n            method.invoke(method, ByteBuffer.allocate(1));\n             return method;\n         } catch (Throwable ignore) {\n             return null;", "fixed": "     private static Method updateByteBuffer(Checksum checksum) {\n         try {\n             Method method = checksum.getClass().getDeclaredMethod(\"update\", ByteBuffer.class);\n            method.invoke(checksum, ByteBuffer.allocate(1));\n             return method;\n         } catch (Throwable ignore) {\n             return null;", "sourceBeforeFix": "method.invoke(method,ByteBuffer.allocate(1))", "sourceAfterFix": "method.invoke(checksum,ByteBuffer.allocate(1))"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<Status> getHomeTimeline(Paging paging) throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/home_timeline.json\", null, paging.asPostParameterList(), true));\n     }\n     /**", "fixed": "      */\n     public ResponseList<Status> getHomeTimeline(Paging paging) throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/home_timeline.json\", null, paging.asPostParameterList(), true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",null,true))"}
{"fixCommitSHA1": "c5e7dea98700e040d6dd872015b8dac472b9aa2d", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "     public void testGetRequiredTokens() {\n         ThrowsCountCheck obj = new ThrowsCountCheck();\n         int[] expected = {TokenTypes.LITERAL_THROWS};\n        assertArrayEquals(expected, obj.getAcceptableTokens());\n     }\n }", "fixed": "     public void testGetRequiredTokens() {\n         ThrowsCountCheck obj = new ThrowsCountCheck();\n         int[] expected = {TokenTypes.LITERAL_THROWS};\n        assertArrayEquals(expected, obj.getRequiredTokens());\n     }\n }", "sourceBeforeFix": "obj.getAcceptableTokens()", "sourceAfterFix": "obj.getRequiredTokens()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15837, value = \"One of the groups does not define neither \" + SERVER_GROUP + \" nor \" + CONCURRENT_GROUPS + \": %s\")\n     String unexpectedInSeriesGroup(String rolloutPlan);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10837, value = \"One of the groups does not define neither \" + SERVER_GROUP + \" nor \" + CONCURRENT_GROUPS + \": %s\")\n     String unexpectedInSeriesGroup(String rolloutPlan);\n     /**", "sourceBeforeFix": "id=15830", "sourceAfterFix": "id=10830"}
{"fixCommitSHA1": "5955ecf032d678aa27095bd5193e24ed865b32b4", "projectName": "druid-io.druid", "bugType": "Change Identifier Used", "problem": "           @Override\n           public AggregatorFactory apply(String input)\n           {\n            return new CardinalityAggregatorFactory(name, Arrays.asList(input), byRow);\n           }\n         }\n     );", "fixed": "           @Override\n           public AggregatorFactory apply(String input)\n           {\n            return new CardinalityAggregatorFactory(input, Arrays.asList(input), byRow);\n           }\n         }\n     );", "sourceBeforeFix": "new CardinalityAggregatorFactory(name,Arrays.asList(input),byRow)", "sourceAfterFix": "new CardinalityAggregatorFactory(input,Arrays.asList(input),byRow)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public Trends getCurrentTrends() throws TwitterException {\n        return Trends.constructTrendsList(get(getSearchBaseURL() + \"trends/current.json\"\n                 , false)).get(0);\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public Trends getCurrentTrends() throws TwitterException {\n        return Trends.createTrendsList(get(getSearchBaseURL() + \"trends/current.json\"\n                 , false)).get(0);\n     }", "sourceBeforeFix": "SavedSearch.constructSavedSearches(get(getBaseURL() + \"saved_searches.json\",true))", "sourceAfterFix": "SavedSearch.createSavedSearchList(get(getBaseURL() + \"saved_searches.json\",true))"}
{"fixCommitSHA1": "b0662ce83b466318ce8dcec13428846b1b190aaf", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "             throw new IOException(\"Address is required!\");\n         }\n        ClientConnection clientConnection = connections.get(address);\n         if (clientConnection == null) {\n            final Object lock = getLock(address);\n             synchronized (lock) {\n                clientConnection = connections.get(address);\n                 if (clientConnection == null) {\n                     final ConnectionProcessor connectionProcessor = new ConnectionProcessor(address, authenticator, false);\n                     final ICompletableFuture<ClientConnection> future = executionService.submitInternal(connectionProcessor);", "fixed": "             throw new IOException(\"Address is required!\");\n         }\n        ClientConnection clientConnection = connections.get(target);\n         if (clientConnection == null) {\n            final Object lock = getLock(target);\n             synchronized (lock) {\n                clientConnection = connections.get(target);\n                 if (clientConnection == null) {\n                     final ConnectionProcessor connectionProcessor = new ConnectionProcessor(address, authenticator, false);\n                     final ICompletableFuture<ClientConnection> future = executionService.submitInternal(connectionProcessor);", "sourceBeforeFix": "getLock(address)", "sourceAfterFix": "getLock(target)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedHazelcastInstanceEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default HazelcastInstanceEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedHazelcastInstanceEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default HazelcastInstanceEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15837, value = \"One of the groups does not define neither \" + SERVER_GROUP + \" nor \" + CONCURRENT_GROUPS + \": %s\")\n     String unexpectedInSeriesGroup(String rolloutPlan);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10837, value = \"One of the groups does not define neither \" + SERVER_GROUP + \" nor \" + CONCURRENT_GROUPS + \": %s\")\n     String unexpectedInSeriesGroup(String rolloutPlan);\n     /**", "sourceBeforeFix": "id=15838", "sourceAfterFix": "id=10838"}
{"fixCommitSHA1": "7907f476688eb48f9b46434e90ef0bb02c1ea5d5", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "                 if (setJoins.add(newMemberInfo)) {\r\n                     sendProcessableTo(new Master(node.getMasterAddress()), conn);\r\n                    timeToStartJoin = System.currentTimeMillis() + (WAIT_SECONDS_BEFORE_JOIN * 1000L);\r\n                 } else {\r\n                     if (System.currentTimeMillis() > timeToStartJoin) {\r\n                         startJoin();\r", "fixed": "                 if (setJoins.add(newMemberInfo)) {\r\n                     sendProcessableTo(new Master(node.getMasterAddress()), conn);\r\n                    timeToStartJoin = System.currentTimeMillis() + WAIT_MILLIS_BEFORE_JOIN;\r\n                 } else {\r\n                     if (System.currentTimeMillis() > timeToStartJoin) {\r\n                         startJoin();\r", "sourceBeforeFix": "System.currentTimeMillis() + WAIT_SECONDS_BEFORE_JOIN + 1000", "sourceAfterFix": "System.currentTimeMillis() + WAIT_MILLIS_BEFORE_JOIN"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     @ApiOperation(value = \"Creates list of users with given input array\", notes = \"\", tags={ \"user\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Void.class) })\n    void createUsersWithListInput(@Valid List<User> body);\n     @DELETE\n     @Path(\"/{username}\")", "fixed": "     @ApiOperation(value = \"Creates list of users with given input array\", notes = \"\", tags={ \"user\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Void.class) })\n    void createUsersWithListInput(@Valid List<User> body) throws Exception;\n     @DELETE\n     @Path(\"/{username}\")", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         if (isStatisticsEnabled()) {\n             if (result) {\n                 statistics.increaseCachePuts(1);\n                statistics.addPutTimeNano(System.nanoTime() - start);\n             }\n            statistics.addGetTimeNano(System.nanoTime() - start);\n             if (isHit) {\n                 statistics.increaseCacheHits(1);\n             } else {", "fixed": "         if (isStatisticsEnabled()) {\n             if (result) {\n                 statistics.increaseCachePuts(1);\n                statistics.addPutTimeNanos(System.nanoTime() - start);\n             }\n            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (isHit) {\n                 statistics.increaseCacheHits(1);\n             } else {", "sourceBeforeFix": "statistics.addRemoveTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addRemoveTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<Status> getHomeTimeline() throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/home_timeline.json\", true));\n     }", "fixed": "      */\n     public ResponseList<Status> getHomeTimeline() throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/home_timeline.json\", true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface JSR356WebSocketEndpointBuilder\n             extends\n                 JSR356WebSocketEndpointConsumerBuilder, JSR356WebSocketEndpointProducerBuilder {\n         default AdvancedJSR356WebSocketEndpointBuilder advanced() {", "fixed": "     \n    public interface JSR356WebSocketEndpointBuilder\n             extends\n                 JSR356WebSocketEndpointConsumerBuilder, JSR356WebSocketEndpointProducerBuilder {\n         default AdvancedJSR356WebSocketEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e7bf415427b37bbc760ff9b9c69650db8ec477e4", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnBean(SolrServer.class)\n\t@ConditionalOnEnablednHealthIndicator(\"solr\")\n \tpublic static class SolrHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<SolrHealthIndicator, SolrServer> {", "fixed": " \t@Configuration\n \t@ConditionalOnBean(SolrServer.class)\n\t@ConditionalOnEnabledHealthIndicator(\"solr\")\n \tpublic static class SolrHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<SolrHealthIndicator, SolrServer> {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"rabbit\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"rabbit\")"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      * @param cause the cause of the error.\n      */\n     @LogMessage(level = Level.WARN)\n    @Message(id = 15806, value = \"Caught exception closing input stream\")\n     void caughtExceptionClosingInputStream(@Cause Throwable cause);\n     /**", "fixed": "      * @param cause the cause of the error.\n      */\n     @LogMessage(level = Level.WARN)\n    @Message(id = 10806, value = \"Caught exception closing input stream\")\n     void caughtExceptionClosingInputStream(@Cause Throwable cause);\n     /**", "sourceBeforeFix": "id=15809", "sourceAfterFix": "id=10809"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "fixed": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4fv(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4fv(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "sourceBeforeFix": "GL20.glUniformMatrix2(location,transpose,value)", "sourceAfterFix": "GL20.glUniformMatrix2fv(location,transpose,value)"}
{"fixCommitSHA1": "0187e5106dfc5034b8b1650083eab37181ff0de3", "projectName": "spring-projects.spring-boot", "bugType": "Change Modifier", "problem": " \t}\n \t@Test\n\tvoid userConfigurationBeans() {\n \t\tthis.contextRunner\n \t\t\t\t.withUserConfiguration(LiquibaseUserConfiguration.class, EmbeddedDataSourceConfiguration.class)\n \t\t\t\t.run((context) -> {", "fixed": " \t}\n \t@Test\n\tpublic void userConfigurationBeans() {\n \t\tthis.contextRunner\n \t\t\t\t.withUserConfiguration(LiquibaseUserConfiguration.class, EmbeddedDataSourceConfiguration.class)\n \t\t\t\t.run((context) -> {", "sourceBeforeFix": "0", "sourceAfterFix": "1"}
{"fixCommitSHA1": "ba477fe6b96b97474adc89e4446858392fc09fb9", "projectName": "Alluxio.alluxio", "bugType": "Change Modifier", "problem": "   private final LineageMaster mLineageMaster = AlluxioMaster.get().getLineageMaster();\nprivate LineageMasterClientRestServiceHandler() {}\n   /**\n    * @summary get the service name", "fixed": "   private final LineageMaster mLineageMaster = AlluxioMaster.get().getLineageMaster();\n  \n  public LineageMasterClientRestServiceHandler() {}\n   /**\n    * @summary get the service name", "sourceBeforeFix": "2", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  private final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "007ea4a7f2ba64fad78f78c1b798ca45455719e4", "projectName": "dropwizard.dropwizard", "bugType": "Change Identifier Used", "problem": "         final JsonFactory jsonFactory = new YAMLFactory();\n         final ObjectMapper mapper = factory.build(jsonFactory);\n        assertThat(mapper.getJsonFactory())\n                 .isSameAs(jsonFactory);\n     }", "fixed": "         final JsonFactory jsonFactory = new YAMLFactory();\n         final ObjectMapper mapper = factory.build(jsonFactory);\n        assertThat(mapper.getFactory())\n                 .isSameAs(jsonFactory);\n     }", "sourceBeforeFix": "mapper.getJsonFactory()", "sourceAfterFix": "mapper.getFactory()"}
{"fixCommitSHA1": "d2b19965df52e66385a2d7146887a44cea50330a", "projectName": "google.closure-compiler", "bugType": "Wrong Function Name", "problem": "   \n   ControlFlowGraph<Node> computeCFG() {\n    logger.info(\"Computing Control Flow Graph\");\n     Tracer tracer = newTracer(\"computeCFG\");\n     ControlFlowAnalysis cfa = new ControlFlowAnalysis(this, true, false);\n     process(cfa);", "fixed": "   \n   ControlFlowGraph<Node> computeCFG() {\n    logger.fine(\"Computing Control Flow Graph\");\n     Tracer tracer = newTracer(\"computeCFG\");\n     ControlFlowAnalysis cfa = new ControlFlowAnalysis(this, true, false);\n     process(cfa);", "sourceBeforeFix": "logger.info(\"Recording function information\")", "sourceAfterFix": "logger.fine(\"Recording function information\")"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getMentions(Paging paging) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getMentions(Paging paging) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "SavedSearch.constructSavedSearches(get(getBaseURL() + \"saved_searches.json\",true))", "sourceAfterFix": "SavedSearch.createSavedSearchList(get(getBaseURL() + \"saved_searches.json\",true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "6f4665dccdb6cdaea1da37ea2766171be0323abe", "projectName": "hazelcast.hazelcast", "bugType": "Change Numeric Literal", "problem": "                 }\n             }.start();\n         }\n        assertOpenEventually(countDownLatch, 50);\n         assertEquals(0, atomicLong.get());\n     }", "fixed": "                 }\n             }.start();\n         }\n        assertOpenEventually(countDownLatch, 300);\n         assertEquals(0, atomicLong.get());\n     }", "sourceBeforeFix": "assertOpenEventually(countDownLatch,50)", "sourceAfterFix": "assertOpenEventually(countDownLatch,300)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedAtomixSetEndpointBuilder\n             extends\n                 AdvancedAtomixSetEndpointConsumerBuilder, AdvancedAtomixSetEndpointProducerBuilder {\n         default AtomixSetEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedAtomixSetEndpointBuilder\n             extends\n                 AdvancedAtomixSetEndpointConsumerBuilder, AdvancedAtomixSetEndpointProducerBuilder {\n         default AtomixSetEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_in() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"06-05-2016\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_in() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"06-05-2016\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "26e87501eafea1777149e7314de4935114cdedf1", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   @Option(name = \"--fix\", usage = \"Fix lint warnings automatically\")\n   private boolean fix = false;\n  @Argument private final List<String> files = new ArrayList<>();\n   public static void main(String[] args) throws IOException, CmdLineException {\n     new Linter().run(args);", "fixed": "   @Option(name = \"--fix\", usage = \"Fix lint warnings automatically\")\n   private boolean fix = false;\n  @Argument private List<String> files = new ArrayList<>();\n   public static void main(String[] args) throws IOException, CmdLineException {\n     new Linter().run(args);", "sourceBeforeFix": "18", "sourceAfterFix": "2"}
{"fixCommitSHA1": "4f5a400f1287161c958720eea79143466191833d", "projectName": "checkstyle.checkstyle", "bugType": "Delete Throws Exception", "problem": "     private static ConfigurationBuilder builder;\n     @BeforeClass\n    public static void setConfigurationBuilder() throws CheckstyleException {\n         builder = new IndentationConfigurationBuilder(new File(\"src/it/\"));\n     }", "fixed": "     private static ConfigurationBuilder builder;\n     @BeforeClass\n    public static void setConfigurationBuilder() {\n         builder = new IndentationConfigurationBuilder(new File(\"src/it/\"));\n     }", "sourceBeforeFix": "9", "sourceAfterFix": "9"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15845, value = \"Invalid rollout plan. Server group %s has a %s value of %s; must be between 0 and 100.\")\n     String invalidRolloutPlanRange(String name, String propertyName, int value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10845, value = \"Invalid rollout plan. Server group %s has a %s value of %s; must be between 0 and 100.\")\n     String invalidRolloutPlanRange(String name, String propertyName, int value);\n     /**", "sourceBeforeFix": "id=15856", "sourceAfterFix": "id=10856"}
{"fixCommitSHA1": "6ee201465a3287e5700c5cba712852a8f4de4bca", "projectName": "apache.camel", "bugType": "Same Function More Args", "problem": "     }\n     protected String[] parseUri(DynamicAwareEntry entry) {\n        String u = entry.getOriginalUri();\n         boolean httpComponent = \"http\".equals(scheme) || \"https\".equals(scheme) || \"http4\".equals(scheme) || \"https4\".equals(scheme);", "fixed": "     }\n     protected String[] parseUri(DynamicAwareEntry entry) {\n        String u = entry.getUri();\n         boolean httpComponent = \"http\".equals(scheme) || \"https\".equals(scheme) || \"http4\".equals(scheme) || \"https4\".equals(scheme);", "sourceBeforeFix": "new DynamicAwareEntry(uri,properties,lenient)", "sourceAfterFix": "new DynamicAwareEntry(uri,originalUri,properties,lenient)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15857, value = \"Only 1 piece of content is currently supported (AS7-431)\")\n     String as7431();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10857, value = \"Only 1 piece of content is currently supported (AS7-431)\")\n     String as7431();\n     /**", "sourceBeforeFix": "id=15858", "sourceAfterFix": "id=10858"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsCsv(String path, long millis, OUT endTuple) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, endTuple);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsCsv(String path, long millis, OUT endTuple) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, endTuple);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15870, value = \"Unknown server group %s\")\n     IllegalStateException unknownServerGroup(String serverGroup);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10870, value = \"Unknown server group %s\")\n     IllegalStateException unknownServerGroup(String serverGroup);\n     /**", "sourceBeforeFix": "id=15871", "sourceAfterFix": "id=10871"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleActionsPredicatesOptions_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(239);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");", "fixed": " \tpublic void testMultipleActionsPredicatesOptions_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(238);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");", "sourceBeforeFix": "new StringBuilder(239)", "sourceAfterFix": "new StringBuilder(238)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  private final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "88e52c09c7f51122b38779f543abe6daa71e30eb", "projectName": "Atmosphere.atmosphere", "bugType": "Change Identifier Used", "problem": "      * @return A {@link Broadcastable} used to broadcast events.\n      */\n     @POST\n    @Broadcast(value = {StringFilterAggregator.class})\n     @Path(\"aggregate\")\n     public Broadcastable aggregate(@FormParam(\"message\") String message) {\n         return broadcast(message);", "fixed": "      * @return A {@link Broadcastable} used to broadcast events.\n      */\n     @POST\n    @Broadcast(filters = {StringFilterAggregator.class})\n     @Path(\"aggregate\")\n     public Broadcastable aggregate(@FormParam(\"message\") String message) {\n         return broadcast(message);", "sourceBeforeFix": "value={StringFilterAggregator.class}", "sourceAfterFix": "filters={StringFilterAggregator.class}"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface OptaPlannerEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedOptaPlannerEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface OptaPlannerEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedOptaPlannerEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsCsv(String path, int batchSize) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), batchSize, null);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsCsv(String path, int batchSize) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), batchSize, null);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "5b13fe70c25812157a1e4432135eb9639e72bc6a", "projectName": "apache.flink", "bugType": "Wrong Function Name", "problem": " \t\tfinal Sink output = new Sink(\"output.json\").withInputs(selection);\n \t\texpectedPlan.setSinks(output);\n\t\tassertEquals(expectedPlan, actualPlan);\n \t}\n \t@Test", "fixed": " \t\tfinal Sink output = new Sink(\"output.json\").withInputs(selection);\n \t\texpectedPlan.setSinks(output);\n\t\tassertPlanEquals(expectedPlan, actualPlan);\n \t}\n \t@Test", "sourceBeforeFix": "assertEquals(expectedPlan,actualPlan)", "sourceAfterFix": "assertPlanEquals(expectedPlan,actualPlan)"}
{"fixCommitSHA1": "9771ba62390a56363b20e52f12a8b9b34c51da62", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "     public void testSamplingFromExchangeStream() throws Exception {\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedMessageCount(2);\n         mock.setResultWaitTime(3000);\n         List<Exchange> sentExchanges = new ArrayList<Exchange>();", "fixed": "     public void testSamplingFromExchangeStream() throws Exception {\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedMinimumMessageCount(2);\n         mock.setResultWaitTime(3000);\n         List<Exchange> sentExchanges = new ArrayList<Exchange>();", "sourceBeforeFix": "mock.expectedMessageCount(10)", "sourceAfterFix": "mock.expectedMinimumMessageCount(10)"}
{"fixCommitSHA1": "7109f6f55968c830c5f43ff798e106ef2f14c71c", "projectName": "apache.camel", "bugType": "Change Boolean Literal", "problem": "                 eq((byte) 0),\n                 eq(new GeneralDataCoding(\n                         false,\n                        false,\n                         MessageClass.CLASS1,\n                         Alphabet.ALPHA_DEFAULT)),\n                 eq((byte) 0),", "fixed": "                 eq((byte) 0),\n                 eq(new GeneralDataCoding(\n                         false,\n                        true,\n                         MessageClass.CLASS1,\n                         Alphabet.ALPHA_DEFAULT)),\n                 eq((byte) 0),", "sourceBeforeFix": "new GeneralDataCoding(false,false,MessageClass.CLASS1,Alphabet.ALPHA_DEFAULT)", "sourceAfterFix": "new GeneralDataCoding(false,true,MessageClass.CLASS1,Alphabet.ALPHA_DEFAULT)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": " };\n   \n  private final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler", "fixed": " };\n   \n  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface MQEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedMQEndpointBuilder advanced() {\n             return (AdvancedMQEndpointBuilder) this;\n         }", "fixed": "     \n    public interface MQEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedMQEndpointBuilder advanced() {\n             return (AdvancedMQEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "c26f75c7940a77e85f38406258c453a08ff75376", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "             }\n         });\n         MockEndpoint result = MockEndpoint.resolve(ctx, \"mock:result\");\n        registry.put(\"amazonSQSClient\", clientMock);\n         clientMock.setScheduler(ctx.getExecutorServiceManager().newScheduledThreadPool(clientMock, \"ClientMock Scheduler\", 1));\n         result.expectedMessageCount(1);", "fixed": "             }\n         });\n         MockEndpoint result = MockEndpoint.resolve(ctx, \"mock:result\");\n        registry.bind(\"amazonSQSClient\", clientMock);\n         clientMock.setScheduler(ctx.getExecutorServiceManager().newScheduledThreadPool(clientMock, \"ClientMock Scheduler\", 1));\n         result.expectedMessageCount(1);", "sourceBeforeFix": "registry.put(\"amazonSQSClient\",clientMock)", "sourceAfterFix": "registry.bind(\"amazonSQSClient\",clientMock)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform3(location, v);\r\n \t}\r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform3(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r", "fixed": " \t}\r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform3iv(location, v);\r\n \t}\r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform3iv(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r", "sourceBeforeFix": "GL20.glUniform4(location,toFloatBuffer(v,offset,count << 2))", "sourceAfterFix": "GL20.glUniform4fv(location,toFloatBuffer(v,offset,count << 2))"}
{"fixCommitSHA1": "e16bf78360f5a93cbc6db48fa486f445e4b9a21a", "projectName": "openhab.openhab", "bugType": "Change Identifier Used", "problem": "     @Test\n     public void testGetStateToBindingValueConverter() {\n         NumberItem item = new NumberItem(NUMBER_ITEM_NAME);\n        converterLookup.addCustomConverter(item, IntegerDecimalConverter.class);\n         StateConverterMap converter = converterLookup.getStateToBindingValueConverter(item, null);\n         assertEquals(IntegerDecimalConverter.class, converter.get(\"bla\").getClass());\n     }", "fixed": "     @Test\n     public void testGetStateToBindingValueConverter() {\n         NumberItem item = new NumberItem(NUMBER_ITEM_NAME);\n        converterLookup.addCustomConverter(NUMBER_ITEM_NAME, IntegerDecimalConverter.class);\n         StateConverterMap converter = converterLookup.getStateToBindingValueConverter(item, null);\n         assertEquals(IntegerDecimalConverter.class, converter.get(\"bla\").getClass());\n     }", "sourceBeforeFix": "converterLookup.addCustomConverter(item,IntegerDecimalConverter.class)", "sourceAfterFix": "converterLookup.addCustomConverter(NUMBER_ITEM_NAME,IntegerDecimalConverter.class)"}
{"fixCommitSHA1": "e013db0d019952fb54d35a42cb786c8ebb962711", "projectName": "hazelcast.hazelcast", "bugType": "Change Modifier", "problem": "         }\n     }\n    private final class GcMetrics {\n         final long minorCount;\n         final long minorTime;\n         final long majorCount;", "fixed": "         }\n     }\n    private static final class GcMetrics {\n         final long minorCount;\n         final long minorTime;\n         final long majorCount;", "sourceBeforeFix": "18", "sourceAfterFix": "26"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "c7fd539c43b8e027a74d0f9118e9f3d48bc930d1", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "                             clusterMap.delete(buildAttributeName(entry.getKey()));\n                             iterator.remove();\n                         } else {\n                            clusterMap.put(buildAttributeName(entry.getKey()), cacheEntry.value);\n                             cacheEntry.dirty = false;\n                         }\n                     }", "fixed": "                             clusterMap.delete(buildAttributeName(entry.getKey()));\n                             iterator.remove();\n                         } else {\n                            clusterMap.set(buildAttributeName(entry.getKey()), cacheEntry.value);\n                             cacheEntry.dirty = false;\n                         }\n                     }", "sourceBeforeFix": "getClusterMap().put(buildAttributeName(name),value)", "sourceAfterFix": "getClusterMap().set(buildAttributeName(name),value)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "44fb6541bca9101e1144c25fc5561ebf8b06dfa0", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Less Specific If", "problem": "         int port = p;\n         if (port == -1) {\n             final String protocol = uri.getScheme().toLowerCase();\n            if (\"http\".equals(protocol)) {\n                 port = 80;\n            } else if (\"https\".equals(protocol)) {\n                 port = 443;\n             } else {\n                 throw new IllegalArgumentException(\"Unknown protocol: \" + protocol);", "fixed": "         int port = p;\n         if (port == -1) {\n             final String protocol = uri.getScheme().toLowerCase();\n            if (\"http\".equals(protocol) || \"ws\".equals(protocol)) {\n                 port = 80;\n            } else if (\"https\".equals(protocol) || \"wss\".equals(protocol)) {\n                 port = 443;\n             } else {\n                 throw new IllegalArgumentException(\"Unknown protocol: \" + protocol);", "sourceBeforeFix": "\"https\".equals(protocol)", "sourceAfterFix": "\"https\".equals(protocol) || \"wss\".equals(protocol)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 15830, value = \"Registration of remote hosts is not supported on slave host controllers\")\n     String slaveControllerCannotAcceptOtherSlaves();\n     /**", "fixed": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 10830, value = \"Registration of remote hosts is not supported on slave host controllers\")\n     String slaveControllerCannotAcceptOtherSlaves();\n     /**", "sourceBeforeFix": "id=15872", "sourceAfterFix": "id=10872"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetsOfMe(Paging paging) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweets_of_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetsOfMe(Paging paging) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweets_of_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/home_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/home_timeline.json\",true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "423fca2f16ef73c1e4bce7cf11660a510be1456e", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Current assignment of \" +\n          Bytes.toString(info.getRegionName()) +\n           \" is not valid: serverInfo: \" + storedInfo + \", passed startCode: \" +\n           startCode + \", storedInfo.startCode: \" +\n           ((storedInfo != null)? storedInfo.getStartCode(): -1) +", "fixed": "       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Current assignment of \" +\n          info.getRegionNameAsString() +\n           \" is not valid: serverInfo: \" + storedInfo + \", passed startCode: \" +\n           startCode + \", storedInfo.startCode: \" +\n           ((storedInfo != null)? storedInfo.getStartCode(): -1) +", "sourceBeforeFix": "info.getRegionName()", "sourceAfterFix": "info.getRegionNameAsString()"}
{"fixCommitSHA1": "c888434580c601ac9c4734e19d8eefac63518031", "projectName": "swagger-api.swagger-codegen", "bugType": "Change Identifier Used", "problem": "             + (StringUtils.isEmpty(modelPackage) ? \"\" : (modelPackage + \"/\")) + dataType;\n     }\n     private String getJSDocTypeWithBraces(CodegenModel cm, CodegenProperty cp) {\n         return \"{\" + getJSDocType(cm, cp) + \"}\";\n     }\n     private String getJSDocType(CodegenModel cm, CodegenProperty cp) {\n         if (Boolean.TRUE.equals(cp.isContainer)) {", "fixed": "             + (StringUtils.isEmpty(modelPackage) ? \"\" : (modelPackage + \"/\")) + dataType;\n     }\n    \n     private String getJSDocType(CodegenModel cm, CodegenProperty cp) {\n         if (Boolean.TRUE.equals(cp.isContainer)) {", "sourceBeforeFix": "getJSDocTypeWithBraces(cp)", "sourceAfterFix": "getJSDocType(cp)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should get property value given valid property name\n \t * @should get property in case insensitive way\n \t */\n\tpublic String getGlobalProperty(String propertyName) throws APIException;\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>", "fixed": " \t * @should get property value given valid property name\n \t * @should get property in case insensitive way\n \t */\n\tpublic String getGlobalProperty(String propertyName);\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public Trends getCurrentTrends(boolean excludeHashTags) throws TwitterException {\n        return Trends.constructTrendsList(get(getSearchBaseURL() + \"trends/current.json\"\n                 + (excludeHashTags ? \"?exclude=hashtags\" : \"\"), false)).get(0);\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public Trends getCurrentTrends(boolean excludeHashTags) throws TwitterException {\n        return Trends.createTrendsList(get(getSearchBaseURL() + \"trends/current.json\"\n                 + (excludeHashTags ? \"?exclude=hashtags\" : \"\"), false)).get(0);\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites/\" + id+ \".json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites/\" + id+ \".json\",new PostParameter[0],true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "f8c20919f9c2e18e48142c2712e34298f98b983e", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Test\n \tpublic void startServletAndFilter() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n\t\tthis.container = factory.getEmbdeddedServletContainer(\n \t\t\t\texampleServletRegistration(), new FilterRegistrationBean(\n \t\t\t\t\t\tnew ExampleFilter()));\nassertThat(getResponse(\"http:", "fixed": " \t@Test\n \tpublic void startServletAndFilter() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n\t\tthis.container = factory.getEmbeddedServletContainer(\n \t\t\t\texampleServletRegistration(), new FilterRegistrationBean(\n \t\t\t\t\t\tnew ExampleFilter()));\nassertThat(getResponse(\"http:", "sourceBeforeFix": "factory.getEmbdeddedServletContainer(initializers[0],initializers[1])", "sourceAfterFix": "factory.getEmbeddedServletContainer(initializers[0],initializers[1])"}
{"fixCommitSHA1": "3841ff0cd87dd048dff43379df81153ed9bcf265", "projectName": "hazelcast.hazelcast", "bugType": "Change Numeric Literal", "problem": "     @Test\n     public void sync_whenCallTimeout_thenOperationTimeoutException() throws Exception {\n        long callTimeoutMs = 5000;\n         Config config = new Config().setProperty(GroupProperty.OPERATION_CALL_TIMEOUT_MILLIS.getName(), \"\" + callTimeoutMs);\n         TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(2);\n         HazelcastInstance local = factory.newHazelcastInstance(config);", "fixed": "     @Test\n     public void sync_whenCallTimeout_thenOperationTimeoutException() throws Exception {\n        long callTimeoutMs = 10000;\n         Config config = new Config().setProperty(GroupProperty.OPERATION_CALL_TIMEOUT_MILLIS.getName(), \"\" + callTimeoutMs);\n         TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(2);\n         HazelcastInstance local = factory.newHazelcastInstance(config);", "sourceBeforeFix": "callTimeoutMs=5000", "sourceAfterFix": "callTimeoutMs=10000"}
{"fixCommitSHA1": "ffabf9ba9b70baa679cca6cf804ef4ec275fdccc", "projectName": "apache.hbase", "bugType": "Change Numeric Literal", "problem": "           numKeys++;\n         } while (numKeys < batchSize);\nif (numKeys > 1) {\n           readKey(keysForThisReader);\n           numUniqueKeysVerified.getAndAdd(readingRandomKeyStartIndex == -1 ?", "fixed": "           numKeys++;\n         } while (numKeys < batchSize);\nif (numKeys > 0) {\n           readKey(keysForThisReader);\n           numUniqueKeysVerified.getAndAdd(readingRandomKeyStartIndex == -1 ?", "sourceBeforeFix": "numKeys > 1", "sourceAfterFix": "numKeys > 0"}
{"fixCommitSHA1": "0273c2288d39777528ece72ffa47c0b8790b42ab", "projectName": "libgdx.libgdx", "bugType": "More Specific If", "problem": " \t\t\t\tint i = start;\n \t\t\t\tfor (; i < end; i++)\n \t\t\t\t\tif (glyphPositions[i] > x) break;\n\t\t\t\tif (glyphPositions[i] - x <= x - glyphPositions[i - 1]) return i;\n \t\t\t\treturn Math.max(0, i - 1);\n \t\t\t}\n \t\t} else {", "fixed": " \t\t\t\tint i = start;\n \t\t\t\tfor (; i < end; i++)\n \t\t\t\t\tif (glyphPositions[i] > x) break;\n\t\t\t\tif (i > 0 && glyphPositions[i] - x <= x - glyphPositions[i - 1]) return i;\n \t\t\t\treturn Math.max(0, i - 1);\n \t\t\t}\n \t\t} else {", "sourceBeforeFix": "glyphPositions[i] - x <= x - glyphPositions[i - 1]", "sourceAfterFix": "i > 0 && glyphPositions[i] - x <= x - glyphPositions[i - 1]"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "a35860eadb4400f069e306ccd76f1a19ecfb3ba1", "projectName": "google.guava", "bugType": "Change Identifier Used", "problem": "   Set<E> edgesConnecting(N node);\n   \n  N oppositeNode(Object edge);\n   /**\n    * Remove {@code edge} from the set of incoming edges. Returns the former predecessor node.", "fixed": "   Set<E> edgesConnecting(N node);\n   \n  N adjacentNode(E edge);\n   /**\n    * Remove {@code edge} from the set of incoming edges. Returns the former predecessor node.", "sourceBeforeFix": "Object edge", "sourceAfterFix": "E edge"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "9f0d922f042d7342252ad2e1476ae45002c89cfd", "projectName": "openhab.openhab", "bugType": "Change Numeric Literal", "problem": "             }\r\n             if (bulb > 5) {\r\n                 sendOn(bulb, bridgeId);\r\n                Thread.sleep(50);\r\n                 String messageBytes = \"40:\" + Integer.toHexString(milightColorNo) + \":55\";\r\n                 sendMessage(messageBytes, bridgeId);\r\n             }\r", "fixed": "             }\r\n             if (bulb > 5) {\r\n                 sendOn(bulb, bridgeId);\r\n                Thread.sleep(100);\r\n                 String messageBytes = \"40:\" + Integer.toHexString(milightColorNo) + \":55\";\r\n                 sendMessage(messageBytes, bridgeId);\r\n             }\r", "sourceBeforeFix": "Thread.sleep(50)", "sourceAfterFix": "Thread.sleep(100)"}
{"fixCommitSHA1": "0f8c0e4ff5f80aab6ab653c9aaa5a97812d2ec7c", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "     @Resource\n     private ConnectionFactory defaultConnectionFactory;\n    @Resource(name = \"java:/ConnectionFactory\")\n     private ConnectionFactory regularConnectionFactory;\n     public void sendWithDefaultJMSConnectionFactory(Destination destination, String text) throws Exception {", "fixed": "     @Resource\n     private ConnectionFactory defaultConnectionFactory;\n    @Resource(lookup = \"java:/ConnectionFactory\")\n     private ConnectionFactory regularConnectionFactory;\n     public void sendWithDefaultJMSConnectionFactory(Destination destination, String text) throws Exception {", "sourceBeforeFix": "name=\"java:/ConnectionFactory\"", "sourceAfterFix": "lookup=\"java:/ConnectionFactory\""}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15842, value = \"Invalid rollout plan. %s is not a valid child of node %s\")\n     String invalidRolloutPlan(ModelNode modelNode, String nodeName);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10842, value = \"Invalid rollout plan. %s is not a valid child of node %s\")\n     String invalidRolloutPlan(ModelNode modelNode, String nodeName);\n     /**", "sourceBeforeFix": "id=15842", "sourceAfterFix": "id=10842"}
{"fixCommitSHA1": "9a0a814c76eb7b63376625513c16a8c91c045afb", "projectName": "openhab.openhab", "bugType": "Change Numeric Literal", "problem": "     @Override\r\n     public byte[] decodeMessage() {\r\n        byte[] data = new byte[10];\r\n         data[0] = 0x0B;\r\n         data[1] = RFXComBaseMessage.PacketType.RAIN.toByte();\r", "fixed": "     @Override\r\n     public byte[] decodeMessage() {\r\n        byte[] data = new byte[12];\r\n         data[0] = 0x0B;\r\n         data[1] = RFXComBaseMessage.PacketType.RAIN.toByte();\r", "sourceBeforeFix": "new byte[10]", "sourceAfterFix": "new byte[12]"}
{"fixCommitSHA1": "d07ad6127eeaed8db9233a12731e9c7dce2ec2c9", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": " \t\t\tlog.debug(\"Current thread: \" + Thread.currentThread());\r\n \t\t\tlog.debug(\"Creating the encounter object\");\r\n \t\t}\r\n\t\tContext.getEncounterService().createEncounter(encounter);\r", "fixed": " \t\t\tlog.debug(\"Current thread: \" + Thread.currentThread());\r\n \t\t\tlog.debug(\"Creating the encounter object\");\r\n \t\t}\r\n\t\tContext.getEncounterService().saveEncounter(encounter);\r", "sourceBeforeFix": "Context.getEncounterService().createEncounter(encounter)", "sourceAfterFix": "Context.getEncounterService().saveEncounter(encounter)"}
{"fixCommitSHA1": "dc936e03bc02c2ac536b2929b676594bebb7124f", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "         }\n         if (timeoutCheckerExecutorService != null) {\n            camelContext.getExecutorServiceManager().shutdownNow(timeoutCheckerExecutorService);\n         }\n         ServiceHelper.stopServices(timeoutMap, processor, deadLetterProducerTemplate);", "fixed": "         }\n         if (timeoutCheckerExecutorService != null) {\n            camelContext.getExecutorServiceManager().shutdown(timeoutCheckerExecutorService);\n         }\n         ServiceHelper.stopServices(timeoutMap, processor, deadLetterProducerTemplate);", "sourceBeforeFix": "camelContext.getExecutorServiceManager().shutdownNow(timeoutCheckerExecutorService)", "sourceAfterFix": "camelContext.getExecutorServiceManager().shutdown(timeoutCheckerExecutorService)"}
{"fixCommitSHA1": "49f1caa69fb438d1fc9c8413da4a5bb517a63600", "projectName": "alibaba.dubbo", "bugType": "Change Identifier Used", "problem": "                 new ExponentialBackoffRetry(1000, 3));\n         client.start();\n        testConsumerConfig();", "fixed": "                 new ExponentialBackoffRetry(1000, 3));\n         client.start();\n        testProviderConfig();", "sourceBeforeFix": "testConsumerConfig()", "sourceAfterFix": "testProviderConfig()"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "         if (isStatisticsEnabled()) {\n             if (result) {\n                 statistics.increaseCachePuts(1);\n                statistics.addPutTimeNano(System.nanoTime() - start);\n             }\n            statistics.addGetTimeNano(System.nanoTime() - start);\n             if (isHit) {\n                 statistics.increaseCacheHits(1);\n             } else {", "fixed": "         if (isStatisticsEnabled()) {\n             if (result) {\n                 statistics.increaseCachePuts(1);\n                statistics.addPutTimeNanos(System.nanoTime() - start);\n             }\n            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (isHit) {\n                 statistics.increaseCacheHits(1);\n             } else {", "sourceBeforeFix": "statistics.addPutTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addPutTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "ede290d6bafc2d01786e0b9551b7eaf4ea313959", "projectName": "clojure.clojure", "bugType": "Change Binary Operator", "problem": " \t\t\t{\r\n \t\t\ta[i] = s.first();\r\n \t\t\t}\r\n\t\tif(a.length >= count())\r\n \t\t\ta[count()] = null;\r\n \t\treturn a;\r\n \t\t}\r", "fixed": " \t\t\t{\r\n \t\t\ta[i] = s.first();\r\n \t\t\t}\r\n\t\tif(a.length > count())\r\n \t\t\ta[count()] = null;\r\n \t\treturn a;\r\n \t\t}\r", "sourceBeforeFix": "a.length >= count()", "sourceAfterFix": "a.length > count()"}
{"fixCommitSHA1": "5038fc76c950029c78681dff816d7465f6acbb91", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "       long size = 0;\n       for (Cell c : results) {\n        size += CellUtil.estimatedHeapSizeOf(c);\n       }\n       return size;", "fixed": "       long size = 0;\n       for (Cell c : results) {\n        size += CellUtil.estimatedHeapSizeOfWithoutTags(c);\n       }\n       return size;", "sourceBeforeFix": "CellUtil.estimatedHeapSizeOf(c)", "sourceAfterFix": "CellUtil.estimatedHeapSizeOfWithoutTags(c)"}
{"fixCommitSHA1": "546f336e25b26d072f96e2cda139b885858ed5b0", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "                 if (!currentConfigHash.equals(cachedConfigHash)) {\n                     details.clear();\n                    details.put(CONFIG_HASH_KEY, currentConfigHash);\n                 }\n             }\n             finally {", "fixed": "                 if (!currentConfigHash.equals(cachedConfigHash)) {\n                     details.clear();\n                    details.setProperty(CONFIG_HASH_KEY, currentConfigHash);\n                 }\n             }\n             finally {", "sourceBeforeFix": "details.put(fileName,Long.toString(timestamp))", "sourceAfterFix": "details.setProperty(fileName,Long.toString(timestamp))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15837, value = \"One of the groups does not define neither \" + SERVER_GROUP + \" nor \" + CONCURRENT_GROUPS + \": %s\")\n     String unexpectedInSeriesGroup(String rolloutPlan);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10837, value = \"One of the groups does not define neither \" + SERVER_GROUP + \" nor \" + CONCURRENT_GROUPS + \": %s\")\n     String unexpectedInSeriesGroup(String rolloutPlan);\n     /**", "sourceBeforeFix": "id=15850", "sourceAfterFix": "id=10850"}
{"fixCommitSHA1": "546f336e25b26d072f96e2cda139b885858ed5b0", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "      * @param timestamp the timestamp of the file\n      */\n     void put(String fileName, long timestamp) {\n        details.put(fileName, Long.toString(timestamp));\n     }\n     /**", "fixed": "      * @param timestamp the timestamp of the file\n      */\n     void put(String fileName, long timestamp) {\n        details.setProperty(fileName, Long.toString(timestamp));\n     }\n     /**", "sourceBeforeFix": "details.put(CONFIG_HASH_KEY,currentConfigHash)", "sourceAfterFix": "details.setProperty(CONFIG_HASH_KEY,currentConfigHash)"}
{"fixCommitSHA1": "619ff2bc073d1b8859c8c8e1fa351b7858529670", "projectName": "Atmosphere.atmosphere", "bugType": "Change Operand ", "problem": "     @Override\n     public String toString() {\n        return END + \" End Message Interceptor\";\n     }\n }", "fixed": "     @Override\n     public String toString() {\n        return end + \" End Message Interceptor\";\n     }\n }", "sourceBeforeFix": "data + END", "sourceAfterFix": "data + end"}
{"fixCommitSHA1": "a7f54a539a4c8f92f4895934480061a2ccbcd499", "projectName": "wildfly.wildfly", "bugType": "Wrong Function Name", "problem": "     }\n     private static void writeAttribute(XMLExtendedStreamWriter writer, ModelNode model, Attribute attribute) throws XMLStreamException {\n        attribute.getDefinition().getAttributeMarshaller().marshallAsAttribute(attribute.getDefinition(), model, true, writer);\n     }\n     private static void writeElement(XMLExtendedStreamWriter writer, ModelNode model, Attribute attribute) throws XMLStreamException {\n        attribute.getDefinition().getAttributeMarshaller().marshallAsElement(attribute.getDefinition(), model, true, writer);\n     }\n }", "fixed": "     }\n     private static void writeAttribute(XMLExtendedStreamWriter writer, ModelNode model, Attribute attribute) throws XMLStreamException {\n        attribute.getDefinition().getMarshaller().marshallAsAttribute(attribute.getDefinition(), model, true, writer);\n     }\n     private static void writeElement(XMLExtendedStreamWriter writer, ModelNode model, Attribute attribute) throws XMLStreamException {\n        attribute.getDefinition().getMarshaller().marshallAsElement(attribute.getDefinition(), model, true, writer);\n     }\n }", "sourceBeforeFix": "attribute.getDefinition().getAttributeMarshaller()", "sourceAfterFix": "attribute.getDefinition().getMarshaller()"}
{"fixCommitSHA1": "e04a3bf7703544cf5012eb2f55626af8e0a2cb8c", "projectName": "apache.flink", "bugType": "Delete Throws Exception", "problem": " \t\t}\n \t\t@Override\n\t\tpublic List<Integer> snapshotState(long checkpointId, long timestamp) throws Exception {\n \t\t\treturn Collections.singletonList(saveRecordCnt);\n \t\t}\n \t\t@Override\n\t\tpublic void restoreState(List<Integer> state) throws Exception {\n \t\t\tfor (Integer i : state) {\n \t\t\t\tsaveRecordCnt += i;\n \t\t\t}", "fixed": " \t\t}\n \t\t@Override\n\t\tpublic List<Integer> snapshotState(long checkpointId, long timestamp) {\n \t\t\treturn Collections.singletonList(saveRecordCnt);\n \t\t}\n \t\t@Override\n\t\tpublic void restoreState(List<Integer> state) {\n \t\t\tfor (Integer i : state) {\n \t\t\t\tsaveRecordCnt += i;\n \t\t\t}", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 15832, value = \"There is already a registered host named '%s'\")\n     String slaveAlreadyRegistered(String slaveName);\n     /**", "fixed": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 10832, value = \"There is already a registered host named '%s'\")\n     String slaveAlreadyRegistered(String slaveName);\n     /**", "sourceBeforeFix": "id=15868", "sourceAfterFix": "id=10868"}
{"fixCommitSHA1": "06f8fe87421493280f6602aeb73153e677844542", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t\tfor (int i = 0; i < noOfTasks; i++) {\n \t\t\tfor (int j = 0; j < 2 + i; j++) {\n\t\t\t\tfinal String part = new Path(bucketPath, \"test-\" + i + '-' + j).toString();\n \t\t\t\tAssert.assertTrue(paths.contains(part));\n \t\t\t\tpaths.remove(part);\n \t\t\t}", "fixed": " \t\tfor (int i = 0; i < noOfTasks; i++) {\n \t\t\tfor (int j = 0; j < 2 + i; j++) {\n\t\t\t\tfinal String part = new Path(bucketPath, \"test-\" + i + '-' + j).getPath();\n \t\t\t\tAssert.assertTrue(paths.contains(part));\n \t\t\t\tpaths.remove(part);\n \t\t\t}", "sourceBeforeFix": "(new Path(testBucket.getParent(),\".test.inprogress\")).toString()", "sourceAfterFix": "(new Path(testBucket.getParent(),\".test.inprogress\")).getPath()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "3757a700a89638e5747d966bdaa8266b62c974c8", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "     assertEquals(encoded, encoding.encode(bytes));\n   }\n  private void testDecodes(BaseEncoding encoding, String encoded, String decoded) {\n     byte[] bytes;\n     try {\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();", "fixed": "     assertEquals(encoded, encoding.encode(bytes));\n   }\n  private static void testDecodes(BaseEncoding encoding, String encoded, String decoded) {\n     byte[] bytes;\n     try {\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();", "sourceBeforeFix": "1", "sourceAfterFix": "9"}
{"fixCommitSHA1": "de0c4d4c37435ce0c7287cd6846dde492ca1c51c", "projectName": "libgdx.libgdx", "bugType": "Change Binary Operator", "problem": " \t\t\t\t}\n \t\t\t}\n\t\t\tif (!((min1 < min2 && max1 > min2) || (min2 < min1 && max2 > min1))) {\n \t\t\t\treturn false;\n \t\t\t} else {\n \t\t\t\tfloat o = Math.min(max1, max2) - Math.max(min1, min2);", "fixed": " \t\t\t\t}\n \t\t\t}\n\t\t\tif (!((min1 <= min2 && max1 >= min2) || (min2 <= min1 && max2 >= min1))) {\n \t\t\t\treturn false;\n \t\t\t} else {\n \t\t\t\tfloat o = Math.min(max1, max2) - Math.max(min1, min2);", "sourceBeforeFix": "min1 < min2", "sourceAfterFix": "min1 <= min2"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface ClientEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedClientEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface ClientEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedClientEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetsOfMe(Paging paging) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweets_of_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetsOfMe(Paging paging) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweets_of_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))"}
{"fixCommitSHA1": "a4c66dc2824221d05e1fcfd54e4f1f4e2c125c40", "projectName": "netty.netty", "bugType": "Wrong Function Name", "problem": "     @Override\n     protected void wakeup(boolean inEventLoop) {\n        if (wakenUp.compareAndSet(false, true)) {\n             selector.wakeup();\n         }\n     }", "fixed": "     @Override\n     protected void wakeup(boolean inEventLoop) {\n        if (!inEventLoop && wakenUp.compareAndSet(false, true)) {\n             selector.wakeup();\n         }\n     }", "sourceBeforeFix": "processSelectedKeys()", "sourceAfterFix": "runAllTasks()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   }\n   \n  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "a8513817db3153d638e818e9a27b0e2e1eed3bdc", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "             beanMethodMap.put(op.getIDLName(), new SkeletonStrategy(method));\n             final OperationAnalysis setop = remoteAttrs[i].getMutatorAnalysis();\n             if (setop != null) {\n                logger.debug(\"    \" + op.getJavaName() + \"\\n                \" + op.getIDLName());\n                 final Method realSetmethod = translateMethod(deploymentReflectionIndex, setop);\n                beanMethodMap.put(op.getIDLName(), new SkeletonStrategy(realSetmethod));\n             }\n         }", "fixed": "             beanMethodMap.put(op.getIDLName(), new SkeletonStrategy(method));\n             final OperationAnalysis setop = remoteAttrs[i].getMutatorAnalysis();\n             if (setop != null) {\n                logger.debug(\"    \" + setop.getJavaName() + \"\\n                \" + setop.getIDLName());\n                 final Method realSetmethod = translateMethod(deploymentReflectionIndex, setop);\n                beanMethodMap.put(setop.getIDLName(), new SkeletonStrategy(realSetmethod));\n             }\n         }", "sourceBeforeFix": "op.getJavaName()", "sourceAfterFix": "setop.getJavaName()"}
{"fixCommitSHA1": "3dddcc4cdf4a74ddbd4607c6aaee5bdd8ac46c27", "projectName": "gephi.gephi", "bugType": "Change Modifier", "problem": "     }\n     @Override\n    public void resetSelection() {\n         resetNodesSelection();\n         resetEdgesSelection();", "fixed": "     }\n     @Override\n    public synchronized void resetSelection() {\n         resetNodesSelection();\n         resetEdgesSelection();", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedKafkaEndpointBuilder\n             extends\n                 AdvancedKafkaEndpointConsumerBuilder, AdvancedKafkaEndpointProducerBuilder {\n         default KafkaEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedKafkaEndpointBuilder\n             extends\n                 AdvancedKafkaEndpointConsumerBuilder, AdvancedKafkaEndpointProducerBuilder {\n         default KafkaEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetsOfMe(Paging paging) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweets_of_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetsOfMe(Paging paging) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweets_of_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\",true))"}
{"fixCommitSHA1": "8bff26d758f6e739fc4c67aa31cc7fcd9c1319f2", "projectName": "antlr.antlr4", "bugType": "Change Identifier Used", "problem": " \t\tif ( locals!=null ) {\n \t\t\tr.locals = ScopeParser.parseTypedArgList(locals, locals.getText(), g.tool.errMgr);\n \t\t\tr.locals.type = AttributeDict.DictType.LOCAL;\n\t\t\tr.locals.ast = returns;\n \t\t}\n \t\tfor (GrammarAST a : actions) {", "fixed": " \t\tif ( locals!=null ) {\n \t\t\tr.locals = ScopeParser.parseTypedArgList(locals, locals.getText(), g.tool.errMgr);\n \t\t\tr.locals.type = AttributeDict.DictType.LOCAL;\n\t\t\tr.locals.ast = locals;\n \t\t}\n \t\tfor (GrammarAST a : actions) {", "sourceBeforeFix": "r.locals.ast=returns", "sourceAfterFix": "r.locals.ast=locals"}
{"fixCommitSHA1": "70c31b498c5083f9efc1914b679737235826149f", "projectName": "facebook.presto", "bugType": "Wrong Function Name", "problem": "         this.functionManager = functionManager;\n         Optional<Duration> totalCpuTime = stats.map(s -> new Duration(s.values().stream()\n                .mapToLong(planNode -> planNode.getPlanNodeScheduledTime().toMillis())\n                 .sum(), MILLISECONDS));\n         Optional<Duration> totalScheduledTime = stats.map(s -> new Duration(s.values().stream()\n                .mapToLong(planNode -> planNode.getPlanNodeCpuTime().toMillis())\n                 .sum(), MILLISECONDS));\n         this.representation = new PlanRepresentation(planRoot, types, totalCpuTime, totalScheduledTime);", "fixed": "         this.functionManager = functionManager;\n         Optional<Duration> totalCpuTime = stats.map(s -> new Duration(s.values().stream()\n                .mapToLong(planNode -> planNode.getPlanNodeCpuTime().toMillis())\n                 .sum(), MILLISECONDS));\n         Optional<Duration> totalScheduledTime = stats.map(s -> new Duration(s.values().stream()\n                .mapToLong(planNode -> planNode.getPlanNodeScheduledTime().toMillis())\n                 .sum(), MILLISECONDS));\n         this.representation = new PlanRepresentation(planRoot, types, totalCpuTime, totalScheduledTime);", "sourceBeforeFix": "planNode.getPlanNodeScheduledTime()", "sourceAfterFix": "planNode.getPlanNodeCpuTime()"}
{"fixCommitSHA1": "4665dcf9ab41c3c61cd42aad296ebfe518bfa003", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\n \tpublic void glDeleteTextures (int n, IntBuffer textures) {\n\t\tGL.glDeleteTexturesEXT(n, textures, Memory.getPosition(textures));\n \t}\n \tpublic void glDepthFunc (int func) {", "fixed": " \t}\n \tpublic void glDeleteTextures (int n, IntBuffer textures) {\n\t\tGL.glDeleteTextures(n, textures, Memory.getPosition(textures));\n \t}\n \tpublic void glDepthFunc (int func) {", "sourceBeforeFix": "GL.glCopyTexSubImage2DEXT(target,level,xoffset,yoffset,x,y,width,height)", "sourceAfterFix": "GL.glCopyTexSubImage2D(target,level,xoffset,yoffset,x,y,width,height)"}
{"fixCommitSHA1": "98a8875db1735c4a60bf1989fd727217a739baf0", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "template.sendBodyAndHeader(\"file:\n         MockEndpoint mock = getMockEndpoint(\"mock:result4\");\n        mock.expectedBodiesReceived(\"Hello World 3\");\n         assertMockEndpointsSatisfied();\n         oneExchangeDone.matchesMockWaitTime();", "fixed": "template.sendBodyAndHeader(\"file:\n         MockEndpoint mock = getMockEndpoint(\"mock:result4\");\n        mock.expectedBodiesReceivedInAnyOrder(\"Hello World 3\");\n         assertMockEndpointsSatisfied();\n         oneExchangeDone.matchesMockWaitTime();", "sourceBeforeFix": "mock.expectedBodiesReceived(\"Hello World 2\",\"Hello World 4\")", "sourceAfterFix": "mock.expectedBodiesReceivedInAnyOrder(\"Hello World 2\",\"Hello World 4\")"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid user supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"User not found\", response = Void.class) })\n    void updateUser(@PathParam(\"username\") @ApiParam(\"name that need to be deleted\") String username,@Valid User body);\n }", "fixed": "     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid user supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"User not found\", response = Void.class) })\n    void updateUser(@PathParam(\"username\") @ApiParam(\"name that need to be deleted\") String username,@Valid User body) throws Exception;\n }", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "projectName": "Alluxio.alluxio", "bugType": "Change Operand ", "problem": "       mBuf.flip();\n       for (int pId = mLeft; pId < mRight; pId ++) {\n         long startTimeMs = System.currentTimeMillis();\n        TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n         OutStream os = file.getOutStream(WriteType.MUST_CACHE);\n         for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n           mBuf.putInt(0, k + mWorkerId);", "fixed": "       mBuf.flip();\n       for (int pId = mLeft; pId < mRight; pId ++) {\n         long startTimeMs = System.currentTimeMillis();\n        TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n         OutStream os = file.getOutStream(WriteType.MUST_CACHE);\n         for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n           mBuf.putInt(0, k + mWorkerId);", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedEC2EndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default EC2EndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedEC2EndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default EC2EndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsCsv(String path, int batchSize, OUT endTuple) {\n \t\tif (this instanceof SingleOutputStreamOperator) {\n \t\t\t((SingleOutputStreamOperator<?, ?>) this).setMutability(false);\n \t\t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsCsv(String path, int batchSize, OUT endTuple) {\n \t\tif (this instanceof SingleOutputStreamOperator) {\n \t\t\t((SingleOutputStreamOperator<?, ?>) this).setMutability(false);\n \t\t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "fixed": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "sourceBeforeFix": "GL20.glGetShader(shader,pname,params)", "sourceAfterFix": "GL20.glGetShaderiv(shader,pname,params)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "fixed": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttribfv(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttribiv(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "sourceBeforeFix": "GL20.glUniformMatrix3(location,transpose,value)", "sourceAfterFix": "GL20.glUniformMatrix3fv(location,transpose,value)"}
{"fixCommitSHA1": "10c93df27435ffbc037cde5e6063c9dbc6c0eb3f", "projectName": "facebook.presto", "bugType": "Change Identifier Used", "problem": "         HostAndPort host = HostAndPort.fromString(server);\n         try {\n            return new URI(\"http\", null, host.getHostText(), host.getPortOrDefault(80), null, null, null);\n         }\n         catch (URISyntaxException e) {\n             throw new IllegalArgumentException(e);", "fixed": "         HostAndPort host = HostAndPort.fromString(server);\n         try {\n            return new URI(\"http\", null, host.getHost(), host.getPortOrDefault(80), null, null, null);\n         }\n         catch (URISyntaxException e) {\n             throw new IllegalArgumentException(e);", "sourceBeforeFix": "host.getHostText()", "sourceAfterFix": "host.getHost()"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedBeanEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default BeanEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedBeanEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default BeanEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "3b8080d4f13c4e36a27cf0a35266fe673b228a63", "projectName": "Alluxio.alluxio", "bugType": "Wrong Function Name", "problem": "       obj.setBucketName(mBucketName);\n       obj.setDataInputFile(mFile);\n       obj.setContentLength(mFile.length());\n      obj.setContentEncoding(Mimetypes.MIMETYPE_BINARY_OCTET_STREAM);\n       if (mHash != null) {\n         obj.setMd5Hash(mHash.digest());\n       } else {", "fixed": "       obj.setBucketName(mBucketName);\n       obj.setDataInputFile(mFile);\n       obj.setContentLength(mFile.length());\n      obj.setContentType(Mimetypes.MIMETYPE_BINARY_OCTET_STREAM);\n       if (mHash != null) {\n         obj.setMd5Hash(mHash.digest());\n       } else {", "sourceBeforeFix": "obj.setContentEncoding(Mimetypes.MIMETYPE_BINARY_OCTET_STREAM)", "sourceAfterFix": "obj.setContentType(Mimetypes.MIMETYPE_BINARY_OCTET_STREAM)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserListSubscriptions(String user, long cursor) throws TwitterException {\n        return twitter4j.List.constructListOfLists(get(getApiBaseURL() + V1 +\n                 user + \"/lists/subscriptions.json?cursor=\" + cursor, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserListSubscriptions(String user, long cursor) throws TwitterException {\n        return twitter4j.List.createListList(get(getApiBaseURL() + V1 +\n                 user + \"/lists/subscriptions.json?cursor=\" + cursor, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/public_timeline.json\",false))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/public_timeline.json\",false))"}
{"fixCommitSHA1": "2956fca2f1fd1c8609d682fa58e72e3ccc54826a", "projectName": "apache.camel", "bugType": "Same Function More Args", "problem": "             detach();\n             ReactiveStreamsBackpressureStrategy strategy = producer.getEndpoint().getBackpressureStrategy();\n            Flux<Exchange> flux = Flux.create(camelSink::set);\n             if (ObjectHelper.equal(strategy, ReactiveStreamsBackpressureStrategy.OLDEST)) {", "fixed": "             detach();\n             ReactiveStreamsBackpressureStrategy strategy = producer.getEndpoint().getBackpressureStrategy();\n            Flux<Exchange> flux = Flux.create(camelSink::set, FluxSink.OverflowStrategy.IGNORE);\n             if (ObjectHelper.equal(strategy, ReactiveStreamsBackpressureStrategy.OLDEST)) {", "sourceBeforeFix": "Flux.create(camelSink::set)", "sourceAfterFix": "Flux.create(camelSink::set,FluxSink.OverflowStrategy.IGNORE)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "2778cd8ad6b0f126e5250cc3006459f06991d3ef", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "     public void pickAddress() throws Exception {\n         try {\n             bindAddress = memberAddressProvider.getBindAddress();\n            logger.info(\"Using bind address: \" + publicAddress);\n             publicAddress = memberAddressProvider.getPublicAddress();\n             validatePublicAddress(publicAddress);", "fixed": "     public void pickAddress() throws Exception {\n         try {\n             bindAddress = memberAddressProvider.getBindAddress();\n            logger.info(\"Using bind address: \" + bindAddress);\n             publicAddress = memberAddressProvider.getPublicAddress();\n             validatePublicAddress(publicAddress);", "sourceBeforeFix": "\"Using bind address: \" + publicAddress", "sourceAfterFix": "\"Using bind address: \" + bindAddress"}
{"fixCommitSHA1": "d97984fe97b0374bc9b4ba271b5aaab08e256fe6", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         assertEquals(\"sample-tag-key\", aws.getTagKey());\n         assertEquals(\"sample-tag-value\", aws.getTagValue());\n        assertFalse(\"reuse-address\", networkConfig.isReuseAddress());\n     }", "fixed": "         assertEquals(\"sample-tag-key\", aws.getTagKey());\n         assertEquals(\"sample-tag-value\", aws.getTagValue());\n        assertTrue(\"reuse-address\", networkConfig.isReuseAddress());\n     }", "sourceBeforeFix": "assertFalse(\"reuse-address\",networkConfig.isReuseAddress())", "sourceAfterFix": "assertTrue(\"reuse-address\",networkConfig.isReuseAddress())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "7600f7af2ff10b7726557816e86d5af9190cf606", "projectName": "Graylog2.graylog2-server", "bugType": "Change Identifier Used", "problem": "             }));\n     }\n    protected <T> Function<String, Optional<T>> createRemoteInterfaceProvider(Class<T> interfaceClass) {\n         return (nodeId) -> {\n             try {\n                 final Node targetNode = nodeService.byNodeId(nodeId);", "fixed": "             }));\n     }\n    protected <RemoteInterfaceType> Function<String, Optional<RemoteInterfaceType>> createRemoteInterfaceProvider(Class<RemoteInterfaceType> interfaceClass) {\n         return (nodeId) -> {\n             try {\n                 final Node targetNode = nodeService.byNodeId(nodeId);", "sourceBeforeFix": "Optional<T>", "sourceAfterFix": "Optional<RemoteInterfaceType>"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface DisruptorVmEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedDisruptorVmEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface DisruptorVmEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedDisruptorVmEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15870, value = \"Unknown server group %s\")\n     IllegalStateException unknownServerGroup(String serverGroup);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10870, value = \"Unknown server group %s\")\n     IllegalStateException unknownServerGroup(String serverGroup);\n     /**", "sourceBeforeFix": "id=15854", "sourceAfterFix": "id=10854"}
{"fixCommitSHA1": "d725e4c654270636bc7de92cc6d74683b1de29fe", "projectName": "facebook.presto", "bugType": "Change Identifier Used", "problem": "         ImmutableMap.Builder<Symbol, Expression> newTranslations = ImmutableMap.builder();\n         for (Expression expression : expressions) {\n            Symbol symbol = symbolAllocator.newSymbol(expression, analysis.getType(expression));\n             projections.put(symbol, translations.rewrite(expression));\n             newTranslations.put(symbol, expression);", "fixed": "         ImmutableMap.Builder<Symbol, Expression> newTranslations = ImmutableMap.builder();\n         for (Expression expression : expressions) {\n            Symbol symbol = symbolAllocator.newSymbol(expression, analysis.getTypeWithCoercions(expression));\n             projections.put(symbol, translations.rewrite(expression));\n             newTranslations.put(symbol, expression);", "sourceBeforeFix": "analysis.getType(aggregate)", "sourceAfterFix": "analysis.getTypeWithCoercions(aggregate)"}
{"fixCommitSHA1": "4743cfc38b17ee3f8aa7faf658cd758c0ad3e12e", "projectName": "dropwizard.metrics", "bugType": "Same Function More Args", "problem": " \tprotected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n \t\tfinal String uri = req.getPathInfo();\n \t\tif (uri == null || uri.equals(\"/\")) {\n\t\t\thandleHome(resp);\n \t\t} else if (uri.startsWith(metricsUri)) {\n \t\t\thandleMetrics(req.getParameter(\"class\"), Boolean.parseBoolean(req.getParameter(\"full-samples\")), resp);\n \t\t} else if (uri.equals(pingUri)) {", "fixed": " \tprotected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n \t\tfinal String uri = req.getPathInfo();\n \t\tif (uri == null || uri.equals(\"/\")) {\n\t\t\thandleHome(req.getServletPath(), resp);\n \t\t} else if (uri.startsWith(metricsUri)) {\n \t\t\thandleMetrics(req.getParameter(\"class\"), Boolean.parseBoolean(req.getParameter(\"full-samples\")), resp);\n \t\t} else if (uri.equals(pingUri)) {", "sourceBeforeFix": "MessageFormat.format(TEMPLATE,metricsUri,pingUri,threadsUri,healthcheckUri)", "sourceAfterFix": "MessageFormat.format(TEMPLATE,path,metricsUri,path,pingUri,path,threadsUri,path,healthcheckUri)"}
{"fixCommitSHA1": "6e0e38f09f74fb633a33cfd5c59265518bcf85be", "projectName": "netty.netty", "bugType": "Change Identifier Used", "problem": "         HttpRequest req = (HttpRequest) ch.readInbound();\n         DecoderResult dr = req.getDecoderResult();\n         assertFalse(dr.isSuccess());\n        assertFalse(dr.isFailure());\n         ensureInboundTrafficDiscarded(ch);\n     }", "fixed": "         HttpRequest req = (HttpRequest) ch.readInbound();\n         DecoderResult dr = req.getDecoderResult();\n         assertFalse(dr.isSuccess());\n        assertTrue(dr.isFailure());\n         ensureInboundTrafficDiscarded(ch);\n     }", "sourceBeforeFix": "assertFalse(dr.isFailure())", "sourceAfterFix": "assertTrue(dr.isFailure())"}
{"fixCommitSHA1": "e508f61a11d9c30f9063b9d19dd9cd10bdfe9e7f", "projectName": "checkstyle.checkstyle", "bugType": "Same Function Less Args", "problem": "      */\n     public void setMemberModifiers(String modifiers)\n     {\n        final List<Integer> modifiersList = new ArrayList<>(modifiers.length());\n         for (String modifier : modifiers.split(\", \")) {\n            modifiersList.add(TokenTypes.getTokenId(modifier));\n         }\n         this.memberModifiers = modifiersList;\n     }", "fixed": "      */\n     public void setMemberModifiers(String modifiers)\n     {\n        final List<Integer> modifiersList = new ArrayList<>();\n         for (String modifier : modifiers.split(\", \")) {\n            modifiersList.add(TokenTypes.getTokenId(modifier.trim()));\n         }\n         this.memberModifiers = modifiersList;\n     }", "sourceBeforeFix": "new ArrayList<>(modifiers.length())", "sourceAfterFix": "new ArrayList<>()"}
{"fixCommitSHA1": "f1b22619682351923e1d34481e6efe499f41745f", "projectName": "google.guava", "bugType": "Wrong Function Name", "problem": "     fakePool.runAll();\n    assertThat(Thread.currentThread().isInterrupted()).isTrue();\n   }\n   public void testInterrupt_doesNotStopExecution() {", "fixed": "     fakePool.runAll();\n    assertThat(Thread.currentThread().interrupted()).isTrue();\n   }\n   public void testInterrupt_doesNotStopExecution() {", "sourceBeforeFix": "Thread.currentThread().isInterrupted()", "sourceAfterFix": "Thread.currentThread().interrupted()"}
{"fixCommitSHA1": "1c9a83a316dcb5c1d304c9c600627df5dc77c3f0", "projectName": "hazelcast.hazelcast", "bugType": "Change Numeric Literal", "problem": "     @Test\n     public void testOperationTimeoutForLongRunningRemoteOperation() throws Exception {\n        int callTimeoutMillis = 1000;\n         Config config = new Config().setProperty(OPERATION_CALL_TIMEOUT_MILLIS.getName(), \"\" + callTimeoutMillis);\n         TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(2);", "fixed": "     @Test\n     public void testOperationTimeoutForLongRunningRemoteOperation() throws Exception {\n        int callTimeoutMillis = 3000;\n         Config config = new Config().setProperty(OPERATION_CALL_TIMEOUT_MILLIS.getName(), \"\" + callTimeoutMillis);\n         TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(2);", "sourceBeforeFix": "callTimeoutMillis=1000", "sourceAfterFix": "callTimeoutMillis=3000"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getUserListStatuses(String user, int id, Paging paging) throws TwitterException {\n        return Status.constructStatuses(get(getApiBaseURL() + V1 + user +\n                 \"/lists/\" + id + \"/statuses.json\", new PostParameter[0],\n                 paging.asPostParameterList(Paging.SMCP, Paging.PER_PAGE), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getUserListStatuses(String user, int id, Paging paging) throws TwitterException {\n        return Status.createStatuseList(get(getApiBaseURL() + V1 + user +\n                 \"/lists/\" + id + \"/statuses.json\", new PostParameter[0],\n                 paging.asPostParameterList(Paging.SMCP, Paging.PER_PAGE), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\",true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "ccc86e9f1cddebc731ac1ccabdd469df11d72d8b", "projectName": "apache.flink", "bugType": "Change Numeric Literal", "problem": " \t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.createRemoteEnvironment(\"localhost\", flinkPort);\n \t\tenv.enableCheckpointing(500);\n \t\tenv.setParallelism(parallelism);\n\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(3, 0));\n \t\tenv.getConfig().disableSysoutLogging();\n \t\tFlinkKafkaConsumerBase<Integer> kafkaSource = kafkaServer.getConsumer(topic, schema, standardProps);", "fixed": " \t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.createRemoteEnvironment(\"localhost\", flinkPort);\n \t\tenv.enableCheckpointing(500);\n \t\tenv.setParallelism(parallelism);\n\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(1, 0));\n \t\tenv.getConfig().disableSysoutLogging();\n \t\tFlinkKafkaConsumerBase<Integer> kafkaSource = kafkaServer.getConsumer(topic, schema, standardProps);", "sourceBeforeFix": "RestartStrategies.fixedDelayRestart(3,0)", "sourceAfterFix": "RestartStrategies.fixedDelayRestart(1,0)"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n \t * @return True, if the comparator supports that specific form of serialization, false if not.\n \t */\n\tpublic boolean supportsSerializationWithKeyNormalization();\n \t/**\n \t * Gets the number of bytes that the normalized key would maximally take. A value of", "fixed": " \t * \n \t * @return True, if the comparator supports that specific form of serialization, false if not.\n \t */\n\tpublic abstract boolean supportsSerializationWithKeyNormalization();\n \t/**\n \t * Gets the number of bytes that the normalized key would maximally take. A value of", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface GitEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedGitEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface GitEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedGitEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "3c103f5cf926b5d3b0e2b53eeefa7db4a75b80d0", "projectName": "Graylog2.graylog2-server", "bugType": "Change Numeric Literal", "problem": "     public void testBasicExtractionWithCutStrategyCanOverwriteSameField() throws Exception {\n         Message msg = new Message(\"The short message\", \"TestUnit\", Tools.getUTCTimestampWithMilliseconds());\n        SplitAndIndexExtractor x = new SplitAndIndexExtractor(\"foo\", \"foo\", Extractor.CursorStrategy.CUT, \"message\", \"message\", config(\" \", 0), \"foo\", noConverters(), Extractor.ConditionType.NONE, null);\n         x.runExtractor(new GraylogServerStub(), msg);\n        assertEquals(\"short message\", msg.getField(\"message\"));\n     }\n     @Test\n     public void testBasicExtractionWithCutStrategyAtEndOfString() throws Exception {", "fixed": "     public void testBasicExtractionWithCutStrategyCanOverwriteSameField() throws Exception {\n         Message msg = new Message(\"The short message\", \"TestUnit\", Tools.getUTCTimestampWithMilliseconds());\n        SplitAndIndexExtractor x = new SplitAndIndexExtractor(\"foo\", \"foo\", Extractor.CursorStrategy.CUT, \"message\", \"message\", config(\" \", 1), \"foo\", noConverters(), Extractor.ConditionType.NONE, null);\n         x.runExtractor(new GraylogServerStub(), msg);\n        assertEquals(\"short\", msg.getField(\"message\"));\n     }\n     @Test\n     public void testBasicExtractionWithCutStrategyAtEndOfString() throws Exception {", "sourceBeforeFix": "config(\" \",0)", "sourceAfterFix": "config(\" \",1)"}
{"fixCommitSHA1": "ddb852cdf7da29827fcab0b25a2b2ed6ee443cf9", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "            final PreparedErrorHandler key = new PreparedErrorHandler(routeContext, processor);\n             answer = errorHandlers.get(key);", "fixed": "            final PreparedErrorHandler key = new PreparedErrorHandler(endpoint.getEndpointUri(), processor);\n             answer = errorHandlers.get(key);", "sourceBeforeFix": "KeyValueHolder<RouteContext,Processor>", "sourceAfterFix": "KeyValueHolder<String,Processor>"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform1fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform1(location, v);\r\n \t}\r\n \tpublic void glUniform1fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform1(location, toFloatBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform1i (int location, int x) {\r", "fixed": " \t}\r\n \tpublic void glUniform1fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform1fv(location, v);\r\n \t}\r\n \tpublic void glUniform1fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform1fv(location, toFloatBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform1i (int location, int x) {\r", "sourceBeforeFix": "GL11.glTexParameter(target,pname,params)", "sourceAfterFix": "GL11.glTexParameteriv(target,pname,params)"}
{"fixCommitSHA1": "435805f612bf78ee0d2fd93cd90fa6c6740e17c2", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         String uri = getScpUri() + \"?username=admin&password=admin&knownHostsFile=\" + getKnownHostsFile();\n         template.sendBodyAndHeader(uri, \"Hello World\", Exchange.FILE_NAME, \"hello.txt\");\n        Thread.sleep(200);\n         File file = new File(getScpPath() + \"/hello.txt\");\n         assertFileExists(file.getAbsolutePath());", "fixed": "         String uri = getScpUri() + \"?username=admin&password=admin&knownHostsFile=\" + getKnownHostsFile();\n         template.sendBodyAndHeader(uri, \"Hello World\", Exchange.FILE_NAME, \"hello.txt\");\n        Thread.sleep(500);\n         File file = new File(getScpPath() + \"/hello.txt\");\n         assertFileExists(file.getAbsolutePath());", "sourceBeforeFix": "Thread.sleep(200)", "sourceAfterFix": "Thread.sleep(500)"}
{"fixCommitSHA1": "b69967e5b131efed724e38456dd970b4af4eb539", "projectName": "neo4j.neo4j", "bugType": "Change Identifier Used", "problem": "     private List<ScheduledJob> scheduledJobs = new LinkedList<ScheduledJob>();\n    public void scheduleAtFixedRate( Runnable job, String jobName, long period )\n     {\n        ScheduledJob scheduledJob = new ScheduledJob( job, jobName, period );\n         scheduledJobs.add( scheduledJob );\n     }", "fixed": "     private List<ScheduledJob> scheduledJobs = new LinkedList<ScheduledJob>();\n    public void scheduleAtFixedRate( Runnable job, String jobName, long delay, long period )\n     {\n        ScheduledJob scheduledJob = new ScheduledJob( job, jobName, delay, period );\n         scheduledJobs.add( scheduledJob );\n     }", "sourceBeforeFix": "new ScheduledJob(job,jobName,period)", "sourceAfterFix": "new ScheduledJob(job,jobName,delay,period)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": " };\n   \n  private final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler", "fixed": " };\n   \n  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "2f880c73edb600ab92cdd580ac74f7388b5c6135", "projectName": "Alluxio.alluxio", "bugType": "Change Modifier", "problem": "     }\n   }\n  public void unpinFile(int fileId) {\n     if (INACTIVE) {\n       return;\n     }", "fixed": "     }\n   }\n  public synchronized void unpinFile(int fileId) {\n     if (INACTIVE) {\n       return;\n     }", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "3076a5523ab2c1be078a2acef416fd3a7cb04009", "projectName": "spring-projects.spring-boot", "bugType": "Change Modifier", "problem": " \t\n\tstatic SecurityContext NONE = new SecurityContext() {\n \t\t@Override\n \t\tpublic Principal getPrincipal() {", "fixed": " \t\n\tSecurityContext NONE = new SecurityContext() {\n \t\t@Override\n \t\tpublic Principal getPrincipal() {", "sourceBeforeFix": "8", "sourceAfterFix": "0"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "fixed": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttribfv(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttribiv(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "sourceBeforeFix": "GL20.glUniform2(location,v)", "sourceAfterFix": "GL20.glUniform2iv(location,v)"}
{"fixCommitSHA1": "b981c761276a1a9aaedac51c10622656271dc180", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \tprivate IntBuffer toIntBuffer (int v[], int offset, int count) {\r\n \t\tensureBufferCapacity(count << 2);\r\n\t\tfloatBuffer.clear();\r\n \t\tcom.badlogic.gdx.utils.BufferUtils.copy(v, count, offset, intBuffer);\r\n \t\treturn intBuffer;\r\n \t}\r", "fixed": " \tprivate IntBuffer toIntBuffer (int v[], int offset, int count) {\r\n \t\tensureBufferCapacity(count << 2);\r\n\t\tintBuffer.clear();\r\n \t\tcom.badlogic.gdx.utils.BufferUtils.copy(v, count, offset, intBuffer);\r\n \t\treturn intBuffer;\r\n \t}\r", "sourceBeforeFix": "floatBuffer.clear()", "sourceAfterFix": "intBuffer.clear()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid username supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"User not found\", response = Void.class) })\n    void deleteUser(@PathParam(\"username\") @ApiParam(\"The name that needs to be deleted\") String username);\n     @GET\n     @Path(\"/{username}\")", "fixed": "     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid username supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"User not found\", response = Void.class) })\n    void deleteUser(@PathParam(\"username\") @ApiParam(\"The name that needs to be deleted\") String username) throws Exception;\n     @GET\n     @Path(\"/{username}\")", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "864435a71cd9e8b0dec4150284ee43372167b091", "projectName": "google.guava", "bugType": "Change Identifier Used", "problem": "     ticker.advance(4000000);\n     stopwatch.stop();\n     ticker.advance(9000000);\n    assertEquals(4, stopwatch.elapsedMillis());\n   }\n   public void testElapsedMillis_multipleSegments() {", "fixed": "     ticker.advance(4000000);\n     stopwatch.stop();\n     ticker.advance(9000000);\n    assertEquals(4, stopwatch.elapsed(MILLISECONDS));\n   }\n   public void testElapsedMillis_multipleSegments() {", "sourceBeforeFix": "stopwatch.elapsedMillis()", "sourceAfterFix": "stopwatch.elapsed(MILLISECONDS)"}
{"fixCommitSHA1": "c5296e487884418de8dde15e832ea72b027e073f", "projectName": "apache.camel", "bugType": "More Specific If", "problem": "     public void setUnitOfWork(UnitOfWork unitOfWork) {\n         this.unitOfWork = unitOfWork;\n        if (onCompletions != null) {\n             for (Synchronization onCompletion : onCompletions) {", "fixed": "     public void setUnitOfWork(UnitOfWork unitOfWork) {\n         this.unitOfWork = unitOfWork;\n        if (unitOfWork != null && onCompletions != null) {\n             for (Synchronization onCompletion : onCompletions) {", "sourceBeforeFix": "onCompletions != null", "sourceAfterFix": "unitOfWork != null && onCompletions != null"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "2", "sourceAfterFix": "0"}
{"fixCommitSHA1": "39ef22a64fb3addfe9261a2a90f206de8d1d2015", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     }\n     @Override\n    protected Processor chooseProcessor(List<Processor> processors, Exchange exchange) {\n         if (isRuntimeRatiosZeroed())  {\n             resetRuntimeRatios();\n             counter = 0;", "fixed": "     }\n     @Override\n    protected synchronized Processor chooseProcessor(List<Processor> processors, Exchange exchange) {\n         if (isRuntimeRatiosZeroed())  {\n             resetRuntimeRatios();\n             counter = 0;", "sourceBeforeFix": "4", "sourceAfterFix": "36"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15843, value = \"Invalid rollout plan. Plan operations affect server groups %s that are not reflected in the rollout plan\")\n     String invalidRolloutPlan(Set<String> groups);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10843, value = \"Invalid rollout plan. Plan operations affect server groups %s that are not reflected in the rollout plan\")\n     String invalidRolloutPlan(Set<String> groups);\n     /**", "sourceBeforeFix": "id=15858", "sourceAfterFix": "id=10858"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface GrpcEndpointBuilder\n             extends\n                 GrpcEndpointConsumerBuilder, GrpcEndpointProducerBuilder {\n         default AdvancedGrpcEndpointBuilder advanced() {", "fixed": "     \n    public interface GrpcEndpointBuilder\n             extends\n                 GrpcEndpointConsumerBuilder, GrpcEndpointProducerBuilder {\n         default AdvancedGrpcEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "a0f2bac065232855e4f8bb1221a60b0cbf7fd2a9", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "         checkConfig.addAttribute(\"allowThrowsTagsForSubclasses\", \"true\");\n         checkConfig.addAttribute(\"allowUndeclaredRTE\", \"true\");\n         final String[] expected = {};\n        verify(checkConfig, getSrcPath(\"checks/javadoc/Input_03.java\"), expected);\n     }\n     @Test", "fixed": "         checkConfig.addAttribute(\"allowThrowsTagsForSubclasses\", \"true\");\n         checkConfig.addAttribute(\"allowUndeclaredRTE\", \"true\");\n         final String[] expected = {};\n        verify(checkConfig, getPath(\"checks/javadoc/Input_03.java\"), expected);\n     }\n     @Test", "sourceBeforeFix": "getSrcPath(\"checks/javadoc/Input_02.java\")", "sourceAfterFix": "getPath(\"checks/javadoc/Input_02.java\")"}
{"fixCommitSHA1": "f89b9f2a2130ce548ca7ebb20fa1311bf714aa10", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "       checks.add(dartSuperAccessorsPass);\n     }\n    if (options.needsTranspilationFrom(ES7)) {\n       TranspilationPasses.addEs2017Passes(checks);\n       checks.add(setFeatureSet(ES7));\n     }\n    if (options.needsTranspilationFrom(ES6) && !options.skipTranspilationAndCrash) {\n       checks.add(es6ExternsCheck);\n       TranspilationPasses.addEs6EarlyPasses(checks);\n     }", "fixed": "       checks.add(dartSuperAccessorsPass);\n     }\n    if (options.needsTranspilationFrom(ES8)) {\n       TranspilationPasses.addEs2017Passes(checks);\n       checks.add(setFeatureSet(ES7));\n     }\n    if ((options.needsTranspilationFrom(ES6) || options.needsTranspilationFrom(ES7))\n        && !options.skipTranspilationAndCrash) {\n       checks.add(es6ExternsCheck);\n       TranspilationPasses.addEs6EarlyPasses(checks);\n     }", "sourceBeforeFix": "options.needsTranspilationFrom(ES7)", "sourceAfterFix": "options.needsTranspilationFrom(ES8)"}
{"fixCommitSHA1": "38a43deb5ee7d48ed0ad7dbfbc789a2e82ebbfc2", "projectName": "Alluxio.alluxio", "bugType": "Change Numeric Literal", "problem": "     System.setProperty(\"tachyon.worker.selector.threads\", Integer.toString(1));\n     System.setProperty(\"tachyon.worker.server.threads\", Integer.toString(2));\n     System.setProperty(\"tachyon.worker.network.netty.worker.threads\", Integer.toString(2));\n    System.setProperty(\"tachyon.master.web.threads\", Integer.toString(1));\n     CommonConf.clear();\n     MasterConf.clear();", "fixed": "     System.setProperty(\"tachyon.worker.selector.threads\", Integer.toString(1));\n     System.setProperty(\"tachyon.worker.server.threads\", Integer.toString(2));\n     System.setProperty(\"tachyon.worker.network.netty.worker.threads\", Integer.toString(2));\n    System.setProperty(\"tachyon.master.web.threads\", Integer.toString(9));\n     CommonConf.clear();\n     MasterConf.clear();", "sourceBeforeFix": "Integer.toString(1)", "sourceAfterFix": "Integer.toString(9)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15868, value = \"Deployment %s is already started\")\n     String deploymentAlreadyStarted(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10868, value = \"Deployment %s is already started\")\n     String deploymentAlreadyStarted(String name);\n     /**", "sourceBeforeFix": "id=15864", "sourceAfterFix": "id=10864"}
{"fixCommitSHA1": "ba98d83f598bbf2e9f5c41eeb51d36369a088fa6", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Change Modifier", "problem": "         }\n         \n        protected int getMessageLength() {\n             return currentOutputPosition;\n         }", "fixed": "         }\n         \n        protected final int getMessageLength() {\n             return currentOutputPosition;\n         }", "sourceBeforeFix": "4", "sourceAfterFix": "20"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(741);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {Console.WriteLine($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "fixed": " \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(740);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {Console.WriteLine($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "sourceBeforeFix": "new StringBuilder(246)", "sourceAfterFix": "new StringBuilder(245)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<DirectMessage> getSentDirectMessages(Paging paging) throws\n             TwitterException {\n        return DirectMessage.constructDirectMessages(get(getBaseURL() +\n                 \"direct_messages/sent.json\", new PostParameter[0],\n                 paging.asPostParameterList(), true));\n     }", "fixed": "      */\n     public ResponseList<DirectMessage> getSentDirectMessages(Paging paging) throws\n             TwitterException {\n        return DirectMessage.createDirectMessageList(get(getBaseURL() +\n                 \"direct_messages/sent.json\", new PostParameter[0],\n                 paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites/\" + id+ \".json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites/\" + id+ \".json\",new PostParameter[0],true))"}
{"fixCommitSHA1": "c0f265384f09d5b36e2065083922ba428edef798", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "     ColumnPaginationFilter other = (ColumnPaginationFilter)o;\n     if (this.columnOffset != null) {\n      return this.getLimit() == this.getLimit() &&\n           Bytes.equals(this.getColumnOffset(), other.getColumnOffset());\n     }\n     return this.getLimit() == other.getLimit() && this.getOffset() == other.getOffset();", "fixed": "     ColumnPaginationFilter other = (ColumnPaginationFilter)o;\n     if (this.columnOffset != null) {\n      return this.getLimit() == other.getLimit() &&\n           Bytes.equals(this.getColumnOffset(), other.getColumnOffset());\n     }\n     return this.getLimit() == other.getLimit() && this.getOffset() == other.getOffset();", "sourceBeforeFix": "this.getLimit()", "sourceAfterFix": "other.getLimit()"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should save properties with case difference only\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_GLOBAL_PROPERTIES)\n\tpublic List<GlobalProperty> saveGlobalProperties(List<GlobalProperty> props) throws APIException;\n \t/**\n \t * Completely remove the given global property from the database", "fixed": " \t * @should save properties with case difference only\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_GLOBAL_PROPERTIES)\n\tpublic List<GlobalProperty> saveGlobalProperties(List<GlobalProperty> props);\n \t/**\n \t * Completely remove the given global property from the database", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "a00413fae93619b9d134ddf45b6a86393aea1d28", "projectName": "neo4j.neo4j", "bugType": "Change Boolean Literal", "problem": "     LABEL_TOKEN( false ),\n     LABEL_TOKEN_NAME( false ),\n     NEOSTORE_BLOCK( false ),\n    SCHEMA( 35, true ),\n     NODE_LABELS( 35, true );\n     private final long max;", "fixed": "     LABEL_TOKEN( false ),\n     LABEL_TOKEN_NAME( false ),\n     NEOSTORE_BLOCK( false ),\n    SCHEMA( 35, false ),\n     NODE_LABELS( 35, true );\n     private final long max;", "sourceBeforeFix": "SCHEMA(35,true)", "sourceAfterFix": "SCHEMA(35,false)"}
{"fixCommitSHA1": "e38702915ee95c95013fdf6ec56c0ed7f4667342", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "                         cacheEntry.value = value;\n                         cacheEntry.reload = false;\n                     }\n                    localCache.put(name, NULL_ENTRY);\n                 }\n                 return cacheEntry != NULL_ENTRY ? cacheEntry.value : null;\n             }", "fixed": "                         cacheEntry.value = value;\n                         cacheEntry.reload = false;\n                     }\n                    localCache.put(name, cacheEntry);\n                 }\n                 return cacheEntry != NULL_ENTRY ? cacheEntry.value : null;\n             }", "sourceBeforeFix": "localCache.put(name,NULL_ENTRY)", "sourceAfterFix": "localCache.put(name,cacheEntry)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  private final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedGitEndpointBuilder\n             extends\n                 AdvancedGitEndpointConsumerBuilder, AdvancedGitEndpointProducerBuilder {\n         default GitEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedGitEndpointBuilder\n             extends\n                 AdvancedGitEndpointConsumerBuilder, AdvancedGitEndpointProducerBuilder {\n         default GitEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  private final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "2", "sourceAfterFix": "0"}
{"fixCommitSHA1": "3757a700a89638e5747d966bdaa8266b62c974c8", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "     assertEquals(encoded, encoding.encode(bytes));\n   }\n  private void testDecodes(BaseEncoding encoding, String encoded, String decoded) {\n     byte[] bytes;\n     try {\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();", "fixed": "     assertEquals(encoded, encoding.encode(bytes));\n   }\n  private static void testDecodes(BaseEncoding encoding, String encoded, String decoded) {\n     byte[] bytes;\n     try {\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "bd23d1bddd1154c7bc2a249b76d4ffdd5e4cfd92", "projectName": "wildfly.wildfly", "bugType": "Change Caller in Function Call", "problem": "             if (queueLength.isDefined() && queueLength.asInt() == 0) {\n                 if (coreThreads.isDefined() && coreThreads.asInt() <= 0) {\n                    throw EeLogger.ROOT_LOGGER.invalidCoreThreadsSize(coreThreads.asString());\n                 }\n             }", "fixed": "             if (queueLength.isDefined() && queueLength.asInt() == 0) {\n                 if (coreThreads.isDefined() && coreThreads.asInt() <= 0) {\n                    throw EeLogger.ROOT_LOGGER.invalidCoreThreadsSize(queueLength.asString());\n                 }\n             }", "sourceBeforeFix": "coreThreads.asString()", "sourceAfterFix": "queueLength.asString()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "810e352f3d599257e1b36b8118b5b4aabf12d988", "projectName": "Bukkit.Bukkit", "bugType": "Change Numeric Literal", "problem": "      * @return BlockFace attached to\n      */\n     public BlockFace getAttachedFace() {\n        byte data = (byte) (getData() ^ 0x8);\n         switch (data) {\n             case 0x1:", "fixed": "      * @return BlockFace attached to\n      */\n     public BlockFace getAttachedFace() {\n        byte data = (byte) (getData() ^ 0x7);\n         switch (data) {\n             case 0x1:", "sourceBeforeFix": "getData() ^ 0x8", "sourceAfterFix": "getData() ^ 0x7"}
{"fixCommitSHA1": "c015d11303339f50254a10be7335fd33546911ab", "projectName": "Activiti.Activiti", "bugType": "Same Function More Args", "problem": " @RestController\n public class StencilsetRestResource {\n  @RequestMapping(value=\"/editor/stencilset\", method = RequestMethod.GET, produces = \"application/json\")\n   public @ResponseBody String getStencilset() {\n     InputStream stencilsetStream = this.getClass().getClassLoader().getResourceAsStream(\"stencilset.json\");\n     try {\n      return IOUtils.toString(stencilsetStream);\n     } catch (Exception e) {\n       throw new ActivitiException(\"Error while loading stencil set\", e);\n     }", "fixed": " @RestController\n public class StencilsetRestResource {\n  @RequestMapping(value=\"/editor/stencilset\", method = RequestMethod.GET, produces = \"application/json;charset=utf-8\")\n   public @ResponseBody String getStencilset() {\n     InputStream stencilsetStream = this.getClass().getClassLoader().getResourceAsStream(\"stencilset.json\");\n     try {\n      return IOUtils.toString(stencilsetStream, \"utf-8\");\n     } catch (Exception e) {\n       throw new ActivitiException(\"Error while loading stencil set\", e);\n     }", "sourceBeforeFix": "IOUtils.toString(stencilsetStream)", "sourceAfterFix": "IOUtils.toString(stencilsetStream,\"utf-8\")"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedHdfsEndpointBuilder\n             extends\n                 AdvancedHdfsEndpointConsumerBuilder, AdvancedHdfsEndpointProducerBuilder {\n         default HdfsEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedHdfsEndpointBuilder\n             extends\n                 AdvancedHdfsEndpointConsumerBuilder, AdvancedHdfsEndpointProducerBuilder {\n         default HdfsEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "e04cbbf23e9273cca31b1cc12142e34fae753542", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "          *  Does class have non-private ctors.\n          *  @return true if class has non-private ctors\n          */\n        boolean isWithNonPrivateCtor() {\n             return withNonPrivateCtor;\n         }", "fixed": "          *  Does class have non-private ctors.\n          *  @return true if class has non-private ctors\n          */\n        private boolean isWithNonPrivateCtor() {\n             return withNonPrivateCtor;\n         }", "sourceBeforeFix": "0", "sourceAfterFix": "2"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_cn() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016-05-06\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_cn() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016-05-06\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "b73af3917eec722c20c0cd75547590158072cbd9", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": " \t\t\t}\r\n \t\t\telse {\r\n\t\t\t\tlog.debug(\"PID contains identifier with no assigning authority\");\r\n \t\t\t\tcontinue;\r\n \t\t\t}\r\n \t\t}\r", "fixed": " \t\t\t}\r\n \t\t\telse {\r\n\t\t\t\tlog.error(\"PID contains identifier with no assigning authority\");\r\n \t\t\t\tcontinue;\r\n \t\t\t}\r\n \t\t}\r", "sourceBeforeFix": "log.debug(\"PID contains identifier with no assigning authority\")", "sourceAfterFix": "log.error(\"PID contains identifier with no assigning authority\")"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n     */\n     public ResponseList<DirectMessage> getDirectMessages() throws TwitterException {\n        return DirectMessage.constructDirectMessages(get(getBaseURL() + \"direct_messages.json\", true));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n     */\n     public ResponseList<DirectMessage> getDirectMessages() throws TwitterException {\n        return DirectMessage.createDirectMessageList(get(getBaseURL() + \"direct_messages.json\", true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweets_of_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweets_of_me.json\",null,true))"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * @throws IOException Thrown, if the de-serialization encountered an I/O related error. Typically raised by the\n \t *                     input view, which may have an underlying I/O channel from which it reads.\n \t */\n\tpublic void deserialize(T target, DataInputView source) throws IOException;\n \t/**\n \t * Copies exactly one record from the source input view to the target output view. Whether this operation", "fixed": " \t * @throws IOException Thrown, if the de-serialization encountered an I/O related error. Typically raised by the\n \t *                     input view, which may have an underlying I/O channel from which it reads.\n \t */\n\tpublic abstract void deserialize(T target, DataInputView source) throws IOException;\n \t/**\n \t * Copies exactly one record from the source input view to the target output view. Whether this operation", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public List<SavedSearch> getSavedSearches() throws TwitterException {\n        return SavedSearch.constructSavedSearches(get(getBaseURL() + \"saved_searches.json\", true));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n      */\n     public List<SavedSearch> getSavedSearches() throws TwitterException {\n        return SavedSearch.createSavedSearchList(get(getBaseURL() + \"saved_searches.json\", true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweets/\" + statusId+ \".json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweets/\" + statusId+ \".json\",true))"}
{"fixCommitSHA1": "0eea03987839ba88fac6015355a2b067d6cfe436", "projectName": "Alluxio.alluxio", "bugType": "Change Modifier", "problem": " \npublic class CompleteUfsFileOptionsTest {\n   ", "fixed": " \npublic final class CompleteUfsFileOptionsTest {\n   ", "sourceBeforeFix": "1", "sourceAfterFix": "17"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  private final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "41d67a3d7b3c2cc86be1792d79083f0d56981d2f", "projectName": "swagger-api.swagger-core", "bugType": "Change Identifier Used", "problem": "                     apiParam = new ApiImplicitParamWrapper((ApiImplicitParam) item);\n                 } else if (\"javax.ws.rs.DefaultValue\".equals(item.annotationType().getName())) {\n                     try {\n                        rsDefault = (String) item.getClass().getMethod(\"value\").invoke(item);\n                     } catch (Exception ex) {\n                         LOGGER.error(\"Invocation of value method failed\", ex);\n                     }", "fixed": "                     apiParam = new ApiImplicitParamWrapper((ApiImplicitParam) item);\n                 } else if (\"javax.ws.rs.DefaultValue\".equals(item.annotationType().getName())) {\n                     try {\n                        rsDefault = (String) item.annotationType().getMethod(\"value\").invoke(item);\n                     } catch (Exception ex) {\n                         LOGGER.error(\"Invocation of value method failed\", ex);\n                     }", "sourceBeforeFix": "item.getClass()", "sourceAfterFix": "item.annotationType()"}
{"fixCommitSHA1": "9716d2ae673a576cb345c3bfb24cf71654d8f112", "projectName": "openhab.openhab", "bugType": "Change Identifier Used", "problem": " \t\t\tObjectMapper mapper = new ObjectMapper();\n \t\t\tJsonNode rootNode = mapper.readTree(dataString);\n \t\t\tint returnCode = rootNode.get(\"ReturnCode\").asInt();\n\t\t\tlogger.debug(\"myq ReturnCode: {}\", returnCode);\n \t\t\tMyQResponseCode rc = MyQResponseCode.fromCode(returnCode);", "fixed": " \t\t\tObjectMapper mapper = new ObjectMapper();\n \t\t\tJsonNode rootNode = mapper.readTree(dataString);\n \t\t\tint returnCode = rootNode.get(\"ReturnCode\").asInt();\n\t\t\tlogger.trace(\"myq ReturnCode: {}\", returnCode);\n \t\t\tMyQResponseCode rc = MyQResponseCode.fromCode(returnCode);", "sourceBeforeFix": "logger.debug(\"Retreiveing door data\")", "sourceAfterFix": "logger.trace(\"Retreiveing door data\")"}
{"fixCommitSHA1": "e7bf415427b37bbc760ff9b9c69650db8ec477e4", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t}\n \t@Configuration\n\t@ConditionalOnEnablednHealthIndicator(\"diskspace\")\n \tpublic static class DiskSpaceHealthIndicatorConfiguration {\n \t\t@Bean", "fixed": " \t}\n \t@Configuration\n\t@ConditionalOnEnabledHealthIndicator(\"diskspace\")\n \tpublic static class DiskSpaceHealthIndicatorConfiguration {\n \t\t@Bean", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"rabbit\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"rabbit\")"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface BoxEndpointBuilder\n             extends\n                 BoxEndpointConsumerBuilder, BoxEndpointProducerBuilder {\n         default AdvancedBoxEndpointBuilder advanced() {", "fixed": "     \n    public interface BoxEndpointBuilder\n             extends\n                 BoxEndpointConsumerBuilder, BoxEndpointProducerBuilder {\n         default AdvancedBoxEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "c66c2895bb0f64140fb87b9f366e7063bf2bf3ca", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t\t\tUsage.Position | Usage.Normal);\n \t\tmodels.add(sphereModel);\n\t\tBullet.init();\n \t\tcollisionConfiguration = new btDefaultCollisionConfiguration();\n \t\tdispatcher = new btCollisionDispatcher(collisionConfiguration);", "fixed": " \t\t\tUsage.Position | Usage.Normal);\n \t\tmodels.add(sphereModel);\nBaseBulletTest.init();\n \t\tcollisionConfiguration = new btDefaultCollisionConfiguration();\n \t\tdispatcher = new btCollisionDispatcher(collisionConfiguration);", "sourceBeforeFix": "Bullet.init()", "sourceAfterFix": "BaseBulletTest.init()"}
{"fixCommitSHA1": "8ac90aaf931dab73df457e33433cf1912df28b7f", "projectName": "apache.camel", "bugType": "Same Function More Args", "problem": "                 Map<String, Object> options = new HashMap<String, Object>();\n                 IntrospectionSupport.getProperties(msg, options, null);\n                IntrospectionSupport.setProperties(jpa, options);\n                IntrospectionSupport.setProperty(jpa, \"timestamp\", msg.getTimestamp());\n                 event.getIn().setBody(jpa);\n             } else {", "fixed": "                 Map<String, Object> options = new HashMap<String, Object>();\n                 IntrospectionSupport.getProperties(msg, options, null);\n                IntrospectionSupport.setProperties(exchange.getContext().getTypeConverter(), jpa, options);\n                IntrospectionSupport.setProperty(exchange.getContext().getTypeConverter(), jpa, \"timestamp\", msg.getTimestamp());\n                 event.getIn().setBody(jpa);\n             } else {", "sourceBeforeFix": "IntrospectionSupport.setProperties(jpa,options)", "sourceAfterFix": "IntrospectionSupport.setProperties(exchange.getContext().getTypeConverter(),jpa,options)"}
{"fixCommitSHA1": "24d4f1a7133defb3bf9a8726cfb864004a5876ca", "projectName": "google.closure-compiler", "bugType": "Same Function More Args", "problem": "   static final DiagnosticType REPORT_PATH_IO_ERROR =\n       DiagnosticType.error(\"JSC_REPORT_PATH_IO_ERROR\",\n          \"Error writing compiler report to {0}\");\n   /**\n    * All the aliases in a program form a graph, where each global name is", "fixed": "   static final DiagnosticType REPORT_PATH_IO_ERROR =\n       DiagnosticType.error(\"JSC_REPORT_PATH_IO_ERROR\",\n          \"Error writing compiler report to {0}:\\n{1}\");\n   /**\n    * All the aliases in a program form a graph, where each global name is", "sourceBeforeFix": "JSError.make(REPORT_PATH_IO_ERROR,reportPath)", "sourceAfterFix": "JSError.make(REPORT_PATH_IO_ERROR,reportPath,e.getMessage())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites() throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"favorites.json\", new PostParameter[0], true));\n     }\n     /**", "fixed": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites() throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"favorites.json\", new PostParameter[0], true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(639);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {console.log($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "fixed": " \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(638);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {console.log($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "sourceBeforeFix": "new StringBuilder(639)", "sourceAfterFix": "new StringBuilder(638)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<Status> getHomeTimeline() throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/home_timeline.json\", true));\n     }", "fixed": "      */\n     public ResponseList<Status> getHomeTimeline() throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/home_timeline.json\", true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_to_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_to_me.json\",null,true))"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedTwitterStreamingEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default TwitterStreamingEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedTwitterStreamingEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default TwitterStreamingEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface GoraEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedGoraEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface GoraEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedGoraEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "         if (isStatisticsEnabled()) {\n             if (result) {\n                 statistics.increaseCachePuts(1);\n                statistics.addPutTimeNano(System.nanoTime() - start);\n             }\n            statistics.addGetTimeNano(System.nanoTime() - start);\n             if (isHit) {\n                 statistics.increaseCacheHits(1);\n             } else {", "fixed": "         if (isStatisticsEnabled()) {\n             if (result) {\n                 statistics.increaseCachePuts(1);\n                statistics.addPutTimeNanos(System.nanoTime() - start);\n             }\n            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (isHit) {\n                 statistics.increaseCacheHits(1);\n             } else {", "sourceBeforeFix": "statistics.addGetTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addGetTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "4665dcf9ab41c3c61cd42aad296ebfe518bfa003", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\n \tpublic void glCopyTexImage2D (int target, int level, int internalformat, int x, int y, int width, int height, int border) {\n\t\tGL.glCopyTexImage2DEXT(target, level, internalformat, x, y, width, height, border);\n \t}\n \tpublic void glCopyTexSubImage2D (int target, int level, int xoffset, int yoffset, int x, int y, int width, int height) {\n\t\tGL.glCopyTexSubImage2DEXT(target, level, xoffset, yoffset, x, y, width, height);\n \t}\n \tpublic void glCullFace (int mode) {", "fixed": " \t}\n \tpublic void glCopyTexImage2D (int target, int level, int internalformat, int x, int y, int width, int height, int border) {\n\t\tGL.glCopyTexImage2D(target, level, internalformat, x, y, width, height, border);\n \t}\n \tpublic void glCopyTexSubImage2D (int target, int level, int xoffset, int yoffset, int x, int y, int width, int height) {\n\t\tGL.glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height);\n \t}\n \tpublic void glCullFace (int mode) {", "sourceBeforeFix": "GL.glGenTexturesEXT(n,textures,Memory.getPosition(textures))", "sourceAfterFix": "GL.glGenTextures(n,textures,Memory.getPosition(textures))"}
{"fixCommitSHA1": "a6acbd2403be12f2c9d24a6dc24eea6b0c530c0f", "projectName": "apache.hadoop", "bugType": "Wrong Function Name", "problem": "       return Subject.doAs(subject, action);\n     } catch (PrivilegedActionException pae) {\n       Throwable cause = pae.getCause();\n      LOG.error(\"PriviledgedActionException as:\"+this+\" cause:\"+cause);\n       if (cause instanceof IOException) {\n         throw (IOException) cause;\n       } else if (cause instanceof Error) {", "fixed": "       return Subject.doAs(subject, action);\n     } catch (PrivilegedActionException pae) {\n       Throwable cause = pae.getCause();\n      LOG.warn(\"PriviledgedActionException as:\"+this+\" cause:\"+cause);\n       if (cause instanceof IOException) {\n         throw (IOException) cause;\n       } else if (cause instanceof Error) {", "sourceBeforeFix": "LOG.error(\"PriviledgedActionException as:\" + this + \" cause:\"+ cause)", "sourceAfterFix": "LOG.warn(\"PriviledgedActionException as:\" + this + \" cause:\"+ cause)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "fixed": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "sourceBeforeFix": "GL20.glUniform1(location,toIntBuffer(v,offset,count))", "sourceAfterFix": "GL20.glUniform1iv(location,toIntBuffer(v,offset,count))"}
{"fixCommitSHA1": "8777c0882b68f70d662d21b862b0db35cf50826d", "projectName": "google.closure-compiler", "bugType": "Missing Throws Exception", "problem": "           return entry;\n         default:\n          throw new IllegalStateException(\n               \"Unexpected number of values for entry:\" + entryValues);\n       }\n     }", "fixed": "           return entry;\n         default:\n          throw new SourceMapParseException(\n               \"Unexpected number of values for entry:\" + entryValues);\n       }\n     }", "sourceBeforeFix": "2", "sourceAfterFix": "2"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15835, value = IN_SERIES + \" is missing groups: %s\")\n     String inSeriesIsMissingGroups(String rolloutPlan);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10835, value = IN_SERIES + \" is missing groups: %s\")\n     String inSeriesIsMissingGroups(String rolloutPlan);\n     /**", "sourceBeforeFix": "id=15859", "sourceAfterFix": "id=10859"}
{"fixCommitSHA1": "492fd118d4902c730fc8619851a7135b623631e2", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "                     .aggregator().header(\"id\")\r\n                    .batchTimeout(2000L)\r\n                     .batchSize(100)\r", "fixed": "                     .aggregator().header(\"id\")\r\n                    .batchTimeout(500L)\r\n                     .batchSize(100)\r", "sourceBeforeFix": "result.expectedMessageCount(2)", "sourceAfterFix": "result.expectedMinimumMessageCount(2)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15858, value = \"No deployment content with hash %s is available in the deployment content repository.\")\n     String noDeploymentContentWithHash(String hash);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10858, value = \"No deployment content with hash %s is available in the deployment content repository.\")\n     String noDeploymentContentWithHash(String hash);\n     /**", "sourceBeforeFix": "id=15848", "sourceAfterFix": "id=10848"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "             }\n         }\n         if (isStatisticsEnabled()) {\n            statistics.addGetTimeNano(System.nanoTime() - start);\n         }\n         CacheEntryProcessorEntry entry = new CacheEntryProcessorEntry(key, record, this, now);\n         final Object process = entryProcessor.process(entry, arguments);", "fixed": "             }\n         }\n         if (isStatisticsEnabled()) {\n            statistics.addGetTimeNanos(System.nanoTime() - start);\n         }\n         CacheEntryProcessorEntry entry = new CacheEntryProcessorEntry(key, record, this, now);\n         final Object process = entryProcessor.process(entry, arguments);", "sourceBeforeFix": "statistics.addGetTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addGetTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "6cc7f821a67636c81bf219662e3fa2c74eba0aad", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "                         }\n                     }\n                    connectionManager.markOwnerAddressAsClosed();\n                     IOUtil.closeResource(conn);\n                     conn = null;\n                     fireConnectionEvent(true);", "fixed": "                         }\n                     }\n                    connectionManager.markOwnerConnectionAsClosed();\n                     IOUtil.closeResource(conn);\n                     conn = null;\n                     fireConnectionEvent(true);", "sourceBeforeFix": "connectionManager.markOwnerAddressAsClosed()", "sourceAfterFix": "connectionManager.markOwnerConnectionAsClosed()"}
{"fixCommitSHA1": "1d5647b92215f0ceabced59275225ad829061663", "projectName": "spring-projects.spring-boot", "bugType": "Change Modifier", "problem": " \tprivate int port = Integer.valueOf(System.getProperty(\"port\"));\n \t@Test\n\tpublic void testHome() throws Exception {\nString url = \"http:\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);\n \t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);", "fixed": " \tprivate int port = Integer.valueOf(System.getProperty(\"port\"));\n \t@Test\n\tvoid testHome() throws Exception {\nString url = \"http:\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);\n \t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "a4662237bc467310f0dc1c28aa621f84571225b1", "projectName": "Activiti.Activiti", "bugType": "Change Numeric Literal", "problem": "     processEngineConfiguration.setClock(testClock);\n    testClock.setCurrentTime(new Date(0));\n     runtimeService.startProcessInstanceByKey(\"testTimerCancelledEvent\");\n     listener.clearEventsReceived();", "fixed": "     processEngineConfiguration.setClock(testClock);\n    testClock.setCurrentTime(new Date(1));\n     runtimeService.startProcessInstanceByKey(\"testTimerCancelledEvent\");\n     listener.clearEventsReceived();", "sourceBeforeFix": "new Date(0)", "sourceAfterFix": "new Date(1)"}
{"fixCommitSHA1": "2bebfdb7769796ed8adb1815a3319135456de196", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         File out = new File(\"target/out/hello.txt\").getAbsoluteFile();\n         assertTrue(\"file should exists\", out.exists());\n        assertEquals(\"Hello World\", IOConverter.toString(out));\n     }\n     protected RouteBuilder createRouteBuilder() throws Exception {", "fixed": "         File out = new File(\"target/out/hello.txt\").getAbsoluteFile();\n         assertTrue(\"file should exists\", out.exists());\n        assertEquals(\"Hello World\", IOConverter.toString(out, null));\n     }\n     protected RouteBuilder createRouteBuilder() throws Exception {", "sourceBeforeFix": "Thread.sleep(200)", "sourceAfterFix": "Thread.sleep(2000)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15868, value = \"Deployment %s is already started\")\n     String deploymentAlreadyStarted(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10868, value = \"Deployment %s is already started\")\n     String deploymentAlreadyStarted(String name);\n     /**", "sourceBeforeFix": "id=15832", "sourceAfterFix": "id=10832"}
{"fixCommitSHA1": "10c93df27435ffbc037cde5e6063c9dbc6c0eb3f", "projectName": "facebook.presto", "bugType": "Wrong Function Name", "problem": "         HostAndPort host = HostAndPort.fromString(server);\n         try {\n            return new URI(\"http\", null, host.getHostText(), host.getPortOrDefault(80), null, null, null);\n         }\n         catch (URISyntaxException e) {\n             throw new IllegalArgumentException(e);", "fixed": "         HostAndPort host = HostAndPort.fromString(server);\n         try {\n            return new URI(\"http\", null, host.getHost(), host.getPortOrDefault(80), null, null, null);\n         }\n         catch (URISyntaxException e) {\n             throw new IllegalArgumentException(e);", "sourceBeforeFix": "host.getHostText()", "sourceAfterFix": "host.getHost()"}
{"fixCommitSHA1": "6abc370f9cba6b7046aea997215d926e372c6c94", "projectName": "openmrs.openmrs-core", "bugType": "Change Modifier", "problem": " \t\t}\n \t}\n\tpublic static NameSupport getInstance() {\n \t\tif (singleton == null) {\n \t\t\tthrow new RuntimeException(\"Not Yet Instantiated\");\n \t\t} else {", "fixed": " \t\t}\n \t}\n\tpublic static synchronized NameSupport getInstance() {\n \t\tif (singleton == null) {\n \t\t\tthrow new RuntimeException(\"Not Yet Instantiated\");\n \t\t} else {", "sourceBeforeFix": "9", "sourceAfterFix": "41"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15856, value = \"Invalid url stream.\")\n     String invalidUrlStream();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10856, value = \"Invalid url stream.\")\n     String invalidUrlStream();\n     /**", "sourceBeforeFix": "id=15835", "sourceAfterFix": "id=10835"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "1c93b2a8d7e7dc8d7a1620c5566e7eb20df8f0ec", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "                         public void process(Exchange exchange) throws Exception {\n                             Random ran = new Random();\n                            int delay = ran.nextInt(500) + 10;\n                             Thread.sleep(delay);\n                         }\n                     }).to(\"mock:result\");", "fixed": "                         public void process(Exchange exchange) throws Exception {\n                             Random ran = new Random();\n                            int delay = ran.nextInt(250) + 10;\n                             Thread.sleep(delay);\n                         }\n                     }).to(\"mock:result\");", "sourceBeforeFix": "ran.nextInt(500)", "sourceAfterFix": "ran.nextInt(250)"}
{"fixCommitSHA1": "014f2410e81ed3ecc6b82fbac49ab345aab6e90f", "projectName": "junit-team.junit", "bugType": "Change Modifier", "problem": "         void delta() {}\n         void epsilon() {}\n     }\n    private static class Super {\n         void testOne() {}\n     }\n    private static class Sub extends Super {\n         void testTwo() {}\n     }", "fixed": "         void delta() {}\n         void epsilon() {}\n     }\n    static class Super {\n         void testOne() {}\n     }\n    static class Sub extends Super {\n         void testTwo() {}\n     }", "sourceBeforeFix": "10", "sourceAfterFix": "8"}
{"fixCommitSHA1": "07f17cfd4f51a397ebd058bd047ec330f8d4b572", "projectName": "netty.netty", "bugType": "Change Binary Operator", "problem": "             handshaking = false;\n             handshaken = false;\n            if (handshakeFuture != null) {\n                 handshakeFuture = newHandshakeFuture(channel);\n             }\n         }", "fixed": "             handshaking = false;\n             handshaken = false;\n            if (handshakeFuture == null) {\n                 handshakeFuture = newHandshakeFuture(channel);\n             }\n         }", "sourceBeforeFix": "handshakeFuture != null", "sourceAfterFix": "handshakeFuture == null"}
{"fixCommitSHA1": "6d0b8df8802f95880b33ad6823598b01175e97f6", "projectName": "apache.hadoop", "bugType": "Change Boolean Literal", "problem": "   \n   public static void format(Configuration conf) throws IOException {\n    format(conf, false);\n   }\n   static NameNodeMetrics metrics;", "fixed": "   \n   public static void format(Configuration conf) throws IOException {\n    format(conf, true);\n   }\n   static NameNodeMetrics metrics;", "sourceBeforeFix": "format(conf,false)", "sourceAfterFix": "format(conf,true)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform1fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform1(location, v);\r\n \t}\r\n \tpublic void glUniform1fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform1(location, toFloatBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform1i (int location, int x) {\r", "fixed": " \t}\r\n \tpublic void glUniform1fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform1fv(location, v);\r\n \t}\r\n \tpublic void glUniform1fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform1fv(location, toFloatBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform1i (int location, int x) {\r", "sourceBeforeFix": "GL20.glUniform2(location,v)", "sourceAfterFix": "GL20.glUniform2iv(location,v)"}
{"fixCommitSHA1": "e2efffc72002968f835a0ea6a70f8e7762752b15", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": " \t\tConceptName assumedDuplicateName = ConceptNameTest.createMockConceptName(3, Context.getLocale(), null, true);\r\n \t\tassumedDuplicateName.setName(duplicateName.getName());\r\n \t\tnewConcept.addName(assumedDuplicateName);\r\n\t\tErrors errors = new BindException(concept, \"concept\");\r\n \t\tnew ConceptValidator().validate(newConcept, errors);\r\n \t\tAssert.assertEquals(false, errors.hasErrors());\r\n \t}\r", "fixed": " \t\tConceptName assumedDuplicateName = ConceptNameTest.createMockConceptName(3, Context.getLocale(), null, true);\r\n \t\tassumedDuplicateName.setName(duplicateName.getName());\r\n \t\tnewConcept.addName(assumedDuplicateName);\r\n\t\tErrors errors = new BindException(newConcept, \"concept\");\r\n \t\tnew ConceptValidator().validate(newConcept, errors);\r\n \t\tAssert.assertEquals(false, errors.hasErrors());\r\n \t}\r", "sourceBeforeFix": "new BindException(concept,\"concept\")", "sourceAfterFix": "new BindException(newConcept,\"concept\")"}
{"fixCommitSHA1": "761d3ff3b19109715644ebc2bfa0396f3148d772", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "                 } catch (InterruptedException e) {\n                     e.printStackTrace();\n                 }\n                hz1.getLifecycleService().terminate();\n             }\n         };", "fixed": "                 } catch (InterruptedException e) {\n                     e.printStackTrace();\n                 }\n                hz1.getLifecycleService().shutdown();\n             }\n         };", "sourceBeforeFix": "hz1.getLifecycleService().terminate()", "sourceAfterFix": "hz1.getLifecycleService().shutdown()"}
{"fixCommitSHA1": "f0cd1c2accadd71cdfb6300c34bc0587b16d4c69", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "             attr.addOperationParameterDescription(resources, \"infinispan.container\", op);\n         }\n        ALIAS.addOperationParameterDescription(resources, \"infinispan.container\", op).\n                 get(ModelDescriptionConstants.VALUE_TYPE).set(ModelType.STRING);\n         return op;\n     }", "fixed": "             attr.addOperationParameterDescription(resources, \"infinispan.container\", op);\n         }\n        ALIASES.addOperationParameterDescription(resources, \"infinispan.container\", op).\n                 get(ModelDescriptionConstants.VALUE_TYPE).set(ModelType.STRING);\n         return op;\n     }", "sourceBeforeFix": "ALIAS.addResourceAttributeDescription(resources,keyPrefix,container)", "sourceAfterFix": "ALIASES.addResourceAttributeDescription(resources,keyPrefix,container)"}
{"fixCommitSHA1": "cb6f6e26c12839e59243f25bfb142ec5e5b71135", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "             public void configure() throws Exception {\n                 from(\"direct:start\")\n                         .multicast(new MyAggregationStrategy())\n                        .parallelProcessing().timeout(2000).to(\"direct:a\", \"direct:b\", \"direct:c\")\n                         .end()\n                         .to(\"mock:result\");\n                from(\"direct:a\").delay(3000).setBody(constant(\"A\"));\n                 from(\"direct:b\").setBody(constant(\"B\"));", "fixed": "             public void configure() throws Exception {\n                 from(\"direct:start\")\n                         .multicast(new MyAggregationStrategy())\n                            .parallelProcessing().timeout(1000).to(\"direct:a\", \"direct:b\", \"direct:c\")\n                         .end()\n                         .to(\"mock:result\");\n                from(\"direct:a\").delay(2000).setBody(constant(\"A\"));\n                 from(\"direct:b\").setBody(constant(\"B\"));", "sourceBeforeFix": "from(\"direct:a\").delay(3000)", "sourceAfterFix": "from(\"direct:a\").delay(2000)"}
{"fixCommitSHA1": "3c8d3e908b01f47c69600a235fb7e5173f4f0d7b", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "   }\n   \n  public final Iterable<ObjectType> getOwnImplementedInterfaces() {\n     return implementedInterfaces;\n   }", "fixed": "   }\n   \n  public final ImmutableList<ObjectType> getOwnImplementedInterfaces() {\n     return implementedInterfaces;\n   }", "sourceBeforeFix": "Iterable<ObjectType>", "sourceAfterFix": "ImmutableList<ObjectType>"}
{"fixCommitSHA1": "2d0ea883af4aa38443d0a72b925a17b71bfd0f3b", "projectName": "naver.pinpoint", "bugType": "Change Identifier Used", "problem": "                 String trace = traceInText.get(i);\n                 String[] tokens = trace.split(\",\");\n                stackTrace[i] = new StackTraceElement(tokens[0], tokens[1], tokens[2], Integer.valueOf(tokens[3]));\n             }\n             return new ChildProcessException(exceptionClass + \": \" + message, stackTrace);", "fixed": "                 String trace = traceInText.get(i);\n                 String[] tokens = trace.split(\",\");\n                stackTrace[i] = new StackTraceElement(tokens[0], tokens[1], tokens[2], Integer.parseInt(tokens[3]));\n             }\n             return new ChildProcessException(exceptionClass + \": \" + message, stackTrace);", "sourceBeforeFix": "Integer.valueOf(tokens[3])", "sourceAfterFix": "Integer.parseInt(tokens[3])"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "4665dcf9ab41c3c61cd42aad296ebfe518bfa003", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\n \tpublic void glPolygonOffset (float factor, float units) {\n\t\tGL.glPolygonOffsetEXT(factor, units);\n \t}\n \tpublic void glReadPixels (int x, int y, int width, int height, int format, int type, Buffer pixels) {", "fixed": " \t}\n \tpublic void glPolygonOffset (float factor, float units) {\n\t\tGL.glPolygonOffset(factor, units);\n \t}\n \tpublic void glReadPixels (int x, int y, int width, int height, int format, int type, Buffer pixels) {", "sourceBeforeFix": "GL.glDrawArraysEXT(mode,first,count)", "sourceAfterFix": "GL.glDrawArrays(mode,first,count)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15845, value = \"Invalid rollout plan. Server group %s has a %s value of %s; must be between 0 and 100.\")\n     String invalidRolloutPlanRange(String name, String propertyName, int value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10845, value = \"Invalid rollout plan. Server group %s has a %s value of %s; must be between 0 and 100.\")\n     String invalidRolloutPlanRange(String name, String propertyName, int value);\n     /**", "sourceBeforeFix": "id=15847", "sourceAfterFix": "id=10847"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface SpringLdapEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedSpringLdapEndpointBuilder advanced() {", "fixed": "     \n    public interface SpringLdapEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedSpringLdapEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "634fb738883042dd28f0f16330c3a796766d99d8", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "  public static final FunctionType TOP_FUNCTION = new FunctionType(\n       null, null, null, null, null, null, null, null, false);\n  public static final FunctionType LOOSE_TOP_FUNCTION = new FunctionType(\n       null, null, null, null, null, null, null, null, true);", "fixed": "  static final FunctionType TOP_FUNCTION = new FunctionType(\n       null, null, null, null, null, null, null, null, false);\n  private static final FunctionType LOOSE_TOP_FUNCTION = new FunctionType(\n       null, null, null, null, null, null, null, null, true);", "sourceBeforeFix": "25", "sourceAfterFix": "24"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15851, value = \"Operation targets host %s but that host is not registered\")\n     String invalidOperationTargetHost(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10851, value = \"Operation targets host %s but that host is not registered\")\n     String invalidOperationTargetHost(String name);\n     /**", "sourceBeforeFix": "id=15831", "sourceAfterFix": "id=10831"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface GangliaEndpointBuilder\n            extends\n                EndpointProducerBuilder {\n         default AdvancedGangliaEndpointBuilder advanced() {\n             return (AdvancedGangliaEndpointBuilder) this;\n         }", "fixed": "     \n    public interface GangliaEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedGangliaEndpointBuilder advanced() {\n             return (AdvancedGangliaEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "615135aaa2ec18ea6c0b4785749079df4db5fd7a", "projectName": "joelittlejohn.jsonschema2pojo", "bugType": "Change Identifier Used", "problem": "         });\n         assertThat(args.didExit(), is(false));\n        assertThat(args.getSource().next().getFile(), is(\"/home/source\"));\n         assertThat(args.getTargetDirectory(), is(theFile(\"/home/target\")));\n         assertThat(args.getTargetPackage(), is(\"mypackage\"));\n         assertThat(args.isGenerateBuilders(), is(true));", "fixed": "         });\n         assertThat(args.didExit(), is(false));\n        assertThat(args.getSource().next().getFile(), endsWith(\"/home/source\"));\n         assertThat(args.getTargetDirectory(), is(theFile(\"/home/target\")));\n         assertThat(args.getTargetPackage(), is(\"mypackage\"));\n         assertThat(args.isGenerateBuilders(), is(true));", "sourceBeforeFix": "is(\"/home/source\")", "sourceAfterFix": "endsWith(\"/home/source\")"}
{"fixCommitSHA1": "95524c3fa58076c2490c89343e322205dded9fcc", "projectName": "wildfly.wildfly", "bugType": "Same Function More Args", "problem": "             .addFlag(Flag.RESTART_ALL_SERVICES)\n             .setAllowExpression(true)\n             .setCorrector(MapAttributeDefinition.LIST_TO_MAP_CORRECTOR)\n            .setValidator(new StringLengthValidator(1))\n             .build();\n     public static AttributeDefinition[] ALL_ATTRIBUTES = new AttributeDefinition[]{CODE, VAULT_OPTIONS};", "fixed": "             .addFlag(Flag.RESTART_ALL_SERVICES)\n             .setAllowExpression(true)\n             .setCorrector(MapAttributeDefinition.LIST_TO_MAP_CORRECTOR)\n            .setValidator(new StringLengthValidator(1, true, true))\n             .build();\n     public static AttributeDefinition[] ALL_ATTRIBUTES = new AttributeDefinition[]{CODE, VAULT_OPTIONS};", "sourceBeforeFix": "new StringLengthValidator(1)", "sourceAfterFix": "new StringLengthValidator(1,true,true)"}
{"fixCommitSHA1": "fa5635c39e3000406103657977b98efa79bd4512", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      * {@inheritDoc}\n      */\n     public List<Trends> getWeeklyTrends(Date date, boolean excludeHashTags) throws TwitterException {\n        return TrendsJSONImpl.createTrendsList(http.get(conf.getSearchBaseURL()\n                 + \"trends/weekly.json?date=\" + toDateStr(date)\n                 + (excludeHashTags ? \"&exclude=hashtags\" : \"\")));\n     }", "fixed": "      * {@inheritDoc}\n      */\n     public List<Trends> getWeeklyTrends(Date date, boolean excludeHashTags) throws TwitterException {\n        return TrendsJSONImpl.createTrendsList(http.get(conf.getRestBaseURL()\n                 + \"trends/weekly.json?date=\" + toDateStr(date)\n                 + (excludeHashTags ? \"&exclude=hashtags\" : \"\")));\n     }", "sourceBeforeFix": "conf.getSearchBaseURL()", "sourceAfterFix": "conf.getRestBaseURL()"}
{"fixCommitSHA1": "8c24988faaaed2d46433ab097eae29c105d6a16f", "projectName": "spring-projects.spring-boot", "bugType": "Change Modifier", "problem": " \t\n\tpublic static SecurityContext NONE = new SecurityContext() {\n \t\t@Override\n \t\tpublic Principal getPrincipal() {", "fixed": " \t\n\tstatic SecurityContext NONE = new SecurityContext() {\n \t\t@Override\n \t\tpublic Principal getPrincipal() {", "sourceBeforeFix": "9", "sourceAfterFix": "8"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  private final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "499d9d3f89368592549f1ec3701f5a7616113a4c", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \t\tgrammarBuilder.append(\"\\n\");\n \t\tgrammarBuilder.append(\"func (*LeafListener) ExitA(ctx *AContext) {\\n\");\n \t\tgrammarBuilder.append(\"\tif ctx.GetChildCount() == 2 {\\n\");\n\t\tgrammarBuilder.append(\"\t\tfmt.Printf(\\\"%s %s %s\\\", ctx.INT(0).GetSymbol().GetText(), ctx.INT(1).GetSymbol().GetText(), ctx.AllINT())\\n\");\n \t\tgrammarBuilder.append(\"\t} else {\\n\");\n \t\tgrammarBuilder.append(\"\t\tfmt.Println(ctx.ID().GetSymbol())\\n\");\n \t\tgrammarBuilder.append(\"\t}\\n\");", "fixed": " \t\tgrammarBuilder.append(\"\\n\");\n \t\tgrammarBuilder.append(\"func (*LeafListener) ExitA(ctx *AContext) {\\n\");\n \t\tgrammarBuilder.append(\"\tif ctx.GetChildCount() == 2 {\\n\");\n\t\tgrammarBuilder.append(\"\t\tfmt.Printf(\\\"%s %s %s\\\", ctx.INT(0).GetSymbol().GetText(), ctx.INT(1).GetSymbol().GetText(), antlr.PrintArrayJavaStyle(antlr.TerminalNodeToStringArray(ctx.AllINT())))\\n\");\n \t\tgrammarBuilder.append(\"\t} else {\\n\");\n \t\tgrammarBuilder.append(\"\t\tfmt.Println(ctx.ID().GetSymbol())\\n\");\n \t\tgrammarBuilder.append(\"\t}\\n\");", "sourceBeforeFix": "new StringBuilder(674)", "sourceAfterFix": "new StringBuilder(734)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface IrcEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedIrcEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface IrcEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedIrcEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface VertxEndpointBuilder\n             extends\n                 VertxEndpointConsumerBuilder, VertxEndpointProducerBuilder {\n         default AdvancedVertxEndpointBuilder advanced() {", "fixed": "     \n    public interface VertxEndpointBuilder\n             extends\n                 VertxEndpointConsumerBuilder, VertxEndpointProducerBuilder {\n         default AdvancedVertxEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "3deba86fbc98387501b2076b82c35ac78a56de21", "projectName": "square.javapoet", "bugType": "Wrong Function Name", "problem": "   }\n   @Test public void eolComment() throws IOException {\n    javaWriter.emitSingleLineCOmment(\"foo\");\nassertCode(\"\n   }", "fixed": "   }\n   @Test public void eolComment() throws IOException {\n    javaWriter.emitSingleLineComment(\"foo\");\nassertCode(\"\n   }", "sourceBeforeFix": "javaWriter.emitSingleLineCOmment(\"foo\")", "sourceAfterFix": "javaWriter.emitSingleLineComment(\"foo\")"}
{"fixCommitSHA1": "6ec426667bbf19be4fca84eec48e03152e2cfffe", "projectName": "joelittlejohn.jsonschema2pojo", "bugType": "Change Identifier Used", "problem": "         });\n         assertThat(args.didExit(), is(false));\n        assertThat(args.getSource().next().getFile(), is(\"/home/source\"));\n         assertThat(args.getTargetDirectory(), is(theFile(\"/home/target\")));\n         assertThat(args.getTargetPackage(), is(nullValue()));\n         assertThat(args.isGenerateBuilders(), is(false));", "fixed": "         });\n         assertThat(args.didExit(), is(false));\n        assertThat(args.getSource().next().getFile(), endsWith(\"/home/source\"));\n         assertThat(args.getTargetDirectory(), is(theFile(\"/home/target\")));\n         assertThat(args.getTargetPackage(), is(nullValue()));\n         assertThat(args.isGenerateBuilders(), is(false));", "sourceBeforeFix": "is(\"/home/source\")", "sourceAfterFix": "endsWith(\"/home/source\")"}
{"fixCommitSHA1": "37020447c8cf1b9576eb0b6128c9504990d45a42", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "         GroovyShellFactory groovyShellFactory = mock(GroovyShellFactory.class);\n         given(groovyShellFactory.createGroovyShell(any(Exchange.class))).willReturn(new GroovyShell());\n         SimpleRegistry registry = new SimpleRegistry();\n        registry.put(\"groovyShellFactory\", groovyShellFactory);\n         CamelContext camelContext = new DefaultCamelContext(registry);", "fixed": "         GroovyShellFactory groovyShellFactory = mock(GroovyShellFactory.class);\n         given(groovyShellFactory.createGroovyShell(any(Exchange.class))).willReturn(new GroovyShell());\n         SimpleRegistry registry = new SimpleRegistry();\n        registry.bind(\"groovyShellFactory\", groovyShellFactory);\n         CamelContext camelContext = new DefaultCamelContext(registry);", "sourceBeforeFix": "registry.put(\"groovyShellFactory\",groovyShellFactory)", "sourceAfterFix": "registry.bind(\"groovyShellFactory\",groovyShellFactory)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 15872, value = \"Invalid code %d\")\n     IllegalArgumentException invalidCode(int code);\n }", "fixed": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 10872, value = \"Invalid code %d\")\n     IllegalArgumentException invalidCode(int code);\n }", "sourceBeforeFix": "id=15870", "sourceAfterFix": "id=10870"}
{"fixCommitSHA1": "05a98f3214d35ba13978bc88988d5a83864b8cd7", "projectName": "alibaba.dubbo", "bugType": "Change Boolean Literal", "problem": "     boolean generic() default false;\n    boolean injvm() default false;\n     boolean check() default true;", "fixed": "     boolean generic() default false;\n    boolean injvm() default true;\n     boolean check() default true;", "sourceBeforeFix": "boolean injvm() default false; ", "sourceAfterFix": "boolean injvm() default true; "}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getFavorites(String id, int page) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"favorites/\" + id + \".json\", \"page\", String.valueOf(page), true));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getFavorites(String id, int page) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"favorites/\" + id + \".json\", \"page\", String.valueOf(page), true));\n     }\n     /**", "sourceBeforeFix": "SavedSearch.constructSavedSearches(get(getBaseURL() + \"saved_searches.json\",true))", "sourceAfterFix": "SavedSearch.createSavedSearchList(get(getBaseURL() + \"saved_searches.json\",true))"}
{"fixCommitSHA1": "ee8bd325463cae737e0ffd836a3d5376fe695f3f", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         MockEndpoint bar = getMockEndpoint(\"mock:bar\");\n         bar.expectedMinimumMessageCount(1);\n        bar.setResultWaitTime(3000);\n         template.sendBody(\"seda:foo\", \"A\");\n         template.sendBody(\"seda:foo\", \"B\");", "fixed": "         MockEndpoint bar = getMockEndpoint(\"mock:bar\");\n         bar.expectedMinimumMessageCount(1);\n        bar.setResultWaitTime(1000);\n         template.sendBody(\"seda:foo\", \"A\");\n         template.sendBody(\"seda:foo\", \"B\");", "sourceBeforeFix": "bar.setResultWaitTime(3000)", "sourceAfterFix": "bar.setResultWaitTime(1000)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  private final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface RestletEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedRestletEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface RestletEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedRestletEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsCsv(String path, long millis, OUT endTuple) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, endTuple);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsCsv(String path, long millis, OUT endTuple) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, endTuple);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "f8c20919f9c2e18e48142c2712e34298f98b983e", "projectName": "spring-projects.spring-boot", "bugType": "Wrong Function Name", "problem": " \tpublic void restartWithKeepAlive() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tthis.container = factory\n\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n \t\tMultiThreadedHttpConnectionManager connectionManager = new MultiThreadedHttpConnectionManager();\n \t\tHttpClient client = new HttpClient(connectionManager);", "fixed": " \tpublic void restartWithKeepAlive() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tthis.container = factory\n\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \t\tMultiThreadedHttpConnectionManager connectionManager = new MultiThreadedHttpConnectionManager();\n \t\tHttpClient client = new HttpClient(connectionManager);", "sourceBeforeFix": "factory.getEmbdeddedServletContainer()", "sourceAfterFix": "factory.getEmbeddedServletContainer()"}
{"fixCommitSHA1": "280e0cb9e4cc0e647ba171e4a998722eeffb85eb", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "     @Override\n     public Object processInvocation(InterceptorContext interceptorContext) throws Exception {\n         SingletonComponent singletonComponent = getComponent(interceptorContext, SingletonComponent.class);\n         ComponentInstance singletonComponentInstance = singletonComponent.getComponentInstance();\n        if (singletonComponent == null) {\n             throw MESSAGES.componentInstanceNotAvailable(interceptorContext);\n         }\n         interceptorContext.putPrivateData(ComponentInstance.class, singletonComponentInstance);", "fixed": "     @Override\n     public Object processInvocation(InterceptorContext interceptorContext) throws Exception {\n         SingletonComponent singletonComponent = getComponent(interceptorContext, SingletonComponent.class);\n         ComponentInstance singletonComponentInstance = singletonComponent.getComponentInstance();\n        if (singletonComponentInstance == null) {\n             throw MESSAGES.componentInstanceNotAvailable(interceptorContext);\n         }\n         interceptorContext.putPrivateData(ComponentInstance.class, singletonComponentInstance);", "sourceBeforeFix": "singletonComponent == null", "sourceAfterFix": "singletonComponentInstance == null"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     }, tags={ \"pet\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 405, message = \"Invalid input\", response = Void.class) })\n    void addPet(@Valid Pet body);\n     @DELETE\n     @Path(\"/{petId}\")", "fixed": "     }, tags={ \"pet\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 405, message = \"Invalid input\", response = Void.class) })\n    void addPet(@Valid Pet body) throws Exception;\n     @DELETE\n     @Path(\"/{petId}\")", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fcea9dfeb6b2e12cb04602baac67b3a1c3cb58c9", "projectName": "wildfly.wildfly", "bugType": "Same Function More Args", "problem": "     SimpleAttributeDefinition TARGET = SimpleAttributeDefinitionBuilder.create(\"target\", ModelType.STRING, true).\n             setDefaultValue(new ModelNode().set(Target.SYSTEM_OUT.toString())).\n            setValidator(EnumValidator.create(Target.class, false, false)).\n             build();\n     SimpleAttributeDefinition USE_PARENT_HANDLERS = SimpleAttributeDefinitionBuilder.create(\"use-parent-handlers\", ModelType.BOOLEAN, true).", "fixed": "     SimpleAttributeDefinition TARGET = SimpleAttributeDefinitionBuilder.create(\"target\", ModelType.STRING, true).\n             setDefaultValue(new ModelNode().set(Target.SYSTEM_OUT.toString())).\n            setValidator(EnumValidator.create(Target.class, true, false)).\n             build();\n     SimpleAttributeDefinition USE_PARENT_HANDLERS = SimpleAttributeDefinitionBuilder.create(\"use-parent-handlers\", ModelType.BOOLEAN, true).", "sourceBeforeFix": "SimpleAttributeDefinitionBuilder.create(\"min-inclusive\",ModelType.BOOLEAN)", "sourceAfterFix": "SimpleAttributeDefinitionBuilder.create(\"min-inclusive\",ModelType.BOOLEAN,true)"}
{"fixCommitSHA1": "d70d6a71ee43414e3ad54bacc9ac609dcd2efca9", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "   }\n   private void getTestHelper(TachyonFS tfs) throws IOException {\n    int fileId = mTfs.createFile(new TachyonURI(\"/root/testFile1\"));\n     Assert.assertEquals(3, fileId);\n    Assert.assertNotNull(mTfs.getFile(fileId));\n   }\n   @Test", "fixed": "   }\n   private void getTestHelper(TachyonFS tfs) throws IOException {\n    int fileId = tfs.createFile(new TachyonURI(\"/root/testFile1\"));\n     Assert.assertEquals(3, fileId);\n    Assert.assertNotNull(tfs.getFile(fileId));\n   }\n   @Test", "sourceBeforeFix": "mTfs.createFile(new TachyonURI(\"/root/testFile1\"))", "sourceAfterFix": "tfs.createFile(new TachyonURI(\"/root/testFile1\"))"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "fixed": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "sourceBeforeFix": "GL11.glGetTexParameter(target,pname,params)", "sourceAfterFix": "GL11.glGetTexParameteriv(target,pname,params)"}
{"fixCommitSHA1": "e9f14f107361d9cef5582c2d2a8e657691e76ec6", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "     HRegionInfo mockRegionInfo = Mockito.mock(HRegionInfo.class);\n     Mockito.when(mockRS.getRegion((RegionSpecifier)Mockito.any())).thenReturn(mockRegion);\n     Mockito.when(mockRegion.getRegionInfo()).thenReturn(mockRegionInfo);\n    Mockito.when(mockRegionInfo.isMetaRegion()).thenReturn(true);\n     qosFunction.setRegionServer(mockRS);\n     assertTrue (qosFunction.apply(rpcRequest) == HConstants.HIGH_QOS);\n   }", "fixed": "     HRegionInfo mockRegionInfo = Mockito.mock(HRegionInfo.class);\n     Mockito.when(mockRS.getRegion((RegionSpecifier)Mockito.any())).thenReturn(mockRegion);\n     Mockito.when(mockRegion.getRegionInfo()).thenReturn(mockRegionInfo);\n    Mockito.when(mockRegionInfo.isMetaTable()).thenReturn(true);\n     qosFunction.setRegionServer(mockRS);\n     assertTrue (qosFunction.apply(rpcRequest) == HConstants.HIGH_QOS);\n   }", "sourceBeforeFix": "mockRegionInfo.isMetaRegion()", "sourceAfterFix": "mockRegionInfo.isMetaTable()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15846, value = \"Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.\")\n     String invalidRolloutPlanLess(String name, String propertyName, int value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10846, value = \"Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.\")\n     String invalidRolloutPlanLess(String name, String propertyName, int value);\n     /**", "sourceBeforeFix": "id=15858", "sourceAfterFix": "id=10858"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedCaffeineLoadCacheEndpointBuilder\n             extends\n                 AdvancedCaffeineLoadCacheEndpointConsumerBuilder, AdvancedCaffeineLoadCacheEndpointProducerBuilder {\n         default CaffeineLoadCacheEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedCaffeineLoadCacheEndpointBuilder\n             extends\n                 AdvancedCaffeineLoadCacheEndpointConsumerBuilder, AdvancedCaffeineLoadCacheEndpointProducerBuilder {\n         default CaffeineLoadCacheEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "4a19c2c078ddf5484e0cb8c1ac075451f158fa40", "projectName": "Atmosphere.atmosphere", "bugType": "Change Unary Operator\t", "problem": "                     switch (p2) {\n                         case BEFORE_DEFAULT:\n                         case FIRST_BEFORE_DEFAULT:\n                            orderResult = -1;\n                             break;\n                     }\n                     break;", "fixed": "                     switch (p2) {\n                         case BEFORE_DEFAULT:\n                         case FIRST_BEFORE_DEFAULT:\n                            orderResult = 1;\n                             break;\n                     }\n                     break;", "sourceBeforeFix": "-1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "1c93b2a8d7e7dc8d7a1620c5566e7eb20df8f0ec", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         long taken = watch.stop();\n         assertEquals(taken, watch.taken());\n        assertTrue(\"Should take approx 200 millis, was: \" + taken, taken > 190);\n     }\n     public void testStopWatchNotStarted() throws Exception {", "fixed": "         long taken = watch.stop();\n         assertEquals(taken, watch.taken());\n        assertTrue(\"Should take approx 200 millis, was: \" + taken, taken > 150);\n     }\n     public void testStopWatchNotStarted() throws Exception {", "sourceBeforeFix": "taken > 190", "sourceAfterFix": "taken > 150"}
{"fixCommitSHA1": "3dddcc4cdf4a74ddbd4607c6aaee5bdd8ac46c27", "projectName": "gephi.gephi", "bugType": "Change Modifier", "problem": "         octree.initArchitecture();\n     }\n    public void updateSelection(GL2 gl, GLU glu) {\n         if (vizConfig.isSelectionEnable() && currentSelectionArea != null && currentSelectionArea.isEnabled()) {\n             float[] mp = Arrays.copyOf(graphIO.getMousePosition(), 2);\n             float[] cent = currentSelectionArea.getSelectionAreaCenter();", "fixed": "         octree.initArchitecture();\n     }\n    public synchronized void updateSelection(GL2 gl, GLU glu) {\n         if (vizConfig.isSelectionEnable() && currentSelectionArea != null && currentSelectionArea.isEnabled()) {\n             float[] mp = Arrays.copyOf(graphIO.getMousePosition(), 2);\n             float[] cent = currentSelectionArea.getSelectionAreaCenter();", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      * @param task          the task.\n      */\n     @LogMessage(level = Level.ERROR)\n    @Message(id = 15809, value = \"%s caught %s waiting for task %s; returning\")\n     void caughtExceptionWaitingForTaskReturning(String className, String exceptionName, String task);\n }", "fixed": "      * @param task          the task.\n      */\n     @LogMessage(level = Level.ERROR)\n    @Message(id = 10809, value = \"%s caught %s waiting for task %s; returning\")\n     void caughtExceptionWaitingForTaskReturning(String className, String exceptionName, String task);\n }", "sourceBeforeFix": "id=15800", "sourceAfterFix": "id=10800"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15834, value = \"%s recognizes only %s as children: %s\")\n     String unrecognizedChildren(String parent, String children, String parentSpec);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10834, value = \"%s recognizes only %s as children: %s\")\n     String unrecognizedChildren(String parent, String children, String parentSpec);\n     /**", "sourceBeforeFix": "id=15872", "sourceAfterFix": "id=10872"}
{"fixCommitSHA1": "b7a82854871f76fbc0bda0c5fec2be699fc46b68", "projectName": "hazelcast.hazelcast", "bugType": "Change Numeric Literal", "problem": "     }\n     public class PutItemsThread extends Thread {\n        public static final int MAX_ITEMS = 1000;\n         public final MyEntryListener listener = new MyEntryListener();\n         public HazelcastInstance client;", "fixed": "     }\n     public class PutItemsThread extends Thread {\n        public static final int MAX_ITEMS = 100;\n         public final MyEntryListener listener = new MyEntryListener();\n         public HazelcastInstance client;", "sourceBeforeFix": "MAX_ITEMS=1000", "sourceAfterFix": "MAX_ITEMS=100"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface WeatherEndpointBuilder\n             extends\n                 WeatherEndpointConsumerBuilder, WeatherEndpointProducerBuilder {\n         default AdvancedWeatherEndpointBuilder advanced() {", "fixed": "     \n    public interface WeatherEndpointBuilder\n             extends\n                 WeatherEndpointConsumerBuilder, WeatherEndpointProducerBuilder {\n         default AdvancedWeatherEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15842, value = \"Invalid rollout plan. %s is not a valid child of node %s\")\n     String invalidRolloutPlan(ModelNode modelNode, String nodeName);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10842, value = \"Invalid rollout plan. %s is not a valid child of node %s\")\n     String invalidRolloutPlan(ModelNode modelNode, String nodeName);\n     /**", "sourceBeforeFix": "id=15845", "sourceAfterFix": "id=10845"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n            statistics.addRemoveTimeNano(System.nanoTime() - start);\n             if (hitCount == 1) {\n                 statistics.increaseCacheHits(hitCount);\n             } else {", "fixed": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n            statistics.addRemoveTimeNanos(System.nanoTime() - start);\n             if (hitCount == 1) {\n                 statistics.increaseCacheHits(hitCount);\n             } else {", "sourceBeforeFix": "statistics.addPutTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addPutTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "0187e5106dfc5034b8b1650083eab37181ff0de3", "projectName": "spring-projects.spring-boot", "bugType": "Change Modifier", "problem": " \t}\n \t@Test\n\tvoid userConfigurationJdbcTemplateDependency() {\n \t\tthis.contextRunner.withConfiguration(AutoConfigurations.of(JdbcTemplateAutoConfiguration.class))\n \t\t\t\t.withUserConfiguration(LiquibaseUserConfiguration.class, EmbeddedDataSourceConfiguration.class)\n \t\t\t\t.run((context) -> {", "fixed": " \t}\n \t@Test\n\tpublic void userConfigurationJdbcTemplateDependency() {\n \t\tthis.contextRunner.withConfiguration(AutoConfigurations.of(JdbcTemplateAutoConfiguration.class))\n \t\t\t\t.withUserConfiguration(LiquibaseUserConfiguration.class, EmbeddedDataSourceConfiguration.class)\n \t\t\t\t.run((context) -> {", "sourceBeforeFix": "0", "sourceAfterFix": "1"}
{"fixCommitSHA1": "09acbc1a4f78be8e64a6d28918ad5c6ac08dc753", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " /*\n * Copyright 2012-2018 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.", "fixed": " /*\n * Copyright 2012-2019 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.", "sourceBeforeFix": "UndertowServletWebServer.class", "sourceAfterFix": "UndertowWebServer.class"}
{"fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "       mBuf.flip();\n       for (int pId = mLeft; pId < mRight; pId ++) {\n         long startTimeMs = System.currentTimeMillis();\n        TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n         OutStream os = file.getOutStream(WriteType.MUST_CACHE);\n         for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n           mBuf.putInt(0, k + mWorkerId);", "fixed": "       mBuf.flip();\n       for (int pId = mLeft; pId < mRight; pId ++) {\n         long startTimeMs = System.currentTimeMillis();\n        TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n         OutStream os = file.getOutStream(WriteType.MUST_CACHE);\n         for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n           mBuf.putInt(0, k + mWorkerId);", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "4b52e5d010469405c1ec24baa2f8457f3eada222", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic boolean touchDown (int screenX, int screenY, int pointer, int button) {\r\n\t\tInputProcessor[] items = processors.begin();\r\n \t\ttry {\r\n \t\t\tfor (int i = 0, n = processors.size; i < n; i++)\r\n\t\t\t\tif (items[i].touchDown(screenX, screenY, pointer, button)) return true;\r\n \t\t} finally {\r\n \t\t\tprocessors.end();\r\n \t\t}\r", "fixed": " \t}\r\n \tpublic boolean touchDown (int screenX, int screenY, int pointer, int button) {\r\n\t\tObject[] items = processors.begin();\r\n \t\ttry {\r\n \t\t\tfor (int i = 0, n = processors.size; i < n; i++)\r\n\t\t\t\tif (((InputProcessor)items[i]).touchDown(screenX, screenY, pointer, button)) return true;\r\n \t\t} finally {\r\n \t\t\tprocessors.end();\r\n \t\t}\r", "sourceBeforeFix": "InputProcessor[]", "sourceAfterFix": "Object[]"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e2854295f7c484671ce69bff7ec37fcb0c413a32", "projectName": "perwendel.spark", "bugType": "Change Identifier Used", "problem": "      *\n      * @return Type of exception\n      */\n    public Class<? extends Exception> exceptionClass() {\n         return this.exceptionClass;\n     }", "fixed": "      *\n      * @return Type of exception\n      */\n    public Class<? extends T> exceptionClass() {\n         return this.exceptionClass;\n     }", "sourceBeforeFix": "? extends Exception", "sourceAfterFix": "? extends T"}
{"fixCommitSHA1": "1be8d7fe7a40efb4c363679538e4c0cb31c6b43e", "projectName": "google.closure-compiler", "bugType": "Same Function More Args", "problem": "         consumer.parse(sourceMapContents);\n         parsedSourceMap = consumer;\n       } catch (IOException e) {\n        JSError error = JSError.make(SourceMapInput.SOURCEMAP_RESOLVE_FAILED, sourceMapPath);\n         errorManager.report(error.getDefaultLevel(), error);\n       } catch (SourceMapParseException e) {\n        JSError error = JSError.make(SourceMapInput.SOURCEMAP_PARSE_FAILED, sourceMapPath);\n         errorManager.report(error.getDefaultLevel(), error);\n       }\n     }", "fixed": "         consumer.parse(sourceMapContents);\n         parsedSourceMap = consumer;\n       } catch (IOException e) {\n        JSError error =\n            JSError.make(SourceMapInput.SOURCEMAP_RESOLVE_FAILED, sourceMapPath, e.getMessage());\n         errorManager.report(error.getDefaultLevel(), error);\n       } catch (SourceMapParseException e) {\n        JSError error =\n            JSError.make(SourceMapInput.SOURCEMAP_PARSE_FAILED, sourceMapPath, e.getMessage());\n         errorManager.report(error.getDefaultLevel(), error);\n       }\n     }", "sourceBeforeFix": "JSError.make(SourceMapInput.SOURCEMAP_PARSE_FAILED,sourceMapPath)", "sourceAfterFix": "JSError.make(SourceMapInput.SOURCEMAP_PARSE_FAILED,sourceMapPath,e.getMessage())"}
{"fixCommitSHA1": "ac0a527f7df275e047a4d6440ddc1cb0a1e4912c", "projectName": "libgdx.libgdx", "bugType": "Change Binary Operator", "problem": " \t\treturn this.set(min.set(0, 0, 0), max.set(0, 0, 0));\r\n \t}\r\n\t\r\n \tpublic boolean isValid () {\r\n\t\treturn min.x < max.x && min.y < max.y && min.z < max.z;\r\n \t}\r\n \t/** Extends this bounding box by the given bounding box.\r", "fixed": " \t\treturn this.set(min.set(0, 0, 0), max.set(0, 0, 0));\r\n \t}\r\n\t\r\n \tpublic boolean isValid () {\r\n\t\treturn min.x <= max.x && min.y <= max.y && min.z <= max.z;\r\n \t}\r\n \t/** Extends this bounding box by the given bounding box.\r", "sourceBeforeFix": "min.x < max.x", "sourceAfterFix": "min.x <= max.x"}
{"fixCommitSHA1": "59ada6a131a7c551ba6288b211e108acb5806dc8", "projectName": "apache.hive", "bugType": "Same Function Less Args", "problem": "         partNames.add(part.getName());\n       }\n       AcidUtils.TableSnapshot tableSnapshot =\n          AcidUtils.getTableSnapshot(hive.getConf(), tbl, true);\n       Map<String, List<ColumnStatisticsObj>> result = hive.getMSC().getPartitionColumnStatistics(\n           tbl.getDbName(), tbl.getTableName(), partNames, Lists.newArrayList(colName),", "fixed": "         partNames.add(part.getName());\n       }\n       AcidUtils.TableSnapshot tableSnapshot =\n          AcidUtils.getTableSnapshot(hive.getConf(), tbl);\n       Map<String, List<ColumnStatisticsObj>> result = hive.getMSC().getPartitionColumnStatistics(\n           tbl.getDbName(), tbl.getTableName(), partNames, Lists.newArrayList(colName),", "sourceBeforeFix": "AcidUtils.getTableSnapshot(hive.getConf(),tbl,true)", "sourceAfterFix": "AcidUtils.getTableSnapshot(hive.getConf(),tbl)"}
{"fixCommitSHA1": "f364e6cd70e89922ad9dc6778e8eb32781c5da0d", "projectName": "apache.camel", "bugType": "Missing Throws Exception", "problem": "     \n    public static void main(String... args) {\n         Main.main(args);\n     }", "fixed": "     \n    public static void main(String... args) throws Exception {\n         Main.main(args);\n     }", "sourceBeforeFix": "9", "sourceAfterFix": "9"}
{"fixCommitSHA1": "cb6f6e26c12839e59243f25bfb142ec5e5b71135", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "     public void testBeanRecipientListParallelTimeout() throws Exception {\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedBodiesReceived(\"BC\");\n         template.sendBody(\"direct:start\", \"Hello\");", "fixed": "     public void testBeanRecipientListParallelTimeout() throws Exception {\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.message(0).body().not(body().contains(\"A\"));\n         template.sendBody(\"direct:start\", \"Hello\");", "sourceBeforeFix": "from(\"direct:a\").delay(3000)", "sourceAfterFix": "from(\"direct:a\").delay(2000)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public List<SavedSearch> getSavedSearches() throws TwitterException {\n        return SavedSearch.constructSavedSearches(get(getBaseURL() + \"saved_searches.json\", true));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n      */\n     public List<SavedSearch> getSavedSearches() throws TwitterException {\n        return SavedSearch.createSavedSearchList(get(getBaseURL() + \"saved_searches.json\", true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/home_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/home_timeline.json\",true))"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public List<Trends> getWeeklyTrends() throws TwitterException {\n        return Trends.constructTrendsList(get(getSearchBaseURL()\n                 + \"trends/weekly.json\", false));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public List<Trends> getWeeklyTrends() throws TwitterException {\n        return Trends.createTrendsList(get(getSearchBaseURL()\n                 + \"trends/weekly.json\", false));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites/\" + id+ \".json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites/\" + id+ \".json\",new PostParameter[0],true))"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserListMemberships(String user, long cursor) throws TwitterException {\n        return twitter4j.List.constructListOfLists(get(getApiBaseURL() + V1 +\n                 user + \"/lists/memberships.json?cursor=\" + cursor, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserListMemberships(String user, long cursor) throws TwitterException {\n        return twitter4j.List.createListList(get(getApiBaseURL() + V1 +\n                 user + \"/lists/memberships.json?cursor=\" + cursor, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline.json\",true))"}
{"fixCommitSHA1": "9467bef8ea9a62658b32dd43a76f4f98087d1986", "projectName": "apache.hadoop", "bugType": "Change Unary Operator\t", "problem": "     KeyShell ks = new KeyShell();\n     ks.setConf(new Configuration());\n     rc = ks.run(args1);\n    assertEquals(-1, rc);\n     assertTrue(outContent.toString().contains(\"There are no valid \" +\n \t\t\"KeyProviders configured.\"));\n   }", "fixed": "     KeyShell ks = new KeyShell();\n     ks.setConf(new Configuration());\n     rc = ks.run(args1);\n    assertEquals(1, rc);\n     assertTrue(outContent.toString().contains(\"There are no valid \" +\n \t\t\"KeyProviders configured.\"));\n   }", "sourceBeforeFix": "-1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public List<Trends> getDailyTrends(Date date, boolean excludeHashTags) throws TwitterException {\n        return Trends.constructTrendsList(get(getSearchBaseURL()\n                 + \"trends/daily.json?date=\" + toDateStr(date)\n                 + (excludeHashTags ? \"&exclude=hashtags\" : \"\"), false));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public List<Trends> getDailyTrends(Date date, boolean excludeHashTags) throws TwitterException {\n        return Trends.createTrendsList(get(getSearchBaseURL()\n                 + \"trends/daily.json?date=\" + toDateStr(date)\n                 + (excludeHashTags ? \"&exclude=hashtags\" : \"\"), false));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites/\" + id+ \".json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites/\" + id+ \".json\",new PostParameter[0],true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "378e87f1e3bf8b2451ca511668954b707680b843", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "     }\n     \n    String getMessage()\n     {\n         final ResourceBundle bundle =", "fixed": "     }\n     \n    public String getMessage()\n     {\n         final ResourceBundle bundle =", "sourceBeforeFix": "0", "sourceAfterFix": "1"}
{"fixCommitSHA1": "ec5961a27122b228cb8adb634ee183eebcefa98c", "projectName": "apache.hive", "bugType": "Change Identifier Used", "problem": "     final String command,\n     final LinkedHashMap<String,ArrayList<String>> pathToAliases,\n     final LinkedHashMap<String,partitionDesc> pathToPartitionInfo,\n    final HashMap<String,Operator<? extends Serializable>> aliasToWork,\n     final tableDesc keyDesc,\n     List<tableDesc> tagToValueDesc,\n     final Operator<?> reducer,", "fixed": "     final String command,\n     final LinkedHashMap<String,ArrayList<String>> pathToAliases,\n     final LinkedHashMap<String,partitionDesc> pathToPartitionInfo,\n    final LinkedHashMap<String,Operator<? extends Serializable>> aliasToWork,\n     final tableDesc keyDesc,\n     List<tableDesc> tagToValueDesc,\n     final Operator<?> reducer,", "sourceBeforeFix": "HashMap<String,Operator<? extends Serializable>>", "sourceAfterFix": "LinkedHashMap<String,Operator<? extends Serializable>>"}
{"fixCommitSHA1": "a4d8f930af1f17a6c48a9abd94f49e5fd719fc31", "projectName": "netty.netty", "bugType": "Change Identifier Used", "problem": "         if (value instanceof AsciiString) {\n             return ((AsciiString) value).byteAt(0);\n         }\n        return Byte.valueOf(value.toString());\n     }\n     @Override", "fixed": "         if (value instanceof AsciiString) {\n             return ((AsciiString) value).byteAt(0);\n         }\n        return Byte.parseByte(value.toString());\n     }\n     @Override", "sourceBeforeFix": "Double.valueOf(value.toString())", "sourceAfterFix": "Double.parseDouble(value.toString())"}
{"fixCommitSHA1": "1acf1d0444177a86813d1807bb1910041c14ce75", "projectName": "brianfrankcooper.YCSB", "bugType": "Same Function More Args", "problem": " \t\t\t}\n\t\t\tString exporterStr = props.getProperty(\"exporter\");\n \t\t\ttry\n \t\t\t{\n \t\t\t\texporter = (MeasurementsExporter) Class.forName(exporterStr).getConstructor(OutputStream.class).newInstance(out);", "fixed": " \t\t\t}\n\t\t\tString exporterStr = props.getProperty(\"exporter\", \"com.yahoo.ycsb.measurements.exporter.TextMeasurementsExporter\");\n \t\t\ttry\n \t\t\t{\n \t\t\t\texporter = (MeasurementsExporter) Class.forName(exporterStr).getConstructor(OutputStream.class).newInstance(out);", "sourceBeforeFix": "props.getProperty(\"exporter\")", "sourceAfterFix": "props.getProperty(\"exporter\",\"com.yahoo.ycsb.measurements.exporter.TextMeasurementsExporter\")"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedFlinkEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default FlinkEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedFlinkEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default FlinkEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "e669002a9698f48bc48ee0138798f7acf655c33d", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     }\n     public List<BacklogTracerEventMessage> dumpAllTracedMessages() {\n        List<BacklogTracerEventMessage> answer = new ArrayList<>();\n         answer.addAll(queue);\n         if (isRemoveOnDump()) {\n             queue.clear();", "fixed": "     }\n     public List<BacklogTracerEventMessage> dumpAllTracedMessages() {\n        List<BacklogTracerEventMessage> answer = new ArrayList<BacklogTracerEventMessage>();\n         answer.addAll(queue);\n         if (isRemoveOnDump()) {\n             queue.clear();", "sourceBeforeFix": "1", "sourceAfterFix": "17"}
{"fixCommitSHA1": "5d19fcfd8328e89ac9ff5c4a31734d7ed152a501", "projectName": "apache.hbase", "bugType": "Change Numeric Literal", "problem": "   }\n   public static final long FIXED_OVERHEAD =\n      ClassSize.align((20 * ClassSize.REFERENCE) + (6 * Bytes.SIZEOF_LONG)\n               + (3 * Bytes.SIZEOF_INT) + Bytes.SIZEOF_BOOLEAN);\n   public static final long DEEP_OVERHEAD = ClassSize.align(FIXED_OVERHEAD", "fixed": "   }\n   public static final long FIXED_OVERHEAD =\n      ClassSize.align((20 * ClassSize.REFERENCE) + (4 * Bytes.SIZEOF_LONG)\n               + (3 * Bytes.SIZEOF_INT) + Bytes.SIZEOF_BOOLEAN);\n   public static final long DEEP_OVERHEAD = ClassSize.align(FIXED_OVERHEAD", "sourceBeforeFix": "6 * Bytes.SIZEOF_LONG", "sourceAfterFix": "4 * Bytes.SIZEOF_LONG"}
{"fixCommitSHA1": "77da02863c5a852357b4d41fe47a3bdcb418f7c4", "projectName": "jersey.jersey", "bugType": "Change Modifier", "problem": "     /**\n      * If {@code true} then disable META-INF/services lookup globally on client/server.\n      * <p>\n     * By default Jersey lookups SPI implementations described by META-INF/services/* files.\n      * Then you can register appropriate provider classes by {@link javax.ws.rs.core.Application}.\n      * </p>\n      * <p>", "fixed": "     /**\n      * If {@code true} then disable META-INF/services lookup globally on client/server.\n      * <p>\n     * By default Jersey looks up SPI implementations described by META-INF/services/* files.\n      * Then you can register appropriate provider classes by {@link javax.ws.rs.core.Application}.\n      * </p>\n      * <p>", "sourceBeforeFix": "9", "sourceAfterFix": "26"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "a5324f4086176f54dccf5df1864bcd1b458a851d", "projectName": "alibaba.druid", "bugType": "Change Unary Operator\t", "problem": "     public List<String> getActiveConnectionStackTraceByDataSourceId(Integer id) {\n         Object datasource = getDruidDataSourceById(id);\n        if (datasource == null || DruidDataSourceUtils.isRemoveAbandoned(datasource)) {\n             return null;\n         }", "fixed": "     public List<String> getActiveConnectionStackTraceByDataSourceId(Integer id) {\n         Object datasource = getDruidDataSourceById(id);\n        if (datasource == null || !DruidDataSourceUtils.isRemoveAbandoned(datasource)) {\n             return null;\n         }", "sourceBeforeFix": "DruidDataSourceUtils.isRemoveAbandoned(datasource)", "sourceAfterFix": "!DruidDataSourceUtils.isRemoveAbandoned(datasource)"}
{"fixCommitSHA1": "8fe9347ccf26084928d9bb4367c03a44953a3934", "projectName": "dropwizard.metrics", "bugType": "Change Modifier", "problem": "     private void setMin(long potentialMin) {\n         boolean done = false;\n         while (!done) {\n            long currentMin = _min.get();\n             done = currentMin <= potentialMin || _min.compareAndSet(currentMin, potentialMin);\n         }\n     }", "fixed": "     private void setMin(long potentialMin) {\n         boolean done = false;\n         while (!done) {\n            final long currentMin = _min.get();\n             done = currentMin <= potentialMin || _min.compareAndSet(currentMin, potentialMin);\n         }\n     }", "sourceBeforeFix": "0", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e0aff862bb608004841da3487d94aecb45964e17", "projectName": "Alluxio.alluxio", "bugType": "Change Numeric Literal", "problem": "   public static void logPerIteration(long startTimeMs, int times, String msg, int workerId) {\n     long takenTimeMs = System.currentTimeMillis() - startTimeMs;\n    double result = 1000L * FILE_BYTES / takenTimeMs / 1024 / 1024;\n     LOG.info(times + msg + workerId + \" : \" + result + \" Mb/sec. Took \" + takenTimeMs + \" ms. \");\n   }", "fixed": "   public static void logPerIteration(long startTimeMs, int times, String msg, int workerId) {\n     long takenTimeMs = System.currentTimeMillis() - startTimeMs;\n    double result = 1000.0 * FILE_BYTES / takenTimeMs / 1024 / 1024;\n     LOG.info(times + msg + workerId + \" : \" + result + \" Mb/sec. Took \" + takenTimeMs + \" ms. \");\n   }", "sourceBeforeFix": "FILES_BYTES * 1000L", "sourceAfterFix": "FILES_BYTES * 1000.0"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15852, value = \"Caught %s storing deployment content -- %s\")\n     String caughtExceptionStoringDeploymentContent(String exceptionName, Throwable exception);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10852, value = \"Caught %s storing deployment content -- %s\")\n     String caughtExceptionStoringDeploymentContent(String exceptionName, Throwable exception);\n     /**", "sourceBeforeFix": "id=15870", "sourceAfterFix": "id=10870"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "fixed": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniformfv(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniformiv(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "sourceBeforeFix": "GL11.glGetInteger(pname,params)", "sourceAfterFix": "GL11.glGetIntegerv(pname,params)"}
{"fixCommitSHA1": "5aaaddd4f52a81353ff659cd4c41a39f0fbfd571", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "     testSame(\"Object.defineProperties(a, {anything:1})\");\n   }\n  private static final List<String> LITERAL_OPERANDS =\n       ImmutableList.of(\n           \"null\",\n           \"undefined\",", "fixed": "     testSame(\"Object.defineProperties(a, {anything:1})\");\n   }\n  private static final ImmutableList<String> LITERAL_OPERANDS =\n       ImmutableList.of(\n           \"null\",\n           \"undefined\",", "sourceBeforeFix": "List<String>", "sourceAfterFix": "ImmutableList<String>"}
{"fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "       if (TACHYON_STREAMING_READ) {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n           InputStream is = file.getInStream(ReadType.CACHE);\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;", "fixed": "       if (TACHYON_STREAMING_READ) {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           InputStream is = file.getInStream(ReadType.CACHE);\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "a1f2648d7054129d0c68f4b0228e3d96fd96d64e", "projectName": "apache.camel", "bugType": "Change Unary Operator\t", "problem": "     private TaskExecutor taskExecutor;\n     private boolean pubSubNoLocal;\n     private int concurrentConsumers = 1;\n    private int maxMessagesPerTask = 1;\n     private int cacheLevel = -1;\n     private String cacheLevelName;\n     private long recoveryInterval = -1;", "fixed": "     private TaskExecutor taskExecutor;\n     private boolean pubSubNoLocal;\n     private int concurrentConsumers = 1;\n    private int maxMessagesPerTask = -1;\n     private int cacheLevel = -1;\n     private String cacheLevelName;\n     private long recoveryInterval = -1;", "sourceBeforeFix": "1", "sourceAfterFix": "-1"}
{"fixCommitSHA1": "55ed50c4975cf694828d46ee9ca32ce72a9ef913", "projectName": "clojure.clojure", "bugType": "Wrong Function Name", "problem": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 13:\r\n\t\t\treturn invoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "fixed": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 13:\r\n\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "sourceBeforeFix": "invoke(args.first(),args.rest())", "sourceAfterFix": "doInvoke(args.first(),args.rest())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "     DomainControllerLogger HOST_CONTROLLER_LOGGER = Logger.getMessageLogger(DomainControllerLogger.class, \"org.jboss.as.host.controller\");\n     @LogMessage(level = Level.WARN)\n    @Message(id = 15800, value = \"Ignoring 'include' child of 'socket-binding-group' %s\")\n     void warnIgnoringSocketBindingGroupInclude(Location location);\n     @LogMessage(level = Level.WARN)\n    @Message(id = 15801, value = \"Ignoring 'include' child of 'profile' %s\")\n     void warnIgnoringProfileInclude(Location location);\n     /**", "fixed": "     DomainControllerLogger HOST_CONTROLLER_LOGGER = Logger.getMessageLogger(DomainControllerLogger.class, \"org.jboss.as.host.controller\");\n     @LogMessage(level = Level.WARN)\n    @Message(id = 10800, value = \"Ignoring 'include' child of 'socket-binding-group' %s\")\n     void warnIgnoringSocketBindingGroupInclude(Location location);\n     @LogMessage(level = Level.WARN)\n    @Message(id = 10801, value = \"Ignoring 'include' child of 'profile' %s\")\n     void warnIgnoringProfileInclude(Location location);\n     /**", "sourceBeforeFix": "id=15807", "sourceAfterFix": "id=10807"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "c888434580c601ac9c4734e19d8eefac63518031", "projectName": "swagger-api.swagger-codegen", "bugType": "Wrong Function Name", "problem": "             + (StringUtils.isEmpty(modelPackage) ? \"\" : (modelPackage + \"/\")) + dataType;\n     }\n     private String getJSDocTypeWithBraces(CodegenModel cm, CodegenProperty cp) {\n         return \"{\" + getJSDocType(cm, cp) + \"}\";\n     }\n     private String getJSDocType(CodegenModel cm, CodegenProperty cp) {\n         if (Boolean.TRUE.equals(cp.isContainer)) {", "fixed": "             + (StringUtils.isEmpty(modelPackage) ? \"\" : (modelPackage + \"/\")) + dataType;\n     }\n    \n     private String getJSDocType(CodegenModel cm, CodegenProperty cp) {\n         if (Boolean.TRUE.equals(cp.isContainer)) {", "sourceBeforeFix": "getJSDocTypeWithBraces(operation)", "sourceAfterFix": "getJSDocType(operation)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "3757a700a89638e5747d966bdaa8266b62c974c8", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "     assertEquals(bytes, encoding.decode(encoded));\n   }\n  private void assertFailsToDecode(BaseEncoding encoding, String cannotDecode) {\n     try {\n       encoding.decode(cannotDecode);\n       fail(\"Expected IllegalArgumentException\");", "fixed": "     assertEquals(bytes, encoding.decode(encoded));\n   }\n  private static void assertFailsToDecode(BaseEncoding encoding, String cannotDecode) {\n     try {\n       encoding.decode(cannotDecode);\n       fail(\"Expected IllegalArgumentException\");", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15858, value = \"No deployment content with hash %s is available in the deployment content repository.\")\n     String noDeploymentContentWithHash(String hash);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10858, value = \"No deployment content with hash %s is available in the deployment content repository.\")\n     String noDeploymentContentWithHash(String hash);\n     /**", "sourceBeforeFix": "id=15847", "sourceAfterFix": "id=10847"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15840, value = \"Interrupted waiting for result from server %s\")\n     String interruptedAwaitingResultFromServer(ServerIdentity server);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10840, value = \"Interrupted waiting for result from server %s\")\n     String interruptedAwaitingResultFromServer(ServerIdentity server);\n     /**", "sourceBeforeFix": "id=15833", "sourceAfterFix": "id=10833"}
{"fixCommitSHA1": "1b50e64ae913b5521dcc38f5eaf7a637acf5ecd2", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "     if (mConnected) {\n       try {\n        if (mHeartbeat != null) {\n           mHeartbeatExecutor.heartbeat();\n         }\n         mProtocol.getTransport().close();", "fixed": "     if (mConnected) {\n       try {\n        if (mHeartbeatExecutor != null) {\n           mHeartbeatExecutor.heartbeat();\n         }\n         mProtocol.getTransport().close();", "sourceBeforeFix": "mHeartbeat != null", "sourceAfterFix": "mHeartbeatExecutor != null"}
{"fixCommitSHA1": "866e204dfa331c04bef2f2781c625b9c2a068623", "projectName": "wildfly.wildfly", "bugType": "Less Specific If", "problem": "         synchronized (this.timers) {\n             for (final TimerImpl timer : this.timers.values()) {\n                if (timer.isActive()) {\n                     if (timer.getPrimaryKey() == null || timer.getPrimaryKey().equals(pk)) {\n                         activeTimers.add(timer);\n                     }", "fixed": "         synchronized (this.timers) {\n             for (final TimerImpl timer : this.timers.values()) {\n                if (timer.isActive() || (!timer.isActive() && timer.getState() == TimerState.ACTIVE)) {\n                     if (timer.getPrimaryKey() == null || timer.getPrimaryKey().equals(pk)) {\n                         activeTimers.add(timer);\n                     }", "sourceBeforeFix": "timer.isActive()", "sourceAfterFix": "timer.isActive() || (!timer.isActive() && timer.getState() == TimerState.ACTIVE)"}
{"fixCommitSHA1": "7012976421d9e593d8b276697b2fbbc9328b6fa5", "projectName": "libgdx.libgdx", "bugType": "Same Function More Args", "problem": " \t\n \tpublic Container<T> prefSize (float width, float height) {\n\t\tprefSize(new Fixed(width));\n \t\treturn this;\n \t}", "fixed": " \t\n \tpublic Container<T> prefSize (float width, float height) {\n\t\tprefSize(new Fixed(width), new Fixed(height));\n \t\treturn this;\n \t}", "sourceBeforeFix": "maxSize(new Fixed(width))", "sourceAfterFix": "maxSize(new Fixed(width),new Fixed(height))"}
{"fixCommitSHA1": "79946366e1ab141ef2b595e0079dcac7b913da2b", "projectName": "checkstyle.checkstyle", "bugType": "Wrong Function Name", "problem": "         };\n         verify(checkConfig,\n                getPath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\"), expected);\n     }\n     @Test", "fixed": "         };\n         verify(checkConfig,\n                getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\"),\n                expected);\n     }\n     @Test", "sourceBeforeFix": "getPath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\")", "sourceAfterFix": "getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "43b2fa49ca351c05c453c8cd0eec32ce6277c830", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " public class Label extends Widget {\r\n \tprivate LabelStyle style;\r\n \tprivate final TextBounds bounds = new TextBounds();\r\n\tprivate String text;\r\n \tprivate BitmapFontCache cache;\r\n \tprivate float prefWidth, prefHeight;\r\n \tprivate int labelAlign = Align.LEFT;\r", "fixed": " public class Label extends Widget {\r\n \tprivate LabelStyle style;\r\n \tprivate final TextBounds bounds = new TextBounds();\r\n\tprivate CharSequence text;\r\n \tprivate BitmapFontCache cache;\r\n \tprivate float prefWidth, prefHeight;\r\n \tprivate int labelAlign = Align.LEFT;\r", "sourceBeforeFix": "private String text; ", "sourceAfterFix": "private CharSequence text; "}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15865, value = \"Invalid content declaration\")\n     String invalidContentDeclaration();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10865, value = \"Invalid content declaration\")\n     String invalidContentDeclaration();\n     /**", "sourceBeforeFix": "id=15837", "sourceAfterFix": "id=10837"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15843, value = \"Invalid rollout plan. Plan operations affect server groups %s that are not reflected in the rollout plan\")\n     String invalidRolloutPlan(Set<String> groups);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10843, value = \"Invalid rollout plan. Plan operations affect server groups %s that are not reflected in the rollout plan\")\n     String invalidRolloutPlan(Set<String> groups);\n     /**", "sourceBeforeFix": "id=15832", "sourceAfterFix": "id=10832"}
{"fixCommitSHA1": "6eb2326aa30e1308247e6e40ff77b6b4a532e62d", "projectName": "stanfordnlp.CoreNLP", "bugType": "Change Identifier Used", "problem": "     if (language != null && !\"default\".equals(language)) {\n       String languagePropertiesFile = LanguageInfo.getLanguagePropertiesFile(language);\n       if (languagePropertiesFile != null) {\n        try (InputStream is = IOUtils.getInputStreamFromURLOrClasspathOrFileSystem(languagePropertiesFile)){\n           Properties languageSpecificProperties = new Properties();\n           languageSpecificProperties.load(is);\n           PropertiesUtils.overWriteProperties(props,languageSpecificProperties);", "fixed": "     if (language != null && !\"default\".equals(language)) {\n       String languagePropertiesFile = LanguageInfo.getLanguagePropertiesFile(language);\n       if (languagePropertiesFile != null) {\n        try (BufferedReader is = IOUtils.readerFromString(languagePropertiesFile)){\n           Properties languageSpecificProperties = new Properties();\n           languageSpecificProperties.load(is);\n           PropertiesUtils.overWriteProperties(props,languageSpecificProperties);", "sourceBeforeFix": "InputStream is=IOUtils.getInputStreamFromURLOrClasspathOrFileSystem(languagePropertiesFile)", "sourceAfterFix": "BufferedReader is=IOUtils.readerFromString(languagePropertiesFile)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "64bc69ef4c547771f44f6b6b103cda7be2f0922b", "projectName": "dropwizard.metrics", "bugType": "Wrong Function Name", "problem": " \t}\n \tpublic SortedMap<String, Histogram> getHistograms(MetricFilter filter) {\n\t\treturn adaptMetrics(Histogram.class, reg.getCounters(transformFilter(filter)));\n \t}\n \tpublic SortedMap<String, Meter> getMeters() {", "fixed": " \t}\n \tpublic SortedMap<String, Histogram> getHistograms(MetricFilter filter) {\n\t\treturn adaptMetrics(Histogram.class, reg.getHistograms(transformFilter(filter)));\n \t}\n \tpublic SortedMap<String, Meter> getMeters() {", "sourceBeforeFix": "reg.getCounters(transformFilter(filter))", "sourceAfterFix": "reg.getHistograms(transformFilter(filter))"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface BeanValidatorEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedBeanValidatorEndpointBuilder advanced() {", "fixed": "     \n    public interface BeanValidatorEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedBeanValidatorEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "8abd59029e7c0bc0973b492fd84a386b26661bc7", "projectName": "alibaba.dubbo", "bugType": "Wrong Function Name", "problem": "             }\n         });\n         try {\n            finish.await(getTimeout(), TimeUnit.MILLISECONDS);\n         } catch (InterruptedException e) {\n             throw new RemotingException(this, \"client(url: \" + getUrl() + \") failed to connect to server \" + getRemoteAddress() + \" client-side timeout \"\n                    + getTimeout() + \"ms (elapsed: \" + (System.currentTimeMillis() - start)\n                     + \"ms) from netty client \" + NetUtils.getLocalHost() + \" using dubbo version \"\n                     + Version.getVersion() + \", cause: \" + e.getMessage(), e);\n         }", "fixed": "             }\n         });\n         try {\n            finish.await(getConnectTimeout(), TimeUnit.MILLISECONDS);\n         } catch (InterruptedException e) {\n             throw new RemotingException(this, \"client(url: \" + getUrl() + \") failed to connect to server \" + getRemoteAddress() + \" client-side timeout \"\n                    + getConnectTimeout() + \"ms (elapsed: \" + (System.currentTimeMillis() - start)\n                     + \"ms) from netty client \" + NetUtils.getLocalHost() + \" using dubbo version \"\n                     + Version.getVersion() + \", cause: \" + e.getMessage(), e);\n         }", "sourceBeforeFix": "getTimeout()", "sourceAfterFix": "getConnectTimeout()"}
{"fixCommitSHA1": "c9a1cc9df3dc4fe2eef78ad6090a9b1d95a02557", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "             .setMeasurementUnit(MeasurementUnit.MILLISECONDS)\n             .setAllowExpression(true)\n             .setFlags(AttributeAccess.Flag.RESTART_ALL_SERVICES)\n            .setDefaultValue(new ModelNode().set(-1))\n             .build();\n     static final AttributeDefinition[] ATTRIBUTES = new AttributeDefinition[] { MAX_IDLE, LIFESPAN, INTERVAL };", "fixed": "             .setMeasurementUnit(MeasurementUnit.MILLISECONDS)\n             .setAllowExpression(true)\n             .setFlags(AttributeAccess.Flag.RESTART_ALL_SERVICES)\n            .setDefaultValue(new ModelNode().set(-1L))\n             .build();\n     static final AttributeDefinition[] ATTRIBUTES = new AttributeDefinition[] { MAX_IDLE, LIFESPAN, INTERVAL };", "sourceBeforeFix": "-1", "sourceAfterFix": "-1L"}
{"fixCommitSHA1": "c5b57e3099abcd8d8fd222c327ec52159422e6d9", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "             selectedKeysField.set(selector, set);\n             publicSelectedKeysField.set(selector, set);\n            logger.info(\"Optimized Selector: \" + selector.getClass().getName());\n             return set;\n         } catch (Throwable t) {", "fixed": "             selectedKeysField.set(selector, set);\n             publicSelectedKeysField.set(selector, set);\n            logger.finest(\"Optimized Selector: \" + selector.getClass().getName());\n             return set;\n         } catch (Throwable t) {", "sourceBeforeFix": "logger.info(\"Optimized Selector: \" + selector.getClass().getName())", "sourceAfterFix": "logger.finest(\"Optimized Selector: \" + selector.getClass().getName())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15870, value = \"Unknown server group %s\")\n     IllegalStateException unknownServerGroup(String serverGroup);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10870, value = \"Unknown server group %s\")\n     IllegalStateException unknownServerGroup(String serverGroup);\n     /**", "sourceBeforeFix": "id=15869", "sourceAfterFix": "id=10869"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15871, value = \"Unknown server %s\")\n     IllegalStateException unknownServer(ServerIdentity server);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10871, value = \"Unknown server %s\")\n     IllegalStateException unknownServer(ServerIdentity server);\n     /**", "sourceBeforeFix": "id=15856", "sourceAfterFix": "id=10856"}
{"fixCommitSHA1": "8eaaa7fdcddab9de44049a062f413533d2447f26", "projectName": "brettwooldridge.HikariCP", "bugType": "Change Numeric Literal", "problem": "          final long maxLifetime = config.getMaxLifetime();\n          if (maxLifetime > 0) {\n            final long variance = maxLifetime > 10_000 ? ThreadLocalRandom.current().nextLong( Math.max(10_000, maxLifetime / 40) ) : 0;\n             final long lifetime = maxLifetime - variance;\n             poolEntry.setFutureEol(houseKeepingExecutorService.schedule(new Runnable() {\n                @Override", "fixed": "          final long maxLifetime = config.getMaxLifetime();\n          if (maxLifetime > 0) {\n            final long variance = maxLifetime > 10_000 ? ThreadLocalRandom.current().nextLong( maxLifetime / 40 ) : 0;\n             final long lifetime = maxLifetime - variance;\n             poolEntry.setFutureEol(houseKeepingExecutorService.schedule(new Runnable() {\n                @Override", "sourceBeforeFix": "connectionTimeout / 2", "sourceAfterFix": "connectionTimeout / 4"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "fixed": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2fv(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2fv(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "sourceBeforeFix": "GL20.glUniform3(location,toFloatBuffer(v,offset,count * 3))", "sourceAfterFix": "GL20.glUniform3fv(location,toFloatBuffer(v,offset,count * 3))"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r", "fixed": " \t}\r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r", "sourceBeforeFix": "GL20.glUniform4(location,v)", "sourceAfterFix": "GL20.glUniform4fv(location,v)"}
{"fixCommitSHA1": "0878f4e562469829fb7ae3de0af4e22c1c775a91", "projectName": "thinkaurelius.titan", "bugType": "Wrong Function Name", "problem": "                         Collection<StaticBuffer> actual = Sets.newHashSet(i);\n                        log.error(\"Checking bounds [{}, {}) (expect {} keys)\",\n                                 new Object[]{startCol, endCol, expected.size()});\n                         Assert.assertEquals(expected, actual);\n                         i.close();", "fixed": "                         Collection<StaticBuffer> actual = Sets.newHashSet(i);\n                        log.debug(\"Checking bounds [{}, {}) (expect {} keys)\",\n                                 new Object[]{startCol, endCol, expected.size()});\n                         Assert.assertEquals(expected, actual);\n                         i.close();", "sourceBeforeFix": "log.error(\"Checking bounds [{}, {}) (expect {} keys)\",new Object[]{startCol,endCol,expected.size()})", "sourceAfterFix": "log.debug(\"Checking bounds [{}, {}) (expect {} keys)\",new Object[]{startCol,endCol,expected.size()})"}
{"fixCommitSHA1": "3df88ef9460eb7a72aa9ed2b16ad3844ad5e786b", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Change Identifier Used", "problem": "                 String location = response.getHeader(HttpHeaders.Names.LOCATION);\n                 URI uri = AsyncHttpProviderUtils.getRedirectUri(future.getURI(), location);\n                 boolean stripQueryString = config.isRemoveQueryParamOnRedirect();\n                if (!uri.toString().equalsIgnoreCase(future.getURI().toString())) {\n                     final RequestBuilder nBuilder = stripQueryString ?\n                             new RequestBuilder(future.getRequest()).setQueryParameters(null)\n                             : new RequestBuilder(future.getRequest());", "fixed": "                 String location = response.getHeader(HttpHeaders.Names.LOCATION);\n                 URI uri = AsyncHttpProviderUtils.getRedirectUri(future.getURI(), location);\n                 boolean stripQueryString = config.isRemoveQueryParamOnRedirect();\n                if (!uri.toString().equals(future.getURI().toString())) {\n                     final RequestBuilder nBuilder = stripQueryString ?\n                             new RequestBuilder(future.getRequest()).setQueryParameters(null)\n                             : new RequestBuilder(future.getRequest());", "sourceBeforeFix": "uri.toString().equalsIgnoreCase(future.getURI().toString())", "sourceAfterFix": "uri.toString().equals(future.getURI().toString())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "64bc69ef4c547771f44f6b6b103cda7be2f0922b", "projectName": "dropwizard.metrics", "bugType": "Change Identifier Used", "problem": " \t}\n \tpublic SortedMap<String, Histogram> getHistograms(MetricFilter filter) {\n\t\treturn adaptMetrics(Histogram.class, reg.getCounters(transformFilter(filter)));\n \t}\n \tpublic SortedMap<String, Meter> getMeters() {", "fixed": " \t}\n \tpublic SortedMap<String, Histogram> getHistograms(MetricFilter filter) {\n\t\treturn adaptMetrics(Histogram.class, reg.getHistograms(transformFilter(filter)));\n \t}\n \tpublic SortedMap<String, Meter> getMeters() {", "sourceBeforeFix": "reg.getCounters(transformFilter(filter))", "sourceAfterFix": "reg.getHistograms(transformFilter(filter))"}
{"fixCommitSHA1": "f80cd0840159840d35b445ea247e3fbf356eae88", "projectName": "dropwizard.dropwizard", "bugType": "Change Identifier Used", "problem": "         connector.setReuseAddress(reuseAddress);\n         if (soLingerTime != null) {\n            connector.setSoLingerTime((int) soLingerTime.toSeconds());\n         }\n         connector.setIdleTimeout(idleTimeout.toMilliseconds());\n         connector.setName(name);", "fixed": "         connector.setReuseAddress(reuseAddress);\n         if (soLingerTime != null) {\n            connector.setSoLingerTime((int) soLingerTime.toMilliseconds());\n         }\n         connector.setIdleTimeout(idleTimeout.toMilliseconds());\n         connector.setName(name);", "sourceBeforeFix": "soLingerTime.toSeconds()", "sourceAfterFix": "soLingerTime.toMilliseconds()"}
{"fixCommitSHA1": "c131546eaadd07baf950bd6a44d07ee42d109e4c", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t\t\tdispatcher.getTerminationFuture().whenCompleteAsync(\n\t\t\t\t(Boolean success, Throwable throwable) -> {\n \t\t\t\t\tif (throwable != null) {\n \t\t\t\t\t\tLOG.info(\"Could not properly terminate the Dispatcher.\", throwable);\n \t\t\t\t\t}", "fixed": " \t\t\tdispatcher.getTerminationFuture().whenCompleteAsync(\n\t\t\t\t(Void value, Throwable throwable) -> {\n \t\t\t\t\tif (throwable != null) {\n \t\t\t\t\t\tLOG.info(\"Could not properly terminate the Dispatcher.\", throwable);\n \t\t\t\t\t}", "sourceBeforeFix": "Boolean success", "sourceAfterFix": "Void value"}
{"fixCommitSHA1": "e9fbd7f493863da1e68776473d8b5d03861daa6f", "projectName": "apache.flink", "bugType": "Change Numeric Literal", "problem": " \t\t\tLOG.debug(\"Initializing sortmerger...\");\n \t\t\tSorter<PactRecord> sorter = new AsynchronousPartialSorter<PactRecord>(this.memoryManager, source,\n\t\t\t\tthis.parentTask, this.serializer, this.comparator, 32 * 1024 * 1024);\n \t\t\trunPartialSorter(sorter, NUM_RECORDS, 2);\n \t\t}", "fixed": " \t\t\tLOG.debug(\"Initializing sortmerger...\");\n \t\t\tSorter<PactRecord> sorter = new AsynchronousPartialSorter<PactRecord>(this.memoryManager, source,\n\t\t\t\tthis.parentTask, this.serializer, this.comparator, 10 * 1024 * 1024);\n \t\t\trunPartialSorter(sorter, NUM_RECORDS, 2);\n \t\t}", "sourceBeforeFix": "runPartialSorter(sorter,NUM_RECORDS,28)", "sourceAfterFix": "runPartialSorter(sorter,NUM_RECORDS,25)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "7109f6f55968c830c5f43ff798e106ef2f14c71c", "projectName": "apache.camel", "bugType": "Change Boolean Literal", "problem": "                 submitSm.getReplaceIfPresent(),\n                 new GeneralDataCoding(\n                         false,\n                        false,\n                         MessageClass.CLASS1,\n                         Alphabet.valueOf(submitSm.getDataCoding())),\n                 (byte) 0,", "fixed": "                 submitSm.getReplaceIfPresent(),\n                 new GeneralDataCoding(\n                         false,\n                        true,\n                         MessageClass.CLASS1,\n                         Alphabet.valueOf(submitSm.getDataCoding())),\n                 (byte) 0,", "sourceBeforeFix": "new GeneralDataCoding(false,false,MessageClass.CLASS1,Alphabet.valueOf(submitSm.getDataCoding()))", "sourceAfterFix": "new GeneralDataCoding(false,true,MessageClass.CLASS1,Alphabet.valueOf(submitSm.getDataCoding()))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should get property value given valid property name\n \t * @should get property in case insensitive way\n \t */\n\tpublic String getGlobalProperty(String propertyName) throws APIException;\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>", "fixed": " \t * @should get property value given valid property name\n \t * @should get property in case insensitive way\n \t */\n\tpublic String getGlobalProperty(String propertyName);\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fdb2c862f1bb03a84a9ded88d853379ba917f253", "projectName": "stanfordnlp.CoreNLP", "bugType": "Same Function More Args", "problem": "       empiricalCountsForADoc(eHat4Update, ind);\n      expectedCountsForADoc(weights, ind);\n       /* the commented out code below is to iterate over the batch docs instead of iterating over all\n          parameters at the end, which is more efficient; but it would also require us to clearUpdateEs()", "fixed": "       empiricalCountsForADoc(eHat4Update, ind);\n      expectedCountsForADoc(weights, e4Update, ind);\n       /* the commented out code below is to iterate over the batch docs instead of iterating over all\n          parameters at the end, which is more efficient; but it would also require us to clearUpdateEs()", "sourceBeforeFix": "expectedCountsForADoc(weights,ind)", "sourceAfterFix": "expectedCountsForADoc(weights,e4Update,ind)"}
{"fixCommitSHA1": "e0aff862bb608004841da3487d94aecb45964e17", "projectName": "Alluxio.alluxio", "bugType": "Change Numeric Literal", "problem": "       }\n     }\n     long takenTimeMs = System.currentTimeMillis() - startTimeMs;\n    double result = FILES_BYTES * 1000L / takenTimeMs / 1024 / 1024;\n     LOG.info(result + \" Mb/sec. \" + RESULT_PREFIX + \"Entire \" + (write ? \"Write \" : \"Read \")\n         + \" Took \" + takenTimeMs + \" ms. Current System Time: \" + System.currentTimeMillis());\n   }", "fixed": "       }\n     }\n     long takenTimeMs = System.currentTimeMillis() - startTimeMs;\n    double result = FILES_BYTES * 1000.0 / takenTimeMs / 1024 / 1024;\n     LOG.info(result + \" Mb/sec. \" + RESULT_PREFIX + \"Entire \" + (write ? \"Write \" : \"Read \")\n         + \" Took \" + takenTimeMs + \" ms. Current System Time: \" + System.currentTimeMillis());\n   }", "sourceBeforeFix": "FILES_BYTES * 1000L", "sourceAfterFix": "FILES_BYTES * 1000.0"}
{"fixCommitSHA1": "a63faf44e1b103a49d25a15c720fc5940ae9fc07", "projectName": "square.retrofit", "bugType": "Change Identifier Used", "problem": "     assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResultClass = new TypeToken<Maybe<Result<String>>>() {}.getType();\n    assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResultClass = new TypeToken<Flowable<Result<String>>>() {}.getType();\n    assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oResultWildcard = new TypeToken<Observable<Result<? extends String>>>() {}.getType();", "fixed": "     assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResultClass = new TypeToken<Maybe<Result<String>>>() {}.getType();\n    assertThat(factory.get(mResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResultClass = new TypeToken<Flowable<Result<String>>>() {}.getType();\n    assertThat(factory.get(fResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oResultWildcard = new TypeToken<Observable<Result<? extends String>>>() {}.getType();", "sourceBeforeFix": "factory.get(sResultClass,NO_ANNOTATIONS,retrofit)", "sourceAfterFix": "factory.get(fResultClass,NO_ANNOTATIONS,retrofit)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "a63faf44e1b103a49d25a15c720fc5940ae9fc07", "projectName": "square.retrofit", "bugType": "Change Identifier Used", "problem": "     assertThat(factory.get(sBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mBodyClass = new TypeToken<Maybe<String>>() {}.getType();\n    assertThat(factory.get(sBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fBodyClass = new TypeToken<Flowable<String>>() {}.getType();\n    assertThat(factory.get(sBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oBodyWildcard = new TypeToken<Observable<? extends String>>() {}.getType();", "fixed": "     assertThat(factory.get(sBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mBodyClass = new TypeToken<Maybe<String>>() {}.getType();\n    assertThat(factory.get(mBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fBodyClass = new TypeToken<Flowable<String>>() {}.getType();\n    assertThat(factory.get(fBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oBodyWildcard = new TypeToken<Observable<? extends String>>() {}.getType();", "sourceBeforeFix": "factory.get(sResultClass,NO_ANNOTATIONS,retrofit)", "sourceAfterFix": "factory.get(mResultClass,NO_ANNOTATIONS,retrofit)"}
{"fixCommitSHA1": "bbb28b514aadd4fc649dd0b7a47c6ece4d629fa7", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "         getMockEndpoint(\"mock:test.before.1\").expectedMessageCount(10);\n         getMockEndpoint(\"mock:test.before.2\").expectedMessageCount(10);\n        getMockEndpoint(\"mock:test.after.1\").expectedMinimumMessageCount(10);\n         getMockEndpoint(\"mock:test.after.2\").expectedMessageCount(10);", "fixed": "         getMockEndpoint(\"mock:test.before.1\").expectedMessageCount(10);\n         getMockEndpoint(\"mock:test.before.2\").expectedMessageCount(10);\n        getMockEndpoint(\"mock:test.after.1\").expectedMessageCount(10);\n         getMockEndpoint(\"mock:test.after.2\").expectedMessageCount(10);", "sourceBeforeFix": "getMockEndpoint(\"mock:test.after.1\").expectedMinimumMessageCount(10)", "sourceAfterFix": "getMockEndpoint(\"mock:test.after.1\").expectedMessageCount(10)"}
{"fixCommitSHA1": "6d5046fb932f43fd55f7e5b53ae27a724681429f", "projectName": "Graylog2.graylog2-server", "bugType": "Change Identifier Used", "problem": "         return new InstrumentedExecutorService(\n                 Executors.newCachedThreadPool(threadFactory),\n                 metricRegistry,\n                name(HttpTransport.class, executorName, \"executor-service\"));\n     }", "fixed": "         return new InstrumentedExecutorService(\n                 Executors.newCachedThreadPool(threadFactory),\n                 metricRegistry,\n                name(SyslogTcpTransport.class, executorName, \"executor-service\"));\n     }", "sourceBeforeFix": "HttpTransport.class", "sourceAfterFix": "SyslogTcpTransport.class"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "994da4e53abe98a0f0004d7bb8c57e08c621570d", "projectName": "Atmosphere.atmosphere", "bugType": "Same Function More Args", "problem": "         processor.registerWebSocketHandler(\"/*\", new EchoHandler());\n         AtmosphereRequest request = new AtmosphereRequest.Builder().destroyable(false).body(\"yoComet\").pathInfo(\"/a\").build();\n        processor.open(w, request);\n         processor.invokeWebSocketProtocol(w, \"yoWebSocket\");\n         assertEquals(b.toString(), \"yoWebSocket\");", "fixed": "         processor.registerWebSocketHandler(\"/*\", new EchoHandler());\n         AtmosphereRequest request = new AtmosphereRequest.Builder().destroyable(false).body(\"yoComet\").pathInfo(\"/a\").build();\n        processor.open(w, request, AtmosphereResponse.newInstance(framework.getAtmosphereConfig(), request, w));\n         processor.invokeWebSocketProtocol(w, \"yoWebSocket\");\n         assertEquals(b.toString(), \"yoWebSocket\");", "sourceBeforeFix": "processor.open(w,request)", "sourceAfterFix": "processor.open(w,request,AtmosphereResponse.newInstance(framework.getAtmosphereConfig(),request,w))"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 15830, value = \"Registration of remote hosts is not supported on slave host controllers\")\n     String slaveControllerCannotAcceptOtherSlaves();\n     /**", "fixed": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 10830, value = \"Registration of remote hosts is not supported on slave host controllers\")\n     String slaveControllerCannotAcceptOtherSlaves();\n     /**", "sourceBeforeFix": "id=15844", "sourceAfterFix": "id=10844"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n  private final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface ConsulEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedConsulEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface ConsulEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedConsulEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface RabbitMQEndpointBuilder\n             extends\n                 RabbitMQEndpointConsumerBuilder, RabbitMQEndpointProducerBuilder {\n         default AdvancedRabbitMQEndpointBuilder advanced() {", "fixed": "     \n    public interface RabbitMQEndpointBuilder\n             extends\n                 RabbitMQEndpointConsumerBuilder, RabbitMQEndpointProducerBuilder {\n         default AdvancedRabbitMQEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     return additionalReplacements;\n   }\n  private final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     return additionalReplacements;\n   }\n  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "ea252e39da774a9dc81718f19019ba533209f774", "projectName": "mybatis.mybatis-3", "bugType": "Less Specific If", "problem": "   private void configurationElement(XNode context) {\n     try {\n       String namespace = context.getStringAttribute(\"namespace\");\n      if (namespace.equals(\"\")) {\n         throw new BuilderException(\"Mapper's namespace cannot be empty\");\n       }\n       builderAssistant.setCurrentNamespace(namespace);", "fixed": "   private void configurationElement(XNode context) {\n     try {\n       String namespace = context.getStringAttribute(\"namespace\");\n      if (namespace == null || namespace.equals(\"\")) {\n         throw new BuilderException(\"Mapper's namespace cannot be empty\");\n       }\n       builderAssistant.setCurrentNamespace(namespace);", "sourceBeforeFix": "namespace.equals(\"\")", "sourceAfterFix": "namespace == null || namespace.equals(\"\")"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsCsv(String path, long millis) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, null);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsCsv(String path, long millis) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, null);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "2e658dd3e4784aa8404511e0a631a2cffd58545a", "projectName": "alibaba.dubbo", "bugType": "Change Identifier Used", "problem": "                 t = t.getSuperclass();\n                 if (t == null)\n                     throw new RuntimeException(\"Can not found Constructor?\");\n                cs = c.getDeclaredConstructors();\n             }\n             while (cs.length == 0);\n         }", "fixed": "                 t = t.getSuperclass();\n                 if (t == null)\n                     throw new RuntimeException(\"Can not found Constructor?\");\n                cs = t.getDeclaredConstructors();\n             }\n             while (cs.length == 0);\n         }", "sourceBeforeFix": "c.getDeclaredConstructors()", "sourceAfterFix": "t.getDeclaredConstructors()"}
{"fixCommitSHA1": "1daccd54d2ff2ecdb21d8c60268600c37febbb70", "projectName": "Alluxio.alluxio", "bugType": "Change Operand ", "problem": "   public static void createFiles() throws IOException {\n     long startTimeMs = CommonUtils.getCurrentMs();\n    for (int k = 0; k < THREADS; k ++) {\n       int fileId = MTC.createFile(FILE_NAME + (k + BASE_FILE_NUMBER));\n       CommonUtils.printTimeTakenMs(startTimeMs, LOG, \"user_createFiles with fileId \" + fileId);\n     }", "fixed": "   public static void createFiles() throws IOException {\n     long startTimeMs = CommonUtils.getCurrentMs();\n    for (int k = 0; k < FILES; k++) {\n       int fileId = MTC.createFile(FILE_NAME + (k + BASE_FILE_NUMBER));\n       CommonUtils.printTimeTakenMs(startTimeMs, LOG, \"user_createFiles with fileId \" + fileId);\n     }", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "pId + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleAlternativesWithCommonLabel_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(730);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {System.out.println($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "fixed": " \tpublic void testMultipleAlternativesWithCommonLabel_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(729);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {System.out.println($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "sourceBeforeFix": "new StringBuilder(247)", "sourceAfterFix": "new StringBuilder(246)"}
{"fixCommitSHA1": "8abfa48f2eb5edaf3f5a2cc2350e4e3c232f4152", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "         private final Border dragBorder;\n         private final Listener listener;\n        public FileDropTargetListener(Component component, Border dragBorder, Listener listener) {\n             this.component = component;\n             this.dragBorder = dragBorder;\n             this.listener = listener;", "fixed": "         private final Border dragBorder;\n         private final Listener listener;\n        FileDropTargetListener(Component component, Border dragBorder, Listener listener) {\n             this.component = component;\n             this.dragBorder = dragBorder;\n             this.listener = listener;", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "6ec426667bbf19be4fca84eec48e03152e2cfffe", "projectName": "joelittlejohn.jsonschema2pojo", "bugType": "Wrong Function Name", "problem": "         });\n         assertThat(args.didExit(), is(false));\n        assertThat(args.getSource().next().getFile(), is(\"/home/source\"));\n         assertThat(args.getTargetDirectory(), is(theFile(\"/home/target\")));\n         assertThat(args.getTargetPackage(), is(\"mypackage\"));\n         assertThat(args.isGenerateBuilders(), is(true));", "fixed": "         });\n         assertThat(args.didExit(), is(false));\n        assertThat(args.getSource().next().getFile(), endsWith(\"/home/source\"));\n         assertThat(args.getTargetDirectory(), is(theFile(\"/home/target\")));\n         assertThat(args.getTargetPackage(), is(\"mypackage\"));\n         assertThat(args.isGenerateBuilders(), is(true));", "sourceBeforeFix": "is(\"/home/source\")", "sourceAfterFix": "endsWith(\"/home/source\")"}
{"fixCommitSHA1": "2155f66a2a44fa9057bed99e91e8ccded7a006f4", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         public synchronized void registerMessageListener(String name, MessageListener messageListener) {\n             if (!messageListeners.containsKey(name)) {\n                messageListeners.put(name, new ArrayList<MessageListener<Object>>());\n             }\n             messageListeners.get(name).add(messageListener);\n         }", "fixed": "         public synchronized void registerMessageListener(String name, MessageListener messageListener) {\n             if (!messageListeners.containsKey(name)) {\n                messageListeners.put(name, new CopyOnWriteArrayList<MessageListener<Object>>());\n             }\n             messageListeners.get(name).add(messageListener);\n         }", "sourceBeforeFix": "ArrayList<EntryListener<?,?>>", "sourceAfterFix": "CopyOnWriteArrayList<EntryListener<?,?>>"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AS2EndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedAS2EndpointProducerBuilder advanced() {", "fixed": "     \n    public interface AS2EndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedAS2EndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "dd80647fbf218880e5f8d72441d080b6c92778fa", "projectName": "libgdx.libgdx", "bugType": "Same Function More Args", "problem": " \t\t\ttry {\r\n \t\t\t\tbytes = input.read(buffer, index, 4096);\r\n \t\t\t} catch (Exception e) {\r\n\t\t\t\tthrow new GdxRuntimeException(\"Failed to read Vorbis.\");\r\n \t\t\t}\r\n \t\t\tif (bytes == 0 && i < 2) {\r\n \t\t\t\tthrow new GdxRuntimeException(\"End of file before finding all Vorbis headers.\");\r", "fixed": " \t\t\ttry {\r\n \t\t\t\tbytes = input.read(buffer, index, 4096);\r\n \t\t\t} catch (Exception e) {\r\n\t\t\t\tthrow new GdxRuntimeException(\"Failed to read Vorbis.\", e);\r\n \t\t\t}\r\n \t\t\tif (bytes == 0 && i < 2) {\r\n \t\t\t\tthrow new GdxRuntimeException(\"End of file before finding all Vorbis headers.\");\r", "sourceBeforeFix": "new GdxRuntimeException(\"Failed to read Vorbis.\")", "sourceAfterFix": "new GdxRuntimeException(\"Failed to read Vorbis.\",e)"}
{"fixCommitSHA1": "4374760010679cae216f1c512564626520e00238", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t\t\t\treturn;\n \t\t\t}\n \t\t\tif (value instanceof Collection) {\n\t\t\t\tif (knownType != null && actualType != knownType && actualType != ArrayList.class) {\n \t\t\t\t\twriteObjectStart(actualType, knownType);\n \t\t\t\t\twriteArrayStart(\"items\");\n \t\t\t\t\tfor (Object item : (Collection)value)", "fixed": " \t\t\t\treturn;\n \t\t\t}\n \t\t\tif (value instanceof Collection) {\n\t\t\t\tif (typeName != null && actualType != ArrayList.class && (knownType == null || knownType != actualType)) {\n \t\t\t\t\twriteObjectStart(actualType, knownType);\n \t\t\t\t\twriteArrayStart(\"items\");\n \t\t\t\t\tfor (Object item : (Collection)value)", "sourceBeforeFix": "knownType != null", "sourceAfterFix": "typeName != null"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @return property value in the type of the default value\n \t * @since 1.7\n \t */\n\tpublic <T> T getGlobalPropertyValue(String propertyName, T defaultValue) throws APIException;\n \t/**\n \t * @param aClass class of object getting length for", "fixed": " \t * @return property value in the type of the default value\n \t * @since 1.7\n \t */\n\tpublic <T> T getGlobalPropertyValue(String propertyName, T defaultValue);\n \t/**\n \t * @param aClass class of object getting length for", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15862, value = \"Invalid '%s' value: %d, the maximum index is %d\")\n     String invalidValue(String name, int value, int maxIndex);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10862, value = \"Invalid '%s' value: %d, the maximum index is %d\")\n     String invalidValue(String name, int value, int maxIndex);\n     /**", "sourceBeforeFix": "id=15842", "sourceAfterFix": "id=10842"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStream<OUT> writeAsText(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsText<OUT> format, int batchSize, OUT endTuple) {\n\t\tDataStream<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByBatches<OUT>(\n \t\t\t\tpath, format, batchSize, endTuple), null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "fixed": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStreamSink<OUT> writeAsText(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsText<OUT> format, int batchSize, OUT endTuple) {\n\t\tDataStreamSink<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByBatches<OUT>(\n \t\t\t\tpath, format, batchSize, endTuple), null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15836, value = SERVER_GROUP + \" expects one and only one child: %s\")\n     String serverGroupExpectsSingleChild(String rolloutPlan);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10836, value = SERVER_GROUP + \" expects one and only one child: %s\")\n     String serverGroupExpectsSingleChild(String rolloutPlan);\n     /**", "sourceBeforeFix": "id=15839", "sourceAfterFix": "id=10839"}
{"fixCommitSHA1": "af07edf1ab9024a78cb280e85982b1d6661a09ad", "projectName": "apache.hadoop", "bugType": "Change Modifier", "problem": "    * \n    * @param schedulingInfo\n    */\n  protected void setSchedulingInfo(String schedulingInfo) {\n     super.setSchedulingInfo(schedulingInfo);\n   }", "fixed": "    * \n    * @param schedulingInfo\n    */\n  @InterfaceAudience.Private\n  public void setSchedulingInfo(String schedulingInfo) {\n     super.setSchedulingInfo(schedulingInfo);\n   }", "sourceBeforeFix": "0", "sourceAfterFix": "1"}
{"fixCommitSHA1": "4ef7f28d367d8f2066871575ab6d2d985f8f8928", "projectName": "alibaba.dubbo", "bugType": "Change Modifier", "problem": "  */\n public class InvokerTreeCache<T> {\n    TreeNode<T> tree;\n     public TreeNode buildTree() {\n         tree = new TreeNode<>();", "fixed": "  */\n public class InvokerTreeCache<T> {\n    private TreeNode<T> tree;\n     public TreeNode buildTree() {\n         tree = new TreeNode<>();", "sourceBeforeFix": "0", "sourceAfterFix": "2"}
{"fixCommitSHA1": "658855128c1d02f13828ed0ef27757b85f7b6c44", "projectName": "Alluxio.alluxio", "bugType": "Same Function More Args", "problem": "     byte[] buffer = new byte[Math.min((int) mSeekBufferSizeBytes, (int) len)];\n     do {\n      int bytesRead = read(buffer);\n       Preconditions.checkState(bytesRead > 0, PreconditionMessage.ERR_UNEXPECTED_EOF);\n       len -= bytesRead;\n     } while (len > 0);", "fixed": "     byte[] buffer = new byte[Math.min((int) mSeekBufferSizeBytes, (int) len)];\n     do {\n      int bytesRead = read(buffer, 0, (int) Math.min(buffer.length, len));\n       Preconditions.checkState(bytesRead > 0, PreconditionMessage.ERR_UNEXPECTED_EOF);\n       len -= bytesRead;\n     } while (len > 0);", "sourceBeforeFix": "read(buffer)", "sourceAfterFix": "read(buffer,0,(int)Math.min(buffer.length,len))"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface MiloClientEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedMiloClientEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface MiloClientEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedMiloClientEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15861, value = \"Cannot remove deployment %s from the domain as it is still used by server groups %s\")\n     String cannotRemoveDeploymentInUse(String name, List<String> groups);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10861, value = \"Cannot remove deployment %s from the domain as it is still used by server groups %s\")\n     String cannotRemoveDeploymentInUse(String name, List<String> groups);\n     /**", "sourceBeforeFix": "id=15841", "sourceAfterFix": "id=10841"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserListMemberships(String user, long cursor) throws TwitterException {\n        return twitter4j.List.constructListOfLists(get(getApiBaseURL() + V1 +\n                 user + \"/lists/memberships.json?cursor=\" + cursor, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserListMemberships(String user, long cursor) throws TwitterException {\n        return twitter4j.List.createListList(get(getApiBaseURL() + V1 +\n                 user + \"/lists/memberships.json?cursor=\" + cursor, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\",true))"}
{"fixCommitSHA1": "e9c4a734ff5160673024538f5b3ef1339c5424e7", "projectName": "thinkaurelius.titan", "bugType": "Wrong Function Name", "problem": "     @Override\n     public KeyColumnValueStore openDatabase(final String name) throws StorageException {\n        if (!stores.contains(name)) {\n             stores.putIfAbsent(name,new InMemoryKeyColumnValueStore(name));\n         }\n         KeyColumnValueStore store = stores.get(name);", "fixed": "     @Override\n     public KeyColumnValueStore openDatabase(final String name) throws StorageException {\n        if (!stores.containsKey(name)) {\n             stores.putIfAbsent(name,new InMemoryKeyColumnValueStore(name));\n         }\n         KeyColumnValueStore store = stores.get(name);", "sourceBeforeFix": "stores.contains(name)", "sourceAfterFix": "stores.containsKey(name)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface DigitalOceanEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedDigitalOceanEndpointBuilder advanced() {", "fixed": "     \n    public interface DigitalOceanEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedDigitalOceanEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "79946366e1ab141ef2b595e0079dcac7b913da2b", "projectName": "checkstyle.checkstyle", "bugType": "Wrong Function Name", "problem": "             \"1: \" + getCheckMessage(MSG_KEY_MISMATCH),\n         };\n        verify(checkConfig, getPath(\"InputPackageDeclarationDiffDirectoryAtParent.java\"), expected);\n     }\n     @Test", "fixed": "             \"1: \" + getCheckMessage(MSG_KEY_MISMATCH),\n         };\n        verify(checkConfig,\n                getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtParent.java\"),\n                expected);\n     }\n     @Test", "sourceBeforeFix": "getPath(\"InputPackageDeclarationDiffDirectoryAtParent.java\")", "sourceAfterFix": "getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtParent.java\")"}
{"fixCommitSHA1": "bf2975b37015a967a0a0c76028e78245905df614", "projectName": "hazelcast.hazelcast", "bugType": "Change Modifier", "problem": "     private StringBuilder stringBuilder = new StringBuilder();\n    DiagnosticsLogWriterImpl() {\n         this(false);\n     }\n    DiagnosticsLogWriterImpl(boolean includeEpochTime) {\n         this.includeEpochTime = includeEpochTime;\n     }", "fixed": "     private StringBuilder stringBuilder = new StringBuilder();\n    public DiagnosticsLogWriterImpl() {\n         this(false);\n     }\n    public DiagnosticsLogWriterImpl(boolean includeEpochTime) {\n         this.includeEpochTime = includeEpochTime;\n     }", "sourceBeforeFix": "0", "sourceAfterFix": "1"}
{"fixCommitSHA1": "0ab2704c7ba19c8a41c97910a6adf537c9f38044", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "                 int completionId = nextCompletionId();\n                 ClientMessage request =\n                        CachePutAllCodec.encodeRequest(nameWithPrefix, entries, expiryPolicyData, partitionId);\n                 Future f = invoke(request, partitionId, completionId);\n                 futureEntriesTuples.add(new FutureEntriesTuple(f, entries));\n                 if (nearCache != null) {", "fixed": "                 int completionId = nextCompletionId();\n                 ClientMessage request =\n                        CachePutAllCodec.encodeRequest(nameWithPrefix, entries, expiryPolicyData, completionId);\n                 Future f = invoke(request, partitionId, completionId);\n                 futureEntriesTuples.add(new FutureEntriesTuple(f, entries));\n                 if (nearCache != null) {", "sourceBeforeFix": "CachePutAllCodec.encodeRequest(nameWithPrefix,entries,expiryPolicyData,partitionId)", "sourceAfterFix": "CachePutAllCodec.encodeRequest(nameWithPrefix,entries,expiryPolicyData,completionId)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  private final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<Status> getPublicTimeline() throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() +\n                 \"statuses/public_timeline.json\", false));\n     }", "fixed": "      */\n     public ResponseList<Status> getPublicTimeline() throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() +\n                 \"statuses/public_timeline.json\", false));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/home_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/home_timeline.json\",true))"}
{"fixCommitSHA1": "2f880c73edb600ab92cdd580ac74f7388b5c6135", "projectName": "Alluxio.alluxio", "bugType": "Change Modifier", "problem": "     }\n   }\n  public void addBlock(int fileId, int blockIndex, long blockLength) {\n     if (INACTIVE) {\n       return;\n     }", "fixed": "     }\n   }\n  public synchronized void addBlock(int fileId, int blockIndex, long blockLength) {\n     if (INACTIVE) {\n       return;\n     }", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "cb6f6e26c12839e59243f25bfb142ec5e5b71135", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "             public void configure() {\n                 from(\"direct:start\").beanRef(\"myBean\", \"route\").to(\"mock:result\");\n                from(\"direct:a\").delay(3000).setBody(constant(\"A\"));\n                 from(\"direct:b\").setBody(constant(\"B\"));", "fixed": "             public void configure() {\n                 from(\"direct:start\").beanRef(\"myBean\", \"route\").to(\"mock:result\");\n                from(\"direct:a\").delay(2000).setBody(constant(\"A\"));\n                 from(\"direct:b\").setBody(constant(\"B\"));", "sourceBeforeFix": "timeout=2000", "sourceAfterFix": "timeout=1000"}
{"fixCommitSHA1": "de8f91ad67b9881afc9f5af9cf9736b341bc3fbf", "projectName": "checkstyle.checkstyle", "bugType": "Same Function Swap Args", "problem": "         }\n         catch (IllegalArgumentException e) {\n             final String msg = e.getMessage();\n            Assert.assertEquals(msg, \"Unexpected token type: methodStub\");\n         }\n     }\n }", "fixed": "         }\n         catch (IllegalArgumentException e) {\n             final String msg = e.getMessage();\n            Assert.assertEquals(\"Unexpected token type: methodStub\", msg);\n         }\n     }\n }", "sourceBeforeFix": "Assert.assertEquals(msg,\"Unexpected token type: methodStub\")", "sourceAfterFix": "Assert.assertEquals(\"Unexpected token type: methodStub\",msg)"}
{"fixCommitSHA1": "b3f9135548ce836c0480bbf1dfe3b358904c1b86", "projectName": "facebook.presto", "bugType": "Change Modifier", "problem": "         assertInvalidFunction(\"ARRAY_SORT(ARRAY[color('red'), color('blue')])\", FUNCTION_NOT_FOUND);\n     }\n    @Test void testDistinct()\n             throws Exception\n     {\n         assertFunction(\"ARRAY_DISTINCT(ARRAY [])\", new ArrayType(UNKNOWN), ImmutableList.of());", "fixed": "         assertInvalidFunction(\"ARRAY_SORT(ARRAY[color('red'), color('blue')])\", FUNCTION_NOT_FOUND);\n     }\n    @Test\n    public void testDistinct()\n             throws Exception\n     {\n         assertFunction(\"ARRAY_DISTINCT(ARRAY [])\", new ArrayType(UNKNOWN), ImmutableList.of());", "sourceBeforeFix": "0", "sourceAfterFix": "1"}
{"fixCommitSHA1": "a1977e8e8dccb0e73d05be1e84e7919525b9b413", "projectName": "openhab.openhab", "bugType": "Change Identifier Used", "problem": "     Object convertedValue;\n     if (value.scale() == 0) {\n       logger.trace(\"found no fractional part\");\n      convertedValue = value.doubleValue();\n     } else {\n       logger.trace(\"found fractional part\");\n       convertedValue = value.doubleValue();", "fixed": "     Object convertedValue;\n     if (value.scale() == 0) {\n       logger.trace(\"found no fractional part\");\n      convertedValue = value.toBigInteger();\n     } else {\n       logger.trace(\"found fractional part\");\n       convertedValue = value.doubleValue();", "sourceBeforeFix": "value.doubleValue()", "sourceAfterFix": "value.toBigInteger()"}
{"fixCommitSHA1": "4bf80610fd2a67d952312e808edebdb74ebc26bb", "projectName": "Graylog2.graylog2-server", "bugType": "Change Numeric Literal", "problem": "         final PaginatedList<TestDTO> page1reverse = dbService.findPaginatedWithQueryFilterAndSort(DBQuery.empty(), filter, DBSort.desc(\"title\"), 1, 2);\n         assertThat(page1reverse.pagination().getCount()).isEqualTo(2);\n        assertThat(page1reverse.pagination().getGlobalTotal()).isEqualTo(7);\n         assertThat(page1reverse.delegate())\n                 .extracting(\"title\")\n                 .containsExactly(\"hello6\", \"hello5\");", "fixed": "         final PaginatedList<TestDTO> page1reverse = dbService.findPaginatedWithQueryFilterAndSort(DBQuery.empty(), filter, DBSort.desc(\"title\"), 1, 2);\n         assertThat(page1reverse.pagination().getCount()).isEqualTo(2);\n        assertThat(page1reverse.pagination().getGlobalTotal()).isEqualTo(5);\n         assertThat(page1reverse.delegate())\n                 .extracting(\"title\")\n                 .containsExactly(\"hello6\", \"hello5\");", "sourceBeforeFix": "assertThat(page3.pagination().getGlobalTotal()).isEqualTo(7)", "sourceAfterFix": "assertThat(page3.pagination().getGlobalTotal()).isEqualTo(5)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "ff34b04700d0417df1049e4d749fdf430076965b", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "     }\n    private static void appendNodeText(StringBuffer result, Node node, boolean fixLinks) {\n         final String name = transformXmlToJavaDocName(node.getNodeName());\n         final boolean list = \"ol\".equals(name) || \"ul\".equals(name);\n         final boolean newLineOpenBefore = list || \"p\".equals(name) || \"pre\".equals(name)", "fixed": "     }\n    private static void appendNodeText(StringBuilder result, Node node, boolean fixLinks) {\n         final String name = transformXmlToJavaDocName(node.getNodeName());\n         final boolean list = \"ol\".equals(name) || \"ul\".equals(name);\n         final boolean newLineOpenBefore = list || \"p\".equals(name) || \"pre\".equals(name)", "sourceBeforeFix": "StringBuffer result", "sourceAfterFix": "StringBuilder result"}
{"fixCommitSHA1": "e2119d33293008fcc876f5fcd58ede2993eb24d6", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnBean(SolrServer.class)\n\t@ConditionalOnEnablednHealthIndicator(\"solr\")\n \tpublic static class SolrHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<SolrHealthIndicator, SolrServer> {", "fixed": " \t@Configuration\n \t@ConditionalOnBean(SolrServer.class)\n\t@ConditionalOnEnabledHealthIndicator(\"solr\")\n \tpublic static class SolrHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<SolrHealthIndicator, SolrServer> {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"redis\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"redis\")"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid request\", response = Void.class),\n         @ApiResponse(code = 404, message = \"Not found\", response = Void.class) })\n    void testEnumParameters(@FormParam(value = \"enum_form_string_array\")  List<String> enumFormStringArray,@FormParam(value = \"enum_form_string\")  String enumFormString,@HeaderParam(\"enum_header_string_array\")   @ApiParam(\"Header parameter enum test (string array)\") List<String> enumHeaderStringArray,@HeaderParam(\"enum_header_string\")  @DefaultValue(\"-efg\")  @ApiParam(\"Header parameter enum test (string)\") String enumHeaderString,@QueryParam(\"enum_query_string_array\")   @ApiParam(\"Query parameter enum test (string array)\")  List<String> enumQueryStringArray,@QueryParam(\"enum_query_string\")  @DefaultValue(\"-efg\")  @ApiParam(\"Query parameter enum test (string)\")  String enumQueryString,@QueryParam(\"enum_query_integer\")   @ApiParam(\"Query parameter enum test (double)\")  Integer enumQueryInteger,@FormParam(value = \"enum_query_double\")  Double enumQueryDouble);\n     @GET\n     @Path(\"/jsonFormData\")", "fixed": "     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid request\", response = Void.class),\n         @ApiResponse(code = 404, message = \"Not found\", response = Void.class) })\n    void testEnumParameters(@FormParam(value = \"enum_form_string_array\")  List<String> enumFormStringArray,@FormParam(value = \"enum_form_string\")  String enumFormString,@HeaderParam(\"enum_header_string_array\")   @ApiParam(\"Header parameter enum test (string array)\") List<String> enumHeaderStringArray,@HeaderParam(\"enum_header_string\")  @DefaultValue(\"-efg\")  @ApiParam(\"Header parameter enum test (string)\") String enumHeaderString,@QueryParam(\"enum_query_string_array\")   @ApiParam(\"Query parameter enum test (string array)\")  List<String> enumQueryStringArray,@QueryParam(\"enum_query_string\")  @DefaultValue(\"-efg\")  @ApiParam(\"Query parameter enum test (string)\")  String enumQueryString,@QueryParam(\"enum_query_integer\")   @ApiParam(\"Query parameter enum test (double)\")  Integer enumQueryInteger,@FormParam(value = \"enum_query_double\")  Double enumQueryDouble) throws Exception;\n     @GET\n     @Path(\"/jsonFormData\")", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15837, value = \"One of the groups does not define neither \" + SERVER_GROUP + \" nor \" + CONCURRENT_GROUPS + \": %s\")\n     String unexpectedInSeriesGroup(String rolloutPlan);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10837, value = \"One of the groups does not define neither \" + SERVER_GROUP + \" nor \" + CONCURRENT_GROUPS + \": %s\")\n     String unexpectedInSeriesGroup(String rolloutPlan);\n     /**", "sourceBeforeFix": "id=15865", "sourceAfterFix": "id=10865"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15854, value = \"Null stream at index %d\")\n     String nullStream(int index);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10854, value = \"Null stream at index %d\")\n     String nullStream(int index);\n     /**", "sourceBeforeFix": "id=15864", "sourceAfterFix": "id=10864"}
{"fixCommitSHA1": "24cf9587db23679d74680f32beade181791bf88c", "projectName": "Atmosphere.atmosphere", "bugType": "Wrong Function Name", "problem": "             asyncWriteFuture = new Future<?>[threads];\n             for (int i = 0; i < threads; i++) {\n                 notifierFuture[i] = bc.getExecutorService().submit(getBroadcastHandler());\n                asyncWriteFuture[i] = bc.getExecutorService().submit(getAsyncWriteHandler(uniqueWriteQueue));\n             }\n         } else {\n             notifierFuture[0] = bc.getExecutorService().submit(getBroadcastHandler());", "fixed": "             asyncWriteFuture = new Future<?>[threads];\n             for (int i = 0; i < threads; i++) {\n                 notifierFuture[i] = bc.getExecutorService().submit(getBroadcastHandler());\n                asyncWriteFuture[i] = bc.getAsyncWriteService().submit(getAsyncWriteHandler(uniqueWriteQueue));\n             }\n         } else {\n             notifierFuture[0] = bc.getExecutorService().submit(getBroadcastHandler());", "sourceBeforeFix": "bc.getExecutorService()", "sourceAfterFix": "bc.getAsyncWriteService()"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform3fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform3(location, v);\r\n \t}\r\n \tpublic void glUniform3fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform3(location, toFloatBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform3i (int location, int x, int y, int z) {\r", "fixed": " \t}\r\n \tpublic void glUniform3fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform3fv(location, v);\r\n \t}\r\n \tpublic void glUniform3fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform3fv(location, toFloatBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform3i (int location, int x, int y, int z) {\r", "sourceBeforeFix": "GL20.glGetUniform(program,location,params)", "sourceAfterFix": "GL20.glGetUniformfv(program,location,params)"}
{"fixCommitSHA1": "1e3bae9ba27a215654cfe28b81bfa933458168c1", "projectName": "spring-projects.spring-boot", "bugType": "Change Boolean Literal", "problem": " \tprivate boolean isMissing(Map<String, Object> arguments,\n \t\t\tOperationParameter parameter) {\n \t\tif (!parameter.isMandatory()) {\n\t\t\treturn true;\n \t\t}\n \t\treturn arguments.get(parameter.getName()) == null;\n \t}", "fixed": " \tprivate boolean isMissing(Map<String, Object> arguments,\n \t\t\tOperationParameter parameter) {\n \t\tif (!parameter.isMandatory()) {\n\t\t\treturn false;\n \t\t}\n \t\treturn arguments.get(parameter.getName()) == null;\n \t}", "sourceBeforeFix": "return true; ", "sourceAfterFix": "return false; "}
{"fixCommitSHA1": "c3298a9ee990eeeeabadb36b035433338e878ecf", "projectName": "facebook.presto", "bugType": "Change Numeric Literal", "problem": "                                 break;\n                             case DOUBLE:\n                                 if (value.isEmpty()) {\n                                    builder.put(columnHandle, 0L);\n                                 }\n                                 else {\n                                     builder.put(columnHandle, parseDouble(value));", "fixed": "                                 break;\n                             case DOUBLE:\n                                 if (value.isEmpty()) {\n                                    builder.put(columnHandle, 0.0);\n                                 }\n                                 else {\n                                     builder.put(columnHandle, parseDouble(value));", "sourceBeforeFix": "builder.put(columnHandle,0L)", "sourceAfterFix": "builder.put(columnHandle,0.0)"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should save properties with case difference only\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_GLOBAL_PROPERTIES)\n\tpublic List<GlobalProperty> saveGlobalProperties(List<GlobalProperty> props) throws APIException;\n \t/**\n \t * Completely remove the given global property from the database", "fixed": " \t * @should save properties with case difference only\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_GLOBAL_PROPERTIES)\n\tpublic List<GlobalProperty> saveGlobalProperties(List<GlobalProperty> props);\n \t/**\n \t * Completely remove the given global property from the database", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "8b9791f8b4b1154d6a053de901a5efd2105409e5", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "         this.bufferMemorySize = bufferMemorySize;\n     }\n    public Integer getRequestRequiredAcks() {\n         return requestRequiredAcks;\n     }", "fixed": "         this.bufferMemorySize = bufferMemorySize;\n     }\n    public String getRequestRequiredAcks() {\n         return requestRequiredAcks;\n     }", "sourceBeforeFix": "Integer requestRequiredAcks", "sourceAfterFix": "String requestRequiredAcks"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface CassandraEndpointBuilder\n             extends\n                 CassandraEndpointConsumerBuilder, CassandraEndpointProducerBuilder {\n         default AdvancedCassandraEndpointBuilder advanced() {", "fixed": "     \n    public interface CassandraEndpointBuilder\n             extends\n                 CassandraEndpointConsumerBuilder, CassandraEndpointProducerBuilder {\n         default AdvancedCassandraEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface LogEndpointBuilder\n            extends\n                EndpointProducerBuilder {\n         default AdvancedLogEndpointBuilder advanced() {\n             return (AdvancedLogEndpointBuilder) this;\n         }", "fixed": "     \n    public interface LogEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedLogEndpointBuilder advanced() {\n             return (AdvancedLogEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "7d5e825abd68a4ffcb86865149b917edf76a47b6", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "     public static JavadocTagInfo fromName(final String name)\n     {\n         if (name == null) {\n            throw new NullPointerException(\"the name is null\");\n         }\n         final JavadocTagInfo tag = NAME_TO_TAG.get(name);", "fixed": "     public static JavadocTagInfo fromName(final String name)\n     {\n         if (name == null) {\n            throw new IllegalArgumentException(\"the name is null\");\n         }\n         final JavadocTagInfo tag = NAME_TO_TAG.get(name);", "sourceBeforeFix": "new NullPointerException(\"the name is null\")", "sourceAfterFix": "new IllegalArgumentException(\"the name is null\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "3dddcc4cdf4a74ddbd4607c6aaee5bdd8ac46c27", "projectName": "gephi.gephi", "bugType": "Change Modifier", "problem": "     }\n     @Override\n    public List<Node> getSelectedUnderlyingNodes() {\n         List<Node> selected = new ArrayList<>();\n         for (Iterator<NodeModel> itr = octree.getNodeIterator(); itr.hasNext();) {\n             NodeModel nodeModel = itr.next();", "fixed": "     }\n     @Override\n    public synchronized List<Node> getSelectedUnderlyingNodes() {\n         List<Node> selected = new ArrayList<>();\n         for (Iterator<NodeModel> itr = octree.getNodeIterator(); itr.hasNext();) {\n             NodeModel nodeModel = itr.next();", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15840, value = \"Interrupted waiting for result from server %s\")\n     String interruptedAwaitingResultFromServer(ServerIdentity server);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10840, value = \"Interrupted waiting for result from server %s\")\n     String interruptedAwaitingResultFromServer(ServerIdentity server);\n     /**", "sourceBeforeFix": "id=15858", "sourceAfterFix": "id=10858"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": "  * \n  * @param T The data type that the comparator works on.\n  */\npublic interface TypeComparator<T>\n {\t\n \t/**\n \t * Computes a hash value for the given record. The hash value should include all fields in the record", "fixed": "  * \n  * @param T The data type that the comparator works on.\n  */\npublic abstract class TypeComparator<T>\n {\t\n \t/**\n \t * Computes a hash value for the given record. The hash value should include all fields in the record", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface MSKEndpointBuilder\n            extends\n                EndpointProducerBuilder {\n         default AdvancedMSKEndpointBuilder advanced() {\n             return (AdvancedMSKEndpointBuilder) this;\n         }", "fixed": "     \n    public interface MSKEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedMSKEndpointBuilder advanced() {\n             return (AdvancedMSKEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  private final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "b1aa0100b3f37551bcd8507d168449d8b03c5c57", "projectName": "gephi.gephi", "bugType": "Change Identifier Used", "problem": "             retract(view, ((AbstractNode) node));\n         }\n        graphVersion.incNodeVersion();\n         dhns.getWriteLock().unlock();\n         dhns.getEventManager().fireEvent(EventType.NODES_AND_EDGES_UPDATED);\n     }", "fixed": "             retract(view, ((AbstractNode) node));\n         }\n        graphVersion.incNodeAndEdgeVersion();\n         dhns.getWriteLock().unlock();\n         dhns.getEventManager().fireEvent(EventType.NODES_AND_EDGES_UPDATED);\n     }", "sourceBeforeFix": "graphVersion.incNodeVersion()", "sourceAfterFix": "graphVersion.incNodeAndEdgeVersion()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "23b774c63a24955749fa8234cd6a1ef878541462", "projectName": "swagger-api.swagger-core", "bugType": "Change Identifier Used", "problem": " public @interface ApiOperation {\n     String value();\n     String responseClass() default \"ok\";\nboolean mutiValueResponse() default false;\n     String notes() default \"\";\n     String tags() default \"\";\n }", "fixed": " public @interface ApiOperation {\n     String value();\n     String responseClass() default \"ok\";\nboolean multiValueResponse() default false;\n     String notes() default \"\";\n     String tags() default \"\";\n }", "sourceBeforeFix": "boolean mutiValueResponse() default false; ", "sourceAfterFix": "boolean multiValueResponse() default false; "}
{"fixCommitSHA1": "d222fc981c938bd3543ee61f22422d20efcdcd94", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         String uri = getScpUri() + \"?username=admin&password=admin&knownHostsFile=\" + getKnownHostsFile();\n         template.sendBodyAndHeader(uri, \"Hello World\", Exchange.FILE_NAME, \"hello.txt\");\n        Thread.sleep(500);\n         File file = new File(getScpPath() + \"/hello.txt\");\n         assertFileExists(file.getAbsolutePath());", "fixed": "         String uri = getScpUri() + \"?username=admin&password=admin&knownHostsFile=\" + getKnownHostsFile();\n         template.sendBodyAndHeader(uri, \"Hello World\", Exchange.FILE_NAME, \"hello.txt\");\n        Thread.sleep(800);\n         File file = new File(getScpPath() + \"/hello.txt\");\n         assertFileExists(file.getAbsolutePath());", "sourceBeforeFix": "Thread.sleep(500)", "sourceAfterFix": "Thread.sleep(800)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface HazelcastListEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedHazelcastListEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface HazelcastListEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedHazelcastListEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "d8d9e5711a908603f73f92872b127fe4d7ab4a15", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "  */\n public class ManagedRouteAddRemoveTest extends ManagementTestSupport {\n    private int services = 8;\n     @Override\n     protected RouteBuilder createRouteBuilder() throws Exception {", "fixed": "  */\n public class ManagedRouteAddRemoveTest extends ManagementTestSupport {\n    private int services = 9;\n     @Override\n     protected RouteBuilder createRouteBuilder() throws Exception {", "sourceBeforeFix": "services=8", "sourceAfterFix": "services=9"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface IOTAEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedIOTAEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface IOTAEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedIOTAEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "c1e4888011b5909b94591de25ab859b91093d6a3", "projectName": "jersey.jersey", "bugType": "Same Function More Args", "problem": "             try {\n                 commitStream();\n             } catch (IOException e) {\n                LOGGER.log(Level.SEVERE, LocalizationMessages.ERROR_COMMITTING_OUTPUT_STREAM());\n             }\n         }\n     }", "fixed": "             try {\n                 commitStream();\n             } catch (IOException e) {\n                LOGGER.log(Level.SEVERE, LocalizationMessages.ERROR_COMMITTING_OUTPUT_STREAM(), e);\n             }\n         }\n     }", "sourceBeforeFix": "LOGGER.log(Level.SEVERE,LocalizationMessages.ERROR_COMMITTING_OUTPUT_STREAM())", "sourceAfterFix": "LOGGER.log(Level.SEVERE,LocalizationMessages.ERROR_COMMITTING_OUTPUT_STREAM(),e)"}
{"fixCommitSHA1": "c9a1cc9df3dc4fe2eef78ad6090a9b1d95a02557", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "             .setMeasurementUnit(MeasurementUnit.MILLISECONDS)\n             .setAllowExpression(true)\n             .setFlags(AttributeAccess.Flag.RESTART_ALL_SERVICES)\n            .setDefaultValue(new ModelNode().set(60000))\n             .build();\n     static final AttributeDefinition[] ATTRIBUTES = new AttributeDefinition[] { ENABLED, TIMEOUT, CHUNK_SIZE };", "fixed": "             .setMeasurementUnit(MeasurementUnit.MILLISECONDS)\n             .setAllowExpression(true)\n             .setFlags(AttributeAccess.Flag.RESTART_ALL_SERVICES)\n            .setDefaultValue(new ModelNode().set(60000L))\n             .build();\n     static final AttributeDefinition[] ATTRIBUTES = new AttributeDefinition[] { ENABLED, TIMEOUT, CHUNK_SIZE };", "sourceBeforeFix": "new ModelNode().set(60000)", "sourceAfterFix": "new ModelNode().set(60000L)"}
{"fixCommitSHA1": "f1024ba0e7d5f1276a285a4218f26c70252719b5", "projectName": "apache.flink", "bugType": "Same Function More Args", "problem": " \t\t}\n\t\tTask task = null;\n \t\tsynchronized (this) {\n \t\t\tfinal Task runningTask = this.runningTasks.get(id);", "fixed": " \t\t}\n\t\tTask task;\n \t\tsynchronized (this) {\n \t\t\tfinal Task runningTask = this.runningTasks.get(id);", "sourceBeforeFix": "LOG.error(result.getDescription())", "sourceAfterFix": "LOG.error(result.getDescription(),e)"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \t@Test\n \tpublic void testMultipleActionsPredicatesOptions_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {Console.WriteLine($ctx.ToStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");", "fixed": " \t@Test\n \tpublic void testMultipleActionsPredicatesOptions_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(245);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {Console.WriteLine($ctx.ToStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");", "sourceBeforeFix": "new StringBuilder(741)", "sourceAfterFix": "new StringBuilder(740)"}
{"fixCommitSHA1": "4573c829b4c62ce1ad2a8f214ecea56654128cf9", "projectName": "apache.hbase", "bugType": "Same Function More Args", "problem": "       } catch (ConcurrentModificationException ex) {\n         continue;\n       } catch (Exception ex) {\n        LOG.error(\"Cache flusher failed for entry \" + fqe);\n         if (!server.checkFileSystem()) {\n           break;\n         }", "fixed": "       } catch (ConcurrentModificationException ex) {\n         continue;\n       } catch (Exception ex) {\n        LOG.error(\"Cache flusher failed for entry \" + fqe, ex);\n         if (!server.checkFileSystem()) {\n           break;\n         }", "sourceBeforeFix": "LOG.error(\"Cache flusher failed for entry \" + fqe)", "sourceAfterFix": "LOG.error(\"Cache flusher failed for entry \" + fqe,ex)"}
{"fixCommitSHA1": "55ed50c4975cf694828d46ee9ca32ce72a9ef913", "projectName": "clojure.clojure", "bugType": "Wrong Function Name", "problem": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 7:\r\n\t\t\treturn invoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "fixed": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 7:\r\n\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "sourceBeforeFix": "invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())", "sourceAfterFix": "doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8777c0882b68f70d662d21b862b0db35cf50826d", "projectName": "google.closure-compiler", "bugType": "Missing Throws Exception", "problem": "       this.content = new StringCharIterator(lineMap);\n     }\n    void build() {\n       int [] temp = new int[MAX_ENTRY_VALUES];\n       ArrayList<Entry> entries = new ArrayList<>();\n       while (content.hasNext()) {", "fixed": "       this.content = new StringCharIterator(lineMap);\n     }\n    void build() throws SourceMapParseException {\n       int [] temp = new int[MAX_ENTRY_VALUES];\n       ArrayList<Entry> entries = new ArrayList<>();\n       while (content.hasNext()) {", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "d2b19965df52e66385a2d7146887a44cea50330a", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "    * Removes try/catch/finally statements for easier debugging.\n    */\n   void removeTryCatchFinally() {\n    logger.info(\"Remove try/catch/finally\");\n     startPass(\"removeTryCatchFinally\");\n     RemoveTryCatch r = new RemoveTryCatch(this);\n     process(r);", "fixed": "    * Removes try/catch/finally statements for easier debugging.\n    */\n   void removeTryCatchFinally() {\n    logger.fine(\"Remove try/catch/finally\");\n     startPass(\"removeTryCatchFinally\");\n     RemoveTryCatch r = new RemoveTryCatch(this);\n     process(r);", "sourceBeforeFix": "logger.info(\"Recording function information\")", "sourceAfterFix": "logger.fine(\"Recording function information\")"}
{"fixCommitSHA1": "1ec8e822a17c37826b0a5df3b79ca03b4b528f1c", "projectName": "spring-projects.spring-boot", "bugType": "Change Modifier", "problem": " \t\t@Bean\n \t\t@ConditionalOnMissingBean\n\t\tRestClient restClient(RestClientBuilder builder) {\n \t\t\treturn builder.build();\n \t\t}", "fixed": " \t\t@Bean\n \t\t@ConditionalOnMissingBean\n\t\tpublic RestClient restClient(RestClientBuilder builder) {\n \t\t\treturn builder.build();\n \t\t}", "sourceBeforeFix": "0", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15856, value = \"Invalid url stream.\")\n     String invalidUrlStream();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10856, value = \"Invalid url stream.\")\n     String invalidUrlStream();\n     /**", "sourceBeforeFix": "id=15841", "sourceAfterFix": "id=10841"}
{"fixCommitSHA1": "dbd841562137595e365ccf2ad1524ecfdee958c9", "projectName": "google.auto", "bugType": "Change Identifier Used", "problem": "             if (interfaceMethod.getModifiers().contains(Modifier.ABSTRACT)) {\n               ExecutableType methodType = Elements2.getExecutableElementAsMemberOf(\n                   types, interfaceMethod, implementingType);\n              implemetationMethodDescriptors.add(new ImplemetationMethodDescriptor.Builder()\n                   .name(interfaceMethod.getSimpleName().toString())\n                   .returnType(getAnnotatedType(element).getQualifiedName().toString())\n                   .publicMethod()", "fixed": "             if (interfaceMethod.getModifiers().contains(Modifier.ABSTRACT)) {\n               ExecutableType methodType = Elements2.getExecutableElementAsMemberOf(\n                   types, interfaceMethod, implementingType);\n              implementationMethodDescriptors.add(new ImplementationMethodDescriptor.Builder()\n                   .name(interfaceMethod.getSimpleName().toString())\n                   .returnType(getAnnotatedType(element).getQualifiedName().toString())\n                   .publicMethod()", "sourceBeforeFix": "implemetationMethodDescriptors.build()", "sourceAfterFix": "implementationMethodDescriptors.build()"}
{"fixCommitSHA1": "1ab08ad4abff024bdd3fbeb6f08a1a4a61c49b65", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "         return checker;\n     }\n    private String[] removeSuppressed(String[] from, String[] remove) {\n         final Collection<String> coll =\n             Lists.newArrayList(Arrays.asList(from));\n         coll.removeAll(Arrays.asList(remove));", "fixed": "         return checker;\n     }\n    private static String[] removeSuppressed(String[] from, String[] remove) {\n         final Collection<String> coll =\n             Lists.newArrayList(Arrays.asList(from));\n         coll.removeAll(Arrays.asList(remove));", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "958fa58492daee485f640bf3261449d9bab9ee6e", "projectName": "facebook.presto", "bugType": "Change Identifier Used", "problem": "     }\n     @Test(expectedExceptions = UnrecoverableS3OperationException.class, expectedExceptionsMessageRegExp = \".*\\\\Q (Path: /tmp/test/path)\\\\E\")\n    public void testUnrecoverableS3ExceptionMessage()\n     {\n         throw new UnrecoverableS3OperationException(new Path(\"/tmp/test/path\"), new IOException(\"test io exception\"));\n     }", "fixed": "     }\n     @Test(expectedExceptions = UnrecoverableS3OperationException.class, expectedExceptionsMessageRegExp = \".*\\\\Q (Path: /tmp/test/path)\\\\E\")\n    public void testUnrecoverableS3ExceptionMessage() throws Exception\n     {\n         throw new UnrecoverableS3OperationException(new Path(\"/tmp/test/path\"), new IOException(\"test io exception\"));\n     }", "sourceBeforeFix": "RuntimeException.class", "sourceAfterFix": "IOException.class"}
{"fixCommitSHA1": "63bda8c7049725b63ee7e81c684abf8f996f69d4", "projectName": "apache.hive", "bugType": "Change Boolean Literal", "problem": "     long max = HiveConf.getLongVar(context.parseContext.getConf(),\n             HiveConf.ConfVars.HIVECONVERTJOINMAXSHUFFLESIZE);\n     if (max < 1) {\n      return true;\n     }\n     ReduceSinkOperator rsOp = (ReduceSinkOperator) joinOp.getParentOperators().get(position);", "fixed": "     long max = HiveConf.getLongVar(context.parseContext.getConf(),\n             HiveConf.ConfVars.HIVECONVERTJOINMAXSHUFFLESIZE);\n     if (max < 1) {\n      return false;\n     }\n     ReduceSinkOperator rsOp = (ReduceSinkOperator) joinOp.getParentOperators().get(position);", "sourceBeforeFix": "return true; ", "sourceAfterFix": "return false; "}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface RssEndpointBuilder\n            extends\n                EndpointConsumerBuilder {\n         default AdvancedRssEndpointBuilder advanced() {\n             return (AdvancedRssEndpointBuilder) this;\n         }", "fixed": "     \n    public interface RssEndpointBuilder extends EndpointConsumerBuilder {\n         default AdvancedRssEndpointBuilder advanced() {\n             return (AdvancedRssEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "26307cbc3e1ce776eb2f3ccd40ca216f7edcdbc6", "projectName": "netty.netty", "bugType": "More Specific If", "problem": "         if (getPath() == null && that.getPath() != null) {\n             return false;\n        } else if (that.getPath() == null) {\n             return false;\n         }\n         if (!getPath().equals(that.getPath())) {", "fixed": "         if (getPath() == null && that.getPath() != null) {\n             return false;\n        } else if (that.getPath() == null && getPath() != null) {\n             return false;\n         }\n         if (!getPath().equals(that.getPath())) {", "sourceBeforeFix": "that.getDomain() == null", "sourceAfterFix": "that.getDomain() == null && getDomain() != null"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15835, value = IN_SERIES + \" is missing groups: %s\")\n     String inSeriesIsMissingGroups(String rolloutPlan);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10835, value = IN_SERIES + \" is missing groups: %s\")\n     String inSeriesIsMissingGroups(String rolloutPlan);\n     /**", "sourceBeforeFix": "id=15840", "sourceAfterFix": "id=10840"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n            statistics.addRemoveTimeNano(System.nanoTime() - start);\n         }\n         return result;\n     }", "fixed": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n            statistics.addRemoveTimeNanos(System.nanoTime() - start);\n         }\n         return result;\n     }", "sourceBeforeFix": "statistics.addPutTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addPutTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<DirectMessage> getDirectMessages(Paging paging) throws TwitterException {\n        return DirectMessage.constructDirectMessages(get(getBaseURL()\n                 + \"direct_messages.json\", null, paging.asPostParameterList(), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<DirectMessage> getDirectMessages(Paging paging) throws TwitterException {\n        return DirectMessage.createDirectMessageList(get(getBaseURL()\n                 + \"direct_messages.json\", null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline.json\",true))"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_4() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(741);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {Console.WriteLine($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "fixed": " \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_4() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(740);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {Console.WriteLine($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "sourceBeforeFix": "new StringBuilder(741)", "sourceAfterFix": "new StringBuilder(740)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "4665dcf9ab41c3c61cd42aad296ebfe518bfa003", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\n \tpublic void glDeleteTextures (int n, IntBuffer textures) {\n\t\tGL.glDeleteTexturesEXT(n, textures, Memory.getPosition(textures));\n \t}\n \tpublic void glDepthFunc (int func) {", "fixed": " \t}\n \tpublic void glDeleteTextures (int n, IntBuffer textures) {\n\t\tGL.glDeleteTextures(n, textures, Memory.getPosition(textures));\n \t}\n \tpublic void glDepthFunc (int func) {", "sourceBeforeFix": "GL.glBindTextureEXT(target,texture)", "sourceAfterFix": "GL.glBindTexture(target,texture)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedSftpEndpointBuilder\n             extends\n                 AdvancedSftpEndpointConsumerBuilder, AdvancedSftpEndpointProducerBuilder {\n         default SftpEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedSftpEndpointBuilder\n             extends\n                 AdvancedSftpEndpointConsumerBuilder, AdvancedSftpEndpointProducerBuilder {\n         default SftpEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites(String id) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"favorites/\" + id + \".json\", new PostParameter[0], true));\n     }\n     /**", "fixed": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites(String id) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"favorites/\" + id + \".json\", new PostParameter[0], true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweets_of_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweets_of_me.json\",null,true))"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface DisruptorEndpointBuilder\n             extends\n                 DisruptorEndpointConsumerBuilder, DisruptorEndpointProducerBuilder {\n         default AdvancedDisruptorEndpointBuilder advanced() {", "fixed": "     \n    public interface DisruptorEndpointBuilder\n             extends\n                 DisruptorEndpointConsumerBuilder, DisruptorEndpointProducerBuilder {\n         default AdvancedDisruptorEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "032efde651a14f8175861d96a10a26b8948f5a54", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "     public void shutdown() {\n         synchronized (lifecycleLock) {\n             fireLifecycleEvent(SHUTTING_DOWN);\n            instance.managementService.unregister();\n             instance.node.shutdown(false, true);\n             HazelcastInstanceFactory.remove(instance);\n             fireLifecycleEvent(SHUTDOWN);", "fixed": "     public void shutdown() {\n         synchronized (lifecycleLock) {\n             fireLifecycleEvent(SHUTTING_DOWN);\n            instance.managementService.destroy();\n             instance.node.shutdown(false, true);\n             HazelcastInstanceFactory.remove(instance);\n             fireLifecycleEvent(SHUTDOWN);", "sourceBeforeFix": "instance.managementService.unregister()", "sourceAfterFix": "instance.managementService.destroy()"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AsteriskEndpointBuilder\n             extends\n                 AsteriskEndpointConsumerBuilder, AsteriskEndpointProducerBuilder {\n         default AdvancedAsteriskEndpointBuilder advanced() {", "fixed": "     \n    public interface AsteriskEndpointBuilder\n             extends\n                 AsteriskEndpointConsumerBuilder, AsteriskEndpointProducerBuilder {\n         default AdvancedAsteriskEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     }, tags={ \"store\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Map.class, responseContainer = \"Map\") })\n    Map<Map<String, Integer>> getInventory();\n     @GET\n     @Path(\"/order/{order_id}\")", "fixed": "     }, tags={ \"store\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Map.class, responseContainer = \"Map\") })\n    Map<String, Integer> getInventory() throws Exception;\n     @GET\n     @Path(\"/order/{order_id}\")", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "b7ceb6548fc986277173ca79065914877f1cc007", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Override\n \tpublic Mono<Health> health() {\n\t\treturn Flux.fromIterable(this.registry.getAll().entrySet()).flatMap(\n\t\t\t\t(entry) -> Mono.zip(Mono.just(entry.getKey()), entry.getValue().health().compose(this.timeoutCompose)))\n \t\t\t\t.collectMap(Tuple2::getT1, Tuple2::getT2).map(this.healthAggregator::aggregate);\n \t}", "fixed": " \t@Override\n \tpublic Mono<Health> health() {\n\t\treturn Flux.fromIterable(this.registry.getAll().entrySet())\n\t\t\t\t.flatMap((entry) -> Mono.zip(Mono.just(entry.getKey()),\n\t\t\t\t\t\tentry.getValue().health().transformDeferred(this.timeoutCompose)))\n \t\t\t\t.collectMap(Tuple2::getT1, Tuple2::getT2).map(this.healthAggregator::aggregate);\n \t}", "sourceBeforeFix": "entry.getValue().health().compose(this.timeoutCompose)", "sourceAfterFix": "entry.getValue().health().transformDeferred(this.timeoutCompose)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "486b290863a66641b0ec30dbf2d9e349733cae44", "projectName": "apache.hbase", "bugType": "Wrong Function Name", "problem": "    */\n   public void compact(String tableOrRegionName, String columnFamily)\n     throws IOException,  InterruptedException {\n    compact(Bytes.toBytesBinary(tableOrRegionName), Bytes.toBytes(columnFamily));\n   }\n   /**", "fixed": "    */\n   public void compact(String tableOrRegionName, String columnFamily)\n     throws IOException,  InterruptedException {\n    compact(Bytes.toBytes(tableOrRegionName), Bytes.toBytes(columnFamily));\n   }\n   /**", "sourceBeforeFix": "Bytes.toBytesBinary(tableNameOrRegionName)", "sourceAfterFix": "Bytes.toBytes(tableNameOrRegionName)"}
{"fixCommitSHA1": "02f92e681b223c753cca7d9d81fe2308c632a3fb", "projectName": "Atmosphere.atmosphere", "bugType": "Change Binary Operator", "problem": "             }\n             Broadcaster existingOne = store.putIfAbsent(id, createBroadcaster(c, id));\n            if (existingOne == null) {\n                 logger.debug(\"Added Broadcaster {} . Factory size: {}\", id, store.size());\n             } else {\n                 logger.warn(\"Duplicate Broadcaster's name {}. You must invoke Broadcaster.destroy() on that instance to prevent memory leak.\", existingOne);", "fixed": "             }\n             Broadcaster existingOne = store.putIfAbsent(id, createBroadcaster(c, id));\n            if (existingOne != null) {\n                 logger.debug(\"Added Broadcaster {} . Factory size: {}\", id, store.size());\n             } else {\n                 logger.warn(\"Duplicate Broadcaster's name {}. You must invoke Broadcaster.destroy() on that instance to prevent memory leak.\", existingOne);", "sourceBeforeFix": "existingOne == null", "sourceAfterFix": "existingOne != null"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface CouchbaseEndpointBuilder\n             extends\n                 CouchbaseEndpointConsumerBuilder, CouchbaseEndpointProducerBuilder {\n         default AdvancedCouchbaseEndpointBuilder advanced() {", "fixed": "     \n    public interface CouchbaseEndpointBuilder\n             extends\n                 CouchbaseEndpointConsumerBuilder, CouchbaseEndpointProducerBuilder {\n         default AdvancedCouchbaseEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "64bc69ef4c547771f44f6b6b103cda7be2f0922b", "projectName": "dropwizard.metrics", "bugType": "Wrong Function Name", "problem": " \t}\n \tpublic SortedMap<String, Timer> getTimers(MetricFilter filter) {\n\t\treturn adaptMetrics(Timer.class, reg.getCounters(transformFilter(filter)));\n \t}\n \tprivate io.dropwizard.metrics.MetricFilter transformFilter(final MetricFilter filter) {", "fixed": " \t}\n \tpublic SortedMap<String, Timer> getTimers(MetricFilter filter) {\n\t\treturn adaptMetrics(Timer.class, reg.getTimers(transformFilter(filter)));\n \t}\n \tprivate io.dropwizard.metrics.MetricFilter transformFilter(final MetricFilter filter) {", "sourceBeforeFix": "reg.getCounters(transformFilter(filter))", "sourceAfterFix": "reg.getHistograms(transformFilter(filter))"}
{"fixCommitSHA1": "e2119d33293008fcc876f5fcd58ede2993eb24d6", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnBean(RedisConnectionFactory.class)\n\t@ConditionalOnEnablednHealthIndicator(\"redis\")\n \tpublic static class RedisHealthIndicatorConfiguration\n \t\t\textends\n \t\t\tCompositeHealthIndicatorConfiguration<RedisHealthIndicator, RedisConnectionFactory> {", "fixed": " \t@Configuration\n \t@ConditionalOnBean(RedisConnectionFactory.class)\n\t@ConditionalOnEnabledHealthIndicator(\"redis\")\n \tpublic static class RedisHealthIndicatorConfiguration\n \t\t\textends\n \t\t\tCompositeHealthIndicatorConfiguration<RedisHealthIndicator, RedisConnectionFactory> {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"solr\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"solr\")"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface Web3jEndpointBuilder\n             extends\n                 Web3jEndpointConsumerBuilder, Web3jEndpointProducerBuilder {\n         default AdvancedWeb3jEndpointBuilder advanced() {", "fixed": "     \n    public interface Web3jEndpointBuilder\n             extends\n                 Web3jEndpointConsumerBuilder, Web3jEndpointProducerBuilder {\n         default AdvancedWeb3jEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "bcb6eeec1d978d6d572ebec875d34dc64aeb5121", "projectName": "alibaba.dubbo", "bugType": "Wrong Function Name", "problem": "         String methodKey = method + \".\" + key;\r\n         Number n = getNumbers().get(methodKey);\r\n         if (n != null) {\r\n            return n.intValue();\r\n         }\r\n         String value = getMethodParameter(method, key);\r\n         if (StringUtils.isEmpty(value)) {\r", "fixed": "         String methodKey = method + \".\" + key;\r\n         Number n = getNumbers().get(methodKey);\r\n         if (n != null) {\r\n            return n.floatValue();\r\n         }\r\n         String value = getMethodParameter(method, key);\r\n         if (StringUtils.isEmpty(value)) {\r", "sourceBeforeFix": "n.intValue()", "sourceAfterFix": "n.doubleValue()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15856, value = \"Invalid url stream.\")\n     String invalidUrlStream();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10856, value = \"Invalid url stream.\")\n     String invalidUrlStream();\n     /**", "sourceBeforeFix": "id=15852", "sourceAfterFix": "id=10852"}
{"fixCommitSHA1": "1d4261b1f58bf1a79df2caa11146869f2b47ecf3", "projectName": "apache.hive", "bugType": "Same Function More Args", "problem": "         case ORC:\n           if (literal instanceof Integer) {\n            return Long.valueOf(literal.toString());\n           }\n           return literal;\n         case PARQUET:", "fixed": "         case ORC:\n           if (literal instanceof Integer) {\n            return ((Number) literal).longValue();\n           }\n           return literal;\n         case PARQUET:", "sourceBeforeFix": "new ArrayList<Object>()", "sourceAfterFix": "new ArrayList<Object>(literalList.size())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n* @see NormalizableKey\n \t */\n\tpublic void putNormalizedKey(T record, byte[] target, int offset, int numBytes);\n \t/**\n \t * Writes the record in such a fashion that all keys are normalizing and at the beginning of the serialized data.", "fixed": " \t * \n* @see NormalizableKey\n \t */\n\tpublic abstract void putNormalizedKey(T record, byte[] target, int offset, int numBytes);\n \t/**\n \t * Writes the record in such a fashion that all keys are normalizing and at the beginning of the serialized data.", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface GoraEndpointBuilder\n             extends\n                 GoraEndpointConsumerBuilder, GoraEndpointProducerBuilder {\n         default AdvancedGoraEndpointBuilder advanced() {", "fixed": "     \n    public interface GoraEndpointBuilder\n             extends\n                 GoraEndpointConsumerBuilder, GoraEndpointProducerBuilder {\n         default AdvancedGoraEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getMentions() throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",\n                 null, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getMentions() throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",\n                 null, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  private final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "2", "sourceAfterFix": "0"}
{"fixCommitSHA1": "149b8d85f0e5390ddcf03810279fbbe9d34f64f8", "projectName": "thinkaurelius.titan", "bugType": "Change Identifier Used", "problem": "                 public KeyIterator call() throws StorageException {\n                     KeyIterator ki = backend.getKeys(query, txh);\n                     if (null != p) {\n                        return MetricInstrumentedIterator.of(ki, p + \".\" + M_ITERATOR);\n                     } else {\n                         return ki;\n                     }", "fixed": "                 public KeyIterator call() throws StorageException {\n                     KeyIterator ki = backend.getKeys(query, txh);\n                     if (null != p) {\n                        return MetricInstrumentedIterator.of(ki, p + \".\" + M_GET_KEYS + \".\" + M_ITERATOR);\n                     } else {\n                         return ki;\n                     }", "sourceBeforeFix": "p + \".\" + M_ITERATOR", "sourceAfterFix": "p + \".\" + M_GET_KEYS+ \".\"+ M_ITERATOR"}
{"fixCommitSHA1": "2fd76b44572ea58787e055deffd83288414dd2ef", "projectName": "Activiti.Activiti", "bugType": "Change Identifier Used", "problem": " public class MBeanInfoAssembler {\r\n  private static final Logger LOG = LoggerFactory.getLogger(DefaultManagementAgent.class);\r\n   protected final WeakHashMap<Class< ? >, MBeanAttributesAndOperations> cache = new WeakHashMap<Class< ? >, MBeanAttributesAndOperations>(10);\r", "fixed": " public class MBeanInfoAssembler {\r\n  private static final Logger LOG = LoggerFactory.getLogger(MBeanInfoAssembler.class);\r\n   protected final WeakHashMap<Class< ? >, MBeanAttributesAndOperations> cache = new WeakHashMap<Class< ? >, MBeanAttributesAndOperations>(10);\r", "sourceBeforeFix": "DefaultManagementAgent.class", "sourceAfterFix": "MBeanInfoAssembler.class"}
{"fixCommitSHA1": "a63faf44e1b103a49d25a15c720fc5940ae9fc07", "projectName": "square.retrofit", "bugType": "Change Identifier Used", "problem": "     assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mBodyWildcard = new TypeToken<Maybe<? extends String>>() {}.getType();\n    assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fBodyWildcard = new TypeToken<Flowable<? extends String>>() {}.getType();\n    assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oBodyGeneric = new TypeToken<Observable<List<String>>>() {}.getType();", "fixed": "     assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mBodyWildcard = new TypeToken<Maybe<? extends String>>() {}.getType();\n    assertThat(factory.get(mBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fBodyWildcard = new TypeToken<Flowable<? extends String>>() {}.getType();\n    assertThat(factory.get(fBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oBodyGeneric = new TypeToken<Observable<List<String>>>() {}.getType();", "sourceBeforeFix": "factory.get(sResultWildcard,NO_ANNOTATIONS,retrofit)", "sourceAfterFix": "factory.get(fResultWildcard,NO_ANNOTATIONS,retrofit)"}
{"fixCommitSHA1": "c7f595fc915025236dad228bff9c4fdc3138c993", "projectName": "swagger-api.swagger-codegen", "bugType": "Change Numeric Literal", "problem": "       }\n       else if(String.class.equals(cls)) {\n         if(json != null && json.startsWith(\"\\\"\") && json.endsWith(\"\\\"\") && json.length() > 1)\n          return json.substring(1, json.length() - 2);\n         else\n           return json;\n       }", "fixed": "       }\n       else if(String.class.equals(cls)) {\n         if(json != null && json.startsWith(\"\\\"\") && json.endsWith(\"\\\"\") && json.length() > 1)\n          return json.substring(1, json.length() - 1);\n         else\n           return json;\n       }", "sourceBeforeFix": "json.length() - 2", "sourceAfterFix": "json.length() - 1"}
{"fixCommitSHA1": "482a1d000adc7a304139d6b93f6690ed61ea0902", "projectName": "wildfly.wildfly", "bugType": "Same Function More Args", "problem": "             System.out.println(\"-- host configuration\");\n             final ModelNode hostResult = result.get(RESULT).clone();\n            System.out.println();\n             System.out.println(\"--\");\n         } finally {", "fixed": "             System.out.println(\"-- host configuration\");\n             final ModelNode hostResult = result.get(RESULT).clone();\n            System.out.println(hostResult);\n             System.out.println(\"--\");\n         } finally {", "sourceBeforeFix": "System.out.println()", "sourceAfterFix": "System.out.println(hostResult)"}
{"fixCommitSHA1": "4281cc1c5d3aa51b56db9d9e251c761c52a855e3", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t * before growing the backing table. */\r\n \tpublic ObjectMap (int initialCapacity, float loadFactor) {\r\n \t\tif (initialCapacity < 0) throw new IllegalArgumentException(\"initialCapacity must be >= 0: \" + initialCapacity);\r\n\t\tif (capacity > 1 << 30) throw new IllegalArgumentException(\"initialCapacity is too large: \" + initialCapacity);\r\n \t\tcapacity = MathUtils.nextPowerOfTwo(initialCapacity);\r\n \t\tif (loadFactor <= 0) throw new IllegalArgumentException(\"loadFactor must be > 0: \" + loadFactor);\r", "fixed": " \t * before growing the backing table. */\r\n \tpublic ObjectMap (int initialCapacity, float loadFactor) {\r\n \t\tif (initialCapacity < 0) throw new IllegalArgumentException(\"initialCapacity must be >= 0: \" + initialCapacity);\r\n\t\tif (initialCapacity > 1 << 30) throw new IllegalArgumentException(\"initialCapacity is too large: \" + initialCapacity);\r\n \t\tcapacity = MathUtils.nextPowerOfTwo(initialCapacity);\r\n \t\tif (loadFactor <= 0) throw new IllegalArgumentException(\"loadFactor must be > 0: \" + loadFactor);\r", "sourceBeforeFix": "capacity > 1 << 30", "sourceAfterFix": "initialCapacity > 1 << 30"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "a35860eadb4400f069e306ccd76f1a19ecfb3ba1", "projectName": "google.guava", "bugType": "Change Identifier Used", "problem": "   }\n   @Override\n  public N removeOutEdge(Object edge) {\n     N node = super.removeOutEdge(edge);\n     Multiset<N> adjacentNodes = getReference(adjacentNodesReference);\n     if (adjacentNodes != null) {", "fixed": "   }\n   @Override\n  public N removeOutEdge(E edge) {\n     N node = super.removeOutEdge(edge);\n     Multiset<N> adjacentNodes = getReference(adjacentNodesReference);\n     if (adjacentNodes != null) {", "sourceBeforeFix": "Object edge", "sourceAfterFix": "E edge"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15839, value = \"Operation failed or was rolled back on all servers.\")\n     String operationFailedOrRolledBack();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10839, value = \"Operation failed or was rolled back on all servers.\")\n     String operationFailedOrRolledBack();\n     /**", "sourceBeforeFix": "id=15869", "sourceAfterFix": "id=10869"}
{"fixCommitSHA1": "1daccd54d2ff2ecdb21d8c60268600c37febbb70", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "           sum += mBuf.get(pId % 16);\n           if (DEBUG_MODE) {\n            buf.DATA.flip();\n             CommonUtils.printByteBuffer(LOG, buf.DATA);\n           }\n           buf.DATA.clear();", "fixed": "           sum += mBuf.get(pId % 16);\n           if (DEBUG_MODE) {\n            buf.DATA.order(ByteOrder.nativeOrder()).flip();\n             CommonUtils.printByteBuffer(LOG, buf.DATA);\n           }\n           buf.DATA.clear();", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "46941b16a30e493238924701f938cbf3318eb355", "projectName": "Alluxio.alluxio", "bugType": "Same Function More Args", "problem": "    * @return A mapping from storage tier alias to blocks\n    */\n   public Map<String, List<Long>> getBlockList() {\n    Preconditions.checkNotNull(mBlockIdsOnTiers);\n     return mBlockIdsOnTiers;\n   }", "fixed": "    * @return A mapping from storage tier alias to blocks\n    */\n   public Map<String, List<Long>> getBlockList() {\n    Preconditions.checkNotNull(mBlockIdsOnTiers, \"mBlockIdsOnTiers\");\n     return mBlockIdsOnTiers;\n   }", "sourceBeforeFix": "Preconditions.checkNotNull(mBlockIdsOnTiers)", "sourceAfterFix": "Preconditions.checkNotNull(mBlockIdsOnTiers,\"mBlockIdsOnTiers\")"}
{"fixCommitSHA1": "a6c394118fad3819a98baf4142fb59f6db3735f0", "projectName": "apache.camel", "bugType": "Missing Throws Exception", "problem": "         return swagger;\n     }\n    private void parse(Swagger swagger, RestDefinition rest, String camelContextId, ClassResolver classResolver) {\n         List<VerbDefinition> verbs = new ArrayList<>(rest.getVerbs());\n         Collections.sort(verbs, new VerbOrdering());", "fixed": "         return swagger;\n     }\n    private void parse(Swagger swagger, RestDefinition rest, String camelContextId, ClassResolver classResolver) throws ClassNotFoundException {\n         List<VerbDefinition> verbs = new ArrayList<>(rest.getVerbs());\n         Collections.sort(verbs, new VerbOrdering());", "sourceBeforeFix": "2", "sourceAfterFix": "2"}
{"fixCommitSHA1": "04ad420f594bedd8cd5c40160d67585f70686a9c", "projectName": "aws.aws-sdk-java", "bugType": "Wrong Function Name", "problem": "                 try {\n                     return unmarshaller.unmarshall(jsonContent.jsonNode);\n                 } catch (Exception e) {\n                    LOG.error(\"Unable to unmarshall exception content\", e);\n                     return null;\n                 }\n             }", "fixed": "                 try {\n                     return unmarshaller.unmarshall(jsonContent.jsonNode);\n                 } catch (Exception e) {\n                    LOG.info(\"Unable to unmarshall exception content\", e);\n                     return null;\n                 }\n             }", "sourceBeforeFix": "LOG.error(\"Unable to parse HTTP response content\",e)", "sourceAfterFix": "LOG.info(\"Unable to parse HTTP response content\",e)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      * @param hostName   the name of the host.\n      */\n     @LogMessage(level = Level.WARN)\n    @Message(id = 15802, value = \"Interrupted awaiting final response from server %s on host %s\")\n     void interruptedAwaitingFinalResponse(String serverName, String hostName);\n     /**", "fixed": "      * @param hostName   the name of the host.\n      */\n     @LogMessage(level = Level.WARN)\n    @Message(id = 10802, value = \"Interrupted awaiting final response from server %s on host %s\")\n     void interruptedAwaitingFinalResponse(String serverName, String hostName);\n     /**", "sourceBeforeFix": "id=15801", "sourceAfterFix": "id=10801"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsCsv(String path) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), 1, null);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsCsv(String path) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), 1, null);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "4b52e5d010469405c1ec24baa2f8457f3eada222", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic boolean scrolled (int amount) {\r\n\t\tInputProcessor[] items = processors.begin();\r\n \t\ttry {\r\n \t\t\tfor (int i = 0, n = processors.size; i < n; i++)\r\n\t\t\t\tif (items[i].scrolled(amount)) return true;\r\n \t\t} finally {\r\n \t\t\tprocessors.end();\r\n \t\t}\r", "fixed": " \t}\r\n \tpublic boolean scrolled (int amount) {\r\n\t\tObject[] items = processors.begin();\r\n \t\ttry {\r\n \t\t\tfor (int i = 0, n = processors.size; i < n; i++)\r\n\t\t\t\tif (((InputProcessor)items[i]).scrolled(amount)) return true;\r\n \t\t} finally {\r\n \t\t\tprocessors.end();\r\n \t\t}\r", "sourceBeforeFix": "InputProcessor[]", "sourceAfterFix": "Object[]"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  private final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "10f01f49c2166c803bf6ba46f3d6bb9203a9c440", "projectName": "apache.storm", "bugType": "Change Caller in Function Call", "problem": "                 state = MachineState.RUNNING;\n             }\n            this.startTime = System.currentTimeMillis();\n             this.newAssignment = newAssignment;\n             this.pendingLocalization = null;\n             this.pendingDownload = null;", "fixed": "                 state = MachineState.RUNNING;\n             }\n            this.startTime = Time.currentTimeMillis();\n             this.newAssignment = newAssignment;\n             this.pendingLocalization = null;\n             this.pendingDownload = null;", "sourceBeforeFix": "System.currentTimeMillis()", "sourceAfterFix": "Time.currentTimeMillis()"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "fixed": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "sourceBeforeFix": "GL20.glUniformMatrix2(location,transpose,value)", "sourceAfterFix": "GL20.glUniformMatrix2fv(location,transpose,value)"}
{"fixCommitSHA1": "3eb03ea8da9525d9615fcef99c0f3dcc3f1218c9", "projectName": "facebook.presto", "bugType": "Change Identifier Used", "problem": "     protected R visitCreateTable(CreateTable node, C context)\n     {\n        return visitNode(node, context);\n     }\n     protected R visitDropTable(DropTable node, C context)\n     {\n        return visitNode(node, context);\n     }\n }", "fixed": "     protected R visitCreateTable(CreateTable node, C context)\n     {\n        return visitStatement(node, context);\n     }\n     protected R visitDropTable(DropTable node, C context)\n     {\n        return visitStatement(node, context);\n     }\n }", "sourceBeforeFix": "visitNode(node,context)", "sourceAfterFix": "visitStatement(node,context)"}
{"fixCommitSHA1": "9518e6098309042882113ef36bf7d6a5a61d6349", "projectName": "hazelcast.hazelcast", "bugType": "Change Numeric Literal", "problem": "      */\n     private static class TargetOperation extends AbstractOperation {\n         public void run() throws InterruptedException {\n            Thread.sleep(5000);\n         }\n     }", "fixed": "      */\n     private static class TargetOperation extends AbstractOperation {\n         public void run() throws InterruptedException {\n            Thread.sleep(10000);\n         }\n     }", "sourceBeforeFix": "Thread.sleep(5000)", "sourceAfterFix": "Thread.sleep(10000)"}
{"fixCommitSHA1": "958fa58492daee485f640bf3261449d9bab9ee6e", "projectName": "facebook.presto", "bugType": "Change Identifier Used", "problem": "     }\n     @SuppressWarnings(\"ResultOfMethodCallIgnored\")\n    @Test(expectedExceptions = RuntimeException.class, expectedExceptionsMessageRegExp = \".*Failing getObject call with \" + SC_NOT_FOUND + \".*\")\n     public void testReadNotFound()\n             throws Exception\n     {", "fixed": "     }\n     @SuppressWarnings(\"ResultOfMethodCallIgnored\")\n    @Test(expectedExceptions = IOException.class, expectedExceptionsMessageRegExp = \".*Failing getObject call with \" + SC_NOT_FOUND + \".*\")\n     public void testReadNotFound()\n             throws Exception\n     {", "sourceBeforeFix": "RuntimeException.class", "sourceAfterFix": "IOException.class"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream.\n \t */\n\tpublic DataStream<OUT> print() {\n \t\tDataStream<OUT> inputStream = this.copy();\n \t\tPrintSinkFunction<OUT> printFunction = new PrintSinkFunction<OUT>();\n\t\tDataStream<OUT> returnStream = addSink(inputStream, printFunction, null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());", "fixed": " \t * \n \t * @return The closed DataStream.\n \t */\n\tpublic DataStreamSink<OUT> print() {\n \t\tDataStream<OUT> inputStream = this.copy();\n \t\tPrintSinkFunction<OUT> printFunction = new PrintSinkFunction<OUT>();\n\t\tDataStreamSink<OUT> returnStream = addSink(inputStream, printFunction, null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15871, value = \"Unknown server %s\")\n     IllegalStateException unknownServer(ServerIdentity server);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10871, value = \"Unknown server %s\")\n     IllegalStateException unknownServer(ServerIdentity server);\n     /**", "sourceBeforeFix": "id=15846", "sourceAfterFix": "id=10846"}
{"fixCommitSHA1": "9f5dd0f7caa451c4d1620467f13be87bd9ae3f71", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "     DeleteBuffer deleteBuffer = new DeleteBuffer();\n     UnderFileStatus[] pathsToDelete = listInternal(path, ListOptions.defaults().setRecursive(true));\n     if (pathsToDelete == null) {\n      LOG.error(\"Unable to delete {} because listInternal returns null\", path);\n       return false;\n     }\n     for (UnderFileStatus pathToDelete : pathsToDelete) {", "fixed": "     DeleteBuffer deleteBuffer = new DeleteBuffer();\n     UnderFileStatus[] pathsToDelete = listInternal(path, ListOptions.defaults().setRecursive(true));\n     if (pathsToDelete == null) {\n      LOG.warn(\"Unable to delete {} because listInternal returns null\", path);\n       return false;\n     }\n     for (UnderFileStatus pathToDelete : pathsToDelete) {", "sourceBeforeFix": "LOG.error(\"Unable to delete {} because listInternal returns null\",path)", "sourceAfterFix": "LOG.warn(\"Unable to delete {} because listInternal returns null\",path)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "fixed": "   }\n   \n  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "ea36259d22c518ae70f5eb951123c74351be48b6", "projectName": "hazelcast.hazelcast", "bugType": "Change Numeric Literal", "problem": "         final String key = \"key\";\n         final String value = \"value\";\n        map.lock(key, 4, TimeUnit.SECONDS);\n         final CountDownLatch tryPutReturned = new CountDownLatch(1);\n         new Thread() {\n             public void run() {\n                map.tryPut(key, value, 8, TimeUnit.SECONDS);\n                 tryPutReturned.countDown();\n             }\n         }.start();", "fixed": "         final String key = \"key\";\n         final String value = \"value\";\n        map.lock(key, 1, TimeUnit.SECONDS);\n         final CountDownLatch tryPutReturned = new CountDownLatch(1);\n         new Thread() {\n             public void run() {\n                map.tryPut(key, value, 60, TimeUnit.SECONDS);\n                 tryPutReturned.countDown();\n             }\n         }.start();", "sourceBeforeFix": "map.lock(key,4,TimeUnit.SECONDS)", "sourceAfterFix": "map.lock(key,1,TimeUnit.SECONDS)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AtomixMultiMapEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default AdvancedAtomixMultiMapEndpointBuilder advanced() {", "fixed": "     \n    public interface AtomixMultiMapEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default AdvancedAtomixMultiMapEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Order.class),\n         @ApiResponse(code = 400, message = \"Invalid Order\", response = Void.class) })\n    Order placeOrder(@Valid Order body);\n }", "fixed": "     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Order.class),\n         @ApiResponse(code = 400, message = \"Invalid Order\", response = Void.class) })\n    Order placeOrder(@Valid Order body) throws Exception;\n }", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "0e05cfd1dbe7e423498620c807ac3ff8681688c9", "projectName": "gephi.gephi", "bugType": "Change Identifier Used", "problem": "         for (int i = 0; i < managedRenderers.length; i++) {\n             if (managedRenderers[i] == null) {\n                throw new IllegalArgumentException(\"managedRenderers should not contains null values\");\n             }\n         }", "fixed": "         for (int i = 0; i < managedRenderers.length; i++) {\n             if (managedRenderers[i] == null) {\n                throw new IllegalArgumentException(\"managedRenderers should not contain null values\");\n             }\n         }", "sourceBeforeFix": "Set<Renderer>", "sourceAfterFix": "Set<String>"}
{"fixCommitSHA1": "aafd0373be686a3111cfbb0d487529c276772264", "projectName": "druid-io.druid", "bugType": "Change Operand ", "problem": "         public ClientResponse<InputStream> done(ClientResponse<InputStream> clientResponse)\n         {\n           long stopTimeNs = System.nanoTime();\n          long nodeTimeNs = stopTimeNs - responseStartTimeNs;\n           final long nodeTimeMs = TimeUnit.NANOSECONDS.toMillis(nodeTimeNs);\n           log.debug(\n               \"Completed queryId[%s] request to url[%s] with %,d bytes returned in %,d millis [%,f b/s].\",", "fixed": "         public ClientResponse<InputStream> done(ClientResponse<InputStream> clientResponse)\n         {\n           long stopTimeNs = System.nanoTime();\n          long nodeTimeNs = stopTimeNs - requestStartTimeNs;\n           final long nodeTimeMs = TimeUnit.NANOSECONDS.toMillis(nodeTimeNs);\n           log.debug(\n               \"Completed queryId[%s] request to url[%s] with %,d bytes returned in %,d millis [%,f b/s].\",", "sourceBeforeFix": "stopTimeNs - responseStartTimeNs", "sourceAfterFix": "stopTimeNs - requestStartTimeNs"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_cn_1() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e745\u67086\u65e5\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_cn_1() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e745\u67086\u65e5\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": " };\n   \n  private final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler", "fixed": " };\n   \n  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "0b302cf93edee0e2ab3c9998f380ede8e8ea7727", "projectName": "Atmosphere.atmosphere", "bugType": "Change Identifier Used", "problem": "             }\n             if (resources.contains(r)) {\n                return r;\n             }", "fixed": "             }\n             if (resources.contains(r)) {\n                return this;\n             }", "sourceBeforeFix": "return r; ", "sourceAfterFix": "return this; "}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "cde65024a20d660e586494ec6a443f8732fee068", "projectName": "apache.hadoop", "bugType": "Same Function Less Args", "problem": "     status.setHealthReport(\"sick\");\n     status.setIsNodeHealthy(false);\n     node.handle(new RMNodeStatusEvent(node.getNodeID(), status,\n        new ArrayList<ContainerStatus>(), null, null, null));\n     Assert.assertEquals(NodeState.UNHEALTHY, node.getState());\n     return node;\n   }", "fixed": "     status.setHealthReport(\"sick\");\n     status.setIsNodeHealthy(false);\n     node.handle(new RMNodeStatusEvent(node.getNodeID(), status,\n        new ArrayList<ContainerStatus>(), null, null));\n     Assert.assertEquals(NodeState.UNHEALTHY, node.getState());\n     return node;\n   }", "sourceBeforeFix": "new RMNodeStatusEvent(node.getNodeID(),status,new ArrayList<ContainerStatus>(),null,null,null)", "sourceAfterFix": "new RMNodeStatusEvent(node.getNodeID(),status,new ArrayList<ContainerStatus>(),null,null)"}
{"fixCommitSHA1": "dff64bf31f0406905c321e100e29d3600cf618e3", "projectName": "apache.camel", "bugType": "Missing Throws Exception", "problem": "      * Allow this route to be run as an application\n      *\n      * @param args\n      */\n    public static void main(String[] args) {\n         new Main().run(args);\n     }", "fixed": "      * Allow this route to be run as an application\n      *\n      * @param args\n     * @throws Exception \n      */\n    public static void main(String[] args) throws Exception {\n         new Main().run(args);\n     }", "sourceBeforeFix": "9", "sourceAfterFix": "9"}
{"fixCommitSHA1": "3e97b0501c42c4adc47d32db7484295646632263", "projectName": "Graylog2.graylog2-server", "bugType": "Change Numeric Literal", "problem": "     private int maxNumberOfIndices = 20;\n     @Parameter(value = \"output_batch_size\", required = true, validator = PositiveIntegerValidator.class)\n    private int outputBatchSize = 5000;\n     @Parameter(value = \"outputbuffer_processors\", required = true, validator = PositiveIntegerValidator.class)\n    private int outputBufferProcessors = 5;\n     @Parameter(value = \"outputbuffer_processor_threads_max_pool_size\", required = true, validator = PositiveIntegerValidator.class)\n     private int outputBufferProcessorThreadsMaxPoolSize = 30;", "fixed": "     private int maxNumberOfIndices = 20;\n     @Parameter(value = \"output_batch_size\", required = true, validator = PositiveIntegerValidator.class)\n    private int outputBatchSize = 25;\n     @Parameter(value = \"outputbuffer_processors\", required = true, validator = PositiveIntegerValidator.class)\n    private int outputBufferProcessors = 3;\n     @Parameter(value = \"outputbuffer_processor_threads_max_pool_size\", required = true, validator = PositiveIntegerValidator.class)\n     private int outputBufferProcessorThreadsMaxPoolSize = 30;", "sourceBeforeFix": "outputBufferProcessors=5", "sourceAfterFix": "outputBufferProcessors=3"}
{"fixCommitSHA1": "ec6db0e0ab4948c4056a7c13da54f67c26c1ccaf", "projectName": "openhab.openhab", "bugType": "Less Specific If", "problem": " \t\t\t\tList<ZWaveDbConfigurationParameter> configList = database.getProductConfigParameters();\n\t\t\t\tif(configList.size() == 0) {\n \t\t\t\t\tbreak;\n \t\t\t\t}", "fixed": " \t\t\t\tList<ZWaveDbConfigurationParameter> configList = database.getProductConfigParameters();\n\t\t\t\tif(configList == null || configList.size() == 0) {\n \t\t\t\t\tbreak;\n \t\t\t\t}", "sourceBeforeFix": "configList.size() == 0", "sourceAfterFix": "configList == null || configList.size() == 0"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface LdapEndpointBuilder\n            extends\n                EndpointProducerBuilder {\n         default AdvancedLdapEndpointBuilder advanced() {\n             return (AdvancedLdapEndpointBuilder) this;\n         }", "fixed": "     \n    public interface LdapEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedLdapEndpointBuilder advanced() {\n             return (AdvancedLdapEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  private final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "100b094aeabeda76bb5d69e3e279727147e7443e", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "         for (int i = 0; i < size; i++) {\n             map.put(i, i);\n         }\n        instance2.getLifecycleService().terminate();\n         mapStore.awaitStores();\n     }", "fixed": "         for (int i = 0; i < size; i++) {\n             map.put(i, i);\n         }\n        instance2.getLifecycleService().shutdown();\n         mapStore.awaitStores();\n     }", "sourceBeforeFix": "instance2.getLifecycleService().terminate()", "sourceAfterFix": "instance2.getLifecycleService().shutdown()"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleActionsPredicatesOptions_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(239);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");", "fixed": " \tpublic void testMultipleActionsPredicatesOptions_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(238);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");", "sourceBeforeFix": "new StringBuilder(239)", "sourceAfterFix": "new StringBuilder(238)"}
{"fixCommitSHA1": "55ed50c4975cf694828d46ee9ca32ce72a9ef913", "projectName": "clojure.clojure", "bugType": "Wrong Function Name", "problem": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 12:\r\n\t\t\treturn invoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "fixed": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 12:\r\n\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "sourceBeforeFix": "invoke(args.first(),(args=args.rest()).first(),args.rest())", "sourceAfterFix": "doInvoke(args.first(),(args=args.rest()).first(),args.rest())"}
{"fixCommitSHA1": "f05bb137d8a854b2dedebb31becdf54e61b93646", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "   @Override\n   protected void setUp() throws Exception {\n     super.setUp();\n    this.mode = TypeInferenceMode.Both;\n   }", "fixed": "   @Override\n   protected void setUp() throws Exception {\n     super.setUp();\n    this.mode = TypeInferenceMode.BOTH;\n   }", "sourceBeforeFix": "this == NtiOnly", "sourceAfterFix": "this == NTI_ONLY"}
{"fixCommitSHA1": "89ed905358dd09d005398028198cc388b9b59a94", "projectName": "square.javapoet", "bugType": "Wrong Function Name", "problem": "   }\n   @Test public void eolComment() throws IOException {\n    javaWriter.emitSingleLineCOmment(\"foo\");\nassertCode(\"\n   }", "fixed": "   }\n   @Test public void eolComment() throws IOException {\n    javaWriter.emitSingleLineComment(\"foo\");\nassertCode(\"\n   }", "sourceBeforeFix": "javaWriter.emitSingleLineCOmment(\"foo\")", "sourceAfterFix": "javaWriter.emitSingleLineComment(\"foo\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15863, value = \"%s is not a valid URL -- %s\")\n     String invalidUrl(String url, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10863, value = \"%s is not a valid URL -- %s\")\n     String invalidUrl(String url, String message);\n     /**", "sourceBeforeFix": "id=15843", "sourceAfterFix": "id=10843"}
{"fixCommitSHA1": "88b4f19e6e0a27a51a835b32e0e4ea0002ca433f", "projectName": "wildfly.wildfly", "bugType": "Same Function More Args", "problem": "         private volatile ManagementOperationHandler operationHandler;\n         private void handleRequest(final ManagementRequestHeader header, final DataInput input) throws IOException {\n            log.tracef(\"%s handling request %d(%d)\", ManagementChannel.this, header.getBatchId());\n             final FlushableDataOutputImpl output = FlushableDataOutputImpl.create(writeMessage());\n             Exception error = null;", "fixed": "         private volatile ManagementOperationHandler operationHandler;\n         private void handleRequest(final ManagementRequestHeader header, final DataInput input) throws IOException {\n            log.tracef(\"%s handling request %d\", ManagementChannel.this, header.getBatchId());\n             final FlushableDataOutputImpl output = FlushableDataOutputImpl.create(writeMessage());\n             Exception error = null;", "sourceBeforeFix": "log.tracef(\"%s finished request %d\",ManagementChannel.this)", "sourceAfterFix": "log.tracef(\"%s finished request %d\",ManagementChannel.this,header.getBatchId())"}
{"fixCommitSHA1": "8fffaa7778e75625710adc9e458e7a549c525ce9", "projectName": "apache.hbase", "bugType": "Change Caller in Function Call", "problem": "       priorRange = ranges[i];\n       cumNum = val;\n     }\n    long val = histogram.getCount();\n     if (val - cumNum > 0) {\n       metricsRecordBuilder.addCounter(\n           Interns.info(name + \"_\" + rangeType + \"_\" + ranges[ranges.length - 1] + \"-inf\", desc),", "fixed": "       priorRange = ranges[i];\n       cumNum = val;\n     }\n    long val = snapshot.getCount();\n     if (val - cumNum > 0) {\n       metricsRecordBuilder.addCounter(\n           Interns.info(name + \"_\" + rangeType + \"_\" + ranges[ranges.length - 1] + \"-inf\", desc),", "sourceBeforeFix": "histogram.getCount()", "sourceAfterFix": "snapshot.getCount()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  private final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "f4c635d30b23be6ce51866704c178232e98015e7", "projectName": "netty.netty", "bugType": "Change Modifier", "problem": "      *  (which is dangerous).\n      * @param initialHuffmanDecodeCapacity Size of an intermediate buffer used during huffman decode.\n      */\n    HpackDecoder(long maxHeaderListSize, int initialHuffmanDecodeCapacity) {\n         this(maxHeaderListSize, initialHuffmanDecodeCapacity, DEFAULT_HEADER_TABLE_SIZE);\n     }", "fixed": "      *  (which is dangerous).\n      * @param initialHuffmanDecodeCapacity Size of an intermediate buffer used during huffman decode.\n      */\n    public HpackDecoder(long maxHeaderListSize, int initialHuffmanDecodeCapacity) {\n         this(maxHeaderListSize, initialHuffmanDecodeCapacity, DEFAULT_HEADER_TABLE_SIZE);\n     }", "sourceBeforeFix": "0", "sourceAfterFix": "1"}
{"fixCommitSHA1": "d33c0ebf8f8f52fb6fb82d615cec50a10627d267", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t\t\n\t\tprivate String port = \"5000\";\n \t\t@Override\n \t\tprotected void applyToCrshShellConfig(Properties config) {\n \t\t\tif (this.enabled) {\n\t\t\t\tconfig.put(\"crash.telnet.port\", this.port);\n \t\t\t}\n \t\t}", "fixed": " \t\t\n\t\tprivate Integer port = 5000;\n \t\t@Override\n \t\tprotected void applyToCrshShellConfig(Properties config) {\n \t\t\tif (this.enabled) {\n\t\t\t\tconfig.put(\"crash.telnet.port\", String.valueOf(this.port));\n \t\t\t}\n \t\t}", "sourceBeforeFix": "/**   * Telnet port.  */ private String port=\"5000\"; ", "sourceAfterFix": "/**   * Telnet port.  */ private Integer port=5000; "}
{"fixCommitSHA1": "5d6b0ad639f597e0245d7b4591f383f4f12c23d7", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "                     invocation.nodeEngine, invocation.serviceName, isStillRunningOperation,\n                     invocation.getTarget(), 0, 0, IS_EXECUTING_CALL_TIMEOUT, callback, true);\n            invocation.logger.warning(\"Asking if operation execution has been started: \" + invocation);\n             inv.invoke();\n         }\n     }", "fixed": "                     invocation.nodeEngine, invocation.serviceName, isStillRunningOperation,\n                     invocation.getTarget(), 0, 0, IS_EXECUTING_CALL_TIMEOUT, callback, true);\n            invocation.logger.finest(\"Asking if operation execution has been started: \" + invocation);\n             inv.invoke();\n         }\n     }", "sourceBeforeFix": "invocation.logger.warning(\"Asking if operation execution has been started: \" + invocation)", "sourceAfterFix": "invocation.logger.finest(\"Asking if operation execution has been started: \" + invocation)"}
{"fixCommitSHA1": "849b3ba2b1282a89d8cf60a10891ea11a9e16bb4", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Wrong Function Name", "problem": "             Response resp = f.get(3, TimeUnit.SECONDS);\n             assertNotNull(resp);\n             assertEquals(resp.getStatusCode(), HttpServletResponse.SC_OK);\n            assertEquals(resp.getHeader(\"target\"), target);\ntarget = \"http:\n             f = client.prepareGet(target).execute();", "fixed": "             Response resp = f.get(3, TimeUnit.SECONDS);\n             assertNotNull(resp);\n             assertEquals(resp.getStatusCode(), HttpServletResponse.SC_OK);\n            assertEquals(resp.getHeader(\"target\"), \"/\");\ntarget = \"http:\n             f = client.prepareGet(target).execute();", "sourceBeforeFix": "r.getUri().toString()", "sourceAfterFix": "r.getUri().getPath()"}
{"fixCommitSHA1": "55a4b30e72ad36e69499aa5db9b25f63ea7884ac", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "         result.expectedMessageCount(2);\n         MockEndpoint error = getMockEndpoint(\"mock:error\");\n        error.expectedMessageCount(2);\n         MockEndpoint kaboom = getMockEndpoint(\"mock:kaboom\");", "fixed": "         result.expectedMessageCount(2);\n         MockEndpoint error = getMockEndpoint(\"mock:error\");\n        error.expectedMinimumMessageCount(2);\n         MockEndpoint kaboom = getMockEndpoint(\"mock:kaboom\");", "sourceBeforeFix": "error.expectedMessageCount(2)", "sourceAfterFix": "error.expectedMinimumMessageCount(2)"}
{"fixCommitSHA1": "f23520327e887028d3334206f89a7566261d0c83", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "         if (isParallelProcessing()) {\n             executorService.submit(() -> ReactiveHelper.schedule(runnable));\n         } else {\n            ReactiveHelper.scheduleLast(runnable, \"Multicast next step\");\n         }\n     }", "fixed": "         if (isParallelProcessing()) {\n             executorService.submit(() -> ReactiveHelper.schedule(runnable));\n         } else {\n            ReactiveHelper.schedule(runnable, \"Multicast next step\");\n         }\n     }", "sourceBeforeFix": "ReactiveHelper.scheduleLast(runnable,\"Multicast next step\")", "sourceAfterFix": "ReactiveHelper.schedule(runnable,\"Multicast next step\")"}
{"fixCommitSHA1": "0250351629b90d83c15b6dfdd117a04c624118f6", "projectName": "wildfly.wildfly", "bugType": "Change Modifier", "problem": "     private final PersistenceProvider persistenceProvider;\n     private final PersistenceUnitMetadata pu;\n    private EntityManagerFactory entityManagerFactory;\n     public PersistenceUnitService(final PersistenceUnitMetadata pu, final PersistenceProviderAdaptor persistenceProviderAdaptor, final PersistenceProvider persistenceProvider) {\n         this.pu = pu;", "fixed": "     private final PersistenceProvider persistenceProvider;\n     private final PersistenceUnitMetadata pu;\n    private volatile EntityManagerFactory entityManagerFactory;\n     public PersistenceUnitService(final PersistenceUnitMetadata pu, final PersistenceProviderAdaptor persistenceProviderAdaptor, final PersistenceProvider persistenceProvider) {\n         this.pu = pu;", "sourceBeforeFix": "2", "sourceAfterFix": "66"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "0b302cf93edee0e2ab3c9998f380ede8e8ea7727", "projectName": "Atmosphere.atmosphere", "bugType": "Change Identifier Used", "problem": "                 }\n             }\n         }\n        return r;\n     }\n     private void notifyIdleListener() {", "fixed": "                 }\n             }\n         }\n        return this;\n     }\n     private void notifyIdleListener() {", "sourceBeforeFix": "return r; ", "sourceAfterFix": "return this; "}
{"fixCommitSHA1": "5d1ba89bffef2112aee336866c69df3b4e90f884", "projectName": "aws.aws-sdk-java", "bugType": "Change Identifier Used", "problem": "     public Item withJSON(String attrName, String json) {\n         checkInvalidAttribute(attrName, json);\n         attributes.put(attrName,\n            valueConformer.transform(Jackson.fromJsonString(json, Map.class)));\n         return this;\n     }", "fixed": "     public Item withJSON(String attrName, String json) {\n         checkInvalidAttribute(attrName, json);\n         attributes.put(attrName,\n            valueConformer.transform(Jackson.fromJsonString(json, Object.class)));\n         return this;\n     }", "sourceBeforeFix": "Map.class", "sourceAfterFix": "Object.class"}
{"fixCommitSHA1": "3748afae244f81389553e149a023a0b3f81a90ab", "projectName": "Alluxio.alluxio", "bugType": "Same Function More Args", "problem": "     try {\n       mFileSystemMaster.createFile(new AlluxioURI(\"alluxio:/a/f\"), CreateFileOptions.defaults());\n      Assert.fail();\n     } catch (FileAlreadyExistsException e) {\n     }\n   }", "fixed": "     try {\n       mFileSystemMaster.createFile(new AlluxioURI(\"alluxio:/a/f\"), CreateFileOptions.defaults());\n      Assert.fail(\"createDirectory was expected to fail with FileAlreadyExistsException\");\n     } catch (FileAlreadyExistsException e) {\n     }\n   }", "sourceBeforeFix": "Assert.fail()", "sourceAfterFix": "Assert.fail(\"createDirectory was expected to fail with FileAlreadyExistsException\")"}
{"fixCommitSHA1": "75d818e95d12ebd6c5c600bd2c8fb2657e0200da", "projectName": "Atmosphere.atmosphere", "bugType": "Change Identifier Used", "problem": "     @Override\n     public void addToCache(String broadcasterId, AtmosphereResource r, Message e) {\n        long now = System.currentTimeMillis();\n         put(e, now);\n         if (r != null) {", "fixed": "     @Override\n     public void addToCache(String broadcasterId, AtmosphereResource r, Message e) {\n        long now = System.nanoTime();\n         put(e, now);\n         if (r != null) {", "sourceBeforeFix": "System.currentTimeMillis()", "sourceAfterFix": "System.nanoTime()"}
{"fixCommitSHA1": "f135cc4188dd173e8fc175bc5d26cf1a970ac39e", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "                                 response.get(FAILURE_DESCRIPTION).set(\"Operation handler failed to complete\");\n                             }\n                             response.get(OUTCOME).set(FAILED);\n                            response.set(ROLLED_BACK).set(true);\n                             return resultAction = ResultAction.ROLLBACK;", "fixed": "                                 response.get(FAILURE_DESCRIPTION).set(\"Operation handler failed to complete\");\n                             }\n                             response.get(OUTCOME).set(FAILED);\n                            response.get(ROLLED_BACK).set(true);\n                             return resultAction = ResultAction.ROLLBACK;", "sourceBeforeFix": "response.set(ROLLED_BACK)", "sourceAfterFix": "response.get(ROLLED_BACK)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "64dff91895f9df55fe3a07217a333efa4d37d92a", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "         Class<?> c = makeClass(className, proceedOnExceptions);\n         if (c != null) {\n           if (!classes.add(c)) {\n            LOG.error(\"Ignoring duplicate class \" + className);\n           }\n         }\n       }", "fixed": "         Class<?> c = makeClass(className, proceedOnExceptions);\n         if (c != null) {\n           if (!classes.add(c)) {\n            LOG.warn(\"Ignoring duplicate class \" + className);\n           }\n         }\n       }", "sourceBeforeFix": "LOG.error(\"Ignoring duplicate class \" + className)", "sourceAfterFix": "LOG.warn(\"Ignoring duplicate class \" + className)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<Status> getPublicTimeline() throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() +\n                 \"statuses/public_timeline.json\", false));\n     }", "fixed": "      */\n     public ResponseList<Status> getPublicTimeline() throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() +\n                 \"statuses/public_timeline.json\", false));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_to_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_to_me.json\",null,true))"}
{"fixCommitSHA1": "af812cbe0fb290ac7b825b4203f2079b753cb085", "projectName": "square.okhttp", "bugType": "Change Identifier Used", "problem": "   private void reusedConnectionFailsWithPost(TransferKind transferKind, int requestSize)\n       throws Exception {\n    server.enqueue(new MockResponse().setBody(\"A\").setSocketPolicy(SHUTDOWN_INPUT_AT_END));\n     server.enqueue(new MockResponse().setBody(\"B\"));\n     server.enqueue(new MockResponse().setBody(\"C\"));\n     server.play();", "fixed": "   private void reusedConnectionFailsWithPost(TransferKind transferKind, int requestSize)\n       throws Exception {\n    server.enqueue(new MockResponse().setBody(\"A\").setSocketPolicy(DISCONNECT_AT_END));\n     server.enqueue(new MockResponse().setBody(\"B\"));\n     server.enqueue(new MockResponse().setBody(\"C\"));\n     server.play();", "sourceBeforeFix": "new MockResponse().setBody(\"A\").setSocketPolicy(SHUTDOWN_INPUT_AT_END)", "sourceAfterFix": "new MockResponse().setBody(\"A\").setSocketPolicy(DISCONNECT_AT_END)"}
{"fixCommitSHA1": "6b39c5db276e94dd4295254ac279e482703716af", "projectName": "openhab.openhab", "bugType": "Change Identifier Used", "problem": " \t\t\t} else if (e instanceof TimeoutException) {\n \t\t\t\tlogger.debug(\"[{}]: Websocket timeout error\", connection.getHost());\n \t\t\t} else {\n\t\t\t\tlogger.error(\"[{}]: Websocket error: {}\", connection.getHost(), e.getMessage());\n \t\t\t}\n \t\t}", "fixed": " \t\t\t} else if (e instanceof TimeoutException) {\n \t\t\t\tlogger.debug(\"[{}]: Websocket timeout error\", connection.getHost());\n \t\t\t} else {\n\t\t\t\tlogger.debug(\"[{}]: Websocket error: {}\", connection.getHost(), e.getMessage());\n \t\t\t}\n \t\t}", "sourceBeforeFix": "logger.error(\"Error connecting to Plex\",e)", "sourceAfterFix": "logger.debug(\"Error connecting to Plex\",e)"}
{"fixCommitSHA1": "a295b91c37f681199a83fdb963344c19e0d015c0", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "     protected void handleQOffer(String[] args) {\n         long timeout = 0;\n         if (args.length > 2) {\n            timeout = Long.valueOf(args[2]);\n         }\n         try {\n             boolean offered = getQueue().offer(args[1], timeout, TimeUnit.SECONDS);", "fixed": "     protected void handleQOffer(String[] args) {\n         long timeout = 0;\n         if (args.length > 2) {\n            timeout = Long.parseLong(args[2]);\n         }\n         try {\n             boolean offered = getQueue().offer(args[1], timeout, TimeUnit.SECONDS);", "sourceBeforeFix": "Long.valueOf(args[2])", "sourceAfterFix": "Long.parseLong(args[2])"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface GoogleMailEndpointBuilder\n             extends\n                 GoogleMailEndpointConsumerBuilder, GoogleMailEndpointProducerBuilder {\n         default AdvancedGoogleMailEndpointBuilder advanced() {", "fixed": "     \n    public interface GoogleMailEndpointBuilder\n             extends\n                 GoogleMailEndpointConsumerBuilder, GoogleMailEndpointProducerBuilder {\n         default AdvancedGoogleMailEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "f60a9cfe8b1b27d5ea25095bdfc690001da9f4d6", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "     @Override\n     public int hashCode() {\n        return Objects.hash(filePattern, checkPattern, moduleId, linesCSV, columnsCSV);\n     }\n     @Override", "fixed": "     @Override\n     public int hashCode() {\n        return Objects.hash(filePattern, checkPattern, moduleId, linesCsv, columnsCsv);\n     }\n     @Override", "sourceBeforeFix": "new CSVFilter(columns)", "sourceAfterFix": "new CsvFilter(columns)"}
{"fixCommitSHA1": "add3d66f29ca8b24efae3399ea84dd74bcac6266", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "/*\n  * Licensed to the Apache Software Foundation (ASF) under one or more\n  * contributor license agreements.  See the NOTICE file distributed with\n  * this work for additional information regarding copyright ownership.", "fixed": "/**\n  * Licensed to the Apache Software Foundation (ASF) under one or more\n  * contributor license agreements.  See the NOTICE file distributed with\n  * this work for additional information regarding copyright ownership.", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "9771ba62390a56363b20e52f12a8b9b34c51da62", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "     public void testBurstySampling() throws Exception {\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedMessageCount(2);\n         mock.setResultWaitTime(3000);\n         List<Exchange> sentExchanges = new ArrayList<Exchange>();", "fixed": "     public void testBurstySampling() throws Exception {\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedMinimumMessageCount(2);\n         mock.setResultWaitTime(3000);\n         List<Exchange> sentExchanges = new ArrayList<Exchange>();", "sourceBeforeFix": "mock.expectedMessageCount(10)", "sourceAfterFix": "mock.expectedMinimumMessageCount(10)"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         if (isStatisticsEnabled()) {\n             if (isPutSucceed) {\n                 statistics.increaseCachePuts(1);\n                statistics.addPutTimeNano(System.nanoTime() - start);\n             }\n             if (getValue) {\n                 if (oldValueNull) {", "fixed": "         if (isStatisticsEnabled()) {\n             if (isPutSucceed) {\n                 statistics.increaseCachePuts(1);\n                statistics.addPutTimeNanos(System.nanoTime() - start);\n             }\n             if (getValue) {\n                 if (oldValueNull) {", "sourceBeforeFix": "statistics.addRemoveTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addRemoveTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "29f03bf398ae0dcaf4a2ce26a243332192c05443", "projectName": "alibaba.canal", "bugType": "Change Numeric Literal", "problem": "             this.rawLength = rawEntry.size();\n         } else {\n             this.entry = entry;\n            this.rawLength = entry.getHeader().getEventLength() * 3;\n         }\n     }", "fixed": "             this.rawLength = rawEntry.size();\n         } else {\n             this.entry = entry;\n            this.rawLength = entry.getHeader().getEventLength() * 6;\n         }\n     }", "sourceBeforeFix": "entry.getHeader().getEventLength() * 3", "sourceAfterFix": "entry.getHeader().getEventLength() * 6"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  private final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \t@Test\n \tpublic void testMultipleActionsPredicatesOptions_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {console.log($ctx.toStringTree(null, this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");", "fixed": " \t@Test\n \tpublic void testMultipleActionsPredicatesOptions_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(245);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {console.log($ctx.toStringTree(null, this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");", "sourceBeforeFix": "new StringBuilder(639)", "sourceAfterFix": "new StringBuilder(638)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "fixed": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2fv(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2fv(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "sourceBeforeFix": "GL20.glUniformMatrix4(location,transpose,toFloatBuffer(value,offset,count << 4))", "sourceAfterFix": "GL20.glUniformMatrix4fv(location,transpose,toFloatBuffer(value,offset,count << 4))"}
{"fixCommitSHA1": "2921e7bf0d74a65fdcc71d3ce3053037d14e4d44", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "     protected void handleQOffer(String[] args) {\n         long timeout = 0;\n         if (args.length > 2) {\n            timeout = Long.valueOf(args[2]);\n         }\n         try {\n             boolean offered = getQueue().offer(args[1], timeout, TimeUnit.SECONDS);", "fixed": "     protected void handleQOffer(String[] args) {\n         long timeout = 0;\n         if (args.length > 2) {\n            timeout = Long.parseLong(args[2]);\n         }\n         try {\n             boolean offered = getQueue().offer(args[1], timeout, TimeUnit.SECONDS);", "sourceBeforeFix": "Long.valueOf(args[2])", "sourceAfterFix": "Long.parseLong(args[2])"}
{"fixCommitSHA1": "e2119d33293008fcc876f5fcd58ede2993eb24d6", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnBean(JavaMailSenderImpl.class)\n\t@ConditionalOnEnablednHealthIndicator(\"mail\")\n \tpublic static class MailHealthIndicatorConfiguration\n \t\t\textends\n \t\t\tCompositeHealthIndicatorConfiguration<MailHealthIndicator, JavaMailSenderImpl> {", "fixed": " \t@Configuration\n \t@ConditionalOnBean(JavaMailSenderImpl.class)\n\t@ConditionalOnEnabledHealthIndicator(\"mail\")\n \tpublic static class MailHealthIndicatorConfiguration\n \t\t\textends\n \t\t\tCompositeHealthIndicatorConfiguration<MailHealthIndicator, JavaMailSenderImpl> {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"mail\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"mail\")"}
{"fixCommitSHA1": "546f336e25b26d072f96e2cda139b885858ed5b0", "projectName": "checkstyle.checkstyle", "bugType": "Wrong Function Name", "problem": "                 if (!currentConfigHash.equals(cachedConfigHash)) {\n                     details.clear();\n                    details.put(CONFIG_HASH_KEY, currentConfigHash);\n                 }\n             }\n             finally {", "fixed": "                 if (!currentConfigHash.equals(cachedConfigHash)) {\n                     details.clear();\n                    details.setProperty(CONFIG_HASH_KEY, currentConfigHash);\n                 }\n             }\n             finally {", "sourceBeforeFix": "details.put(CONFIG_HASH_KEY,currentConfigHash)", "sourceAfterFix": "details.setProperty(CONFIG_HASH_KEY,currentConfigHash)"}
{"fixCommitSHA1": "38eb6222bddaf49c3c9ae73ddef0cfe4ff5efa48", "projectName": "alibaba.dubbo", "bugType": "Change Numeric Literal", "problem": "     @Test\n     public void test_Decode_Return_Request_Event_String() throws IOException {\n        byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, (byte) 0xff, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n         String event = Request.READONLY_EVENT;\n         byte[] request = getRequestBytes(event, header);", "fixed": "     @Test\n     public void test_Decode_Return_Request_Event_String() throws IOException {\n        byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, (byte) 0xe2, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n         String event = Request.READONLY_EVENT;\n         byte[] request = getRequestBytes(event, header);", "sourceBeforeFix": "(byte)0xdf", "sourceAfterFix": "(byte)0xe2"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "55ed50c4975cf694828d46ee9ca32ce72a9ef913", "projectName": "clojure.clojure", "bugType": "Wrong Function Name", "problem": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 8:\r\n\t\t\treturn invoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "fixed": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 8:\r\n\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "sourceBeforeFix": "invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())", "sourceAfterFix": "doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e0aff862bb608004841da3487d94aecb45964e17", "projectName": "Alluxio.alluxio", "bugType": "Change Numeric Literal", "problem": "       }\n     }\n     long takenTimeMs = System.currentTimeMillis() - startTimeMs;\n    double result = 1000L * FILES_BYTES / takenTimeMs / 1024 / 1024;\n     LOG.info(result + \" Mb/sec. \" + RESULT_PREFIX + \"Entire \" + msg + \" Test : \" + \" Took \"\n         + takenTimeMs + \" ms. Current System Time: \" + System.currentTimeMillis());", "fixed": "       }\n     }\n     long takenTimeMs = System.currentTimeMillis() - startTimeMs;\n    double result = 1000.0 * FILES_BYTES / takenTimeMs / 1024 / 1024;\n     LOG.info(result + \" Mb/sec. \" + RESULT_PREFIX + \"Entire \" + msg + \" Test : \" + \" Took \"\n         + takenTimeMs + \" ms. Current System Time: \" + System.currentTimeMillis());", "sourceBeforeFix": "FILES_BYTES * 1000L", "sourceAfterFix": "FILES_BYTES * 1000.0"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface KubernetesPodsEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedKubernetesPodsEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface KubernetesPodsEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedKubernetesPodsEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "eba20b3dcc401fb4c873afc5948cc92fbcb00097", "projectName": "clojure.clojure", "bugType": "Change Identifier Used", "problem": " \t\t\tint size = s.count();\n \t\t\tfloat[] ret = new float[size];\n \t\t\tfor(int i = 0; i < size && s != null; i++, s = s.rest())\n\t\t\t\tret[i] = ((Number) s.first()).intValue();\n \t\t\treturn ret;\n \t\t\t}\n \t}", "fixed": " \t\t\tint size = s.count();\n \t\t\tfloat[] ret = new float[size];\n \t\t\tfor(int i = 0; i < size && s != null; i++, s = s.rest())\n\t\t\t\tret[i] = ((Number) s.first()).floatValue();\n \t\t\treturn ret;\n \t\t\t}\n \t}", "sourceBeforeFix": "((Number)s.first()).intValue()", "sourceAfterFix": "((Number)s.first()).floatValue()"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedPgEventEndpointBuilder\n             extends\n                 AdvancedPgEventEndpointConsumerBuilder, AdvancedPgEventEndpointProducerBuilder {\n         default PgEventEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedPgEventEndpointBuilder\n             extends\n                 AdvancedPgEventEndpointConsumerBuilder, AdvancedPgEventEndpointProducerBuilder {\n         default PgEventEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "9771ba62390a56363b20e52f12a8b9b34c51da62", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "     public void testSamplingUsingmessageFrequencyViaDSL() throws Exception {\n         long totalMessages = 50;\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedMessageCount(10);\n         mock.setResultWaitTime(100);\n         for (int i = 0; i < totalMessages; i++) {", "fixed": "     public void testSamplingUsingmessageFrequencyViaDSL() throws Exception {\n         long totalMessages = 50;\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedMinimumMessageCount(10);\n         mock.setResultWaitTime(100);\n         for (int i = 0; i < totalMessages; i++) {", "sourceBeforeFix": "mock.expectedMessageCount(10)", "sourceAfterFix": "mock.expectedMinimumMessageCount(10)"}
{"fixCommitSHA1": "8abfa48f2eb5edaf3f5a2cc2350e4e3c232f4152", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "          */\n         private static final long serialVersionUID = -1021880396046355863L;\n        public ReloadAction() {\n             super(\"Reload Java File\");\n             putValue(Action.MNEMONIC_KEY, KeyEvent.VK_R);\n         }", "fixed": "          */\n         private static final long serialVersionUID = -1021880396046355863L;\n        ReloadAction() {\n             super(\"Reload Java File\");\n             putValue(Action.MNEMONIC_KEY, KeyEvent.VK_R);\n         }", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "b1c51f175484ddbac853d12e5b31c3aa6ca10bff", "projectName": "square.javapoet", "bugType": "Change Modifier", "problem": "  *\n  * @author Jesse Wilson\n  */\npublic final class JavaWriter implements Closeable {\n   private static final Pattern TYPE_PATTERN = Pattern.compile(\"(?:[\\\\w$]+\\\\.)*([\\\\w$]+)\");\n   private static final String INDENT = \"  \";", "fixed": "  *\n  * @author Jesse Wilson\n  */\nfinal class JavaWriter implements Closeable {\n   private static final Pattern TYPE_PATTERN = Pattern.compile(\"(?:[\\\\w$]+\\\\.)*([\\\\w$]+)\");\n   private static final String INDENT = \"  \";", "sourceBeforeFix": "17", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "d222fc981c938bd3543ee61f22422d20efcdcd94", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         String uri = getScpUri() + \"?username=admin&password=admin&knownHostsFile=\" + getKnownHostsFile();\n         template.sendBodyAndHeader(uri, \"Farewell World\", Exchange.FILE_NAME, \"mysub/mysubsub/farewell.txt\");\n        Thread.sleep(500);\n         File file = new File(getScpPath() + \"/mysub/mysubsub/farewell.txt\");\n         assertFileExists(file.getAbsolutePath());", "fixed": "         String uri = getScpUri() + \"?username=admin&password=admin&knownHostsFile=\" + getKnownHostsFile();\n         template.sendBodyAndHeader(uri, \"Farewell World\", Exchange.FILE_NAME, \"mysub/mysubsub/farewell.txt\");\n        Thread.sleep(800);\n         File file = new File(getScpPath() + \"/mysub/mysubsub/farewell.txt\");\n         assertFileExists(file.getAbsolutePath());", "sourceBeforeFix": "Thread.sleep(500)", "sourceAfterFix": "Thread.sleep(800)"}
{"fixCommitSHA1": "ad687b722b4d0c3461fdb7c45206257145484d8a", "projectName": "Alluxio.alluxio", "bugType": "Wrong Function Name", "problem": "       URIStatus uriStatus = fs.getStatus(uri);\n       Permission perm = new Permission(uriStatus.getOwner(), uriStatus.getGroup(),\n           (short) uriStatus.getMode());\n      OutputStream out = closer.register(ufs.create(dstPath.getPath(),\n           new CreateOptions().setPermission(perm)));\n       ret = IOUtils.copyLarge(in, out);\n     } catch (Exception e) {", "fixed": "       URIStatus uriStatus = fs.getStatus(uri);\n       Permission perm = new Permission(uriStatus.getOwner(), uriStatus.getGroup(),\n           (short) uriStatus.getMode());\n      OutputStream out = closer.register(ufs.create(dstPath.toString(),\n           new CreateOptions().setPermission(perm)));\n       ret = IOUtils.copyLarge(in, out);\n     } catch (Exception e) {", "sourceBeforeFix": "dstPath.getPath()", "sourceAfterFix": "dstPath.toString()"}
{"fixCommitSHA1": "1d5647b92215f0ceabced59275225ad829061663", "projectName": "spring-projects.spring-boot", "bugType": "Change Modifier", "problem": " \t}\n \t@Test\n\tpublic void testHealth() throws Exception {\nString url = \"http:\n \t\tSystem.out.println(url);\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);", "fixed": " \t}\n \t@Test\n\tvoid testHealth() throws Exception {\nString url = \"http:\n \t\tSystem.out.println(url);\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": " import org.jboss.logging.Messages;\n /**\n * This module is using message IDs in the range 10900-10999. This file is using the subset 10975-10999 for domain\n* controller non-logger messages. See http:\n  * JBAS message id blocks.\n  * <p/>", "fixed": " import org.jboss.logging.Messages;\n /**\n * This module is using message IDs in the range 10800-10899. This file is using the subset 10830-10899 for domain\n* controller non-logger messages. See http:\n  * JBAS message id blocks.\n  * <p/>", "sourceBeforeFix": "id=15861", "sourceAfterFix": "id=10861"}
{"fixCommitSHA1": "3ec97c1bb9c55bded42db23e7b2d3e614659f7df", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t\t\tmetrics.addAll(getStatistics(\"integration.handler.\" + name + \".duration\",\n \t\t\t\t\texporter.getHandlerDuration(name)));\n \t\t}\n\t\tmetrics.add(new Metric<Long>(\"integration.activeHandlerCount\", exporter\n\t\t\t\t.getActiveHandlerCountLong()));\n \t\tmetrics.add(new Metric<Integer>(\"integration.handlerCount\", exporter\n \t\t\t\t.getHandlerCount()));\n \t\tmetrics.add(new Metric<Integer>(\"integration.channelCount\", exporter", "fixed": " \t\t\tmetrics.addAll(getStatistics(\"integration.handler.\" + name + \".duration\",\n \t\t\t\t\texporter.getHandlerDuration(name)));\n \t\t}\n\t\tmetrics.add(new Metric<Integer>(\"integration.activeHandlerCount\", exporter\n\t\t\t\t.getActiveHandlerCount()));\n \t\tmetrics.add(new Metric<Integer>(\"integration.handlerCount\", exporter\n \t\t\t\t.getHandlerCount()));\n \t\tmetrics.add(new Metric<Integer>(\"integration.channelCount\", exporter", "sourceBeforeFix": "Metric<Integer>", "sourceAfterFix": "Metric<Long>"}
{"fixCommitSHA1": "b101a203b2cc36ec2252945a5f89e1936d318247", "projectName": "Alluxio.alluxio", "bugType": "Change Numeric Literal", "problem": "   public static final String TEST_GROUP_NAME = \"group1\";\n   private static PermissionStatus sPermissionStatus =\n      new PermissionStatus(TEST_USER_NAME, TEST_GROUP_NAME, (short) 0755);\n   @Rule\n   public ExpectedException mThrown = ExpectedException.none();", "fixed": "   public static final String TEST_GROUP_NAME = \"group1\";\n   private static PermissionStatus sPermissionStatus =\n      new PermissionStatus(TEST_USER_NAME, TEST_GROUP_NAME, (short) 0777);\n   @Rule\n   public ExpectedException mThrown = ExpectedException.none();", "sourceBeforeFix": "(short)0755", "sourceAfterFix": "(short)0777"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedLdapEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default LdapEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedLdapEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default LdapEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 15866, value = \"%s is null\")\n     IllegalArgumentException nullVar(String name);\n     /**", "fixed": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 10866, value = \"%s is null\")\n     IllegalArgumentException nullVar(String name);\n     /**", "sourceBeforeFix": "id=15869", "sourceAfterFix": "id=10869"}
{"fixCommitSHA1": "f467d695be2ae4ee7d5c2978191e1415aef37a9e", "projectName": "netty.netty", "bugType": "Change Boolean Literal", "problem": "* @param keyFile a PKCS\n      */\n     public static SslContextBuilder forServer(File keyCertChainFile, File keyFile) {\n        return new SslContextBuilder(false).keyManager(keyCertChainFile, keyFile);\n     }\n     /**", "fixed": "* @param keyFile a PKCS\n      */\n     public static SslContextBuilder forServer(File keyCertChainFile, File keyFile) {\n        return new SslContextBuilder(true).keyManager(keyCertChainFile, keyFile);\n     }\n     /**", "sourceBeforeFix": "new SslContextBuilder(false)", "sourceAfterFix": "new SslContextBuilder(true)"}
{"fixCommitSHA1": "f134246ed9ef17b49dfed0367b1c1e9f575745d9", "projectName": "openhab.openhab", "bugType": "Change Numeric Literal", "problem": "         \r\n         String[] properties = bindingConfig.split(\" \");\r\n        if (properties.length > 3) {\r\n             logger.error(\"Wrong number of arguments (\" + properties.length + \") in configuration string '\"\r\n                     + bindingConfig + \"'\");\r\n             throw new BindingConfigParseException(\"Wrong number of agruments (\" + properties.length\r", "fixed": "         \r\n         String[] properties = bindingConfig.split(\" \");\r\n        if (properties.length > 4) {\r\n             logger.error(\"Wrong number of arguments (\" + properties.length + \") in configuration string '\"\r\n                     + bindingConfig + \"'\");\r\n             throw new BindingConfigParseException(\"Wrong number of agruments (\" + properties.length\r", "sourceBeforeFix": "properties.length > 3", "sourceAfterFix": "properties.length > 4"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<Status> getPublicTimeline(long sinceID) throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() +\n                 \"statuses/public_timeline.json\", null, new Paging((long) sinceID).asPostParameterList(Paging.S)\n                 , false));\n     }", "fixed": "      */\n     public ResponseList<Status> getPublicTimeline(long sinceID) throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() +\n                 \"statuses/public_timeline.json\", null, new Paging((long) sinceID).asPostParameterList(Paging.S)\n                 , false));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\",true))"}
{"fixCommitSHA1": "eb71c8999ff29f7dc3fe8dcdba81084f7f6a5fac", "projectName": "NanoHttpd.nanohttpd", "bugType": "Same Function More Args", "problem": "                     while (line != null && line.trim().length() > 0) {\n                         int p = line.indexOf(':');\n                         if (p >= 0)\n                            headers.put(line.substring(0, p).trim().toLowerCase(), line.substring(p + 1).trim());\n                         line = in.readLine();\n                     }\n                 }", "fixed": "                     while (line != null && line.trim().length() > 0) {\n                         int p = line.indexOf(':');\n                         if (p >= 0)\n                            headers.put(line.substring(0, p).trim().toLowerCase(Locale.US), line.substring(p + 1).trim());\n                         line = in.readLine();\n                     }\n                 }", "sourceBeforeFix": "mpline.substring(0,p).trim().toLowerCase()", "sourceAfterFix": "mpline.substring(0,p).trim().toLowerCase(Locale.US)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform3(location, v);\r\n \t}\r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform3(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r", "fixed": " \t}\r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform3iv(location, v);\r\n \t}\r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform3iv(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r", "sourceBeforeFix": "GL20.glUniform1(location,v)", "sourceAfterFix": "GL20.glUniform1fv(location,v)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "fixed": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "sourceBeforeFix": "GL20.glUniform2(location,v)", "sourceAfterFix": "GL20.glUniform2fv(location,v)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedKinesisEndpointBuilder\n             extends\n                 AdvancedKinesisEndpointConsumerBuilder, AdvancedKinesisEndpointProducerBuilder {\n         default KinesisEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedKinesisEndpointBuilder\n             extends\n                 AdvancedKinesisEndpointConsumerBuilder, AdvancedKinesisEndpointProducerBuilder {\n         default KinesisEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 15866, value = \"%s is null\")\n     IllegalArgumentException nullVar(String name);\n     /**", "fixed": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 10866, value = \"%s is null\")\n     IllegalArgumentException nullVar(String name);\n     /**", "sourceBeforeFix": "id=15846", "sourceAfterFix": "id=10846"}
{"fixCommitSHA1": "175d89d7652a572df375f43c0fe18259453312cc", "projectName": "aws.aws-sdk-java", "bugType": "Same Function More Args", "problem": "                             .replaceAll(\"\\\\\\\\\", \"/\");\n                     ObjectMetadata metadata = new ObjectMetadata();\n                    ObjectTagging objectTagging = new ObjectTagging();", "fixed": "                             .replaceAll(\"\\\\\\\\\", \"/\");\n                     ObjectMetadata metadata = new ObjectMetadata();\n                    ObjectTagging objectTagging = new ObjectTagging(new ArrayList<Tag>());", "sourceBeforeFix": "new ObjectTagging()", "sourceAfterFix": "new ObjectTagging(new ArrayList<Tag>())"}
{"fixCommitSHA1": "b282b8181d18ddfd3ba30089e65114696995462f", "projectName": "alibaba.druid", "bugType": "Change Identifier Used", "problem": "                     mbeanServer.registerMBean(instance, objectName);\r\n                 }\r\n             } catch (Exception ex) {\r\n                getLog().error(\"register druid-driver mbean error\", ex);\r\n             }\r\n             return true;\r", "fixed": "                     mbeanServer.registerMBean(instance, objectName);\r\n                 }\r\n             } catch (Exception ex) {\r\n                getLog().warn(\"register druid-driver mbean error\", ex);\r\n             }\r\n             return true;\r", "sourceBeforeFix": "getLog().error(\"register druid-driver mbean error\",ex)", "sourceAfterFix": "getLog().warn(\"register druid-driver mbean error\",ex)"}
{"fixCommitSHA1": "6e4e6d32757138712bcba38d7ab1ed8ae97cdcb5", "projectName": "apache.hive", "bugType": "Wrong Function Name", "problem": "         for(int i = 0; i < fields.size(); ++i) {\n           StructField left = other.get(i);\n           StructField right = fields.get(i);\n          if (!(left.getFieldName().equals(right.getFieldName()) &&\n                 left.getFieldObjectInspector().equals\n                     (right.getFieldObjectInspector()))) {\n             return false;", "fixed": "         for(int i = 0; i < fields.size(); ++i) {\n           StructField left = other.get(i);\n           StructField right = fields.get(i);\n          if (!(left.getFieldName().equalsIgnoreCase(right.getFieldName()) &&\n                 left.getFieldObjectInspector().equals\n                     (right.getFieldObjectInspector()))) {\n             return false;", "sourceBeforeFix": "left.getFieldName().equals(right.getFieldName())", "sourceAfterFix": "left.getFieldName().equalsIgnoreCase(right.getFieldName())"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15865, value = \"Invalid content declaration\")\n     String invalidContentDeclaration();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10865, value = \"Invalid content declaration\")\n     String invalidContentDeclaration();\n     /**", "sourceBeforeFix": "id=15853", "sourceAfterFix": "id=10853"}
{"fixCommitSHA1": "71775a876d1b049c7dfc49ffd35eff0d3f066691", "projectName": "perwendel.spark", "bugType": "Change Modifier", "problem": "      *\n      * @param folder the location\n      */\n    public static void configureStaticResources(String folder) {\n         Assert.notNull(folder, \"'folder' must not be null\");\n         if (!staticResourcesSet) {", "fixed": "      *\n      * @param folder the location\n      */\n    public synchronized static void configureStaticResources(String folder) {\n         Assert.notNull(folder, \"'folder' must not be null\");\n         if (!staticResourcesSet) {", "sourceBeforeFix": "9", "sourceAfterFix": "41"}
{"fixCommitSHA1": "4a6e698536006e6ea9b0680756d9390b96ba278b", "projectName": "gephi.gephi", "bugType": "Less Specific If", "problem": "         if (streamTokenizer.ttype == ']' || streamTokenizer.ttype == StreamTokenizer.TT_EOF) {\n             return;\n        } else if (streamTokenizer.ttype == StreamTokenizer.TT_WORD) {\n             if (streamTokenizer.sval.equalsIgnoreCase(\"label\")) {\n                 streamTokenizer.nextToken();\n                 if (streamTokenizer.ttype == '=') {", "fixed": "         if (streamTokenizer.ttype == ']' || streamTokenizer.ttype == StreamTokenizer.TT_EOF) {\n             return;\n        } else if (streamTokenizer.ttype == StreamTokenizer.TT_WORD || streamTokenizer.ttype == '\"') {\n             if (streamTokenizer.sval.equalsIgnoreCase(\"label\")) {\n                 streamTokenizer.nextToken();\n                 if (streamTokenizer.ttype == '=') {", "sourceBeforeFix": "streamTokenizer.ttype == StreamTokenizer.TT_WORD", "sourceAfterFix": "streamTokenizer.ttype == StreamTokenizer.TT_WORD || streamTokenizer.ttype == '\"'"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_kr_1() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub1445\uc6d46\uc77c\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_kr_1() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub1445\uc6d46\uc77c\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "43b2fa49ca351c05c453c8cd0eec32ce6277c830", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t\treturn style;\r\n \t}\r\n\tpublic void setText (String text) {\r\n \t\tif (text == null) throw new IllegalArgumentException(\"text cannot be null.\");\r\n \t\tif (text.equals(this.text)) return;\r\n \t\tthis.text = text;\r", "fixed": " \t\treturn style;\r\n \t}\r\n\tpublic void setText (CharSequence text) {\r\n \t\tif (text == null) throw new IllegalArgumentException(\"text cannot be null.\");\r\n \t\tif (text.equals(this.text)) return;\r\n \t\tthis.text = text;\r", "sourceBeforeFix": "String text", "sourceAfterFix": "CharSequence text"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should return default value if property name does not exist\n \t * @should not fail with null default value\n \t */\n\tpublic String getGlobalProperty(String propertyName, String defaultValue) throws APIException;\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>", "fixed": " \t * @should return default value if property name does not exist\n \t * @should not fail with null default value\n \t */\n\tpublic String getGlobalProperty(String propertyName, String defaultValue);\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "a8513817db3153d638e818e9a27b0e2e1eed3bdc", "projectName": "wildfly.wildfly", "bugType": "Change Caller in Function Call", "problem": "             beanMethodMap.put(op.getIDLName(), new SkeletonStrategy(method));\n             final OperationAnalysis setop = remoteAttrs[i].getMutatorAnalysis();\n             if (setop != null) {\n                logger.debug(\"    \" + op.getJavaName() + \"\\n                \" + op.getIDLName());\n                 final Method realSetmethod = translateMethod(deploymentReflectionIndex, setop);\n                beanMethodMap.put(op.getIDLName(), new SkeletonStrategy(realSetmethod));\n             }\n         }", "fixed": "             beanMethodMap.put(op.getIDLName(), new SkeletonStrategy(method));\n             final OperationAnalysis setop = remoteAttrs[i].getMutatorAnalysis();\n             if (setop != null) {\n                logger.debug(\"    \" + setop.getJavaName() + \"\\n                \" + setop.getIDLName());\n                 final Method realSetmethod = translateMethod(deploymentReflectionIndex, setop);\n                beanMethodMap.put(setop.getIDLName(), new SkeletonStrategy(realSetmethod));\n             }\n         }", "sourceBeforeFix": "op.getJavaName()", "sourceAfterFix": "setop.getJavaName()"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<DirectMessage> getDirectMessages(Paging paging) throws TwitterException {\n        return DirectMessage.constructDirectMessages(get(getBaseURL()\n                 + \"direct_messages.json\", null, paging.asPostParameterList(), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<DirectMessage> getDirectMessages(Paging paging) throws TwitterException {\n        return DirectMessage.createDirectMessageList(get(getBaseURL()\n                 + \"direct_messages.json\", null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweets_of_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweets_of_me.json\",null,true))"}
{"fixCommitSHA1": "6ec426667bbf19be4fca84eec48e03152e2cfffe", "projectName": "joelittlejohn.jsonschema2pojo", "bugType": "Change Identifier Used", "problem": "         });\n         assertThat(args.didExit(), is(false));\n        assertThat(args.getSource().next().getFile(), is(\"/home/source\"));\n         assertThat(args.getTargetDirectory(), is(theFile(\"/home/target\")));\n         assertThat(args.getTargetPackage(), is(nullValue()));\n         assertThat(args.isGenerateBuilders(), is(false));", "fixed": "         });\n         assertThat(args.didExit(), is(false));\n        assertThat(args.getSource().next().getFile(), endsWith(\"/home/source\"));\n         assertThat(args.getTargetDirectory(), is(theFile(\"/home/target\")));\n         assertThat(args.getTargetPackage(), is(nullValue()));\n         assertThat(args.isGenerateBuilders(), is(false));", "sourceBeforeFix": "is(\"/home/source\")", "sourceAfterFix": "endsWith(\"/home/source\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "d2b19965df52e66385a2d7146887a44cea50330a", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "     @Override\n     public void process(Node externs, Node root) {\n      logger.info(name);\n       startPass(name);\n       processInternal(externs, root);\n       endPass(externs, root);", "fixed": "     @Override\n     public void process(Node externs, Node root) {\n      logger.fine(name);\n       startPass(name);\n       processInternal(externs, root);\n       endPass(externs, root);", "sourceBeforeFix": "logger.info(name)", "sourceAfterFix": "logger.fine(name)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "d8d9e5711a908603f73f92872b127fe4d7ab4a15", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "  */\n public class ManagedProducerRouteAddRemoveRegisterAlwaysTest extends ManagementTestSupport {\n    private int services = 8;\n     @Override\n     protected CamelContext createCamelContext() throws Exception {", "fixed": "  */\n public class ManagedProducerRouteAddRemoveRegisterAlwaysTest extends ManagementTestSupport {\n    private int services = 9;\n     @Override\n     protected CamelContext createCamelContext() throws Exception {", "sourceBeforeFix": "services=8", "sourceAfterFix": "services=9"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n*  @see java.util.Comparator\n \t */\n\tpublic int compare(DataInputView firstSource, DataInputView secondSource) throws IOException;", "fixed": " \t * \n*  @see java.util.Comparator\n \t */\n\tpublic abstract int compare(DataInputView firstSource, DataInputView secondSource) throws IOException;", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fcea9dfeb6b2e12cb04602baac67b3a1c3cb58c9", "projectName": "wildfly.wildfly", "bugType": "Same Function More Args", "problem": "     SimpleAttributeDefinition ENCODING = SimpleAttributeDefinitionBuilder.create(\"encoding\", ModelType.STRING, true).build();\n    SimpleAttributeDefinition FILE = SimpleAttributeDefinitionBuilder.create(\"file\", ModelType.OBJECT, true).\n             setCorrector(FileCorrector.INSTANCE).\n             setValidator(new FileValidator()).\n             build();", "fixed": "     SimpleAttributeDefinition ENCODING = SimpleAttributeDefinitionBuilder.create(\"encoding\", ModelType.STRING, true).build();\n    SimpleAttributeDefinition FILE = SimpleAttributeDefinitionBuilder.create(\"file\", ModelType.OBJECT, false).\n             setCorrector(FileCorrector.INSTANCE).\n             setValidator(new FileValidator()).\n             build();", "sourceBeforeFix": "SimpleAttributeDefinitionBuilder.create(\"max-level\",ModelType.STRING)", "sourceAfterFix": "SimpleAttributeDefinitionBuilder.create(\"max-level\",ModelType.STRING,true)"}
{"fixCommitSHA1": "f5d49ee1ec8af12ff786e421e2fa3b3ea74c42e7", "projectName": "gephi.gephi", "bugType": "Change Numeric Literal", "problem": "                     float b = Float.parseFloat(reader.getAttributeValue(null, \"b\"));\n                     float alpha = Float.parseFloat(reader.getAttributeValue(null, \"a\"));\n                     if(r < 0 || g < 0 || b < 0){\n                         r = g = b = 0;\n                        alpha = 1;\n                     }\n                     edge.setR(r);", "fixed": "                     float b = Float.parseFloat(reader.getAttributeValue(null, \"b\"));\n                     float alpha = Float.parseFloat(reader.getAttributeValue(null, \"a\"));\n                     if(r < 0 || g < 0 || b < 0){\n                         r = g = b = 0;\n                        alpha = 0;\n                     }\n                     edge.setR(r);", "sourceBeforeFix": "alpha=1", "sourceAfterFix": "alpha=0"}
{"fixCommitSHA1": "88ab48a5a260605f05a102b94d70583c82afc632", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "             }\n             JavaClass enumClass = enumClasses.get(enumClassName);\n             if (enumClass == null) {\n                enumClass = javaClass.addNestedType().setPublic().setStatic(true)\n                                 .setName(enumClassName).setEnum(true);\n                 enumClass.getJavaDoc().setText(\"Proxy enum for <code>\" + type + \"</code> enum.\");\n                 enumClasses.put(enumClassName, enumClass);", "fixed": "             }\n             JavaClass enumClass = enumClasses.get(enumClassName);\n             if (enumClass == null) {\n                enumClass = javaClass.addNestedType().setPackagePrivate().setStatic(true)\n                                 .setName(enumClassName).setEnum(true);\n                 enumClass.getJavaDoc().setText(\"Proxy enum for <code>\" + type + \"</code> enum.\");\n                 enumClasses.put(enumClassName, enumClass);", "sourceBeforeFix": "javaClass.addNestedType().setPublic()", "sourceAfterFix": "javaClass.addNestedType().setPackagePrivate()"}
{"fixCommitSHA1": "af233c9c353322adf1fa91d5e6ca706b9d9d98b7", "projectName": "dropwizard.dropwizard", "bugType": "Wrong Function Name", "problem": "     @Test\n     public void returnsA404WhenNotFound() throws Exception {\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getServletPath()).thenReturn(\"/tasks/test\");\n         servlet.service(request, response);", "fixed": "     @Test\n     public void returnsA404WhenNotFound() throws Exception {\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getPathInfo()).thenReturn(\"/test\");\n         servlet.service(request, response);", "sourceBeforeFix": "request.getServletPath()", "sourceAfterFix": "request.getPathInfo()"}
{"fixCommitSHA1": "22d5241b5f75631e9cfda82a6912a2555eecb165", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "         }\n         if (!ObjectHelper.isEmpty(configuration.getHost()) && !ObjectHelper.isEmpty(configuration.getPort())) {\n            LOG.info(\"Building gRPC server on \" + configuration.getHost() + \":\" + configuration.getPort());\n             serverBuilder = NettyServerBuilder.forAddress(new InetSocketAddress(configuration.getHost(), configuration.getPort()));\n         } else if (ObjectHelper.isEmpty(configuration.getHost()) && !ObjectHelper.isEmpty(configuration.getPort())) {\n            LOG.info(\"Building gRPC server on <any address>\" + \":\" + configuration.getPort());\n             serverBuilder = NettyServerBuilder.forPort(configuration.getPort());\n         } else {\n             throw new IllegalArgumentException(\"No server start properties (host, port) specified\");", "fixed": "         }\n         if (!ObjectHelper.isEmpty(configuration.getHost()) && !ObjectHelper.isEmpty(configuration.getPort())) {\n            LOG.debug(\"Building gRPC server on \" + configuration.getHost() + \":\" + configuration.getPort());\n             serverBuilder = NettyServerBuilder.forAddress(new InetSocketAddress(configuration.getHost(), configuration.getPort()));\n         } else if (ObjectHelper.isEmpty(configuration.getHost()) && !ObjectHelper.isEmpty(configuration.getPort())) {\n            LOG.debug(\"Building gRPC server on <any address>\" + \":\" + configuration.getPort());\n             serverBuilder = NettyServerBuilder.forPort(configuration.getPort());\n         } else {\n             throw new IllegalArgumentException(\"No server start properties (host, port) specified\");", "sourceBeforeFix": "LOG.info(\"Building gRPC server on \" + configuration.getHost() + \":\"+ configuration.getPort())", "sourceAfterFix": "LOG.debug(\"Building gRPC server on \" + configuration.getHost() + \":\"+ configuration.getPort())"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform1iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform1(location, v);\r\n \t}\r\n \t@Override\r\n \tpublic void glUniform1iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform1(location, toIntBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform2f (int location, float x, float y) {\r", "fixed": " \t}\r\n \tpublic void glUniform1iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform1iv(location, v);\r\n \t}\r\n \t@Override\r\n \tpublic void glUniform1iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform1iv(location, toIntBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform2f (int location, float x, float y) {\r", "sourceBeforeFix": "GL20.glUniform3(location,v)", "sourceAfterFix": "GL20.glUniform3fv(location,v)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public Trends getCurrentTrends(boolean excludeHashTags) throws TwitterException {\n        return Trends.constructTrendsList(get(getSearchBaseURL() + \"trends/current.json\"\n                 + (excludeHashTags ? \"?exclude=hashtags\" : \"\"), false)).get(0);\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public Trends getCurrentTrends(boolean excludeHashTags) throws TwitterException {\n        return Trends.createTrendsList(get(getSearchBaseURL() + \"trends/current.json\"\n                 + (excludeHashTags ? \"?exclude=hashtags\" : \"\"), false)).get(0);\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweets/\" + statusId+ \".json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweets/\" + statusId+ \".json\",true))"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 15831, value = \"The master host controller cannot register slave host controllers as it's current running mode is '%s'\")\n     String adminOnlyModeCannotAcceptSlaves(RunningMode runningMode);\n     /**", "fixed": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 10831, value = \"The master host controller cannot register slave host controllers as it's current running mode is '%s'\")\n     String adminOnlyModeCannotAcceptSlaves(RunningMode runningMode);\n     /**", "sourceBeforeFix": "id=15869", "sourceAfterFix": "id=10869"}
{"fixCommitSHA1": "4665dcf9ab41c3c61cd42aad296ebfe518bfa003", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\n \tpublic void glGenTextures (int n, int[] textures, int offset) {\n\t\tGL.glGenTexturesEXT(n, toBuffer(textures, offset), 0);\n \t}\n \tpublic void glGetIntegerv (int pname, int[] params, int offset) {", "fixed": " \t}\n \tpublic void glGenTextures (int n, int[] textures, int offset) {\n\t\tGL.glGenTextures(n, toBuffer(textures, offset), 0);\n \t}\n \tpublic void glGetIntegerv (int pname, int[] params, int offset) {", "sourceBeforeFix": "GL.glGenTexturesEXT(n,toBuffer(textures,offset),0)", "sourceAfterFix": "GL.glGenTextures(n,toBuffer(textures,offset),0)"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Pet.class, responseContainer = \"List\"),\n         @ApiResponse(code = 400, message = \"Invalid tag value\", response = Void.class, responseContainer = \"List\") })\n    List<List<Pet>> findPetsByTags(@QueryParam(\"tags\") @NotNull   @ApiParam(\"Tags to filter by\")  List<String> tags);\n     @GET\n     @Path(\"/{petId}\")", "fixed": "     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Pet.class, responseContainer = \"List\"),\n         @ApiResponse(code = 400, message = \"Invalid tag value\", response = Void.class, responseContainer = \"List\") })\n    List<Pet> findPetsByTags(@QueryParam(\"tags\") @NotNull   @ApiParam(\"Tags to filter by\")  List<String> tags) throws Exception;\n     @GET\n     @Path(\"/{petId}\")", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15870, value = \"Unknown server group %s\")\n     IllegalStateException unknownServerGroup(String serverGroup);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10870, value = \"Unknown server group %s\")\n     IllegalStateException unknownServerGroup(String serverGroup);\n     /**", "sourceBeforeFix": "id=15831", "sourceAfterFix": "id=10831"}
{"fixCommitSHA1": "1d5647b92215f0ceabced59275225ad829061663", "projectName": "spring-projects.spring-boot", "bugType": "Change Modifier", "problem": " \t}\n \t@Test\n\tpublic void testHealth() throws Exception {\nString url = \"http:\n \t\tSystem.out.println(url);\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);", "fixed": " \t}\n \t@Test\n\tvoid testHealth() throws Exception {\nString url = \"http:\n \t\tSystem.out.println(url);\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n     */\n     public ResponseList<DirectMessage> getDirectMessages() throws TwitterException {\n        return DirectMessage.constructDirectMessages(get(getBaseURL() + \"direct_messages.json\", true));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n     */\n     public ResponseList<DirectMessage> getDirectMessages() throws TwitterException {\n        return DirectMessage.createDirectMessageList(get(getBaseURL() + \"direct_messages.json\", true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweets_of_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweets_of_me.json\",null,true))"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 15832, value = \"There is already a registered host named '%s'\")\n     String slaveAlreadyRegistered(String slaveName);\n     /**", "fixed": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 10832, value = \"There is already a registered host named '%s'\")\n     String slaveAlreadyRegistered(String slaveName);\n     /**", "sourceBeforeFix": "id=15834", "sourceAfterFix": "id=10834"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e2119d33293008fcc876f5fcd58ede2993eb24d6", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnBean(ConnectionFactory.class)\n\t@ConditionalOnEnablednHealthIndicator(\"jms\")\n \tpublic static class JmsHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<JmsHealthIndicator, ConnectionFactory> {", "fixed": " \t@Configuration\n \t@ConditionalOnBean(ConnectionFactory.class)\n\t@ConditionalOnEnabledHealthIndicator(\"jms\")\n \tpublic static class JmsHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<JmsHealthIndicator, ConnectionFactory> {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"jms\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"jms\")"}
{"fixCommitSHA1": "031f769fa3c610748b48bc105b4518c880161d0a", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t*/\n \tpublic Vector2 getLocalAnchorB () {\n\t\tjniGetLocalAnchorA(addr, tmp);\n \t\tlocalAnchorB.set(tmp[0], tmp[1]);\n \t\treturn localAnchorB;\n \t}", "fixed": " \t*/\n \tpublic Vector2 getLocalAnchorB () {\n\t\tjniGetLocalAnchorB(addr, tmp);\n \t\tlocalAnchorB.set(tmp[0], tmp[1]);\n \t\treturn localAnchorB;\n \t}", "sourceBeforeFix": "jniGetLocalAnchorA(addr,tmp)", "sourceAfterFix": "jniGetLocalAxisA(addr,tmp)"}
{"fixCommitSHA1": "fc80cf0f323b8f45dd7e80f5a4cc814ae6d691a7", "projectName": "druid-io.druid", "bugType": "Same Function More Args", "problem": "   public void testMoveNoop() throws Exception\n   {\n     MockStorageService mockS3Client = new MockStorageService();\n    S3DataSegmentMover mover = new S3DataSegmentMover(mockS3Client);\n     mockS3Client.putObject(\"archive\", new S3Object(\"targetBaseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/index.zip\"));\n     mockS3Client.putObject(\"archive\", new S3Object(\"targetBaseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/descriptor.json\"));", "fixed": "   public void testMoveNoop() throws Exception\n   {\n     MockStorageService mockS3Client = new MockStorageService();\n    S3DataSegmentMover mover = new S3DataSegmentMover(mockS3Client, new S3DataSegmentPusherConfig());\n     mockS3Client.putObject(\"archive\", new S3Object(\"targetBaseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/index.zip\"));\n     mockS3Client.putObject(\"archive\", new S3Object(\"targetBaseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/descriptor.json\"));", "sourceBeforeFix": "new S3DataSegmentMover(mockS3Client)", "sourceAfterFix": "new S3DataSegmentMover(mockS3Client,new S3DataSegmentPusherConfig())"}
{"fixCommitSHA1": "14f5e2ed141de99df33f22f1d7222c0232332452", "projectName": "wildfly.wildfly", "bugType": "More Specific If", "problem": "                 }\n             }\n         }\n        if (securityDomain != null)\n             description.setSecurityDomain(securityDomain);\n        else if (globalSecurityDomain != null)\n             description.setSecurityDomain(globalSecurityDomain);\n     }", "fixed": "                 }\n             }\n         }\n        if (securityDomain != null && ! securityDomain.isEmpty())\n             description.setSecurityDomain(securityDomain);\n        else if (globalSecurityDomain != null && !globalSecurityDomain.isEmpty())\n             description.setSecurityDomain(globalSecurityDomain);\n     }", "sourceBeforeFix": "globalSecurityDomain != null", "sourceAfterFix": "globalSecurityDomain != null && !globalSecurityDomain.isEmpty()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "5c2293d770a717694d0cedf4ebf9c9b2223571d0", "projectName": "alibaba.dubbo", "bugType": "Same Function Less Args", "problem": "         }\r\n         StaticDirectory<IHelloService> dic = new StaticDirectory<IHelloService>(durl, invokers, null);\r\n        dic.buildRouterChain(invokers);\r\n         AbstractClusterInvoker<IHelloService> cluster = new AbstractClusterInvoker(dic) {\r\n             @Override\r\n             protected Result doInvoke(Invocation invocation, List invokers, LoadBalance loadbalance)\r", "fixed": "         }\r\n         StaticDirectory<IHelloService> dic = new StaticDirectory<IHelloService>(durl, invokers, null);\r\n        dic.buildRouterChain();\r\n         AbstractClusterInvoker<IHelloService> cluster = new AbstractClusterInvoker(dic) {\r\n             @Override\r\n             protected Result doInvoke(Invocation invocation, List invokers, LoadBalance loadbalance)\r", "sourceBeforeFix": "dic.buildRouterChain(invokers)", "sourceAfterFix": "dic.buildRouterChain()"}
{"fixCommitSHA1": "5cdfcd29a2d89e658f5f37aad3deb6130eeb47af", "projectName": "Atmosphere.atmosphere", "bugType": "Wrong Function Name", "problem": "     @Override\n     public WebSocket write(String s) throws IOException {\n        if (isOpen()) webSocketConnection.getRemote().sendString(s);\n         return this;\n     }\n     @Override\n     public WebSocket write(byte[] b, int offset, int length) throws IOException {\n        if (isOpen()) webSocketConnection.getRemote().sendBytes(ByteBuffer.wrap(b, offset, length));\n         return this;\n     }", "fixed": "     @Override\n     public WebSocket write(String s) throws IOException {\n        if (isOpen()) webSocketConnection.getRemote().sendStringByFuture(s);\n         return this;\n     }\n     @Override\n     public WebSocket write(byte[] b, int offset, int length) throws IOException {\n        if (isOpen()) webSocketConnection.getRemote().sendBytesByFuture(ByteBuffer.wrap(b, offset, length));\n         return this;\n     }", "sourceBeforeFix": "webSocketConnection.getRemote().sendString(s)", "sourceAfterFix": "webSocketConnection.getRemote().sendStringByFuture(s)"}
{"fixCommitSHA1": "4f49fc2f6f1761e84ee8c6572b14e1d9adc16abc", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": "  * \n  * @author warneke\n  */\npublic final class Buffer implements ReadableByteChannel, WritableByteChannel {\n \t/**\n \t * The concrete buffer implementation to which all method calls on", "fixed": "  * \n  * @author warneke\n  */\npublic class Buffer implements ReadableByteChannel, WritableByteChannel {\n \t/**\n \t * The concrete buffer implementation to which all method calls on", "sourceBeforeFix": "17", "sourceAfterFix": "1"}
{"fixCommitSHA1": "e70960913c07d921dea470857f9bcdb67f38959f", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "      * @param format a <code>String</code> value.\n      * @throws ConversionException if unable to create Pattern object.\n      */\n    public void setCommentFormat(String format) {\n         commentRegexp = Utils.createPattern(format);\n     }", "fixed": "      * @param format a <code>String</code> value.\n      * @throws ConversionException if unable to create Pattern object.\n      */\n    public final void setCommentFormat(String format) {\n         commentRegexp = Utils.createPattern(format);\n     }", "sourceBeforeFix": "1", "sourceAfterFix": "17"}
{"fixCommitSHA1": "1aaffaf8df78d17e71243df6d94d687893802bb5", "projectName": "Alluxio.alluxio", "bugType": "Wrong Function Name", "problem": "     result.setFileId(fileInfo.getFileId());\n     result.setName(fileInfo.getName());\n     result.setPath(fileInfo.getPath());\n    result.setUfsPath(fileInfo.getPath());\n     result.setLength(fileInfo.getLength());\n     result.setBlockSizeBytes(fileInfo.getBlockSizeBytes());\n     result.setCreationTimeMs(fileInfo.getCreationTimeMs());", "fixed": "     result.setFileId(fileInfo.getFileId());\n     result.setName(fileInfo.getName());\n     result.setPath(fileInfo.getPath());\n    result.setUfsPath(fileInfo.getUfsPath());\n     result.setLength(fileInfo.getLength());\n     result.setBlockSizeBytes(fileInfo.getBlockSizeBytes());\n     result.setCreationTimeMs(fileInfo.getCreationTimeMs());", "sourceBeforeFix": "fileInfo.getPath()", "sourceAfterFix": "fileInfo.getUfsPath()"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_cn_3() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e7405\u67086\u65e5\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_cn_3() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e7405\u67086\u65e5\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "103f204ada7363675fcd4a1e2e0a41030a15a9ae", "projectName": "junit-team.junit", "bugType": "Same Function Swap Args", "problem": "         @Test\n         public void duration() throws InterruptedException {\n             Thread.sleep(300L);\n            assertEquals(fStopwatch.runtime(MILLISECONDS), 300d, 100d);\n             Thread.sleep(500L);\n            assertEquals(fStopwatch.runtime(MILLISECONDS), 800d, 250d);\n         }\n     }", "fixed": "         @Test\n         public void duration() throws InterruptedException {\n             Thread.sleep(300L);\n            assertEquals(300d, fStopwatch.runtime(MILLISECONDS), 100d);\n             Thread.sleep(500L);\n            assertEquals(800d, fStopwatch.runtime(MILLISECONDS), 250d);\n         }\n     }", "sourceBeforeFix": "assertEquals(fStopwatch.runtime(MILLISECONDS),800d,250d)", "sourceAfterFix": "assertEquals(800d,fStopwatch.runtime(MILLISECONDS),250d)"}
{"fixCommitSHA1": "73b39f0f9d0221f0e932ea27f9ba779d6f5bb71b", "projectName": "Alluxio.alluxio", "bugType": "Same Function Less Args", "problem": "                       NetworkAddressUtils.getLocalHostName(ClientContext.getConf()));\n         } catch (IOException ioe) {\n           LOG.warn(\"Failed to write to TachyonStore stream, block \" + getCurrentBlockId()\n              + \" will not be in TachyonStorage.\", ioe);\n           mShouldCacheCurrentBlock = false;\n         }\n       } else {", "fixed": "                       NetworkAddressUtils.getLocalHostName(ClientContext.getConf()));\n         } catch (IOException ioe) {\n           LOG.warn(\"Failed to write to TachyonStore stream, block \" + getCurrentBlockId()\n              + \" will not be in TachyonStorage.\");\n           mShouldCacheCurrentBlock = false;\n         }\n       } else {", "sourceBeforeFix": "LOG.warn(\"Promotion of block \" + blockId + \" failed.\",ioe)", "sourceAfterFix": "LOG.warn(\"Promotion of block \" + blockId + \" failed.\")"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15857, value = \"Only 1 piece of content is currently supported (AS7-431)\")\n     String as7431();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10857, value = \"Only 1 piece of content is currently supported (AS7-431)\")\n     String as7431();\n     /**", "sourceBeforeFix": "id=15844", "sourceAfterFix": "id=10844"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "55fb8b3008f3a0514ad28982f884d5d20fba9fe2", "projectName": "apache.camel", "bugType": "Same Function Less Args", "problem": "             if (LOG.isDebugEnabled()) {\n                 LOG.debug(\"Deleting an element with key \" + key + \" into the Cache\");\n             }\n            cache.remove(key, true);\n         } else if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_GET)) {\n             if (LOG.isDebugEnabled()) {\n                 LOG.debug(\"Quering an element with key \" + key + \" from the Cache\");", "fixed": "             if (LOG.isDebugEnabled()) {\n                 LOG.debug(\"Deleting an element with key \" + key + \" into the Cache\");\n             }\n            cache.remove(key);\n         } else if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_GET)) {\n             if (LOG.isDebugEnabled()) {\n                 LOG.debug(\"Quering an element with key \" + key + \" from the Cache\");", "sourceBeforeFix": "cache.remove(key,true)", "sourceAfterFix": "cache.remove(key)"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should return null if no implementation id is defined yet\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)\n\tpublic ImplementationId getImplementationId() throws APIException;\n \t/**\n \t * Set the given <code>implementationId</code> as this implementation's unique id", "fixed": " \t * @should return null if no implementation id is defined yet\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)\n\tpublic ImplementationId getImplementationId();\n \t/**\n \t * Set the given <code>implementationId</code> as this implementation's unique id", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "3757a700a89638e5747d966bdaa8266b62c974c8", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "  */\n @GwtCompatible(emulated = true)\n public class BaseEncodingTest extends TestCase {\n  public void assertEquals(byte[] expected, byte[] actual) {\n     assertEquals(expected.length, actual.length);\n     for (int i = 0; i < expected.length; i++) {\n       assertEquals(expected[i], actual[i]);", "fixed": "  */\n @GwtCompatible(emulated = true)\n public class BaseEncodingTest extends TestCase {\n  public static void assertEquals(byte[] expected, byte[] actual) {\n     assertEquals(expected.length, actual.length);\n     for (int i = 0; i < expected.length; i++) {\n       assertEquals(expected[i], actual[i]);", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  private final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "         if (isStatisticsEnabled()) {\n             if (isPutSucceed) {\n                 statistics.increaseCachePuts(1);\n                statistics.addPutTimeNano(System.nanoTime() - start);\n             }\n             if (getValue) {\n                 if (oldValueNull) {", "fixed": "         if (isStatisticsEnabled()) {\n             if (isPutSucceed) {\n                 statistics.increaseCachePuts(1);\n                statistics.addPutTimeNanos(System.nanoTime() - start);\n             }\n             if (getValue) {\n                 if (oldValueNull) {", "sourceBeforeFix": "statistics.addGetTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addGetTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface ScpEndpointBuilder\n            extends\n                EndpointProducerBuilder {\n         default AdvancedScpEndpointBuilder advanced() {\n             return (AdvancedScpEndpointBuilder) this;\n         }", "fixed": "     \n    public interface ScpEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedScpEndpointBuilder advanced() {\n             return (AdvancedScpEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "51271a02806489a2e2b5539475eb2131fd29b77d", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "         }\n         if ((verifyGetterAndSetterUpdates || verifyNoNewGettersOrSetters) && i == 0) {\n          GatherGettersAndSetterProperties.update(compiler, externsRoot, mainRoot);\n         }\n         recentChange.reset();", "fixed": "         }\n         if ((verifyGetterAndSetterUpdates || verifyNoNewGettersOrSetters) && i == 0) {\n          GatherGetterAndSetterProperties.update(compiler, externsRoot, mainRoot);\n         }\n         recentChange.reset();", "sourceBeforeFix": "GatherGettersAndSetterProperties.gather(compiler,externsRoot)", "sourceAfterFix": "GatherGetterAndSetterProperties.gather(compiler,externsRoot)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  private final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "ab72c059c55e01140f4c844e32686b1bc1daf591", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "         Assert.assertEquals(t, is.skip(t));\n         Assert.assertEquals(2 * t + 1, is.read());\n         is.close();\n        Assert.assertFalse(mFileSystem.getStatus(uri).getInMemoryPercentage() == 100);\n       }\n     }\n   }", "fixed": "         Assert.assertEquals(t, is.skip(t));\n         Assert.assertEquals(2 * t + 1, is.read());\n         is.close();\n        Assert.assertTrue(mFileSystem.getStatus(uri).getInMemoryPercentage() == 100);\n       }\n     }\n   }", "sourceBeforeFix": "Assert.assertFalse(mFileSystem.getStatus(uri).getInMemoryPercentage() == 100)", "sourceAfterFix": "Assert.assertTrue(mFileSystem.getStatus(uri).getInMemoryPercentage() == 100)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  private final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n     */\n     public ResponseList<DirectMessage> getDirectMessages() throws TwitterException {\n        return DirectMessage.constructDirectMessages(get(getBaseURL() + \"direct_messages.json\", true));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n     */\n     public ResponseList<DirectMessage> getDirectMessages() throws TwitterException {\n        return DirectMessage.createDirectMessageList(get(getBaseURL() + \"direct_messages.json\", true));\n     }\n     /**", "sourceBeforeFix": "SavedSearch.constructSavedSearches(get(getBaseURL() + \"saved_searches.json\",true))", "sourceAfterFix": "SavedSearch.createSavedSearchList(get(getBaseURL() + \"saved_searches.json\",true))"}
{"fixCommitSHA1": "10821c9f522d7897c0f84eaa2b14af6d90f2d2fe", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \tprivate IntBuffer toIntBuffer (int v[], int offset, int count) {\r\n \t\tensureBufferCapacity(count << 2);\r\n\t\tfloatBuffer.clear();\r\n \t\tcom.badlogic.gdx.utils.BufferUtils.copy(v, count, offset, intBuffer);\r\n \t\treturn intBuffer;\r\n \t}\r", "fixed": " \tprivate IntBuffer toIntBuffer (int v[], int offset, int count) {\r\n \t\tensureBufferCapacity(count << 2);\r\n\t\tintBuffer.clear();\r\n \t\tcom.badlogic.gdx.utils.BufferUtils.copy(v, count, offset, intBuffer);\r\n \t\treturn intBuffer;\r\n \t}\r", "sourceBeforeFix": "floatBuffer.clear()", "sourceAfterFix": "intBuffer.clear()"}
{"fixCommitSHA1": "4665dcf9ab41c3c61cd42aad296ebfe518bfa003", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\n \t\tBuffer pixels) {\n\t\tGL.glTexSubImage2DEXT(target, level, xoffset, yoffset, width, height, format, type, pixels, Memory.getPosition(pixels));\n \t}\n \tpublic void glViewport (int x, int y, int width, int height) {", "fixed": " \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\n \t\tBuffer pixels) {\n\t\tGL.glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels, Memory.getPosition(pixels));\n \t}\n \tpublic void glViewport (int x, int y, int width, int height) {", "sourceBeforeFix": "GL.glCopyTexSubImage2DEXT(target,level,xoffset,yoffset,x,y,width,height)", "sourceAfterFix": "GL.glCopyTexSubImage2D(target,level,xoffset,yoffset,x,y,width,height)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "ec5961a27122b228cb8adb634ee183eebcefa98c", "projectName": "apache.hive", "bugType": "Change Identifier Used", "problem": "     final String command,\n     final LinkedHashMap<String,ArrayList<String>> pathToAliases,\n     final LinkedHashMap<String,partitionDesc> pathToPartitionInfo,\n    final HashMap<String,Operator<? extends Serializable>> aliasToWork,\n     final tableDesc keyDesc,\n     List<tableDesc> tagToValueDesc,\n     final Operator<?> reducer,", "fixed": "     final String command,\n     final LinkedHashMap<String,ArrayList<String>> pathToAliases,\n     final LinkedHashMap<String,partitionDesc> pathToPartitionInfo,\n    final LinkedHashMap<String,Operator<? extends Serializable>> aliasToWork,\n     final tableDesc keyDesc,\n     List<tableDesc> tagToValueDesc,\n     final Operator<?> reducer,", "sourceBeforeFix": "HashMap<String,Operator<? extends Serializable>>", "sourceAfterFix": "LinkedHashMap<String,Operator<? extends Serializable>>"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedJSR356WebSocketEndpointBuilder\n             extends\n                 AdvancedJSR356WebSocketEndpointConsumerBuilder, AdvancedJSR356WebSocketEndpointProducerBuilder {\n         default JSR356WebSocketEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedJSR356WebSocketEndpointBuilder\n             extends\n                 AdvancedJSR356WebSocketEndpointConsumerBuilder, AdvancedJSR356WebSocketEndpointProducerBuilder {\n         default JSR356WebSocketEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15836, value = SERVER_GROUP + \" expects one and only one child: %s\")\n     String serverGroupExpectsSingleChild(String rolloutPlan);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10836, value = SERVER_GROUP + \" expects one and only one child: %s\")\n     String serverGroupExpectsSingleChild(String rolloutPlan);\n     /**", "sourceBeforeFix": "id=15843", "sourceAfterFix": "id=10843"}
{"fixCommitSHA1": "dcf3833b3be2415c729d6699692c83d0475e3d23", "projectName": "xetorthio.jedis", "bugType": "Change Identifier Used", "problem": "     return new JedisClusterCommand<Set<byte[]>>(connectionHandler, maxRedirections) {\n       @Override\n       public Set<byte[]> execute(Jedis connection) {\n        return connection.zrangeByLex(key, max, min);\n       }\n     }.runBinary(key);\n   }", "fixed": "     return new JedisClusterCommand<Set<byte[]>>(connectionHandler, maxRedirections) {\n       @Override\n       public Set<byte[]> execute(Jedis connection) {\n        return connection.zrevrangeByLex(key, max, min);\n       }\n     }.runBinary(key);\n   }", "sourceBeforeFix": "connection.zrangeByLex(key,max,min)", "sourceAfterFix": "connection.zrevrangeByLex(key,max,min)"}
{"fixCommitSHA1": "5a15366e9871141aecf4408342479a07c2a24b57", "projectName": "NLPchina.ansj_seg", "bugType": "Change Modifier", "problem": " import org.apache.lucene.analysis.tokenattributes.OffsetAttribute;\n import org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute;\npublic class AnsjTokenizer extends Tokenizer {\n \tprivate final CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);", "fixed": " import org.apache.lucene.analysis.tokenattributes.OffsetAttribute;\n import org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute;\npublic final class AnsjTokenizer extends Tokenizer {\n \tprivate final CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);", "sourceBeforeFix": "1", "sourceAfterFix": "17"}
{"fixCommitSHA1": "1abf653a0774560f3da680505689e05978d75e07", "projectName": "mybatis.mybatis-3", "bugType": "More Specific If", "problem": "     this.password = password;\n   }\n  public boolean isAutoCommit() {\n     return autoCommit;\n   }\n  public void setAutoCommit(boolean autoCommit) {\n     this.autoCommit = autoCommit;\n   }", "fixed": "     this.password = password;\n   }\n  public Boolean isAutoCommit() {\n     return autoCommit;\n   }\n  public void setAutoCommit(Boolean autoCommit) {\n     this.autoCommit = autoCommit;\n   }", "sourceBeforeFix": "autoCommit != conn.getAutoCommit()", "sourceAfterFix": "autoCommit != null && autoCommit != conn.getAutoCommit()"}
{"fixCommitSHA1": "5d12b156e1150162ba3def263b2da14793304b4e", "projectName": "facebook.presto", "bugType": "Change Identifier Used", "problem": "         );\n        MaterializedResult expected = MaterializedResult.resultBuilder(taskContext.getSession(), concat(probeTypes, buildPages.getTypes()))\n                 .row(\"a\", \"a\")\n                 .row(\"a\", \"a\")\n                 .row(\"b\", \"b\")", "fixed": "         );\n        MaterializedResult expected = MaterializedResult.resultBuilder(taskContext.getSession(), concat(probeTypes, buildPages.getTypesWithoutHash()))\n                 .row(\"a\", \"a\")\n                 .row(\"a\", \"a\")\n                 .row(\"b\", \"b\")", "sourceBeforeFix": "buildPages.getTypes()", "sourceAfterFix": "buildPages.getTypesWithoutHash()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "6300d45eec61b4b5c86c289ea08a77b0903b1b12", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "     public static enum LaunchType {\n         DOMAIN,\n        STANADALONE,\n         EMBEDDED\n     }", "fixed": "     public static enum LaunchType {\n         DOMAIN,\n        STANDALONE,\n         EMBEDDED\n     }", "sourceBeforeFix": "STANADALONE", "sourceAfterFix": "STANDALONE"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<Status> getPublicTimeline(long sinceID) throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() +\n                 \"statuses/public_timeline.json\", null, new Paging((long) sinceID).asPostParameterList(Paging.S)\n                 , false));\n     }", "fixed": "      */\n     public ResponseList<Status> getPublicTimeline(long sinceID) throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() +\n                 \"statuses/public_timeline.json\", null, new Paging((long) sinceID).asPostParameterList(Paging.S)\n                 , false));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites/\" + id+ \".json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites/\" + id+ \".json\",new PostParameter[0],true))"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "fixed": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2fv(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2fv(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "sourceBeforeFix": "GL11.glTexParameter(target,pname,params)", "sourceAfterFix": "GL11.glTexParameterfv(target,pname,params)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15834, value = \"%s recognizes only %s as children: %s\")\n     String unrecognizedChildren(String parent, String children, String parentSpec);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10834, value = \"%s recognizes only %s as children: %s\")\n     String unrecognizedChildren(String parent, String children, String parentSpec);\n     /**", "sourceBeforeFix": "id=15848", "sourceAfterFix": "id=10848"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n* @see\n \t */\n\tpublic int compareToReference(TypeComparator<T> referencedComparator);\n \t/**\n \t * Compares two records in serialized from. The return value indicates the order of the two in the same way", "fixed": " \t * \n* @see\n \t */\n\tpublic abstract int compareToReference(TypeComparator<T> referencedComparator);\n \t/**\n \t * Compares two records in serialized from. The return value indicates the order of the two in the same way", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "ea98386dfd18da047c877a2320cfdcf15df2ea06", "projectName": "facebook.presto", "bugType": "Change Modifier", "problem": "                 .retInt();\n     }\n    private void generateGetSizeInBytesMethod(ClassDefinition classDefinition, FieldDefinition sizeField)\n     {\n         MethodDefinition method = classDefinition.declareMethod(a(PUBLIC), \"getSizeInBytes\", type(long.class));", "fixed": "                 .retInt();\n     }\n    private static void generateGetSizeInBytesMethod(ClassDefinition classDefinition, FieldDefinition sizeField)\n     {\n         MethodDefinition method = classDefinition.declareMethod(a(PUBLIC), \"getSizeInBytes\", type(long.class));", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "068132f1eabefb1760fec5b53997cd6143995a29", "projectName": "netty.netty", "bugType": "More Specific If", "problem": "     private final class NioSocketChannelUnsafe extends NioByteUnsafe {\n         @Override\n         protected Executor closeExecutor() {\n            if (config().getSoLinger() > 0) {\n                 return GlobalEventExecutor.INSTANCE;\n             }\n             return null;", "fixed": "     private final class NioSocketChannelUnsafe extends NioByteUnsafe {\n         @Override\n         protected Executor closeExecutor() {\n            if (javaChannel().isOpen() && config().getSoLinger() > 0) {\n                 return GlobalEventExecutor.INSTANCE;\n             }\n             return null;", "sourceBeforeFix": "config().getSoLinger() > 0", "sourceAfterFix": "javaChannel().isOpen() && config().getSoLinger() > 0"}
{"fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "projectName": "Alluxio.alluxio", "bugType": "Change Operand ", "problem": "         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n            file = new RandomAccessFile(FOLDER + (mWorkerId + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());", "fixed": "         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n            file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "pId + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "01fec049c0fb6b1c326d802687f3093b502123e0", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": " \t\t\tSchedulerUtil.startup(getRuntimeProperties());\r\n \t\t}\r\n\t\tcatch (Throwable t) {\r\n \t\t\tContext.shutdown();\r\n \t\t\tWebModuleUtil.shutdownModules(servletContext);\r\n \t\t\tthrow new ServletException(t);\r", "fixed": " \t\t\tSchedulerUtil.startup(getRuntimeProperties());\r\n \t\t}\r\n\t\tcatch (Exception t) {\r\n \t\t\tContext.shutdown();\r\n \t\t\tWebModuleUtil.shutdownModules(servletContext);\r\n \t\t\tthrow new ServletException(t);\r", "sourceBeforeFix": "Throwable t", "sourceAfterFix": "Exception t"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15834, value = \"%s recognizes only %s as children: %s\")\n     String unrecognizedChildren(String parent, String children, String parentSpec);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10834, value = \"%s recognizes only %s as children: %s\")\n     String unrecognizedChildren(String parent, String children, String parentSpec);\n     /**", "sourceBeforeFix": "id=15870", "sourceAfterFix": "id=10870"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShader(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "fixed": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShaderiv(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "sourceBeforeFix": "GL11.glTexParameter(target,pname,params)", "sourceAfterFix": "GL11.glTexParameteriv(target,pname,params)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15860, value = \"No deployment with name %s found\")\n     String noDeploymentContentWithName(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10860, value = \"No deployment with name %s found\")\n     String noDeploymentContentWithName(String name);\n     /**", "sourceBeforeFix": "id=15840", "sourceAfterFix": "id=10840"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform1iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform1(location, v);\r\n \t}\r\n \t@Override\r\n \tpublic void glUniform1iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform1(location, toIntBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform2f (int location, float x, float y) {\r", "fixed": " \t}\r\n \tpublic void glUniform1iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform1iv(location, v);\r\n \t}\r\n \t@Override\r\n \tpublic void glUniform1iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform1iv(location, toIntBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform2f (int location, float x, float y) {\r", "sourceBeforeFix": "GL20.glGetShader(shader,pname,params)", "sourceAfterFix": "GL20.glGetShaderiv(shader,pname,params)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform2iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toIntBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform3f (int location, float x, float y, float z) {\r", "fixed": " \t}\r\n \tpublic void glUniform2iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform2iv(location, v);\r\n \t}\r\n \tpublic void glUniform2iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform2iv(location, toIntBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform3f (int location, float x, float y, float z) {\r", "sourceBeforeFix": "GL11.glGetTexParameter(target,pname,params)", "sourceAfterFix": "GL11.glGetTexParameterfv(target,pname,params)"}
{"fixCommitSHA1": "2f5529c622dc1970622f3ba7786def30167f9c01", "projectName": "hazelcast.hazelcast", "bugType": "Change Numeric Literal", "problem": "     @Test\n     public void async_whenOperationTimeout() {\n        int callTimeout = 1000;\n         Config config = new Config().setProperty(OPERATION_CALL_TIMEOUT_MILLIS.getName(), \"\" + callTimeout);\n         TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(2);", "fixed": "     @Test\n     public void async_whenOperationTimeout() {\n        int callTimeout = 5000;\n         Config config = new Config().setProperty(OPERATION_CALL_TIMEOUT_MILLIS.getName(), \"\" + callTimeout);\n         TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(2);", "sourceBeforeFix": "callTimeout=1000", "sourceAfterFix": "callTimeout=5000"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public List<Trends> getDailyTrends(Date date, boolean excludeHashTags) throws TwitterException {\n        return Trends.constructTrendsList(get(getSearchBaseURL()\n                 + \"trends/daily.json?date=\" + toDateStr(date)\n                 + (excludeHashTags ? \"&exclude=hashtags\" : \"\"), false));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public List<Trends> getDailyTrends(Date date, boolean excludeHashTags) throws TwitterException {\n        return Trends.createTrendsList(get(getSearchBaseURL()\n                 + \"trends/daily.json?date=\" + toDateStr(date)\n                 + (excludeHashTags ? \"&exclude=hashtags\" : \"\"), false));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweets_of_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweets_of_me.json\",null,true))"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface ActiveMQEndpointBuilder\n             extends\n                 ActiveMQEndpointConsumerBuilder, ActiveMQEndpointProducerBuilder {\n         default AdvancedActiveMQEndpointBuilder advanced() {", "fixed": "     \n    public interface ActiveMQEndpointBuilder\n             extends\n                 ActiveMQEndpointConsumerBuilder, ActiveMQEndpointProducerBuilder {\n         default AdvancedActiveMQEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "dd80647fbf218880e5f8d72441d080b6c92778fa", "projectName": "libgdx.libgdx", "bugType": "Same Function More Args", "problem": " \t\t\ttry {\r\n \t\t\t\tbytes = input.read(buffer, index, 4096);\r\n \t\t\t} catch (Exception e) {\r\n\t\t\t\tthrow new GdxRuntimeException(\"Failed to read Vorbis.\");\r\n \t\t\t}\r\n \t\t\tif (bytes == 0 && i < 2) {\r\n \t\t\t\tthrow new GdxRuntimeException(\"End of file before finding all Vorbis headers.\");\r", "fixed": " \t\t\ttry {\r\n \t\t\t\tbytes = input.read(buffer, index, 4096);\r\n \t\t\t} catch (Exception e) {\r\n\t\t\t\tthrow new GdxRuntimeException(\"Failed to read Vorbis.\", e);\r\n \t\t\t}\r\n \t\t\tif (bytes == 0 && i < 2) {\r\n \t\t\t\tthrow new GdxRuntimeException(\"End of file before finding all Vorbis headers.\");\r", "sourceBeforeFix": "new GdxRuntimeException(\"Failure reading Vorbis.\")", "sourceAfterFix": "new GdxRuntimeException(\"Failure reading Vorbis.\",e)"}
{"fixCommitSHA1": "4dd18ed5c3188be2cfb14efce62e71ae6f19243a", "projectName": "dropwizard.dropwizard", "bugType": "Wrong Function Name", "problem": "     @SuppressWarnings(\"unchecked\")\n     public void returnsA500OnExceptions() throws Exception {\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getServletPath()).thenReturn(\"/tasks/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.<String>of()));\n         final RuntimeException ex = new RuntimeException(\"whoops\");", "fixed": "     @SuppressWarnings(\"unchecked\")\n     public void returnsA500OnExceptions() throws Exception {\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getPathInfo()).thenReturn(\"/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.<String>of()));\n         final RuntimeException ex = new RuntimeException(\"whoops\");", "sourceBeforeFix": "request.getServletPath()", "sourceAfterFix": "request.getPathInfo()"}
{"fixCommitSHA1": "4baf500fc14016bfc22a339c68a4c05050d14a52", "projectName": "brianfrankcooper.YCSB", "bugType": "Change Identifier Used", "problem": "     public int read(String table, String key, Set<String> fields,\n             HashMap<String, ByteIterator> result) {\n         if (fields == null) {\n            StringByteIteartor.putAllAsByteIterators(result, jedis.hgetAll(key));\n         }\n         else {\n             String[] fieldArray = (String[])fields.toArray(new String[fields.size()]);", "fixed": "     public int read(String table, String key, Set<String> fields,\n             HashMap<String, ByteIterator> result) {\n         if (fields == null) {\n            StringByteIterator.putAllAsByteIterators(result, jedis.hgetAll(key));\n         }\n         else {\n             String[] fieldArray = (String[])fields.toArray(new String[fields.size()]);", "sourceBeforeFix": "StringByteIteartor.putAllAsByteIterators(result,jedis.hgetAll(key))", "sourceAfterFix": "StringByteIterator.putAllAsByteIterators(result,jedis.hgetAll(key))"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface TwilioEndpointBuilder\n             extends\n                 TwilioEndpointConsumerBuilder, TwilioEndpointProducerBuilder {\n         default AdvancedTwilioEndpointBuilder advanced() {", "fixed": "     \n    public interface TwilioEndpointBuilder\n             extends\n                 TwilioEndpointConsumerBuilder, TwilioEndpointProducerBuilder {\n         default AdvancedTwilioEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "6031e948694c50252def3e1df5a65323567e03ed", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "         super.compare(modelA, modelB);\n        assertRemoveSubsystemResources(servicesA);\n    }\n }\n\\ No newline at end of file", "fixed": "         super.compare(modelA, modelB);\n        assertRemoveSubsystemResources(servicesB);\n    }\n }\n\\ No newline at end of file", "sourceBeforeFix": "assertRemoveSubsystemResources(servicesA)", "sourceAfterFix": "assertRemoveSubsystemResources(servicesB)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  private final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15848, value = \"Exception getting result from host %s: %s\")\n     String exceptionAwaitingResultFromHost(String name, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10848, value = \"Exception getting result from host %s: %s\")\n     String exceptionAwaitingResultFromHost(String name, String message);\n     /**", "sourceBeforeFix": "id=15849", "sourceAfterFix": "id=10849"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<Status> getPublicTimeline(long sinceID) throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() +\n                 \"statuses/public_timeline.json\", null, new Paging((long) sinceID).asPostParameterList(Paging.S)\n                 , false));\n     }", "fixed": "      */\n     public ResponseList<Status> getPublicTimeline(long sinceID) throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() +\n                 \"statuses/public_timeline.json\", null, new Paging((long) sinceID).asPostParameterList(Paging.S)\n                 , false));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/public_timeline.json\",false))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/public_timeline.json\",false))"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedMustacheEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default MustacheEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedMustacheEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default MustacheEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface TwilioEndpointBuilder\n             extends\n                 TwilioEndpointConsumerBuilder, TwilioEndpointProducerBuilder {\n         default AdvancedTwilioEndpointBuilder advanced() {", "fixed": "     \n    public interface TwilioEndpointBuilder\n             extends\n                 TwilioEndpointConsumerBuilder, TwilioEndpointProducerBuilder {\n         default AdvancedTwilioEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface FtpEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedFtpEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface FtpEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedFtpEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AtomixQueueEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedAtomixQueueEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface AtomixQueueEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedAtomixQueueEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "8018d1af58330b6d21c858fa5ebfee6a66cd10b3", "projectName": "apache.hadoop", "bugType": "Change Identifier Used", "problem": "           out.println(keyName + \" has been successfully deleted.\");\n           printProviderWritten();\n         } catch (IOException e) {\n          out.println(keyName + \" has not been deleted.\");\n           throw e;\n         }\n       }", "fixed": "           out.println(keyName + \" has been successfully deleted.\");\n           printProviderWritten();\n         } catch (IOException e) {\n          out.println(keyName + \" has not been deleted. \" + e.toString());\n           throw e;\n         }\n       }", "sourceBeforeFix": "e.getMessage()", "sourceAfterFix": "e.toString()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should return all global properties in the database\n \t */\n \t@Authorized(PrivilegeConstants.GET_GLOBAL_PROPERTIES)\n\tpublic List<GlobalProperty> getAllGlobalProperties() throws APIException;\n \t/**\n \t * Save the given list of global properties to the database.", "fixed": " \t * @should return all global properties in the database\n \t */\n \t@Authorized(PrivilegeConstants.GET_GLOBAL_PROPERTIES)\n\tpublic List<GlobalProperty> getAllGlobalProperties();\n \t/**\n \t * Save the given list of global properties to the database.", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "fixed": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2fv(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2fv(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "sourceBeforeFix": "GL20.glUniform3(location,v)", "sourceAfterFix": "GL20.glUniform3fv(location,v)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "bb6f83806ba5d17df32f1b31cbad8c7c47f870c9", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "             String dir = \"target/camel-route-coverage\";\n             String name = className + \"-\" + getTestMethodName() + \".xml\";\n            ManagedCamelContextMBean managedCamelContext = context.getManagedCamelContext();\n             if (managedCamelContext == null) {\n                 log.warn(\"Cannot dump route coverage to file as JMX is not enabled. Override useJmx() method to enable JMX in the unit test classes.\");\n             } else {", "fixed": "             String dir = \"target/camel-route-coverage\";\n             String name = className + \"-\" + getTestMethodName() + \".xml\";\n            ManagedCamelContextMBean managedCamelContext = context != null ? context.getManagedCamelContext() : null;\n             if (managedCamelContext == null) {\n                 log.warn(\"Cannot dump route coverage to file as JMX is not enabled. Override useJmx() method to enable JMX in the unit test classes.\");\n             } else {", "sourceBeforeFix": "watch.stop()", "sourceAfterFix": "watch.taken()"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform3(location, v);\r\n \t}\r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform3(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r", "fixed": " \t}\r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform3iv(location, v);\r\n \t}\r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform3iv(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r", "sourceBeforeFix": "GL20.glUniformMatrix4(location,transpose,toFloatBuffer(value,offset,count << 4))", "sourceAfterFix": "GL20.glUniformMatrix4fv(location,transpose,toFloatBuffer(value,offset,count << 4))"}
{"fixCommitSHA1": "5b13fe70c25812157a1e4432135eb9639e72bc6a", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t\tfinal Sink result = new Sink(\"result.json\").withInputs(join);\n \t\texpectedPlan.setSinks(result);\n\t\tassertEquals(expectedPlan, actualPlan);\n \t}\n }", "fixed": " \t\tfinal Sink result = new Sink(\"result.json\").withInputs(join);\n \t\texpectedPlan.setSinks(result);\n\t\tassertPlanEquals(expectedPlan, actualPlan);\n \t}\n }", "sourceBeforeFix": "assertEquals(expectedPlan,actualPlan)", "sourceAfterFix": "assertPlanEquals(expectedPlan,actualPlan)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      * @param servers the servers that need to restart.\n      */\n     @LogMessage(level = Level.INFO)\n    @Message(id = 15807, value = \"Domain model has changed on re-connect. The following servers will need to be restarted for changes to take affect: %s\")\n     void domainModelChangedOnReConnect(Set<ServerIdentity> servers);\n     /**", "fixed": "      * @param servers the servers that need to restart.\n      */\n     @LogMessage(level = Level.INFO)\n    @Message(id = 10807, value = \"Domain model has changed on re-connect. The following servers will need to be restarted for changes to take affect: %s\")\n     void domainModelChangedOnReConnect(Set<ServerIdentity> servers);\n     /**", "sourceBeforeFix": "id=15805", "sourceAfterFix": "id=10805"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "d222fc981c938bd3543ee61f22422d20efcdcd94", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         String uri = getScpUri() + \"?username=admin&password=admin&knownHostsFile=\" + getKnownHostsFile();\n         template.sendBodyAndHeader(uri, \"Bye World\", Exchange.FILE_NAME, \"mysub/bye.txt\");\n        Thread.sleep(500);\n         File file = new File(getScpPath() + \"/mysub/bye.txt\");\n         assertFileExists(file.getAbsolutePath());", "fixed": "         String uri = getScpUri() + \"?username=admin&password=admin&knownHostsFile=\" + getKnownHostsFile();\n         template.sendBodyAndHeader(uri, \"Bye World\", Exchange.FILE_NAME, \"mysub/bye.txt\");\n        Thread.sleep(800);\n         File file = new File(getScpPath() + \"/mysub/bye.txt\");\n         assertFileExists(file.getAbsolutePath());", "sourceBeforeFix": "Thread.sleep(500)", "sourceAfterFix": "Thread.sleep(800)"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Pet.class, responseContainer = \"List\"),\n         @ApiResponse(code = 400, message = \"Invalid tag value\", response = Void.class, responseContainer = \"List\") })\n    List<List<Pet>> findPetsByTags(@QueryParam(\"tags\") @NotNull   @ApiParam(\"Tags to filter by\")  List<String> tags);\n     @GET\n     @Path(\"/{petId}\")", "fixed": "     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Pet.class, responseContainer = \"List\"),\n         @ApiResponse(code = 400, message = \"Invalid tag value\", response = Void.class, responseContainer = \"List\") })\n    List<Pet> findPetsByTags(@QueryParam(\"tags\") @NotNull   @ApiParam(\"Tags to filter by\")  List<String> tags) throws Exception;\n     @GET\n     @Path(\"/{petId}\")", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetProgramiv (int program, int pname, IntBuffer params) {\r\n\t\tGL20.glGetProgram(program, pname, params);\r\n \t}\r\n \tpublic void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tEXTFramebufferObject.glGetRenderbufferParameterEXT(target, pname, params);\r\n \t}\r\n \tpublic String glGetShaderInfoLog (int shader) {\r", "fixed": " \t}\r\n \tpublic void glGetProgramiv (int program, int pname, IntBuffer params) {\r\n\t\tGL20.glGetProgramiv(program, pname, params);\r\n \t}\r\n \tpublic void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tEXTFramebufferObject.glGetRenderbufferParameterivEXT(target, pname, params);\r\n \t}\r\n \tpublic String glGetShaderInfoLog (int shader) {\r", "sourceBeforeFix": "GL20.glUniform1(location,v)", "sourceAfterFix": "GL20.glUniform1iv(location,v)"}
{"fixCommitSHA1": "c39ce11b105be36238be1cc5b406dd0037c8284c", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "      *\n      * @param resource the resource\n      */\n    public ResourceInternal(T resource) {\n       mResource = resource;\n       mLastAccessTimeMs = mClock.millis();\n     }", "fixed": "      *\n      * @param resource the resource\n      */\n    public ResourceInternal(R resource) {\n       mResource = resource;\n       mLastAccessTimeMs = mClock.millis();\n     }", "sourceBeforeFix": "/**   * The resource.   */ private T mResource; ", "sourceAfterFix": "/**   * The resource.   */ private R mResource; "}
{"fixCommitSHA1": "bda977e8bd87caf71a9df9047167f01b81589bbd", "projectName": "hazelcast.hazelcast", "bugType": "Change Binary Operator", "problem": "     }\n     private Object newOperationTimeoutException(int pollCount, long pollTimeoutMs) {\n        boolean hasResponse = basicInvocation.potentialResponse == null;\n         int backupsExpected = basicInvocation.backupsExpected;\n         int backupsCompleted = basicInvocation.backupsCompleted;", "fixed": "     }\n     private Object newOperationTimeoutException(int pollCount, long pollTimeoutMs) {\n        boolean hasResponse = basicInvocation.potentialResponse != null;\n         int backupsExpected = basicInvocation.backupsExpected;\n         int backupsCompleted = basicInvocation.backupsCompleted;", "sourceBeforeFix": "basicInvocation.potentialResponse == null", "sourceAfterFix": "basicInvocation.potentialResponse != null"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_kr_4() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub14405\uc6d406\uc77c\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_kr_4() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub14405\uc6d406\uc77c\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetsOfMe(Paging paging) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweets_of_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetsOfMe(Paging paging) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweets_of_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites/\" + id+ \".json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites/\" + id+ \".json\",new PostParameter[0],true))"}
{"fixCommitSHA1": "5f66fbd181273bff71207c060123a197664c23e1", "projectName": "thinkaurelius.titan", "bugType": "Change Modifier", "problem": " \t}\n \t@Override\n\tpublic void forceDelete() {\n \t\tstart.removeRelation(this);\n \t\tif (!isUnidirected())\n \t\t\tend.removeRelation(this);", "fixed": " \t}\n \t@Override\n\tpublic synchronized void forceDelete() {\n \t\tstart.removeRelation(this);\n \t\tif (!isUnidirected())\n \t\t\tend.removeRelation(this);", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "2b46aa85e6b2e6cc8738c25f12696ad5b904a6a6", "projectName": "libgdx.libgdx", "bugType": "Change Unary Operator\t", "problem": " \t */\r\n \tpublic static long getUnsafeByteBufferAddress(ByteBuffer buffer) {\r\n \t\tsynchronized(unsafeBuffers) {\r\n\t\t\tif (unsafeBuffers.contains(buffer, true))\r\n \t\t\t\treturn 0;\r\n \t\t}\r\n \t\treturn getByteBufferAddress(buffer);\r", "fixed": " \t */\r\n \tpublic static long getUnsafeByteBufferAddress(ByteBuffer buffer) {\r\n \t\tsynchronized(unsafeBuffers) {\r\n\t\t\tif (!unsafeBuffers.contains(buffer, true))\r\n \t\t\t\treturn 0;\r\n \t\t}\r\n \t\treturn getByteBufferAddress(buffer);\r", "sourceBeforeFix": "unsafeBuffers.contains(buffer,true)", "sourceAfterFix": "!unsafeBuffers.contains(buffer,true)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface SesEndpointBuilder\n            extends\n                EndpointProducerBuilder {\n         default AdvancedSesEndpointBuilder advanced() {\n             return (AdvancedSesEndpointBuilder) this;\n         }", "fixed": "     \n    public interface SesEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedSesEndpointBuilder advanced() {\n             return (AdvancedSesEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface SqlStoredEndpointBuilder\n            extends\n                EndpointProducerBuilder {\n         default AdvancedSqlStoredEndpointBuilder advanced() {\n             return (AdvancedSqlStoredEndpointBuilder) this;\n         }", "fixed": "     \n    public interface SqlStoredEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedSqlStoredEndpointBuilder advanced() {\n             return (AdvancedSqlStoredEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15853, value = \"Unexpected initial path key %s\")\n     IllegalStateException unexpectedInitialPathKey(String key);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10853, value = \"Unexpected initial path key %s\")\n     IllegalStateException unexpectedInitialPathKey(String key);\n     /**", "sourceBeforeFix": "id=15841", "sourceAfterFix": "id=10841"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15838, value = \"Unexplained failure\")\n     String unexplainedFailure();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10838, value = \"Unexplained failure\")\n     String unexplainedFailure();\n     /**", "sourceBeforeFix": "id=15863", "sourceAfterFix": "id=10863"}
{"fixCommitSHA1": "d589551ccf801e17aa74741b64b075db79a5e2a2", "projectName": "gephi.gephi", "bugType": "Change Identifier Used", "problem": "         double xMean = 0, yMean = 0;\n         for (Node n : graph.getNodes()) {\n             xMean += n.getNodeData().x();\n            yMean += n.getNodeData().x();\n         }\n         xMean /= graph.getNodeCount();\n         yMean /= graph.getNodeCount();", "fixed": "         double xMean = 0, yMean = 0;\n         for (Node n : graph.getNodes()) {\n             xMean += n.getNodeData().x();\n            yMean += n.getNodeData().y();\n         }\n         xMean /= graph.getNodeCount();\n         yMean /= graph.getNodeCount();", "sourceBeforeFix": "n.getNodeData().x()", "sourceAfterFix": "n.getNodeData().y()"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface GoogleMailStreamEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default AdvancedGoogleMailStreamEndpointBuilder advanced() {", "fixed": "     \n    public interface GoogleMailStreamEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default AdvancedGoogleMailStreamEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedGoogleCalendarEndpointBuilder\n             extends\n                 AdvancedGoogleCalendarEndpointConsumerBuilder, AdvancedGoogleCalendarEndpointProducerBuilder {\n         default GoogleCalendarEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedGoogleCalendarEndpointBuilder\n             extends\n                 AdvancedGoogleCalendarEndpointConsumerBuilder, AdvancedGoogleCalendarEndpointProducerBuilder {\n         default GoogleCalendarEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface CMEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedCMEndpointBuilder advanced() {\n             return (AdvancedCMEndpointBuilder) this;\n         }", "fixed": "     \n    public interface CMEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedCMEndpointBuilder advanced() {\n             return (AdvancedCMEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "64dff91895f9df55fe3a07217a333efa4d37d92a", "projectName": "apache.hbase", "bugType": "Wrong Function Name", "problem": "           if (!proceedOnExceptions) {\n             throw ioEx;\n           }\n          LOG.error(\"Failed to get next entry from \" + jarFileName + \": \" + ioEx);\n           break;\n         }\n         if (entry == null) {", "fixed": "           if (!proceedOnExceptions) {\n             throw ioEx;\n           }\n          LOG.warn(\"Failed to get next entry from \" + jarFileName + \": \" + ioEx);\n           break;\n         }\n         if (entry == null) {", "sourceBeforeFix": "LOG.error(\"Ignoring duplicate class \" + className)", "sourceAfterFix": "LOG.warn(\"Ignoring duplicate class \" + className)"}
{"fixCommitSHA1": "f9c863f126519ad2cfd7af4cef3eed04e8f87ea3", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"processKey\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;C)Ljava/lang/String;\");\n         } else if (propertyClass == long.class) {\n            mw.visitVarInsn(LLOAD, context.var(\"long\"));\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"processKey\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;J)Ljava/lang/String;\");\n         } else if (propertyClass == float.class) {", "fixed": "             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"processKey\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;C)Ljava/lang/String;\");\n         } else if (propertyClass == long.class) {\n            mw.visitVarInsn(LLOAD, context.var(\"long\", 2));\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"processKey\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;J)Ljava/lang/String;\");\n         } else if (propertyClass == float.class) {", "sourceBeforeFix": "context.var(\"double\")", "sourceAfterFix": "context.var(\"double\",2)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedSdbEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default SdbEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedSdbEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default SdbEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "e2efffc72002968f835a0ea6a70f8e7762752b15", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": " \t\tConceptName anotherConceptName = ConceptNameTest.createMockConceptName(3, Context.getLocale(), null, true);\r\n \t\tanotherConceptName.setName(\"preferred name\");\r\n \t\tnewConcept.addName(anotherConceptName);\r\n\t\tErrors errors = new BindException(concept, \"concept\");\r\n \t\tnew ConceptValidator().validate(newConcept, errors);\r\n \t}\r", "fixed": " \t\tConceptName anotherConceptName = ConceptNameTest.createMockConceptName(3, Context.getLocale(), null, true);\r\n \t\tanotherConceptName.setName(\"preferred name\");\r\n \t\tnewConcept.addName(anotherConceptName);\r\n\t\tErrors errors = new BindException(newConcept, \"concept\");\r\n \t\tnew ConceptValidator().validate(newConcept, errors);\r\n \t}\r", "sourceBeforeFix": "new BindException(concept,\"concept\")", "sourceAfterFix": "new BindException(newConcept,\"concept\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface MQTTEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedMQTTEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface MQTTEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedMQTTEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fb1a1ca0d397301efc3cc702e4836b9bca169251", "projectName": "openmrs.openmrs-core", "bugType": "Wrong Function Name", "problem": " \t\tVector<RelationshipListItem> ret = new Vector<RelationshipListItem>();\r\n \t\tList<Relationship> rels = Context.getPersonService()\r\n\t\t        .getRelationships(Context.getPersonService().getPerson(personId));\r\n \t\tfor (Relationship rel : rels) {\r\n \t\t\tif (!rel.isVoided()\r\n \t\t\t        && (relationshipTypeId == null || rel.getRelationshipType().getRelationshipTypeId().equals(\r", "fixed": " \t\tVector<RelationshipListItem> ret = new Vector<RelationshipListItem>();\r\n \t\tList<Relationship> rels = Context.getPersonService()\r\n\t\t        .getRelationshipsByPerson(Context.getPersonService().getPerson(personId));\r\n \t\tfor (Relationship rel : rels) {\r\n \t\t\tif (!rel.isVoided()\r\n \t\t\t        && (relationshipTypeId == null || rel.getRelationshipType().getRelationshipTypeId().equals(\r", "sourceBeforeFix": "Context.getPersonService().getRelationships(Context.getPersonService().getPerson(personId))", "sourceAfterFix": "Context.getPersonService().getRelationshipsByPerson(Context.getPersonService().getPerson(personId))"}
{"fixCommitSHA1": "0cadcd61468d62a7a2fd1da26c7bac28b6c8c049", "projectName": "Alluxio.alluxio", "bugType": "Change Modifier", "problem": "    *\n    * @param uri the {@link AlluxioURI} for this UFS\n    * @param conf the configuration for Hadoop or GlusterFS\n    */\n   public static GlusterFSUnderFileSystem createInstance(AlluxioURI uri, Map<String, String> conf) {\n     Configuration hadoopConf = prepareConfiguration(uri.toString(), conf);", "fixed": "    *\n    * @param uri the {@link AlluxioURI} for this UFS\n    * @param conf the configuration for Hadoop or GlusterFS\n   * @return a new Gluster FS {@link UnderFileSystem}\n    */\n   public static GlusterFSUnderFileSystem createInstance(AlluxioURI uri, Map<String, String> conf) {\n     Configuration hadoopConf = prepareConfiguration(uri.toString(), conf);", "sourceBeforeFix": "1", "sourceAfterFix": "17"}
{"fixCommitSHA1": "3fd56ecd6cf84e528206a189136ad4f88039b8b2", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "     }\n     for (String child : children) {\n       String childSrcPath = PathUtils.concatPath(src, child);\n      String childDstPath = PathUtils.concatPath(src, child);\n       boolean success;\n       if (isDirectory(childSrcPath)) {", "fixed": "     }\n     for (String child : children) {\n       String childSrcPath = PathUtils.concatPath(src, child);\n      String childDstPath = PathUtils.concatPath(dst, child);\n       boolean success;\n       if (isDirectory(childSrcPath)) {", "sourceBeforeFix": "PathUtils.concatPath(src,child)", "sourceAfterFix": "PathUtils.concatPath(dst,child)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should return all global properties in the database\n \t */\n \t@Authorized(PrivilegeConstants.GET_GLOBAL_PROPERTIES)\n\tpublic List<GlobalProperty> getAllGlobalProperties() throws APIException;\n \t/**\n \t * Save the given list of global properties to the database.", "fixed": " \t * @should return all global properties in the database\n \t */\n \t@Authorized(PrivilegeConstants.GET_GLOBAL_PROPERTIES)\n\tpublic List<GlobalProperty> getAllGlobalProperties();\n \t/**\n \t * Save the given list of global properties to the database.", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "41c8ec7aeae859808a217bd7a561e81be7e3c7ac", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "         postAppend(entry, EnvironmentEdgeManager.currentTime() - start);\n       } catch (Exception e) {\n        LOG.fatal(\"Could not append. Requesting close of wal\", e);\n         requestLogRoll();\n         throw e;\n       }", "fixed": "         postAppend(entry, EnvironmentEdgeManager.currentTime() - start);\n       } catch (Exception e) {\n        LOG.warn(\"Could not append. Requesting close of wal\", e);\n         requestLogRoll();\n         throw e;\n       }", "sourceBeforeFix": "LOG.fatal(\"Could not append. Requesting close of wal\",e)", "sourceAfterFix": "LOG.warn(\"Could not append. Requesting close of wal\",e)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15865, value = \"Invalid content declaration\")\n     String invalidContentDeclaration();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10865, value = \"Invalid content declaration\")\n     String invalidContentDeclaration();\n     /**", "sourceBeforeFix": "id=15865", "sourceAfterFix": "id=10865"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     @ApiOperation(value = \"Logs out current logged in user session\", notes = \"\", tags={ \"user\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Void.class) })\n    void logoutUser();\n     @PUT\n     @Path(\"/{username}\")", "fixed": "     @ApiOperation(value = \"Logs out current logged in user session\", notes = \"\", tags={ \"user\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Void.class) })\n    void logoutUser() throws Exception;\n     @PUT\n     @Path(\"/{username}\")", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleActionsPredicatesOptions_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(239);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");", "fixed": " \tpublic void testMultipleActionsPredicatesOptions_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(238);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");", "sourceBeforeFix": "new StringBuilder(239)", "sourceAfterFix": "new StringBuilder(238)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "5b13fe70c25812157a1e4432135eb9639e72bc6a", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t\tfinal Sink normalizedPersons = new Sink(\"normalizedPersons.json\").withInputs(replace);\n \t\texpectedPlan.setSinks(normalizedPersons);\n\t\tassertEquals(expectedPlan, actualPlan);\n \t}\n }", "fixed": " \t\tfinal Sink normalizedPersons = new Sink(\"normalizedPersons.json\").withInputs(replace);\n \t\texpectedPlan.setSinks(normalizedPersons);\n\t\tassertPlanEquals(expectedPlan, actualPlan);\n \t}\n }", "sourceBeforeFix": "assertEquals(expectedPlan,actualPlan)", "sourceAfterFix": "assertPlanEquals(expectedPlan,actualPlan)"}
{"fixCommitSHA1": "3e70031de5c5d25011ce8363d161e75595a84133", "projectName": "Activiti.Activiti", "bugType": "Wrong Function Name", "problem": "   }\n   public Boolean isBulkInsertable(Class<? extends PersistentObject> persistentObjectClass) {\n  \treturn bulkInsertableMap != null && bulkInsertableMap.get(persistentObjectClass);\n   }", "fixed": "   }\n   public Boolean isBulkInsertable(Class<? extends PersistentObject> persistentObjectClass) {\n  \treturn bulkInsertableMap != null && bulkInsertableMap.containsKey(persistentObjectClass);\n   }", "sourceBeforeFix": "bulkInsertableMap.get(persistentObjectClass)", "sourceAfterFix": "bulkInsertableMap.containsKey(persistentObjectClass)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface DirectVmEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedDirectVmEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface DirectVmEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedDirectVmEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "48295e16fc304221123fc38f9c492d711f05c897", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " /*\n * Copyright 2012-2018 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.", "fixed": " /*\n * Copyright 2012-2019 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.", "sourceBeforeFix": "Assert.notNull(groupId,\"ArtifactId must not be null\")", "sourceAfterFix": "Assert.notNull(artifactId,\"ArtifactId must not be null\")"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedClientEndpointBuilder\n             extends\n                 AdvancedClientEndpointConsumerBuilder, AdvancedClientEndpointProducerBuilder {\n         default ClientEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedClientEndpointBuilder\n             extends\n                 AdvancedClientEndpointConsumerBuilder, AdvancedClientEndpointProducerBuilder {\n         default ClientEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "82a43727c308f2401468d4306c1ba2b5095f54b5", "projectName": "netty.netty", "bugType": "Change Boolean Literal", "problem": "         assertTrue(isBufferCopyNeededForWrite(byteBuf.asReadOnly()));\n         assertTrue(byteBuf.release());\n        assertCompositeByteBufIsBufferCopyNeededForWrite(alloc, 2, 0, false);\n         assertCompositeByteBufIsBufferCopyNeededForWrite(alloc, IOV_MAX + 1, 0, true);\n         assertCompositeByteBufIsBufferCopyNeededForWrite(alloc, 0, 2, true);\n         assertCompositeByteBufIsBufferCopyNeededForWrite(alloc, 1, 1, true);", "fixed": "         assertTrue(isBufferCopyNeededForWrite(byteBuf.asReadOnly()));\n         assertTrue(byteBuf.release());\n        assertCompositeByteBufIsBufferCopyNeededForWrite(alloc, 2, 0, true);\n         assertCompositeByteBufIsBufferCopyNeededForWrite(alloc, IOV_MAX + 1, 0, true);\n         assertCompositeByteBufIsBufferCopyNeededForWrite(alloc, 0, 2, true);\n         assertCompositeByteBufIsBufferCopyNeededForWrite(alloc, 1, 1, true);", "sourceBeforeFix": "assertCompositeByteBufIsBufferCopyNeededForWrite(alloc,2,0,false)", "sourceAfterFix": "assertCompositeByteBufIsBufferCopyNeededForWrite(alloc,2,0,true)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15839, value = \"Operation failed or was rolled back on all servers.\")\n     String operationFailedOrRolledBack();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10839, value = \"Operation failed or was rolled back on all servers.\")\n     String operationFailedOrRolledBack();\n     /**", "sourceBeforeFix": "id=15852", "sourceAfterFix": "id=10852"}
{"fixCommitSHA1": "e7e57abc47f85afd7bc2745293a72107068d260a", "projectName": "apache.hbase", "bugType": "Change Modifier", "problem": "   }\n   \n  HLog getLog() {\n     return this.hlog;\n   }", "fixed": "   }\n   \n  public HLog getLog() {\n     return this.hlog;\n   }", "sourceBeforeFix": "0", "sourceAfterFix": "1"}
{"fixCommitSHA1": "4024b63c37abb6e710f6fa1eb2557faf03003e63", "projectName": "roboguice.roboguice", "bugType": "Change Identifier Used", "problem": "                     }\n                     @Override\n                    protected void onInterrupted(InterruptedException e) {\nstate[0] = null;\n                     }", "fixed": "                     }\n                     @Override\n                    protected void onInterrupted(Exception e) {\nstate[0] = null;\n                     }", "sourceBeforeFix": "InterruptedException e", "sourceAfterFix": "Exception e"}
{"fixCommitSHA1": "0488684468895123c0a9784cb4660dd9b1df0144", "projectName": "square.retrofit", "bugType": "Change Modifier", "problem": " public class GitHubClient {\nprivate static final String API_URL = \"https:\n  class Contributor {\n     String login;\n     int contributions;\n   }", "fixed": " public class GitHubClient {\nprivate static final String API_URL = \"https:\n  static class Contributor {\n     String login;\n     int contributions;\n   }", "sourceBeforeFix": "0", "sourceAfterFix": "8"}
{"fixCommitSHA1": "194a3d4413de06e4f57f2c2bdb001fcd1fd4385b", "projectName": "facebook.presto", "bugType": "Less Specific If", "problem": "     private String formatDataRate(long inputDataSize, Duration duration)\n     {\n         double rate = inputDataSize / duration.convertTo(TimeUnit.SECONDS);\n        if (Double.isNaN(rate)) {\n             return \"0Bps\";\n         }\n         DataSize dataSize = new DataSize(rate, Unit.BYTE).convertToMostSuccinctDataSize();", "fixed": "     private String formatDataRate(long inputDataSize, Duration duration)\n     {\n         double rate = inputDataSize / duration.convertTo(TimeUnit.SECONDS);\n        if (Double.isNaN(rate) || Double.isInfinite(rate)) {\n             return \"0Bps\";\n         }\n         DataSize dataSize = new DataSize(rate, Unit.BYTE).convertToMostSuccinctDataSize();", "sourceBeforeFix": "Double.isNaN(rate)", "sourceAfterFix": "Double.isNaN(rate) || Double.isInfinite(rate)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r", "fixed": " \t}\r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r", "sourceBeforeFix": "GL20.glUniformMatrix3(location,transpose,toFloatBuffer(value,offset,count * 9))", "sourceAfterFix": "GL20.glUniformMatrix3fv(location,transpose,toFloatBuffer(value,offset,count * 9))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "a161d8d1924d1fb49a4d229370d998be1493957c", "projectName": "Graylog2.graylog2-server", "bugType": "Change Identifier Used", "problem": "             final long committedOffset = KafkaJournal.this.committedOffset.get();\n             final HashSet<LogSegment> logSegments = Sets.newHashSet(\n                    JavaConversions.asIterable(kafkaLog.logSegments(committedOffset, Long.MAX_VALUE))\n             );\n             loggerForCleaner.debug(\"[cleanup-committed] Keeping segments {}\", logSegments);\n             return kafkaLog.deleteOldSegments(new AbstractFunction1<LogSegment, Object>() {", "fixed": "             final long committedOffset = KafkaJournal.this.committedOffset.get();\n             final HashSet<LogSegment> logSegments = Sets.newHashSet(\n                    JavaConversions.asJavaIterable(kafkaLog.logSegments(committedOffset, Long.MAX_VALUE))\n             );\n             loggerForCleaner.debug(\"[cleanup-committed] Keeping segments {}\", logSegments);\n             return kafkaLog.deleteOldSegments(new AbstractFunction1<LogSegment, Object>() {", "sourceBeforeFix": "JavaConversions.asIterable(kafkaLog.logSegments(committedOffset,Long.MAX_VALUE))", "sourceAfterFix": "JavaConversions.asJavaIterable(kafkaLog.logSegments(committedOffset,Long.MAX_VALUE))"}
{"fixCommitSHA1": "0c36d7be59ae6361735e0f9aca4823474c147f8f", "projectName": "apache.camel", "bugType": "More Specific If", "problem": "         if (CxfPayload.class.isAssignableFrom(value.getClass())) {\n             CxfPayload<?> payload = (CxfPayload<?>) value;\n            if (payload.getBodySources().size() == 1) {\n                 if (type.isAssignableFrom(Document.class)) {\n                     Source s = payload.getBodySources().get(0);\n                     Document d;", "fixed": "         if (CxfPayload.class.isAssignableFrom(value.getClass())) {\n             CxfPayload<?> payload = (CxfPayload<?>) value;\n            if (payload.getBodySources() != null \n                && payload.getBodySources().size() == 1) {\n                 if (type.isAssignableFrom(Document.class)) {\n                     Source s = payload.getBodySources().get(0);\n                     Document d;", "sourceBeforeFix": "payload.getBodySources().size() == 1", "sourceAfterFix": "payload.getBodySources() != null && payload.getBodySources().size() == 1"}
{"fixCommitSHA1": "c7203473b49f29927a4f5e9438b5e38ab21e3428", "projectName": "naver.pinpoint", "bugType": "Change Identifier Used", "problem": "     @Override\n     public Map<AgentInfo, PinpointRouteResponse> invoke(List<AgentInfo> agentInfoList, byte[] payload)\n             throws TException {\n        return invoke(agentInfoList, payload, DEFUALT_FUTURE_TIMEOUT);\n     }\n     @Override", "fixed": "     @Override\n     public Map<AgentInfo, PinpointRouteResponse> invoke(List<AgentInfo> agentInfoList, byte[] payload)\n             throws TException {\n        return invoke(agentInfoList, payload, DEFAULT_FUTURE_TIMEOUT);\n     }\n     @Override", "sourceBeforeFix": "invoke(agentInfoList,payload,DEFUALT_FUTURE_TIMEOUT)", "sourceAfterFix": "invoke(agentInfoList,payload,DEFAULT_FUTURE_TIMEOUT)"}
{"fixCommitSHA1": "d0d25198716e23bb206e278f35ee4eeb6d00ba2c", "projectName": "netty.netty", "bugType": "Change Unary Operator\t", "problem": "     }\n     public boolean isEndOfInput() throws Exception {\n        return hasNextChunk();\n     }\n     public void close() throws Exception {", "fixed": "     }\n     public boolean isEndOfInput() throws Exception {\n        return !hasNextChunk();\n     }\n     public void close() throws Exception {", "sourceBeforeFix": "hasNextChunk()", "sourceAfterFix": "!hasNextChunk()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "51a15ac4a78ae570251ccc7c6a81b568663f1212", "projectName": "antlr.antlr4", "bugType": "Change Identifier Used", "problem": "s = target;\n \t\t}\n\t\treturn failOrAccept(prevAccept, input, reach, t);\n \t}\n \tprotected int failOrAccept(ExecState prevAccept, CharStream input,", "fixed": "s = target;\n \t\t}\n\t\treturn failOrAccept(prevAccept, input, closure, t);\n \t}\n \tprotected int failOrAccept(ExecState prevAccept, CharStream input,", "sourceBeforeFix": "failOrAccept(prevAccept,input,reach,t)", "sourceAfterFix": "failOrAccept(prevAccept,input,closure,t)"}
{"fixCommitSHA1": "406d52b271b8669c5461c97e88a17480cfd8a674", "projectName": "xetorthio.jedis", "bugType": "Change Numeric Literal", "problem": "     @Test\n     public void ttl() {\n         long ttl = jedis.ttl(\"foo\");\n        assertEquals(-1, ttl);\n         jedis.set(\"foo\", \"bar\");\n         ttl = jedis.ttl(\"foo\");", "fixed": "     @Test\n     public void ttl() {\n         long ttl = jedis.ttl(\"foo\");\n        assertEquals(-2, ttl);\n         jedis.set(\"foo\", \"bar\");\n         ttl = jedis.ttl(\"foo\");", "sourceBeforeFix": "-1", "sourceAfterFix": "-2"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  private final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "2d45a874c45b154bd3ab0ce56f2ecc6a2ae6e8e2", "projectName": "neo4j.neo4j", "bugType": "Change Identifier Used", "problem": "     }\n     @DELETE\n    @Path(PATH_NODE_INDEX_ID)\n     public Response deleteFromRelationshipIndex( @PathParam(\"indexName\") String indexName,\n                                                  @PathParam(\"key\") String key, @PathParam(\"value\") String value,\n                                                  @PathParam(\"id\") long id )", "fixed": "     }\n     @DELETE\n    @Path(PATH_RELATIONSHIP_INDEX_ID)\n     public Response deleteFromRelationshipIndex( @PathParam(\"indexName\") String indexName,\n                                                  @PathParam(\"key\") String key, @PathParam(\"value\") String value,\n                                                  @PathParam(\"id\") long id )", "sourceBeforeFix": "@Path(PATH_NODE_INDEX_ID)", "sourceAfterFix": "@Path(PATH_RELATIONSHIP_INDEX_ID)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface CxfEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedCxfEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface CxfEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedCxfEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "ce2c783a1942c292994e256283b7e7ec03c08d01", "projectName": "cucumber.cucumber-jvm", "bugType": "Wrong Function Name", "problem": "     private static final Thread CLOSE_THREAD = new Thread() {\n         @Override\n         public void run() {\n            REAL_DRIVER.close();\n         }\n     };", "fixed": "     private static final Thread CLOSE_THREAD = new Thread() {\n         @Override\n         public void run() {\n            REAL_DRIVER.quit();\n         }\n     };", "sourceBeforeFix": "REAL_DRIVER.close()", "sourceAfterFix": "REAL_DRIVER.quit()"}
{"fixCommitSHA1": "59939fddd703f0880268ee1dc33fded2dc54cd9e", "projectName": "apache.camel", "bugType": "Same Function More Args", "problem": "         Form form = null;\n        if ((Method.PUT == method || Method.POST == method) && mediaType == MediaType.APPLICATION_WWW_FORM) {\n             form = new Form();\n             String body = exchange.getIn().getBody(String.class);", "fixed": "         Form form = null;\n        if ((Method.PUT == method || Method.POST == method) && MediaType.APPLICATION_WWW_FORM.equals(mediaType, true)) {\n             form = new Form();\n             String body = exchange.getIn().getBody(String.class);", "sourceBeforeFix": "request.getEntity().getMediaType().equals(MediaType.APPLICATION_WWW_FORM)", "sourceAfterFix": "request.getEntity().getMediaType().equals(MediaType.APPLICATION_WWW_FORM,true)"}
{"fixCommitSHA1": "ea98386dfd18da047c877a2320cfdcf15df2ea06", "projectName": "facebook.presto", "bugType": "Change Modifier", "problem": "         return defineClass(classDefinition, PagesHashStrategy.class, callSiteBinder.getBindings(), getClass().getClassLoader());\n     }\n    private void generateConstructor(ClassDefinition classDefinition,\n             List<Integer> joinChannels,\n             FieldDefinition sizeField,\n             List<FieldDefinition> channelFields,", "fixed": "         return defineClass(classDefinition, PagesHashStrategy.class, callSiteBinder.getBindings(), getClass().getClassLoader());\n     }\n    private static void generateConstructor(ClassDefinition classDefinition,\n             List<Integer> joinChannels,\n             FieldDefinition sizeField,\n             List<FieldDefinition> channelFields,", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "23efad96e074ea4d590b15eb16aa38c3f9daec5c", "projectName": "neo4j.neo4j", "bugType": "Change Identifier Used", "problem": "             else if(container instanceof Relationship )\n             {\n                 statement.readOperations().acquireShared( ResourceTypes.RELATIONSHIP, ((Relationship) container).getId() );\n                return new CoreAPILock(stmtProvider, ResourceTypes.RELATIONSHIP, ((Node) container).getId())\n                 {\n                     @Override\n                     void release( Statement statement, Locks.ResourceType type, long resourceId )", "fixed": "             else if(container instanceof Relationship )\n             {\n                 statement.readOperations().acquireShared( ResourceTypes.RELATIONSHIP, ((Relationship) container).getId() );\n                return new CoreAPILock( stmtProvider, ResourceTypes.RELATIONSHIP, ((Relationship) container).getId() )\n                 {\n                     @Override\n                     void release( Statement statement, Locks.ResourceType type, long resourceId )", "sourceBeforeFix": "(Node)container", "sourceAfterFix": "(Relationship)container"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface SchematronEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedSchematronEndpointBuilder advanced() {", "fixed": "     \n    public interface SchematronEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedSchematronEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "37a968f250d8e6b6cfadebb046f2eb1295cd95e4", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": "if (mod.getModuleActivator() != null)\n \t\t\t\t\tmod.getModuleActivator().willStop();\n \t\t\t}\n\t\t\tcatch (Throwable t) {\n \t\t\t\tlog.warn(\"Unable to call module's Activator.willStop() method\", t);\n \t\t\t}", "fixed": "if (mod.getModuleActivator() != null)\n \t\t\t\t\tmod.getModuleActivator().willStop();\n \t\t\t}\n\t\t\tcatch (Exception t) {\n \t\t\t\tlog.warn(\"Unable to call module's Activator.willStop() method\", t);\n \t\t\t}", "sourceBeforeFix": "Throwable t", "sourceAfterFix": "Exception t"}
{"fixCommitSHA1": "f1024ba0e7d5f1276a285a4218f26c70252719b5", "projectName": "apache.flink", "bugType": "Same Function More Args", "problem": " \t\t\tLibraryCacheManager.unregister(executionGraph.getJobID());\n \t\t} catch (IOException ioe) {\n \t\t\tif (LOG.isWarnEnabled()) {\n\t\t\t\tLOG.warn(StringUtils.stringifyException(ioe));\n \t\t\t}\n \t\t}\n \t}", "fixed": " \t\t\tLibraryCacheManager.unregister(executionGraph.getJobID());\n \t\t} catch (IOException ioe) {\n \t\t\tif (LOG.isWarnEnabled()) {\n\t\t\t\tLOG.warn(ioe);\n \t\t\t}\n \t\t}\n \t}", "sourceBeforeFix": "LOG.error(e.getMessage())", "sourceAfterFix": "LOG.error(e.getMessage(),e)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n  private final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "d3eafb4cd35a17740adc2a9f69741604811b749f", "projectName": "Activiti.Activiti", "bugType": "Change Numeric Literal", "problem": "   @Deployment(resources = { \"org/activiti/engine/test/api/oneTaskProcess.bpmn20.xml\" })\n   public void testQueryStartedAfter() throws Exception {\n     Calendar calendar = new GregorianCalendar();\n    calendar.set(Calendar.YEAR, 2200);\n     calendar.set(Calendar.MONTH, 8);\n     calendar.set(Calendar.DAY_OF_MONTH, 30);\n     calendar.set(Calendar.HOUR_OF_DAY, 12);", "fixed": "   @Deployment(resources = { \"org/activiti/engine/test/api/oneTaskProcess.bpmn20.xml\" })\n   public void testQueryStartedAfter() throws Exception {\n     Calendar calendar = new GregorianCalendar();\n    calendar.set(Calendar.YEAR, 2030);\n     calendar.set(Calendar.MONTH, 8);\n     calendar.set(Calendar.DAY_OF_MONTH, 30);\n     calendar.set(Calendar.HOUR_OF_DAY, 12);", "sourceBeforeFix": "calendar.set(Calendar.YEAR,2200)", "sourceAfterFix": "calendar.set(Calendar.YEAR,2030)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15852, value = \"Caught %s storing deployment content -- %s\")\n     String caughtExceptionStoringDeploymentContent(String exceptionName, Throwable exception);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10852, value = \"Caught %s storing deployment content -- %s\")\n     String caughtExceptionStoringDeploymentContent(String exceptionName, Throwable exception);\n     /**", "sourceBeforeFix": "id=15871", "sourceAfterFix": "id=10871"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface NettyEndpointBuilder\n             extends\n                 NettyEndpointConsumerBuilder, NettyEndpointProducerBuilder {\n         default AdvancedNettyEndpointBuilder advanced() {", "fixed": "     \n    public interface NettyEndpointBuilder\n             extends\n                 NettyEndpointConsumerBuilder, NettyEndpointProducerBuilder {\n         default AdvancedNettyEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "15a26dc6061cd3162d9bea82d0b1cf10beca07e2", "projectName": "Alluxio.alluxio", "bugType": "Wrong Function Name", "problem": "   }\n   @Test\n  public void reportLostFileTest() {\n     long fileId = 1;\n     mThrown.expect(LineageDoesNotExistException.class);\n     mThrown.expectMessage(ExceptionMessage.LINEAGE_OUTPUT_FILE_NOT_EXIST.getMessage(fileId));\n    mLineageStore.requestFilePersistence(fileId);\n   }\n   @Test", "fixed": "   }\n   @Test\n  public void reportLostFileTest() throws LineageDoesNotExistException {\n     long fileId = 1;\n     mThrown.expect(LineageDoesNotExistException.class);\n     mThrown.expectMessage(ExceptionMessage.LINEAGE_OUTPUT_FILE_NOT_EXIST.getMessage(fileId));\n    mLineageStore.reportLostFile(fileId);\n   }\n   @Test", "sourceBeforeFix": "mLineageStore.requestFilePersistence(fileId)", "sourceAfterFix": "mLineageStore.reportLostFile(fileId)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15861, value = \"Cannot remove deployment %s from the domain as it is still used by server groups %s\")\n     String cannotRemoveDeploymentInUse(String name, List<String> groups);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10861, value = \"Cannot remove deployment %s from the domain as it is still used by server groups %s\")\n     String cannotRemoveDeploymentInUse(String name, List<String> groups);\n     /**", "sourceBeforeFix": "id=15871", "sourceAfterFix": "id=10871"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform2iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toIntBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform3f (int location, float x, float y, float z) {\r", "fixed": " \t}\r\n \tpublic void glUniform2iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform2iv(location, v);\r\n \t}\r\n \tpublic void glUniform2iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform2iv(location, toIntBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform3f (int location, float x, float y, float z) {\r", "sourceBeforeFix": "GL20.glUniformMatrix3(location,transpose,toFloatBuffer(value,offset,count * 9))", "sourceAfterFix": "GL20.glUniformMatrix3fv(location,transpose,toFloatBuffer(value,offset,count * 9))"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface FileEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedFileEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface FileEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedFileEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "0b302cf93edee0e2ab3c9998f380ede8e8ea7727", "projectName": "Atmosphere.atmosphere", "bugType": "Change Identifier Used", "problem": "                 }\n             }\n         }\n        return r;\n     }\n     private boolean isAtmosphereResourceValid(AtmosphereResource r) {", "fixed": "                 }\n             }\n         }\n        return this;\n     }\n     private boolean isAtmosphereResourceValid(AtmosphereResource r) {", "sourceBeforeFix": "return r; ", "sourceAfterFix": "return this; "}
{"fixCommitSHA1": "b5339d83f4936a28dcb59f20aac6e3ec2917dc4f", "projectName": "Bukkit.Bukkit", "bugType": "Change Identifier Used", "problem": "             PlayerListener trueListener = (PlayerListener)listener;\n             switch (event.getType()) {\n                case JOIN:\n                     trueListener.onPlayerJoin((PlayerEvent)event);\n                     break;\n                case QUIT:\n                     trueListener.onPlayerQuit((PlayerEvent)event);\n                     break;\n             }", "fixed": "             PlayerListener trueListener = (PlayerListener)listener;\n             switch (event.getType()) {\n                case PLAYER_JOIN:\n                     trueListener.onPlayerJoin((PlayerEvent)event);\n                     break;\n                case PLAYER_QUIT:\n                     trueListener.onPlayerQuit((PlayerEvent)event);\n                     break;\n             }", "sourceBeforeFix": "case QUIT: ", "sourceAfterFix": "case PLAYER_QUIT: "}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should exclude not allowed locales\n \t * @should cache results for a user\n \t */\n\tpublic List<Locale> getSearchLocales() throws APIException;\n \t/**\n \t * Used by Spring to set the http client for accessing the openmrs implementation service", "fixed": " \t * @should exclude not allowed locales\n \t * @should cache results for a user\n \t */\n\tpublic List<Locale> getSearchLocales();\n \t/**\n \t * Used by Spring to set the http client for accessing the openmrs implementation service", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n            statistics.addRemoveTimeNano(System.nanoTime() - start);\n             if (hitCount == 1) {\n                 statistics.increaseCacheHits(hitCount);\n             } else {", "fixed": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n            statistics.addRemoveTimeNanos(System.nanoTime() - start);\n             if (hitCount == 1) {\n                 statistics.increaseCacheHits(hitCount);\n             } else {", "sourceBeforeFix": "statistics.addRemoveTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addRemoveTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface RestletEndpointBuilder\n             extends\n                 RestletEndpointConsumerBuilder, RestletEndpointProducerBuilder {\n         default AdvancedRestletEndpointBuilder advanced() {", "fixed": "     \n    public interface RestletEndpointBuilder\n             extends\n                 RestletEndpointConsumerBuilder, RestletEndpointProducerBuilder {\n         default AdvancedRestletEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15848, value = \"Exception getting result from host %s: %s\")\n     String exceptionAwaitingResultFromHost(String name, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10848, value = \"Exception getting result from host %s: %s\")\n     String exceptionAwaitingResultFromHost(String name, String message);\n     /**", "sourceBeforeFix": "id=15863", "sourceAfterFix": "id=10863"}
{"fixCommitSHA1": "864435a71cd9e8b0dec4150284ee43372167b091", "projectName": "google.guava", "bugType": "Change Identifier Used", "problem": "     ticker.advance(16000000);\n     stopwatch.start();\n    assertEquals(9, stopwatch.elapsedMillis());\n     ticker.advance(25000000);\n    assertEquals(34, stopwatch.elapsedMillis());\n     stopwatch.stop();\n     ticker.advance(36000000);\n    assertEquals(34, stopwatch.elapsedMillis());\n   }\n   @GwtIncompatible(\"String.format()\")", "fixed": "     ticker.advance(16000000);\n     stopwatch.start();\n    assertEquals(9, stopwatch.elapsed(MILLISECONDS));\n     ticker.advance(25000000);\n    assertEquals(34, stopwatch.elapsed(MILLISECONDS));\n     stopwatch.stop();\n     ticker.advance(36000000);\n    assertEquals(34, stopwatch.elapsed(MILLISECONDS));\n   }\n   @GwtIncompatible(\"String.format()\")", "sourceBeforeFix": "stopwatch.elapsedMillis()", "sourceAfterFix": "stopwatch.elapsed(MILLISECONDS)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "4801de62a27d4673c6596f8d8128b478d82e9ecd", "projectName": "druid-io.druid", "bugType": "Change Identifier Used", "problem": "         binder,\n         \"druid.realtime.chathandler.type\",\n         Key.get(ChatHandlerProvider.class),\n        Key.get(NoopChatHandlerProvider.class)\n     );\n     final MapBinder<String, ChatHandlerProvider> handlerProviderBinder = PolyBind.optionBinder(\n         binder, Key.get(ChatHandlerProvider.class)", "fixed": "         binder,\n         \"druid.realtime.chathandler.type\",\n         Key.get(ChatHandlerProvider.class),\n        Key.get(ServiceAnnouncingChatHandlerProvider.class)\n     );\n     final MapBinder<String, ChatHandlerProvider> handlerProviderBinder = PolyBind.optionBinder(\n         binder, Key.get(ChatHandlerProvider.class)", "sourceBeforeFix": "NoopChatHandlerProvider.class", "sourceAfterFix": "ServiceAnnouncingChatHandlerProvider.class"}
{"fixCommitSHA1": "66818467b26ea9aecf50fc0a3448b1eb9aac74f0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   }\n  private class AliasedTypeNode extends AliasUsage {\n     AliasedTypeNode(Var aliasVar, Node aliasReference) {\n       super(aliasVar, aliasReference);\n     }", "fixed": "     }\n   }\n  private static class AliasedTypeNode extends AliasUsage {\n     AliasedTypeNode(Var aliasVar, Node aliasReference) {\n       super(aliasVar, aliasReference);\n     }", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "53ec9af4fd879482a6b8e04cff029d5db9634870", "projectName": "clojure.clojure", "bugType": "More Specific If", "problem": " \t\telse\r\n \t\t\tret = RT.list(Compiler.QUOTE, form);\r\n\t\tif(form instanceof IObj && ((IObj) form).meta() != null)\r\n \t\t\t{\r\n \t\t\tIPersistentMap newMeta = ((IObj) form).meta().without(RT.LINE_KEY);\r", "fixed": " \t\telse\r\n \t\t\tret = RT.list(Compiler.QUOTE, form);\r\n\t\tif(form instanceof IObj && !(form instanceof Var) && ((IObj) form).meta() != null)\r\n \t\t\t{\r\n \t\t\tIPersistentMap newMeta = ((IObj) form).meta().without(RT.LINE_KEY);\r", "sourceBeforeFix": "form instanceof IObj && ((IObj)form).meta() != null", "sourceAfterFix": "form instanceof IObj && !(form instanceof Var) && ((IObj)form).meta() != null"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "5b13fe70c25812157a1e4432135eb9639e72bc6a", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t\tfinal Sink output = new Sink(\"output.json\").withInputs(selection);\n \t\texpectedPlan.setSinks(output);\n\t\tassertEquals(expectedPlan, actualPlan);\n \t}\n }", "fixed": " \t\tfinal Sink output = new Sink(\"output.json\").withInputs(selection);\n \t\texpectedPlan.setSinks(output);\n\t\tassertPlanEquals(expectedPlan, actualPlan);\n \t}\n }", "sourceBeforeFix": "assertEquals(expectedPlan,actualPlan)", "sourceAfterFix": "assertPlanEquals(expectedPlan,actualPlan)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "9467bef8ea9a62658b32dd43a76f4f98087d1986", "projectName": "apache.hadoop", "bugType": "Change Unary Operator\t", "problem": "         command = new DeleteCommand(keyName);\n         if (\"--help\".equals(keyName)) {\n           printKeyShellUsage();\n          return -1;\n         }\n       } else if (args[i].equals(\"roll\")) {\n         String keyName = \"--help\";", "fixed": "         command = new DeleteCommand(keyName);\n         if (\"--help\".equals(keyName)) {\n           printKeyShellUsage();\n          return 1;\n         }\n       } else if (args[i].equals(\"roll\")) {\n         String keyName = \"--help\";", "sourceBeforeFix": "-1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "38eb6222bddaf49c3c9ae73ddef0cfe4ff5efa48", "projectName": "alibaba.dubbo", "bugType": "Change Numeric Literal", "problem": "     @Test\n     public void test_Decode_Return_Request_Heartbeat_Object() throws IOException {\n        byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, (byte) 0xff, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n         byte[] request = getRequestBytes(null, header);\n         Request obj = (Request) decode(request);\n         Assert.assertEquals(null, obj.getData());", "fixed": "     @Test\n     public void test_Decode_Return_Request_Heartbeat_Object() throws IOException {\n        byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, (byte) 0xe2, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n         byte[] request = getRequestBytes(null, header);\n         Request obj = (Request) decode(request);\n         Assert.assertEquals(null, obj.getData());", "sourceBeforeFix": "(byte)0xff", "sourceAfterFix": "(byte)0xe2"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15843, value = \"Invalid rollout plan. Plan operations affect server groups %s that are not reflected in the rollout plan\")\n     String invalidRolloutPlan(Set<String> groups);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10843, value = \"Invalid rollout plan. Plan operations affect server groups %s that are not reflected in the rollout plan\")\n     String invalidRolloutPlan(Set<String> groups);\n     /**", "sourceBeforeFix": "id=15866", "sourceAfterFix": "id=10866"}
{"fixCommitSHA1": "f43cca9e4e3ea39ccf02fc3743be77ae4d7b80ab", "projectName": "pardom.ActiveAndroid", "bugType": "Change Caller in Function Call", "problem": " \t\tfinal Class<?> type = field.getType();\n \t\tfinal String name = tableInfo.getColumnName(field);\n\t\tfinal TypeSerializer typeSerializer = Cache.getParserForType(tableInfo.getType());\n \t\tfinal Column column = field.getAnnotation(Column.class);\n \t\tif (typeSerializer != null) {", "fixed": " \t\tfinal Class<?> type = field.getType();\n \t\tfinal String name = tableInfo.getColumnName(field);\n\t\tfinal TypeSerializer typeSerializer = Cache.getParserForType(field.getType());\n \t\tfinal Column column = field.getAnnotation(Column.class);\n \t\tif (typeSerializer != null) {", "sourceBeforeFix": "tableInfo.getType()", "sourceAfterFix": "field.getType()"}
{"fixCommitSHA1": "f779a4415cedcfa445777b186c8fe1d6341278df", "projectName": "netty.netty", "bugType": "Less Specific If", "problem": "     @Override\n     protected void writeClassDescriptor(ObjectStreamClass desc) throws IOException {\n         Class<?> clazz = desc.forClass();\n        if (clazz.isPrimitive() || clazz.isArray()) {\n             write(TYPE_FAT_DESCRIPTOR);\n             super.writeClassDescriptor(desc);\n         } else {", "fixed": "     @Override\n     protected void writeClassDescriptor(ObjectStreamClass desc) throws IOException {\n         Class<?> clazz = desc.forClass();\n        if (clazz.isPrimitive() || clazz.isArray() || desc.getSerialVersionUID() == 0) {\n             write(TYPE_FAT_DESCRIPTOR);\n             super.writeClassDescriptor(desc);\n         } else {", "sourceBeforeFix": "clazz.isPrimitive() || clazz.isArray()", "sourceAfterFix": "clazz.isPrimitive() || clazz.isArray() || desc.getSerialVersionUID() == 0"}
{"fixCommitSHA1": "780a95c41d5d9ddafe1a237628183020746825a8", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t * before growing the backing table. */\r\n \tpublic IdentityMap (int initialCapacity, float loadFactor) {\r\n \t\tif (initialCapacity < 0) throw new IllegalArgumentException(\"initialCapacity must be >= 0: \" + initialCapacity);\r\n\t\tif (capacity > 1 << 30) throw new IllegalArgumentException(\"initialCapacity is too large: \" + initialCapacity);\r\n \t\tcapacity = MathUtils.nextPowerOfTwo(initialCapacity);\r\n \t\tif (loadFactor <= 0) throw new IllegalArgumentException(\"loadFactor must be > 0: \" + loadFactor);\r", "fixed": " \t * before growing the backing table. */\r\n \tpublic IdentityMap (int initialCapacity, float loadFactor) {\r\n \t\tif (initialCapacity < 0) throw new IllegalArgumentException(\"initialCapacity must be >= 0: \" + initialCapacity);\r\n\t\tif (initialCapacity > 1 << 30) throw new IllegalArgumentException(\"initialCapacity is too large: \" + initialCapacity);\r\n \t\tcapacity = MathUtils.nextPowerOfTwo(initialCapacity);\r\n \t\tif (loadFactor <= 0) throw new IllegalArgumentException(\"loadFactor must be > 0: \" + loadFactor);\r", "sourceBeforeFix": "capacity > 1 << 30", "sourceAfterFix": "initialCapacity > 1 << 30"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     @ApiOperation(value = \"test json serialization of form data\", notes = \"\", tags={ \"fake\" })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Void.class) })\n    void testJsonFormData(@FormParam(value = \"param\")  String param,@FormParam(value = \"param2\")  String param2);\n }", "fixed": "     @ApiOperation(value = \"test json serialization of form data\", notes = \"\", tags={ \"fake\" })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Void.class) })\n    void testJsonFormData(@FormParam(value = \"param\")  String param,@FormParam(value = \"param2\")  String param2) throws Exception;\n }", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface CryptoCmsEndpointBuilder\n            extends\n                EndpointProducerBuilder {\n         default AdvancedCryptoCmsEndpointBuilder advanced() {\n             return (AdvancedCryptoCmsEndpointBuilder) this;\n         }", "fixed": "     \n    public interface CryptoCmsEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedCryptoCmsEndpointBuilder advanced() {\n             return (AdvancedCryptoCmsEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     }, tags={ \"pet\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 405, message = \"Invalid input\", response = Void.class) })\n    void addPet(@Valid Pet body);\n     @DELETE\n     @Path(\"/{petId}\")", "fixed": "     }, tags={ \"pet\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 405, message = \"Invalid input\", response = Void.class) })\n    void addPet(@Valid Pet body) throws Exception;\n     @DELETE\n     @Path(\"/{petId}\")", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "3d8aaf3c3fcce6133c197d9ca3c1c3f72c260beb", "projectName": "Activiti.Activiti", "bugType": "Change Identifier Used", "problem": "     if (processDefinition != null && processDefinition.isGraphicalNotationDefined()) {\n       try {\n        BpmnModel bpmnModel = repositoryService.getBpmnModel(processInstance.getId());\n         InputStream definitionImageStream = ProcessDiagramGenerator.generateDiagram(bpmnModel, \"png\", \n                 runtimeService.getActiveActivityIds(processInstance.getId()));", "fixed": "     if (processDefinition != null && processDefinition.isGraphicalNotationDefined()) {\n       try {\n        BpmnModel bpmnModel = repositoryService.getBpmnModel(processInstance.getProcessDefinitionId());\n         InputStream definitionImageStream = ProcessDiagramGenerator.generateDiagram(bpmnModel, \"png\", \n                 runtimeService.getActiveActivityIds(processInstance.getId()));", "sourceBeforeFix": "processInstance.getId()", "sourceAfterFix": "processInstance.getProcessDefinitionId()"}
{"fixCommitSHA1": "6cf86311e8d061d65c3b8c70d705b69a9d205127", "projectName": "hazelcast.hazelcast", "bugType": "Same Function More Args", "problem": "                         MemberLeftException memberLeftException = (MemberLeftException) result;\n                         inner.innerSetMemberLeft(memberLeftException.getMember());\n                     } else if (result instanceof Throwable) {\n                        inner.innerSetException((Throwable) result);\n                     } else {\n                         if (dt instanceof MultiTask) {\n                             if (result != null) {", "fixed": "                         MemberLeftException memberLeftException = (MemberLeftException) result;\n                         inner.innerSetMemberLeft(memberLeftException.getMember());\n                     } else if (result instanceof Throwable) {\n                        inner.innerSetException((Throwable) result, true);\n                     } else {\n                         if (dt instanceof MultiTask) {\n                             if (result != null) {", "sourceBeforeFix": "inner.innerSetException(new TimeoutException())", "sourceAfterFix": "inner.innerSetException(new TimeoutException(),false)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<Status> getUserTimeline(Paging paging) throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline.json\"\n                 , null, paging.asPostParameterList(), true));\n     }", "fixed": "      */\n     public ResponseList<Status> getUserTimeline(Paging paging) throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline.json\"\n                 , null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline.json\",true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "66c325e004dc7d1ffb6b97e8af093a8455756d53", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": " \t\tConceptName anotherConceptName = ConceptNameTest.createMockConceptName(3, Context.getLocale(), null, true);\r\n \t\tanotherConceptName.setName(duplicateName);\r\n \t\tnewConcept.addName(anotherConceptName);\r\n\t\tErrors errors = new BindException(concept, \"concept\");\r\n \t\tnew ConceptValidator().validate(newConcept, errors);\r\n \t}\r", "fixed": " \t\tConceptName anotherConceptName = ConceptNameTest.createMockConceptName(3, Context.getLocale(), null, true);\r\n \t\tanotherConceptName.setName(duplicateName);\r\n \t\tnewConcept.addName(anotherConceptName);\r\n\t\tErrors errors = new BindException(newConcept, \"concept\");\r\n \t\tnew ConceptValidator().validate(newConcept, errors);\r\n \t}\r", "sourceBeforeFix": "new BindException(concept,\"concept\")", "sourceAfterFix": "new BindException(newConcept,\"concept\")"}
{"fixCommitSHA1": "af233c9c353322adf1fa91d5e6ca706b9d9d98b7", "projectName": "dropwizard.dropwizard", "bugType": "Wrong Function Name", "problem": "     @Test\n     public void returnsA404WhenNotFound() throws Exception {\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getServletPath()).thenReturn(\"/tasks/test\");\n         servlet.service(request, response);", "fixed": "     @Test\n     public void returnsA404WhenNotFound() throws Exception {\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getPathInfo()).thenReturn(\"/test\");\n         servlet.service(request, response);", "sourceBeforeFix": "request.getServletPath()", "sourceAfterFix": "request.getPathInfo()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  private final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface CryptoCmsEndpointBuilder\n            extends\n                EndpointProducerBuilder {\n         default AdvancedCryptoCmsEndpointBuilder advanced() {\n             return (AdvancedCryptoCmsEndpointBuilder) this;\n         }", "fixed": "     \n    public interface CryptoCmsEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedCryptoCmsEndpointBuilder advanced() {\n             return (AdvancedCryptoCmsEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "04a010c8499fbc96b1e5a99bdbebaf0b38d24586", "projectName": "libgdx.libgdx", "bugType": "Change Binary Operator", "problem": " \tpublic void addAll (long[] array, int offset, int length) {\r\n \t\tlong[] items = this.items;\r\n \t\tint sizeNeeded = size + length;\r\n\t\tif (sizeNeeded >= items.length) items = resize(Math.max(8, (int)(sizeNeeded * 1.75f)));\r\n \t\tSystem.arraycopy(array, offset, items, size, length);\r\n \t\tsize += length;\r\n \t}\r", "fixed": " \tpublic void addAll (long[] array, int offset, int length) {\r\n \t\tlong[] items = this.items;\r\n \t\tint sizeNeeded = size + length;\r\n\t\tif (sizeNeeded > items.length) items = resize(Math.max(8, (int)(sizeNeeded * 1.75f)));\r\n \t\tSystem.arraycopy(array, offset, items, size, length);\r\n \t\tsize += length;\r\n \t}\r", "sourceBeforeFix": "sizeNeeded >= items.length", "sourceAfterFix": "sizeNeeded > items.length"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleActionsPredicatesOptions_1() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(247);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {System.out.println($ctx.toStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");", "fixed": " \tpublic void testMultipleActionsPredicatesOptions_1() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {System.out.println($ctx.toStringTree(this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");", "sourceBeforeFix": "new StringBuilder(730)", "sourceAfterFix": "new StringBuilder(729)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "2", "sourceAfterFix": "0"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "fixed": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttribfv(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttribiv(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "sourceBeforeFix": "GL20.glUniformMatrix4(location,transpose,toFloatBuffer(value,offset,count << 4))", "sourceAfterFix": "GL20.glUniformMatrix4fv(location,transpose,toFloatBuffer(value,offset,count << 4))"}
{"fixCommitSHA1": "eba20b3dcc401fb4c873afc5948cc92fbcb00097", "projectName": "clojure.clojure", "bugType": "Wrong Function Name", "problem": " \t\tint size = s.count();\n \t\tlong[] ret = new long[size];\n \t\tfor(int i = 0; i < size && s != null; i++, s = s.rest())\n\t\t\tret[i] = ((Number) s.first()).intValue();\n \t\treturn ret;\n \t\t}\n }", "fixed": " \t\tint size = s.count();\n \t\tlong[] ret = new long[size];\n \t\tfor(int i = 0; i < size && s != null; i++, s = s.rest())\n\t\t\tret[i] = ((Number) s.first()).longValue();\n \t\treturn ret;\n \t\t}\n }", "sourceBeforeFix": "((Number)s.first()).intValue()", "sourceAfterFix": "((Number)s.first()).floatValue()"}
{"fixCommitSHA1": "41467c8004b716fb78002c3139ea771b70ed165d", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t\t\tbatch.setColor(color.r, color.g, color.b, color.a * parentAlpha);\r\n \t\t\tstyle.background.draw(batch, getX(), getY(), getWidth(), getHeight());\r\n \t\t}\r\n\t\tcache.setColor(style.fontColor == null ? color : Color.tmp.set(color).mul(style.fontColor));\r\n \t\tcache.setPosition(getX(), getY());\r\n \t\tcache.draw(batch, parentAlpha);\r\n \t}\r", "fixed": " \t\t\tbatch.setColor(color.r, color.g, color.b, color.a * parentAlpha);\r\n \t\t\tstyle.background.draw(batch, getX(), getY(), getWidth(), getHeight());\r\n \t\t}\r\n\t\tcache.setColors(style.fontColor == null ? color : Color.tmp.set(color).mul(style.fontColor));\r\n \t\tcache.setPosition(getX(), getY());\r\n \t\tcache.draw(batch, parentAlpha);\r\n \t}\r", "sourceBeforeFix": "cache.setColor(style.fontColor == null ? color : Color.tmp.set(color).mul(style.fontColor))", "sourceAfterFix": "cache.setColors(style.fontColor == null ? color : Color.tmp.set(color).mul(style.fontColor))"}
{"fixCommitSHA1": "2921e7bf0d74a65fdcc71d3ce3053037d14e4d44", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "     private void handleAtomicNumberSet(String[] args) {\n         long v = 0;\n         if (args.length > 1) {\n            v = Long.valueOf(args[1]);\n         }\n         getAtomicNumber().set(v);\n         println(getAtomicNumber().get());", "fixed": "     private void handleAtomicNumberSet(String[] args) {\n         long v = 0;\n         if (args.length > 1) {\n            v = Long.parseLong(args[1]);\n         }\n         getAtomicNumber().set(v);\n         println(getAtomicNumber().get());", "sourceBeforeFix": "Long.valueOf(args[2])", "sourceAfterFix": "Long.parseLong(args[2])"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface WeatherEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedWeatherEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface WeatherEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedWeatherEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "296ba4ff8db020176e5b6abe058052a1314cd2ee", "projectName": "openhab.openhab", "bugType": "Same Function More Args", "problem": " \t */\n \tstatic public DecimalType evolutionRate(Item item, AbstractInstant timestamp, String serviceName) {\n \t\tDecimalType result = null;\n\t\tHistoricItem itemThen = historicState(item, timestamp);\n \t\tif (itemThen != null) {\n \t\t\tDecimalType valueThen = (DecimalType) itemThen.getState();\n \t\t\tDecimalType valueNow = (DecimalType) item.getStateAs(DecimalType.class);", "fixed": " \t */\n \tstatic public DecimalType evolutionRate(Item item, AbstractInstant timestamp, String serviceName) {\n \t\tDecimalType result = null;\n\t\tHistoricItem itemThen = historicState(item, timestamp, serviceName);\n \t\tif (itemThen != null) {\n \t\t\tDecimalType valueThen = (DecimalType) itemThen.getState();\n \t\t\tDecimalType valueNow = (DecimalType) item.getStateAs(DecimalType.class);", "sourceBeforeFix": "historicState(item,timestamp)", "sourceAfterFix": "historicState(item,timestamp,serviceName)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15837, value = \"One of the groups does not define neither \" + SERVER_GROUP + \" nor \" + CONCURRENT_GROUPS + \": %s\")\n     String unexpectedInSeriesGroup(String rolloutPlan);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10837, value = \"One of the groups does not define neither \" + SERVER_GROUP + \" nor \" + CONCURRENT_GROUPS + \": %s\")\n     String unexpectedInSeriesGroup(String rolloutPlan);\n     /**", "sourceBeforeFix": "id=15848", "sourceAfterFix": "id=10848"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15839, value = \"Operation failed or was rolled back on all servers.\")\n     String operationFailedOrRolledBack();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10839, value = \"Operation failed or was rolled back on all servers.\")\n     String operationFailedOrRolledBack();\n     /**", "sourceBeforeFix": "id=15865", "sourceAfterFix": "id=10865"}
{"fixCommitSHA1": "e2119d33293008fcc876f5fcd58ede2993eb24d6", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnBean(RedisConnectionFactory.class)\n\t@ConditionalOnEnablednHealthIndicator(\"redis\")\n \tpublic static class RedisHealthIndicatorConfiguration\n \t\t\textends\n \t\t\tCompositeHealthIndicatorConfiguration<RedisHealthIndicator, RedisConnectionFactory> {", "fixed": " \t@Configuration\n \t@ConditionalOnBean(RedisConnectionFactory.class)\n\t@ConditionalOnEnabledHealthIndicator(\"redis\")\n \tpublic static class RedisHealthIndicatorConfiguration\n \t\t\textends\n \t\t\tCompositeHealthIndicatorConfiguration<RedisHealthIndicator, RedisConnectionFactory> {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"rabbit\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"rabbit\")"}
{"fixCommitSHA1": "42b44935272ecf97acca3b7c9fe90b45fd8e01d2", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "          * you could append \"?olderThan=2912\u2033 to your request to get the 20\n          * messages prior to those you're seeing.\n          */\n        private Integer olderThan = -1;\n         /**\n          * Returns messages newer than the message ID specified as a numeric\n          * string. This should be used when polling for new messages. If you're", "fixed": "          * you could append \"?olderThan=2912\u2033 to your request to get the 20\n          * messages prior to those you're seeing.\n          */\n        private Long olderThan = -1L;\n         /**\n          * Returns messages newer than the message ID specified as a numeric\n          * string. This should be used when polling for new messages. If you're", "sourceBeforeFix": "Integer olderThan", "sourceAfterFix": "Long olderThan"}
{"fixCommitSHA1": "79946366e1ab141ef2b595e0079dcac7b913da2b", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "             \"1: \" + getCheckMessage(MSG_KEY_MISMATCH),\n         };\n        verify(checkConfig, getPath(\"InputPackageDeclarationDiffDirectoryAtParent.java\"), expected);\n     }\n     @Test", "fixed": "             \"1: \" + getCheckMessage(MSG_KEY_MISMATCH),\n         };\n        verify(checkConfig,\n                getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtParent.java\"),\n                expected);\n     }\n     @Test", "sourceBeforeFix": "getPath(\"InputPackageDeclarationDiffDirectory.java\")", "sourceAfterFix": "getNonCompilablePath(\"InputPackageDeclarationDiffDirectory.java\")"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface ServerEndpointBuilder\n             extends\n                 ServerEndpointConsumerBuilder, ServerEndpointProducerBuilder {\n         default AdvancedServerEndpointBuilder advanced() {", "fixed": "     \n    public interface ServerEndpointBuilder\n             extends\n                 ServerEndpointConsumerBuilder, ServerEndpointProducerBuilder {\n         default AdvancedServerEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "1d5647b92215f0ceabced59275225ad829061663", "projectName": "spring-projects.spring-boot", "bugType": "Change Modifier", "problem": " \t}\n \t@Test\n\tpublic void testHealth() throws Exception {\nString url = \"http:\n \t\tSystem.out.println(url);\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);", "fixed": " \t}\n \t@Test\n\tvoid testHealth() throws Exception {\nString url = \"http:\n \t\tSystem.out.println(url);\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface PgEventEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedPgEventEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface PgEventEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedPgEventEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "f73c4f24ee36c671562840e941c914f79566cf97", "projectName": "netty.netty", "bugType": "Change Operand ", "problem": "                     if (index == 0x7f) {\n                         state = READ_LITERAL_HEADER_NAME_LENGTH;\n                     } else {\n                        if (nameLength > maxHeadersLength - headersLength) {\n                             maxHeaderSizeExceeded();\n                         }\n                         nameLength = index;", "fixed": "                     if (index == 0x7f) {\n                         state = READ_LITERAL_HEADER_NAME_LENGTH;\n                     } else {\n                        if (index > maxHeadersLength - headersLength) {\n                             maxHeaderSizeExceeded();\n                         }\n                         nameLength = index;", "sourceBeforeFix": "nameLength > maxHeadersLength - headersLength", "sourceAfterFix": "index > maxHeadersLength - headersLength"}
{"fixCommitSHA1": "4dd18ed5c3188be2cfb14efce62e71ae6f19243a", "projectName": "dropwizard.dropwizard", "bugType": "Change Identifier Used", "problem": "     @SuppressWarnings(\"unchecked\")\n     public void returnsA500OnExceptions() throws Exception {\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getServletPath()).thenReturn(\"/tasks/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.<String>of()));\n         final RuntimeException ex = new RuntimeException(\"whoops\");", "fixed": "     @SuppressWarnings(\"unchecked\")\n     public void returnsA500OnExceptions() throws Exception {\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getPathInfo()).thenReturn(\"/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.<String>of()));\n         final RuntimeException ex = new RuntimeException(\"whoops\");", "sourceBeforeFix": "request.getServletPath()", "sourceAfterFix": "request.getPathInfo()"}
{"fixCommitSHA1": "221156e25c6a8368fa7cd26c7b46660a3c71dda4", "projectName": "alibaba.druid", "bugType": "Change Binary Operator", "problem": "         long nanos = unit.toNanos(timeout);\n         for (;;) {\n            if (activeCount == maxActive) {\n                 long startNano = System.nanoTime();\n                 notMaxActive.awaitNanos(nanos);\n                 nanos -= (System.nanoTime() - startNano);", "fixed": "         long nanos = unit.toNanos(timeout);\n         for (;;) {\n            if (activeCount >= maxActive) {\n                 long startNano = System.nanoTime();\n                 notMaxActive.awaitNanos(nanos);\n                 nanos -= (System.nanoTime() - startNano);", "sourceBeforeFix": "activeCount == maxActive", "sourceAfterFix": "activeCount >= maxActive"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface SoroushBotEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedSoroushBotEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface SoroushBotEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedSoroushBotEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedDirectVmEndpointBuilder\n             extends\n                 AdvancedDirectVmEndpointConsumerBuilder, AdvancedDirectVmEndpointProducerBuilder {\n         default DirectVmEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedDirectVmEndpointBuilder\n             extends\n                 AdvancedDirectVmEndpointConsumerBuilder, AdvancedDirectVmEndpointProducerBuilder {\n         default DirectVmEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t */\n \t@Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)\n\tpublic SortedMap<String, String> getSystemVariables() throws APIException;\n \t/**\n \t * Get a map of all the System Information. Java, user, time, runtime properties, etc", "fixed": " \t */\n \t@Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)\n\tpublic SortedMap<String, String> getSystemVariables();\n \t/**\n \t * Get a map of all the System Information. Java, user, time, runtime properties, etc", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   }\n   \n  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "2230a91829f39b72973e6fecf275d9c664911ca0", "projectName": "clojure.clojure", "bugType": "Change Identifier Used", "problem": " \t\t}\n \tcatch(LispReader.ReaderException e)\n \t\t{\n\t\tthrow new CompilerException(sourceName, e.line, e.getCause());\n \t\t}\n \tfinally\n \t\t{", "fixed": " \t\t}\n \tcatch(LispReader.ReaderException e)\n \t\t{\n\t\tthrow new CompilerException(sourcePath, e.line, e.getCause());\n \t\t}\n \tfinally\n \t\t{", "sourceBeforeFix": "SOURCE.deref()", "sourceAfterFix": "SOURCE_PATH.deref()"}
{"fixCommitSHA1": "466bf63f35eee009f11ed069892907c7057ce1b7", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": " \nclass WriteStoreHandler extends AbstactStoreHandler<DelayedEntry> {\n     protected WriteStoreHandler(MapStoreWrapper storeWrapper) {\n         super(storeWrapper);", "fixed": " \nclass WriteStoreHandler extends AbstractStoreHandler<DelayedEntry> {\n     protected WriteStoreHandler(MapStoreWrapper storeWrapper) {\n         super(storeWrapper);", "sourceBeforeFix": "AbstactStoreHandler<DelayedEntry>", "sourceAfterFix": "AbstractStoreHandler<DelayedEntry>"}
{"fixCommitSHA1": "e668660a9ca77bc1bfc091967cc10975594d884e", "projectName": "druid-io.druid", "bugType": "Change Identifier Used", "problem": "                   ),\n                   configFactory.build(EC2AutoScalingStrategyConfig.class)\n               );\n            } else if (config.getStorageImpl().equalsIgnoreCase(\"noop\")) {\n               strategy = new NoopScalingStrategy();\n             } else {\n               throw new ISE(\"Invalid strategy implementation: %s\",config.getStrategyImpl());", "fixed": "                   ),\n                   configFactory.build(EC2AutoScalingStrategyConfig.class)\n               );\n            } else if (config.getStrategyImpl().equalsIgnoreCase(\"noop\")) {\n               strategy = new NoopScalingStrategy();\n             } else {\n               throw new ISE(\"Invalid strategy implementation: %s\",config.getStrategyImpl());", "sourceBeforeFix": "config.getStorageImpl()", "sourceAfterFix": "config.getStrategyImpl()"}
{"fixCommitSHA1": "cdd2f673c253f0103756957467ee74db81829d98", "projectName": "facebook.presto", "bugType": "Change Numeric Literal", "problem": "         }\n         JavaVersion version = JavaVersion.parse(javaVersion);\n        if (version.getMajor() == 8 && version.getUpdate().isPresent() && version.getUpdate().getAsInt() >= 92) {\n             return;\n         }", "fixed": "         }\n         JavaVersion version = JavaVersion.parse(javaVersion);\n        if (version.getMajor() == 8 && version.getUpdate().isPresent() && version.getUpdate().getAsInt() >= 151) {\n             return;\n         }", "sourceBeforeFix": "version.getUpdate().getAsInt() >= 92", "sourceAfterFix": "version.getUpdate().getAsInt() >= 151"}
{"fixCommitSHA1": "3cf2913580b49ddde420be7442e806aba7766da3", "projectName": "spring-projects.spring-boot", "bugType": "Change Modifier", "problem": " /*\n * Copyright 2012-2017 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.", "fixed": " /*\n * Copyright 2012-2018 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.", "sourceBeforeFix": "1024", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "4c1b34b34b68f102fbb5021a801b6d99de967550", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     final FunctionNames functionNames;\n     final String idGeneratorMap;\n    State(Map<String, Integer> cssNames, Set<String> exportedNames,\n           CrossModuleMethodMotion.IdGenerator crossModuleIdGenerator,\n           VariableMap variableMap, VariableMap propertyMap,\n           VariableMap anonymousFunctionNameMap,", "fixed": "     final FunctionNames functionNames;\n     final String idGeneratorMap;\n    public State(Map<String, Integer> cssNames, Set<String> exportedNames,\n           CrossModuleMethodMotion.IdGenerator crossModuleIdGenerator,\n           VariableMap variableMap, VariableMap propertyMap,\n           VariableMap anonymousFunctionNameMap,", "sourceBeforeFix": "0", "sourceAfterFix": "4"}
{"fixCommitSHA1": "33a581dc99596797ce7a054ae65dc3007e87a208", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "        Thread.sleep(2200);\n         assertMockEndpointsSatisfied();", "fixed": "        Thread.sleep(3000);\n         assertMockEndpointsSatisfied();", "sourceBeforeFix": "Thread.sleep(2200)", "sourceAfterFix": "Thread.sleep(3000)"}
{"fixCommitSHA1": "6bae902bd35ed4f57e7a5d612b7ad9b72f4559bc", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "     JSTypeRegistry registry = new JSTypeRegistry(testErrorReporter);\n     Node node1 = Node.newString(Token.NAME, \"f\");\n     Node node2 = Node.newString(Token.NAME, \"f\");\n    assertTrue(node1.checkTreeTypeAwareEqualsSilent(node2));\n   }\n   public void testCheckTreeTypeAwareEqualsDifferent() {", "fixed": "     JSTypeRegistry registry = new JSTypeRegistry(testErrorReporter);\n     Node node1 = Node.newString(Token.NAME, \"f\");\n     Node node2 = Node.newString(Token.NAME, \"f\");\n    assertTrue(node1.isEquivalentToTyped(node2));\n   }\n   public void testCheckTreeTypeAwareEqualsDifferent() {", "sourceBeforeFix": "node1.checkTreeTypeAwareEqualsSilent(node2)", "sourceAfterFix": "node1.isEquivalentToTyped(node2)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "fixed": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2fv(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2fv(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "sourceBeforeFix": "EXTFramebufferObject.glGetFramebufferAttachmentParameterEXT(target,attachment,pname,params)", "sourceAfterFix": "EXTFramebufferObject.glGetFramebufferAttachmentParameterivEXT(target,attachment,pname,params)"}
{"fixCommitSHA1": "ba753282c681f55ff64cce2bbb9e545f5992b1ac", "projectName": "dropwizard.metrics", "bugType": "Change Identifier Used", "problem": "             this.startTime = tick();\n             nextScaleTime.set(System.nanoTime() + RESCALE_THRESHOLD);\n         } finally {\n            lockForRescale();\n         }\n     }", "fixed": "             this.startTime = tick();\n             nextScaleTime.set(System.nanoTime() + RESCALE_THRESHOLD);\n         } finally {\n            unlockForRescale();\n         }\n     }", "sourceBeforeFix": "lockForRescale()", "sourceAfterFix": "unlockForRescale()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "73a03b5e232d8f7049a03361e0454cb2eecb90c7", "projectName": "hazelcast.hazelcast", "bugType": "Change Numeric Literal", "problem": " @Category(QuickTest.class)\n public class AdvancedSemaphoreTest extends HazelcastTestSupport {\n    @Test(timeout = 30000)\n     public void testSemaphoreWithFailures() throws InterruptedException {\n         final int k = 4;\n        TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(k + 1);\n         final HazelcastInstance[] instances = factory.newInstances();\n         final ISemaphore semaphore = instances[k].getSemaphore(\"test\");", "fixed": " @Category(QuickTest.class)\n public class AdvancedSemaphoreTest extends HazelcastTestSupport {\n    @Test(timeout = 120000)\n     public void testSemaphoreWithFailures() throws InterruptedException {\n         final int k = 4;\n        final TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(k + 1);\n         final HazelcastInstance[] instances = factory.newInstances();\n         final ISemaphore semaphore = instances[k].getSemaphore(\"test\");", "sourceBeforeFix": "timeout=30000", "sourceAfterFix": "timeout=120000"}
{"fixCommitSHA1": "5eec017be7b418a11c714ca945b891067b5cdaeb", "projectName": "alibaba.dubbo", "bugType": "Change Binary Operator", "problem": "     }\r\n     private Class<?> findSpi(Class clazz) {\r\n        if (clazz.getInterfaces().length <= 0) {\r\n             return null;\r\n         }\r", "fixed": "     }\r\n     private Class<?> findSpi(Class clazz) {\r\n        if (clazz.getInterfaces().length == 0) {\r\n             return null;\r\n         }\r", "sourceBeforeFix": "clazz.getInterfaces().length <= 0", "sourceAfterFix": "clazz.getInterfaces().length == 0"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n \t * @return The number of bytes that the normalized key would maximally take.\n \t */\n\tpublic int getNormalizeKeyLen();\n \t/**\n \t * Checks, whether the given number of bytes for a normalized suffice to determine the order of elements", "fixed": " \t * \n \t * @return The number of bytes that the normalized key would maximally take.\n \t */\n\tpublic abstract int getNormalizeKeyLen();\n \t/**\n \t * Checks, whether the given number of bytes for a normalized suffice to determine the order of elements", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": "* @see\n* @see NormalizableKey\n \t */\n\tpublic void readWithKeyDenormalization(T record, DataInputView source) throws IOException;\n \t/**\n \t * Flag whether normalized key comparisons should be inverted key should be interpreted", "fixed": "* @see\n* @see NormalizableKey\n \t */\n\tpublic abstract void readWithKeyDenormalization(T record, DataInputView source) throws IOException;\n \t/**\n \t * Flag whether normalized key comparisons should be inverted key should be interpreted", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedTelegramEndpointBuilder\n             extends\n                 AdvancedTelegramEndpointConsumerBuilder, AdvancedTelegramEndpointProducerBuilder {\n         default TelegramEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedTelegramEndpointBuilder\n             extends\n                 AdvancedTelegramEndpointConsumerBuilder, AdvancedTelegramEndpointProducerBuilder {\n         default TelegramEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform3(location, v);\r\n \t}\r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform3(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r", "fixed": " \t}\r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform3iv(location, v);\r\n \t}\r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform3iv(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r", "sourceBeforeFix": "GL20.glUniform3(location,v)", "sourceAfterFix": "GL20.glUniform3fv(location,v)"}
{"fixCommitSHA1": "9771ba62390a56363b20e52f12a8b9b34c51da62", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "     public void testBurstySampling() throws Exception {\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedMessageCount(2);\n         mock.setResultWaitTime(3000);\n         List<Exchange> sentExchanges = new ArrayList<Exchange>();", "fixed": "     public void testBurstySampling() throws Exception {\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedMinimumMessageCount(2);\n         mock.setResultWaitTime(3000);\n         List<Exchange> sentExchanges = new ArrayList<Exchange>();", "sourceBeforeFix": "mock.expectedMessageCount(2)", "sourceAfterFix": "mock.expectedMinimumMessageCount(2)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "d76ba8118cca9f2f1c4f0e89e2dd15a9db02f7e8", "projectName": "libgdx.libgdx", "bugType": "Change Binary Operator", "problem": " \t\t\tcase MotionEvent.ACTION_DOWN:\r\n \t\t\tcase MotionEvent.ACTION_POINTER_DOWN:\r\nrealPointerIndex = input.getFreePointerIndex();\n\t\t\t\tif (realPointerIndex > AndroidInput.NUM_TOUCHES) break;\r\n \t\t\t\tinput.realId[realPointerIndex] = pointerId;\r\n \t\t\t\tx = (int)event.getX(pointerIndex);\r\n \t\t\t\ty = (int)event.getY(pointerIndex);\r", "fixed": " \t\t\tcase MotionEvent.ACTION_DOWN:\r\n \t\t\tcase MotionEvent.ACTION_POINTER_DOWN:\r\nrealPointerIndex = input.getFreePointerIndex();\n\t\t\t\tif (realPointerIndex >= AndroidInput.NUM_TOUCHES) break;\r\n \t\t\t\tinput.realId[realPointerIndex] = pointerId;\r\n \t\t\t\tx = (int)event.getX(pointerIndex);\r\n \t\t\t\ty = (int)event.getY(pointerIndex);\r", "sourceBeforeFix": "realPointerIndex > AndroidInput.NUM_TOUCHES", "sourceAfterFix": "realPointerIndex >= AndroidInput.NUM_TOUCHES"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "fixed": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "sourceBeforeFix": "GL20.glUniform1(location,v)", "sourceAfterFix": "GL20.glUniform1iv(location,v)"}
{"fixCommitSHA1": "e2119d33293008fcc876f5fcd58ede2993eb24d6", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnBean(Client.class)\n\t@ConditionalOnEnablednHealthIndicator(\"elasticsearch\")\n \t@EnableConfigurationProperties(ElasticsearchHealthIndicatorProperties.class)\n \tpublic static class ElasticsearchHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<ElasticsearchHealthIndicator, Client> {", "fixed": " \t@Configuration\n \t@ConditionalOnBean(Client.class)\n\t@ConditionalOnEnabledHealthIndicator(\"elasticsearch\")\n \t@EnableConfigurationProperties(ElasticsearchHealthIndicatorProperties.class)\n \tpublic static class ElasticsearchHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<ElasticsearchHealthIndicator, Client> {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"db\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"db\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "37a968f250d8e6b6cfadebb046f2eb1295cd95e4", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": " \t\t\t\t\t\t\t\t\t}\n \t\t\t\t\t\t\t\t}\n \t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcatch (Throwable t) {\n \t\t\t\t\t\t\t\tif (log.isDebugEnabled()) {\n \t\t\t\t\t\t\t\t\tlog.debug(\"Could not set field \" + field.getName() + \" to null in class \"\n \t\t\t\t\t\t\t\t\t        + clazz.getName(), t);", "fixed": " \t\t\t\t\t\t\t\t\t}\n \t\t\t\t\t\t\t\t}\n \t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcatch (Exception t) {\n \t\t\t\t\t\t\t\tif (log.isDebugEnabled()) {\n \t\t\t\t\t\t\t\t\tlog.debug(\"Could not set field \" + field.getName() + \" to null in class \"\n \t\t\t\t\t\t\t\t\t        + clazz.getName(), t);", "sourceBeforeFix": "Throwable t", "sourceAfterFix": "Exception t"}
{"fixCommitSHA1": "cac8c34ac61668aa269366408e613ac0ed5db729", "projectName": "junit-team.junit", "bugType": "Change Modifier", "problem": "     }\n     @FixMethodOrder(MethodSorters.JVM)\n    private static class DummySortJvm {\n         Object alpha(int i, double d, Thread t) {return null;}\n         void beta(int[][] x) {}\n         int gamma() {return 0;}", "fixed": "     }\n     @FixMethodOrder(MethodSorters.JVM)\n    static class DummySortJvm {\n         Object alpha(int i, double d, Thread t) {return null;}\n         void beta(int[][] x) {}\n         int gamma() {return 0;}", "sourceBeforeFix": "10", "sourceAfterFix": "8"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n \t * @throws IOException Thrown if any of the two views raises an exception.\n \t */\n\tpublic void copy(DataInputView source, DataOutputView target) throws IOException;\n }", "fixed": " \t * \n \t * @throws IOException Thrown if any of the two views raises an exception.\n \t */\n\tpublic abstract void copy(DataInputView source, DataOutputView target) throws IOException;\n }", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "53f03358377f3dde21f58e6c841142c6db8a9c32", "projectName": "apache.hive", "bugType": "Change Identifier Used", "problem": "         LOG.warn(\"User has specified \" + queueName + \" queue; ignoring the setting\");\n         queueName = null;\n         hasQueue = false;\n        conf.set(\"tez.queue.name\", null);\n       }\ndefault:\n       }", "fixed": "         LOG.warn(\"User has specified \" + queueName + \" queue; ignoring the setting\");\n         queueName = null;\n         hasQueue = false;\n        conf.unset(\"tez.queue.name\");\n       }\ndefault:\n       }", "sourceBeforeFix": "conf.set(\"tez.queue.name\",null)", "sourceAfterFix": "conf.unset(\"tez.queue.name\")"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface KubernetesNamespacesEndpointBuilder\n             extends\n                 KubernetesNamespacesEndpointConsumerBuilder, KubernetesNamespacesEndpointProducerBuilder {\n         default AdvancedKubernetesNamespacesEndpointBuilder advanced() {", "fixed": "     \n    public interface KubernetesNamespacesEndpointBuilder\n             extends\n                 KubernetesNamespacesEndpointConsumerBuilder, KubernetesNamespacesEndpointProducerBuilder {\n         default AdvancedKubernetesNamespacesEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AtomixSetEndpointBuilder\n             extends\n                 AtomixSetEndpointConsumerBuilder, AtomixSetEndpointProducerBuilder {\n         default AdvancedAtomixSetEndpointBuilder advanced() {", "fixed": "     \n    public interface AtomixSetEndpointBuilder\n             extends\n                 AtomixSetEndpointConsumerBuilder, AtomixSetEndpointProducerBuilder {\n         default AdvancedAtomixSetEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "f24916302751c0e48d107b68a1b0d61aa81d32a8", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "         catch (final ClassNotFoundException ex) {\n            throw new RuntimeException(ex);\n         }\n         return null;", "fixed": "         catch (final ClassNotFoundException ex) {\n            throw new IllegalStateException(ex);\n         }\n         return null;", "sourceBeforeFix": "new RuntimeException(ex)", "sourceAfterFix": "new IllegalStateException(ex)"}
{"fixCommitSHA1": "ab2d880793dd983f1d71e560272cb4fff791cf4c", "projectName": "yusuke.twitter4j", "bugType": "Change Numeric Literal", "problem": "         String authorizeURL = catchPattern(resStr, \"<form action=\\\"\", \"\\\" id=\\\"oauth_form\\\"\");\n         HttpParameter[] params = new HttpParameter[4];\n         params[0] = new HttpParameter(\"authenticity_token\"\n                , catchPattern(resStr, \"\\\"authenticity_token\\\" type=\\\"hidden\\\" value=\\\"\", \"\\\" />\"));\n         params[1] = new HttpParameter(\"oauth_token\",\n                catchPattern(resStr, \"name=\\\"oauth_token\\\" type=\\\"hidden\\\" value=\\\"\", \"\\\" />\"));\n         params[2] = new HttpParameter(\"session[username_or_email]\", screenName);\n         params[3] = new HttpParameter(\"session[password]\", password);\n         response = http.request(new HttpRequest(RequestMethod.POST, authorizeURL, params, null, props));", "fixed": "         String authorizeURL = catchPattern(resStr, \"<form action=\\\"\", \"\\\" id=\\\"oauth_form\\\"\");\n         HttpParameter[] params = new HttpParameter[4];\n         params[0] = new HttpParameter(\"authenticity_token\"\n                , catchPattern(resStr, \"\\\"authenticity_token\\\" type=\\\"hidden\\\" value=\\\"\", \"\\\">\"));\n         params[1] = new HttpParameter(\"oauth_token\",\n                catchPattern(resStr, \"name=\\\"oauth_token\\\" type=\\\"hidden\\\" value=\\\"\", \"\\\">\"));\n         params[2] = new HttpParameter(\"session[username_or_email]\", screenName);\n         params[3] = new HttpParameter(\"session[password]\", password);\n         response = http.request(new HttpRequest(RequestMethod.POST, authorizeURL, params, null, props));", "sourceBeforeFix": "assertEquals(401,te.getStatusCode())", "sourceAfterFix": "assertEquals(403,te.getStatusCode())"}
{"fixCommitSHA1": "55afa119b8685a70ea6335e973814a345e99e2bb", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Change Modifier", "problem": "     return secret;\n   }\n  String getPercentEncodedKey() {\n     return percentEncodedKey;\n   }", "fixed": "     return secret;\n   }\n  public String getPercentEncodedKey() {\n     return percentEncodedKey;\n   }", "sourceBeforeFix": "0", "sourceAfterFix": "1"}
{"fixCommitSHA1": "d725e4c654270636bc7de92cc6d74683b1de29fe", "projectName": "facebook.presto", "bugType": "Change Identifier Used", "problem": "         boolean needPostProjectionCoercion = false;\n         for (FunctionCall aggregate : analysis.getAggregates(node)) {\n             Expression rewritten = subPlan.rewrite(aggregate);\n            Symbol newSymbol = symbolAllocator.newSymbol(rewritten, analysis.getType(aggregate));", "fixed": "         boolean needPostProjectionCoercion = false;\n         for (FunctionCall aggregate : analysis.getAggregates(node)) {\n             Expression rewritten = subPlan.rewrite(aggregate);\n            Symbol newSymbol = symbolAllocator.newSymbol(rewritten, analysis.getTypeWithCoercions(aggregate));", "sourceBeforeFix": "analysis.getType(expression)", "sourceAfterFix": "analysis.getTypeWithCoercions(expression)"}
{"fixCommitSHA1": "8bfa50ba500a6ca952f97f11c8eaa2969947387e", "projectName": "brianfrankcooper.YCSB", "bugType": "Change Identifier Used", "problem": "\t\tlong st=System.currentTimeMillis();\n \t\tdb.read(table,keyname,fields,new HashMap<String,ByteIterator>());\n \t\tdb.update(table,keyname,values);\n\t\tlong en=System.currentTimeMillis();\n\t\tMeasurements.getMeasurements().measure(\"READ-MODIFY-WRITE\", (int)(en-st));\n \t}\n \tpublic void doTransactionScan(DB db)", "fixed": "\t\tlong st=System.nanoTime();\n \t\tdb.read(table,keyname,fields,new HashMap<String,ByteIterator>());\n \t\tdb.update(table,keyname,values);\n\t\tlong en=System.nanoTime();\n\t\tMeasurements.getMeasurements().measure(\"READ-MODIFY-WRITE\", (int)((en-st)/1000));\n \t}\n \tpublic void doTransactionScan(DB db)", "sourceBeforeFix": "System.currentTimeMillis()", "sourceAfterFix": "System.nanoTime()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15864, value = \"Error obtaining input stream from URL %s -- %s\")\n     String errorObtainingUrlStream(String url, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10864, value = \"Error obtaining input stream from URL %s -- %s\")\n     String errorObtainingUrlStream(String url, String message);\n     /**", "sourceBeforeFix": "id=15835", "sourceAfterFix": "id=10835"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface GoogleCalendarEndpointBuilder\n             extends\n                 GoogleCalendarEndpointConsumerBuilder, GoogleCalendarEndpointProducerBuilder {\n         default AdvancedGoogleCalendarEndpointBuilder advanced() {", "fixed": "     \n    public interface GoogleCalendarEndpointBuilder\n             extends\n                 GoogleCalendarEndpointConsumerBuilder, GoogleCalendarEndpointProducerBuilder {\n         default AdvancedGoogleCalendarEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n     */\n     public ResponseList<DirectMessage> getDirectMessages() throws TwitterException {\n        return DirectMessage.constructDirectMessages(get(getBaseURL() + \"direct_messages.json\", true));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n     */\n     public ResponseList<DirectMessage> getDirectMessages() throws TwitterException {\n        return DirectMessage.createDirectMessageList(get(getBaseURL() + \"direct_messages.json\", true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",null,true))"}
{"fixCommitSHA1": "9467bef8ea9a62658b32dd43a76f4f98087d1986", "projectName": "apache.hadoop", "bugType": "Change Unary Operator\t", "problem": "         command = new DeleteCommand(keyName);\n         if (\"--help\".equals(keyName)) {\n           printKeyShellUsage();\n          return -1;\n         }\n       } else if (args[i].equals(\"roll\")) {\n         String keyName = \"--help\";", "fixed": "         command = new DeleteCommand(keyName);\n         if (\"--help\".equals(keyName)) {\n           printKeyShellUsage();\n          return 1;\n         }\n       } else if (args[i].equals(\"roll\")) {\n         String keyName = \"--help\";", "sourceBeforeFix": "-1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "3757a700a89638e5747d966bdaa8266b62c974c8", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "   }\n   @GwtIncompatible(\"Reader\")\n  private void testStreamingDecodes(BaseEncoding encoding, String encoded, String decoded)\n       throws IOException {\n     byte[] bytes;\n     try {\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();", "fixed": "   }\n   @GwtIncompatible(\"Reader\")\n  private static void testStreamingDecodes(BaseEncoding encoding, String encoded, String decoded)\n       throws IOException {\n     byte[] bytes;\n     try {\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "f8c20919f9c2e18e48142c2712e34298f98b983e", "projectName": "spring-projects.spring-boot", "bugType": "Wrong Function Name", "problem": " \t\t}\n \t\tfactory.setContextLifecycleListeners(Arrays.asList(listeners[0], listeners[1]));\n \t\tfactory.addContextLifecycleListeners(listeners[2], listeners[3]);\n\t\tthis.container = factory.getEmbdeddedServletContainer();\n \t\tInOrder ordered = inOrder((Object[]) listeners);\n \t\tfor (LifecycleListener listener : listeners) {\n \t\t\tordered.verify(listener).lifecycleEvent((LifecycleEvent) anyObject());", "fixed": " \t\t}\n \t\tfactory.setContextLifecycleListeners(Arrays.asList(listeners[0], listeners[1]));\n \t\tfactory.addContextLifecycleListeners(listeners[2], listeners[3]);\n\t\tthis.container = factory.getEmbeddedServletContainer();\n \t\tInOrder ordered = inOrder((Object[]) listeners);\n \t\tfor (LifecycleListener listener : listeners) {\n \t\t\tordered.verify(listener).lifecycleEvent((LifecycleEvent) anyObject());", "sourceBeforeFix": "factory.getEmbdeddedServletContainer()", "sourceAfterFix": "factory.getEmbeddedServletContainer()"}
{"fixCommitSHA1": "c136490318387755a73ef7061050010b0ffe6125", "projectName": "Atmosphere.atmosphere", "bugType": "Change Identifier Used", "problem": "         ar = new AtmosphereResourceImpl(config,\n                 broadcaster,\n                 mock(AtmosphereRequest.class),\n                AtmosphereResponse.create(),\n                 mock(BlockingIOCometSupport.class),\n                 atmosphereHandler);", "fixed": "         ar = new AtmosphereResourceImpl(config,\n                 broadcaster,\n                 mock(AtmosphereRequest.class),\n                AtmosphereResponse.newInstance(),\n                 mock(BlockingIOCometSupport.class),\n                 atmosphereHandler);", "sourceBeforeFix": "AtmosphereResponse.create()", "sourceAfterFix": "AtmosphereResponse.newInstance()"}
{"fixCommitSHA1": "a35860eadb4400f069e306ccd76f1a19ecfb3ba1", "projectName": "google.guava", "bugType": "Change Identifier Used", "problem": "   }\n   @Override\n  public N removeOutEdge(Object edge) {\n     N node = super.removeOutEdge(edge);\n     Multiset<N> successors = getReference(successorsReference);\n     if (successors != null) {", "fixed": "   }\n   @Override\n  public N removeOutEdge(E edge) {\n     N node = super.removeOutEdge(edge);\n     Multiset<N> successors = getReference(successorsReference);\n     if (successors != null) {", "sourceBeforeFix": "Object edge", "sourceAfterFix": "E edge"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "bd0ff5e4fdb97904fca84d57792fddc3f7d96862", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "     lockAndUnlock(factory.newReentrantLock(\"foo\"), reps);\n   }\n  private void lockAndUnlock(Lock lock, int reps) {\n     for (int i = 0; i < reps; i++) {\n       lock.lock();\n       lock.unlock();", "fixed": "     lockAndUnlock(factory.newReentrantLock(\"foo\"), reps);\n   }\n  private static void lockAndUnlock(Lock lock, int reps) {\n     for (int i = 0; i < reps; i++) {\n       lock.lock();\n       lock.unlock();", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "270185aba54cef1d8ce59ec347b5623f2e502afe", "projectName": "clojure.clojure", "bugType": "Change Identifier Used", "problem": " \telse\n \t\t{\n \t\tISeq s = RT.seq(sizeOrSeq);\n\t\tint size = s.count();\n \t\tint[] ret = new int[size];\n \t\tfor(int i = 0; i < size && s != null; i++, s = s.next())\n \t\t\tret[i] = ((Number) s.first()).intValue();", "fixed": " \telse\n \t\t{\n \t\tISeq s = RT.seq(sizeOrSeq);\n\t\tint size = RT.count(s);\n \t\tint[] ret = new int[size];\n \t\tfor(int i = 0; i < size && s != null; i++, s = s.next())\n \t\t\tret[i] = ((Number) s.first()).intValue();", "sourceBeforeFix": "s.count()", "sourceAfterFix": "RT.count(s)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedJmsEndpointBuilder\n             extends\n                 AdvancedJmsEndpointConsumerBuilder, AdvancedJmsEndpointProducerBuilder {\n         default JmsEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedJmsEndpointBuilder\n             extends\n                 AdvancedJmsEndpointConsumerBuilder, AdvancedJmsEndpointProducerBuilder {\n         default JmsEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15852, value = \"Caught %s storing deployment content -- %s\")\n     String caughtExceptionStoringDeploymentContent(String exceptionName, Throwable exception);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10852, value = \"Caught %s storing deployment content -- %s\")\n     String caughtExceptionStoringDeploymentContent(String exceptionName, Throwable exception);\n     /**", "sourceBeforeFix": "id=15834", "sourceAfterFix": "id=10834"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedJcrEndpointBuilder\n             extends\n                 AdvancedJcrEndpointConsumerBuilder, AdvancedJcrEndpointProducerBuilder {\n         default JcrEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedJcrEndpointBuilder\n             extends\n                 AdvancedJcrEndpointConsumerBuilder, AdvancedJcrEndpointProducerBuilder {\n         default JcrEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "85d8d2fce8253c065ccaa9b02d8a30a58bbea67b", "projectName": "swagger-api.swagger-core", "bugType": "Change Identifier Used", "problem": "                 if (getter != null) {\n                     if (paramType == null) {\n                        paramType = getter.getRawReturnType();\n                     }\n                     for (final Annotation fieldAnnotation : getter.annotations()) {", "fixed": "                 if (getter != null) {\n                     if (paramType == null) {\n                        paramType = getter.getType();\n                     }\n                     for (final Annotation fieldAnnotation : getter.annotations()) {", "sourceBeforeFix": "field.getRawType()", "sourceAfterFix": "field.getType()"}
{"fixCommitSHA1": "5c387443a641305b64f25932de36de766d1f541f", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "     public void pickAddress() throws Exception {\n         try {\n             bindAddress = memberAddressProvider.getBindAddress();\n            logger.info(\"Using bind address: \" + publicAddress);\n             publicAddress = memberAddressProvider.getPublicAddress();\n             validatePublicAddress(publicAddress);", "fixed": "     public void pickAddress() throws Exception {\n         try {\n             bindAddress = memberAddressProvider.getBindAddress();\n            logger.info(\"Using bind address: \" + bindAddress);\n             publicAddress = memberAddressProvider.getPublicAddress();\n             validatePublicAddress(publicAddress);", "sourceBeforeFix": "\"Using bind address: \" + publicAddress", "sourceAfterFix": "\"Using bind address: \" + bindAddress"}
{"fixCommitSHA1": "8b22663471292a0094c56876160f3266b259e696", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "             final String serverGroup = entry.getKey().getServerGroupName();\n             groupNames.add(serverGroup);\n             final String hostName = entry.getKey().getHostName();\n            final String serverName = entry.getKey().getHostName();\n             if (!groupToServerMap.containsKey(serverGroup)) {\n                 groupToServerMap.put(serverGroup, new TreeSet<HostServer>());\n             }", "fixed": "             final String serverGroup = entry.getKey().getServerGroupName();\n             groupNames.add(serverGroup);\n             final String hostName = entry.getKey().getHostName();\n            final String serverName = entry.getKey().getServerName();\n             if (!groupToServerMap.containsKey(serverGroup)) {\n                 groupToServerMap.put(serverGroup, new TreeSet<HostServer>());\n             }", "sourceBeforeFix": "entry.getKey().getHostName()", "sourceAfterFix": "entry.getKey().getServerName()"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCachePuts(1);\n            statistics.addPutTimeNano(System.nanoTime() - start);\n         }\n         return result;\n     }", "fixed": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCachePuts(1);\n            statistics.addPutTimeNanos(System.nanoTime() - start);\n         }\n         return result;\n     }", "sourceBeforeFix": "statistics.addGetTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addGetTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  private final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "bbb28b514aadd4fc649dd0b7a47c6ece4d629fa7", "projectName": "apache.camel", "bugType": "Less Specific If", "problem": "                                        if (body.endsWith(\"6\")) {\n                                             log.info(\"5th message received.  Rolling back.\");\n                                             exchange.getOut().setFault(true);\n                                             exchange.getOut().setBody(\"5th message received.  Rolling back.\");", "fixed": "                                        if (body.endsWith(\"6\") || body.endsWith(\"10\")) {\n                                             log.info(\"5th message received.  Rolling back.\");\n                                             exchange.getOut().setFault(true);\n                                             exchange.getOut().setBody(\"5th message received.  Rolling back.\");", "sourceBeforeFix": "body.endsWith(\"6\")", "sourceAfterFix": "body.endsWith(\"6\") || body.endsWith(\"10\")"}
{"fixCommitSHA1": "626cf14a6e42fa0a2d144e8e16940e09bafd754a", "projectName": "druid-io.druid", "bugType": "Change Identifier Used", "problem": "         }\n     );\n    log.info(\"Performing lookup: %s --> %s\", ips, retVal);\n     return retVal;\n   }", "fixed": "         }\n     );\n    log.debug(\"Performing lookup: %s --> %s\", ips, retVal);\n     return retVal;\n   }", "sourceBeforeFix": "log.info(\"Performing lookup: %s --> %s\",nodeIds,retVal)", "sourceAfterFix": "log.debug(\"Performing lookup: %s --> %s\",nodeIds,retVal)"}
{"fixCommitSHA1": "6bae902bd35ed4f57e7a5d612b7ad9b72f4559bc", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "     Node node1 = Node.newString(Token.NAME, \"f\");\n     node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n     Node node2 = Node.newString(Token.NAME, \"f\");\n    assertFalse(node1.checkTreeTypeAwareEqualsSilent(node2));\n   }\n   public void testVarArgs1() {", "fixed": "     Node node1 = Node.newString(Token.NAME, \"f\");\n     node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n     Node node2 = Node.newString(Token.NAME, \"f\");\n    assertFalse(node1.isEquivalentToTyped(node2));\n   }\n   public void testVarArgs1() {", "sourceBeforeFix": "node1.checkTreeEqualsSilent(node1)", "sourceAfterFix": "node1.isEquivalentTo(node1)"}
{"fixCommitSHA1": "34e23fe425e62f240a65c435d41adfbbe211522d", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "     TableDescriptor htd = TableDescriptorBuilder.copy(tableName, snapshotTableDesc);\n     org.apache.hadoop.hbase.client.SnapshotDescription snapshotPOJO = null;\n     if (cpHost != null) {\n      snapshotPOJO = ProtobufUtil.createSnapshotDesc(reqSnapshot);\n       cpHost.preCloneSnapshot(snapshotPOJO, htd);\n     }\n     long procId;", "fixed": "     TableDescriptor htd = TableDescriptorBuilder.copy(tableName, snapshotTableDesc);\n     org.apache.hadoop.hbase.client.SnapshotDescription snapshotPOJO = null;\n     if (cpHost != null) {\n      snapshotPOJO = ProtobufUtil.createSnapshotDesc(snapshot);\n       cpHost.preCloneSnapshot(snapshotPOJO, htd);\n     }\n     long procId;", "sourceBeforeFix": "ProtobufUtil.createSnapshotDesc(reqSnapshot)", "sourceAfterFix": "ProtobufUtil.createSnapshotDesc(snapshot)"}
{"fixCommitSHA1": "000334ea2a717a2b5bf2a61f021aad85bb79d9cb", "projectName": "deeplearning4j.deeplearning4j", "bugType": "Change Identifier Used", "problem": "      * @return\n      */\n     public static String defaultDeviceForThread() {\n        Integer deviceForThread = Nd4j.getAffinityManager().getDeviceForThread(Thread.currentThread());\n         String deviceName = null;\n         if(Nd4j.getBackend().getClass().getName().contains(\"JCublasBackend\")) {", "fixed": "      * @return\n      */\n     public static String defaultDeviceForThread() {\n        Integer deviceForThread = Nd4j.getAffinityManager().getDeviceForCurrentThread();\n         String deviceName = null;\n         if(Nd4j.getBackend().getClass().getName().contains(\"JCublasBackend\")) {", "sourceBeforeFix": "Nd4j.getAffinityManager().getDeviceForThread(Thread.currentThread())", "sourceAfterFix": "Nd4j.getAffinityManager().getDeviceForCurrentThread()"}
{"fixCommitSHA1": "464e20480e8c188d6dcae7dbce2b9c5098d3584f", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Same Function Swap Args", "problem": "             future.get();\n             future.addListener(() -> counter.decrementAndGet(), Runnable::run);\n         }\n        assertEquals(0, counter.get());\n     }\n }", "fixed": "             future.get();\n             future.addListener(() -> counter.decrementAndGet(), Runnable::run);\n         }\n        assertEquals(counter.get(), 0);\n     }\n }", "sourceBeforeFix": "assertEquals(0,counter.get())", "sourceAfterFix": "assertEquals(counter.get(),0)"}
{"fixCommitSHA1": "15cde0d69ac71add991299b9b11ccca9c832232c", "projectName": "facebook.presto", "bugType": "Same Function More Args", "problem": "                     .map(PlanNode::getId)\n                     .collect(toList());\n            NodeRepresentation nodeOutput = addNode(node, operatorName, format(formatString, arguments.toArray(new Object[0])), allNodes, ImmutableList.of(), ImmutableList.of());\n             if (projectNode.isPresent()) {\n                 printAssignments(nodeOutput, projectNode.get().getAssignments());", "fixed": "                     .map(PlanNode::getId)\n                     .collect(toList());\n            NodeRepresentation nodeOutput = addNode(\n                    node,\n                    operatorName,\n                    format(formatString, arguments.toArray(new Object[0])),\n                    allNodes,\n                    ImmutableList.of(sourceNode),\n                    ImmutableList.of());\n             if (projectNode.isPresent()) {\n                 printAssignments(nodeOutput, projectNode.get().getAssignments());", "sourceBeforeFix": "ImmutableList.of()", "sourceAfterFix": "ImmutableList.of(sourceNode)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<Status> getUserTimeline(String id, Paging paging)\n             throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline/\" + id + \".json\",\n                 null, paging.asPostParameterList(), http.isAuthenticationEnabled()));\n     }", "fixed": "      */\n     public ResponseList<Status> getUserTimeline(String id, Paging paging)\n             throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline/\" + id + \".json\",\n                 null, paging.asPostParameterList(), http.isAuthenticationEnabled()));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline.json\",true))"}
{"fixCommitSHA1": "2f880c73edb600ab92cdd580ac74f7388b5c6135", "projectName": "Alluxio.alluxio", "bugType": "Change Modifier", "problem": "     }\n   }\n  public void addBlock(int fileId, int blockIndex, long blockLength) {\n     if (INACTIVE) {\n       return;\n     }", "fixed": "     }\n   }\n  public synchronized void addBlock(int fileId, int blockIndex, long blockLength) {\n     if (INACTIVE) {\n       return;\n     }", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "         if (isStatisticsEnabled()) {\n             if (isPutSucceed) {\n                 statistics.increaseCachePuts(1);\n                statistics.addPutTimeNano(System.nanoTime() - start);\n             }\n             if (getValue) {\n                 if (oldValueNull) {", "fixed": "         if (isStatisticsEnabled()) {\n             if (isPutSucceed) {\n                 statistics.increaseCachePuts(1);\n                statistics.addPutTimeNanos(System.nanoTime() - start);\n             }\n             if (getValue) {\n                 if (oldValueNull) {", "sourceBeforeFix": "statistics.addGetTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addGetTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "78bc92d81bf9815f4a4c27a5af7cdb88e119b734", "projectName": "antlr.antlr4", "bugType": "Change Identifier Used", "problem": " \tprotected int boundingBoxWidth;\n \tprotected int boundingBoxHeight;\n\tprotected FontMetrics fontMetrics;\n \tprotected String fontName;\n \tprotected int fontSize = 12;\n \tprotected double lineWidth = 0.3;", "fixed": " \tprotected int boundingBoxWidth;\n \tprotected int boundingBoxHeight;\n\tprotected BasicFontMetrics fontMetrics;\n \tprotected String fontName;\n \tprotected int fontSize = 12;\n \tprotected double lineWidth = 0.3;", "sourceBeforeFix": "(FontMetrics)c.newInstance()", "sourceAfterFix": "(BasicFontMetrics)c.newInstance()"}
{"fixCommitSHA1": "9771ba62390a56363b20e52f12a8b9b34c51da62", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "     public void testSamplingUsingmessageFrequency() throws Exception {\n         long totalMessages = 100;\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedMessageCount(10);\n         mock.setResultWaitTime(100);\n         for (int i = 0; i < totalMessages; i++) {", "fixed": "     public void testSamplingUsingmessageFrequency() throws Exception {\n         long totalMessages = 100;\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedMinimumMessageCount(10);\n         mock.setResultWaitTime(100);\n         for (int i = 0; i < totalMessages; i++) {", "sourceBeforeFix": "mock.expectedMessageCount(10)", "sourceAfterFix": "mock.expectedMinimumMessageCount(10)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  private final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e7bf415427b37bbc760ff9b9c69650db8ec477e4", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnBean(ConnectionFactory.class)\n\t@ConditionalOnEnablednHealthIndicator(\"jms\")\n \tpublic static class JmsHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<JmsHealthIndicator, ConnectionFactory> {", "fixed": " \t@Configuration\n \t@ConditionalOnBean(ConnectionFactory.class)\n\t@ConditionalOnEnabledHealthIndicator(\"jms\")\n \tpublic static class JmsHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<JmsHealthIndicator, ConnectionFactory> {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"jms\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"jms\")"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15852, value = \"Caught %s storing deployment content -- %s\")\n     String caughtExceptionStoringDeploymentContent(String exceptionName, Throwable exception);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10852, value = \"Caught %s storing deployment content -- %s\")\n     String caughtExceptionStoringDeploymentContent(String exceptionName, Throwable exception);\n     /**", "sourceBeforeFix": "id=15844", "sourceAfterFix": "id=10844"}
{"fixCommitSHA1": "99768f3572346de16f2e9985a957ed1f8119d66e", "projectName": "xetorthio.jedis", "bugType": "Wrong Function Name", "problem": "     return new JedisClusterCommand<Long>(connectionHandler, maxAttempts) {\n       @Override\n       public Long execute(Jedis connection) {\n        return connection.pexpire(key, millisecondsTimestamp);\n       }\n     }.runBinary(key);\n   }", "fixed": "     return new JedisClusterCommand<Long>(connectionHandler, maxAttempts) {\n       @Override\n       public Long execute(Jedis connection) {\n        return connection.pexpireAt(key, millisecondsTimestamp);\n       }\n     }.runBinary(key);\n   }", "sourceBeforeFix": "connection.pexpire(key,millisecondsTimestamp)", "sourceAfterFix": "connection.pexpireAt(key,millisecondsTimestamp)"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @return\n \t * @throws APIException\n      */\n\tpublic List<Locale> getSearchLocales(Locale currentLocale, User user) throws APIException;\n \t/**\n \t * Returns a list of locales used by the user when searching.", "fixed": " \t * @return\n \t * @throws APIException\n      */\n\tpublic List<Locale> getSearchLocales(Locale currentLocale, User user);\n \t/**\n \t * Returns a list of locales used by the user when searching.", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "da1e7159eaa3dba8f47ee6c22177a4472fd33cb6", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "     private static final String ARCHIVE_NAME = \"stateless-ejb2-failover-test\";\n     private static final String ARCHIVE_NAME_DD = \"stateless-ejb2-failover-dd-test\";\n    private static final Integer PORT_2 = 8080;\n     private static final String HOST_2 = System.getProperty(\"node1\");\n     private static final String REMOTE_PORT_PROPERTY_NAME = \"remote.connection.default.port\";\n     private static final String REMOTE_HOST_PROPERTY_NAME = \"remote.connection.default.host\";", "fixed": "     private static final String ARCHIVE_NAME = \"stateless-ejb2-failover-test\";\n     private static final String ARCHIVE_NAME_DD = \"stateless-ejb2-failover-dd-test\";\n    private static final Integer PORT_2 = 8180;\n     private static final String HOST_2 = System.getProperty(\"node1\");\n     private static final String REMOTE_PORT_PROPERTY_NAME = \"remote.connection.default.port\";\n     private static final String REMOTE_HOST_PROPERTY_NAME = \"remote.connection.default.host\";", "sourceBeforeFix": "PORT_2=8080", "sourceAfterFix": "PORT_2=8180"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "a77c4414675ac5ff9c3d8b9bcb12ac8866ca4cfc", "projectName": "neo4j.neo4j", "bugType": "Change Modifier", "problem": "     }\n     @Override\n    public void stop()\n     {\n         recovered = false;\n         xaDataSourceManager.removeDataSourceRegistrationListener( dataSourceRegistrationListener );", "fixed": "     }\n     @Override\n    public synchronized void stop()\n     {\n         recovered = false;\n         xaDataSourceManager.removeDataSourceRegistrationListener( dataSourceRegistrationListener );", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15845, value = \"Invalid rollout plan. Server group %s has a %s value of %s; must be between 0 and 100.\")\n     String invalidRolloutPlanRange(String name, String propertyName, int value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10845, value = \"Invalid rollout plan. Server group %s has a %s value of %s; must be between 0 and 100.\")\n     String invalidRolloutPlanRange(String name, String propertyName, int value);\n     /**", "sourceBeforeFix": "id=15843", "sourceAfterFix": "id=10843"}
{"fixCommitSHA1": "b4fde911d3cfb7d45c3264ff553b264486772df8", "projectName": "hazelcast.hazelcast", "bugType": "Change Modifier", "problem": " @Category(QuickTest.class)\n public class QueryEntryTest extends HazelcastTestSupport {\n    private static SerializationService serializationService;\n     @Before\n     public void before() {", "fixed": " @Category(QuickTest.class)\n public class QueryEntryTest extends HazelcastTestSupport {\n    private SerializationService serializationService;\n     @Before\n     public void before() {", "sourceBeforeFix": "10", "sourceAfterFix": "2"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStream<OUT> writeAsCsv(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsCsv<OUT> format, long millis, OUT endTuple) {\n\t\tDataStream<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByMillis<OUT>(\n \t\t\t\tpath, format, millis, endTuple));\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "fixed": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStreamSink<OUT> writeAsCsv(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsCsv<OUT> format, long millis, OUT endTuple) {\n\t\tDataStreamSink<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByMillis<OUT>(\n \t\t\t\tpath, format, millis, endTuple));\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "f135cc4188dd173e8fc175bc5d26cf1a970ac39e", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "                         flags.add(Flag.CANCELLED);\n                         response.get(OUTCOME).set(CANCELLED);\n                         response.get(FAILURE_DESCRIPTION).set(\"Operation cancelled\");\n                        response.set(ROLLED_BACK).set(true);\n                         return ResultAction.ROLLBACK;\n                     }\n                 }", "fixed": "                         flags.add(Flag.CANCELLED);\n                         response.get(OUTCOME).set(CANCELLED);\n                         response.get(FAILURE_DESCRIPTION).set(\"Operation cancelled\");\n                        response.get(ROLLED_BACK).set(true);\n                         return ResultAction.ROLLBACK;\n                     }\n                 }", "sourceBeforeFix": "response.set(ROLLED_BACK)", "sourceAfterFix": "response.get(ROLLED_BACK)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getUserListStatuses(String user, int id, Paging paging) throws TwitterException {\n        return Status.constructStatuses(get(getApiBaseURL() + V1 + user +\n                 \"/lists/\" + id + \"/statuses.json\", new PostParameter[0],\n                 paging.asPostParameterList(Paging.SMCP, Paging.PER_PAGE), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getUserListStatuses(String user, int id, Paging paging) throws TwitterException {\n        return Status.createStatuseList(get(getApiBaseURL() + V1 + user +\n                 \"/lists/\" + id + \"/statuses.json\", new PostParameter[0],\n                 paging.asPostParameterList(Paging.SMCP, Paging.PER_PAGE), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",null,true))"}
{"fixCommitSHA1": "09694b9eaf40fff637428b473b8fdcef8f8c37c2", "projectName": "Alluxio.alluxio", "bugType": "Change Numeric Literal", "problem": "       \"alluxio.worker.block.allocator.MaxFreeAllocator\"),\n   WORKER_BIND_HOST(Name.WORKER_BIND_HOST, \"0.0.0.0\"),\n   WORKER_BLOCK_HEARTBEAT_INTERVAL_MS(Name.WORKER_BLOCK_HEARTBEAT_INTERVAL_MS, 1000),\n  WORKER_BLOCK_HEARTBEAT_TIMEOUT_MS(Name.WORKER_BLOCK_HEARTBEAT_TIMEOUT_MS, 10000),\n   WORKER_BLOCK_THREADS_MAX(Name.WORKER_BLOCK_THREADS_MAX, 2048),\n   WORKER_BLOCK_THREADS_MIN(Name.WORKER_BLOCK_THREADS_MIN, 256),\n   WORKER_DATA_BIND_HOST(Name.WORKER_DATA_BIND_HOST, \"0.0.0.0\"),", "fixed": "       \"alluxio.worker.block.allocator.MaxFreeAllocator\"),\n   WORKER_BIND_HOST(Name.WORKER_BIND_HOST, \"0.0.0.0\"),\n   WORKER_BLOCK_HEARTBEAT_INTERVAL_MS(Name.WORKER_BLOCK_HEARTBEAT_INTERVAL_MS, 1000),\n  WORKER_BLOCK_HEARTBEAT_TIMEOUT_MS(Name.WORKER_BLOCK_HEARTBEAT_TIMEOUT_MS, 60000),\n   WORKER_BLOCK_THREADS_MAX(Name.WORKER_BLOCK_THREADS_MAX, 2048),\n   WORKER_BLOCK_THREADS_MIN(Name.WORKER_BLOCK_THREADS_MIN, 256),\n   WORKER_DATA_BIND_HOST(Name.WORKER_DATA_BIND_HOST, \"0.0.0.0\"),", "sourceBeforeFix": "WORKER_BLOCK_HEARTBEAT_TIMEOUT_MS(Name.WORKER_BLOCK_HEARTBEAT_TIMEOUT_MS,10000)", "sourceAfterFix": "WORKER_BLOCK_HEARTBEAT_TIMEOUT_MS(Name.WORKER_BLOCK_HEARTBEAT_TIMEOUT_MS,60000)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public List<Trends> getWeeklyTrends() throws TwitterException {\n        return Trends.constructTrendsList(get(getSearchBaseURL()\n                 + \"trends/weekly.json\", false));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public List<Trends> getWeeklyTrends() throws TwitterException {\n        return Trends.createTrendsList(get(getSearchBaseURL()\n                 + \"trends/weekly.json\", false));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\",true))"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "fixed": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4fv(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4fv(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "sourceBeforeFix": "GL20.glUniform4(location,v)", "sourceAfterFix": "GL20.glUniform4fv(location,v)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "0b3f7b13bf8c9eac4a0b9835152fd15859258978", "projectName": "google.auto", "bugType": "Same Function More Args", "problem": "           + \" interface; try using @AutoAnnotation instead\", type);\n     }\n    ImmutableSet<ExecutableElement> methods = getLocalAndInheritedMethods(type, processingEnv.getElementUtils());\n    ImmutableSet<ExecutableElement> methodsToImplement = methodsToImplement(methods);\n     String fqExtClass = TypeSimplifier.classNameOf(type);\n     List<AutoValueExtension> appliedExtensions = new ArrayList<AutoValueExtension>();", "fixed": "           + \" interface; try using @AutoAnnotation instead\", type);\n     }\n    ImmutableSet<ExecutableElement> methods =\n        getLocalAndInheritedMethods(type, processingEnv.getElementUtils());\n    ImmutableSet<ExecutableElement> methodsToImplement = methodsToImplement(type, methods);\n     String fqExtClass = TypeSimplifier.classNameOf(type);\n     List<AutoValueExtension> appliedExtensions = new ArrayList<AutoValueExtension>();", "sourceBeforeFix": "methodsToImplement(methods)", "sourceAfterFix": "methodsToImplement(type,methods)"}
{"fixCommitSHA1": "6ad626ae51a157306ddf4165f13ff5eb5b4d5e8b", "projectName": "apache.flink", "bugType": "Same Function More Args", "problem": " \t\t\tif (bootstrap != null) {\n \t\t\t\tEventLoopGroup group = bootstrap.group();\n \t\t\t\tif (group != null) {\n\t\t\t\t\tgroup.shutdownGracefully();\n \t\t\t\t}\n \t\t\t}\n \t\t}", "fixed": " \t\t\tif (bootstrap != null) {\n \t\t\t\tEventLoopGroup group = bootstrap.group();\n \t\t\t\tif (group != null) {\n\t\t\t\t\tgroup.shutdownGracefully(0, 10, TimeUnit.SECONDS);\n \t\t\t\t}\n \t\t\t}\n \t\t}", "sourceBeforeFix": "group.shutdownGracefully()", "sourceAfterFix": "group.shutdownGracefully(0,10,TimeUnit.SECONDS)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedTwitterDirectMessageEndpointBuilder\n             extends\n                 AdvancedTwitterDirectMessageEndpointConsumerBuilder, AdvancedTwitterDirectMessageEndpointProducerBuilder {\n         default TwitterDirectMessageEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedTwitterDirectMessageEndpointBuilder\n             extends\n                 AdvancedTwitterDirectMessageEndpointConsumerBuilder, AdvancedTwitterDirectMessageEndpointProducerBuilder {\n         default TwitterDirectMessageEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "8ce55ac632d89935288ef4a6fc1cdb640fef3884", "projectName": "druid-io.druid", "bugType": "Change Numeric Literal", "problem": "   {\n     LogLevelAdjuster.register();\n    if (args.length != 3) {\n       log.info(\"Usage: ExecutorMain <task.json> <status.json>\");\n       System.exit(2);\n     }", "fixed": "   {\n     LogLevelAdjuster.register();\n    if (args.length != 2) {\n       log.info(\"Usage: ExecutorMain <task.json> <status.json>\");\n       System.exit(2);\n     }", "sourceBeforeFix": "args.length != 3", "sourceAfterFix": "args.length != 2"}
{"fixCommitSHA1": "f135cc4188dd173e8fc175bc5d26cf1a970ac39e", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "                 ModelNode oldResponse = response;\n                 try {\n                     flags = EnumSet.noneOf(Flag.class);\n                    response = step.response;\n                     ModelNode newOperation = operation = step.operation;\n                     modelAddress = PathAddress.pathAddress(newOperation.get(ADDRESS));\n                     step.handler.execute(this, newOperation);", "fixed": "                 ModelNode oldResponse = response;\n                 try {\n                     flags = EnumSet.noneOf(Flag.class);\n                    response = this.response = step.response;\n                     ModelNode newOperation = operation = step.operation;\n                     modelAddress = PathAddress.pathAddress(newOperation.get(ADDRESS));\n                     step.handler.execute(this, newOperation);", "sourceBeforeFix": "response.set(ROLLED_BACK)", "sourceAfterFix": "response.get(ROLLED_BACK)"}
{"fixCommitSHA1": "9771ba62390a56363b20e52f12a8b9b34c51da62", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "     public void testSamplingFromExchangeStream() throws Exception {\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedMessageCount(2);\n         mock.setResultWaitTime(3000);\n         List<Exchange> sentExchanges = new ArrayList<Exchange>();", "fixed": "     public void testSamplingFromExchangeStream() throws Exception {\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedMinimumMessageCount(2);\n         mock.setResultWaitTime(3000);\n         List<Exchange> sentExchanges = new ArrayList<Exchange>();", "sourceBeforeFix": "mock.expectedMessageCount(10)", "sourceAfterFix": "mock.expectedMinimumMessageCount(10)"}
{"fixCommitSHA1": "265bf95ce57989d414abb9296a87093f78ea9492", "projectName": "hazelcast.hazelcast", "bugType": "Change Unary Operator\t", "problem": "     public void run() throws Exception {\n         AtomicReferenceContainer atomicReferenceContainer = getReferenceContainer();\n         returnValue = atomicReferenceContainer.compareAndSet(expect, update);\n        shouldBackup = !returnValue;\n     }\n     @Override", "fixed": "     public void run() throws Exception {\n         AtomicReferenceContainer atomicReferenceContainer = getReferenceContainer();\n         returnValue = atomicReferenceContainer.compareAndSet(expect, update);\n        shouldBackup = returnValue;\n     }\n     @Override", "sourceBeforeFix": "!returnValue", "sourceAfterFix": "returnValue"}
{"fixCommitSHA1": "439ab4ca7835557966bcad729cb0dc0a6fc99ceb", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "  */\n public class RoutePolicyProcessor extends DelegateAsyncProcessor {\n    private final Log LOG = LogFactory.getLog(RoutePolicyProcessor.class);\n     private final List<RoutePolicy> routePolicies;\n     private Route route;", "fixed": "  */\n public class RoutePolicyProcessor extends DelegateAsyncProcessor {\n    private static final Log LOG = LogFactory.getLog(RoutePolicyProcessor.class);\n     private final List<RoutePolicy> routePolicies;\n     private Route route;", "sourceBeforeFix": "18", "sourceAfterFix": "26"}
{"fixCommitSHA1": "213109c115e65588b265650eee80fad7652b2129", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t\ttry {\r\n \t\t\tJoglMusic music = new JoglMusic(((JoglFileHandle)file));\r\n \t\t\treturn music;\r\n\t\t} catch (Exception e) {\r\n \t\t\tthrow new GdxRuntimeException(\"Couldn't create Music instance from file '\" + file + \"'\", e);\r\n \t\t}\r\n \t}\r", "fixed": " \t\ttry {\r\n \t\t\tJoglMusic music = new JoglMusic(((JoglFileHandle)file));\r\n \t\t\treturn music;\r\n\t\t} catch (Throwable e) {\r\n \t\t\tthrow new GdxRuntimeException(\"Couldn't create Music instance from file '\" + file + \"'\", e);\r\n \t\t}\r\n \t}\r", "sourceBeforeFix": "Exception e", "sourceAfterFix": "Throwable e"}
{"fixCommitSHA1": "85d8d2fce8253c065ccaa9b02d8a30a58bbea67b", "projectName": "swagger-api.swagger-core", "bugType": "Wrong Function Name", "problem": "                 if (setter != null) {\n                     if (paramType == null) {\n                        paramType = setter.getRawParameterTypes() != null ? setter.getRawParameterTypes()[0] : null;\n                     }\n                     for (final Annotation fieldAnnotation : setter.annotations()) {", "fixed": "                 if (setter != null) {\n                     if (paramType == null) {\n                    \tparamType = setter.getParameterType(0); \n                     }\n                     for (final Annotation fieldAnnotation : setter.annotations()) {", "sourceBeforeFix": "getter.getRawReturnType()", "sourceAfterFix": "getter.getType()"}
{"fixCommitSHA1": "6bae902bd35ed4f57e7a5d612b7ad9b72f4559bc", "projectName": "google.closure-compiler", "bugType": "Wrong Function Name", "problem": "     node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n     Node node2 = Node.newString(Token.NAME, \"f\");\n     node2.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n    assertTrue(node1.checkTreeTypeAwareEqualsSilent(node2));\n   }\n   public void testCheckTreeTypeAwareEqualsSameNull() {", "fixed": "     node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n     Node node2 = Node.newString(Token.NAME, \"f\");\n     node2.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n    assertTrue(node1.isEquivalentToTyped(node2));\n   }\n   public void testCheckTreeTypeAwareEqualsSameNull() {", "sourceBeforeFix": "node1.checkTreeEqualsSilent(node1)", "sourceAfterFix": "node1.isEquivalentTo(node1)"}
{"fixCommitSHA1": "4281cc1c5d3aa51b56db9d9e251c761c52a855e3", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t * before growing the backing table. */\n \tpublic IntFloatMap (int initialCapacity, float loadFactor) {\n \t\tif (initialCapacity < 0) throw new IllegalArgumentException(\"initialCapacity must be >= 0: \" + initialCapacity);\n\t\tif (capacity > 1 << 30) throw new IllegalArgumentException(\"initialCapacity is too large: \" + initialCapacity);\n \t\tcapacity = MathUtils.nextPowerOfTwo(initialCapacity);\n \t\tif (loadFactor <= 0) throw new IllegalArgumentException(\"loadFactor must be > 0: \" + loadFactor);", "fixed": " \t * before growing the backing table. */\n \tpublic IntFloatMap (int initialCapacity, float loadFactor) {\n \t\tif (initialCapacity < 0) throw new IllegalArgumentException(\"initialCapacity must be >= 0: \" + initialCapacity);\n\t\tif (initialCapacity > 1 << 30) throw new IllegalArgumentException(\"initialCapacity is too large: \" + initialCapacity);\n \t\tcapacity = MathUtils.nextPowerOfTwo(initialCapacity);\n \t\tif (loadFactor <= 0) throw new IllegalArgumentException(\"loadFactor must be > 0: \" + loadFactor);", "sourceBeforeFix": "capacity > 1 << 30", "sourceAfterFix": "initialCapacity > 1 << 30"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserListMemberships(String user, long cursor) throws TwitterException {\n        return twitter4j.List.constructListOfLists(get(getApiBaseURL() + V1 +\n                 user + \"/lists/memberships.json?cursor=\" + cursor, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserListMemberships(String user, long cursor) throws TwitterException {\n        return twitter4j.List.createListList(get(getApiBaseURL() + V1 +\n                 user + \"/lists/memberships.json?cursor=\" + cursor, true));\n     }", "sourceBeforeFix": "DirectMessage.constructDirectMessages(get(getBaseURL() + \"direct_messages.json\",true))", "sourceAfterFix": "DirectMessage.createDirectMessageList(get(getBaseURL() + \"direct_messages.json\",true))"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getMentions() throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",\n                 null, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getMentions() throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",\n                 null, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/public_timeline.json\",false))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/public_timeline.json\",false))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  private final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 15832, value = \"There is already a registered host named '%s'\")\n     String slaveAlreadyRegistered(String slaveName);\n     /**", "fixed": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 10832, value = \"There is already a registered host named '%s'\")\n     String slaveAlreadyRegistered(String slaveName);\n     /**", "sourceBeforeFix": "id=15871", "sourceAfterFix": "id=10871"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface StAXEndpointBuilder\n            extends\n                EndpointProducerBuilder {\n         default AdvancedStAXEndpointBuilder advanced() {\n             return (AdvancedStAXEndpointBuilder) this;\n         }", "fixed": "     \n    public interface StAXEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedStAXEndpointBuilder advanced() {\n             return (AdvancedStAXEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites(int page) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"favorites.json\", \"page\", String.valueOf(page), true));\n     }\n     /**", "fixed": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites(int page) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"favorites.json\", \"page\", String.valueOf(page), true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedValidatorEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default ValidatorEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedValidatorEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default ValidatorEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "e2efffc72002968f835a0ea6a70f8e7762752b15", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": " \t\tConceptName anotherConceptName = ConceptNameTest.createMockConceptName(3, Context.getLocale(), null, true);\r\n \t\tanotherConceptName.setName(duplicateName);\r\n \t\tnewConcept.addName(anotherConceptName);\r\n\t\tErrors errors = new BindException(concept, \"concept\");\r\n \t\tnew ConceptValidator().validate(newConcept, errors);\r\n \t}\r", "fixed": " \t\tConceptName anotherConceptName = ConceptNameTest.createMockConceptName(3, Context.getLocale(), null, true);\r\n \t\tanotherConceptName.setName(duplicateName);\r\n \t\tnewConcept.addName(anotherConceptName);\r\n\t\tErrors errors = new BindException(newConcept, \"concept\");\r\n \t\tnew ConceptValidator().validate(newConcept, errors);\r\n \t}\r", "sourceBeforeFix": "new BindException(concept,\"concept\")", "sourceAfterFix": "new BindException(newConcept,\"concept\")"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15858, value = \"No deployment content with hash %s is available in the deployment content repository.\")\n     String noDeploymentContentWithHash(String hash);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10858, value = \"No deployment content with hash %s is available in the deployment content repository.\")\n     String noDeploymentContentWithHash(String hash);\n     /**", "sourceBeforeFix": "id=15851", "sourceAfterFix": "id=10851"}
{"fixCommitSHA1": "2b27f6006b63686c9e8f1ff03b411ab2a6d1c791", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "         template.sendBody(serverUri + \"?x=foo\", \"Hello World\");\n        assertMockEndpointsSatisifed();\n     }\n     protected RouteBuilder createRouteBuilder() throws Exception {", "fixed": "         template.sendBody(serverUri + \"?x=foo\", \"Hello World\");\n        assertMockEndpointsSatisfied();\n     }\n     protected RouteBuilder createRouteBuilder() throws Exception {", "sourceBeforeFix": "assertMockEndpointsSatisifed()", "sourceAfterFix": "assertMockEndpointsSatisfied()"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedKubernetesJobEndpointBuilder\n             extends\n                 AdvancedKubernetesJobEndpointConsumerBuilder, AdvancedKubernetesJobEndpointProducerBuilder {\n         default KubernetesJobEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedKubernetesJobEndpointBuilder\n             extends\n                 AdvancedKubernetesJobEndpointConsumerBuilder, AdvancedKubernetesJobEndpointProducerBuilder {\n         default KubernetesJobEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fa5635c39e3000406103657977b98efa79bd4512", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      * {@inheritDoc}\n      */\n     public List<Trends> getWeeklyTrends() throws TwitterException {\n        return TrendsJSONImpl.createTrendsList(http.get(conf.getSearchBaseURL()\n                 + \"trends/weekly.json\"));\n     }", "fixed": "      * {@inheritDoc}\n      */\n     public List<Trends> getWeeklyTrends() throws TwitterException {\n        return TrendsJSONImpl.createTrendsList(http.get(conf.getRestBaseURL()\n                 + \"trends/weekly.json\"));\n     }", "sourceBeforeFix": "conf.getSearchBaseURL()", "sourceAfterFix": "conf.getRestBaseURL()"}
{"fixCommitSHA1": "6e4e6d32757138712bcba38d7ab1ed8ae97cdcb5", "projectName": "apache.hive", "bugType": "Change Identifier Used", "problem": "         for(int i = 0; i < fields.size(); ++i) {\n           StructField left = other.get(i);\n           StructField right = fields.get(i);\n          if (!(left.getFieldName().equals(right.getFieldName()) &&\n                 left.getFieldObjectInspector().equals\n                     (right.getFieldObjectInspector()))) {\n             return false;", "fixed": "         for(int i = 0; i < fields.size(); ++i) {\n           StructField left = other.get(i);\n           StructField right = fields.get(i);\n          if (!(left.getFieldName().equalsIgnoreCase(right.getFieldName()) &&\n                 left.getFieldObjectInspector().equals\n                     (right.getFieldObjectInspector()))) {\n             return false;", "sourceBeforeFix": "field.getFieldName().equals(s)", "sourceAfterFix": "field.getFieldName().equalsIgnoreCase(s)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "      * Advanced builder for endpoint for the Kubernetes Persistent Volume\n      * component.\n      */\n    public static interface AdvancedKubernetesPersistentVolumesEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default KubernetesPersistentVolumesEndpointBuilder basic() {", "fixed": "      * Advanced builder for endpoint for the Kubernetes Persistent Volume\n      * component.\n      */\n    public interface AdvancedKubernetesPersistentVolumesEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default KubernetesPersistentVolumesEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "35076f03b4d9b49d15c77bcf6d42f7463fff4397", "projectName": "gephi.gephi", "bugType": "Change Identifier Used", "problem": "         edgeE.setAttribute(\"source\", e.getSource().getNodeData().getId());\n         edgeE.setAttribute(\"target\", e.getTarget().getNodeData().getId());\n        if( e.isDirected() && !graphModel.isDirected() ) {\n             edgeE.setAttribute(\"type\", \"directed\");\n         }\n        else if( !e.isDirected() && graphModel.isDirected() ) {\n             edgeE.setAttribute(\"type\", \"undirected\");\n         }", "fixed": "         edgeE.setAttribute(\"source\", e.getSource().getNodeData().getId());\n         edgeE.setAttribute(\"target\", e.getTarget().getNodeData().getId());\n        if( e.isDirected() && graphModel.isMixed() ) {\n             edgeE.setAttribute(\"type\", \"directed\");\n         }\n        else if( !e.isDirected() && graphModel.isMixed() ) {\n             edgeE.setAttribute(\"type\", \"undirected\");\n         }", "sourceBeforeFix": "graphModel.isDirected()", "sourceAfterFix": "graphModel.isMixed()"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedSjms2EndpointBuilder\n             extends\n                 AdvancedSjms2EndpointConsumerBuilder, AdvancedSjms2EndpointProducerBuilder {\n         default Sjms2EndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedSjms2EndpointBuilder\n             extends\n                 AdvancedSjms2EndpointConsumerBuilder, AdvancedSjms2EndpointProducerBuilder {\n         default Sjms2EndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "038ea1803bae1cf3be279b36395b4de4e0ff39b5", "projectName": "openhab.openhab", "bugType": "Wrong Function Name", "problem": " \t * Validates Username and Password then saved sercurityToken to a variable\n \t */\n \tprivate void login() throws InvalidLoginException, IOException {\n\t\tlogger.debug(\"attempting to login\");\n \t\tString url = String\n \t\t\t\t.format(\"%s/api/user/validate?appId=%s&SecurityToken=null&username=%s&password=%s\",\n \t\t\t\t\t\tWEBSITE, enc(appId), enc(userName), enc(password));", "fixed": " \t * Validates Username and Password then saved sercurityToken to a variable\n \t */\n \tprivate void login() throws InvalidLoginException, IOException {\n\t\tlogger.trace(\"attempting to login\");\n \t\tString url = String\n \t\t\t\t.format(\"%s/api/user/validate?appId=%s&SecurityToken=null&username=%s&password=%s\",\n \t\t\t\t\t\tWEBSITE, enc(appId), enc(userName), enc(password));", "sourceBeforeFix": "logger.debug(\"Retreiveing door data\")", "sourceAfterFix": "logger.trace(\"Retreiveing door data\")"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedApnsEndpointBuilder\n             extends\n                 AdvancedApnsEndpointConsumerBuilder, AdvancedApnsEndpointProducerBuilder {\n         default ApnsEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedApnsEndpointBuilder\n             extends\n                 AdvancedApnsEndpointConsumerBuilder, AdvancedApnsEndpointProducerBuilder {\n         default ApnsEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "4b52e5d010469405c1ec24baa2f8457f3eada222", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic boolean touchDragged (int screenX, int screenY, int pointer) {\r\n\t\tInputProcessor[] items = processors.begin();\r\n \t\ttry {\r\n \t\t\tfor (int i = 0, n = processors.size; i < n; i++)\r\n\t\t\t\tif (items[i].touchDragged(screenX, screenY, pointer)) return true;\r\n \t\t} finally {\r\n \t\t\tprocessors.end();\r\n \t\t}\r", "fixed": " \t}\r\n \tpublic boolean touchDragged (int screenX, int screenY, int pointer) {\r\n\t\tObject[] items = processors.begin();\r\n \t\ttry {\r\n \t\t\tfor (int i = 0, n = processors.size; i < n; i++)\r\n\t\t\t\tif (((InputProcessor)items[i]).touchDragged(screenX, screenY, pointer)) return true;\r\n \t\t} finally {\r\n \t\t\tprocessors.end();\r\n \t\t}\r", "sourceBeforeFix": "InputProcessor[]", "sourceAfterFix": "Object[]"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "fixed": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "sourceBeforeFix": "GL20.glUniform2(location,toIntBuffer(v,offset,count << 1))", "sourceAfterFix": "GL20.glUniform2iv(location,toIntBuffer(v,offset,count << 1))"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15859, value = \"A slave domain controller cannot accept deployment content uploads\")\n     String slaveCannotAcceptUploads();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10859, value = \"A slave domain controller cannot accept deployment content uploads\")\n     String slaveCannotAcceptUploads();\n     /**", "sourceBeforeFix": "id=15844", "sourceAfterFix": "id=10844"}
{"fixCommitSHA1": "28474aa30adebc397ecdb993d62317e5659fce4a", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t\t\treturn this.ssl;\n \t\t}\n\t\tpublic Long getAutoCommitInterval() {\n \t\t\treturn this.autoCommitInterval;\n \t\t}\n\t\tpublic void setAutoCommitInterval(Long autoCommitInterval) {\n \t\t\tthis.autoCommitInterval = autoCommitInterval;\n \t\t}", "fixed": " \t\t\treturn this.ssl;\n \t\t}\n\t\tpublic Integer getAutoCommitInterval() {\n \t\t\treturn this.autoCommitInterval;\n \t\t}\n\t\tpublic void setAutoCommitInterval(Integer autoCommitInterval) {\n \t\t\tthis.autoCommitInterval = autoCommitInterval;\n \t\t}", "sourceBeforeFix": "Long autoCommitInterval", "sourceAfterFix": "Integer autoCommitInterval"}
{"fixCommitSHA1": "fee49a6279223da125be367228089d901dbaba28", "projectName": "openhab.openhab", "bugType": "Change Identifier Used", "problem": " \t\tZIP_SERVER(0x24,\"ZIP_SERVER\",null),\n \t\tSWITCH_BINARY(0x25,\"SWITCH_BINARY\",ZWaveBinarySwitchCommandClass.class),\n \t\tSWITCH_MULTILEVEL(0x26,\"SWITCH_MULTILEVEL\",ZWaveMultiLevelSwitchCommandClass.class),\n\t\tSWITCH_ALL(0x27,\"SWITCH_ALL\",ZWaveSwithcAllCommandClass.class),\n \t\tSWITCH_TOGGLE_BINARY(0x28,\"SWITCH_TOGGLE_BINARY\",null),\n \t\tSWITCH_TOGGLE_MULTILEVEL(0x29,\"SWITCH_TOGGLE_MULTILEVEL\",null),\n \t\tCHIMNEY_FAN(0x2A,\"CHIMNEY_FAN\",null),", "fixed": " \t\tZIP_SERVER(0x24,\"ZIP_SERVER\",null),\n \t\tSWITCH_BINARY(0x25,\"SWITCH_BINARY\",ZWaveBinarySwitchCommandClass.class),\n \t\tSWITCH_MULTILEVEL(0x26,\"SWITCH_MULTILEVEL\",ZWaveMultiLevelSwitchCommandClass.class),\n\t\tSWITCH_ALL(0x27,\"SWITCH_ALL\",ZWaveSwitchAllCommandClass.class),\n \t\tSWITCH_TOGGLE_BINARY(0x28,\"SWITCH_TOGGLE_BINARY\",null),\n \t\tSWITCH_TOGGLE_MULTILEVEL(0x29,\"SWITCH_TOGGLE_MULTILEVEL\",null),\n \t\tCHIMNEY_FAN(0x2A,\"CHIMNEY_FAN\",null),", "sourceBeforeFix": "ZWaveSwithcAllCommandClass.class", "sourceAfterFix": "ZWaveSwitchAllCommandClass.class"}
{"fixCommitSHA1": "0a1836b22646342828e96b1d0e7dad9c8bfdabfe", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         bar.expectedMessageCount(0);\n         MockEndpoint start = getMockEndpoint(\"mock:start\");\nstart.expectedMessageCount(6);\n         template.sendBody(\"activemq:queue:foo\", \"Hello World\");", "fixed": "         bar.expectedMessageCount(0);\n         MockEndpoint start = getMockEndpoint(\"mock:start\");\nstart.expectedMessageCount(7);\n         template.sendBody(\"activemq:queue:foo\", \"Hello World\");", "sourceBeforeFix": "start.expectedMessageCount(6)", "sourceAfterFix": "start.expectedMessageCount(7)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r", "fixed": " \t}\r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r", "sourceBeforeFix": "GL20.glUniform3(location,v)", "sourceAfterFix": "GL20.glUniform3iv(location,v)"}
{"fixCommitSHA1": "aebe2ca06a3fb220c7211b174c85250f36afae25", "projectName": "wildfly.wildfly", "bugType": "Same Function Swap Args", "problem": "             Assert.fail(\"Test should fail, user shouldn't be allowed to invoke that method\");\n         } catch (WebServiceException e) {\n            Assert.assertEquals(e.getCause().getMessage(), getNotAllowedExceptionMessage(\"helloForNone\"));\n         }\n     }", "fixed": "             Assert.fail(\"Test should fail, user shouldn't be allowed to invoke that method\");\n         } catch (WebServiceException e) {\n            Assert.assertEquals(getNotAllowedExceptionMessage(\"helloForNone\"), e.getCause().getMessage());\n         }\n     }", "sourceBeforeFix": "Assert.assertEquals(e.getCause().getMessage(),getNotAllowedExceptionMessage(\"helloForNone\"))", "sourceAfterFix": "Assert.assertEquals(getNotAllowedExceptionMessage(\"helloForNone\"),e.getCause().getMessage())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface JoltEndpointBuilder\n            extends\n                EndpointProducerBuilder {\n         default AdvancedJoltEndpointBuilder advanced() {\n             return (AdvancedJoltEndpointBuilder) this;\n         }", "fixed": "     \n    public interface JoltEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedJoltEndpointBuilder advanced() {\n             return (AdvancedJoltEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "ef8206551c0ec51f70ec25e7371333dc5c8d99b1", "projectName": "junit-team.junit", "bugType": "Same Function Less Args", "problem": "         }\n         Method suiteMethod = null;\n         try {\n            suiteMethod = testClass.getMethod(SUITE_METHODNAME, new Class[0]);\n         } catch (Exception e) {\n             clearStatus();", "fixed": "         }\n         Method suiteMethod = null;\n         try {\n            suiteMethod = testClass.getMethod(SUITE_METHODNAME);\n         } catch (Exception e) {\n             clearStatus();", "sourceBeforeFix": "testClass.getMethod(SUITE_METHODNAME,new Class[0])", "sourceAfterFix": "testClass.getMethod(SUITE_METHODNAME)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "fixed": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniformfv(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniformiv(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "sourceBeforeFix": "GL20.glUniform1(location,toIntBuffer(v,offset,count))", "sourceAfterFix": "GL20.glUniform1iv(location,toIntBuffer(v,offset,count))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "fixed": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4fv(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4fv(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "sourceBeforeFix": "EXTFramebufferObject.glGetFramebufferAttachmentParameterEXT(target,attachment,pname,params)", "sourceAfterFix": "EXTFramebufferObject.glGetFramebufferAttachmentParameterivEXT(target,attachment,pname,params)"}
{"fixCommitSHA1": "7346f16a2b9513dabebfdbec521bbf520ad63d2b", "projectName": "gephi.gephi", "bugType": "Wrong Function Name", "problem": "         if (this.mDirected) {\n             graph = graphModel.getDirectedGraphVisible();\n         } else {\n            graph = graphModel.getUndirectedGraph();\n         }\n         graph.readLock();", "fixed": "         if (this.mDirected) {\n             graph = graphModel.getDirectedGraphVisible();\n         } else {\n            graph = graphModel.getUndirectedGraphVisible();\n         }\n         graph.readLock();", "sourceBeforeFix": "graphModel.getUndirectedGraph()", "sourceAfterFix": "graphModel.getUndirectedGraphVisible()"}
{"fixCommitSHA1": "4665dcf9ab41c3c61cd42aad296ebfe518bfa003", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\n \tpublic void glBindTexture (int target, int texture) {\n\t\tGL.glBindTextureEXT(target, texture);\n \t}\n \tpublic void glBlendFunc (int sfactor, int dfactor) {", "fixed": " \t}\n \tpublic void glBindTexture (int target, int texture) {\n\t\tGL.glBindTexture(target, texture);\n \t}\n \tpublic void glBlendFunc (int sfactor, int dfactor) {", "sourceBeforeFix": "GL.glDrawArraysEXT(mode,first,count)", "sourceAfterFix": "GL.glDrawArrays(mode,first,count)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "9716d2ae673a576cb345c3bfb24cf71654d8f112", "projectName": "openhab.openhab", "bugType": "Change Identifier Used", "problem": " \t * Validates Username and Password then saved sercurityToken to a variable\n \t */\n \tprivate void login() throws InvalidLoginException, IOException {\n\t\tlogger.debug(\"attempting to login\");\n \t\tString url = String\n \t\t\t\t.format(\"%s/api/user/validate?appId=%s&SecurityToken=null&username=%s&password=%s\",\n \t\t\t\t\t\tWEBSITE, enc(appId), enc(userName), enc(password));", "fixed": " \t * Validates Username and Password then saved sercurityToken to a variable\n \t */\n \tprivate void login() throws InvalidLoginException, IOException {\n\t\tlogger.trace(\"attempting to login\");\n \t\tString url = String\n \t\t\t\t.format(\"%s/api/user/validate?appId=%s&SecurityToken=null&username=%s&password=%s\",\n \t\t\t\t\t\tWEBSITE, enc(appId), enc(userName), enc(password));", "sourceBeforeFix": "logger.debug(\"Received MyQ  JSON: {}\",dataString)", "sourceAfterFix": "logger.trace(\"Received MyQ  JSON: {}\",dataString)"}
{"fixCommitSHA1": "e70960913c07d921dea470857f9bcdb67f38959f", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "      * Set the format for a check.\n      * @param format a <code>String</code> value\n      */\n    public void setCheckFormat(String format) {\n         checkFormat = format;\n     }", "fixed": "      * Set the format for a check.\n      * @param format a <code>String</code> value\n      */\n    public final void setCheckFormat(String format) {\n         checkFormat = format;\n     }", "sourceBeforeFix": "1", "sourceAfterFix": "17"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface JmsEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedJmsEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface JmsEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedJmsEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsText(String path, long millis) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), millis, null);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsText(String path, long millis) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), millis, null);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "d2b19965df52e66385a2d7146887a44cea50330a", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "   }\n   public void normalize() {\n    logger.info(\"Normalizing\");\n     startPass(\"normalize\");\n     process(new Normalize(this, false));\n     endPass();", "fixed": "   }\n   public void normalize() {\n    logger.fine(\"Normalizing\");\n     startPass(\"normalize\");\n     process(new Normalize(this, false));\n     endPass();", "sourceBeforeFix": "logger.info(\"Normalizing\")", "sourceAfterFix": "logger.fine(\"Normalizing\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "6ad626ae51a157306ddf4165f13ff5eb5b4d5e8b", "projectName": "apache.flink", "bugType": "Same Function More Args", "problem": " \t@After\n \tpublic void tearDown() throws Exception {\n \t\tif (nioGroup != null) {\n\t\t\tnioGroup.shutdownGracefully();\n \t\t}\n \t}", "fixed": " \t@After\n \tpublic void tearDown() throws Exception {\n \t\tif (nioGroup != null) {\n\t\t\tnioGroup.shutdownGracefully(0, 10, TimeUnit.SECONDS);\n \t\t}\n \t}", "sourceBeforeFix": "nioGroup.shutdownGracefully()", "sourceAfterFix": "nioGroup.shutdownGracefully(0,10,TimeUnit.SECONDS)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface GitHubEndpointBuilder\n             extends\n                 GitHubEndpointConsumerBuilder, GitHubEndpointProducerBuilder {\n         default AdvancedGitHubEndpointBuilder advanced() {", "fixed": "     \n    public interface GitHubEndpointBuilder\n             extends\n                 GitHubEndpointConsumerBuilder, GitHubEndpointProducerBuilder {\n         default AdvancedGitHubEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<Status> getFriendsTimeline(Paging paging) throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\",null, paging.asPostParameterList(), true));\n     }\n     /**", "fixed": "      */\n     public ResponseList<Status> getFriendsTimeline(Paging paging) throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\",null, paging.asPostParameterList(), true));\n     }\n     /**", "sourceBeforeFix": "SavedSearch.constructSavedSearches(get(getBaseURL() + \"saved_searches.json\",true))", "sourceAfterFix": "SavedSearch.createSavedSearchList(get(getBaseURL() + \"saved_searches.json\",true))"}
{"fixCommitSHA1": "38eb6222bddaf49c3c9ae73ddef0cfe4ff5efa48", "projectName": "alibaba.dubbo", "bugType": "Change Numeric Literal", "problem": "     @Test\n     public void test_Decode_Error_Request_Object() throws IOException {\n        byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, (byte) 0xdf, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n         Person person = new Person();\n         byte[] request = getRequestBytes(person, header);", "fixed": "     @Test\n     public void test_Decode_Error_Request_Object() throws IOException {\n        byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, (byte) 0xe2, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n         Person person = new Person();\n         byte[] request = getRequestBytes(person, header);", "sourceBeforeFix": "{MAGIC_HIGH,MAGIC_LOW,0x20,20,0,0,0,0,0,0,0,0,0,0,0,0}", "sourceAfterFix": "{MAGIC_HIGH,MAGIC_LOW,0x02,20,0,0,0,0,0,0,0,0,0,0,0,0}"}
{"fixCommitSHA1": "5bb7b24d7c6a389e4d33660e88c12634c846af3e", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t\t\tfilterRegistrations.addAll(\n \t\t\t\t\tinitializers.getOrDefault(Filter.class, Collections.emptyList()));\n \t\t\tString filtersInfo = filterRegistrations.stream()\n\t\t\t\t\t.map(FilterRegistrationBean.class::cast)\n\t\t\t\t\t.map(FilterRegistrationBean::toString)\n \t\t\t\t\t.collect(Collectors.joining(\", \"));\n \t\t\tServletContextInitializerBeans.logger\n \t\t\t\t\t.debug(\"Mapping filters: \" + filtersInfo);", "fixed": " \t\t\tfilterRegistrations.addAll(\n \t\t\t\t\tinitializers.getOrDefault(Filter.class, Collections.emptyList()));\n \t\t\tString filtersInfo = filterRegistrations.stream()\n\t\t\t\t\t.map(AbstractFilterRegistrationBean.class::cast)\n\t\t\t\t\t.map(AbstractFilterRegistrationBean::toString)\n \t\t\t\t\t.collect(Collectors.joining(\", \"));\n \t\t\tServletContextInitializerBeans.logger\n \t\t\t\t\t.debug(\"Mapping filters: \" + filtersInfo);", "sourceBeforeFix": "FilterRegistrationBean.class", "sourceAfterFix": "AbstractFilterRegistrationBean.class"}
{"fixCommitSHA1": "af233c9c353322adf1fa91d5e6ca706b9d9d98b7", "projectName": "dropwizard.dropwizard", "bugType": "Change Identifier Used", "problem": "     @Test\n     public void returnsA404WhenNotFound() throws Exception {\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getServletPath()).thenReturn(\"/tasks/test\");\n         servlet.service(request, response);", "fixed": "     @Test\n     public void returnsA404WhenNotFound() throws Exception {\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getPathInfo()).thenReturn(\"/test\");\n         servlet.service(request, response);", "sourceBeforeFix": "request.getServletPath()", "sourceAfterFix": "request.getPathInfo()"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": "  * \n  * @param T The data type that the comparator works on.\n  */\npublic interface TypeComparator<T>\n {\t\n \t/**\n \t * Computes a hash value for the given record. The hash value should include all fields in the record", "fixed": "  * \n  * @param T The data type that the comparator works on.\n  */\npublic abstract class TypeComparator<T>\n {\t\n \t/**\n \t * Computes a hash value for the given record. The hash value should include all fields in the record", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "69c1fc12079616a75ac51f90aed6dbfbefd586a2", "projectName": "apache.flink", "bugType": "Less Specific If", "problem": " \t@Override\n \tpublic PactRecord jsonToRecord(IJsonNode value, PactRecord target, EvaluationContext context) {\n \t\tIObjectNode others;\n\t\tif (target == null) {\n \t\t\ttarget = new PactRecord(this.mappings.size() + 1);\n \t\t\tfor (int i = 0; i < this.mappings.size(); i++)", "fixed": " \t@Override\n \tpublic PactRecord jsonToRecord(IJsonNode value, PactRecord target, EvaluationContext context) {\n \t\tIObjectNode others;\n\t\tif (target == null || target.getNumFields() < this.mappings.size() + 1) {\n \t\t\ttarget = new PactRecord(this.mappings.size() + 1);\n \t\t\tfor (int i = 0; i < this.mappings.size(); i++)", "sourceBeforeFix": "target == null", "sourceAfterFix": "target == null || target.getNumFields() < this.mappings.size() + 1"}
{"fixCommitSHA1": "bd7bd6edc871d515c41d9c33f7593849f4d3dc40", "projectName": "spring-projects.spring-boot", "bugType": "Wrong Function Name", "problem": " \t\tSessionManager sessionManager = manager.getDeployment().getSessionManager();\n \t\tint sessionTimeout = (getSessionTimeout() == null || getSessionTimeout().isZero()\n \t\t\t\t|| getSessionTimeout().isNegative() ? -1\n\t\t\t\t\t\t: (int) getSessionTimeout().toMinutes());\n \t\tsessionManager.setDefaultSessionTimeout(sessionTimeout);\n \t\treturn manager;\n \t}", "fixed": " \t\tSessionManager sessionManager = manager.getDeployment().getSessionManager();\n \t\tint sessionTimeout = (getSessionTimeout() == null || getSessionTimeout().isZero()\n \t\t\t\t|| getSessionTimeout().isNegative() ? -1\n\t\t\t\t\t\t: (int) getSessionTimeout().getSeconds());\n \t\tsessionManager.setDefaultSessionTimeout(sessionTimeout);\n \t\treturn manager;\n \t}", "sourceBeforeFix": "getSessionTimeout().toMinutes()", "sourceAfterFix": "getSessionTimeout().getSeconds()"}
{"fixCommitSHA1": "d0cb778dc8811906c7e7b5a20e08bd70f49dd163", "projectName": "Alluxio.alluxio", "bugType": "Same Function More Args", "problem": "     AlluxioURI src = new AlluxioURI(\"/file\");\n     AlluxioURI dst = new AlluxioURI(\"/file2\");\n     RenameOptions renameOptions = RenameOptions.defaults();\n    Mockito.doNothing().when(mFileSystemMasterClient).rename(src, dst);\n     mFileSystem.rename(src, dst, renameOptions);\n    Mockito.verify(mFileSystemMasterClient).rename(src, dst);\n   }\n   /**", "fixed": "     AlluxioURI src = new AlluxioURI(\"/file\");\n     AlluxioURI dst = new AlluxioURI(\"/file2\");\n     RenameOptions renameOptions = RenameOptions.defaults();\n    Mockito.doNothing().when(mFileSystemMasterClient).rename(src, dst, renameOptions);\n     mFileSystem.rename(src, dst, renameOptions);\n    Mockito.verify(mFileSystemMasterClient).rename(src, dst, renameOptions);\n   }\n   /**", "sourceBeforeFix": "Mockito.verify(mFileSystemMasterClient).rename(src,dst)", "sourceAfterFix": "Mockito.verify(mFileSystemMasterClient).rename(src,dst,renameOptions)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "11fc33161f47544de5d2c50444340438f09a5b82", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t\t}\r\n \t\tpublic boolean hasChildRecursive (String name) {\r\n\t\t\tif (attributes == null) return false;\r\n \t\t\treturn getChildByNameRecursive(name) != null;\r\n \t\t}\r", "fixed": " \t\t}\r\n \t\tpublic boolean hasChildRecursive (String name) {\r\n\t\t\tif (children == null) return false;\r\n \t\t\treturn getChildByNameRecursive(name) != null;\r\n \t\t}\r", "sourceBeforeFix": "attributes == null", "sourceAfterFix": "children == null"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  private final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsCsv(String path, int batchSize) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), batchSize, null);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsCsv(String path, int batchSize) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), batchSize, null);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "fixed": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "sourceBeforeFix": "GL20.glUniform2(location,v)", "sourceAfterFix": "GL20.glUniform2iv(location,v)"}
{"fixCommitSHA1": "3e1c4d53a4730e2660c191def7615501a6fe982f", "projectName": "swagger-api.swagger-core", "bugType": "Same Function Less Args", "problem": "                     final String name = def.getName();\n                     if (name != null && name.equals(propertyName)) {\n                         final AnnotatedMember propMember = def.getPrimaryMember();\n                        final JavaType propType = propMember.getType(beanDesc.bindingsForBeanType());\n                         if (PrimitiveType.fromType(propType) != null) {\n                             return PrimitiveType.createProperty(propType);\n                         } else {", "fixed": "                     final String name = def.getName();\n                     if (name != null && name.equals(propertyName)) {\n                         final AnnotatedMember propMember = def.getPrimaryMember();\n                        final JavaType propType = propMember.getType();\n                         if (PrimitiveType.fromType(propType) != null) {\n                             return PrimitiveType.createProperty(propType);\n                         } else {", "sourceBeforeFix": "propMember.getType(beanDesc.bindingsForBeanType())", "sourceAfterFix": "propMember.getType()"}
{"fixCommitSHA1": "e0aff862bb608004841da3487d94aecb45964e17", "projectName": "Alluxio.alluxio", "bugType": "Change Numeric Literal", "problem": "   public static void logPerIteration(long startTimeMs, int times, String msg, int workerId) {\n     long takenTimeMs = System.currentTimeMillis() - startTimeMs;\n    double result = 1000L * FILE_BYTES / takenTimeMs / 1024 / 1024;\n     LOG.info(times + msg + workerId + \" : \" + result + \" Mb/sec. Took \" + takenTimeMs + \" ms. \");\n   }", "fixed": "   public static void logPerIteration(long startTimeMs, int times, String msg, int workerId) {\n     long takenTimeMs = System.currentTimeMillis() - startTimeMs;\n    double result = 1000.0 * FILE_BYTES / takenTimeMs / 1024 / 1024;\n     LOG.info(times + msg + workerId + \" : \" + result + \" Mb/sec. Took \" + takenTimeMs + \" ms. \");\n   }", "sourceBeforeFix": "1000L * FILES_BYTES", "sourceAfterFix": "1000.0 * FILES_BYTES"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  private final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "19907030d105079fee4fe6db70431f7f6b928149", "projectName": "netty.netty", "bugType": "Change Identifier Used", "problem": "             short v = PlatformDependent.getShort(array, index);\n             return BIG_ENDIAN_NATIVE_ORDER ? v : Short.reverseBytes(v);\n         }\n        return (short) (PlatformDependent.getByte(index) << 8 | PlatformDependent.getByte(index + 1) & 0xff);\n     }\n     static short getShortLE(byte[] array, int index) {", "fixed": "             short v = PlatformDependent.getShort(array, index);\n             return BIG_ENDIAN_NATIVE_ORDER ? v : Short.reverseBytes(v);\n         }\n        return (short) (PlatformDependent.getByte(array, index) << 8 |\n                PlatformDependent.getByte(array, index + 1) & 0xff);\n     }\n     static short getShortLE(byte[] array, int index) {", "sourceBeforeFix": "PlatformDependent.getByte(index)", "sourceAfterFix": "PlatformDependent.getByte(array,index)"}
{"fixCommitSHA1": "4665dcf9ab41c3c61cd42aad296ebfe518bfa003", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\n \tpublic void glPolygonOffset (float factor, float units) {\n\t\tGL.glPolygonOffsetEXT(factor, units);\n \t}\n \tpublic void glReadPixels (int x, int y, int width, int height, int format, int type, Buffer pixels) {", "fixed": " \t}\n \tpublic void glPolygonOffset (float factor, float units) {\n\t\tGL.glPolygonOffset(factor, units);\n \t}\n \tpublic void glReadPixels (int x, int y, int width, int height, int format, int type, Buffer pixels) {", "sourceBeforeFix": "GL.glGenTexturesEXT(n,toBuffer(textures,offset),0)", "sourceAfterFix": "GL.glGenTextures(n,toBuffer(textures,offset),0)"}
{"fixCommitSHA1": "e04a3bf7703544cf5012eb2f55626af8e0a2cb8c", "projectName": "apache.flink", "bugType": "Delete Throws Exception", "problem": " \t\t}\n \t\t@Override\n\t\tpublic List<Long> snapshotState(long checkpointId, long timestamp) throws Exception {\n \t\t\treturn Collections.singletonList(ms);\n \t\t}\n \t\t@Override\n\t\tpublic void restoreState(List<Long> state) throws Exception {\n \t\t\tfor (Long l : state) {\n \t\t\t\tms += l;\n \t\t\t}", "fixed": " \t\t}\n \t\t@Override\n\t\tpublic List<Long> snapshotState(long checkpointId, long timestamp) {\n \t\t\treturn Collections.singletonList(ms);\n \t\t}\n \t\t@Override\n\t\tpublic void restoreState(List<Long> state) {\n \t\t\tfor (Long l : state) {\n \t\t\t\tms += l;\n \t\t\t}", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "4e280c8467faf7c255557dce9e0e87eebf5c15e0", "projectName": "apache.flink", "bugType": "Change Unary Operator\t", "problem": " \t\t\t}\n \t\t});\n\t\tif (argumentCount.isValidCount(actualCount)) {\n \t\t\tthrow new ValidationException(\n \t\t\t\tString.format(\n \t\t\t\t\t\"Invalid number of arguments. %d arguments passed.\",", "fixed": " \t\t\t}\n \t\t});\n\t\tif (!argumentCount.isValidCount(actualCount)) {\n \t\t\tthrow new ValidationException(\n \t\t\t\tString.format(\n \t\t\t\t\t\"Invalid number of arguments. %d arguments passed.\",", "sourceBeforeFix": "argumentCount.isValidCount(actualCount)", "sourceAfterFix": "!argumentCount.isValidCount(actualCount)"}
{"fixCommitSHA1": "e08f74620ba29298d59c97e7327cbe51fbd5b39e", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \tprivate int pressedButton = -1;\r\n \tprivate int button;\r\n \tprivate boolean pressed, over, cancelled;\r\n\tprivate float visualPressedTime;\r\n \tprivate long tapCountInterval = (long)(0.4f * 1000000000l);\r\n \tprivate int tapCount;\r\n \tprivate long lastTapTime;\r", "fixed": " \tprivate int pressedButton = -1;\r\n \tprivate int button;\r\n \tprivate boolean pressed, over, cancelled;\r\n\tprivate long visualPressedTime;\r\n \tprivate long tapCountInterval = (long)(0.4f * 1000000000l);\r\n \tprivate int tapCount;\r\n \tprivate long lastTapTime;\r", "sourceBeforeFix": "TimeUtils.nanoTime()", "sourceAfterFix": "TimeUtils.millis()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15835, value = IN_SERIES + \" is missing groups: %s\")\n     String inSeriesIsMissingGroups(String rolloutPlan);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10835, value = IN_SERIES + \" is missing groups: %s\")\n     String inSeriesIsMissingGroups(String rolloutPlan);\n     /**", "sourceBeforeFix": "id=15860", "sourceAfterFix": "id=10860"}
{"fixCommitSHA1": "486b290863a66641b0ec30dbf2d9e349733cae44", "projectName": "apache.hbase", "bugType": "Wrong Function Name", "problem": "    */\n   public void compact(final String tableNameOrRegionName)\n   throws IOException, InterruptedException {\n    compact(Bytes.toBytesBinary(tableNameOrRegionName));\n   }\n   /**", "fixed": "    */\n   public void compact(final String tableNameOrRegionName)\n   throws IOException, InterruptedException {\n    compact(Bytes.toBytes(tableNameOrRegionName));\n   }\n   /**", "sourceBeforeFix": "Bytes.toBytesBinary(tableNameOrRegionName)", "sourceAfterFix": "Bytes.toBytes(tableNameOrRegionName)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "9e6f96dbfc8bf1ae1ffbe0115f53f1de0fc86ffc", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "                 record.setExpirationTime(expiryTime);\n                 if (isEventsEnabled()) {\n                     CacheEventContext cacheEventContext =\n                            createBaseEventContext(CacheEventType.EXPIRATION_TIME_UPDATED, toHeapData(key),\n                                                    toEventData(record.getValue()), expiryTime, null, IGNORE_COMPLETION);\n                     cacheEventContext.setAccessHit(record.getAccessHit());\n                     publishEvent(cacheEventContext);", "fixed": "                 record.setExpirationTime(expiryTime);\n                 if (isEventsEnabled()) {\n                     CacheEventContext cacheEventContext =\n                            createBaseEventContext(CacheEventType.EXPIRATION_TIME_UPDATED, toEventData(key),\n                                                    toEventData(record.getValue()), expiryTime, null, IGNORE_COMPLETION);\n                     cacheEventContext.setAccessHit(record.getAccessHit());\n                     publishEvent(cacheEventContext);", "sourceBeforeFix": "toHeapData(key)", "sourceAfterFix": "toEventData(key)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "f97d7b0958ffff5f91defe776878e20e051c112c", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         long minimumTime = (messageCount - 1) * INTERVAL;\n        long delta = System.currentTimeMillis() - start + 200;\n         assertTrue(\"Should take at least \" + minimumTime + \"ms, was: \" + delta, delta >= minimumTime);\n         executor.shutdownNow();\n     }", "fixed": "         long minimumTime = (messageCount - 1) * INTERVAL;\n        long delta = System.currentTimeMillis() - start + 750;\n         assertTrue(\"Should take at least \" + minimumTime + \"ms, was: \" + delta, delta >= minimumTime);\n         executor.shutdownNow();\n     }", "sourceBeforeFix": "System.currentTimeMillis() - start + 200", "sourceAfterFix": "System.currentTimeMillis() - start + 750"}
{"fixCommitSHA1": "1adccc7a5bdc515f01ae6bd644097ab85336bd84", "projectName": "hazelcast.hazelcast", "bugType": "Same Function More Args", "problem": "         ((NearCachedClientMapProxy) clientMap).addNearCacheInvalidateListener(handler);\n        HazelcastInstance anotherClient = hazelcastFactory.newHazelcastClient();\n         IMap<Object, Object> anotherClientMap = anotherClient.getMap(clientMap.getName());\n         anotherClientMap.clear();", "fixed": "         ((NearCachedClientMapProxy) clientMap).addNearCacheInvalidateListener(handler);\n        HazelcastInstance anotherClient = hazelcastFactory.newHazelcastClient(newClientConfig());\n         IMap<Object, Object> anotherClientMap = anotherClient.getMap(clientMap.getName());\n         anotherClientMap.clear();", "sourceBeforeFix": "hazelcastFactory.newHazelcastClient()", "sourceAfterFix": "hazelcastFactory.newHazelcastClient(newClientConfig())"}
{"fixCommitSHA1": "076f30c830886541895d978926bcf8fdf7d7df16", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "     public void generate(Exchange exchange) {\r\n      \tStringBuilder messages = new StringBuilder();\r\n        for (int i = 1; i < 1000; i++) {\r\n         \tmessages.append(\"Test Message: \" + i + \",\");\r\n         }\r\n         template.sendBody(messages.toString());\r", "fixed": "     public void generate(Exchange exchange) {\r\n      \tStringBuilder messages = new StringBuilder();\r\n        for (int i = 1; i < 10000; i++) {\r\n         \tmessages.append(\"Test Message: \" + i + \",\");\r\n         }\r\n         template.sendBody(messages.toString());\r", "sourceBeforeFix": "i < 1000", "sourceAfterFix": "i < 10000"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "049905bb60de3984fe36dc1079649090e3be5dfa", "projectName": "apache.storm", "bugType": "Change Identifier Used", "problem": "      * to backtype.storm.scheduler.IsolationScheduler to make use of the isolation scheduler.\n      */\n     public static final String ISOLATION_SCHEDULER_MACHINES = \"isolation.scheduler.machines\";\n    public static final Object ISOLATION_SCHEDULER_MACHINES_SCHEMA = Number.class;\n     public static void setDebug(Map conf, boolean isOn) {\n         conf.put(Config.TOPOLOGY_DEBUG, isOn);", "fixed": "      * to backtype.storm.scheduler.IsolationScheduler to make use of the isolation scheduler.\n      */\n     public static final String ISOLATION_SCHEDULER_MACHINES = \"isolation.scheduler.machines\";\n    public static final Object ISOLATION_SCHEDULER_MACHINES_SCHEMA = Map.class;\n     public static void setDebug(Map conf, boolean isOn) {\n         conf.put(Config.TOPOLOGY_DEBUG, isOn);", "sourceBeforeFix": "Number.class", "sourceAfterFix": "Map.class"}
{"fixCommitSHA1": "d222fc981c938bd3543ee61f22422d20efcdcd94", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         String uri = getScpUri() + \"?username=admin&privateKeyFile=src/test/resources/camel-key.priv&privateKeyFilePassphrase=password&knownHostsFile=\" + getKnownHostsFile();\n         template.sendBodyAndHeader(uri, \"Hallo Welt\", Exchange.FILE_NAME, \"welt.txt\");\n        Thread.sleep(500);\n         File file = new File(getScpPath() + \"/welt.txt\");\n         assertFileExists(file.getAbsolutePath());", "fixed": "         String uri = getScpUri() + \"?username=admin&privateKeyFile=src/test/resources/camel-key.priv&privateKeyFilePassphrase=password&knownHostsFile=\" + getKnownHostsFile();\n         template.sendBodyAndHeader(uri, \"Hallo Welt\", Exchange.FILE_NAME, \"welt.txt\");\n        Thread.sleep(800);\n         File file = new File(getScpPath() + \"/welt.txt\");\n         assertFileExists(file.getAbsolutePath());", "sourceBeforeFix": "Thread.sleep(500)", "sourceAfterFix": "Thread.sleep(800)"}
{"fixCommitSHA1": "a1977e8e8dccb0e73d05be1e84e7919525b9b413", "projectName": "openhab.openhab", "bugType": "Wrong Function Name", "problem": "     Object convertedValue;\n     if (value.scale() == 0) {\n       logger.trace(\"found no fractional part\");\n      convertedValue = value.doubleValue();\n     } else {\n       logger.trace(\"found fractional part\");\n       convertedValue = value.doubleValue();", "fixed": "     Object convertedValue;\n     if (value.scale() == 0) {\n       logger.trace(\"found no fractional part\");\n      convertedValue = value.toBigInteger();\n     } else {\n       logger.trace(\"found fractional part\");\n       convertedValue = value.doubleValue();", "sourceBeforeFix": "value.doubleValue()", "sourceAfterFix": "value.toBigInteger()"}
{"fixCommitSHA1": "3b47b9b23bf3f10d124f26f37dff3245fe09ec56", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "             if (!queueLength.isDefined() || queueLength.asInt() == Integer.MAX_VALUE) {\n                 if (coreThreads.isDefined() && coreThreads.asInt() <= 0) {\n                    throw EeLogger.ROOT_LOGGER.invalidCoreThreadsSize(coreThreads.asString());\n                 }\n             }", "fixed": "             if (!queueLength.isDefined() || queueLength.asInt() == Integer.MAX_VALUE) {\n                 if (coreThreads.isDefined() && coreThreads.asInt() <= 0) {\n                    throw EeLogger.ROOT_LOGGER.invalidCoreThreadsSize(queueLength.asString());\n                 }\n             }", "sourceBeforeFix": "coreThreads.asString()", "sourceAfterFix": "queueLength.asString()"}
{"fixCommitSHA1": "55f6d19f6a4d254db1b280305ec1e3c196725d8e", "projectName": "naver.pinpoint", "bugType": "Change Modifier", "problem": "         return false;\n     }\n    private class RunnableExecuteHandler implements WorkHandler<RunnableEvent> {\n         @Override\n         public void onEvent(RunnableEvent runnableEvent) throws Exception {", "fixed": "         return false;\n     }\n    private static class RunnableExecuteHandler implements WorkHandler<RunnableEvent> {\n         @Override\n         public void onEvent(RunnableEvent runnableEvent) throws Exception {", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15847, value = \"Interrupted waiting for result from host %s\")\n     String interruptedAwaitingResultFromHost(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10847, value = \"Interrupted waiting for result from host %s\")\n     String interruptedAwaitingResultFromHost(String name);\n     /**", "sourceBeforeFix": "id=15862", "sourceAfterFix": "id=10862"}
{"fixCommitSHA1": "1daccd54d2ff2ecdb21d8c60268600c37febbb70", "projectName": "Alluxio.alluxio", "bugType": "Change Operand ", "problem": "       } else {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n           InputStream is = mHdfsFs.open(new Path(filePath));\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;", "fixed": "       } else {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           InputStream is = mHdfsFs.open(new Path(filePath));\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "pId + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedJt400EndpointBuilder\n             extends\n                 AdvancedJt400EndpointConsumerBuilder, AdvancedJt400EndpointProducerBuilder {\n         default Jt400EndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedJt400EndpointBuilder\n             extends\n                 AdvancedJt400EndpointConsumerBuilder, AdvancedJt400EndpointProducerBuilder {\n         default Jt400EndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "e2119d33293008fcc876f5fcd58ede2993eb24d6", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnClass(JdbcTemplate.class)\n \t@ConditionalOnBean(DataSource.class)\n\t@ConditionalOnEnablednHealthIndicator(\"db\")\n \tpublic static class DataSourcesHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<DataSourceHealthIndicator, DataSource>\n \t\t\timplements InitializingBean {", "fixed": " \t@Configuration\n \t@ConditionalOnClass(JdbcTemplate.class)\n \t@ConditionalOnBean(DataSource.class)\n\t@ConditionalOnEnabledHealthIndicator(\"db\")\n \tpublic static class DataSourcesHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<DataSourceHealthIndicator, DataSource>\n \t\t\timplements InitializingBean {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"mongo\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"mongo\")"}
{"fixCommitSHA1": "619ff2bc073d1b8859c8c8e1fa351b7858529670", "projectName": "Atmosphere.atmosphere", "bugType": "Change Identifier Used", "problem": "                  @Override\n                  public String filter(AtmosphereResponse r, String message) {\n                     return message + END;\n                  }\n                  @Override", "fixed": "                  @Override\n                  public String filter(AtmosphereResponse r, String message) {\n                     return message + end;\n                  }\n                  @Override", "sourceBeforeFix": "data + END", "sourceAfterFix": "data + end"}
{"fixCommitSHA1": "ea98386dfd18da047c877a2320cfdcf15df2ea06", "projectName": "facebook.presto", "bugType": "Change Modifier", "problem": "                 .retInt();\n     }\n    private void generateGetSizeInBytesMethod(ClassDefinition classDefinition, FieldDefinition sizeField)\n     {\n         MethodDefinition method = classDefinition.declareMethod(a(PUBLIC), \"getSizeInBytes\", type(long.class));", "fixed": "                 .retInt();\n     }\n    private static void generateGetSizeInBytesMethod(ClassDefinition classDefinition, FieldDefinition sizeField)\n     {\n         MethodDefinition method = classDefinition.declareMethod(a(PUBLIC), \"getSizeInBytes\", type(long.class));", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_cn_4() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e7405\u670806\u65e5\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_cn_4() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e7405\u670806\u65e5\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "425403eeed99d409a1c49ad5243a3a0bd86ed66c", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "   @VisibleForTesting\n  static final List<String> OPTIMAL_ORDER = ImmutableList.of(\n      \"inlineFunctions\",\n      \"inlineVariables\",\n      \"deadAssignmentsElimination\",", "fixed": "   @VisibleForTesting\n  static final ImmutableList<String> OPTIMAL_ORDER =\n      ImmutableList.of(\n      \"inlineFunctions\",\n      \"inlineVariables\",\n      \"deadAssignmentsElimination\",", "sourceBeforeFix": "List<String>", "sourceAfterFix": "ImmutableList<String>"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "31011d3232ace5a459ea2ba37f5634f7d4940694", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": " \tpublic boolean hasDuplicateUsername(String username, String systemId, Integer userId) {\r\n \t\tif (username == null || username.length() == 0)\r\n \t\t\tusername = \"-\";\r\n\t\tif (systemId == null || username.length() == 0)\r\n \t\t\tsystemId = \"-\";\r\n \t\tif (userId == null)\r", "fixed": " \tpublic boolean hasDuplicateUsername(String username, String systemId, Integer userId) {\r\n \t\tif (username == null || username.length() == 0)\r\n \t\t\tusername = \"-\";\r\n\t\tif (systemId == null || systemId.length() == 0)\r\n \t\t\tsystemId = \"-\";\r\n \t\tif (userId == null)\r", "sourceBeforeFix": "username.length()", "sourceAfterFix": "systemId.length()"}
{"fixCommitSHA1": "83b9dd427535bce39be43a9e8224cdbc352d7427", "projectName": "square.okhttp", "bugType": "Change Modifier", "problem": "   }\n   class StreamFinishingSource extends ForwardingSource {\n    public StreamFinishingSource(Source delegate) {\n       super(delegate);\n     }", "fixed": "   }\n   class StreamFinishingSource extends ForwardingSource {\n    StreamFinishingSource(Source delegate) {\n       super(delegate);\n     }", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface EjbEndpointBuilder\n            extends\n                EndpointProducerBuilder {\n         default AdvancedEjbEndpointBuilder advanced() {\n             return (AdvancedEjbEndpointBuilder) this;\n         }", "fixed": "     \n    public interface EjbEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedEjbEndpointBuilder advanced() {\n             return (AdvancedEjbEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "9a9b02c330e9e452f37335d0e59c462175bb5df7", "projectName": "wildfly.wildfly", "bugType": "Same Function Swap Args", "problem": "             Assert.fail(\"Test should fail, user shouldn't be allowed to invoke that method\");\n         } catch (WebServiceException e) {\n            Assert.assertEquals(e.getCause().getMessage(), getNotAllowedExceptionMessage(\"hello\"));\n         }\n     }", "fixed": "             Assert.fail(\"Test should fail, user shouldn't be allowed to invoke that method\");\n         } catch (WebServiceException e) {\n            Assert.assertEquals(getNotAllowedExceptionMessage(\"hello\"), e.getCause().getMessage());\n         }\n     }", "sourceBeforeFix": "Assert.assertEquals(e.getCause().getMessage(),getNotAllowedExceptionMessage(\"helloForRoles\"))", "sourceAfterFix": "Assert.assertEquals(getNotAllowedExceptionMessage(\"helloForRoles\"),e.getCause().getMessage())"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n*  @see java.util.Comparator\n \t */\n\tpublic int compare(DataInputView firstSource, DataInputView secondSource) throws IOException;", "fixed": " \t * \n*  @see java.util.Comparator\n \t */\n\tpublic abstract int compare(DataInputView firstSource, DataInputView secondSource) throws IOException;", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "88b4f19e6e0a27a51a835b32e0e4ea0002ca433f", "projectName": "wildfly.wildfly", "bugType": "Same Function More Args", "problem": "             } catch (Exception e) {\n                 throwFormattedException(e);\n             } finally {\n                log.tracef(\"%s finished request %d\", ManagementChannel.this);\n                 IoUtils.safeClose(output);\n             }\n         }", "fixed": "             } catch (Exception e) {\n                 throwFormattedException(e);\n             } finally {\n                log.tracef(\"%s finished request %d\", ManagementChannel.this, header.getBatchId());\n                 IoUtils.safeClose(output);\n             }\n         }", "sourceBeforeFix": "log.tracef(\"%s finished request %d\",ManagementChannel.this)", "sourceAfterFix": "log.tracef(\"%s finished request %d\",ManagementChannel.this,header.getBatchId())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8a9e1bcbff1ff10cf122b23b3a1aa437f02a2086", "projectName": "gephi.gephi", "bugType": "Change Unary Operator\t", "problem": "         org.gephi.graph.api.TextData sourceEdgeTextData = sourceEdgeData.getTextData();\n         String label = sourceEdgeData.getLabel();\n        if (sourceEdgeTextData != null && sourceEdgeTextData.getText() != null && sourceEdgeTextData.getText().isEmpty() && sourceEdgeTextData.isVisible()) {\n             label = sourceEdgeTextData.getText();\n         } else if (sourceEdgeTextData != null && !sourceEdgeTextData.isVisible()) {\n             label = null;", "fixed": "         org.gephi.graph.api.TextData sourceEdgeTextData = sourceEdgeData.getTextData();\n         String label = sourceEdgeData.getLabel();\n        if (sourceEdgeTextData != null && sourceEdgeTextData.getText() != null && !sourceEdgeTextData.getText().isEmpty() && sourceEdgeTextData.isVisible()) {\n             label = sourceEdgeTextData.getText();\n         } else if (sourceEdgeTextData != null && !sourceEdgeTextData.isVisible()) {\n             label = null;", "sourceBeforeFix": "sourceEdgeTextData.getText().isEmpty()", "sourceAfterFix": "!sourceEdgeTextData.getText().isEmpty()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  private final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedVertxEndpointBuilder\n             extends\n                 AdvancedVertxEndpointConsumerBuilder, AdvancedVertxEndpointProducerBuilder {\n         default VertxEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedVertxEndpointBuilder\n             extends\n                 AdvancedVertxEndpointConsumerBuilder, AdvancedVertxEndpointProducerBuilder {\n         default VertxEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "14ba691b78e51a8e9cbb97dfd39a79c2f3acfccc", "projectName": "stanfordnlp.CoreNLP", "bugType": "Change Identifier Used", "problem": "     SimpleMatrix fullVector = RNNUtils.concatenate(leftVector, rightVector);\n     for (int slice = 0; slice < size; ++slice) {\n       SimpleMatrix scaledFullVector = fullVector.scale(deltaFull.get(slice));\n      deltaTensor = deltaTensor.plus(Wt.getSlice(slice).mult(Wt.getSlice(slice).transpose()).mult(scaledFullVector));\n     }\n     return deltaTensor.plus(WTDeltaNoBias);\n   }", "fixed": "     SimpleMatrix fullVector = RNNUtils.concatenate(leftVector, rightVector);\n     for (int slice = 0; slice < size; ++slice) {\n       SimpleMatrix scaledFullVector = fullVector.scale(deltaFull.get(slice));\n      deltaTensor = deltaTensor.plus(Wt.getSlice(slice).plus(Wt.getSlice(slice).transpose()).mult(scaledFullVector));\n     }\n     return deltaTensor.plus(WTDeltaNoBias);\n   }", "sourceBeforeFix": "Wt.getSlice(slice).mult(Wt.getSlice(slice).transpose())", "sourceAfterFix": "Wt.getSlice(slice).plus(Wt.getSlice(slice).transpose())"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedKinesisEndpointBuilder\n             extends\n                 AdvancedKinesisEndpointConsumerBuilder, AdvancedKinesisEndpointProducerBuilder {\n         default KinesisEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedKinesisEndpointBuilder\n             extends\n                 AdvancedKinesisEndpointConsumerBuilder, AdvancedKinesisEndpointProducerBuilder {\n         default KinesisEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AtomixMapEndpointBuilder\n             extends\n                 AtomixMapEndpointConsumerBuilder, AtomixMapEndpointProducerBuilder {\n         default AdvancedAtomixMapEndpointBuilder advanced() {", "fixed": "     \n    public interface AtomixMapEndpointBuilder\n             extends\n                 AtomixMapEndpointConsumerBuilder, AtomixMapEndpointProducerBuilder {\n         default AdvancedAtomixMapEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "5d12b156e1150162ba3def263b2da14793304b4e", "projectName": "facebook.presto", "bugType": "Wrong Function Name", "problem": "         );\n        MaterializedResult expected = MaterializedResult.resultBuilder(taskContext.getSession(), concat(probeTypes, buildPages.getTypes()))\n                 .row(\"a\", \"a\")\n                 .row(\"a\", \"a\")\n                 .row(\"b\", \"b\")", "fixed": "         );\n        MaterializedResult expected = MaterializedResult.resultBuilder(taskContext.getSession(), concat(probeTypes, buildPages.getTypesWithoutHash()))\n                 .row(\"a\", \"a\")\n                 .row(\"a\", \"a\")\n                 .row(\"b\", \"b\")", "sourceBeforeFix": "buildPages.getTypes()", "sourceAfterFix": "buildPages.getTypesWithoutHash()"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface GridFsEndpointBuilder\n             extends\n                 GridFsEndpointConsumerBuilder, GridFsEndpointProducerBuilder {\n         default AdvancedGridFsEndpointBuilder advanced() {", "fixed": "     \n    public interface GridFsEndpointBuilder\n             extends\n                 GridFsEndpointConsumerBuilder, GridFsEndpointProducerBuilder {\n         default AdvancedGridFsEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "projectName": "Alluxio.alluxio", "bugType": "Change Operand ", "problem": "   public static void createFiles() throws IOException {\n     long startTimeMs = CommonUtils.getCurrentMs();\n    for (int k = 0; k < THREADS; k ++) {\n       int fileId = MTC.createFile(FILE_NAME + (k + BASE_FILE_NUMBER));\n       CommonUtils.printTimeTakenMs(startTimeMs, LOG, \"user_createFiles with fileId \" + fileId);\n     }", "fixed": "   public static void createFiles() throws IOException {\n     long startTimeMs = CommonUtils.getCurrentMs();\n    for (int k = 0; k < FILES; k++) {\n       int fileId = MTC.createFile(FILE_NAME + (k + BASE_FILE_NUMBER));\n       CommonUtils.printTimeTakenMs(startTimeMs, LOG, \"user_createFiles with fileId \" + fileId);\n     }", "sourceBeforeFix": "k < THREADS", "sourceAfterFix": "k < FILES"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  private final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "a6c394118fad3819a98baf4142fb59f6db3735f0", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "         return swagger;\n     }\n    private void parse(Swagger swagger, RestDefinition rest, String camelContextId, ClassResolver classResolver) {\n         List<VerbDefinition> verbs = new ArrayList<>(rest.getVerbs());\n         Collections.sort(verbs, new VerbOrdering());", "fixed": "         return swagger;\n     }\n    private void parse(Swagger swagger, RestDefinition rest, String camelContextId, ClassResolver classResolver) throws ClassNotFoundException {\n         List<VerbDefinition> verbs = new ArrayList<>(rest.getVerbs());\n         Collections.sort(verbs, new VerbOrdering());", "sourceBeforeFix": "classResolver.resolveClass(type)", "sourceAfterFix": "classResolver.resolveMandatoryClass(type)"}
{"fixCommitSHA1": "d08bf8738680178b111ce07d9b4593464125fe3a", "projectName": "yasserg.crawler4j", "bugType": "Less Specific If", "problem": "               webURL.setDepth((short) (curURL.getDepth() + 1));\n               if ((maxCrawlDepth == -1) || (curURL.getDepth() < maxCrawlDepth)) {\n                 if (shouldVisit(page, webURL)) {\n                  if (robotstxtServer.allows(webURL)) {\n                     webURL.setDocid(docIdServer.getNewDocID(webURL.getURL()));\n                     toSchedule.add(webURL);\n                   } else {", "fixed": "               webURL.setDepth((short) (curURL.getDepth() + 1));\n               if ((maxCrawlDepth == -1) || (curURL.getDepth() < maxCrawlDepth)) {\n                 if (shouldVisit(page, webURL)) {\n                  if (!shouldFollowLinksIn(webURL) || robotstxtServer.allows(webURL)) {\n                     webURL.setDocid(docIdServer.getNewDocID(webURL.getURL()));\n                     toSchedule.add(webURL);\n                   } else {", "sourceBeforeFix": "robotstxtServer.allows(webURL)", "sourceAfterFix": "!shouldFollowLinksIn(webURL) || robotstxtServer.allows(webURL)"}
{"fixCommitSHA1": "01fec049c0fb6b1c326d802687f3093b502123e0", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": " \t\t\t\t\tlog.info(\"onShutdown Stopping thread: \" + thread.getName());\r\n \t\t\t\t\tthread.stop();\r\n \t\t\t\t}\r\n\t\t\t\tcatch (Throwable ex) {\r\n \t\t\t\t\tlog.error(ex.getMessage(), ex);\r\n \t\t\t\t}\r\n \t\t\t}\r", "fixed": " \t\t\t\t\tlog.info(\"onShutdown Stopping thread: \" + thread.getName());\r\n \t\t\t\t\tthread.stop();\r\n \t\t\t\t}\r\n\t\t\t\tcatch (Exception ex) {\r\n \t\t\t\t\tlog.error(ex.getMessage(), ex);\r\n \t\t\t\t}\r\n \t\t\t}\r", "sourceBeforeFix": "Throwable ex", "sourceAfterFix": "Exception ex"}
{"fixCommitSHA1": "014f2410e81ed3ecc6b82fbac49ab345aab6e90f", "projectName": "junit-team.junit", "bugType": "Change Modifier", "problem": "     }\n     @FixMethodOrder(MethodSorters.NAME_ASCENDING)\n    private static class DummySortWithNameAsc {\n         Object alpha(int i, double d, Thread t) {return null;}\n         void beta(int[][] x) {}\n         int gamma() {return 0;}", "fixed": "     }\n     @FixMethodOrder(MethodSorters.NAME_ASCENDING)\n    static class DummySortWithNameAsc {\n         Object alpha(int i, double d, Thread t) {return null;}\n         void beta(int[][] x) {}\n         int gamma() {return 0;}", "sourceBeforeFix": "10", "sourceAfterFix": "8"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should fail if global property being updated does not already exist\n \t * @should update a global property whose typed value is handled by a custom datatype\n \t */\n\tpublic void updateGlobalProperty(String propertyName, String propertyValue) throws IllegalStateException;\n \t/**\n \t * Save the given global property to the database", "fixed": " \t * @should fail if global property being updated does not already exist\n \t * @should update a global property whose typed value is handled by a custom datatype\n \t */\n\tpublic void updateGlobalProperty(String propertyName, String propertyValue);\n \t/**\n \t * Save the given global property to the database", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "bbc30c2607acb6b849d25219bbf07774809d90d7", "projectName": "apache.hadoop", "bugType": "Change Modifier", "problem": "     return false;\n   }\n  String getBlockPoolId() {\n     if (bpNSInfo != null) {\n       return bpNSInfo.getBlockPoolID();\n     } else {", "fixed": "     return false;\n   }\n  synchronized String getBlockPoolId() {\n     if (bpNSInfo != null) {\n       return bpNSInfo.getBlockPoolID();\n     } else {", "sourceBeforeFix": "0", "sourceAfterFix": "32"}
{"fixCommitSHA1": "a295b91c37f681199a83fdb963344c19e0d015c0", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "     private void handleAtomicNumberSet(String[] args) {\n         long v = 0;\n         if (args.length > 1) {\n            v = Long.valueOf(args[1]);\n         }\n         getAtomicNumber().set(v);\n         println(getAtomicNumber().get());", "fixed": "     private void handleAtomicNumberSet(String[] args) {\n         long v = 0;\n         if (args.length > 1) {\n            v = Long.parseLong(args[1]);\n         }\n         getAtomicNumber().set(v);\n         println(getAtomicNumber().get());", "sourceBeforeFix": "Long.valueOf(args[1])", "sourceAfterFix": "Long.parseLong(args[1])"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should return all global properties in the database\n \t */\n \t@Authorized(PrivilegeConstants.GET_GLOBAL_PROPERTIES)\n\tpublic List<GlobalProperty> getAllGlobalProperties() throws APIException;\n \t/**\n \t * Save the given list of global properties to the database.", "fixed": " \t * @should return all global properties in the database\n \t */\n \t@Authorized(PrivilegeConstants.GET_GLOBAL_PROPERTIES)\n\tpublic List<GlobalProperty> getAllGlobalProperties();\n \t/**\n \t * Save the given list of global properties to the database.", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "4a58fb4210d1220403a0c275dedb64b6467664e5", "projectName": "hazelcast.hazelcast", "bugType": "Change Binary Operator", "problem": "                 if (v.getLock() == LOCK_SUCCESS) {\n                     continue;\n                 }\n                if (v.getCreationTime() + timeToLive > now) {\n                     iter.remove();\n                 } else if (maxSize > 0 && maxSize != Integer.MAX_VALUE) {\n                     if (entries == null) {", "fixed": "                 if (v.getLock() == LOCK_SUCCESS) {\n                     continue;\n                 }\n                if (v.getCreationTime() + timeToLive < now) {\n                     iter.remove();\n                 } else if (maxSize > 0 && maxSize != Integer.MAX_VALUE) {\n                     if (entries == null) {", "sourceBeforeFix": "v.getCreationTime() + timeToLive > now", "sourceAfterFix": "v.getCreationTime() + timeToLive < now"}
{"fixCommitSHA1": "ea13a9c821a275561e56c45d5f0b90479904508d", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "         }\n         doRemoveRecord(key, source);\n         if (isEventsEnabled()) {\n            publishEvent(createCacheExpiredEvent(key, toEventData(record), CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                  origin, IGNORE_COMPLETION));\n         }\n         return null;", "fixed": "         }\n         doRemoveRecord(key, source);\n         if (isEventsEnabled()) {\n            publishEvent(createCacheExpiredEvent(toEventData(key), toEventData(record),\n                                                 CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                  origin, IGNORE_COMPLETION));\n         }\n         return null;", "sourceBeforeFix": "toHeapData(key)", "sourceAfterFix": "toEventData(key)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "af07edf1ab9024a78cb280e85982b1d6661a09ad", "projectName": "apache.hadoop", "bugType": "Change Modifier", "problem": "    * \n    * @param queueName Name of the job queue.\n    */\n  protected void setQueueName(String queueName) {\n     super.setQueueName(queueName);\n   }", "fixed": "    * \n    * @param queueName Name of the job queue.\n    */\n  @InterfaceAudience.Private\n  public void setQueueName(String queueName) {\n     super.setQueueName(queueName);\n   }", "sourceBeforeFix": "4", "sourceAfterFix": "1"}
{"fixCommitSHA1": "8abfa48f2eb5edaf3f5a2cc2350e4e3c232f4152", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "      * @throws NumberFormatException if a component substring does not\n      * contain a parsable integer.\n      */\n    public CSVFilter(String pattern) {\n         final StringTokenizer tokenizer = new StringTokenizer(pattern, \",\");\n         while (tokenizer.hasMoreTokens()) {\n             final String token = tokenizer.nextToken().trim();", "fixed": "      * @throws NumberFormatException if a component substring does not\n      * contain a parsable integer.\n      */\n    CSVFilter(String pattern) {\n         final StringTokenizer tokenizer = new StringTokenizer(pattern, \",\");\n         while (tokenizer.hasMoreTokens()) {\n             final String token = tokenizer.nextToken().trim();", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      * @param task          the task.\n      */\n     @LogMessage(level = Level.ERROR)\n    @Message(id = 15808, value = \"%s caught %s waiting for task %s\")\n     void caughtExceptionWaitingForTask(String className, String exceptionName, String task);\n     /**", "fixed": "      * @param task          the task.\n      */\n     @LogMessage(level = Level.ERROR)\n    @Message(id = 10808, value = \"%s caught %s waiting for task %s\")\n     void caughtExceptionWaitingForTask(String className, String exceptionName, String task);\n     /**", "sourceBeforeFix": "id=15805", "sourceAfterFix": "id=10805"}
{"fixCommitSHA1": "7c7309b5fb6276e4098921915a8e0c39a5cd3450", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "     Whitebox.setInternalState(NetworkAddressUtils.class, \"sLocalHost\", \"localhost\");\n    BlockMasterClient masterClientMock = PowerMockito.mock(BlockMasterClient.class);\n     List<WorkerInfo> list = new ArrayList<>();\n     list.add(new WorkerInfo().setAddress(new WorkerNetAddress().setHost(\"localhost\")));\n     PowerMockito.doReturn(list).when(masterClientMock).getWorkerInfoList();\n    PowerMockito.whenNew(BlockMasterClient.class).withArguments(Mockito.any())\n         .thenReturn(masterClientMock);", "fixed": "     Whitebox.setInternalState(NetworkAddressUtils.class, \"sLocalHost\", \"localhost\");\n    RetryHandlingBlockMasterClient masterClientMock =\n        PowerMockito.mock(RetryHandlingBlockMasterClient.class);\n     List<WorkerInfo> list = new ArrayList<>();\n     list.add(new WorkerInfo().setAddress(new WorkerNetAddress().setHost(\"localhost\")));\n     PowerMockito.doReturn(list).when(masterClientMock).getWorkerInfoList();\n    PowerMockito.whenNew(RetryHandlingBlockMasterClient.class).withArguments(Mockito.any())\n         .thenReturn(masterClientMock);", "sourceBeforeFix": "BlockMasterClient.class", "sourceAfterFix": "RetryHandlingBlockMasterClient.class"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface HazelcastMapEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedHazelcastMapEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface HazelcastMapEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedHazelcastMapEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "0fc882f517228b6d793b9ef0da5c3fd77c70a9bd", "projectName": "mybatis.mybatis-3", "bugType": "Change Identifier Used", "problem": "   public void setNonNullParameter(PreparedStatement ps, int i, E parameter, JdbcType jdbcType) throws SQLException {\r\n     if (jdbcType == null) {\r\n        ps.setString(i, parameter.toString());\r\n     } else {\r\n        ps.setObject(i, parameter.toString(), jdbcType.TYPE_CODE);\r\n     }\r\n   }\r", "fixed": "   public void setNonNullParameter(PreparedStatement ps, int i, E parameter, JdbcType jdbcType) throws SQLException {\r\n     if (jdbcType == null) {\r\n        ps.setString(i, parameter.name());\r\n     } else {\r\n        ps.setObject(i, parameter.name(), jdbcType.TYPE_CODE);\r\n     }\r\n   }\r", "sourceBeforeFix": "parameter.toString()", "sourceAfterFix": "parameter.name()"}
{"fixCommitSHA1": "8ac574dd4bedea9829f0403ba2718e86c6aa5211", "projectName": "openhab.openhab", "bugType": "More Specific If", "problem": " \t\tif (zProvider != null) {\n \t\t\tZWaveBindingConfig bindingConfig = zProvider.getZwaveBindingConfig(itemName);\n\t\t\tif (bindingConfig != null) {\n \t\t\t\t\tconverterHandler.executeRefresh(zProvider, itemName, true);\n \t\t\t}\n \t\t}", "fixed": " \t\tif (zProvider != null) {\n \t\t\tZWaveBindingConfig bindingConfig = zProvider.getZwaveBindingConfig(itemName);\n\t\t\tif (bindingConfig != null && converterHandler != null) {\n \t\t\t\t\tconverterHandler.executeRefresh(zProvider, itemName, true);\n \t\t\t}\n \t\t}", "sourceBeforeFix": "bindingConfig != null", "sourceAfterFix": "bindingConfig != null && converterHandler != null"}
{"fixCommitSHA1": "0e597ee397058f4b418d5509df27ffb332929ef1", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t\t\t\tfinal float localYSin = localY * sin;\r\n \t\t\t\tfinal float localX2Cos = localX2 * cos;\r\n \t\t\t\tfinal float localX2Sin = localX2 * sin;\r\n\t\t\t\tfinal float localY2Cos = localX2 * cos;\r\n \t\t\t\tfinal float localY2Sin = localY2 * sin;\r\n \t\t\t\tfinal float x1 = localXCos - localYSin + worldOriginX;\r", "fixed": " \t\t\t\tfinal float localYSin = localY * sin;\r\n \t\t\t\tfinal float localX2Cos = localX2 * cos;\r\n \t\t\t\tfinal float localX2Sin = localX2 * sin;\r\n\t\t\t\tfinal float localY2Cos = localY2 * cos;\r\n \t\t\t\tfinal float localY2Sin = localY2 * sin;\r\n \t\t\t\tfinal float x1 = localXCos - localYSin + worldOriginX;\r", "sourceBeforeFix": "localX2 * cos", "sourceAfterFix": "localY2 * cos"}
{"fixCommitSHA1": "dad74a846d56bbb7593f8e6ebf388eb9902ff04a", "projectName": "hazelcast.hazelcast", "bugType": "Change Numeric Literal", "problem": "     }\n     public class PutItemsThread extends Thread {\n        public static final int MAX_ITEMS = 1000;\n         public final MyEntryListener listener = new MyEntryListener();\n         public HazelcastInstance client;", "fixed": "     }\n     public class PutItemsThread extends Thread {\n        public static final int MAX_ITEMS = 100;\n         public final MyEntryListener listener = new MyEntryListener();\n         public HazelcastInstance client;", "sourceBeforeFix": "MAX_ITEMS=1000", "sourceAfterFix": "MAX_ITEMS=100"}
{"fixCommitSHA1": "289fec327e830d8a5252f831ae07d57e1bdeead3", "projectName": "Atmosphere.atmosphere", "bugType": "Change Identifier Used", "problem": "                 logger.trace(\"\", e);\n             }\n            w.println(padding);\n             w.flush();\n         }\n     }", "fixed": "                 logger.trace(\"\", e);\n             }\n            w.println(paddingText);\n             w.flush();\n         }\n     }", "sourceBeforeFix": "w.println(padding)", "sourceAfterFix": "w.println(paddingText)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "fixed": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniformfv(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniformiv(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "sourceBeforeFix": "GL20.glUniform2(location,toFloatBuffer(v,offset,count << 1))", "sourceAfterFix": "GL20.glUniform2fv(location,toFloatBuffer(v,offset,count << 1))"}
{"fixCommitSHA1": "24bc88e4ccc3f2e3e8419acb5a5084f5dd26634d", "projectName": "naver.pinpoint", "bugType": "Less Specific If", "problem": "     }\n     private boolean validate(Object[] args) {\n        if (args.length == 0) {\n             return false;\n         }", "fixed": "     }\n     private boolean validate(Object[] args) {\n        if (args == null || args.length == 0) {\n             return false;\n         }", "sourceBeforeFix": "args.length == 0", "sourceAfterFix": "args == null || args.length == 0"}
{"fixCommitSHA1": "9771ba62390a56363b20e52f12a8b9b34c51da62", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "     public void testSamplingUsingmessageFrequency() throws Exception {\n         long totalMessages = 100;\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedMessageCount(10);\n         mock.setResultWaitTime(100);\n         for (int i = 0; i < totalMessages; i++) {", "fixed": "     public void testSamplingUsingmessageFrequency() throws Exception {\n         long totalMessages = 100;\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedMinimumMessageCount(10);\n         mock.setResultWaitTime(100);\n         for (int i = 0; i < totalMessages; i++) {", "sourceBeforeFix": "mock.expectedMessageCount(2)", "sourceAfterFix": "mock.expectedMinimumMessageCount(2)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  private final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "588cfa851896440f9d1208654e33ed480a33e7da", "projectName": "netty.netty", "bugType": "Same Function More Args", "problem": "             return EMPTY_BUFFER;\n         }\n         if (!buffer.isReadOnly() && buffer.hasArray()) {\n            return wrappedBuffer(buffer.array(), buffer.arrayOffset(),buffer.remaining());\n         } else {\n             return new ByteBufferBackedChannelBuffer(buffer);\n         }", "fixed": "             return EMPTY_BUFFER;\n         }\n         if (!buffer.isReadOnly() && buffer.hasArray()) {\n            return wrappedBuffer(buffer.order(), buffer.array(), buffer.arrayOffset(),buffer.remaining());\n         } else {\n             return new ByteBufferBackedChannelBuffer(buffer);\n         }", "sourceBeforeFix": "wrappedBuffer(buffer.array(),buffer.arrayOffset(),buffer.remaining())", "sourceAfterFix": "wrappedBuffer(buffer.order(),buffer.array(),buffer.arrayOffset(),buffer.remaining())"}
{"fixCommitSHA1": "07d861c5ffbbbfde18ebfef12e3d57ba4dc2be42", "projectName": "netty.netty", "bugType": "Less Specific If", "problem": "             public void operationComplete(Future<AddressedEnvelope<DnsResponse, InetSocketAddress>> future) {\n                 queriesInProgress.remove(future);\n                if (promise.isDone()) {\n                     return;\n                 }", "fixed": "             public void operationComplete(Future<AddressedEnvelope<DnsResponse, InetSocketAddress>> future) {\n                 queriesInProgress.remove(future);\n                if (promise.isDone() || future.isCancelled()) {\n                     return;\n                 }", "sourceBeforeFix": "promise.isDone()", "sourceAfterFix": "promise.isDone() || future.isCancelled()"}
{"fixCommitSHA1": "ff34b04700d0417df1049e4d749fdf430076965b", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "         }\n     }\n    private static boolean shouldAppendSpace(StringBuffer text, char firstCharToAppend) {\n         final boolean result;\n         if (text.length() == 0) {", "fixed": "         }\n     }\n    private static boolean shouldAppendSpace(StringBuilder text, char firstCharToAppend) {\n         final boolean result;\n         if (text.length() == 0) {", "sourceBeforeFix": "StringBuffer result", "sourceAfterFix": "StringBuilder result"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface IgniteCacheEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedIgniteCacheEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface IgniteCacheEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedIgniteCacheEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AsteriskEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedAsteriskEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface AsteriskEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedAsteriskEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "4665dcf9ab41c3c61cd42aad296ebfe518bfa003", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\n \tpublic void glCopyTexImage2D (int target, int level, int internalformat, int x, int y, int width, int height, int border) {\n\t\tGL.glCopyTexImage2DEXT(target, level, internalformat, x, y, width, height, border);\n \t}\n \tpublic void glCopyTexSubImage2D (int target, int level, int xoffset, int yoffset, int x, int y, int width, int height) {\n\t\tGL.glCopyTexSubImage2DEXT(target, level, xoffset, yoffset, x, y, width, height);\n \t}\n \tpublic void glCullFace (int mode) {", "fixed": " \t}\n \tpublic void glCopyTexImage2D (int target, int level, int internalformat, int x, int y, int width, int height, int border) {\n\t\tGL.glCopyTexImage2D(target, level, internalformat, x, y, width, height, border);\n \t}\n \tpublic void glCopyTexSubImage2D (int target, int level, int xoffset, int yoffset, int x, int y, int width, int height) {\n\t\tGL.glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height);\n \t}\n \tpublic void glCullFace (int mode) {", "sourceBeforeFix": "GL.glCopyTexSubImage2DEXT(target,level,xoffset,yoffset,x,y,width,height)", "sourceAfterFix": "GL.glCopyTexSubImage2D(target,level,xoffset,yoffset,x,y,width,height)"}
{"fixCommitSHA1": "8dfebd28f7231f2b39946cd11f6bfd4edb822969", "projectName": "yusuke.twitter4j", "bugType": "Same Function More Args", "problem": "     public static Date getDate(String name, String format) throws TwitterException {\n         SimpleDateFormat sdf = formatMap.get().get(format);\n         if (null == sdf) {\n            sdf = new SimpleDateFormat(format);\n             sdf.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n             formatMap.get().put(format, sdf);\n         }", "fixed": "     public static Date getDate(String name, String format) throws TwitterException {\n         SimpleDateFormat sdf = formatMap.get().get(format);\n         if (null == sdf) {\n            sdf = new SimpleDateFormat(format, Locale.US);\n             sdf.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n             formatMap.get().put(format, sdf);\n         }", "sourceBeforeFix": "new SimpleDateFormat(format)", "sourceAfterFix": "new SimpleDateFormat(format,Locale.US)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "1d5647b92215f0ceabced59275225ad829061663", "projectName": "spring-projects.spring-boot", "bugType": "Change Modifier", "problem": " \tprivate int port = Integer.valueOf(System.getProperty(\"port\"));\n \t@Test\n\tpublic void testHome() throws Exception {\nString url = \"http:\n \t\tResponseEntity<String> entity = this.rest.getForEntity(url, String.class);\n \t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);", "fixed": " \tprivate int port = Integer.valueOf(System.getProperty(\"port\"));\n \t@Test\n\tvoid testHome() throws Exception {\nString url = \"http:\n \t\tResponseEntity<String> entity = this.rest.getForEntity(url, String.class);\n \t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15863, value = \"%s is not a valid URL -- %s\")\n     String invalidUrl(String url, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10863, value = \"%s is not a valid URL -- %s\")\n     String invalidUrl(String url, String message);\n     /**", "sourceBeforeFix": "id=15835", "sourceAfterFix": "id=10835"}
{"fixCommitSHA1": "f6d744886d5c1da6df47a510efe629974e2a5715", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Change Identifier Used", "problem": "                             }\n                         });\n                     } else {\n                        nextRequest(request, future);\n                     }\n                 }", "fixed": "                             }\n                         });\n                     } else {\n                        nextRequest(newRequest, future);\n                     }\n                 }", "sourceBeforeFix": "nextRequest(request,future)", "sourceAfterFix": "nextRequest(newRequest,future)"}
{"fixCommitSHA1": "cdcc5397439b2e7441180a4712d7163afa451a6d", "projectName": "google.guava", "bugType": "Wrong Function Name", "problem": "   private static TesterRequirements buildTesterRequirements(\n       Annotation testerAnnotation)\n       throws ConflictingRequirementsException {\n    Class<? extends Annotation> annotationClass = testerAnnotation.getClass();\n     final Feature<?>[] presentFeatures;\n     final Feature<?>[] absentFeatures;\n     try {", "fixed": "   private static TesterRequirements buildTesterRequirements(\n       Annotation testerAnnotation)\n       throws ConflictingRequirementsException {\n    Class<? extends Annotation> annotationClass = testerAnnotation.annotationType();\n     final Feature<?>[] presentFeatures;\n     final Feature<?>[] absentFeatures;\n     try {", "sourceBeforeFix": "testerAnnotation.getClass()", "sourceAfterFix": "testerAnnotation.annotationType()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "312ba4238e15b4f95054ca33ee1b3604afbd8d74", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": " \t\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t\tif (conceptToValidate.getConceptId() != null\r\n\t\t\t\t\t\t\t\t        && conceptToValidate.getConceptId().equals(concept.getConceptId()))\r\n \t\t\t\t\t\t\t\t\tcontinue;\r", "fixed": " \t\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t\tif (conceptToValidate.getUuid() != null\r\n\t\t\t\t\t\t\t\t        && conceptToValidate.getUuid().equals(concept.getUuid()))\r\n \t\t\t\t\t\t\t\t\tcontinue;\r", "sourceBeforeFix": "conceptToValidate.getConceptId()", "sourceAfterFix": "conceptToValidate.getUuid()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "d9cee23da79c7368a47a894f1bf861f04fdb6f00", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "             out.writeDouble((Double) obj);\n         } else if (obj instanceof Float) {\n             out.writeByte(5);\n            out.writeDouble((Float) obj);\n         } else if (obj instanceof Boolean) {\n             out.writeByte(6);\n             out.writeBoolean((Boolean) obj);", "fixed": "             out.writeDouble((Double) obj);\n         } else if (obj instanceof Float) {\n             out.writeByte(5);\n            out.writeFloat((Float) obj);\n         } else if (obj instanceof Boolean) {\n             out.writeByte(6);\n             out.writeBoolean((Boolean) obj);", "sourceBeforeFix": "in.readInt()", "sourceAfterFix": "in.readLong()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetProgramiv (int program, int pname, IntBuffer params) {\r\n\t\tGL20.glGetProgram(program, pname, params);\r\n \t}\r\n \tpublic void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tEXTFramebufferObject.glGetRenderbufferParameterEXT(target, pname, params);\r\n \t}\r\n \tpublic String glGetShaderInfoLog (int shader) {\r", "fixed": " \t}\r\n \tpublic void glGetProgramiv (int program, int pname, IntBuffer params) {\r\n\t\tGL20.glGetProgramiv(program, pname, params);\r\n \t}\r\n \tpublic void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tEXTFramebufferObject.glGetRenderbufferParameterivEXT(target, pname, params);\r\n \t}\r\n \tpublic String glGetShaderInfoLog (int shader) {\r", "sourceBeforeFix": "GL20.glGetProgram(program,pname,params)", "sourceAfterFix": "GL20.glGetProgramiv(program,pname,params)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  private final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(741);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {Console.WriteLine($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "fixed": " \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(740);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {Console.WriteLine($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "sourceBeforeFix": "new StringBuilder(246)", "sourceAfterFix": "new StringBuilder(245)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "2", "sourceAfterFix": "0"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<DirectMessage> getSentDirectMessages(Paging paging) throws\n             TwitterException {\n        return DirectMessage.constructDirectMessages(get(getBaseURL() +\n                 \"direct_messages/sent.json\", new PostParameter[0],\n                 paging.asPostParameterList(), true));\n     }", "fixed": "      */\n     public ResponseList<DirectMessage> getSentDirectMessages(Paging paging) throws\n             TwitterException {\n        return DirectMessage.createDirectMessageList(get(getBaseURL() +\n                 \"direct_messages/sent.json\", new PostParameter[0],\n                 paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))"}
{"fixCommitSHA1": "17de6689ab43b6d8fc8b60b87eb1155ba55b26f6", "projectName": "spring-projects.spring-boot", "bugType": "Change Numeric Literal", "problem": "  * to <code>vcap.application.*</code> in a fairly obvious way, and the VCAP_SERVICES\n  * object is unwrapped so that it is a hash of objects with key equal to the service\n  * instance name (e.g. \"mysql\" in the example above), and value equal to that instances\n * properties, and then flattened in the smae way. E.g.\n  * \n  * <pre>\n  * vcap.application.instance_id: 2ce0ac627a6c8e47e936d829a3a47b5b", "fixed": "  * to <code>vcap.application.*</code> in a fairly obvious way, and the VCAP_SERVICES\n  * object is unwrapped so that it is a hash of objects with key equal to the service\n  * instance name (e.g. \"mysql\" in the example above), and value equal to that instances\n * properties, and then flattened in the same way. E.g.\n  * \n  * <pre>\n  * vcap.application.instance_id: 2ce0ac627a6c8e47e936d829a3a47b5b", "sourceBeforeFix": "Integer.MIN_VALUE + 11", "sourceAfterFix": "Integer.MIN_VALUE + 9"}
{"fixCommitSHA1": "e1d89ddbf6028369fd3117ff648fc6f16a1786fe", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "                     LOG.trace(\"OpenTracing: start server span=\" + span);\n                 }\n             } catch (Throwable t) {\n                LOG.error(\"OpenTracing: Failed to capture tracing data\", t);\n             }\n         }", "fixed": "                     LOG.trace(\"OpenTracing: start server span=\" + span);\n                 }\n             } catch (Throwable t) {\n                LOG.warn(\"OpenTracing: Failed to capture tracing data\", t);\n             }\n         }", "sourceBeforeFix": "LOG.error(\"OpenTracing: Failed to capture tracing data\",t)", "sourceAfterFix": "LOG.warn(\"OpenTracing: Failed to capture tracing data\",t)"}
{"fixCommitSHA1": "4d60ea2aeb1071bebcd6471b550e6648a9fe05a1", "projectName": "netty.netty", "bugType": "Change Modifier", "problem": "      *\n      * @return {@code true} if and only if the watcher thread has been terminated\n      */\n    public boolean awaitInactivity(long timeout, TimeUnit unit) throws InterruptedException {\n         if (unit == null) {\n             throw new NullPointerException(\"unit\");\n         }", "fixed": "      *\n      * @return {@code true} if and only if the watcher thread has been terminated\n      */\n    public static boolean awaitInactivity(long timeout, TimeUnit unit) throws InterruptedException {\n         if (unit == null) {\n             throw new NullPointerException(\"unit\");\n         }", "sourceBeforeFix": "1", "sourceAfterFix": "9"}
{"fixCommitSHA1": "359ce65a7b6ec7725d4fea3aca1a299cd2b7f7ba", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "      * @param column column index.\n      * @return value at specified column.\n      */\n    private Object getValueAtDetailAST(DetailAST ast, int column) {\n         final Object value;\n         switch (column) {", "fixed": "      * @param column column index.\n      * @return value at specified column.\n      */\n    private static Object getValueAtDetailAST(DetailAST ast, int column) {\n         final Object value;\n         switch (column) {", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "370ead7395fc9194a3dc2d05afc4b3409f6b27da", "projectName": "apache.hive", "bugType": "Change Identifier Used", "problem": "     }\n   }\n  private HashMap<String, ASTNode> doPhase1GetAggregationsFromSelect(\n       ASTNode selExpr) {\n    HashMap<String, ASTNode> aggregationTrees = new HashMap<String, ASTNode>();\n     for (int i = 0; i < selExpr.getChildCount(); ++i) {\n       ASTNode sel = (ASTNode) selExpr.getChild(i).getChild(0);\n       doPhase1GetAllAggregations(sel, aggregationTrees);", "fixed": "     }\n   }\n  private LinkedHashMap<String, ASTNode> doPhase1GetAggregationsFromSelect(\n       ASTNode selExpr) {\n    LinkedHashMap<String, ASTNode> aggregationTrees = new LinkedHashMap<String, ASTNode>();\n     for (int i = 0; i < selExpr.getChildCount(); ++i) {\n       ASTNode sel = (ASTNode) selExpr.getChild(i).getChild(0);\n       doPhase1GetAllAggregations(sel, aggregationTrees);", "sourceBeforeFix": "HashMap<String,ASTNode>", "sourceAfterFix": "LinkedHashMap<String,ASTNode>"}
{"fixCommitSHA1": "d128304bceaef2df9d8c527979010d56e6425bb4", "projectName": "facebook.presto", "bugType": "Change Unary Operator\t", "problem": "     @Override\n     public void accept(MethodVisitor visitor, MethodGenerationContext generationContext)\n     {\n        checkState(condition.isEmpty(), \"WhileLoop does not have a condition set\");\n         Block block = new Block()\n                 .visitLabel(continueLabel)", "fixed": "     @Override\n     public void accept(MethodVisitor visitor, MethodGenerationContext generationContext)\n     {\n        checkState(!condition.isEmpty(), \"WhileLoop does not have a condition set\");\n         Block block = new Block()\n                 .visitLabel(continueLabel)", "sourceBeforeFix": "condition.isEmpty()", "sourceAfterFix": "!condition.isEmpty()"}
{"fixCommitSHA1": "04a010c8499fbc96b1e5a99bdbebaf0b38d24586", "projectName": "libgdx.libgdx", "bugType": "Change Binary Operator", "problem": "* @return {@link\n \tpublic char[] ensureCapacity (int additionalCapacity) {\r\n \t\tint sizeNeeded = size + additionalCapacity;\r\n\t\tif (sizeNeeded >= items.length) resize(Math.max(8, sizeNeeded));\r\n \t\treturn items;\r\n \t}\r", "fixed": "* @return {@link\n \tpublic char[] ensureCapacity (int additionalCapacity) {\r\n \t\tint sizeNeeded = size + additionalCapacity;\r\n\t\tif (sizeNeeded > items.length) resize(Math.max(8, sizeNeeded));\r\n \t\treturn items;\r\n \t}\r", "sourceBeforeFix": "sizeNeeded >= items.length", "sourceAfterFix": "sizeNeeded > items.length"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface TelegramEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedTelegramEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface TelegramEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedTelegramEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": " import org.jboss.logging.MessageLogger;\n /**\n * This module is using message IDs in the range 10900-10999. This file is using the subset 10950-10974 for domain\n* controller logger messages. See http:\n  * JBAS message id blocks.\n  * <p/>", "fixed": " import org.jboss.logging.MessageLogger;\n /**\n * This module is using message IDs in the range 10800-10999. This file is using the subset 10800-10829 for domain\n* controller logger messages. See http:\n  * JBAS message id blocks.\n  * <p/>", "sourceBeforeFix": "id=15803", "sourceAfterFix": "id=10803"}
{"fixCommitSHA1": "038ea1803bae1cf3be279b36395b4de4e0ff39b5", "projectName": "openhab.openhab", "bugType": "Change Identifier Used", "problem": " \t\t\tString payload, String payloadType, boolean retry)\n \t\t\tthrows IOException, InvalidLoginException {\n\t\tlogger.debug(\"Requsting URL {}\", url);\n \t\tString dataString = executeUrl(method, url, header,\n \t\t\t\tpayload == null ? null : IOUtils.toInputStream(payload),\n \t\t\t\tpayloadType, timeout);\n\t\tlogger.debug(\"Received MyQ  JSON: {}\", dataString);\n \t\tif (dataString == null) {\n \t\t\tthrow new IOException(\"Null response from MyQ server\");", "fixed": " \t\t\tString payload, String payloadType, boolean retry)\n \t\t\tthrows IOException, InvalidLoginException {\n\t\tlogger.trace(\"Requsting URL {}\", url);\n \t\tString dataString = executeUrl(method, url, header,\n \t\t\t\tpayload == null ? null : IOUtils.toInputStream(payload),\n \t\t\t\tpayloadType, timeout);\n\t\tlogger.trace(\"Received MyQ  JSON: {}\", dataString);\n \t\tif (dataString == null) {\n \t\t\tthrow new IOException(\"Null response from MyQ server\");", "sourceBeforeFix": "logger.debug(\"Received MyQ  JSON: {}\",dataString)", "sourceAfterFix": "logger.trace(\"Received MyQ  JSON: {}\",dataString)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  private final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_de() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"06.05.2016\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_de() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"06.05.2016\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "4a14fe194b8163a6b7b0c97c436e2d173c7929c0", "projectName": "openmrs.openmrs-core", "bugType": "Change Numeric Literal", "problem": " \t\tt5.setTaskClass(SampleTask5.class.getName());\r\n \t\tschedulerService.scheduleTask(t5);\r\n\t\tThread.sleep(1200);\r\n \t\tassertEquals(Arrays.asList(\"INIT-START-5\", \"INIT-END-5\", \"IN EXECUTE\"), outputForInitExecSync);\r\n \t}\r", "fixed": " \t\tt5.setTaskClass(SampleTask5.class.getName());\r\n \t\tschedulerService.scheduleTask(t5);\r\n\t\tThread.sleep(2500);\r\n \t\tassertEquals(Arrays.asList(\"INIT-START-5\", \"INIT-END-5\", \"IN EXECUTE\"), outputForInitExecSync);\r\n \t}\r", "sourceBeforeFix": "Thread.sleep(1200)", "sourceAfterFix": "Thread.sleep(2500)"}
{"fixCommitSHA1": "958fa58492daee485f640bf3261449d9bab9ee6e", "projectName": "facebook.presto", "bugType": "Change Identifier Used", "problem": "     }\n     @SuppressWarnings(\"ResultOfMethodCallIgnored\")\n    @Test(expectedExceptions = RuntimeException.class, expectedExceptionsMessageRegExp = \".*Failing getObject call with \" + SC_NOT_FOUND + \".*\")\n     public void testReadNotFound()\n             throws Exception\n     {", "fixed": "     }\n     @SuppressWarnings(\"ResultOfMethodCallIgnored\")\n    @Test(expectedExceptions = IOException.class, expectedExceptionsMessageRegExp = \".*Failing getObject call with \" + SC_NOT_FOUND + \".*\")\n     public void testReadNotFound()\n             throws Exception\n     {", "sourceBeforeFix": "RuntimeException.class", "sourceAfterFix": "IOException.class"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * @throws IOException Thrown, if the serialization encountered an I/O related error. Typically raised by the\n \t *                     output view, which may have an underlying I/O channel to which it delegates.\n \t */\n\tpublic void serialize(T record, DataOutputView target) throws IOException;\n \t/**\n \t * De-serializes a record from the given source input view into the given target record instance.", "fixed": " \t * @throws IOException Thrown, if the serialization encountered an I/O related error. Typically raised by the\n \t *                     output view, which may have an underlying I/O channel to which it delegates.\n \t */\n\tpublic abstract void serialize(T record, DataOutputView target) throws IOException;\n \t/**\n \t * De-serializes a record from the given source input view into the given target record instance.", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "e7bf415427b37bbc760ff9b9c69650db8ec477e4", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnBean(RabbitTemplate.class)\n\t@ConditionalOnEnablednHealthIndicator(\"rabbit\")\n \tpublic static class RabbitHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<RabbitHealthIndicator, RabbitTemplate> {", "fixed": " \t@Configuration\n \t@ConditionalOnBean(RabbitTemplate.class)\n\t@ConditionalOnEnabledHealthIndicator(\"rabbit\")\n \tpublic static class RabbitHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<RabbitHealthIndicator, RabbitTemplate> {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"mongo\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"mongo\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "5b669bd30cef473ddf2c0c0318652a938d8d3428", "projectName": "stanfordnlp.CoreNLP", "bugType": "Change Identifier Used", "problem": "   private static final Redwood.RedwoodChannels log = Redwood.channels(StanfordCoreNLPClient.class);\n   \nprivate static final Pattern URL_PATTERN = Pattern.compile(\"(?:(https?):\n   /**\n    * Information on how to connect to a backend.\n    * The semantics of one of these objects is as follows:\n    * <ul>\n    *   <li>It should define a hostname and port to connect to.</li>\n    *   <li>This represents ONE thread on the remote server. The client should", "fixed": "   private static final Redwood.RedwoodChannels log = Redwood.channels(StanfordCoreNLPClient.class);\n   \nprivate static final Pattern URL_PATTERN = Pattern.compile(\"(?:(https?):\n   /**\n    * Information on how to connect to a backend.\n    * The semantics of one of these objects is as follows:\n   *\n    * <ul>\n    *   <li>It should define a hostname and port to connect to.</li>\n    *   <li>This represents ONE thread on the remote server. The client should", "sourceBeforeFix": "log.warn(\"Could not annotate via server! Trying to annotate locally...\",t)", "sourceAfterFix": "log.err(\"Could not annotate via server! Trying to annotate locally...\",t)"}
{"fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "projectName": "Alluxio.alluxio", "bugType": "Change Operand ", "problem": "       if (TACHYON_STREAMING_READ) {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n           InputStream is = file.getInStream(ReadType.CACHE);\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;", "fixed": "       if (TACHYON_STREAMING_READ) {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           InputStream is = file.getInStream(ReadType.CACHE);\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "pId + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "8c5369562390bee531eb35c00744821b0c4821e3", "projectName": "xetorthio.jedis", "bugType": "Change Identifier Used", "problem": "       final int offset, final int count) {\n     checkIsInMultiOrPipeline();\n     client.zrangeByScoreWithScores(key, min, max, offset, count);\n    return getBinaryTupledSet();\n   }\n   @Override", "fixed": "       final int offset, final int count) {\n     checkIsInMultiOrPipeline();\n     client.zrangeByScoreWithScores(key, min, max, offset, count);\n    return getTupledSet();\n   }\n   @Override", "sourceBeforeFix": "getBinaryTupledSet()", "sourceAfterFix": "getTupledSet()"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedToMe(Paging paging) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_to_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedToMe(Paging paging) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_to_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))"}
{"fixCommitSHA1": "04fb5f71ec89baa0c70a457fd0aa6fd6f071b76e", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": " @XmlEnum(String.class)\n public enum WaitForTaskToComplete {\n    Newer, IfReplyExpected, Always\n }", "fixed": " @XmlEnum(String.class)\n public enum WaitForTaskToComplete {\n    Never, IfReplyExpected, Always\n }", "sourceBeforeFix": "Newer", "sourceAfterFix": "Never"}
{"fixCommitSHA1": "3757a700a89638e5747d966bdaa8266b62c974c8", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "  */\n @GwtCompatible(emulated = true)\n public class BaseEncodingTest extends TestCase {\n  public void assertEquals(byte[] expected, byte[] actual) {\n     assertEquals(expected.length, actual.length);\n     for (int i = 0; i < expected.length; i++) {\n       assertEquals(expected[i], actual[i]);", "fixed": "  */\n @GwtCompatible(emulated = true)\n public class BaseEncodingTest extends TestCase {\n  public static void assertEquals(byte[] expected, byte[] actual) {\n     assertEquals(expected.length, actual.length);\n     for (int i = 0; i < expected.length; i++) {\n       assertEquals(expected[i], actual[i]);", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "11fc33161f47544de5d2c50444340438f09a5b82", "projectName": "libgdx.libgdx", "bugType": "Change Operand ", "problem": " \t\t}\r\n \t\tpublic boolean hasChild (String name) {\r\n\t\t\tif (attributes == null) return false;\r\n \t\t\treturn getChildByName(name) != null;\r\n \t\t}\r", "fixed": " \t\t}\r\n \t\tpublic boolean hasChild (String name) {\r\n\t\t\tif (children == null) return false;\r\n \t\t\treturn getChildByName(name) != null;\r\n \t\t}\r", "sourceBeforeFix": "attributes == null", "sourceAfterFix": "children == null"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsText(String path, long millis) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), millis, null);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsText(String path, long millis) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), millis, null);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "                 cacheRecordStore.updateRecordWithExpiry(keyData, value, record, expiryPolicy, now, false);\n                 if (isStatisticsEnabled) {\n                     statistics.increaseCachePuts(1);\n                    statistics.addGetTimeNano(System.nanoTime() - start);\n                 }\n                 break;\n             case REMOVE:", "fixed": "                 cacheRecordStore.updateRecordWithExpiry(keyData, value, record, expiryPolicy, now, false);\n                 if (isStatisticsEnabled) {\n                     statistics.increaseCachePuts(1);\n                    statistics.addGetTimeNanos(System.nanoTime() - start);\n                 }\n                 break;\n             case REMOVE:", "sourceBeforeFix": "statistics.addGetTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addGetTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface JiraEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedJiraEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface JiraEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedJiraEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "           \"functions are set.\");\n   \n  private final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "           \"functions are set.\");\n   \n  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "64bc69ef4c547771f44f6b6b103cda7be2f0922b", "projectName": "dropwizard.metrics", "bugType": "Change Identifier Used", "problem": " \t}\n \tpublic SortedMap<String, Timer> getTimers(MetricFilter filter) {\n\t\treturn adaptMetrics(Timer.class, reg.getCounters(transformFilter(filter)));\n \t}\n \tprivate io.dropwizard.metrics.MetricFilter transformFilter(final MetricFilter filter) {", "fixed": " \t}\n \tpublic SortedMap<String, Timer> getTimers(MetricFilter filter) {\n\t\treturn adaptMetrics(Timer.class, reg.getTimers(transformFilter(filter)));\n \t}\n \tprivate io.dropwizard.metrics.MetricFilter transformFilter(final MetricFilter filter) {", "sourceBeforeFix": "reg.getCounters(transformFilter(filter))", "sourceAfterFix": "reg.getTimers(transformFilter(filter))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "2", "sourceAfterFix": "0"}
{"fixCommitSHA1": "d2b19965df52e66385a2d7146887a44cea50330a", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "    * Removes try/catch/finally statements for easier debugging.\n    */\n   void removeTryCatchFinally() {\n    logger.info(\"Remove try/catch/finally\");\n     startPass(\"removeTryCatchFinally\");\n     RemoveTryCatch r = new RemoveTryCatch(this);\n     process(r);", "fixed": "    * Removes try/catch/finally statements for easier debugging.\n    */\n   void removeTryCatchFinally() {\n    logger.fine(\"Remove try/catch/finally\");\n     startPass(\"removeTryCatchFinally\");\n     RemoveTryCatch r = new RemoveTryCatch(this);\n     process(r);", "sourceBeforeFix": "logger.info(\"Normalizing\")", "sourceAfterFix": "logger.fine(\"Normalizing\")"}
{"fixCommitSHA1": "fe6116a7119b1ee8ca55dca247b689ca173aeb53", "projectName": "apache.storm", "bugType": "Change Unary Operator\t", "problem": "      * @return nullToZero\n      */\n     private static Double nullToZero(Double value) {\n        return Objects.isNull(value) ? value : 0;\n     }\n     /**", "fixed": "      * @return nullToZero\n      */\n     private static Double nullToZero(Double value) {\n        return !Objects.isNull(value) ? value : 0;\n     }\n     /**", "sourceBeforeFix": "Objects.isNull(value)", "sourceAfterFix": "!Objects.isNull(value)"}
{"fixCommitSHA1": "2921e7bf0d74a65fdcc71d3ce3053037d14e4d44", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "             if (timeout == null) {\n                 println(lock.tryLock());\n             } else {\n                long time = Long.valueOf(timeout);\n                 try {\n                     println(lock.tryLock(time, TimeUnit.SECONDS));\n                 } catch (InterruptedException e) {", "fixed": "             if (timeout == null) {\n                 println(lock.tryLock());\n             } else {\n                long time = Long.parseLong(timeout);\n                 try {\n                     println(lock.tryLock(time, TimeUnit.SECONDS));\n                 } catch (InterruptedException e) {", "sourceBeforeFix": "Long.valueOf(args[1])", "sourceAfterFix": "Long.parseLong(args[1])"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "d76ba8118cca9f2f1c4f0e89e2dd15a9db02f7e8", "projectName": "libgdx.libgdx", "bugType": "Change Binary Operator", "problem": " \t\t\tcase MotionEvent.ACTION_CANCEL:\r\n \t\t\t\trealPointerIndex = input.lookUpPointerIndex(pointerId);\r\n \t\t\t\tif (realPointerIndex == -1) break;\r\n\t\t\t\tif (realPointerIndex > AndroidInput.NUM_TOUCHES) break;\r\n \t\t\t\tinput.realId[realPointerIndex] = -1;\r\n \t\t\t\tx = (int)event.getX(pointerIndex);\r\n \t\t\t\ty = (int)event.getY(pointerIndex);\r", "fixed": " \t\t\tcase MotionEvent.ACTION_CANCEL:\r\n \t\t\t\trealPointerIndex = input.lookUpPointerIndex(pointerId);\r\n \t\t\t\tif (realPointerIndex == -1) break;\r\n\t\t\t\tif (realPointerIndex >= AndroidInput.NUM_TOUCHES) break;\r\n \t\t\t\tinput.realId[realPointerIndex] = -1;\r\n \t\t\t\tx = (int)event.getX(pointerIndex);\r\n \t\t\t\ty = (int)event.getY(pointerIndex);\r", "sourceBeforeFix": "realPointerIndex > AndroidInput.NUM_TOUCHES", "sourceAfterFix": "realPointerIndex >= AndroidInput.NUM_TOUCHES"}
{"fixCommitSHA1": "c79a37da032af5e7c7dcd506630a4985653d7e4f", "projectName": "openmrs.openmrs-core", "bugType": "Same Function Swap Args", "problem": " \t\tDate completionDate = (Date) cde.getValue();\r\n \t\tPatient patient = Context.getPatientService().getPatient(Integer.valueOf(patientIdStr));\r\n \t\tProgram program = pws.getProgram(Integer.valueOf(programIdStr));\r\n\t\tif (!pws.getPatientPrograms(patient, program, null, enrollmentDate, completionDate, null, false).isEmpty())\r\n \t\t\trequest.getSession().setAttribute(WebConstants.OPENMRS_ERROR_ATTR, \"Program.error.already\");\r\n \t\telse {\r\n \t\t\tPatientProgram pp = new PatientProgram();\r", "fixed": " \t\tDate completionDate = (Date) cde.getValue();\r\n \t\tPatient patient = Context.getPatientService().getPatient(Integer.valueOf(patientIdStr));\r\n \t\tProgram program = pws.getProgram(Integer.valueOf(programIdStr));\r\n\t\tif (!pws.getPatientPrograms(patient, program, null, completionDate, enrollmentDate, null, false).isEmpty())\r\n \t\t\trequest.getSession().setAttribute(WebConstants.OPENMRS_ERROR_ATTR, \"Program.error.already\");\r\n \t\telse {\r\n \t\t\tPatientProgram pp = new PatientProgram();\r", "sourceBeforeFix": "pws.getPatientPrograms(patient,program,null,enrollmentDate,completionDate,null,false)", "sourceAfterFix": "pws.getPatientPrograms(patient,program,null,completionDate,enrollmentDate,null,false)"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid username supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"User not found\", response = Void.class) })\n    void deleteUser(@PathParam(\"username\") @ApiParam(\"The name that needs to be deleted\") String username);\n     @GET\n     @Path(\"/{username}\")", "fixed": "     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid username supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"User not found\", response = Void.class) })\n    void deleteUser(@PathParam(\"username\") @ApiParam(\"The name that needs to be deleted\") String username) throws Exception;\n     @GET\n     @Path(\"/{username}\")", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "958fa58492daee485f640bf3261449d9bab9ee6e", "projectName": "facebook.presto", "bugType": "Change Identifier Used", "problem": "     }\n     @SuppressWarnings(\"ResultOfMethodCallIgnored\")\n    @Test(expectedExceptions = RuntimeException.class, expectedExceptionsMessageRegExp = \".*Failing getObject call with \" + SC_NOT_FOUND + \".*\")\n     public void testReadNotFound()\n             throws Exception\n     {", "fixed": "     }\n     @SuppressWarnings(\"ResultOfMethodCallIgnored\")\n    @Test(expectedExceptions = IOException.class, expectedExceptionsMessageRegExp = \".*Failing getObject call with \" + SC_NOT_FOUND + \".*\")\n     public void testReadNotFound()\n             throws Exception\n     {", "sourceBeforeFix": "RuntimeException.class", "sourceAfterFix": "IOException.class"}
{"fixCommitSHA1": "425403eeed99d409a1c49ad5243a3a0bd86ed66c", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "         \"CALL JSCompiler_StaticMethods_bar = null\",\n         \"CALL JSCompiler_StaticMethods_baz = null\");\n    static final List<String> EXPECTED_TYPE_CHECKING_ON = ImmutableList.of(\n         \"FUNCTION a = function (new:a): undefined\",\n         \"NAME JSCompiler_StaticMethods_foo$self = a\",\n         \"FUNCTION JSCompiler_StaticMethods_foo = function (a): number\",", "fixed": "         \"CALL JSCompiler_StaticMethods_bar = null\",\n         \"CALL JSCompiler_StaticMethods_baz = null\");\n    static final ImmutableList<String> EXPECTED_TYPE_CHECKING_ON =\n        ImmutableList.of(\n         \"FUNCTION a = function (new:a): undefined\",\n         \"NAME JSCompiler_StaticMethods_foo$self = a\",\n         \"FUNCTION JSCompiler_StaticMethods_foo = function (a): number\",", "sourceBeforeFix": "List<String>", "sourceAfterFix": "ImmutableList<String>"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15857, value = \"Only 1 piece of content is currently supported (AS7-431)\")\n     String as7431();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10857, value = \"Only 1 piece of content is currently supported (AS7-431)\")\n     String as7431();\n     /**", "sourceBeforeFix": "id=15850", "sourceAfterFix": "id=10850"}
{"fixCommitSHA1": "f5868a8e038c7e10b1a647b2933546e2a981a638", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "     public void testGrouped() throws Exception {\n         MockEndpoint result = getMockEndpoint(\"mock:result\");\n        result.expectedMessageCount(1);\n         template.sendBody(\"direct:start\", \"100\");", "fixed": "     public void testGrouped() throws Exception {\n         MockEndpoint result = getMockEndpoint(\"mock:result\");\n        result.expectedMinimumMessageCount(1);\n         template.sendBody(\"direct:start\", \"100\");", "sourceBeforeFix": "result.expectedMessageCount(1)", "sourceAfterFix": "result.expectedMinimumMessageCount(1)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedByMe(Paging paging) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedByMe(Paging paging) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweets/\" + statusId+ \".json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweets/\" + statusId+ \".json\",true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStream<OUT> writeAsText(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsText<OUT> format, long millis, OUT endTuple) {\n\t\tDataStream<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByMillis<OUT>(\n \t\t\t\tpath, format, millis, endTuple), null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "fixed": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStreamSink<OUT> writeAsText(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsText<OUT> format, long millis, OUT endTuple) {\n\t\tDataStreamSink<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByMillis<OUT>(\n \t\t\t\tpath, format, millis, endTuple), null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "ef11886bf2190370a0f3fd287616763826239c48", "projectName": "openmrs.openmrs-core", "bugType": "Wrong Function Name", "problem": " \t\trel.setPersonA(personA);\r\n \t\trel.setPersonB(personB);\r\n \t\trel.setRelationshipType(relType);\r\n\t\tps.createRelationship(rel);\r\n \t}\r\n \tpublic void voidRelationship(Integer relationshipId, String voidReason) {\r", "fixed": " \t\trel.setPersonA(personA);\r\n \t\trel.setPersonB(personB);\r\n \t\trel.setRelationshipType(relType);\r\n\t\tps.saveRelationship(rel);\r\n \t}\r\n \tpublic void voidRelationship(Integer relationshipId, String voidReason) {\r", "sourceBeforeFix": "Context.getPersonService().getRelationships(Context.getPersonService().getPerson(personId))", "sourceAfterFix": "Context.getPersonService().getRelationshipsByPerson(Context.getPersonService().getPerson(personId))"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform1iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform1(location, v);\r\n \t}\r\n \t@Override\r\n \tpublic void glUniform1iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform1(location, toIntBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform2f (int location, float x, float y) {\r", "fixed": " \t}\r\n \tpublic void glUniform1iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform1iv(location, v);\r\n \t}\r\n \t@Override\r\n \tpublic void glUniform1iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform1iv(location, toIntBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform2f (int location, float x, float y) {\r", "sourceBeforeFix": "GL20.glGetUniform(program,location,params)", "sourceAfterFix": "GL20.glGetUniformfv(program,location,params)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15853, value = \"Unexpected initial path key %s\")\n     IllegalStateException unexpectedInitialPathKey(String key);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10853, value = \"Unexpected initial path key %s\")\n     IllegalStateException unexpectedInitialPathKey(String key);\n     /**", "sourceBeforeFix": "id=15831", "sourceAfterFix": "id=10831"}
{"fixCommitSHA1": "ea98386dfd18da047c877a2320cfdcf15df2ea06", "projectName": "facebook.presto", "bugType": "Change Modifier", "problem": "                 .retInt();\n     }\n    private void generatePositionEqualsRowMethod(\n             ClassDefinition classDefinition,\n             CallSiteBinder callSiteBinder,\n             List<Type> joinChannelTypes,", "fixed": "                 .retInt();\n     }\n    private static void generatePositionEqualsRowMethod(\n             ClassDefinition classDefinition,\n             CallSiteBinder callSiteBinder,\n             List<Type> joinChannelTypes,", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface SpringBatchEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedSpringBatchEndpointBuilder advanced() {", "fixed": "     \n    public interface SpringBatchEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedSpringBatchEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "fixed": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttribfv(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttribiv(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "sourceBeforeFix": "GL15.glGetBufferParameter(target,pname,params)", "sourceAfterFix": "GL15.glGetBufferParameteriv(target,pname,params)"}
{"fixCommitSHA1": "a833d17370c44664f679109f475504a9d1c1177a", "projectName": "neo4j.neo4j", "bugType": "Change Modifier", "problem": "         return getClass().getSimpleName() + \"[\" + labelScanStore + \", prio:\" + priority + \"]\";\n     }\n    interface FullStoreChangeStream extends Iterable<NodeLabelUpdate>\n     {\n         PrimitiveLongIterator labelIds();", "fixed": "         return getClass().getSimpleName() + \"[\" + labelScanStore + \", prio:\" + priority + \"]\";\n     }\n    public interface FullStoreChangeStream extends Iterable<NodeLabelUpdate>\n     {\n         PrimitiveLongIterator labelIds();", "sourceBeforeFix": "0", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15867, value = \"Cannot use %s with the same value for parameters %s and %s. \" +\n             \"Use %s to redeploy the same content or %s to replace content with a new version with the same name.\")\n     String cannotUseSameValueForParameters(String opName, String param1, String param2, String redeployOpName, String replaceOpName);", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10867, value = \"Cannot use %s with the same value for parameters %s and %s. \" +\n             \"Use %s to redeploy the same content or %s to replace content with a new version with the same name.\")\n     String cannotUseSameValueForParameters(String opName, String param1, String param2, String redeployOpName, String replaceOpName);", "sourceBeforeFix": "id=15849", "sourceAfterFix": "id=10849"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  private final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "fixed": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2fv(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2fv(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "sourceBeforeFix": "GL20.glUniform4(location,toFloatBuffer(v,offset,count << 2))", "sourceAfterFix": "GL20.glUniform4fv(location,toFloatBuffer(v,offset,count << 2))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "bc53fc00817adf77d0e25d07ae0aaea0f16dddd7", "projectName": "Alluxio.alluxio", "bugType": "Same Function More Args", "problem": "    * @return the number of blocks\n    */\n   public int getNumberOfBlocks() {\n    Preconditions.checkNotNull(mBlockIdsOnTiers);\n     int numberOfBlocks = 0;\n     for (List<Long> blockIds : mBlockIdsOnTiers.values()) {", "fixed": "    * @return the number of blocks\n    */\n   public int getNumberOfBlocks() {\n    Preconditions.checkNotNull(mBlockIdsOnTiers,\"mBlockIdsOnTiers\");\n     int numberOfBlocks = 0;\n     for (List<Long> blockIds : mBlockIdsOnTiers.values()) {", "sourceBeforeFix": "Preconditions.checkNotNull(mBlockIdsOnTiers)", "sourceAfterFix": "Preconditions.checkNotNull(mBlockIdsOnTiers,\"mBlockIdsOnTiers\")"}
{"fixCommitSHA1": "16767e5187b0d75a180aa8a3678d7afe6bc6f0da", "projectName": "facebook.presto", "bugType": "Change Caller in Function Call", "problem": "         this.queryManager = checkNotNull(queryManager, \"queryManager is null\");\n         this.httpClient = checkNotNull(httpClient, \"httpClient is null\");\n        queryPurger.scheduleAtFixedRate(new PurgeQueriesRunnable(queries.keySet(), queryManager), 200, 200, TimeUnit.MILLISECONDS);\n     }\n     @PreDestroy", "fixed": "         this.queryManager = checkNotNull(queryManager, \"queryManager is null\");\n         this.httpClient = checkNotNull(httpClient, \"httpClient is null\");\n        queryPurger.scheduleWithFixedDelay(new PurgeQueriesRunnable(queries.keySet(), queryManager), 200, 200, TimeUnit.MILLISECONDS);\n     }\n     @PreDestroy", "sourceBeforeFix": "queryIdsSnapshot.remove(deadQuery)", "sourceAfterFix": "queryIds.remove(deadQuery)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface SoroushBotEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedSoroushBotEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface SoroushBotEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedSoroushBotEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface HazelcastReplicatedmapEndpointBuilder\n             extends\n                 HazelcastReplicatedmapEndpointConsumerBuilder, HazelcastReplicatedmapEndpointProducerBuilder {\n         default AdvancedHazelcastReplicatedmapEndpointBuilder advanced() {", "fixed": "     \n    public interface HazelcastReplicatedmapEndpointBuilder\n             extends\n                 HazelcastReplicatedmapEndpointConsumerBuilder, HazelcastReplicatedmapEndpointProducerBuilder {\n         default AdvancedHazelcastReplicatedmapEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsCsv(String path, int batchSize, OUT endTuple) {\n \t\tif (this instanceof SingleOutputStreamOperator) {\n \t\t\t((SingleOutputStreamOperator<?, ?>) this).setMutability(false);\n \t\t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsCsv(String path, int batchSize, OUT endTuple) {\n \t\tif (this instanceof SingleOutputStreamOperator) {\n \t\t\t((SingleOutputStreamOperator<?, ?>) this).setMutability(false);\n \t\t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "fixed": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "sourceBeforeFix": "GL20.glUniform3(location,toFloatBuffer(v,offset,count * 3))", "sourceAfterFix": "GL20.glUniform3fv(location,toFloatBuffer(v,offset,count * 3))"}
{"fixCommitSHA1": "37ee7f19dad5b5e3f9d298448a3f778069efebdc", "projectName": "libgdx.libgdx", "bugType": "Change Unary Operator\t", "problem": " \t\tfinal float t2 = u * u;\n \t\tfinal float t3 = t2 * u;\n \t\tout.set(points[i]).scl(1.5f * t2 - 2 * u);\n\t\tif (continuous || i > 0) out.add(tmp.set(points[(n + i - 1) % n]).scl(0.5f * (1 - u) * (1 - u)));\n \t\tif (continuous || i < (n - 1)) out.add(tmp.set(points[(i + 1) % n]).scl(-1.5f * t2 + u + 0.5f));\n \t\tif (continuous || i < (n - 2)) out.add(tmp.set(points[(i + 2) % n]).scl(0.5f * t2));\n \t\treturn out;", "fixed": " \t\tfinal float t2 = u * u;\n \t\tfinal float t3 = t2 * u;\n \t\tout.set(points[i]).scl(1.5f * t2 - 2 * u);\n\t\tif (continuous || i > 0) out.add(tmp.set(points[(n + i - 1) % n]).scl(-0.5f * dt * dt));\n \t\tif (continuous || i < (n - 1)) out.add(tmp.set(points[(i + 1) % n]).scl(-1.5f * t2 + u + 0.5f));\n \t\tif (continuous || i < (n - 2)) out.add(tmp.set(points[(i + 2) % n]).scl(0.5f * t2));\n \t\treturn out;", "sourceBeforeFix": "0.5f", "sourceAfterFix": "-0.5f"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "845d0b065c3d9ec57d597a2bd1ae42b4366912c9", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "                 new HttpParameter[]{\n                         new HttpParameter(\"screen_name\", screenName),\n                         new HttpParameter(\"device\", enableDeviceNotification),\n                        new HttpParameter(\"retweets\", enableDeviceNotification)\n                 }));\n     }", "fixed": "                 new HttpParameter[]{\n                         new HttpParameter(\"screen_name\", screenName),\n                         new HttpParameter(\"device\", enableDeviceNotification),\n                        new HttpParameter(\"retweets\", retweets)\n                 }));\n     }", "sourceBeforeFix": "new HttpParameter(\"retweets\",enableDeviceNotification)", "sourceAfterFix": "new HttpParameter(\"retweets\",retweets)"}
{"fixCommitSHA1": "43f93d014c6cf42847ba88fe67dc2d7237bbfb4b", "projectName": "square.okhttp", "bugType": "Change Numeric Literal", "problem": "     assertThat(cookie.getCommentURL()).isNull();\n     assertThat(cookie.getDiscard()).isFalse();\n    assertThat((double) cookie.getMaxAge()).isCloseTo(60.0, offset(1.0));\n     assertThat(cookie.getPath()).isEqualTo(\"/path\");\n     assertThat(cookie.getSecure()).isTrue();\n   }", "fixed": "     assertThat(cookie.getCommentURL()).isNull();\n     assertThat(cookie.getDiscard()).isFalse();\n    assertThat((double) cookie.getMaxAge()).isCloseTo(60.0, offset(5.0));\n     assertThat(cookie.getPath()).isEqualTo(\"/path\");\n     assertThat(cookie.getSecure()).isTrue();\n   }", "sourceBeforeFix": "offset(1.0)", "sourceAfterFix": "offset(5.0)"}
{"fixCommitSHA1": "8f24815a4a794c1d01bc65696ddc4628a82be322", "projectName": "brettwooldridge.HikariCP", "bugType": "Change Numeric Literal", "problem": "          TestElf.setSlf4jTargetStream(LeakTask.class, ps);\n          Connection connection = ds.getConnection();\n         PoolUtilities.quietlySleep(TimeUnit.SECONDS.toMillis(4));\n          ps.close();\n          connection.close();\n          String s = new String(baos.toByteArray());", "fixed": "          TestElf.setSlf4jTargetStream(LeakTask.class, ps);\n          Connection connection = ds.getConnection();\n         PoolUtilities.quietlySleep(TimeUnit.SECONDS.toMillis(5));\n          ps.close();\n          connection.close();\n          String s = new String(baos.toByteArray());", "sourceBeforeFix": "TimeUnit.SECONDS.toMillis(4)", "sourceAfterFix": "TimeUnit.SECONDS.toMillis(5)"}
{"fixCommitSHA1": "46fa8090954480eecdeb6e7367f0e30655853f42", "projectName": "checkstyle.checkstyle", "bugType": "Same Function More Args", "problem": "      * @return first sentence.\n      */\n     private static String getFirstSentence(DetailNode ast) {\n        final StringBuilder result = new StringBuilder();\n         final String periodSuffix = PERIOD + ' ';\n         for (DetailNode child : ast.getChildren()) {\n             final String text;", "fixed": "      * @return first sentence.\n      */\n     private static String getFirstSentence(DetailNode ast) {\n        final StringBuilder result = new StringBuilder(256);\n         final String periodSuffix = PERIOD + ' ';\n         for (DetailNode child : ast.getChildren()) {\n             final String text;", "sourceBeforeFix": "new StringBuilder()", "sourceAfterFix": "new StringBuilder(256)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(639);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {console.log($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "fixed": " \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(638);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {console.log($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "sourceBeforeFix": "new StringBuilder(246)", "sourceAfterFix": "new StringBuilder(245)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15851, value = \"Operation targets host %s but that host is not registered\")\n     String invalidOperationTargetHost(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10851, value = \"Operation targets host %s but that host is not registered\")\n     String invalidOperationTargetHost(String name);\n     /**", "sourceBeforeFix": "id=15844", "sourceAfterFix": "id=10844"}
{"fixCommitSHA1": "ea98386dfd18da047c877a2320cfdcf15df2ea06", "projectName": "facebook.presto", "bugType": "Change Modifier", "problem": "                 .retLong();\n     }\n    private void generateAppendToMethod(ClassDefinition classDefinition, CallSiteBinder callSiteBinder, List<Type> types, List<FieldDefinition> channelFields)\n     {\n         Parameter blockIndex = arg(\"blockIndex\", int.class);\n         Parameter blockPosition = arg(\"blockPosition\", int.class);", "fixed": "                 .retLong();\n     }\n    private static void generateAppendToMethod(ClassDefinition classDefinition, CallSiteBinder callSiteBinder, List<Type> types, List<FieldDefinition> channelFields)\n     {\n         Parameter blockIndex = arg(\"blockIndex\", int.class);\n         Parameter blockPosition = arg(\"blockPosition\", int.class);", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "556d92bd27f2cea8d7ce42080d6619122c38ac19", "projectName": "dropwizard.dropwizard", "bugType": "Wrong Function Name", "problem": "      */\n     public T build(ConfigurationSourceProvider provider, String path) throws IOException, ConfigurationException {\n         try (InputStream input = provider.open(checkNotNull(path))) {\n            final JsonNode node = mapper.readTree(yamlFactory.createJsonParser(input));\n             return build(node, path);\n         }\n     }", "fixed": "      */\n     public T build(ConfigurationSourceProvider provider, String path) throws IOException, ConfigurationException {\n         try (InputStream input = provider.open(checkNotNull(path))) {\n            final JsonNode node = mapper.readTree(yamlFactory.createParser(input));\n             return build(node, path);\n         }\n     }", "sourceBeforeFix": "yamlFactory.createJsonParser(input)", "sourceAfterFix": "yamlFactory.createParser(input)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "9771ba62390a56363b20e52f12a8b9b34c51da62", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "     public void testSendLotsOfMessagesSimultaneouslyButOnly3GetThrough() throws Exception {\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedMessageCount(3);\n         mock.setResultWaitTime(4000);\n         final List<Exchange> sentExchanges = Collections.synchronizedList(new ArrayList<Exchange>());", "fixed": "     public void testSendLotsOfMessagesSimultaneouslyButOnly3GetThrough() throws Exception {\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedMinimumMessageCount(3);\n         mock.setResultWaitTime(4000);\n         final List<Exchange> sentExchanges = Collections.synchronizedList(new ArrayList<Exchange>());", "sourceBeforeFix": "mock.expectedMessageCount(10)", "sourceAfterFix": "mock.expectedMinimumMessageCount(10)"}
{"fixCommitSHA1": "38eb6222bddaf49c3c9ae73ddef0cfe4ff5efa48", "projectName": "alibaba.dubbo", "bugType": "Change Numeric Literal", "problem": "     @Test\n     public void test_Decode_Return_Request_Event_Object() throws IOException {\n        byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, (byte) 0xff, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n         Person person = new Person();\n         byte[] request = getRequestBytes(person, header);", "fixed": "     @Test\n     public void test_Decode_Return_Request_Event_Object() throws IOException {\n        byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, (byte) 0xe2, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n         Person person = new Person();\n         byte[] request = getRequestBytes(person, header);", "sourceBeforeFix": "(byte)0xff", "sourceAfterFix": "(byte)0xe2"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      * @param cause the cause of the error.\n      */\n     @LogMessage(level = Level.WARN)\n    @Message(id = 15806, value = \"Caught exception closing input stream\")\n     void caughtExceptionClosingInputStream(@Cause Throwable cause);\n     /**", "fixed": "      * @param cause the cause of the error.\n      */\n     @LogMessage(level = Level.WARN)\n    @Message(id = 10806, value = \"Caught exception closing input stream\")\n     void caughtExceptionClosingInputStream(@Cause Throwable cause);\n     /**", "sourceBeforeFix": "id=15804", "sourceAfterFix": "id=10804"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "2cf6eb9e746ab1c610460badf4f99f1ee19bf0b3", "projectName": "clojure.clojure", "bugType": "Same Function Swap Args", "problem": " \t\t\tthis.array = array;\n \t\t\treturn this;\n \t\t}\n\t\treturn new HashCollisionNode(edit, count, hash, array);\n \t}\n \tprivate HashCollisionNode editAndSet(AtomicReference<Thread> edit, int i, Object a) {", "fixed": " \t\t\tthis.array = array;\n \t\t\treturn this;\n \t\t}\n\t\treturn new HashCollisionNode(edit, hash, count, array);\n \t}\n \tprivate HashCollisionNode editAndSet(AtomicReference<Thread> edit, int i, Object a) {", "sourceBeforeFix": "new HashCollisionNode(edit,count,hash,array)", "sourceAfterFix": "new HashCollisionNode(edit,hash,count,array)"}
{"fixCommitSHA1": "ea98386dfd18da047c877a2320cfdcf15df2ea06", "projectName": "facebook.presto", "bugType": "Change Modifier", "problem": "                 .retLong();\n     }\n    private void generateAppendToMethod(ClassDefinition classDefinition, CallSiteBinder callSiteBinder, List<Type> types, List<FieldDefinition> channelFields)\n     {\n         Parameter blockIndex = arg(\"blockIndex\", int.class);\n         Parameter blockPosition = arg(\"blockPosition\", int.class);", "fixed": "                 .retLong();\n     }\n    private static void generateAppendToMethod(ClassDefinition classDefinition, CallSiteBinder callSiteBinder, List<Type> types, List<FieldDefinition> channelFields)\n     {\n         Parameter blockIndex = arg(\"blockIndex\", int.class);\n         Parameter blockPosition = arg(\"blockPosition\", int.class);", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "eba20b3dcc401fb4c873afc5948cc92fbcb00097", "projectName": "clojure.clojure", "bugType": "Wrong Function Name", "problem": " \t\tint size = s.count();\n \t\tlong[] ret = new long[size];\n \t\tfor(int i = 0; i < size && s != null; i++, s = s.rest())\n\t\t\tret[i] = ((Number) s.first()).intValue();\n \t\treturn ret;\n \t\t}\n }", "fixed": " \t\tint size = s.count();\n \t\tlong[] ret = new long[size];\n \t\tfor(int i = 0; i < size && s != null; i++, s = s.rest())\n\t\t\tret[i] = ((Number) s.first()).longValue();\n \t\treturn ret;\n \t\t}\n }", "sourceBeforeFix": "((Number)s.first()).intValue()", "sourceAfterFix": "((Number)s.first()).doubleValue()"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedStubEndpointBuilder\n             extends\n                 AdvancedStubEndpointConsumerBuilder, AdvancedStubEndpointProducerBuilder {\n         default StubEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedStubEndpointBuilder\n             extends\n                 AdvancedStubEndpointConsumerBuilder, AdvancedStubEndpointProducerBuilder {\n         default StubEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should find object given valid uuid\n \t * @should return null if no object found with given uuid\n \t */\n\tpublic GlobalProperty getGlobalPropertyByUuid(String uuid) throws APIException;\n \t/**\n \t * Get a listing or important variables used in openmrs", "fixed": " \t * @should find object given valid uuid\n \t * @should return null if no object found with given uuid\n \t */\n\tpublic GlobalProperty getGlobalPropertyByUuid(String uuid);\n \t/**\n \t * Get a listing or important variables used in openmrs", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8d14f34eae4cd9efdd00e7db91785935779087b0", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "                 }\n             }\n         }\n        if (keys.isEmpty()) {\n             return result;\n         }\n         MapGetAllRequest request = new MapGetAllRequest(name, keySet);", "fixed": "                 }\n             }\n         }\n        if (keySet.isEmpty()) {\n             return result;\n         }\n         MapGetAllRequest request = new MapGetAllRequest(name, keySet);", "sourceBeforeFix": "keys.isEmpty()", "sourceAfterFix": "keySet.isEmpty()"}
{"fixCommitSHA1": "1274b076e0f5efb4d4114ecf61d985b2000b2d46", "projectName": "apache.storm", "bugType": "Change Identifier Used", "problem": " import java.io.IOException;\n public class JsonRecordHiveMapper implements HiveMapper {\n    private static final Logger LOG = LoggerFactory.getLogger(DelimitedRecordHiveMapper.class);\n     private Fields columnFields;\n     private Fields partitionFields;\n     private String timeFormat;", "fixed": " import java.io.IOException;\n public class JsonRecordHiveMapper implements HiveMapper {\n    private static final Logger LOG = LoggerFactory.getLogger(JsonRecordHiveMapper.class);\n     private Fields columnFields;\n     private Fields partitionFields;\n     private String timeFormat;", "sourceBeforeFix": "DelimitedRecordHiveMapper.class", "sourceAfterFix": "JsonRecordHiveMapper.class"}
{"fixCommitSHA1": "9e6f96dbfc8bf1ae1ffbe0115f53f1de0fc86ffc", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "         final R record = createRecord(value, expirationTime);\n         updateHasExpiringEntry(record);\n         if (isEventsEnabled()) {\n            publishEvent(createCacheCreatedEvent(keyData, toEventData(value), expirationTime, origin, completionId));\n         }\n         return record;\n     }", "fixed": "         final R record = createRecord(value, expirationTime);\n         updateHasExpiringEntry(record);\n         if (isEventsEnabled()) {\n            publishEvent(createCacheCreatedEvent(toEventData(keyData), toEventData(value),\n                                                 expirationTime, origin, completionId));\n         }\n         return record;\n     }", "sourceBeforeFix": "toHeapData(key)", "sourceAfterFix": "toEventData(key)"}
{"fixCommitSHA1": "a63faf44e1b103a49d25a15c720fc5940ae9fc07", "projectName": "square.retrofit", "bugType": "Change Identifier Used", "problem": "     assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n     Type mBodyGeneric = new TypeToken<Maybe<List<String>>>() {}.getType();\n    assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n     Type fBodyGeneric = new TypeToken<Flowable<List<String>>>() {}.getType();\n    assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n     Type oResponseClass = new TypeToken<Observable<Response<String>>>() {}.getType();", "fixed": "     assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n     Type mBodyGeneric = new TypeToken<Maybe<List<String>>>() {}.getType();\n    assertThat(factory.get(mBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n     Type fBodyGeneric = new TypeToken<Flowable<List<String>>>() {}.getType();\n    assertThat(factory.get(fBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n     Type oResponseClass = new TypeToken<Observable<Response<String>>>() {}.getType();", "sourceBeforeFix": "factory.get(sResponseWildcard,NO_ANNOTATIONS,retrofit)", "sourceAfterFix": "factory.get(fResponseWildcard,NO_ANNOTATIONS,retrofit)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface ApnsEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedApnsEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface ApnsEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedApnsEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15850, value = \"No handler for operation %s at address %s\")\n     String noHandlerForOperation(String operationName, PathAddress address);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10850, value = \"No handler for operation %s at address %s\")\n     String noHandlerForOperation(String operationName, PathAddress address);\n     /**", "sourceBeforeFix": "id=15864", "sourceAfterFix": "id=10864"}
{"fixCommitSHA1": "356ec6bd0161edfd46b42ffe55961d52884eb7f0", "projectName": "wildfly.wildfly", "bugType": "Change Binary Operator", "problem": "         if (offset < 0) {\n             offset = 0;\n         }\n        if (offset >= 0) {\n             update = Util.getWriteAttributeOperation(address, SOCKET_BINDING_PORT_OFFSET, offset);\n         }\n         updates.add(update);", "fixed": "         if (offset < 0) {\n             offset = 0;\n         }\n        if (offset > 0) {\n             update = Util.getWriteAttributeOperation(address, SOCKET_BINDING_PORT_OFFSET, offset);\n         }\n         updates.add(update);", "sourceBeforeFix": "offset >= 0", "sourceAfterFix": "offset > 0"}
{"fixCommitSHA1": "3748afae244f81389553e149a023a0b3f81a90ab", "projectName": "Alluxio.alluxio", "bugType": "Same Function More Args", "problem": "     try {\n       mFileSystemMaster.createFile(new AlluxioURI(\"alluxio:/a/f\"), CreateFileOptions.defaults());\n      Assert.fail();\n     } catch (FileAlreadyExistsException e) {\n     }\n   }", "fixed": "     try {\n       mFileSystemMaster.createFile(new AlluxioURI(\"alluxio:/a/f\"), CreateFileOptions.defaults());\n      Assert.fail(\"createDirectory was expected to fail with FileAlreadyExistsException\");\n     } catch (FileAlreadyExistsException e) {\n     }\n   }", "sourceBeforeFix": "Assert.fail()", "sourceAfterFix": "Assert.fail(\"createDirectory was expected to fail with FileAlreadyExistsException\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   }\n   \n  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "d2b19965df52e66385a2d7146887a44cea50330a", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "    * Removes try/catch/finally statements for easier debugging.\n    */\n   void removeTryCatchFinally() {\n    logger.info(\"Remove try/catch/finally\");\n     startPass(\"removeTryCatchFinally\");\n     RemoveTryCatch r = new RemoveTryCatch(this);\n     process(r);", "fixed": "    * Removes try/catch/finally statements for easier debugging.\n    */\n   void removeTryCatchFinally() {\n    logger.fine(\"Remove try/catch/finally\");\n     startPass(\"removeTryCatchFinally\");\n     RemoveTryCatch r = new RemoveTryCatch(this);\n     process(r);", "sourceBeforeFix": "logger.info(\"Creating extern file for exports\")", "sourceAfterFix": "logger.fine(\"Creating extern file for exports\")"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<Status> getPublicTimeline() throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() +\n                 \"statuses/public_timeline.json\", false));\n     }", "fixed": "      */\n     public ResponseList<Status> getPublicTimeline() throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() +\n                 \"statuses/public_timeline.json\", false));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\",true))"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform3(location, v);\r\n \t}\r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform3(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r", "fixed": " \t}\r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform3iv(location, v);\r\n \t}\r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform3iv(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r", "sourceBeforeFix": "EXTFramebufferObject.glGetFramebufferAttachmentParameterEXT(target,attachment,pname,params)", "sourceAfterFix": "EXTFramebufferObject.glGetFramebufferAttachmentParameterivEXT(target,attachment,pname,params)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<Status> getHomeTimeline(Paging paging) throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/home_timeline.json\", null, paging.asPostParameterList(), true));\n     }\n     /**", "fixed": "      */\n     public ResponseList<Status> getHomeTimeline(Paging paging) throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/home_timeline.json\", null, paging.asPostParameterList(), true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/home_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/home_timeline.json\",true))"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 15866, value = \"%s is null\")\n     IllegalArgumentException nullVar(String name);\n     /**", "fixed": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 10866, value = \"%s is null\")\n     IllegalArgumentException nullVar(String name);\n     /**", "sourceBeforeFix": "id=15866", "sourceAfterFix": "id=10866"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedCMISEndpointBuilder\n             extends\n                 AdvancedCMISEndpointConsumerBuilder, AdvancedCMISEndpointProducerBuilder {\n         default CMISEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedCMISEndpointBuilder\n             extends\n                 AdvancedCMISEndpointConsumerBuilder, AdvancedCMISEndpointProducerBuilder {\n         default CMISEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15868, value = \"Deployment %s is already started\")\n     String deploymentAlreadyStarted(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10868, value = \"Deployment %s is already started\")\n     String deploymentAlreadyStarted(String name);\n     /**", "sourceBeforeFix": "id=15862", "sourceAfterFix": "id=10862"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface GooglePubsubEndpointBuilder\n             extends\n                 GooglePubsubEndpointConsumerBuilder, GooglePubsubEndpointProducerBuilder {\n         default AdvancedGooglePubsubEndpointBuilder advanced() {", "fixed": "     \n    public interface GooglePubsubEndpointBuilder\n             extends\n                 GooglePubsubEndpointConsumerBuilder, GooglePubsubEndpointProducerBuilder {\n         default AdvancedGooglePubsubEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   }\n   \n  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "0a2b272cb8cb45faafd95a3bbc9e9af813620e09", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         for (int partition = 0; partition < partitionCount; partition++) {\n             partitionContainers[partition] = new MultiMapPartitionContainer(this, partition);\n         }\n        final LockService lockService = nodeEngine.getService(LockService.SERVICE_NAME);\n         if (lockService != null) {\n             lockService.registerLockStoreConstructor(SERVICE_NAME,\n                     new ConstructorFunction<ObjectNamespace, LockStoreInfo>() {", "fixed": "         for (int partition = 0; partition < partitionCount; partition++) {\n             partitionContainers[partition] = new MultiMapPartitionContainer(this, partition);\n         }\n        final LockService lockService = nodeEngine.getSharedService(LockService.SERVICE_NAME);\n         if (lockService != null) {\n             lockService.registerLockStoreConstructor(SERVICE_NAME,\n                     new ConstructorFunction<ObjectNamespace, LockStoreInfo>() {", "sourceBeforeFix": "nodeEngine.getService(LockService.SERVICE_NAME)", "sourceAfterFix": "nodeEngine.getSharedService(LockService.SERVICE_NAME)"}
{"fixCommitSHA1": "d89553e7a20e11a9d39bb560acc9e0aea68770e8", "projectName": "hazelcast.hazelcast", "bugType": "Change Caller in Function Call", "problem": "     @AfterClass\n     public static void killAllHazelcastInstances() throws IOException {\n        HazelcastInstanceFactory.terminateAll();\n     }\n     @Test", "fixed": "     @AfterClass\n     public static void killAllHazelcastInstances() throws IOException {\n        factory.terminateAll();\n     }\n     @Test", "sourceBeforeFix": "HazelcastInstanceFactory.terminateAll()", "sourceAfterFix": "factory.terminateAll()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  private final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "c131546eaadd07baf950bd6a44d07ee42d109e4c", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t}\n \t@Override\n\tpublic CompletableFuture<Boolean> getTerminationFuture() {\n \t\treturn terminationFuture;\n \t}\n }", "fixed": " \t}\n \t@Override\n\tpublic CompletableFuture<Void> getTerminationFuture() {\n \t\treturn terminationFuture;\n \t}\n }", "sourceBeforeFix": "CompletableFuture<Boolean>", "sourceAfterFix": "CompletableFuture<Void>"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedAtomixValueEndpointBuilder\n             extends\n                 AdvancedAtomixValueEndpointConsumerBuilder, AdvancedAtomixValueEndpointProducerBuilder {\n         default AtomixValueEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedAtomixValueEndpointBuilder\n             extends\n                 AdvancedAtomixValueEndpointConsumerBuilder, AdvancedAtomixValueEndpointProducerBuilder {\n         default AtomixValueEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface ServerEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedServerEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface ServerEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedServerEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites(int page) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"favorites.json\", \"page\", String.valueOf(page), true));\n     }\n     /**", "fixed": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites(int page) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"favorites.json\", \"page\", String.valueOf(page), true));\n     }\n     /**", "sourceBeforeFix": "SavedSearch.constructSavedSearches(get(getBaseURL() + \"saved_searches.json\",true))", "sourceAfterFix": "SavedSearch.createSavedSearchList(get(getBaseURL() + \"saved_searches.json\",true))"}
{"fixCommitSHA1": "55ed50c4975cf694828d46ee9ca32ce72a9ef913", "projectName": "clojure.clojure", "bugType": "Wrong Function Name", "problem": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 19:\r\n\t\t\treturn invoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "fixed": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 19:\r\n\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "sourceBeforeFix": "invoke(args)", "sourceAfterFix": "doInvoke(args)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   }\n   \n  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getFavorites(String id, int page) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"favorites/\" + id + \".json\", \"page\", String.valueOf(page), true));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getFavorites(String id, int page) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"favorites/\" + id + \".json\", \"page\", String.valueOf(page), true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweets_of_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweets_of_me.json\",null,true))"}
{"fixCommitSHA1": "097a6b00c39c7dee3b2d6d321a7fe5b3eb626fb0", "projectName": "Alluxio.alluxio", "bugType": "Wrong Function Name", "problem": "         && !NettyUtils.isDomainSocketSupported(address)\n         && blockSource == BlockInStreamSource.LOCAL) {\n       try {\n        LOG.info(\"Creating short circuit input stream for block {} @ {}\", blockId, address);\n         return createLocalBlockInStream(context, address, blockId, blockSize, options);\n       } catch (NotFoundException e) {", "fixed": "         && !NettyUtils.isDomainSocketSupported(address)\n         && blockSource == BlockInStreamSource.LOCAL) {\n       try {\n        LOG.debug(\"Creating short circuit input stream for block {} @ {}\", blockId, address);\n         return createLocalBlockInStream(context, address, blockId, blockSize, options);\n       } catch (NotFoundException e) {", "sourceBeforeFix": "LOG.info(\"Creating short circuit input stream for block {} @ {}\",blockId,address)", "sourceAfterFix": "LOG.debug(\"Creating short circuit input stream for block {} @ {}\",blockId,address)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface CoAPEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedCoAPEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface CoAPEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedCoAPEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedHazelcastQueueEndpointBuilder\n             extends\n                 AdvancedHazelcastQueueEndpointConsumerBuilder, AdvancedHazelcastQueueEndpointProducerBuilder {\n         default HazelcastQueueEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedHazelcastQueueEndpointBuilder\n             extends\n                 AdvancedHazelcastQueueEndpointConsumerBuilder, AdvancedHazelcastQueueEndpointProducerBuilder {\n         default HazelcastQueueEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "5862c2c13c1cb67065f934d7356e3e993b9363a9", "projectName": "wildfly.wildfly", "bugType": "Change Modifier", "problem": "     \n    private V value;\n     \n     private transient SerializationGroup<K, V, G> group;", "fixed": "     \n    private transient V value;\n     \n     private transient SerializationGroup<K, V, G> group;", "sourceBeforeFix": "2", "sourceAfterFix": "130"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "0878f4e562469829fb7ae3de0af4e22c1c775a91", "projectName": "thinkaurelius.titan", "bugType": "Wrong Function Name", "problem": "                         KeyIterator i = store.getKeys(krq, tx);\n                         Collection<StaticBuffer> actual = Lists.newArrayList(i);\n                        log.error(\"Checking bounds key:[{}, {}) & col:[{}, {}) (expect {} keys)\",\n                                 new Object[]{keyStart, keyEnd, startCol, endCol, expected.size()});\n                         Assert.assertEquals(expected, actual);\n                         i.close();", "fixed": "                         KeyIterator i = store.getKeys(krq, tx);\n                         Collection<StaticBuffer> actual = Lists.newArrayList(i);\n                        log.debug(\"Checking bounds key:[{}, {}) & col:[{}, {}) (expect {} keys)\",\n                                 new Object[]{keyStart, keyEnd, startCol, endCol, expected.size()});\n                         Assert.assertEquals(expected, actual);\n                         i.close();", "sourceBeforeFix": "log.error(\"Checking bounds [{}, {}) (expect {} keys)\",new Object[]{startCol,endCol,expected.size()})", "sourceAfterFix": "log.debug(\"Checking bounds [{}, {}) (expect {} keys)\",new Object[]{startCol,endCol,expected.size()})"}
{"fixCommitSHA1": "e1d89ddbf6028369fd3117ff648fc6f16a1786fe", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "                     LOG.warn(\"OpenTracing: could not find managed span for exchange=\" + exchange);\n                 }\n             } catch (Throwable t) {\n                LOG.error(\"OpenTracing: Failed to capture tracing data\", t);\n             }\n         }\n     }", "fixed": "                     LOG.warn(\"OpenTracing: could not find managed span for exchange=\" + exchange);\n                 }\n             } catch (Throwable t) {\n                LOG.warn(\"OpenTracing: Failed to capture tracing data\", t);\n             }\n         }\n     }", "sourceBeforeFix": "LOG.error(\"OpenTracing: Failed to capture tracing data\",t)", "sourceAfterFix": "LOG.warn(\"OpenTracing: Failed to capture tracing data\",t)"}
{"fixCommitSHA1": "5805f36ea1b29a185ded3305590df0872c3abb44", "projectName": "libgdx.libgdx", "bugType": "Change Unary Operator\t", "problem": " \t\t\tdirection.set(0, 0, 1);\r\n \t\t} else {\r\n \t\t\tup.set(0, 1, 0);\r\n\t\t\tdirection.set(0, 0, 1);\r\n \t\t}\r\n \t\tposition.set(zoom * viewportWidth / 2.0f, zoom * viewportHeight / 2.0f, 0);\r\n \t\tthis.viewportWidth = viewportWidth;\r", "fixed": " \t\t\tdirection.set(0, 0, 1);\r\n \t\t} else {\r\n \t\t\tup.set(0, 1, 0);\r\n\t\t\tdirection.set(0, 0, -1);\r\n \t\t}\r\n \t\tposition.set(zoom * viewportWidth / 2.0f, zoom * viewportHeight / 2.0f, 0);\r\n \t\tthis.viewportWidth = viewportWidth;\r", "sourceBeforeFix": "1", "sourceAfterFix": "-1"}
{"fixCommitSHA1": "e2119d33293008fcc876f5fcd58ede2993eb24d6", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnBean(RabbitTemplate.class)\n\t@ConditionalOnEnablednHealthIndicator(\"rabbit\")\n \tpublic static class RabbitHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<RabbitHealthIndicator, RabbitTemplate> {", "fixed": " \t@Configuration\n \t@ConditionalOnBean(RabbitTemplate.class)\n\t@ConditionalOnEnabledHealthIndicator(\"rabbit\")\n \tpublic static class RabbitHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<RabbitHealthIndicator, RabbitTemplate> {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"solr\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"solr\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e1d89ddbf6028369fd3117ff648fc6f16a1786fe", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "                     managedSpan.deactivate();\n                 }\n             } catch (Throwable t) {\n                LOG.error(\"OpenTracing: Failed to capture tracing data\", t);\n             }\n         }", "fixed": "                     managedSpan.deactivate();\n                 }\n             } catch (Throwable t) {\n                LOG.warn(\"OpenTracing: Failed to capture tracing data\", t);\n             }\n         }", "sourceBeforeFix": "LOG.error(\"OpenTracing: Failed to capture tracing data\",t)", "sourceAfterFix": "LOG.warn(\"OpenTracing: Failed to capture tracing data\",t)"}
{"fixCommitSHA1": "270185aba54cef1d8ce59ec347b5623f2e502afe", "projectName": "clojure.clojure", "bugType": "Change Identifier Used", "problem": " \t\telse\n \t\t\t{\n \t\t\tISeq s = RT.seq(sizeOrSeq);\n\t\t\tint size = s.count();\n \t\t\tfloat[] ret = new float[size];\n \t\t\tfor(int i = 0; i < size && s != null; i++, s = s.next())\n \t\t\t\tret[i] = ((Number) s.first()).floatValue();", "fixed": " \t\telse\n \t\t\t{\n \t\t\tISeq s = RT.seq(sizeOrSeq);\n\t\t\tint size = RT.count(s);\n \t\t\tfloat[] ret = new float[size];\n \t\t\tfor(int i = 0; i < size && s != null; i++, s = s.next())\n \t\t\t\tret[i] = ((Number) s.first()).floatValue();", "sourceBeforeFix": "s.count()", "sourceAfterFix": "RT.count(s)"}
{"fixCommitSHA1": "03f8d3772fcdcd84ef8b8edd4a8e3cdc1e0c03df", "projectName": "antlr.antlr4", "bugType": "Change Binary Operator", "problem": " \t */\n \tprotected int fill(int n) {\n \t\tfor (int i=0; i<n; i++) {\n\t\t\tif (this.n > 0 && data[this.n - 1] == IntStream.EOF) {\n \t\t\t\treturn i;\n \t\t\t}", "fixed": " \t */\n \tprotected int fill(int n) {\n \t\tfor (int i=0; i<n; i++) {\n\t\t\tif (this.n > 0 && data[this.n - 1] == (char)IntStream.EOF) {\n \t\t\t\treturn i;\n \t\t\t}", "sourceBeforeFix": "index > n", "sourceAfterFix": "index >= n"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15841, value = \"Exception getting result from server %s: %s\")\n     String exceptionAwaitingResultFromServer(ServerIdentity server, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10841, value = \"Exception getting result from server %s: %s\")\n     String exceptionAwaitingResultFromServer(ServerIdentity server, String message);\n     /**", "sourceBeforeFix": "id=15865", "sourceAfterFix": "id=10865"}
{"fixCommitSHA1": "7dc9bddf9a64d9309755accddeb91976371792ed", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " public class PropertiesConfigurationFactory<T> implements FactoryBean<T>,\n \t\tMessageSourceAware, InitializingBean {\n\tprivate static final char[] EXACT_DELIMETERS = { '_', '.', '[' };\n\tprivate static final char[] TARGET_NAME_DELIMETERS = { '_', '.' };\n \tprivate final Log logger = LogFactory.getLog(getClass());", "fixed": " public class PropertiesConfigurationFactory<T> implements FactoryBean<T>,\n \t\tMessageSourceAware, InitializingBean {\n\tprivate static final char[] EXACT_DELIMITERS = { '_', '.', '[' };\n\tprivate static final char[] TARGET_NAME_DELIMITERS = { '_', '.' };\n \tprivate final Log logger = LogFactory.getLog(getClass());", "sourceBeforeFix": "new DefaultPropertyNamePatternsMatcher(TARGET_NAME_DELIMETERS,this.targetName)", "sourceAfterFix": "new DefaultPropertyNamePatternsMatcher(TARGET_NAME_DELIMITERS,this.targetName)"}
{"fixCommitSHA1": "29629e54682850aeca789d11e9a73d5be9248236", "projectName": "brettwooldridge.HikariCP", "bugType": "Change Numeric Literal", "problem": "          Connection connection6 = ds.getConnection();\n          Connection connection7 = ds.getConnection();\n         Thread.sleep(1350);\n          Assert.assertSame(\"Totals connections not as expected\", 10, TestElf.getPool(ds).getTotalConnections());\n          Assert.assertSame(\"Idle connections not as expected\", 3, TestElf.getPool(ds).getIdleConnections());", "fixed": "          Connection connection6 = ds.getConnection();\n          Connection connection7 = ds.getConnection();\n         Thread.sleep(1500);\n          Assert.assertSame(\"Totals connections not as expected\", 10, TestElf.getPool(ds).getTotalConnections());\n          Assert.assertSame(\"Idle connections not as expected\", 3, TestElf.getPool(ds).getIdleConnections());", "sourceBeforeFix": "Thread.sleep(1350)", "sourceAfterFix": "Thread.sleep(1500)"}
{"fixCommitSHA1": "5d12b156e1150162ba3def263b2da14793304b4e", "projectName": "facebook.presto", "bugType": "Change Identifier Used", "problem": "                 Optional.empty());\n        MaterializedResult expected = MaterializedResult.resultBuilder(taskContext.getSession(), concat(probeTypes, buildPages.getTypes()))\n                 .row(\"a\", \"a\")\n                 .row(\"a\", \"a\")\n                 .row(\"b\", null)", "fixed": "                 Optional.empty());\n        MaterializedResult expected = MaterializedResult.resultBuilder(taskContext.getSession(), concat(probeTypes, buildPages.getTypesWithoutHash()))\n                 .row(\"a\", \"a\")\n                 .row(\"a\", \"a\")\n                 .row(\"b\", null)", "sourceBeforeFix": "buildPages.getTypes()", "sourceAfterFix": "buildPages.getTypesWithoutHash()"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "fixed": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "sourceBeforeFix": "GL20.glUniform3(location,toIntBuffer(v,offset,count * 3))", "sourceAfterFix": "GL20.glUniform3iv(location,toIntBuffer(v,offset,count * 3))"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AtomEndpointBuilder\n            extends\n                EndpointConsumerBuilder {\n         default AdvancedAtomEndpointBuilder advanced() {\n             return (AdvancedAtomEndpointBuilder) this;\n         }", "fixed": "     \n    public interface AtomEndpointBuilder extends EndpointConsumerBuilder {\n         default AdvancedAtomEndpointBuilder advanced() {\n             return (AdvancedAtomEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "6e0e38f09f74fb633a33cfd5c59265518bcf85be", "projectName": "netty.netty", "bugType": "Change Identifier Used", "problem": "         HttpContent chunk = (HttpContent) ch.readInbound();\n         DecoderResult dr = chunk.getDecoderResult();\n         assertFalse(dr.isSuccess());\n        assertFalse(dr.isFailure());\n         ensureInboundTrafficDiscarded(ch);\n     }", "fixed": "         HttpContent chunk = (HttpContent) ch.readInbound();\n         DecoderResult dr = chunk.getDecoderResult();\n         assertFalse(dr.isSuccess());\n        assertTrue(dr.isFailure());\n         ensureInboundTrafficDiscarded(ch);\n     }", "sourceBeforeFix": "assertFalse(dr.isFailure())", "sourceAfterFix": "assertTrue(dr.isFailure())"}
{"fixCommitSHA1": "615135aaa2ec18ea6c0b4785749079df4db5fd7a", "projectName": "joelittlejohn.jsonschema2pojo", "bugType": "Change Identifier Used", "problem": "         });\n         assertThat(args.didExit(), is(false));\n        assertThat(args.getSource().next().getFile(), is(\"/home/source\"));\n         assertThat(args.getTargetDirectory(), is(theFile(\"/home/target\")));\n         assertThat(args.getTargetPackage(), is(\"mypackage\"));\n         assertThat(args.isGenerateBuilders(), is(true));", "fixed": "         });\n         assertThat(args.didExit(), is(false));\n        assertThat(args.getSource().next().getFile(), endsWith(\"/home/source\"));\n         assertThat(args.getTargetDirectory(), is(theFile(\"/home/target\")));\n         assertThat(args.getTargetPackage(), is(\"mypackage\"));\n         assertThat(args.isGenerateBuilders(), is(true));", "sourceBeforeFix": "is(\"/home/source\")", "sourceAfterFix": "endsWith(\"/home/source\")"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @return property value in the type of the default value\n \t * @since 1.7\n \t */\n\tpublic <T> T getGlobalPropertyValue(String propertyName, T defaultValue) throws APIException;\n \t/**\n \t * @param aClass class of object getting length for", "fixed": " \t * @return property value in the type of the default value\n \t * @since 1.7\n \t */\n\tpublic <T> T getGlobalPropertyValue(String propertyName, T defaultValue);\n \t/**\n \t * @param aClass class of object getting length for", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "642ff291920b7eec294a37785f2fd0437c8c56a1", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \tpublic static void waitUntilCondition(SupplierWithException<Boolean, Exception> condition, Deadline timeout, long retryIntervalMillis) throws Exception {\n \t\twhile (timeout.hasTimeLeft() && !condition.get()) {\n\t\t\tThread.sleep(Math.min(RETRY_INTERVAL, timeout.timeLeft().toMillis()));\n \t\t}\n \t\tif (!timeout.hasTimeLeft()) {", "fixed": " \tpublic static void waitUntilCondition(SupplierWithException<Boolean, Exception> condition, Deadline timeout, long retryIntervalMillis) throws Exception {\n \t\twhile (timeout.hasTimeLeft() && !condition.get()) {\n\t\t\tThread.sleep(Math.min(retryIntervalMillis, timeout.timeLeft().toMillis()));\n \t\t}\n \t\tif (!timeout.hasTimeLeft()) {", "sourceBeforeFix": "Math.min(RETRY_INTERVAL,timeout.timeLeft().toMillis())", "sourceAfterFix": "Math.min(retryIntervalMillis,timeout.timeLeft().toMillis())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  private final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "2", "sourceAfterFix": "0"}
{"fixCommitSHA1": "de91183182b0c8ca6fc82c1a298b82a7e2830dba", "projectName": "hazelcast.hazelcast", "bugType": "Change Numeric Literal", "problem": "     private static final int THREAD_COUNT = 32;\n    private static final int NUMBER_OF_IDS_PER_THREAD = 400001;\n     private static final int TOTAL_ID_GENERATED = THREAD_COUNT * NUMBER_OF_IDS_PER_THREAD;", "fixed": "     private static final int THREAD_COUNT = 32;\n    private static final int NUMBER_OF_IDS_PER_THREAD = 40000;\n     private static final int TOTAL_ID_GENERATED = THREAD_COUNT * NUMBER_OF_IDS_PER_THREAD;", "sourceBeforeFix": "NUMBER_OF_IDS_PER_THREAD=400001", "sourceAfterFix": "NUMBER_OF_IDS_PER_THREAD=40000"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "64dff91895f9df55fe3a07217a333efa4d37d92a", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "         Class<?> c = makeClass(className, proceedOnExceptions);\n         if (c != null) {\n           if (!classes.add(c)) {\n            LOG.error(\"Ignoring duplicate class \" + className);\n           }\n         }\n       }", "fixed": "         Class<?> c = makeClass(className, proceedOnExceptions);\n         if (c != null) {\n           if (!classes.add(c)) {\n            LOG.warn(\"Ignoring duplicate class \" + className);\n           }\n         }\n       }", "sourceBeforeFix": "LOG.error(\"Failed to get next entry from \" + jarFileName + \": \"+ ioEx)", "sourceAfterFix": "LOG.warn(\"Failed to get next entry from \" + jarFileName + \": \"+ ioEx)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "84d6e4785ecad972742bb1bb869cfc3a5efa731d", "projectName": "cucumber.cucumber-jvm", "bugType": "Change Modifier", "problem": "         Executable testMethod = injectorSourceFactory::create;\n         InjectorSourceInstantiationFailed actualThrown = assertThrows(InjectorSourceInstantiationFailed.class, testMethod);\n         assertAll(\"Checking Exception including cause\",\n            () -> assertThat(\"Unexpected exception message\", actualThrown.getMessage(), is(equalTo(\"Instantiation of 'io.cucumber.guice.InjectorSourceFactoryTest$NoDefaultConstructor' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a   zero args constructor.\"))),\n             () -> assertThat(\"Unexpected exception cause class\", actualThrown.getCause(), isA(InstantiationException.class))\n         );\n     }", "fixed": "         Executable testMethod = injectorSourceFactory::create;\n         InjectorSourceInstantiationFailed actualThrown = assertThrows(InjectorSourceInstantiationFailed.class, testMethod);\n         assertAll(\"Checking Exception including cause\",\n            () -> assertThat(\"Unexpected exception message\", actualThrown.getMessage(), is(equalTo(\"Instantiation of 'io.cucumber.guice.InjectorSourceFactoryTest$NoDefaultConstructor' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a public zero args constructor.\"))),\n             () -> assertThat(\"Unexpected exception cause class\", actualThrown.getCause(), isA(InstantiationException.class))\n         );\n     }", "sourceBeforeFix": "0", "sourceAfterFix": "1"}
{"fixCommitSHA1": "5ac0dcd1b04e38a3dbe11a94897cc0a34ef2d5ec", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \t@Override\r\n\tpublic void log (String tag, String message, Exception exception) {\r\n \t\tif (logLevel >= LOG_INFO) {\r\n \t\t\tSystem.out.println(tag + \": \" + message);\r\n \t\t\texception.printStackTrace(System.out);\r", "fixed": " \t}\r\n \t@Override\r\n\tpublic void log (String tag, String message, Throwable exception) {\r\n \t\tif (logLevel >= LOG_INFO) {\r\n \t\t\tSystem.out.println(tag + \": \" + message);\r\n \t\t\texception.printStackTrace(System.out);\r", "sourceBeforeFix": "Exception exception", "sourceAfterFix": "Throwable exception"}
{"fixCommitSHA1": "8e5020ce3091e4fb07d86e4b935afec5ec1c5815", "projectName": "Alluxio.alluxio", "bugType": "Change Binary Operator", "problem": "   public static String getProperty(String property) {\n     String ret = System.getProperty(property);\n    Preconditions.checkArgument(ret == null, property + \" is not configured.\");\n     LOG.debug(property + \" : \" + ret);\n     return ret;\n   }", "fixed": "   public static String getProperty(String property) {\n     String ret = System.getProperty(property);\n    Preconditions.checkArgument(ret != null, property + \" is not configured.\");\n     LOG.debug(property + \" : \" + ret);\n     return ret;\n   }", "sourceBeforeFix": "ret == null", "sourceAfterFix": "ret != null"}
{"fixCommitSHA1": "d2b19965df52e66385a2d7146887a44cea50330a", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "   }\n   void recordFunctionInformation() {\n    logger.info(\"Recording function information\");\n     startPass(\"recordFunctionInformation\");\n     RecordFunctionInformation recordFunctionInfoPass =\n         new RecordFunctionInformation(", "fixed": "   }\n   void recordFunctionInformation() {\n    logger.fine(\"Recording function information\");\n     startPass(\"recordFunctionInformation\");\n     RecordFunctionInformation recordFunctionInfoPass =\n         new RecordFunctionInformation(", "sourceBeforeFix": "logger.info(\"Recording function information\")", "sourceAfterFix": "logger.fine(\"Recording function information\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "fixed": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4fv(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4fv(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "sourceBeforeFix": "GL11.glGetFloat(pname,params)", "sourceAfterFix": "GL11.glGetFloatv(pname,params)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform3(location, v);\r\n \t}\r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform3(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r", "fixed": " \t}\r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform3iv(location, v);\r\n \t}\r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform3iv(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r", "sourceBeforeFix": "GL20.glUniform2(location,v)", "sourceAfterFix": "GL20.glUniform2iv(location,v)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform3(location, v);\r\n \t}\r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform3(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r", "fixed": " \t}\r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform3iv(location, v);\r\n \t}\r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform3iv(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r", "sourceBeforeFix": "GL20.glGetVertexAttrib(index,pname,params)", "sourceAfterFix": "GL20.glGetVertexAttribfv(index,pname,params)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<DirectMessage> getSentDirectMessages(Paging paging) throws\n             TwitterException {\n        return DirectMessage.constructDirectMessages(get(getBaseURL() +\n                 \"direct_messages/sent.json\", new PostParameter[0],\n                 paging.asPostParameterList(), true));\n     }", "fixed": "      */\n     public ResponseList<DirectMessage> getSentDirectMessages(Paging paging) throws\n             TwitterException {\n        return DirectMessage.createDirectMessageList(get(getBaseURL() +\n                 \"direct_messages/sent.json\", new PostParameter[0],\n                 paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\",true))"}
{"fixCommitSHA1": "486b290863a66641b0ec30dbf2d9e349733cae44", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "    */\n   public void majorCompact(final String tableNameOrRegionName)\n   throws IOException, InterruptedException {\n    majorCompact(Bytes.toBytesBinary(tableNameOrRegionName));\n   }\n   /**", "fixed": "    */\n   public void majorCompact(final String tableNameOrRegionName)\n   throws IOException, InterruptedException {\n    majorCompact(Bytes.toBytes(tableNameOrRegionName));\n   }\n   /**", "sourceBeforeFix": "Bytes.toBytesBinary(tableNameOrRegionName)", "sourceAfterFix": "Bytes.toBytes(tableNameOrRegionName)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  private final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface ElasticsearchEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedElasticsearchEndpointBuilder advanced() {", "fixed": "     \n    public interface ElasticsearchEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedElasticsearchEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "9bcf32ab62047ea4913d9cde9f9e73e7acbfcda6", "projectName": "Graylog2.graylog2-server", "bugType": "Change Numeric Literal", "problem": "         assertEquals(1, serverStub.callsToProcessBufferInserter);\n         assertNull(lm.getField(\"id\"));\n         assertEquals(\"foo\", lm.getField(\"_something\"));\n        assertEquals(8, lm.getFields().size());\n     }\n     @Test", "fixed": "         assertEquals(1, serverStub.callsToProcessBufferInserter);\n         assertNull(lm.getField(\"id\"));\n         assertEquals(\"foo\", lm.getField(\"_something\"));\n        assertEquals(5, lm.getFields().size());\n     }\n     @Test", "sourceBeforeFix": "assertEquals(8,lm.getFields().size())", "sourceAfterFix": "assertEquals(5,lm.getFields().size())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  private final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "0e8e5ba702fbbea71f8cffc063e2d873cbebe83e", "projectName": "wildfly.wildfly", "bugType": "Same Function Swap Args", "problem": "             Assert.fail(\"Test should fail, user shouldn't be allowed to invoke that method\");\n         } catch (WebServiceException e) {\n            Assert.assertEquals(e.getCause().getMessage(), getNotAllowedExceptionMessage(\"helloForNone\"));\n         }\n     }", "fixed": "             Assert.fail(\"Test should fail, user shouldn't be allowed to invoke that method\");\n         } catch (WebServiceException e) {\n            Assert.assertEquals(getNotAllowedExceptionMessage(\"helloForNone\"), e.getCause().getMessage());\n         }\n     }", "sourceBeforeFix": "Assert.assertEquals(e.getCause().getMessage(),getNotAllowedExceptionMessage(\"helloForNone\"))", "sourceAfterFix": "Assert.assertEquals(getNotAllowedExceptionMessage(\"helloForNone\"),e.getCause().getMessage())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleAlternativesWithCommonLabel_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(561);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "fixed": " \tpublic void testMultipleAlternativesWithCommonLabel_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(560);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "sourceBeforeFix": "new StringBuilder(239)", "sourceAfterFix": "new StringBuilder(238)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public Trends getTrends() throws TwitterException {\n        return Trends.constructTrends(get(getSearchBaseURL() + \"trends.json\", false));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n      */\n     public Trends getTrends() throws TwitterException {\n        return Trends.createTrends(get(getSearchBaseURL() + \"trends.json\", false));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline.json\",true))"}
{"fixCommitSHA1": "df0e14359abd61ff3a5713e5e12e116b3fb1c3ed", "projectName": "openmrs.openmrs-core", "bugType": "Change Modifier", "problem": " \tprivate static final Log log = LogFactory.getLog(ServiceContext.class);\n\tprivate static ServiceContext instance;\n \tprivate ApplicationContext applicationContext;", "fixed": " \tprivate static final Log log = LogFactory.getLog(ServiceContext.class);\n\tprivate static volatile ServiceContext instance;\n \tprivate ApplicationContext applicationContext;", "sourceBeforeFix": "10", "sourceAfterFix": "74"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedTwilioEndpointBuilder\n             extends\n                 AdvancedTwilioEndpointConsumerBuilder, AdvancedTwilioEndpointProducerBuilder {\n         default TwilioEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedTwilioEndpointBuilder\n             extends\n                 AdvancedTwilioEndpointConsumerBuilder, AdvancedTwilioEndpointProducerBuilder {\n         default TwilioEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "0878f4e562469829fb7ae3de0af4e22c1c775a91", "projectName": "thinkaurelius.titan", "bugType": "Change Identifier Used", "problem": "                         KeyIterator i = store.getKeys(krq, tx);\n                         Collection<StaticBuffer> actual = Lists.newArrayList(i);\n                        log.error(\"Checking bounds key:[{}, {}) & col:[{}, {}) (expect {} keys)\",\n                                 new Object[]{keyStart, keyEnd, startCol, endCol, expected.size()});\n                         Assert.assertEquals(expected, actual);\n                         i.close();", "fixed": "                         KeyIterator i = store.getKeys(krq, tx);\n                         Collection<StaticBuffer> actual = Lists.newArrayList(i);\n                        log.debug(\"Checking bounds key:[{}, {}) & col:[{}, {}) (expect {} keys)\",\n                                 new Object[]{keyStart, keyEnd, startCol, endCol, expected.size()});\n                         Assert.assertEquals(expected, actual);\n                         i.close();", "sourceBeforeFix": "log.error(\"Checking bounds [{}, {}) (expect {} keys)\",new Object[]{startCol,endCol,expected.size()})", "sourceAfterFix": "log.debug(\"Checking bounds [{}, {}) (expect {} keys)\",new Object[]{startCol,endCol,expected.size()})"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getMentions(Paging paging) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getMentions(Paging paging) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "DirectMessage.constructDirectMessages(get(getBaseURL() + \"direct_messages.json\",true))", "sourceAfterFix": "DirectMessage.createDirectMessageList(get(getBaseURL() + \"direct_messages.json\",true))"}
{"fixCommitSHA1": "c0fc1a0d3ae085658408d3644e9a676478ee696b", "projectName": "openhab.openhab", "bugType": "Same Function Less Args", "problem": " \t */\n \tpublic void sendPairPong(String dstAddr)\n \t{\n\t\tPairPongMsg pp = new PairPongMsg(getMessageCount(), (byte)0, MaxCulMsgType.PAIR_PONG, (byte) 0, this.srcAddr, dstAddr);\n \t\tsendMessage(pp);\n \t}", "fixed": " \t */\n \tpublic void sendPairPong(String dstAddr)\n \t{\n\t\tPairPongMsg pp = new PairPongMsg(getMessageCount(), (byte)0, (byte) 0, this.srcAddr, dstAddr);\n \t\tsendMessage(pp);\n \t}", "sourceBeforeFix": "new PairPongMsg(getMessageCount(),(byte)0,MaxCulMsgType.PAIR_PONG,(byte)0,this.srcAddr,dstAddr)", "sourceAfterFix": "new PairPongMsg(getMessageCount(),(byte)0,(byte)0,this.srcAddr,dstAddr)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "                 } else {\n                     statistics.increaseCacheHits(1);\n                 }\n                statistics.addGetTimeNano(System.nanoTime() - start);\n             }\n         }\n     }", "fixed": "                 } else {\n                     statistics.increaseCacheHits(1);\n                 }\n                statistics.addGetTimeNanos(System.nanoTime() - start);\n             }\n         }\n     }", "sourceBeforeFix": "statistics.addRemoveTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addRemoveTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "37662e89fb569a997ce97d40b1e7d13cf2acdc9c", "projectName": "apache.hive", "bugType": "Change Identifier Used", "problem": "           }\n           HadoopJobExecHelper.runningJobKillURIs.remove(rj.getJobID());\n         }\n        RCFileMergeMapper.jobClose(outputPath, noName, job, console);\n       } catch (Exception e) {\n       }\n     }", "fixed": "           }\n           HadoopJobExecHelper.runningJobKillURIs.remove(rj.getJobID());\n         }\n        RCFileMergeMapper.jobClose(outputPath, success, job, console);\n       } catch (Exception e) {\n       }\n     }", "sourceBeforeFix": "RCFileMergeMapper.jobClose(outputPath,noName,job,console)", "sourceAfterFix": "RCFileMergeMapper.jobClose(outputPath,success,job,console)"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "             case CREATE:\n                 if (isStatisticsEnabled) {\n                     statistics.increaseCachePuts(1);\n                    statistics.addGetTimeNano(System.nanoTime() - start);\n                 }\n                 cacheRecordStore.createRecordWithExpiry(keyData, value, expiryPolicy, now, false);\n                 break;", "fixed": "             case CREATE:\n                 if (isStatisticsEnabled) {\n                     statistics.increaseCachePuts(1);\n                    statistics.addGetTimeNanos(System.nanoTime() - start);\n                 }\n                 cacheRecordStore.createRecordWithExpiry(keyData, value, expiryPolicy, now, false);\n                 break;", "sourceBeforeFix": "statistics.addGetTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addGetTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "7fe4af53a9c206fb201115be870694283f877740", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "         SortedMap<String, Properties> map = new TreeMap<String, Properties>();\n         while (componentDescriptionIter != null && componentDescriptionIter.hasMoreElements()) {\n             URL url = componentDescriptionIter.nextElement();\n            LOG.info(\"Finding components in url: {}\", url);\n             try {\n                 Properties properties = new Properties();\n                 properties.load(url.openStream());", "fixed": "         SortedMap<String, Properties> map = new TreeMap<String, Properties>();\n         while (componentDescriptionIter != null && componentDescriptionIter.hasMoreElements()) {\n             URL url = componentDescriptionIter.nextElement();\n            LOG.trace(\"Finding components in url: {}\", url);\n             try {\n                 Properties properties = new Properties();\n                 properties.load(url.openStream());", "sourceBeforeFix": "LOG.info(\"Finding components in url: {}\",url)", "sourceAfterFix": "LOG.trace(\"Finding components in url: {}\",url)"}
{"fixCommitSHA1": "08c13211146864ab9cbc8a79fef118eb3aa3e0e4", "projectName": "facebook.presto", "bugType": "Change Modifier", "problem": "         }\n     }\n    private class TestSplitRemote\n             implements ConnectorSplit\n     {\n         @Override", "fixed": "         }\n     }\n    private static class TestSplitRemote\n             implements ConnectorSplit\n     {\n         @Override", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(639);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {console.log($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "fixed": " \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_3() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(638);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {console.log($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "sourceBeforeFix": "new StringBuilder(246)", "sourceAfterFix": "new StringBuilder(245)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e2119d33293008fcc876f5fcd58ede2993eb24d6", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnBean(MongoTemplate.class)\n\t@ConditionalOnEnablednHealthIndicator(\"mongo\")\n \tpublic static class MongoHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<MongoHealthIndicator, MongoTemplate> {", "fixed": " \t@Configuration\n \t@ConditionalOnBean(MongoTemplate.class)\n\t@ConditionalOnEnabledHealthIndicator(\"mongo\")\n \tpublic static class MongoHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<MongoHealthIndicator, MongoTemplate> {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"elasticsearch\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"elasticsearch\")"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface XmppEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedXmppEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface XmppEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedXmppEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "ef8206551c0ec51f70ec25e7371333dc5c8d99b1", "projectName": "junit-team.junit", "bugType": "Same Function Less Args", "problem": "         }\n         Test test = null;\n         try {\ntest = (Test) suiteMethod.invoke(null, (Object[]) new Class[0]);\n             if (test == null) {\n                 return test;\n             }", "fixed": "         }\n         Test test = null;\n         try {\ntest = (Test) suiteMethod.invoke(null);\n             if (test == null) {\n                 return test;\n             }", "sourceBeforeFix": "testClass.getMethod(SUITE_METHODNAME,new Class[0])", "sourceAfterFix": "testClass.getMethod(SUITE_METHODNAME)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15865, value = \"Invalid content declaration\")\n     String invalidContentDeclaration();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10865, value = \"Invalid content declaration\")\n     String invalidContentDeclaration();\n     /**", "sourceBeforeFix": "id=15866", "sourceAfterFix": "id=10866"}
{"fixCommitSHA1": "dd20434290eb6ae6dff133d70073e35a3998d362", "projectName": "Alluxio.alluxio", "bugType": "Same Function Less Args", "problem": "                       NetworkAddressUtils.getLocalHostName(ClientContext.getConf()));\n         } catch (IOException ioe) {\n           LOG.warn(\"Failed to write to TachyonStore stream, block \" + getCurrentBlockId()\n              + \" will not be in TachyonStorage.\", ioe);\n           mShouldCacheCurrentBlock = false;\n         }\n       } else {", "fixed": "                       NetworkAddressUtils.getLocalHostName(ClientContext.getConf()));\n         } catch (IOException ioe) {\n           LOG.warn(\"Failed to write to TachyonStore stream, block \" + getCurrentBlockId()\n              + \" will not be in TachyonStorage.\");\n           mShouldCacheCurrentBlock = false;\n         }\n       } else {", "sourceBeforeFix": "LOG.warn(\"Block of ID \" + getCurrentBlockId() + \" could not be cached into Tachyon\",ioe)", "sourceAfterFix": "LOG.warn(\"Block of ID \" + getCurrentBlockId() + \" could not be cached into Tachyon\")"}
{"fixCommitSHA1": "3df3be852c308ed68fc81c1e44eb5714aafcf0bf", "projectName": "google.auto", "bugType": "Change Identifier Used", "problem": "       classGetModuleMethod = Class.class.getMethod(\"getModule\");\n       Class<?> moduleClass = classGetModuleMethod.getReturnType();\n       moduleIsExportedMethod = moduleClass.getMethod(\"isExported\", String.class);\n    } catch (ReflectiveOperationException e) {\n       classGetModuleMethod = null;\n       moduleIsExportedMethod = null;\n     }", "fixed": "       classGetModuleMethod = Class.class.getMethod(\"getModule\");\n       Class<?> moduleClass = classGetModuleMethod.getReturnType();\n       moduleIsExportedMethod = moduleClass.getMethod(\"isExported\", String.class);\n    } catch (Exception e) {\n       classGetModuleMethod = null;\n       moduleIsExportedMethod = null;\n     }", "sourceBeforeFix": "ReflectiveOperationException e", "sourceAfterFix": "Exception e"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<Status> getUserTimeline(String id, Paging paging)\n             throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline/\" + id + \".json\",\n                 null, paging.asPostParameterList(), http.isAuthenticationEnabled()));\n     }", "fixed": "      */\n     public ResponseList<Status> getUserTimeline(String id, Paging paging)\n             throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline/\" + id + \".json\",\n                 null, paging.asPostParameterList(), http.isAuthenticationEnabled()));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweets_of_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweets_of_me.json\",null,true))"}
{"fixCommitSHA1": "038c9b6d6103052795b6d6e1175cd964c7461bb2", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Change Modifier", "problem": "         }\n         \n        protected int getMessageLength() {\n             return currentOutputPosition;\n         }", "fixed": "         }\n         \n        protected final int getMessageLength() {\n             return currentOutputPosition;\n         }", "sourceBeforeFix": "4", "sourceAfterFix": "20"}
{"fixCommitSHA1": "f467d695be2ae4ee7d5c2978191e1415aef37a9e", "projectName": "netty.netty", "bugType": "Change Boolean Literal", "problem": "      */\n     public static SslContextBuilder forServer(\n             File keyCertChainFile, File keyFile, String keyPassword) {\n        return new SslContextBuilder(false).keyManager(keyCertChainFile, keyFile, keyPassword);\n     }\n     private final boolean forServer;", "fixed": "      */\n     public static SslContextBuilder forServer(\n             File keyCertChainFile, File keyFile, String keyPassword) {\n        return new SslContextBuilder(true).keyManager(keyCertChainFile, keyFile, keyPassword);\n     }\n     private final boolean forServer;", "sourceBeforeFix": "new SslContextBuilder(false)", "sourceAfterFix": "new SslContextBuilder(true)"}
{"fixCommitSHA1": "e0ba13a65722ac712636b5065561fcd5219ecc94", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "     public HazelcastInstance[] newInstances(Config config, int nodeCount) {\n         final HazelcastInstance[] instances = new HazelcastInstance[count];\n        for (int i = 0; i < count; i++) {\n             instances[i] = newHazelcastInstance(config);\n         }\n         return instances;", "fixed": "     public HazelcastInstance[] newInstances(Config config, int nodeCount) {\n         final HazelcastInstance[] instances = new HazelcastInstance[count];\n        for (int i = 0; i < nodeCount; i++) {\n             instances[i] = newHazelcastInstance(config);\n         }\n         return instances;", "sourceBeforeFix": "i < count", "sourceAfterFix": "i < nodeCount"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15856, value = \"Invalid url stream.\")\n     String invalidUrlStream();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10856, value = \"Invalid url stream.\")\n     String invalidUrlStream();\n     /**", "sourceBeforeFix": "id=15850", "sourceAfterFix": "id=10850"}
{"fixCommitSHA1": "2a754d9dd04b032290767958b78482707b88d76f", "projectName": "dropwizard.metrics", "bugType": "Change Identifier Used", "problem": "         for (final Thread.State state : Thread.State.values()) {\n             gauges.put(name(state.toString().toLowerCase(), \"count\"),\n                       new Gauge<Object>() {\n                            @Override\n                           public Object getValue() {\n                                return getThreadCount(state);\n                            }\n                        });", "fixed": "         for (final Thread.State state : Thread.State.values()) {\n             gauges.put(name(state.toString().toLowerCase(), \"count\"),\n                       new Gauge<Integer>() {\n                            @Override\n                           public Integer getValue() {\n                                return getThreadCount(state);\n                            }\n                        });", "sourceBeforeFix": "Gauge<Object>", "sourceAfterFix": "Gauge<Integer>"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should delete global property from database\n \t */\n \t@Authorized(PrivilegeConstants.PURGE_GLOBAL_PROPERTIES)\n\tpublic void purgeGlobalProperty(GlobalProperty globalProperty) throws APIException;\n \t/**\n \t * Completely remove the given global properties from the database", "fixed": " \t * @should delete global property from database\n \t */\n \t@Authorized(PrivilegeConstants.PURGE_GLOBAL_PROPERTIES)\n\tpublic void purgeGlobalProperty(GlobalProperty globalProperty);\n \t/**\n \t * Completely remove the given global properties from the database", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(741);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {Console.WriteLine($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "fixed": " \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(740);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {Console.WriteLine($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "sourceBeforeFix": "new StringBuilder(741)", "sourceAfterFix": "new StringBuilder(740)"}
{"fixCommitSHA1": "b89ef69f126ecaa45d91e1b75e58acdd6d0f3625", "projectName": "Atmosphere.atmosphere", "bugType": "More Specific If", "problem": "     protected void doInitParamsForWebSocket(ServletConfig sc) {\n         String s = sc.getInitParameter(WEBSOCKET_SUPPORT);\n        if (s != null) {\n             webSocketEnabled = true;\n             sessionSupport(false);\n         }", "fixed": "     protected void doInitParamsForWebSocket(ServletConfig sc) {\n         String s = sc.getInitParameter(WEBSOCKET_SUPPORT);\n        if (s != null && Boolean.parseBoolean(s)) {\n             webSocketEnabled = true;\n             sessionSupport(false);\n         }", "sourceBeforeFix": "s != null", "sourceAfterFix": "s != null && Boolean.parseBoolean(s)"}
{"fixCommitSHA1": "55ed50c4975cf694828d46ee9ca32ce72a9ef913", "projectName": "clojure.clojure", "bugType": "Wrong Function Name", "problem": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 7:\r\n\t\t\treturn invoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "fixed": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 7:\r\n\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "sourceBeforeFix": "invoke(args.first(),(args=args.rest()).first(),args.rest())", "sourceAfterFix": "doInvoke(args.first(),(args=args.rest()).first(),args.rest())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n            statistics.addRemoveTimeNano(System.nanoTime() - start);\n             if (hitCount == 1) {\n                 statistics.increaseCacheHits(hitCount);\n             } else {", "fixed": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n            statistics.addRemoveTimeNanos(System.nanoTime() - start);\n             if (hitCount == 1) {\n                 statistics.increaseCacheHits(hitCount);\n             } else {", "sourceBeforeFix": "statistics.addRemoveTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addRemoveTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "99bd2140d354fb492094b4e1557def9b5c643800", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": " \t\t}\r\n \t\tif (!outcomesConcept.getAnswers().isEmpty()) {\r\n \t\t\tfor (ConceptAnswer conceptAnswer : outcomesConcept.getAnswers()) {\r\n\t\t\t\tpossibleOutcomes.add(conceptAnswer.getConcept());\r\n \t\t\t}\r\n \t\t\treturn possibleOutcomes;\r\n \t\t}\r", "fixed": " \t\t}\r\n \t\tif (!outcomesConcept.getAnswers().isEmpty()) {\r\n \t\t\tfor (ConceptAnswer conceptAnswer : outcomesConcept.getAnswers()) {\r\n\t\t\t\tpossibleOutcomes.add(conceptAnswer.getAnswerConcept());\r\n \t\t\t}\r\n \t\t\treturn possibleOutcomes;\r\n \t\t}\r", "sourceBeforeFix": "conceptAnswer.getConcept()", "sourceAfterFix": "conceptAnswer.getAnswerConcept()"}
{"fixCommitSHA1": "5b13fe70c25812157a1e4432135eb9639e72bc6a", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t\tfinal Sink output = new Sink(\"output.json\").withInputs(selection);\n \t\texpectedPlan.setSinks(output);\n\t\tassertEquals(expectedPlan, actualPlan);\n \t}\n \t@Test", "fixed": " \t\tfinal Sink output = new Sink(\"output.json\").withInputs(selection);\n \t\texpectedPlan.setSinks(output);\n\t\tassertPlanEquals(expectedPlan, actualPlan);\n \t}\n \t@Test", "sourceBeforeFix": "assertEquals(expectedPlan,actualPlan)", "sourceAfterFix": "assertPlanEquals(expectedPlan,actualPlan)"}
{"fixCommitSHA1": "486b290863a66641b0ec30dbf2d9e349733cae44", "projectName": "apache.hbase", "bugType": "Wrong Function Name", "problem": "    */\n   public void compact(String tableOrRegionName, String columnFamily)\n     throws IOException,  InterruptedException {\n    compact(Bytes.toBytesBinary(tableOrRegionName), Bytes.toBytes(columnFamily));\n   }\n   /**", "fixed": "    */\n   public void compact(String tableOrRegionName, String columnFamily)\n     throws IOException,  InterruptedException {\n    compact(Bytes.toBytes(tableOrRegionName), Bytes.toBytes(columnFamily));\n   }\n   /**", "sourceBeforeFix": "Bytes.toBytesBinary(regionname)", "sourceAfterFix": "Bytes.toBytes(regionname)"}
{"fixCommitSHA1": "8a586e948e5de2ebd7bc09203c904e579f052c06", "projectName": "Atmosphere.atmosphere", "bugType": "More Specific If", "problem": "      * Close the associated {@link PrintWriter} or {@link java.io.OutputStream}\n      */\n     public void closeStreamOrWriter() {\n        if (resource().transport() != AtmosphereResource.TRANSPORT.WEBSOCKET) {\n             try {\n                 boolean isUsingStream = (Boolean) request().getAttribute(PROPERTY_USE_STREAM);\n                 if (isUsingStream) {", "fixed": "      * Close the associated {@link PrintWriter} or {@link java.io.OutputStream}\n      */\n     public void closeStreamOrWriter() {\n        if (resource() != null && resource().transport() != AtmosphereResource.TRANSPORT.WEBSOCKET) {\n             try {\n                 boolean isUsingStream = (Boolean) request().getAttribute(PROPERTY_USE_STREAM);\n                 if (isUsingStream) {", "sourceBeforeFix": "resource().transport() != AtmosphereResource.TRANSPORT.WEBSOCKET", "sourceAfterFix": "resource() != null && resource().transport() != AtmosphereResource.TRANSPORT.WEBSOCKET"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface DirectVmEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedDirectVmEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface DirectVmEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedDirectVmEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "                 } else {\n                     statistics.increaseCacheHits(1);\n                 }\n                statistics.addGetTimeNano(System.nanoTime() - start);\n             }\n         }\n     }", "fixed": "                 } else {\n                     statistics.increaseCacheHits(1);\n                 }\n                statistics.addGetTimeNanos(System.nanoTime() - start);\n             }\n         }\n     }", "sourceBeforeFix": "statistics.addRemoveTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addRemoveTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "336e603a61b89a1aac0225925081b96e0a6a38f7", "projectName": "libgdx.libgdx", "bugType": "Change Numeric Literal", "problem": " \tstatic private final int BIG_ENOUGH_INT = 16 * 1024;\r\n \tstatic private final double BIG_ENOUGH_FLOOR = BIG_ENOUGH_INT;\r\n\tstatic private final double BIG_ENOUGH_CEIL = BIG_ENOUGH_INT + 0.5;\r\n \tstatic public int floor (float x) {\r\n \t\treturn (int)(x + BIG_ENOUGH_FLOOR) - BIG_ENOUGH_INT;\r", "fixed": " \tstatic private final int BIG_ENOUGH_INT = 16 * 1024;\r\n \tstatic private final double BIG_ENOUGH_FLOOR = BIG_ENOUGH_INT;\r\n\tstatic private final double BIG_ENOUGH_CEIL = BIG_ENOUGH_INT + 0.99999999;\r\n \tstatic public int floor (float x) {\r\n \t\treturn (int)(x + BIG_ENOUGH_FLOOR) - BIG_ENOUGH_INT;\r", "sourceBeforeFix": "BIG_ENOUGH_INT + 0.5", "sourceAfterFix": "BIG_ENOUGH_INT + 0.99999999"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "78bc92d81bf9815f4a4c27a5af7cdb88e119b734", "projectName": "antlr.antlr4", "bugType": "Change Identifier Used", "problem": " \t\tthis.fontSize = fontSize;\n \t\ttry {\n \t\t\tClass c = Class.forName(\"org.antlr.v4.runtime.tree.gui.\" + fontName);\n\t\t\tthis.fontMetrics = (FontMetrics)c.newInstance();\n \t\t}\n \t\tcatch (Exception e) {\n \t\t\tthrow new UnsupportedOperationException(\"No font metrics for \"+fontName);", "fixed": " \t\tthis.fontSize = fontSize;\n \t\ttry {\n \t\t\tClass c = Class.forName(\"org.antlr.v4.runtime.tree.gui.\" + fontName);\n\t\t\tthis.fontMetrics = (BasicFontMetrics)c.newInstance();\n \t\t}\n \t\tcatch (Exception e) {\n \t\t\tthrow new UnsupportedOperationException(\"No font metrics for \"+fontName);", "sourceBeforeFix": "(FontMetrics)c.newInstance()", "sourceAfterFix": "(BasicFontMetrics)c.newInstance()"}
{"fixCommitSHA1": "e034907ee15d939cbcfde171bb63715e23f01a6a", "projectName": "apache.camel", "bugType": "More Specific If", "problem": "         int i = 0;\n         if (boi.getOutput() != null) {\n             for (MessagePartInfo partInfo : boi.getOutput().getMessageParts()) {\n                if (elements.size() > i) {\n                     answer.put(partInfo, elements.get(i++));\n                 }\n             }", "fixed": "         int i = 0;\n         if (boi.getOutput() != null) {\n             for (MessagePartInfo partInfo : boi.getOutput().getMessageParts()) {\n                if (elements != null && elements.size() > i) {\n                     answer.put(partInfo, elements.get(i++));\n                 }\n             }", "sourceBeforeFix": "elements.size() > i", "sourceAfterFix": "elements != null && elements.size() > i"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15835, value = IN_SERIES + \" is missing groups: %s\")\n     String inSeriesIsMissingGroups(String rolloutPlan);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10835, value = IN_SERIES + \" is missing groups: %s\")\n     String inSeriesIsMissingGroups(String rolloutPlan);\n     /**", "sourceBeforeFix": "id=15856", "sourceAfterFix": "id=10856"}
{"fixCommitSHA1": "88bf7f435fd294dc60ea6bcc2a1ee19e9aada3d4", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "       if (tempBackupCheckpointExists) {\n        UnderFileSystemUtils.deleteFileIfExists(mUfs, mCheckpointPath);\n         mUfs.rename(mTempBackupCheckpointPath, mCheckpointPath);\n       }\n       if (backupCheckpointExists) {", "fixed": "       if (tempBackupCheckpointExists) {\n        UnderFileSystemUtils.deleteFileIfExists(mCheckpointPath);\n         mUfs.rename(mTempBackupCheckpointPath, mCheckpointPath);\n       }\n       if (backupCheckpointExists) {", "sourceBeforeFix": "UnderFileSystemUtils.deleteFileIfExists(mUfs,mCheckpointPath)", "sourceAfterFix": "UnderFileSystemUtils.deleteFileIfExists(mCheckpointPath)"}
{"fixCommitSHA1": "6196f126f039a618d3b8cc4112def78be2b07891", "projectName": "libgdx.libgdx", "bugType": "Less Specific If", "problem": " \tpublic Mesh (VertexDataType type, boolean isStatic, int maxVertices, int maxIndices, VertexAttribute... attributes) {\r\n\t\tif (type == VertexDataType.VertexBufferObject) {\r\n \t\t\tvertices = new VertexBufferObject(isStatic, maxVertices, attributes);\r\n \t\t\tindices = new IndexBufferObject(isStatic, maxIndices);\r\n \t\t\tisVertexArray = false;\r", "fixed": " \tpublic Mesh (VertexDataType type, boolean isStatic, int maxVertices, int maxIndices, VertexAttribute... attributes) {\r\n\t\tif (type == VertexDataType.VertexBufferObject || Mesh.forceVBO) {\r\n \t\t\tvertices = new VertexBufferObject(isStatic, maxVertices, attributes);\r\n \t\t\tindices = new IndexBufferObject(isStatic, maxIndices);\r\n \t\t\tisVertexArray = false;\r", "sourceBeforeFix": "type == VertexDataType.VertexBufferObject", "sourceAfterFix": "type == VertexDataType.VertexBufferObject || Mesh.forceVBO"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15845, value = \"Invalid rollout plan. Server group %s has a %s value of %s; must be between 0 and 100.\")\n     String invalidRolloutPlanRange(String name, String propertyName, int value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10845, value = \"Invalid rollout plan. Server group %s has a %s value of %s; must be between 0 and 100.\")\n     String invalidRolloutPlanRange(String name, String propertyName, int value);\n     /**", "sourceBeforeFix": "id=15872", "sourceAfterFix": "id=10872"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "5d6b0ad639f597e0245d7b4591f383f4f12c23d7", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "                     invocation.nodeEngine, invocation.serviceName, isStillRunningOperation,\n                     invocation.getTarget(), 0, 0, IS_EXECUTING_CALL_TIMEOUT, callback, true);\n            invocation.logger.warning(\"Asking if operation execution has been started: \" + invocation);\n             inv.invoke();\n         }\n     }", "fixed": "                     invocation.nodeEngine, invocation.serviceName, isStillRunningOperation,\n                     invocation.getTarget(), 0, 0, IS_EXECUTING_CALL_TIMEOUT, callback, true);\n            invocation.logger.finest(\"Asking if operation execution has been started: \" + invocation);\n             inv.invoke();\n         }\n     }", "sourceBeforeFix": "invocation.logger.warning(\"'is-executing': \" + executing + \" -> \"+ invocation)", "sourceAfterFix": "invocation.logger.finest(\"'is-executing': \" + executing + \" -> \"+ invocation)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 15832, value = \"There is already a registered host named '%s'\")\n     String slaveAlreadyRegistered(String slaveName);\n     /**", "fixed": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 10832, value = \"There is already a registered host named '%s'\")\n     String slaveAlreadyRegistered(String slaveName);\n     /**", "sourceBeforeFix": "id=15830", "sourceAfterFix": "id=10830"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedCxfEndpointBuilder\n             extends\n                 AdvancedCxfEndpointConsumerBuilder, AdvancedCxfEndpointProducerBuilder {\n         default CxfEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedCxfEndpointBuilder\n             extends\n                 AdvancedCxfEndpointConsumerBuilder, AdvancedCxfEndpointProducerBuilder {\n         default CxfEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "118cb7b87bde01d6e23a97584087738e90113e8b", "projectName": "Alluxio.alluxio", "bugType": "Same Function Less Args", "problem": "         if (mFs.exists(new Path(path))) {\n           return true;\n         }\n        return mFs.mkdirs(new Path(path), null);\n       } catch (IOException e) {\n         cnt ++;\n         LOG.error(cnt + \" : \" + e.getMessage(), e);", "fixed": "         if (mFs.exists(new Path(path))) {\n           return true;\n         }\n        return mFs.mkdirs(new Path(path));\n       } catch (IOException e) {\n         cnt ++;\n         LOG.error(cnt + \" : \" + e.getMessage(), e);", "sourceBeforeFix": "mFs.mkdirs(new Path(path),null)", "sourceAfterFix": "mFs.mkdirs(new Path(path))"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedToMe(Paging paging) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_to_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedToMe(Paging paging) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_to_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))"}
{"fixCommitSHA1": "ec709731b83a26e43c22bc6299ea29c180d260d8", "projectName": "neo4j.neo4j", "bugType": "Same Function Less Args", "problem": "         put( TYPES, new BooleanTypeCaster(), boolean.class, Boolean.class );\n         put( TYPES, new FloatTypeCaster(), float.class, Float.class );\n         put( TYPES, new DoubleTypeCaster(), double.class, Double.class );\n        put( TYPES, new MapTypeCaster(), Map.class, Double.class );\n         put( TYPES, new NodeTypeCaster(), Node.class );\n         put( TYPES, new RelationshipTypeCaster(), Relationship.class );\n         put( TYPES, new RelationshipTypeTypeCaster(), RelationshipType.class );", "fixed": "         put( TYPES, new BooleanTypeCaster(), boolean.class, Boolean.class );\n         put( TYPES, new FloatTypeCaster(), float.class, Float.class );\n         put( TYPES, new DoubleTypeCaster(), double.class, Double.class );\n        put( TYPES, new MapTypeCaster(), Map.class );\n         put( TYPES, new NodeTypeCaster(), Node.class );\n         put( TYPES, new RelationshipTypeCaster(), Relationship.class );\n         put( TYPES, new RelationshipTypeTypeCaster(), RelationshipType.class );", "sourceBeforeFix": "put(TYPES,new MapTypeCaster(),Map.class,Double.class)", "sourceAfterFix": "put(TYPES,new MapTypeCaster(),Map.class)"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleAlternativesWithCommonLabel_4() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(561);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "fixed": " \tpublic void testMultipleAlternativesWithCommonLabel_4() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(560);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "sourceBeforeFix": "new StringBuilder(561)", "sourceAfterFix": "new StringBuilder(560)"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should return null if no implementation id is defined yet\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)\n\tpublic ImplementationId getImplementationId() throws APIException;\n \t/**\n \t * Set the given <code>implementationId</code> as this implementation's unique id", "fixed": " \t * @should return null if no implementation id is defined yet\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)\n\tpublic ImplementationId getImplementationId();\n \t/**\n \t * Set the given <code>implementationId</code> as this implementation's unique id", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "ea98386dfd18da047c877a2320cfdcf15df2ea06", "projectName": "facebook.presto", "bugType": "Change Modifier", "problem": "         constructor.ret();\n     }\n    private void generateGetChannelCountMethod(ClassDefinition classDefinition, List<FieldDefinition> channelFields)\n     {\n         classDefinition.declareMethod(\n                 a(PUBLIC),", "fixed": "         constructor.ret();\n     }\n    private static void generateGetChannelCountMethod(ClassDefinition classDefinition, List<FieldDefinition> channelFields)\n     {\n         classDefinition.declareMethod(\n                 a(PUBLIC),", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "5a7c8dcb683515f0fe6b3de6c18e78c749f3729a", "projectName": "apache.hbase", "bugType": "Change Numeric Literal", "problem": "     private static final String MOVE_COST_KEY = \"hbase.master.balancer.stochastic.moveCost\";\n     private static final String MAX_MOVES_PERCENT_KEY =\n         \"hbase.master.balancer.stochastic.maxMovePercent\";\n    private static final float DEFAULT_MOVE_COST = 100;\n     private static final int DEFAULT_MAX_MOVES = 600;\n     private static final float DEFAULT_MAX_MOVE_PERCENT = 0.25f;", "fixed": "     private static final String MOVE_COST_KEY = \"hbase.master.balancer.stochastic.moveCost\";\n     private static final String MAX_MOVES_PERCENT_KEY =\n         \"hbase.master.balancer.stochastic.maxMovePercent\";\n    private static final float DEFAULT_MOVE_COST = 7;\n     private static final int DEFAULT_MAX_MOVES = 600;\n     private static final float DEFAULT_MAX_MOVE_PERCENT = 0.25f;", "sourceBeforeFix": "DEFAULT_MOVE_COST=100", "sourceAfterFix": "DEFAULT_MOVE_COST=7"}
{"fixCommitSHA1": "f43cca9e4e3ea39ccf02fc3743be77ae4d7b80ab", "projectName": "pardom.ActiveAndroid", "bugType": "Change Identifier Used", "problem": " \t\t\t\t}\n \t\t\t\telse if (ReflectionUtils.isTypeSerializer(discoveredClass)) {\n \t\t\t\t\tTypeSerializer typeSerializer = (TypeSerializer) discoveredClass.newInstance();\n\t\t\t\t\tmTypeSerializers.put(typeSerializer.getClass(), typeSerializer);\n \t\t\t\t}\n \t\t\t}\n \t\t\tcatch (ClassNotFoundException e) {", "fixed": " \t\t\t\t}\n \t\t\t\telse if (ReflectionUtils.isTypeSerializer(discoveredClass)) {\n \t\t\t\t\tTypeSerializer typeSerializer = (TypeSerializer) discoveredClass.newInstance();\n\t\t\t\t\tmTypeSerializers.put(typeSerializer.getDeserializedType(), typeSerializer);\n \t\t\t\t}\n \t\t\t}\n \t\t\tcatch (ClassNotFoundException e) {", "sourceBeforeFix": "typeSerializer.getClass()", "sourceAfterFix": "typeSerializer.getDeserializedType()"}
{"fixCommitSHA1": "81a287652365a2b0d8e656e61d6d93f668fac845", "projectName": "apache.storm", "bugType": "Wrong Function Name", "problem": "     public static File getCsvLogDir(Map stormConf) {\n         String csvMetricsLogDirectory = Utils.getString(stormConf.get(Config.STORM_DAEMON_METRICS_REPORTER_CSV_LOG_DIR), null);\n         if (csvMetricsLogDirectory == null) {\n            csvMetricsLogDirectory = ConfigUtils.absoluteHealthCheckDir(stormConf);\n             csvMetricsLogDirectory = csvMetricsLogDirectory + ConfigUtils.FILE_SEPARATOR + \"csvmetrics\";\n         }\n         File csvMetricsDir = new File(csvMetricsLogDirectory);", "fixed": "     public static File getCsvLogDir(Map stormConf) {\n         String csvMetricsLogDirectory = Utils.getString(stormConf.get(Config.STORM_DAEMON_METRICS_REPORTER_CSV_LOG_DIR), null);\n         if (csvMetricsLogDirectory == null) {\n            csvMetricsLogDirectory = ConfigUtils.absoluteStormLocalDir(stormConf);\n             csvMetricsLogDirectory = csvMetricsLogDirectory + ConfigUtils.FILE_SEPARATOR + \"csvmetrics\";\n         }\n         File csvMetricsDir = new File(csvMetricsLogDirectory);", "sourceBeforeFix": "ConfigUtils.absoluteHealthCheckDir(stormConf)", "sourceAfterFix": "ConfigUtils.absoluteStormLocalDir(stormConf)"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "                 } else {\n                     statistics.increaseCacheHits(1);\n                 }\n                statistics.addGetTimeNano(System.nanoTime() - start);\n             }\n         }\n     }", "fixed": "                 } else {\n                     statistics.increaseCacheHits(1);\n                 }\n                statistics.addGetTimeNanos(System.nanoTime() - start);\n             }\n         }\n     }", "sourceBeforeFix": "statistics.addPutTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addPutTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  private final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": " };\n   \n  private final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler", "fixed": " };\n   \n  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15865, value = \"Invalid content declaration\")\n     String invalidContentDeclaration();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10865, value = \"Invalid content declaration\")\n     String invalidContentDeclaration();\n     /**", "sourceBeforeFix": "id=15838", "sourceAfterFix": "id=10838"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "2230a91829f39b72973e6fecf275d9c664911ca0", "projectName": "clojure.clojure", "bugType": "Change Identifier Used", "problem": " \tcatch(Throwable e)\n \t\t{\n \t\tif(!(e instanceof CompilerException))\n\t\t\tthrow new CompilerException((String) SOURCE.deref(), (Integer) LINE.deref(), e);\n \t\telse\n \t\t\tthrow (CompilerException) e;\n \t\t}", "fixed": " \tcatch(Throwable e)\n \t\t{\n \t\tif(!(e instanceof CompilerException))\n\t\t\tthrow new CompilerException((String) SOURCE_PATH.deref(), (Integer) LINE.deref(), e);\n \t\telse\n \t\t\tthrow (CompilerException) e;\n \t\t}", "sourceBeforeFix": "SOURCE.deref()", "sourceAfterFix": "SOURCE_PATH.deref()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  private final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "359ce65a7b6ec7725d4fea3aca1a299cd2b7f7ba", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "      *            The method definition ast.\n      * @return The start column position of the method.\n      */\n    private int getMethodDefLineStart(DetailAST mainAst) {\n         int lineStart = mainAst.findFirstToken(TokenTypes.IDENT).getLineNo();", "fixed": "      *            The method definition ast.\n      * @return The start column position of the method.\n      */\n    private static int getMethodDefLineStart(DetailAST mainAst) {\n         int lineStart = mainAst.findFirstToken(TokenTypes.IDENT).getLineNo();", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform2iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toIntBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform3f (int location, float x, float y, float z) {\r", "fixed": " \t}\r\n \tpublic void glUniform2iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform2iv(location, v);\r\n \t}\r\n \tpublic void glUniform2iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform2iv(location, toIntBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform3f (int location, float x, float y, float z) {\r", "sourceBeforeFix": "GL20.glUniform4(location,v)", "sourceAfterFix": "GL20.glUniform4fv(location,v)"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStream<OUT> writeAsCsv(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsCsv<OUT> format, int batchSize, OUT endTuple) {\n\t\tDataStream<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByBatches<OUT>(\n \t\t\t\tpath, format, batchSize, endTuple), null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "fixed": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStreamSink<OUT> writeAsCsv(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsCsv<OUT> format, int batchSize, OUT endTuple) {\n\t\tDataStreamSink<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByBatches<OUT>(\n \t\t\t\tpath, format, batchSize, endTuple), null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15864, value = \"Error obtaining input stream from URL %s -- %s\")\n     String errorObtainingUrlStream(String url, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10864, value = \"Error obtaining input stream from URL %s -- %s\")\n     String errorObtainingUrlStream(String url, String message);\n     /**", "sourceBeforeFix": "id=15832", "sourceAfterFix": "id=10832"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface DockerEndpointBuilder\n             extends\n                 DockerEndpointConsumerBuilder, DockerEndpointProducerBuilder {\n         default AdvancedDockerEndpointBuilder advanced() {", "fixed": "     \n    public interface DockerEndpointBuilder\n             extends\n                 DockerEndpointConsumerBuilder, DockerEndpointProducerBuilder {\n         default AdvancedDockerEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedHazelcastReplicatedmapEndpointBuilder\n             extends\n                 AdvancedHazelcastReplicatedmapEndpointConsumerBuilder, AdvancedHazelcastReplicatedmapEndpointProducerBuilder {\n         default HazelcastReplicatedmapEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedHazelcastReplicatedmapEndpointBuilder\n             extends\n                 AdvancedHazelcastReplicatedmapEndpointConsumerBuilder, AdvancedHazelcastReplicatedmapEndpointProducerBuilder {\n         default HazelcastReplicatedmapEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "dff64bf31f0406905c321e100e29d3600cf618e3", "projectName": "apache.camel", "bugType": "Missing Throws Exception", "problem": "     private Main() {\n     }\n    public static void main(String[] args) {\n         org.apache.camel.spring.Main.main(args);\n     }\n }", "fixed": "     private Main() {\n     }\n    public static void main(String[] args) throws Exception {\n         org.apache.camel.spring.Main.main(args);\n     }\n }", "sourceBeforeFix": "9", "sourceAfterFix": "9"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "af6a4908c4dd38c0f935803ab6b8ed99387219f2", "projectName": "openhab.openhab", "bugType": "Wrong Function Name", "problem": " \t\t\t} else if (e instanceof TimeoutException) {\n \t\t\t\tlogger.debug(\"[{}]: Websocket timeout error\", connection.getHost());\n \t\t\t} else {\n\t\t\t\tlogger.error(\"[{}]: Websocket error: {}\", connection.getHost(), e.getMessage());\n \t\t\t}\n \t\t}", "fixed": " \t\t\t} else if (e instanceof TimeoutException) {\n \t\t\t\tlogger.debug(\"[{}]: Websocket timeout error\", connection.getHost());\n \t\t\t} else {\n\t\t\t\tlogger.debug(\"[{}]: Websocket error: {}\", connection.getHost(), e.getMessage());\n \t\t\t}\n \t\t}", "sourceBeforeFix": "logger.error(\"[{}]: Websocket error: {}\",connection.getHost(),e.getMessage())", "sourceAfterFix": "logger.debug(\"[{}]: Websocket error: {}\",connection.getHost(),e.getMessage())"}
{"fixCommitSHA1": "5755cf96d1689e1eda7dd2d7e03f1eff3bf5a074", "projectName": "perwendel.spark", "bugType": "Change Identifier Used", "problem": "      *\n      * @return Type of exception\n      */\n    public Class<? extends Exception> exceptionClass() {\n         return this.exceptionClass;\n     }", "fixed": "      *\n      * @return Type of exception\n      */\n    public Class<? extends T> exceptionClass() {\n         return this.exceptionClass;\n     }", "sourceBeforeFix": "? extends Exception", "sourceAfterFix": "? extends T"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "ade2ef1e23fecc7211fb450ca852bc94fe565e0e", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "         if (persist && !next.isPersisted()) {\n           next.setPersisted(true);\n           persisted.add(next);\n          String ufsPath = mMountTable.resolve(getPath(next)).getPath();\n           UnderFileSystem ufs = UnderFileSystem.get(ufsPath, MasterContext.getConf());\n           ufs.mkdirs(ufsPath, false);\n         }", "fixed": "         if (persist && !next.isPersisted()) {\n           next.setPersisted(true);\n           persisted.add(next);\n          String ufsPath = mMountTable.resolve(getPath(next)).toString();\n           UnderFileSystem ufs = UnderFileSystem.get(ufsPath, MasterContext.getConf());\n           ufs.mkdirs(ufsPath, false);\n         }", "sourceBeforeFix": "mMountTable.resolve(getPath(lastInode)).getPath()", "sourceAfterFix": "mMountTable.resolve(getPath(lastInode)).toString()"}
{"fixCommitSHA1": "fc80cf0f323b8f45dd7e80f5a4cc814ae6d691a7", "projectName": "druid-io.druid", "bugType": "Same Function More Args", "problem": "   public void testMoveException() throws Exception\n   {\n     MockStorageService mockS3Client = new MockStorageService();\n    S3DataSegmentMover mover = new S3DataSegmentMover(mockS3Client);\n     mover.move(\n         sourceSegment,", "fixed": "   public void testMoveException() throws Exception\n   {\n     MockStorageService mockS3Client = new MockStorageService();\n    S3DataSegmentMover mover = new S3DataSegmentMover(mockS3Client, new S3DataSegmentPusherConfig());\n     mover.move(\n         sourceSegment,", "sourceBeforeFix": "new S3DataSegmentMover(mockS3Client)", "sourceAfterFix": "new S3DataSegmentMover(mockS3Client,new S3DataSegmentPusherConfig())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "c4669fc5bb8b622188422e3e75e470077eb7d6d2", "projectName": "cucumber.cucumber-jvm", "bugType": "Same Function Swap Args", "problem": "         String someName = \"someName\";\n         RuntimeOptions options = new RuntimeOptions(new Properties(), \"-n\", someName);\n         Pattern actualPattern = (Pattern) options.filters.iterator().next();\n        assertEquals(actualPattern.pattern(), someName);\n     }\n     @Test", "fixed": "         String someName = \"someName\";\n         RuntimeOptions options = new RuntimeOptions(new Properties(), \"-n\", someName);\n         Pattern actualPattern = (Pattern) options.filters.iterator().next();\n        assertEquals(someName, actualPattern.pattern());\n     }\n     @Test", "sourceBeforeFix": "assertEquals(actualPattern.pattern(),someName)", "sourceAfterFix": "assertEquals(someName,actualPattern.pattern())"}
{"fixCommitSHA1": "83b9dd427535bce39be43a9e8224cdbc352d7427", "projectName": "square.okhttp", "bugType": "Change Modifier", "problem": "   private final CloseGuard closeGuard = CloseGuard.get();\n  public AndroidPlatform(Class<?> sslParametersClass, OptionalMethod<Socket> setUseSessionTickets,\n       OptionalMethod<Socket> setHostname, OptionalMethod<Socket> getAlpnSelectedProtocol,\n       OptionalMethod<Socket> setAlpnProtocols) {\n     this.sslParametersClass = sslParametersClass;", "fixed": "   private final CloseGuard closeGuard = CloseGuard.get();\n  AndroidPlatform(Class<?> sslParametersClass, OptionalMethod<Socket> setUseSessionTickets,\n       OptionalMethod<Socket> setHostname, OptionalMethod<Socket> getAlpnSelectedProtocol,\n       OptionalMethod<Socket> setAlpnProtocols) {\n     this.sslParametersClass = sslParametersClass;", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "01342c05f2391a5b2c39b44a8ec162b010126911", "projectName": "Alluxio.alluxio", "bugType": "Change Modifier", "problem": "   \n   private static final FsAction[] SVALS = values();\n  private FsAction(String s) {\n     mSymbol = s;\n   }", "fixed": "   \n   private static final FsAction[] SVALS = values();\n  FsAction(String s) {\n     mSymbol = s;\n   }", "sourceBeforeFix": "2", "sourceAfterFix": "0"}
{"fixCommitSHA1": "562622c839991c9fa82a9c73bdb1887a9edf8696", "projectName": "Alluxio.alluxio", "bugType": "Change Numeric Literal", "problem": "     long longBytesValue =\n         sDefaultConfiguration.getBytes(Constants.USER_BLOCK_REMOTE_READ_BUFFER_SIZE_BYTES);\n    Assert.assertEquals(Constants.MB * 8, longBytesValue);\n     longBytesValue = sDefaultConfiguration.getBytes(Constants.NETWORK_THRIFT_FRAME_SIZE_BYTES_MAX);\n     Assert.assertEquals(Constants.MB * 16, longBytesValue);", "fixed": "     long longBytesValue =\n         sDefaultConfiguration.getBytes(Constants.USER_BLOCK_REMOTE_READ_BUFFER_SIZE_BYTES);\n    Assert.assertEquals(Constants.KB * 4, longBytesValue);\n     longBytesValue = sDefaultConfiguration.getBytes(Constants.NETWORK_THRIFT_FRAME_SIZE_BYTES_MAX);\n     Assert.assertEquals(Constants.MB * 16, longBytesValue);", "sourceBeforeFix": "8 * Constants.MB", "sourceAfterFix": "4 * Constants.KB"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15869, value = \"Unknown %s %s\")\n     String unknown(String name, String value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10869, value = \"Unknown %s %s\")\n     String unknown(String name, String value);\n     /**", "sourceBeforeFix": "id=15846", "sourceAfterFix": "id=10846"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "46941b16a30e493238924701f938cbf3318eb355", "projectName": "Alluxio.alluxio", "bugType": "Same Function More Args", "problem": "    * @param manager a block metadata manager handle\n    */\n   private BlockStoreMeta(BlockMetadataManager manager, boolean shouldIncludeBlockIds) {\n    Preconditions.checkNotNull(manager);\n     for (StorageTier tier : manager.getTiers()) {\n       Long capacityBytes = mCapacityBytesOnTiers.get(tier.getTierAlias());\n       Long usedBytes = mUsedBytesOnTiers.get(tier.getTierAlias());", "fixed": "    * @param manager a block metadata manager handle\n    */\n   private BlockStoreMeta(BlockMetadataManager manager, boolean shouldIncludeBlockIds) {\n    Preconditions.checkNotNull(manager, \"manager\");\n     for (StorageTier tier : manager.getTiers()) {\n       Long capacityBytes = mCapacityBytesOnTiers.get(tier.getTierAlias());\n       Long usedBytes = mUsedBytesOnTiers.get(tier.getTierAlias());", "sourceBeforeFix": "Preconditions.checkNotNull(manager)", "sourceAfterFix": "Preconditions.checkNotNull(manager,\"manager\")"}
{"fixCommitSHA1": "dd20434290eb6ae6dff133d70073e35a3998d362", "projectName": "Alluxio.alluxio", "bugType": "Same Function Less Args", "problem": "           mCurrentCacheStream.write(b, currentOffset, bytesRead);\n         } catch (IOException ioe) {\n           LOG.warn(\"Failed to write into TachyonStorage, the block \" + getCurrentBlockId()\n              + \" will not be in TachyonStorage\", ioe);\n           mShouldCacheCurrentBlock = false;\n         }\n       }", "fixed": "           mCurrentCacheStream.write(b, currentOffset, bytesRead);\n         } catch (IOException ioe) {\n           LOG.warn(\"Failed to write into TachyonStorage, the block \" + getCurrentBlockId()\n              + \" will not be in TachyonStorage\");\n           mShouldCacheCurrentBlock = false;\n         }\n       }", "sourceBeforeFix": "LOG.warn(\"Promotion of block \" + blockId + \" failed.\",ioe)", "sourceAfterFix": "LOG.warn(\"Promotion of block \" + blockId + \" failed.\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "1d577b1b8bd3f51bcf8d9d89bb4598a28020af07", "projectName": "netty.netty", "bugType": "Wrong Function Name", "problem": "                 new GenericFutureListener<Future<Channel>>() {\n             @Override\n             public void operationComplete(Future<Channel> future) throws Exception {\n                ctx.write(\n                         \"Welcome to \" + InetAddress.getLocalHost().getHostName() +\n                         \" secure chat service!\\n\");\n                ctx.write(\n                         \"Your session is protected by \" +\n                         ctx.pipeline().get(SslHandler.class).engine().getSession().getCipherSuite() +\n                         \" cipher suite.\\n\");", "fixed": "                 new GenericFutureListener<Future<Channel>>() {\n             @Override\n             public void operationComplete(Future<Channel> future) throws Exception {\n                ctx.writeAndFlush(\n                         \"Welcome to \" + InetAddress.getLocalHost().getHostName() +\n                         \" secure chat service!\\n\");\n                ctx.writeAndFlush(\n                         \"Your session is protected by \" +\n                         ctx.pipeline().get(SslHandler.class).engine().getSession().getCipherSuite() +\n                         \" cipher suite.\\n\");", "sourceBeforeFix": "c.write(\"[\" + ctx.channel().remoteAddress() + \"] \"+ msg+ '\\n')", "sourceAfterFix": "c.writeAndFlush(\"[\" + ctx.channel().remoteAddress() + \"] \"+ msg+ '\\n')"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15838, value = \"Unexplained failure\")\n     String unexplainedFailure();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10838, value = \"Unexplained failure\")\n     String unexplainedFailure();\n     /**", "sourceBeforeFix": "id=15871", "sourceAfterFix": "id=10871"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "fixed": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2fv(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2fv(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "sourceBeforeFix": "GL20.glUniform3(location,toFloatBuffer(v,offset,count * 3))", "sourceAfterFix": "GL20.glUniform3fv(location,toFloatBuffer(v,offset,count * 3))"}
{"fixCommitSHA1": "d0c64987a9cb694631a3e5bc77b669f49f93a30e", "projectName": "openhab.openhab", "bugType": "Change Binary Operator", "problem": "                         }\n                     } else {\nNodeList nlDataOutNodes = sm.getSOAPPart().getElementsByTagName(mapping.getReadDataOutName());\n                        if (nlDataOutNodes != null & nlDataOutNodes.getLength() > 0) {\n                             String url = nlDataOutNodes.item(0).getTextContent();", "fixed": "                         }\n                     } else {\nNodeList nlDataOutNodes = sm.getSOAPPart().getElementsByTagName(mapping.getReadDataOutName());\n                        if (nlDataOutNodes != null && nlDataOutNodes.getLength() > 0) {\n                             String url = nlDataOutNodes.item(0).getTextContent();", "sourceBeforeFix": "nlDataOutNodes != null & nlDataOutNodes.getLength() > 0", "sourceAfterFix": "nlDataOutNodes != null && nlDataOutNodes.getLength() > 0"}
{"fixCommitSHA1": "4665dcf9ab41c3c61cd42aad296ebfe518bfa003", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\n \tpublic void glDrawArrays (int mode, int first, int count) {\n\t\tGL.glDrawArraysEXT(mode, first, count);\n \t}\n \tpublic void glDrawElements (int mode, int count, int type, Buffer indices) {", "fixed": " \t}\n \tpublic void glDrawArrays (int mode, int first, int count) {\n\t\tGL.glDrawArrays(mode, first, count);\n \t}\n \tpublic void glDrawElements (int mode, int count, int type, Buffer indices) {", "sourceBeforeFix": "GL.glCopyTexImage2DEXT(target,level,internalformat,x,y,width,height,border)", "sourceAfterFix": "GL.glCopyTexImage2D(target,level,internalformat,x,y,width,height,border)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15867, value = \"Cannot use %s with the same value for parameters %s and %s. \" +\n             \"Use %s to redeploy the same content or %s to replace content with a new version with the same name.\")\n     String cannotUseSameValueForParameters(String opName, String param1, String param2, String redeployOpName, String replaceOpName);", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10867, value = \"Cannot use %s with the same value for parameters %s and %s. \" +\n             \"Use %s to redeploy the same content or %s to replace content with a new version with the same name.\")\n     String cannotUseSameValueForParameters(String opName, String param1, String param2, String redeployOpName, String replaceOpName);", "sourceBeforeFix": "id=15861", "sourceAfterFix": "id=10861"}
{"fixCommitSHA1": "5c2293d770a717694d0cedf4ebf9c9b2223571d0", "projectName": "alibaba.dubbo", "bugType": "Same Function Less Args", "problem": "     }\n     private void initDic() {\n        dic.buildRouterChain(invokers);\n     }\n     @Test()", "fixed": "     }\n     private void initDic() {\n        dic.buildRouterChain();\n     }\n     @Test()", "sourceBeforeFix": "dic.buildRouterChain(invokers)", "sourceAfterFix": "dic.buildRouterChain()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "9467bef8ea9a62658b32dd43a76f4f98087d1986", "projectName": "apache.hadoop", "bugType": "Change Unary Operator\t", "problem": "         command = new DeleteCommand(keyName);\n         if (\"--help\".equals(keyName)) {\n           printKeyShellUsage();\n          return -1;\n         }\n       } else if (args[i].equals(\"roll\")) {\n         String keyName = \"--help\";", "fixed": "         command = new DeleteCommand(keyName);\n         if (\"--help\".equals(keyName)) {\n           printKeyShellUsage();\n          return 1;\n         }\n       } else if (args[i].equals(\"roll\")) {\n         String keyName = \"--help\";", "sourceBeforeFix": "-1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "82f6bf69cf547d15d83338f69fcebfd83fa2f461", "projectName": "Alluxio.alluxio", "bugType": "Same Function More Args", "problem": "       mLockId = result.getLockId();\n     } catch (BlockDoesNotExistException e) {\n       mCloser.close();\n      throw new IOException(ExceptionMessage.BLOCK_UNAVAILABLE.getMessage(blockId));\n     } catch (AlluxioException e) {\n       mCloser.close();\n       throw new IOException(e);", "fixed": "       mLockId = result.getLockId();\n     } catch (BlockDoesNotExistException e) {\n       mCloser.close();\n      throw new IOException(ExceptionMessage.BLOCK_UNAVAILABLE.getMessage(blockId), e);\n     } catch (AlluxioException e) {\n       mCloser.close();\n       throw new IOException(e);", "sourceBeforeFix": "new IOException(ExceptionMessage.BLOCK_UNAVAILABLE.getMessage(blockId))", "sourceAfterFix": "new IOException(ExceptionMessage.BLOCK_UNAVAILABLE.getMessage(blockId),e)"}
{"fixCommitSHA1": "9e8bdc67b5157edca13595d9e36f5b62567a9c2e", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "         final URI file = RestDslGeneratorTest.class.getResource(\"/SwaggerPetstoreXml.txt\").toURI();\n         final String expectedContent = new String(Files.readAllBytes(Paths.get(file)), StandardCharsets.UTF_8);\n        assertThat(xml).isEqualTo(expectedContent);\n     }", "fixed": "         final URI file = RestDslGeneratorTest.class.getResource(\"/SwaggerPetstoreXml.txt\").toURI();\n         final String expectedContent = new String(Files.readAllBytes(Paths.get(file)), StandardCharsets.UTF_8);\n        assertThat(xml).isEqualToIgnoringWhitespace(expectedContent);\n     }", "sourceBeforeFix": "assertThat(xml).isEqualTo(expectedContent)", "sourceAfterFix": "assertThat(xml).isEqualToIgnoringWhitespace(expectedContent)"}
{"fixCommitSHA1": "72754c27b271416d3c8ee7497fa7f88abff393f8", "projectName": "spring-projects.spring-boot", "bugType": "Change Modifier", "problem": " \t * @param properties the batch properties\n \t * @param dataSource the underlying data source\n \t */\n\tBasicBatchConfigurer(BatchProperties properties, DataSource dataSource) {\n \t\tthis(properties, dataSource, null);\n \t}", "fixed": " \t * @param properties the batch properties\n \t * @param dataSource the underlying data source\n \t */\n\tprotected BasicBatchConfigurer(BatchProperties properties, DataSource dataSource) {\n \t\tthis(properties, dataSource, null);\n \t}", "sourceBeforeFix": "0", "sourceAfterFix": "4"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_kr_2() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub1445\uc6d406\uc77c\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_kr_2() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub1445\uc6d406\uc77c\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "486b290863a66641b0ec30dbf2d9e349733cae44", "projectName": "apache.hbase", "bugType": "Wrong Function Name", "problem": "    */\n   public void compact(final String tableNameOrRegionName)\n   throws IOException, InterruptedException {\n    compact(Bytes.toBytesBinary(tableNameOrRegionName));\n   }\n   /**", "fixed": "    */\n   public void compact(final String tableNameOrRegionName)\n   throws IOException, InterruptedException {\n    compact(Bytes.toBytes(tableNameOrRegionName));\n   }\n   /**", "sourceBeforeFix": "Bytes.toBytesBinary(tableNameOrRegionName)", "sourceAfterFix": "Bytes.toBytes(tableNameOrRegionName)"}
{"fixCommitSHA1": "7012976421d9e593d8b276697b2fbbc9328b6fa5", "projectName": "libgdx.libgdx", "bugType": "Same Function More Args", "problem": " \t\n \tpublic Container<T> maxSize (float width, float height) {\n\t\tmaxSize(new Fixed(width));\n \t\treturn this;\n \t}", "fixed": " \t\n \tpublic Container<T> maxSize (float width, float height) {\n\t\tmaxSize(new Fixed(width), new Fixed(height));\n \t\treturn this;\n \t}", "sourceBeforeFix": "prefSize(new Fixed(width))", "sourceAfterFix": "prefSize(new Fixed(width),new Fixed(height))"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedSqsEndpointBuilder\n             extends\n                 AdvancedSqsEndpointConsumerBuilder, AdvancedSqsEndpointProducerBuilder {\n         default SqsEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedSqsEndpointBuilder\n             extends\n                 AdvancedSqsEndpointConsumerBuilder, AdvancedSqsEndpointProducerBuilder {\n         default SqsEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "46941b16a30e493238924701f938cbf3318eb355", "projectName": "Alluxio.alluxio", "bugType": "Same Function More Args", "problem": "    * @return the number of blocks\n    */\n   public int getNumberOfBlocks() {\n    Preconditions.checkNotNull(mBlockIdsOnTiers);\n     int numberOfBlocks = 0;\n     for (List<Long> blockIds : mBlockIdsOnTiers.values()) {", "fixed": "    * @return the number of blocks\n    */\n   public int getNumberOfBlocks() {\n    Preconditions.checkNotNull(mBlockIdsOnTiers, \"mBlockIdsOnTiers\");\n     int numberOfBlocks = 0;\n     for (List<Long> blockIds : mBlockIdsOnTiers.values()) {", "sourceBeforeFix": "Preconditions.checkNotNull(mBlockIdsOnTiers)", "sourceAfterFix": "Preconditions.checkNotNull(mBlockIdsOnTiers,\"mBlockIdsOnTiers\")"}
{"fixCommitSHA1": "3f9dab33958c11c4928965686e7ce3f0cb3e726a", "projectName": "EnterpriseQualityCoding.FizzBuzzEnterpriseEdition", "bugType": "Change Identifier Used", "problem": " \tprivate LoopContextStateRetrieval myRetrievalObjectToAdapt;\n\tpublic LoopContextStateRetrievalToSingleStepOutputGenerationAdapter(LoopContextStepRetrieval retrievalToAdapt) {\n \t\tmyRetrievalObjectToAdapt = retrievalToAdapt;\n \t}", "fixed": " \tprivate LoopContextStateRetrieval myRetrievalObjectToAdapt;\n\tpublic LoopContextStateRetrievalToSingleStepOutputGenerationAdapter(LoopContextStateRetrieval retrievalToAdapt) {\n \t\tmyRetrievalObjectToAdapt = retrievalToAdapt;\n \t}", "sourceBeforeFix": "LoopContextStepRetrieval retrievalToAdapt", "sourceAfterFix": "LoopContextStateRetrieval retrievalToAdapt"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 15830, value = \"Registration of remote hosts is not supported on slave host controllers\")\n     String slaveControllerCannotAcceptOtherSlaves();\n     /**", "fixed": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 10830, value = \"Registration of remote hosts is not supported on slave host controllers\")\n     String slaveControllerCannotAcceptOtherSlaves();\n     /**", "sourceBeforeFix": "id=15852", "sourceAfterFix": "id=10852"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_1() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(741);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {Console.WriteLine($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "fixed": " \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_1() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(740);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {Console.WriteLine($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "sourceBeforeFix": "new StringBuilder(741)", "sourceAfterFix": "new StringBuilder(740)"}
{"fixCommitSHA1": "84921d1da74dec0999dda7aff2845d0642e16c11", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Change Identifier Used", "problem": "  */\n public class Realm {\n    private static final String NC = \"00000001\";\n     private final String principal;\n     private final String password;", "fixed": "  */\n public class Realm {\n    private static final String DEFAULT_NC = \"00000001\";\n     private final String principal;\n     private final String password;", "sourceBeforeFix": "sb.append(NC)", "sourceAfterFix": "sb.append(nc)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "f60f4dbdad22bbd4ef94ce1b01eb63f9adeb7659", "projectName": "alibaba.druid", "bugType": "Delete Throws Exception", "problem": "         this.targetBeanType = targetClass;\n     }\n    public void setApplicationContext(ApplicationContext context) throws BeansException {\n         this.context = context;\n     }", "fixed": "         this.targetBeanType = targetClass;\n     }\n    public void setApplicationContext(ApplicationContext context) {\n         this.context = context;\n     }", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "de0c4d4c37435ce0c7287cd6846dde492ca1c51c", "projectName": "libgdx.libgdx", "bugType": "Change Binary Operator", "problem": " \t\t\t\t}\n \t\t\t}\n\t\t\tif (!((min1 < min2 && max1 > min2) || (min2 < min1 && max2 > min1))) {\n \t\t\t\treturn false;\n \t\t\t} else {\n \t\t\t\tfloat o = Math.min(max1, max2) - Math.max(min1, min2);", "fixed": " \t\t\t\t}\n \t\t\t}\n\t\t\tif (!((min1 <= min2 && max1 >= min2) || (min2 <= min1 && max2 >= min1))) {\n \t\t\t\treturn false;\n \t\t\t} else {\n \t\t\t\tfloat o = Math.min(max1, max2) - Math.max(min1, min2);", "sourceBeforeFix": "min1 < min2", "sourceAfterFix": "min1 <= min2"}
{"fixCommitSHA1": "a35860eadb4400f069e306ccd76f1a19ecfb3ba1", "projectName": "google.guava", "bugType": "Change Identifier Used", "problem": "   Set<E> edgesConnecting(N node);\n   \n  N oppositeNode(Object edge);\n   /**\n    * Remove {@code edge} from the set of incoming edges. Returns the former predecessor node.", "fixed": "   Set<E> edgesConnecting(N node);\n   \n  N adjacentNode(E edge);\n   /**\n    * Remove {@code edge} from the set of incoming edges. Returns the former predecessor node.", "sourceBeforeFix": "Object edge", "sourceAfterFix": "E edge"}
{"fixCommitSHA1": "6618cef776cf1c9ce67ff8ee461412110ca5ada7", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t\t\t\ttaskManagerQueryServiceGatewaysFuture.whenCompleteAsync(\n \t\t\t\t\t(Collection<Tuple2<ResourceID, String>> queryServiceGateways, Throwable throwable) -> {\n \t\t\t\t\t\tif (throwable != null) {\n\t\t\t\t\t\t\tLOG.warn(\"Requesting TaskManager's path for query services failed.\", throwable);\n \t\t\t\t\t\t} else {\n \t\t\t\t\t\t\tList<String> taskManagersToRetain = queryServiceGateways\n \t\t\t\t\t\t\t\t.stream()", "fixed": " \t\t\t\ttaskManagerQueryServiceGatewaysFuture.whenCompleteAsync(\n \t\t\t\t\t(Collection<Tuple2<ResourceID, String>> queryServiceGateways, Throwable throwable) -> {\n \t\t\t\t\t\tif (throwable != null) {\n\t\t\t\t\t\t\tLOG.debug(\"Requesting TaskManager's path for query services failed.\", throwable);\n \t\t\t\t\t\t} else {\n \t\t\t\t\t\t\tList<String> taskManagersToRetain = queryServiceGateways\n \t\t\t\t\t\t\t\t.stream()", "sourceBeforeFix": "LOG.warn(\"Requesting TaskManager's path for query services failed.\",throwable)", "sourceAfterFix": "LOG.debug(\"Requesting TaskManager's path for query services failed.\",throwable)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "3757a700a89638e5747d966bdaa8266b62c974c8", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "  */\n @GwtCompatible(emulated = true)\n public class BaseEncodingTest extends TestCase {\n  public void assertEquals(byte[] expected, byte[] actual) {\n     assertEquals(expected.length, actual.length);\n     for (int i = 0; i < expected.length; i++) {\n       assertEquals(expected[i], actual[i]);", "fixed": "  */\n @GwtCompatible(emulated = true)\n public class BaseEncodingTest extends TestCase {\n  public static void assertEquals(byte[] expected, byte[] actual) {\n     assertEquals(expected.length, actual.length);\n     for (int i = 0; i < expected.length; i++) {\n       assertEquals(expected[i], actual[i]);", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "89ed905358dd09d005398028198cc388b9b59a94", "projectName": "square.javapoet", "bugType": "Change Identifier Used", "problem": "     javaWriter.emitPackage(\"com.squareup\");\n     javaWriter.beginType(\"com.squareup.Foo\", \"class\", 0);\n     javaWriter.beginMethod(\"int\", \"foo\", 0, \"java.lang.String\", \"s\");\n    javaWriter.emitSingleLineCOmment(\"foo\");\n     javaWriter.emitStatement(\"int j = s.length() + %s\", 13);\n     javaWriter.endMethod();\n     javaWriter.endType();", "fixed": "     javaWriter.emitPackage(\"com.squareup\");\n     javaWriter.beginType(\"com.squareup.Foo\", \"class\", 0);\n     javaWriter.beginMethod(\"int\", \"foo\", 0, \"java.lang.String\", \"s\");\n    javaWriter.emitSingleLineComment(\"foo\");\n     javaWriter.emitStatement(\"int j = s.length() + %s\", 13);\n     javaWriter.endMethod();\n     javaWriter.endType();", "sourceBeforeFix": "javaWriter.emitSingleLineCOmment(\"foo\")", "sourceAfterFix": "javaWriter.emitSingleLineComment(\"foo\")"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface TwilioEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedTwilioEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface TwilioEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedTwilioEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Pet.class, responseContainer = \"List\"),\n         @ApiResponse(code = 400, message = \"Invalid status value\", response = Void.class, responseContainer = \"List\") })\n    List<List<Pet>> findPetsByStatus(@QueryParam(\"status\") @NotNull   @ApiParam(\"Status values that need to be considered for filter\")  List<String> status);\n     @GET\n     @Path(\"/findByTags\")", "fixed": "     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Pet.class, responseContainer = \"List\"),\n         @ApiResponse(code = 400, message = \"Invalid status value\", response = Void.class, responseContainer = \"List\") })\n    List<Pet> findPetsByStatus(@QueryParam(\"status\") @NotNull   @ApiParam(\"Status values that need to be considered for filter\")  List<String> status) throws Exception;\n     @GET\n     @Path(\"/findByTags\")", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "bbb28b514aadd4fc649dd0b7a47c6ece4d629fa7", "projectName": "apache.camel", "bugType": "Less Specific If", "problem": "                                        if (body.endsWith(\"3\") || body.endsWith(\"7\")) {\n                                             log.info(\"5th message received.  Rolling back.\");\n                                             exchange.getOut().setFault(true);\n                                             exchange.getOut().setBody(\"5th message received.  Rolling back.\");", "fixed": "                                        if (body.endsWith(\"3\") || body.endsWith(\"10\")) {\n                                             log.info(\"5th message received.  Rolling back.\");\n                                             exchange.getOut().setFault(true);\n                                             exchange.getOut().setBody(\"5th message received.  Rolling back.\");", "sourceBeforeFix": "body.endsWith(\"6\")", "sourceAfterFix": "body.endsWith(\"6\") || body.endsWith(\"10\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  private final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "44e117dacf6f8922df8e593fafbd87437ebd99aa", "projectName": "thinkaurelius.titan", "bugType": "Change Identifier Used", "problem": "     }\n     public void mutateMany(Map<StaticBuffer, KCVMutation> mutations, StoreTransaction txh) throws StorageException {\n        storeManager.mutateMany(ImmutableMap.of(columnFamily, mutations), txh);\n     }\n     @Override", "fixed": "     }\n     public void mutateMany(Map<StaticBuffer, KCVMutation> mutations, StoreTransaction txh) throws StorageException {\n        storeManager.mutateMany(ImmutableMap.of(storeName, mutations), txh);\n     }\n     @Override", "sourceBeforeFix": "ImmutableMap.of(columnFamily,mutations)", "sourceAfterFix": "ImmutableMap.of(storeName,mutations)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15836, value = SERVER_GROUP + \" expects one and only one child: %s\")\n     String serverGroupExpectsSingleChild(String rolloutPlan);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10836, value = SERVER_GROUP + \" expects one and only one child: %s\")\n     String serverGroupExpectsSingleChild(String rolloutPlan);\n     /**", "sourceBeforeFix": "id=15867", "sourceAfterFix": "id=10867"}
{"fixCommitSHA1": "a63faf44e1b103a49d25a15c720fc5940ae9fc07", "projectName": "square.retrofit", "bugType": "Change Identifier Used", "problem": "     assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n     Type mBodyGeneric = new TypeToken<Maybe<List<String>>>() {}.getType();\n    assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n     Type fBodyGeneric = new TypeToken<Flowable<List<String>>>() {}.getType();\n    assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n     Type oResponseClass = new TypeToken<Observable<Response<String>>>() {}.getType();", "fixed": "     assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n     Type mBodyGeneric = new TypeToken<Maybe<List<String>>>() {}.getType();\n    assertThat(factory.get(mBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n     Type fBodyGeneric = new TypeToken<Flowable<List<String>>>() {}.getType();\n    assertThat(factory.get(fBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n     Type oResponseClass = new TypeToken<Observable<Response<String>>>() {}.getType();", "sourceBeforeFix": "factory.get(sBodyWildcard,NO_ANNOTATIONS,retrofit)", "sourceAfterFix": "factory.get(fBodyWildcard,NO_ANNOTATIONS,retrofit)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e89837b42ece86ae3a0efc8ba272f550c98cd33c", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "      * @param ast DetailAST node.\n      * @return Column number if non-comment node exists, -1 otherwise.\n      */\n    private int findColumnNo(DetailAST ast) {\n         int resultNo = -1;\n         DetailAST node = ast;\n         while (node != null) {", "fixed": "      * @param ast DetailAST node.\n      * @return Column number if non-comment node exists, -1 otherwise.\n      */\n    private static int findColumnNo(DetailAST ast) {\n         int resultNo = -1;\n         DetailAST node = ast;\n         while (node != null) {", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should get property value given valid property name\n \t * @should get property in case insensitive way\n \t */\n\tpublic String getGlobalProperty(String propertyName) throws APIException;\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>", "fixed": " \t * @should get property value given valid property name\n \t * @should get property in case insensitive way\n \t */\n\tpublic String getGlobalProperty(String propertyName);\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "3222ef67df50f7655666270cbee52282a7de974c", "projectName": "neo4j.neo4j", "bugType": "Change Identifier Used", "problem": "     }\n     @DELETE\n    @Path(PATH_NODE_INDEX_ID)\n     public Response deleteFromRelationshipIndex( @PathParam(\"indexName\") String indexName,\n                                                  @PathParam(\"key\") String key, @PathParam(\"value\") String value,\n                                                  @PathParam(\"id\") long id )", "fixed": "     }\n     @DELETE\n    @Path(PATH_RELATIONSHIP_INDEX_ID)\n     public Response deleteFromRelationshipIndex( @PathParam(\"indexName\") String indexName,\n                                                  @PathParam(\"key\") String key, @PathParam(\"value\") String value,\n                                                  @PathParam(\"id\") long id )", "sourceBeforeFix": "@Path(PATH_NODE_INDEX_ID)", "sourceAfterFix": "@Path(PATH_RELATIONSHIP_INDEX_ID)"}
{"fixCommitSHA1": "c5b57e3099abcd8d8fd222c327ec52159422e6d9", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "             selectedKeysField.set(selector, set);\n             publicSelectedKeysField.set(selector, set);\n            logger.info(\"Optimized Selector: \" + selector.getClass().getName());\n             return set;\n         } catch (Throwable t) {", "fixed": "             selectedKeysField.set(selector, set);\n             publicSelectedKeysField.set(selector, set);\n            logger.finest(\"Optimized Selector: \" + selector.getClass().getName());\n             return set;\n         } catch (Throwable t) {", "sourceBeforeFix": "logger.info(\"Optimized Selector: \" + selector.getClass().getName())", "sourceAfterFix": "logger.finest(\"Optimized Selector: \" + selector.getClass().getName())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "           \"functions are set.\");\n   \n  private final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "           \"functions are set.\");\n   \n  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "14ceda3b0cb8b2055a05c6c6984aa785b8864563", "projectName": "brettwooldridge.HikariCP", "bugType": "Change Identifier Used", "problem": "                executeSql(connection, config.getConnectionTestQuery(), false, isIsolateInternalQueries && !isAutoCommit);\n             }\n             catch (Throwable e) {\n               LOGGER.warn(\"{} - Failed to execute connection test query. ({})\", poolName, e.getMessage());\n                throw e;\n             }\n          }", "fixed": "                executeSql(connection, config.getConnectionTestQuery(), false, isIsolateInternalQueries && !isAutoCommit);\n             }\n             catch (Throwable e) {\n               LOGGER.error(\"{} - Failed to execute connection test query. ({})\", poolName, e.getMessage());\n                throw e;\n             }\n          }", "sourceBeforeFix": "LOGGER.warn(\"{} - Failed to execute connection test query. ({})\",poolName,e.getMessage())", "sourceAfterFix": "LOGGER.error(\"{} - Failed to execute connection test query. ({})\",poolName,e.getMessage())"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n            statistics.addRemoveTimeNano(System.nanoTime() - start);\n             if (hitCount == 1) {\n                 statistics.increaseCacheHits(hitCount);\n             } else {", "fixed": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n            statistics.addRemoveTimeNanos(System.nanoTime() - start);\n             if (hitCount == 1) {\n                 statistics.increaseCacheHits(hitCount);\n             } else {", "sourceBeforeFix": "statistics.addGetTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addGetTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "486b290863a66641b0ec30dbf2d9e349733cae44", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "    */\n   public void split(final String tableNameOrRegionName)\n   throws IOException, InterruptedException {\n    split(Bytes.toBytesBinary(tableNameOrRegionName));\n   }\n   /**", "fixed": "    */\n   public void split(final String tableNameOrRegionName)\n   throws IOException, InterruptedException {\n    split(Bytes.toBytes(tableNameOrRegionName));\n   }\n   /**", "sourceBeforeFix": "Bytes.toBytesBinary(regionname)", "sourceAfterFix": "Bytes.toBytes(regionname)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsText(String path, int batchSize) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), batchSize, null);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsText(String path, int batchSize) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), batchSize, null);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "1037541f3c6d60ce2994c1130481f1af6a5df4b7", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "     public void testCacheGet() throws Exception {\n         final Cache<Object, Object> cache = getTestCache();\n         final Integer key = 1;\n        final Integer val = 1;\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n         mock.expectedMinimumMessageCount(1);\n         mock.expectedBodiesReceived(val);\n        mock.expectedHeaderReceived(CaffeineConstants.ACTION_HAS_RESULT, false);\n         mock.expectedHeaderReceived(CaffeineConstants.ACTION_SUCCEEDED, true);\nfluentTemplate().withHeader(CaffeineConstants.ACTION, CaffeineConstants.ACTION_GET).withHeader(CaffeineConstants.KEY, key).withBody(val).to(\"direct:", "fixed": "     public void testCacheGet() throws Exception {\n         final Cache<Object, Object> cache = getTestCache();\n         final Integer key = 1;\n        final Integer val = 2;\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n         mock.expectedMinimumMessageCount(1);\n         mock.expectedBodiesReceived(val);\n        mock.expectedHeaderReceived(CaffeineConstants.ACTION_HAS_RESULT, true);\n         mock.expectedHeaderReceived(CaffeineConstants.ACTION_SUCCEEDED, true);\nfluentTemplate().withHeader(CaffeineConstants.ACTION, CaffeineConstants.ACTION_GET).withHeader(CaffeineConstants.KEY, key).withBody(val).to(\"direct:", "sourceBeforeFix": "val=1", "sourceAfterFix": "val=2"}
{"fixCommitSHA1": "5d12b156e1150162ba3def263b2da14793304b4e", "projectName": "facebook.presto", "bugType": "Wrong Function Name", "problem": "         );\n        MaterializedResult expected = MaterializedResult.resultBuilder(taskContext.getSession(), concat(probeTypes, buildPages.getTypes()))\n                 .row(\"a\", \"a\")\n                 .row(\"a\", \"a\")\n                 .row(\"b\", \"b\")", "fixed": "         );\n        MaterializedResult expected = MaterializedResult.resultBuilder(taskContext.getSession(), concat(probeTypes, buildPages.getTypesWithoutHash()))\n                 .row(\"a\", \"a\")\n                 .row(\"a\", \"a\")\n                 .row(\"b\", \"b\")", "sourceBeforeFix": "buildPages.getTypes()", "sourceAfterFix": "buildPages.getTypesWithoutHash()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "b2aca92bf775691e85c770d2774139d422d3c06c", "projectName": "springside.springside4", "bugType": "Change Numeric Literal", "problem": " \t\tLog4jMockAppender appender = new Log4jMockAppender();\n \t\tappender.addToLogger(QuartzClusterableJob.class);\n\t\tThreads.sleep(2000);\n \t\tassertEquals(1, appender.getLogsCount());", "fixed": " \t\tLog4jMockAppender appender = new Log4jMockAppender();\n \t\tappender.addToLogger(QuartzClusterableJob.class);\n\t\tThreads.sleep(3000);\n \t\tassertEquals(1, appender.getLogsCount());", "sourceBeforeFix": "Threads.sleep(2000)", "sourceAfterFix": "Threads.sleep(3000)"}
{"fixCommitSHA1": "2c2823f038abf5a036107e48508eceaedb0aa845", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "     private Collection<InetSocketAddress> getConfigAddresses() {\n         final List<InetSocketAddress> socketAddresses = new LinkedList<InetSocketAddress>();\n        for (String address : getClientConfig().getAddressList()) {\n             socketAddresses.addAll(AddressHelper.getSocketAddresses(address));\n         }\n         Collections.shuffle(socketAddresses);", "fixed": "     private Collection<InetSocketAddress> getConfigAddresses() {\n         final List<InetSocketAddress> socketAddresses = new LinkedList<InetSocketAddress>();\n        for (String address : getClientConfig().getAddresses()) {\n             socketAddresses.addAll(AddressHelper.getSocketAddresses(address));\n         }\n         Collections.shuffle(socketAddresses);", "sourceBeforeFix": "getClientConfig().getAddressList()", "sourceAfterFix": "getClientConfig().getAddresses()"}
{"fixCommitSHA1": "8902a5fb409bc9b0238c7270552ee2597f6589e4", "projectName": "jersey.jersey", "bugType": "Same Function More Args", "problem": "         try {\n             doFilter((HttpServletRequest) servletRequest, (HttpServletResponse) servletResponse, filterChain);\n         } catch (ClassCastException e) {\n            throw new ServletException(\"non-HTTP request or response\");\n         }\n     }", "fixed": "         try {\n             doFilter((HttpServletRequest) servletRequest, (HttpServletResponse) servletResponse, filterChain);\n         } catch (ClassCastException e) {\n            throw new ServletException(\"non-HTTP request or response\", e);\n         }\n     }", "sourceBeforeFix": "new ServletException(\"non-HTTP request or response\")", "sourceAfterFix": "new ServletException(\"non-HTTP request or response\",e)"}
{"fixCommitSHA1": "d317837764c2af7a4998c3de9c52b68d2b8bc652", "projectName": "hazelcast.hazelcast", "bugType": "Change Binary Operator", "problem": "     public static String validateIndexAttribute(String attribute) {\n         checkHasText(attribute, \"Map index attribute must contain text\");\n         String keyPrefix = KEY_ATTRIBUTE_NAME.value();\n        if (attribute.startsWith(keyPrefix) & attribute.length() > keyPrefix.length()) {\nif (attribute.charAt(keyPrefix.length()) != '\nLOG.warning(KEY_ATTRIBUTE_NAME.value() + \" used without a following '\n                         + attribute + \"'. Don't you want to index a key?\");", "fixed": "     public static String validateIndexAttribute(String attribute) {\n         checkHasText(attribute, \"Map index attribute must contain text\");\n         String keyPrefix = KEY_ATTRIBUTE_NAME.value();\n        if (attribute.startsWith(keyPrefix) && attribute.length() > keyPrefix.length()) {\nif (attribute.charAt(keyPrefix.length()) != '\nLOG.warning(KEY_ATTRIBUTE_NAME.value() + \" used without a following '\n                         + attribute + \"'. Don't you want to index a key?\");", "sourceBeforeFix": "attribute.startsWith(keyPrefix) & attribute.length() > keyPrefix.length()", "sourceAfterFix": "attribute.startsWith(keyPrefix) && attribute.length() > keyPrefix.length()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15833, value = \"%s is missing %s: %s\")\n     String requiredChildIsMissing(String parent, String child, String parentSpec);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10833, value = \"%s is missing %s: %s\")\n     String requiredChildIsMissing(String parent, String child, String parentSpec);\n     /**", "sourceBeforeFix": "id=15836", "sourceAfterFix": "id=10836"}
{"fixCommitSHA1": "53e1975f9795693cfd3819b8462f1fffa5f1ddd1", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "     mTfs.setState(dir0, mUnsetPinned);\n     Assert.assertFalse(mTfs.getInfo(file).isPinned);\n    Assert.assertEquals(Sets.newHashSet(mFSMasterClient.getPinList()), Sets.<Integer>newHashSet());\n     mTfs.setState(file, mSetPinned);", "fixed": "     mTfs.setState(dir0, mUnsetPinned);\n     Assert.assertFalse(mTfs.getInfo(file).isPinned);\n    Assert.assertEquals(Sets.newHashSet(mFSMasterClient.getPinList()), Sets.<Long>newHashSet());\n     mTfs.setState(file, mSetPinned);", "sourceBeforeFix": "Sets.<Integer>newHashSet()", "sourceAfterFix": "Sets.<Long>newHashSet()"}
{"fixCommitSHA1": "8a4f25a6dcaae2b704bce5794e007131236cb0d7", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "                 String text = simple.evaluate(exchange, String.class);\n                Constructor<?> constructor = type.getDeclaredConstructor(String.class);\n                 cause = (Exception) constructor.newInstance(text);\n                 exchange.setException(cause);\n             } else if (cause == null && type != null) {", "fixed": "                 String text = simple.evaluate(exchange, String.class);\n                Constructor<?> constructor = type.getConstructor(String.class);\n                 cause = (Exception) constructor.newInstance(text);\n                 exchange.setException(cause);\n             } else if (cause == null && type != null) {", "sourceBeforeFix": "type.getDeclaredConstructor(String.class)", "sourceAfterFix": "type.getConstructor(String.class)"}
{"fixCommitSHA1": "af87fe0e2580cafb6b563688f119b3d40ae100f2", "projectName": "wildfly.wildfly", "bugType": "Wrong Function Name", "problem": "     }\n     private static ModelControllerClient createClient2() throws UnknownHostException {\n        return ModelControllerClient.Factory.create(InetAddress.getByName(TestSuiteEnvironment.getServerAddress()),\n                 TestSuiteEnvironment.getServerPort() + 300,\n                 Authentication.getCallbackHandler());\n     }", "fixed": "     }\n     private static ModelControllerClient createClient2() throws UnknownHostException {\n        return ModelControllerClient.Factory.create(InetAddress.getByName(TestSuiteEnvironment.getServerAddressNode1()),\n                 TestSuiteEnvironment.getServerPort() + 300,\n                 Authentication.getCallbackHandler());\n     }", "sourceBeforeFix": "TestSuiteEnvironment.getServerAddress()", "sourceAfterFix": "TestSuiteEnvironment.getServerAddressNode1()"}
{"fixCommitSHA1": "f3c4f2b3e22645f15032757e239cdcae6f2c5a37", "projectName": "apache.hadoop", "bugType": "Change Numeric Literal", "problem": "     new JobTokenSecretManager();\n   public static final String SHUFFLE_PORT_CONFIG_KEY = \"mapreduce.shuffle.port\";\n  public static final int DEFAULT_SHUFFLE_PORT = 11000;\n   public static final String SUFFLE_SSL_FILE_BUFFER_SIZE_KEY =\n     \"mapreduce.shuffle.ssl.file.buffer.size\";", "fixed": "     new JobTokenSecretManager();\n   public static final String SHUFFLE_PORT_CONFIG_KEY = \"mapreduce.shuffle.port\";\n  public static final int DEFAULT_SHUFFLE_PORT = 13562;\n   public static final String SUFFLE_SSL_FILE_BUFFER_SIZE_KEY =\n     \"mapreduce.shuffle.ssl.file.buffer.size\";", "sourceBeforeFix": "DEFAULT_SHUFFLE_PORT=11000", "sourceAfterFix": "DEFAULT_SHUFFLE_PORT=13562"}
{"fixCommitSHA1": "71ca4705df961c60993178197646aee30d3b6311", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "         return getNode(random.nextInt(cluster.size()));\n     }\n    public void terminateRandomNode(){\n         HazelcastInstance node = getRandomNode();\n        node.getLifecycleService().terminate();\n         cluster.remove(node);\n     }", "fixed": "         return getNode(random.nextInt(cluster.size()));\n     }\n    public void shutdownRandomNode(){\n         HazelcastInstance node = getRandomNode();\n        node.getLifecycleService().shutdown();\n         cluster.remove(node);\n     }", "sourceBeforeFix": "node.getLifecycleService().terminate()", "sourceAfterFix": "node.getLifecycleService().shutdown()"}
{"fixCommitSHA1": "0b302cf93edee0e2ab3c9998f380ede8e8ea7727", "projectName": "Atmosphere.atmosphere", "bugType": "Change Identifier Used", "problem": "                 }\n             }\n         }\n        return r;\n     }\n     private void notifyIdleListener() {", "fixed": "                 }\n             }\n         }\n        return this;\n     }\n     private void notifyIdleListener() {", "sourceBeforeFix": "return r; ", "sourceAfterFix": "return this; "}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "c60610c399277d16c94872e2279f861eb8ccd9b1", "projectName": "gephi.gephi", "bugType": "Change Operand ", "problem": "             }\n            final String containerSource = \"Stream \" + importer;\n             executor.execute(task, new Runnable() {\n                 public void run() {", "fixed": "             }\n            final String containerSource = \"Stream \" + importerName;\n             executor.execute(task, new Runnable() {\n                 public void run() {", "sourceBeforeFix": "\"Stream \" + importer", "sourceAfterFix": "\"Stream \" + importerName"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n* @see\n \t */\n\tpublic boolean equalToReference(T candidate);\n \t/**\n \t * This method compares the element that has been set as reference in this type accessor, to the", "fixed": " \t * \n* @see\n \t */\n\tpublic abstract boolean equalToReference(T candidate);\n \t/**\n \t * This method compares the element that has been set as reference in this type accessor, to the", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "713759b4f55e6bdccb6cd43ea0ad3e202c3440b2", "projectName": "google.closure-compiler", "bugType": "Same Function More Args", "problem": "         if (currentModuleName != null && n.matchesQualifiedName(currentModuleName)) {\n           t.report(n, REFERENCE_TO_MODULE_GLOBAL_NAME);\n         } else if (shortRequiredNamespaces.contains(n.getQualifiedName())) {\n          t.report(n, REFERENCE_TO_SHORT_IMPORT_BY_LONG_NAME);\n         }\n         break;\n       case Token.SCRIPT:", "fixed": "         if (currentModuleName != null && n.matchesQualifiedName(currentModuleName)) {\n           t.report(n, REFERENCE_TO_MODULE_GLOBAL_NAME);\n         } else if (shortRequiredNamespaces.contains(n.getQualifiedName())) {\n          t.report(n, REFERENCE_TO_SHORT_IMPORT_BY_LONG_NAME, n.getQualifiedName());\n         }\n         break;\n       case Token.SCRIPT:", "sourceBeforeFix": "t.report(n,REFERENCE_TO_SHORT_IMPORT_BY_LONG_NAME)", "sourceAfterFix": "t.report(n,REFERENCE_TO_SHORT_IMPORT_BY_LONG_NAME,n.getQualifiedName())"}
{"fixCommitSHA1": "14eade7f6e21e560a08de348504584cba5e94c94", "projectName": "wildfly.wildfly", "bugType": "Wrong Function Name", "problem": "     public static Archive<?> deployment1() {\n         WebArchive war = ShrinkWrap.create(WebArchive.class, \"distributable.war\");\n         war.addClass(SimpleServlet.class);\n        war.addAsWebInfResource(ClusteredWebTestCase.class.getPackage(), \"web.xml\");\n         war.addAsWebInfResource(EmptyAsset.INSTANCE, \"force-hashcode-change.txt\");\n         System.out.println(war.toString(true));\n         return war;", "fixed": "     public static Archive<?> deployment1() {\n         WebArchive war = ShrinkWrap.create(WebArchive.class, \"distributable.war\");\n         war.addClass(SimpleServlet.class);\n        war.setWebXML(ClusteredWebTestCase.class.getPackage(), \"web.xml\");\n         war.addAsWebInfResource(EmptyAsset.INSTANCE, \"force-hashcode-change.txt\");\n         System.out.println(war.toString(true));\n         return war;", "sourceBeforeFix": "war.addAsWebInfResource(ClusteredWebTestCase.class.getPackage(),\"web.xml\")", "sourceAfterFix": "war.setWebXML(ClusteredWebTestCase.class.getPackage(),\"web.xml\")"}
{"fixCommitSHA1": "83b9dd427535bce39be43a9e8224cdbc352d7427", "projectName": "square.okhttp", "bugType": "Change Modifier", "problem": "   static final class BasicTrustRootIndex extends TrustRootIndex {\n     private final Map<X500Principal, Set<X509Certificate>> subjectToCaCerts;\n    public BasicTrustRootIndex(X509Certificate... caCerts) {\n       subjectToCaCerts = new LinkedHashMap<>();\n       for (X509Certificate caCert : caCerts) {\n         X500Principal subject = caCert.getSubjectX500Principal();", "fixed": "   static final class BasicTrustRootIndex extends TrustRootIndex {\n     private final Map<X500Principal, Set<X509Certificate>> subjectToCaCerts;\n    BasicTrustRootIndex(X509Certificate... caCerts) {\n       subjectToCaCerts = new LinkedHashMap<>();\n       for (X509Certificate caCert : caCerts) {\n         X500Principal subject = caCert.getSubjectX500Principal();", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface EventEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedEventEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface EventEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedEventEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "fixed": "   }\n   \n  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15865, value = \"Invalid content declaration\")\n     String invalidContentDeclaration();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10865, value = \"Invalid content declaration\")\n     String invalidContentDeclaration();\n     /**", "sourceBeforeFix": "id=15835", "sourceAfterFix": "id=10835"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15840, value = \"Interrupted waiting for result from server %s\")\n     String interruptedAwaitingResultFromServer(ServerIdentity server);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10840, value = \"Interrupted waiting for result from server %s\")\n     String interruptedAwaitingResultFromServer(ServerIdentity server);\n     /**", "sourceBeforeFix": "id=15861", "sourceAfterFix": "id=10861"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "29c0169903314b08f810aedca121122017fa39ec", "projectName": "naver.pinpoint", "bugType": "Change Numeric Literal", "problem": "     private void parameterBind(CodeBuilder builder, Class<?>[] interceptorParamTypes) {\n         int i = 0;\n         int argNum = targetMethod.getParameterTypes().length;\n        int interceptorArgNum = interceptorParamTypes.length - 1;\n         int matchNum = Math.min(argNum, interceptorArgNum);\n         for (; i < matchNum; i++) {", "fixed": "     private void parameterBind(CodeBuilder builder, Class<?>[] interceptorParamTypes) {\n         int i = 0;\n         int argNum = targetMethod.getParameterTypes().length;\n        int interceptorArgNum = interceptorParamTypes.length - 3;\n         int matchNum = Math.min(argNum, interceptorArgNum);\n         for (; i < matchNum; i++) {", "sourceBeforeFix": "interceptorParamTypes.length - 1", "sourceAfterFix": "interceptorParamTypes.length - 3"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": " };\n   \n  private final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler", "fixed": " };\n   \n  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "abf2f457b12dcb128ebc437d7b8cc5a3e37c20a5", "projectName": "druid-io.druid", "bugType": "Change Modifier", "problem": "    * User can override this method if there is a better way to perform bulk lookup\n    */\n  Map<String, String> applyAll(Iterable<String> keys)\n   {\n     if (keys == null) {\n       return Collections.emptyMap();", "fixed": "    * User can override this method if there is a better way to perform bulk lookup\n    */\n  public Map<String, String> applyAll(Iterable<String> keys)\n   {\n     if (keys == null) {\n       return Collections.emptyMap();", "sourceBeforeFix": "0", "sourceAfterFix": "1"}
{"fixCommitSHA1": "2c434d09d831b7fcb8e0f4d22047637520d11be3", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "       \"JSC_REFERENCE_BEFORE_DECLARE\",\n       \"Variable referenced before declaration: {0}\");\n  static final DiagnosticType REDECLARED_VARIABLE = DiagnosticType.error(\n       \"JSC_REDECLARED_VARIABLE\",\n       \"Redeclared variable: {0}\");", "fixed": "       \"JSC_REFERENCE_BEFORE_DECLARE\",\n       \"Variable referenced before declaration: {0}\");\n  static final DiagnosticType REDECLARED_VARIABLE = DiagnosticType.warning(\n       \"JSC_REDECLARED_VARIABLE\",\n       \"Redeclared variable: {0}\");", "sourceBeforeFix": "DiagnosticType.error(\"JSC_REDECLARED_VARIABLE\",\"Redeclared variable: {0}\")", "sourceAfterFix": "DiagnosticType.warning(\"JSC_REDECLARED_VARIABLE\",\"Redeclared variable: {0}\")"}
{"fixCommitSHA1": "1092a1d4b3c5517a7f6352db53557cc5ff4135d5", "projectName": "hazelcast.hazelcast", "bugType": "Change Numeric Literal", "problem": "         new Thread() {\n             public void run() {\n                 try {\n                    if (mm.tryLock(key, 4, TimeUnit.SECONDS)) {\n                         tryLockSuccess.countDown();\n                     }\n                 } catch (InterruptedException e) {", "fixed": "         new Thread() {\n             public void run() {\n                 try {\n                    if (mm.tryLock(key, 10, TimeUnit.SECONDS)) {\n                         tryLockSuccess.countDown();\n                     }\n                 } catch (InterruptedException e) {", "sourceBeforeFix": "mm.tryLock(key,4,TimeUnit.SECONDS)", "sourceAfterFix": "mm.tryLock(key,10,TimeUnit.SECONDS)"}
{"fixCommitSHA1": "364ae9baf3824dc4e0e56b2b681f8302731e8cdd", "projectName": "apache.hive", "bugType": "Same Function More Args", "problem": "       try {\n         statsObj = getMS().getTableColumnStatistics(dbName, tableName, colName);\n       } finally {\n        endFunction(\"get_column_statistics_by_table: \", statsObj != null);\n       }\n       return statsObj;\n     }", "fixed": "       try {\n         statsObj = getMS().getTableColumnStatistics(dbName, tableName, colName);\n       } finally {\n        endFunction(\"get_column_statistics_by_table: \", statsObj != null, null);\n       }\n       return statsObj;\n     }", "sourceBeforeFix": "endFunction(\"get_column_statistics_by_table: \",statsObj != null)", "sourceAfterFix": "endFunction(\"get_column_statistics_by_table: \",statsObj != null,null)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n* @see\n \t */\n\tpublic boolean equalToReference(T candidate);\n \t/**\n \t * This method compares the element that has been set as reference in this type accessor, to the", "fixed": " \t * \n* @see\n \t */\n\tpublic abstract boolean equalToReference(T candidate);\n \t/**\n \t * This method compares the element that has been set as reference in this type accessor, to the", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15861, value = \"Cannot remove deployment %s from the domain as it is still used by server groups %s\")\n     String cannotRemoveDeploymentInUse(String name, List<String> groups);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10861, value = \"Cannot remove deployment %s from the domain as it is still used by server groups %s\")\n     String cannotRemoveDeploymentInUse(String name, List<String> groups);\n     /**", "sourceBeforeFix": "id=15834", "sourceAfterFix": "id=10834"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "fixed": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "sourceBeforeFix": "GL20.glGetVertexAttrib(index,pname,params)", "sourceAfterFix": "GL20.glGetVertexAttribfv(index,pname,params)"}
{"fixCommitSHA1": "fb1a1ca0d397301efc3cc702e4836b9bca169251", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": " \t\trel.setPersonA(personA);\r\n \t\trel.setPersonB(personB);\r\n \t\trel.setRelationshipType(relType);\r\n\t\tps.createRelationship(rel);\r\n \t}\r\n \tpublic void voidRelationship(Integer relationshipId, String voidReason) {\r", "fixed": " \t\trel.setPersonA(personA);\r\n \t\trel.setPersonB(personB);\r\n \t\trel.setRelationshipType(relType);\r\n\t\tps.saveRelationship(rel);\r\n \t}\r\n \tpublic void voidRelationship(Integer relationshipId, String voidReason) {\r", "sourceBeforeFix": "Context.getPersonService().getRelationships(Context.getPersonService().getPerson(personId))", "sourceAfterFix": "Context.getPersonService().getRelationshipsByPerson(Context.getPersonService().getPerson(personId))"}
{"fixCommitSHA1": "10f01f49c2166c803bf6ba46f3d6bb9203a9c440", "projectName": "apache.storm", "bugType": "Change Identifier Used", "problem": "                 state = MachineState.RUNNING;\n             }\n            this.startTime = System.currentTimeMillis();\n             this.newAssignment = newAssignment;\n             this.pendingLocalization = null;\n             this.pendingDownload = null;", "fixed": "                 state = MachineState.RUNNING;\n             }\n            this.startTime = Time.currentTimeMillis();\n             this.newAssignment = newAssignment;\n             this.pendingLocalization = null;\n             this.pendingDownload = null;", "sourceBeforeFix": "System.currentTimeMillis()", "sourceAfterFix": "Time.currentTimeMillis()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": " import org.jboss.logging.MessageLogger;\n /**\n * This module is using message IDs in the range 10900-10999. This file is using the subset 10950-10974 for domain\n* controller logger messages. See http:\n  * JBAS message id blocks.\n  * <p/>", "fixed": " import org.jboss.logging.MessageLogger;\n /**\n * This module is using message IDs in the range 10800-10999. This file is using the subset 10800-10829 for domain\n* controller logger messages. See http:\n  * JBAS message id blocks.\n  * <p/>", "sourceBeforeFix": "id=15807", "sourceAfterFix": "id=10807"}
{"fixCommitSHA1": "a71714fe0de6ea548e6db3f248bce9952d197fa4", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "             .setXmlName(CommonAttributes.FACTOR)\n             .setAllowExpression(true)\n            .setValidator(new IntRangeValidator(1, true, true))\n             .build();", "fixed": "             .setXmlName(CommonAttributes.FACTOR)\n             .setAllowExpression(true)\n            .setValidator(new IntRangeValidator(0, true, true))\n             .build();", "sourceBeforeFix": "new IntRangeValidator(1,true,true)", "sourceAfterFix": "new IntRangeValidator(0,true,true)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedKubernetesNamespacesEndpointBuilder\n             extends\n                 AdvancedKubernetesNamespacesEndpointConsumerBuilder, AdvancedKubernetesNamespacesEndpointProducerBuilder {\n         default KubernetesNamespacesEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedKubernetesNamespacesEndpointBuilder\n             extends\n                 AdvancedKubernetesNamespacesEndpointConsumerBuilder, AdvancedKubernetesNamespacesEndpointProducerBuilder {\n         default KubernetesNamespacesEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "33a32bb7e809792efb1b9a3bbd7da3fe216c66c9", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "         context.setSubsystemXmlMapping(SUBSYSTEM_NAME, Namespace.SECURITY_1_0.getUriString(), SecuritySubsystemParser::new);\n         context.setSubsystemXmlMapping(SUBSYSTEM_NAME, Namespace.SECURITY_1_1.getUriString(), SecuritySubsystemParser::new);\n         context.setSubsystemXmlMapping(SUBSYSTEM_NAME, Namespace.SECURITY_1_2.getUriString(), SecuritySubsystemParser::new);\n        context.setSubsystemXmlMapping(SUBSYSTEM_NAME, Namespace.SECURITY_3_0.getUriString(), SecuritySubsystemParser_3_0::new);\n     }\n }\n\\ No newline at end of file", "fixed": "         context.setSubsystemXmlMapping(SUBSYSTEM_NAME, Namespace.SECURITY_1_0.getUriString(), SecuritySubsystemParser::new);\n         context.setSubsystemXmlMapping(SUBSYSTEM_NAME, Namespace.SECURITY_1_1.getUriString(), SecuritySubsystemParser::new);\n         context.setSubsystemXmlMapping(SUBSYSTEM_NAME, Namespace.SECURITY_1_2.getUriString(), SecuritySubsystemParser::new);\n        context.setSubsystemXmlMapping(SUBSYSTEM_NAME, Namespace.SECURITY_2_0.getUriString(), SecuritySubsystemParser_3_0::new);\n     }\n }\n\\ No newline at end of file", "sourceBeforeFix": "ModelVersion.create(3,0,0)", "sourceAfterFix": "ModelVersion.create(2,0,0)"}
{"fixCommitSHA1": "ccc86e9f1cddebc731ac1ccabdd469df11d72d8b", "projectName": "apache.flink", "bugType": "Change Numeric Literal", "problem": " \t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.createRemoteEnvironment(\"localhost\", flinkPort);\n \t\tenv.enableCheckpointing(500);\n \t\tenv.setParallelism(parallelism);\n\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(3, 0));\n \t\tenv.getConfig().disableSysoutLogging();\n \t\tenv.setBufferTimeout(0);", "fixed": " \t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.createRemoteEnvironment(\"localhost\", flinkPort);\n \t\tenv.enableCheckpointing(500);\n \t\tenv.setParallelism(parallelism);\n\t\tenv.setRestartStrategy(RestartStrategies.fixedDelayRestart(1, 0));\n \t\tenv.getConfig().disableSysoutLogging();\n \t\tenv.setBufferTimeout(0);", "sourceBeforeFix": "RestartStrategies.fixedDelayRestart(3,0)", "sourceAfterFix": "RestartStrategies.fixedDelayRestart(1,0)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<DirectMessage> getSentDirectMessages() throws\n             TwitterException {\n        return DirectMessage.constructDirectMessages(get(getBaseURL() +\n                 \"direct_messages/sent.json\", new PostParameter[0], true));\n     }", "fixed": "      */\n     public ResponseList<DirectMessage> getSentDirectMessages() throws\n             TwitterException {\n        return DirectMessage.createDirectMessageList(get(getBaseURL() +\n                 \"direct_messages/sent.json\", new PostParameter[0], true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))"}
{"fixCommitSHA1": "14eade7f6e21e560a08de348504584cba5e94c94", "projectName": "wildfly.wildfly", "bugType": "Wrong Function Name", "problem": "     }\n     @Test\n    @Ignore(\"AS7-2738 and AS7-2837\")\n@OperateOnDeployment(\"deployment-1\")\n     public void testSessionReplication(@ArquillianResource(SimpleServlet.class) URL baseURL) throws IllegalStateException, IOException, InterruptedException {\n         DefaultHttpClient client = new DefaultHttpClient();", "fixed": "     }\n     @Test\n    @Ignore(\"AS7-2704 StackOverflowError on creating a web session in cluster\")\n@OperateOnDeployment(\"deployment-1\")\n     public void testSessionReplication(@ArquillianResource(SimpleServlet.class) URL baseURL) throws IllegalStateException, IOException, InterruptedException {\n         DefaultHttpClient client = new DefaultHttpClient();", "sourceBeforeFix": "war.addAsWebInfResource(ClusteredWebTestCase.class.getPackage(),\"web.xml\")", "sourceAfterFix": "war.setWebXML(ClusteredWebTestCase.class.getPackage(),\"web.xml\")"}
{"fixCommitSHA1": "6666af6ab02f1200875ed2ef7364ef8b131eec15", "projectName": "facebook.presto", "bugType": "Change Identifier Used", "problem": "             case LIST:\n                 return new ListJsonReader(streamDescriptor, writeStackType, checkForNulls, hiveStorageTimeZone, sessionTimeZone);\n             case MAP:\n                return new MapJsonReader(streamDescriptor, writeStackType, checkForNulls, sessionTimeZone, sessionTimeZone);\n             case UNION:\n             case DECIMAL:\n             case VARCHAR:", "fixed": "             case LIST:\n                 return new ListJsonReader(streamDescriptor, writeStackType, checkForNulls, hiveStorageTimeZone, sessionTimeZone);\n             case MAP:\n                return new MapJsonReader(streamDescriptor, writeStackType, checkForNulls, hiveStorageTimeZone, sessionTimeZone);\n             case UNION:\n             case DECIMAL:\n             case VARCHAR:", "sourceBeforeFix": "new MapJsonReader(streamDescriptor,writeStackType,checkForNulls,sessionTimeZone,sessionTimeZone)", "sourceAfterFix": "new MapJsonReader(streamDescriptor,writeStackType,checkForNulls,hiveStorageTimeZone,sessionTimeZone)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": "* @see\n* @see NormalizableKey\n \t */\n\tpublic void writeWithKeyNormalization(T record, DataOutputView target) throws IOException;\n \t/**\n \t * Reads the record back while de-normalizing the key fields. This must only be used when", "fixed": "* @see\n* @see NormalizableKey\n \t */\n\tpublic abstract void writeWithKeyNormalization(T record, DataOutputView target) throws IOException;\n \t/**\n \t * Reads the record back while de-normalizing the key fields. This must only be used when", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8018d1af58330b6d21c858fa5ebfee6a66cd10b3", "projectName": "apache.hadoop", "bugType": "Wrong Function Name", "problem": "         }\n       } catch (IOException e) {\n         out.println(\"Cannot list keys for KeyProvider: \" + provider\n            + \": \" + e.getMessage());\n         throw e;\n       }\n     }", "fixed": "         }\n       } catch (IOException e) {\n         out.println(\"Cannot list keys for KeyProvider: \" + provider\n            + \": \" + e.toString());\n         throw e;\n       }\n     }", "sourceBeforeFix": "e.getMessage()", "sourceAfterFix": "e.toString()"}
{"fixCommitSHA1": "40e6bbe55f7141bd66a52261e108a1f3b575ca6f", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "             } else {\n                 result = false;\n                 if (isEventsEnabled()) {\n                    publishEvent(createCacheCompleteEvent(key, completionId));\n                 }\n             }\n             onPutIfAbsent(key, value, expiryPolicy, source, disableWriteThrough,", "fixed": "             } else {\n                 result = false;\n                 if (isEventsEnabled()) {\n                    publishEvent(createCacheCompleteEvent(toEventData(key), completionId));\n                 }\n             }\n             onPutIfAbsent(key, value, expiryPolicy, source, disableWriteThrough,", "sourceBeforeFix": "toHeapData(key)", "sourceAfterFix": "toEventData(key)"}
{"fixCommitSHA1": "038ea1803bae1cf3be279b36395b4de4e0ff39b5", "projectName": "openhab.openhab", "bugType": "Change Identifier Used", "problem": " \t */\n \tprivate void poll() {\n \t\tif (invalidCredentials || this.myqOnlineData == null) {\n\t\t\tlogger.debug(\"Invalid Account Credentials\");\n \t\t\treturn;\n \t\t}", "fixed": " \t */\n \tprivate void poll() {\n \t\tif (invalidCredentials || this.myqOnlineData == null) {\n\t\t\tlogger.trace(\"Invalid Account Credentials\");\n \t\t\treturn;\n \t\t}", "sourceBeforeFix": "logger.debug(\"MyQ binding received command '{}' for item '{}'\",command,itemName)", "sourceAfterFix": "logger.trace(\"MyQ binding received command '{}' for item '{}'\",command,itemName)"}
{"fixCommitSHA1": "a63faf44e1b103a49d25a15c720fc5940ae9fc07", "projectName": "square.retrofit", "bugType": "Change Identifier Used", "problem": "     assertThat(factory.get(sResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResultWildcard = new TypeToken<Maybe<Result<? extends String>>>() {}.getType();\n    assertThat(factory.get(sResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResultWildcard = new TypeToken<Flowable<Result<? extends String>>>() {}.getType();\n    assertThat(factory.get(sResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n   }", "fixed": "     assertThat(factory.get(sResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResultWildcard = new TypeToken<Maybe<Result<? extends String>>>() {}.getType();\n    assertThat(factory.get(mResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResultWildcard = new TypeToken<Flowable<Result<? extends String>>>() {}.getType();\n    assertThat(factory.get(fResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n   }", "sourceBeforeFix": "factory.get(sResponseClass,NO_ANNOTATIONS,retrofit)", "sourceAfterFix": "factory.get(mResponseClass,NO_ANNOTATIONS,retrofit)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15848, value = \"Exception getting result from host %s: %s\")\n     String exceptionAwaitingResultFromHost(String name, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10848, value = \"Exception getting result from host %s: %s\")\n     String exceptionAwaitingResultFromHost(String name, String message);\n     /**", "sourceBeforeFix": "id=15871", "sourceAfterFix": "id=10871"}
{"fixCommitSHA1": "c131546eaadd07baf950bd6a44d07ee42d109e4c", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t\tsimpleRpcEndpoint.shutDown();\n\t\tCompletableFuture<Boolean> terminationFuture = simpleRpcEndpoint.getTerminationFuture();", "fixed": " \t\tsimpleRpcEndpoint.shutDown();\n\t\tCompletableFuture<Void> terminationFuture = simpleRpcEndpoint.getTerminationFuture();", "sourceBeforeFix": "CompletableFuture<Boolean>", "sourceAfterFix": "CompletableFuture<Void>"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleActionsPredicatesOptions_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(254);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {std::cout << $ctx->toStringTree(this) << std::endl;} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");", "fixed": " \tpublic void testMultipleActionsPredicatesOptions_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(253);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {std::cout << $ctx->toStringTree(this) << std::endl;} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");", "sourceBeforeFix": "new StringBuilder(254)", "sourceAfterFix": "new StringBuilder(253)"}
{"fixCommitSHA1": "0bf18ee3843b60bbd95b5d4dac20a1ab505a2f41", "projectName": "Atmosphere.atmosphere", "bugType": "Change Numeric Literal", "problem": "         }\n     }\n     private boolean allowedCloseCode(int closeCode) {\n        return closeCode < 1002 || closeCode > 1004 ? true : false;\n     }\n     private void finish(WebSocket webSocket, AtmosphereResource resource, AtmosphereRequest r, AtmosphereResponse s, boolean closeWebSocket) {", "fixed": "         }\n     }\n     private boolean allowedCloseCode(int closeCode) {\n        return closeCode < 1001 || closeCode > 1004 ? true : false;\n     }\n     private void finish(WebSocket webSocket, AtmosphereResource resource, AtmosphereRequest r, AtmosphereResponse s, boolean closeWebSocket) {", "sourceBeforeFix": "closeCode < 1002", "sourceAfterFix": "closeCode < 1001"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "fixed": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4fv(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4fv(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "sourceBeforeFix": "GL20.glGetUniform(program,location,params)", "sourceAfterFix": "GL20.glGetUniformfv(program,location,params)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "fixed": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "sourceBeforeFix": "GL20.glGetVertexAttrib(index,pname,params)", "sourceAfterFix": "GL20.glGetVertexAttribfv(index,pname,params)"}
{"fixCommitSHA1": "647bac3a8b28b15a6d3fec9456f8062f1a2b8b3c", "projectName": "openhab.openhab", "bugType": "Change Numeric Literal", "problem": " \t\t\t\t}\n \t\t\t\telse {\n \t\t\t\t\tlogger.debug(\"NODE {}: Calling handleApplicationCommandRequest.\", this.getNode().getNodeId());\n\t\t\t\t\tzwaveCommandClass.handleApplicationCommandRequest(serialMessage, offset + 2, 1);\n \t\t\t\t}\n \t\t\t}", "fixed": " \t\t\t\t}\n \t\t\t\telse {\n \t\t\t\t\tlogger.debug(\"NODE {}: Calling handleApplicationCommandRequest.\", this.getNode().getNodeId());\n\t\t\t\t\tzwaveCommandClass.handleApplicationCommandRequest(serialMessage, offset + 2, 0);\n \t\t\t\t}\n \t\t\t}", "sourceBeforeFix": "zwaveCommandClass.handleApplicationCommandRequest(serialMessage,offset + 2,1)", "sourceAfterFix": "zwaveCommandClass.handleApplicationCommandRequest(serialMessage,offset + 2,0)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "2", "sourceAfterFix": "0"}
{"fixCommitSHA1": "0bd86ba81d15584b0e12ce6d783e41bcd916b95f", "projectName": "clojure.clojure", "bugType": "More Specific If", "problem": " static Class maybePrimitiveType(Expr e){\n \ttry\n \t\t{\n\t\tif(e instanceof MaybePrimitiveExpr && e.hasJavaClass())\n \t\t\t{\n \t\t\tClass c = e.getJavaClass();\n \t\t\tif(Util.isPrimitive(c))", "fixed": " static Class maybePrimitiveType(Expr e){\n \ttry\n \t\t{\n\t\tif(e instanceof MaybePrimitiveExpr && e.hasJavaClass() && ((MaybePrimitiveExpr)e).canEmitPrimitive())\n \t\t\t{\n \t\t\tClass c = e.getJavaClass();\n \t\t\tif(Util.isPrimitive(c))", "sourceBeforeFix": "e instanceof MaybePrimitiveExpr && e.hasJavaClass()", "sourceAfterFix": "e instanceof MaybePrimitiveExpr && e.hasJavaClass() && ((MaybePrimitiveExpr)e).canEmitPrimitive()"}
{"fixCommitSHA1": "a161d8d1924d1fb49a4d229370d998be1493957c", "projectName": "Graylog2.graylog2-server", "bugType": "Change Identifier Used", "problem": "     protected void flushDirtyLogs() {\n         log.debug(\"Checking for dirty logs to flush...\");\n        final Set<Map.Entry<TopicAndPartition, Log>> entries = JavaConversions.asMap(logManager.logsByTopicPartition()).entrySet();\n         for (final Map.Entry<TopicAndPartition, Log> topicAndPartitionLogEntry : entries) {\n             final TopicAndPartition topicAndPartition = topicAndPartitionLogEntry.getKey();\n             final Log kafkaLog = topicAndPartitionLogEntry.getValue();", "fixed": "     protected void flushDirtyLogs() {\n         log.debug(\"Checking for dirty logs to flush...\");\n        final Set<Map.Entry<TopicAndPartition, Log>> entries = JavaConversions.mapAsJavaMap(logManager.logsByTopicPartition()).entrySet();\n         for (final Map.Entry<TopicAndPartition, Log> topicAndPartitionLogEntry : entries) {\n             final TopicAndPartition topicAndPartition = topicAndPartitionLogEntry.getKey();\n             final Log kafkaLog = topicAndPartitionLogEntry.getValue();", "sourceBeforeFix": "JavaConversions.asIterable(logManager.allLogs())", "sourceAfterFix": "JavaConversions.asJavaIterable(logManager.allLogs())"}
{"fixCommitSHA1": "e9cad4da3a814bcde46c10c0e4da2fc84f99d815", "projectName": "apache.flink", "bugType": "Change Numeric Literal", "problem": " \t\tfinal FlinkLocalCluster cluster = FlinkLocalCluster.getLocalCluster();\n \t\tcluster.submitTopology(topologyId, null, builder.createTopology());\n\t\tUtils.sleep(5 * 1000);\n \t\tcluster.killTopology(topologyId);", "fixed": " \t\tfinal FlinkLocalCluster cluster = FlinkLocalCluster.getLocalCluster();\n \t\tcluster.submitTopology(topologyId, null, builder.createTopology());\n\t\tUtils.sleep(10 * 1000);\n \t\tcluster.killTopology(topologyId);", "sourceBeforeFix": "5 * 1000", "sourceAfterFix": "10 * 1000"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<Status> getHomeTimeline() throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/home_timeline.json\", true));\n     }", "fixed": "      */\n     public ResponseList<Status> getHomeTimeline() throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/home_timeline.json\", true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/public_timeline.json\",false))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/public_timeline.json\",false))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface CordaEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedCordaEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface CordaEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedCordaEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleAlternativesWithCommonLabel_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(561);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "fixed": " \tpublic void testMultipleAlternativesWithCommonLabel_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(560);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "sourceBeforeFix": "new StringBuilder(561)", "sourceAfterFix": "new StringBuilder(560)"}
{"fixCommitSHA1": "0fc882f517228b6d793b9ef0da5c3fd77c70a9bd", "projectName": "mybatis.mybatis-3", "bugType": "Wrong Function Name", "problem": "   public void setNonNullParameter(PreparedStatement ps, int i, E parameter, JdbcType jdbcType) throws SQLException {\r\n     if (jdbcType == null) {\r\n        ps.setString(i, parameter.toString());\r\n     } else {\r\n        ps.setObject(i, parameter.toString(), jdbcType.TYPE_CODE);\r\n     }\r\n   }\r", "fixed": "   public void setNonNullParameter(PreparedStatement ps, int i, E parameter, JdbcType jdbcType) throws SQLException {\r\n     if (jdbcType == null) {\r\n        ps.setString(i, parameter.name());\r\n     } else {\r\n        ps.setObject(i, parameter.name(), jdbcType.TYPE_CODE);\r\n     }\r\n   }\r", "sourceBeforeFix": "parameter.toString()", "sourceAfterFix": "parameter.name()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * @return True, if the given number of bytes for a normalized suffice to determine the order of elements,\n \t *         false otherwise.\n \t */\n\tpublic boolean isNormalizedKeyPrefixOnly(int keyBytes);\n \t/**\n \t * Writes a normalized key for the given record into the target byte array, starting at the specified position", "fixed": " \t * @return True, if the given number of bytes for a normalized suffice to determine the order of elements,\n \t *         false otherwise.\n \t */\n\tpublic abstract boolean isNormalizedKeyPrefixOnly(int keyBytes);\n \t/**\n \t * Writes a normalized key for the given record into the target byte array, starting at the specified position", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "f60a9cfe8b1b27d5ea25095bdfc690001da9f4d6", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "     @Override\n     public int hashCode() {\n        return Objects.hash(filePattern, checkPattern, moduleId, linesCSV, columnsCSV);\n     }\n     @Override", "fixed": "     @Override\n     public int hashCode() {\n        return Objects.hash(filePattern, checkPattern, moduleId, linesCsv, columnsCsv);\n     }\n     @Override", "sourceBeforeFix": "/**   * Column number filter.   */ private CSVFilter columnFilter; ", "sourceAfterFix": "/**   * Column number filter.   */ private CsvFilter columnFilter; "}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserListSubscriptions(String user, long cursor) throws TwitterException {\n        return twitter4j.List.constructListOfLists(get(getApiBaseURL() + V1 +\n                 user + \"/lists/subscriptions.json?cursor=\" + cursor, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserListSubscriptions(String user, long cursor) throws TwitterException {\n        return twitter4j.List.createListList(get(getApiBaseURL() + V1 +\n                 user + \"/lists/subscriptions.json?cursor=\" + cursor, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\",true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface SjmsBatchEndpointBuilder\n            extends\n                EndpointConsumerBuilder {\n         default AdvancedSjmsBatchEndpointBuilder advanced() {\n             return (AdvancedSjmsBatchEndpointBuilder) this;\n         }", "fixed": "     \n    public interface SjmsBatchEndpointBuilder extends EndpointConsumerBuilder {\n         default AdvancedSjmsBatchEndpointBuilder advanced() {\n             return (AdvancedSjmsBatchEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "0d3c78b6f28fb3cad00c12605209c524702adb0a", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "                 record.setExpirationTime(expiryTime);\n                 if (isEventsEnabled()) {\n                     CacheEventContext cacheEventContext =\n                            createBaseEventContext(CacheEventType.EXPIRATION_TIME_UPDATED, toHeapData(key),\n                                                    toEventData(record.getValue()), expiryTime, null, IGNORE_COMPLETION);\n                     cacheEventContext.setAccessHit(record.getAccessHit());\n                     publishEvent(cacheEventContext);", "fixed": "                 record.setExpirationTime(expiryTime);\n                 if (isEventsEnabled()) {\n                     CacheEventContext cacheEventContext =\n                            createBaseEventContext(CacheEventType.EXPIRATION_TIME_UPDATED, toEventData(key),\n                                                    toEventData(record.getValue()), expiryTime, null, IGNORE_COMPLETION);\n                     cacheEventContext.setAccessHit(record.getAccessHit());\n                     publishEvent(cacheEventContext);", "sourceBeforeFix": "toHeapData(key)", "sourceAfterFix": "toEventData(key)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "998cca82220175171f60cd096ee26f600eabd8dc", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "         return getNode(random.nextInt(cluster.size()));\n     }\n    public void terminateRandomNode(){\n         HazelcastInstance node = getRandomNode();\n        node.getLifecycleService().terminate();\n         cluster.remove(node);\n     }", "fixed": "         return getNode(random.nextInt(cluster.size()));\n     }\n    public void shutdownRandomNode(){\n         HazelcastInstance node = getRandomNode();\n        node.getLifecycleService().shutdown();\n         cluster.remove(node);\n     }", "sourceBeforeFix": "node.getLifecycleService().terminate()", "sourceAfterFix": "node.getLifecycleService().shutdown()"}
{"fixCommitSHA1": "8a7c5ce2b440f584c4af52ae1e4d7f7a885a6ac4", "projectName": "alibaba.druid", "bugType": "Change Numeric Literal", "problem": "             }\r\n         }\r\n        for (int i = 0; i < 1000 * 1; ++i) {\r\n             Connection conn = dataSource.getConnection();\r\n             PreparedStatement stmt = conn.prepareStatement(\"SELECT \" + i);\r\n             stmt.execute();\r", "fixed": "             }\r\n         }\r\n        for (int i = 0; i < 10 * 1; ++i) {\r\n             Connection conn = dataSource.getConnection();\r\n             PreparedStatement stmt = conn.prepareStatement(\"SELECT \" + i);\r\n             stmt.execute();\r", "sourceBeforeFix": "1000 * 1", "sourceAfterFix": "10 * 1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface XsltEndpointBuilder\n            extends\n                EndpointProducerBuilder {\n         default AdvancedXsltEndpointBuilder advanced() {\n             return (AdvancedXsltEndpointBuilder) this;\n         }", "fixed": "     \n    public interface XsltEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedXsltEndpointBuilder advanced() {\n             return (AdvancedXsltEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "180815445c5271dbee42d1983e7724d95b2b38a6", "projectName": "spring-projects.spring-boot", "bugType": "Same Function More Args", "problem": " \t\t\tRunnable shutdownHandler = loggingSystem.getShutdownHandler();\n \t\t\tif (shutdownHandler != null\n \t\t\t\t\t&& shutdownHookRegistered.compareAndSet(false, true)) {\n\t\t\t\tRuntime.getRuntime().addShutdownHook(new Thread());\n \t\t\t}\n \t\t}\n \t}", "fixed": " \t\t\tRunnable shutdownHandler = loggingSystem.getShutdownHandler();\n \t\t\tif (shutdownHandler != null\n \t\t\t\t\t&& shutdownHookRegistered.compareAndSet(false, true)) {\n\t\t\t\tRuntime.getRuntime().addShutdownHook(new Thread(shutdownHandler));\n \t\t\t}\n \t\t}\n \t}", "sourceBeforeFix": "new Thread()", "sourceAfterFix": "new Thread(shutdownHandler)"}
{"fixCommitSHA1": "ea98386dfd18da047c877a2320cfdcf15df2ea06", "projectName": "facebook.presto", "bugType": "Change Modifier", "problem": "                 .retInt();\n     }\n    private void generatePositionEqualsPositionMethod(\n             ClassDefinition classDefinition,\n             CallSiteBinder callSiteBinder,\n             List<Type> joinChannelTypes,", "fixed": "                 .retInt();\n     }\n    private static void generatePositionEqualsPositionMethod(\n             ClassDefinition classDefinition,\n             CallSiteBinder callSiteBinder,\n             List<Type> joinChannelTypes,", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "c98bab51de22a20990ff8805825e8638e0686464", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "     Files.copy(cnf2Path, cnfPath, StandardCopyOption.REPLACE_EXISTING);\n    Admin admin = TEST_UTIL.getHBaseAdmin();\n     ServerName server = TEST_UTIL.getHBaseCluster().getMaster().getServerName();\n     admin.updateConfiguration(server);\n     Configuration conf = TEST_UTIL.getMiniHBaseCluster().getMaster().getConfiguration();", "fixed": "     Files.copy(cnf2Path, cnfPath, StandardCopyOption.REPLACE_EXISTING);\n    Admin admin = TEST_UTIL.getAdmin();\n     ServerName server = TEST_UTIL.getHBaseCluster().getMaster().getServerName();\n     admin.updateConfiguration(server);\n     Configuration conf = TEST_UTIL.getMiniHBaseCluster().getMaster().getConfiguration();", "sourceBeforeFix": "TEST_UTIL.getHBaseAdmin()", "sourceAfterFix": "TEST_UTIL.getAdmin()"}
{"fixCommitSHA1": "ec5961a27122b228cb8adb634ee183eebcefa98c", "projectName": "apache.hive", "bugType": "Change Identifier Used", "problem": "     mapredWork work = new mapredWork();\n     work.setPathToAliases(new LinkedHashMap<String, ArrayList<String>>());\n     work.setPathToPartitionInfo(new LinkedHashMap<String, partitionDesc>());\n    work.setAliasToWork(new HashMap<String, Operator<? extends Serializable>>());\n     work.setTagToValueDesc(new ArrayList<tableDesc>());\n     work.setReducer(null);\n     return work;", "fixed": "     mapredWork work = new mapredWork();\n     work.setPathToAliases(new LinkedHashMap<String, ArrayList<String>>());\n     work.setPathToPartitionInfo(new LinkedHashMap<String, partitionDesc>());\n    work.setAliasToWork(new LinkedHashMap<String, Operator<? extends Serializable>>());\n     work.setTagToValueDesc(new ArrayList<tableDesc>());\n     work.setReducer(null);\n     return work;", "sourceBeforeFix": "HashMap<String,Operator<? extends Serializable>>", "sourceAfterFix": "LinkedHashMap<String,Operator<? extends Serializable>>"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "6bae902bd35ed4f57e7a5d612b7ad9b72f4559bc", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "     Node node1 = Node.newString(Token.NAME, \"f\");\n     node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n     Node node2 = Node.newString(Token.NAME, \"f\");\n    assertFalse(node1.checkTreeTypeAwareEqualsSilent(node2));\n   }\n   public void testVarArgs1() {", "fixed": "     Node node1 = Node.newString(Token.NAME, \"f\");\n     node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n     Node node2 = Node.newString(Token.NAME, \"f\");\n    assertFalse(node1.isEquivalentToTyped(node2));\n   }\n   public void testVarArgs1() {", "sourceBeforeFix": "node1.checkTreeEqualsSilent(node2)", "sourceAfterFix": "node1.isEquivalentTo(node2)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      * @param hostName   the name of the host.\n      */\n     @LogMessage(level = Level.WARN)\n    @Message(id = 15803, value = \"Caught exception awaiting final response from server %s on host %s\")\n     void caughtExceptionAwaitingFinalResponse(@Cause Throwable cause, String serverName, String hostName);\n     /**", "fixed": "      * @param hostName   the name of the host.\n      */\n     @LogMessage(level = Level.WARN)\n    @Message(id = 10803, value = \"Caught exception awaiting final response from server %s on host %s\")\n     void caughtExceptionAwaitingFinalResponse(@Cause Throwable cause, String serverName, String hostName);\n     /**", "sourceBeforeFix": "id=15807", "sourceAfterFix": "id=10807"}
{"fixCommitSHA1": "6618cef776cf1c9ce67ff8ee461412110ca5ada7", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t\t\t\t\texecutor);\n \t\t\t}\n \t\t} catch (Exception e) {\n\t\t\tLOG.warn(\"Exception while fetching metrics.\", e);\n \t\t}\n \t}", "fixed": " \t\t\t\t\texecutor);\n \t\t\t}\n \t\t} catch (Exception e) {\n\t\t\tLOG.debug(\"Exception while fetching metrics.\", e);\n \t\t}\n \t}", "sourceBeforeFix": "LOG.warn(\"Requesting paths for query services failed.\",throwable)", "sourceAfterFix": "LOG.debug(\"Requesting paths for query services failed.\",throwable)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "2", "sourceAfterFix": "0"}
{"fixCommitSHA1": "ea98386dfd18da047c877a2320cfdcf15df2ea06", "projectName": "facebook.presto", "bugType": "Change Modifier", "problem": "                 .retInt();\n     }\n    private void generatePositionEqualsRowMethod(\n             ClassDefinition classDefinition,\n             CallSiteBinder callSiteBinder,\n             List<Type> joinChannelTypes,", "fixed": "                 .retInt();\n     }\n    private static void generatePositionEqualsRowMethod(\n             ClassDefinition classDefinition,\n             CallSiteBinder callSiteBinder,\n             List<Type> joinChannelTypes,", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  private final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "99c4661a447ef55201251c67d21acfdcb100b73e", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "           compiler.stage2Passes();\n       }\n       compiler.completeCompilation();\n    } catch (Exception e) {\n       compiler.report(JSError.make(COULD_NOT_DESERIALIZE_AST, filename));\n     } finally {", "fixed": "           compiler.stage2Passes();\n       }\n       compiler.completeCompilation();\n    } catch (IOException e) {\n       compiler.report(JSError.make(COULD_NOT_DESERIALIZE_AST, filename));\n     } finally {", "sourceBeforeFix": "Exception e", "sourceAfterFix": "IOException e"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "038ea1803bae1cf3be279b36395b4de4e0ff39b5", "projectName": "openhab.openhab", "bugType": "Wrong Function Name", "problem": " \t */\n \tprivate void poll() {\n \t\tif (invalidCredentials || this.myqOnlineData == null) {\n\t\t\tlogger.debug(\"Invalid Account Credentials\");\n \t\t\treturn;\n \t\t}", "fixed": " \t */\n \tprivate void poll() {\n \t\tif (invalidCredentials || this.myqOnlineData == null) {\n\t\t\tlogger.trace(\"Invalid Account Credentials\");\n \t\t\treturn;\n \t\t}", "sourceBeforeFix": "logger.debug(\"MyQ binding received command '{}' for item '{}'\",command,itemName)", "sourceAfterFix": "logger.trace(\"MyQ binding received command '{}' for item '{}'\",command,itemName)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15852, value = \"Caught %s storing deployment content -- %s\")\n     String caughtExceptionStoringDeploymentContent(String exceptionName, Throwable exception);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10852, value = \"Caught %s storing deployment content -- %s\")\n     String caughtExceptionStoringDeploymentContent(String exceptionName, Throwable exception);\n     /**", "sourceBeforeFix": "id=15865", "sourceAfterFix": "id=10865"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "9f941db913334b4b5ed48833522200710e30bb84", "projectName": "Atmosphere.atmosphere", "bugType": "Change Identifier Used", "problem": "             fc.setFilterName(filterName);\n             filterChain.addFilter(fc);\n            logger.info(\"Installing Filter {}\", servletClassName);\n         }\n     }", "fixed": "             fc.setFilterName(filterName);\n             filterChain.addFilter(fc);\n            logger.info(\"Installing Filter {}\", filterName);\n         }\n     }", "sourceBeforeFix": "logger.info(\"Installing Filter {}\",servletClassName)", "sourceAfterFix": "logger.info(\"Installing Filter {}\",filterName)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "14db1773526284bfc9837a4ef9121862dc8544fb", "projectName": "hazelcast.hazelcast", "bugType": "Change Modifier", "problem": " class ObjectRecordWithStats extends AbstractRecordWithStats<Object> {\n    private Object value;\n     public ObjectRecordWithStats() {\n         super();", "fixed": " class ObjectRecordWithStats extends AbstractRecordWithStats<Object> {\n    private volatile Object value;\n     public ObjectRecordWithStats() {\n         super();", "sourceBeforeFix": "2", "sourceAfterFix": "66"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t */\n \t@Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)\n\tpublic SortedMap<String, String> getSystemVariables() throws APIException;\n \t/**\n \t * Get a map of all the System Information. Java, user, time, runtime properties, etc", "fixed": " \t */\n \t@Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)\n\tpublic SortedMap<String, String> getSystemVariables();\n \t/**\n \t * Get a map of all the System Information. Java, user, time, runtime properties, etc", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "fixed": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttribfv(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttribiv(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "sourceBeforeFix": "GL20.glUniformMatrix3(location,transpose,toFloatBuffer(value,offset,count * 9))", "sourceAfterFix": "GL20.glUniformMatrix3fv(location,transpose,toFloatBuffer(value,offset,count * 9))"}
{"fixCommitSHA1": "67685860541cf7f66d048f314e1b6084591974c3", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "         long start = System.currentTimeMillis();\n         MockEndpoint result = getMockEndpoint(\"mock:result\");\n        result.expectedBodiesReceived(\"A+C+E+G+I\", \"B+D+F+H+J\");\n         assertMockEndpointsSatisfied();", "fixed": "         long start = System.currentTimeMillis();\n         MockEndpoint result = getMockEndpoint(\"mock:result\");\n        result.expectedBodiesReceivedInAnyOrder(\"A+C+E+G+I\", \"B+D+F+H+J\");\n         assertMockEndpointsSatisfied();", "sourceBeforeFix": "result.expectedBodiesReceived(\"A+C+E+G+I\",\"B+D+F+H+J\")", "sourceAfterFix": "result.expectedBodiesReceivedInAnyOrder(\"A+C+E+G+I\",\"B+D+F+H+J\")"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     @ApiOperation(value = \"Logs out current logged in user session\", notes = \"\", tags={ \"user\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Void.class) })\n    void logoutUser();\n     @PUT\n     @Path(\"/{username}\")", "fixed": "     @ApiOperation(value = \"Logs out current logged in user session\", notes = \"\", tags={ \"user\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Void.class) })\n    void logoutUser() throws Exception;\n     @PUT\n     @Path(\"/{username}\")", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "4b52e5d010469405c1ec24baa2f8457f3eada222", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic boolean mouseMoved (int screenX, int screenY) {\r\n\t\tInputProcessor[] items = processors.begin();\r\n \t\ttry {\r\n \t\t\tfor (int i = 0, n = processors.size; i < n; i++)\r\n\t\t\t\tif (items[i].mouseMoved(screenX, screenY)) return true;\r\n \t\t} finally {\r\n \t\t\tprocessors.end();\r\n \t\t}\r", "fixed": " \t}\r\n \tpublic boolean mouseMoved (int screenX, int screenY) {\r\n\t\tObject[] items = processors.begin();\r\n \t\ttry {\r\n \t\t\tfor (int i = 0, n = processors.size; i < n; i++)\r\n\t\t\t\tif (((InputProcessor)items[i]).mouseMoved(screenX, screenY)) return true;\r\n \t\t} finally {\r\n \t\t\tprocessors.end();\r\n \t\t}\r", "sourceBeforeFix": "InputProcessor[]", "sourceAfterFix": "Object[]"}
{"fixCommitSHA1": "261f178a7b371d33b0c00c887821e8587534c32a", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "         if (target == this) {\n             task.run();\n         } else {\n            target.addTask(task);\n         }\n     }", "fixed": "         if (target == this) {\n             task.run();\n         } else {\n            target.addTaskAndWakeup(task);\n         }\n     }", "sourceBeforeFix": "target.addTask(task)", "sourceAfterFix": "target.addTaskAndWakeup(task)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedByMe() throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",\n                 null, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedByMe() throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",\n                 null, true));\n     }", "sourceBeforeFix": "DirectMessage.constructDirectMessages(get(getBaseURL() + \"direct_messages.json\",true))", "sourceAfterFix": "DirectMessage.createDirectMessageList(get(getBaseURL() + \"direct_messages.json\",true))"}
{"fixCommitSHA1": "bbdd2fa3a4265b88096ab6f85bcfb1df7fc037a3", "projectName": "dropwizard.dropwizard", "bugType": "Wrong Function Name", "problem": "         final HttpConnectionFactory http11 = buildHttpConnectionFactory(httpConfig);\n         final HTTP2ServerConnectionFactory http2c = new HTTP2CServerConnectionFactory(httpConfig);\n         http2c.setMaxConcurrentStreams(maxConcurrentStreams);\n        http2c.setInitialStreamSendWindow(initialStreamSendWindow);", "fixed": "         final HttpConnectionFactory http11 = buildHttpConnectionFactory(httpConfig);\n         final HTTP2ServerConnectionFactory http2c = new HTTP2CServerConnectionFactory(httpConfig);\n         http2c.setMaxConcurrentStreams(maxConcurrentStreams);\n        http2c.setInitialStreamRecvWindow(initialStreamSendWindow);", "sourceBeforeFix": "http2c.setInitialStreamSendWindow(initialStreamSendWindow)", "sourceAfterFix": "http2c.setInitialStreamRecvWindow(initialStreamSendWindow)"}
{"fixCommitSHA1": "ea98386dfd18da047c877a2320cfdcf15df2ea06", "projectName": "facebook.presto", "bugType": "Change Modifier", "problem": "         return defineClass(classDefinition, PagesHashStrategy.class, callSiteBinder.getBindings(), getClass().getClassLoader());\n     }\n    private void generateConstructor(ClassDefinition classDefinition,\n             List<Integer> joinChannels,\n             FieldDefinition sizeField,\n             List<FieldDefinition> channelFields,", "fixed": "         return defineClass(classDefinition, PagesHashStrategy.class, callSiteBinder.getBindings(), getClass().getClassLoader());\n     }\n    private static void generateConstructor(ClassDefinition classDefinition,\n             List<Integer> joinChannels,\n             FieldDefinition sizeField,\n             List<FieldDefinition> channelFields,", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "bbc30c2607acb6b849d25219bbf07774809d90d7", "projectName": "apache.hadoop", "bugType": "Change Modifier", "problem": "   }\n   @Override\n  public String toString() {\n     if (bpNSInfo == null) {", "fixed": "   }\n   @Override\n  public synchronized String toString() {\n     if (bpNSInfo == null) {", "sourceBeforeFix": "0", "sourceAfterFix": "32"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15844, value = \"Invalid rollout plan. Server group %s appears more than once in the plan.\")\n     String invalidRolloutPlanGroupAlreadyExists(String group);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10844, value = \"Invalid rollout plan. Server group %s appears more than once in the plan.\")\n     String invalidRolloutPlanGroupAlreadyExists(String group);\n     /**", "sourceBeforeFix": "id=15832", "sourceAfterFix": "id=10832"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15853, value = \"Unexpected initial path key %s\")\n     IllegalStateException unexpectedInitialPathKey(String key);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10853, value = \"Unexpected initial path key %s\")\n     IllegalStateException unexpectedInitialPathKey(String key);\n     /**", "sourceBeforeFix": "id=15862", "sourceAfterFix": "id=10862"}
{"fixCommitSHA1": "ea98386dfd18da047c877a2320cfdcf15df2ea06", "projectName": "facebook.presto", "bugType": "Change Modifier", "problem": "             .ifFalse(type.invoke(\"hash\", int.class, blockRef, blockPosition));\n     }\n    private void generateRowEqualsRowMethod(\n             ClassDefinition classDefinition,\n             CallSiteBinder callSiteBinder,\n             List<Type> joinChannelTypes)", "fixed": "             .ifFalse(type.invoke(\"hash\", int.class, blockRef, blockPosition));\n     }\n    private static void generateRowEqualsRowMethod(\n             ClassDefinition classDefinition,\n             CallSiteBinder callSiteBinder,\n             List<Type> joinChannelTypes)", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "efa5b54542e6ccd1357433f3ae340e94efdd9f6e", "projectName": "apache.hive", "bugType": "Same Function Swap Args", "problem": "         if (!listeners.isEmpty()) {\n           MetaStoreListenerNotifier.notifyEvent(listeners,\n                                                 EventType.DROP_TABLE,\n                                                new DropTableEvent(tbl, deleteData, success, this),\n                                                 envContext,\n                                                 transactionalListenerResponses, ms);\n         }", "fixed": "         if (!listeners.isEmpty()) {\n           MetaStoreListenerNotifier.notifyEvent(listeners,\n                                                 EventType.DROP_TABLE,\n                                                new DropTableEvent(tbl, success, deleteData, this),\n                                                 envContext,\n                                                 transactionalListenerResponses, ms);\n         }", "sourceBeforeFix": "new DropTableEvent(tbl,deleteData,success,this)", "sourceAfterFix": "new DropTableEvent(tbl,success,deleteData,this)"}
{"fixCommitSHA1": "bdd386e699e23c48524b822b9b890b077f294c69", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   }\n  private boolean isIdentifierPart(char ch) {", "fixed": "     }\n   }\n  private static boolean isIdentifierPart(char ch) {", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15833, value = \"%s is missing %s: %s\")\n     String requiredChildIsMissing(String parent, String child, String parentSpec);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10833, value = \"%s is missing %s: %s\")\n     String requiredChildIsMissing(String parent, String child, String parentSpec);\n     /**", "sourceBeforeFix": "id=15843", "sourceAfterFix": "id=10843"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "fixed": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "sourceBeforeFix": "GL20.glGetProgram(program,pname,params)", "sourceAfterFix": "GL20.glGetProgramiv(program,pname,params)"}
{"fixCommitSHA1": "2921e7bf0d74a65fdcc71d3ce3053037d14e4d44", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "     protected void handleMapTryLock(String[] args) {\n         String key = args[1];\n        long time = (args.length > 2) ? Long.valueOf(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMap().tryLock(key);", "fixed": "     protected void handleMapTryLock(String[] args) {\n         String key = args[1];\n        long time = (args.length > 2) ? Long.parseLong(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMap().tryLock(key);", "sourceBeforeFix": "Long.valueOf(args[2])", "sourceAfterFix": "Long.parseLong(args[2])"}
{"fixCommitSHA1": "0f576f5520e6615ccb61bc7310e567ac2db90991", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "     return compiler;\n   }\n  private static final List<SourceFile> EMPTY_EXTERNS = ImmutableList.of(\n      SourceFile.fromCode(\"externs\", \"\"));\n   /**\n* Ensure that the printInputDelimiter option adds a \"", "fixed": "     return compiler;\n   }\n  private static final ImmutableList<SourceFile> EMPTY_EXTERNS =\n      ImmutableList.of(SourceFile.fromCode(\"externs\", \"\"));\n   /**\n* Ensure that the printInputDelimiter option adds a \"", "sourceBeforeFix": "List<SourceFile>", "sourceAfterFix": "ImmutableList<SourceFile>"}
{"fixCommitSHA1": "2921e7bf0d74a65fdcc71d3ce3053037d14e4d44", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "     protected void handleQOffer(String[] args) {\n         long timeout = 0;\n         if (args.length > 2) {\n            timeout = Long.valueOf(args[2]);\n         }\n         try {\n             boolean offered = getQueue().offer(args[1], timeout, TimeUnit.SECONDS);", "fixed": "     protected void handleQOffer(String[] args) {\n         long timeout = 0;\n         if (args.length > 2) {\n            timeout = Long.parseLong(args[2]);\n         }\n         try {\n             boolean offered = getQueue().offer(args[1], timeout, TimeUnit.SECONDS);", "sourceBeforeFix": "Long.valueOf(args[1])", "sourceAfterFix": "Long.parseLong(args[1])"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid request\", response = Void.class),\n         @ApiResponse(code = 404, message = \"Not found\", response = Void.class) })\n    void testEnumParameters(@FormParam(value = \"enum_form_string_array\")  List<String> enumFormStringArray,@FormParam(value = \"enum_form_string\")  String enumFormString,@HeaderParam(\"enum_header_string_array\")   @ApiParam(\"Header parameter enum test (string array)\") List<String> enumHeaderStringArray,@HeaderParam(\"enum_header_string\")  @DefaultValue(\"-efg\")  @ApiParam(\"Header parameter enum test (string)\") String enumHeaderString,@QueryParam(\"enum_query_string_array\")   @ApiParam(\"Query parameter enum test (string array)\")  List<String> enumQueryStringArray,@QueryParam(\"enum_query_string\")  @DefaultValue(\"-efg\")  @ApiParam(\"Query parameter enum test (string)\")  String enumQueryString,@QueryParam(\"enum_query_integer\")   @ApiParam(\"Query parameter enum test (double)\")  Integer enumQueryInteger,@FormParam(value = \"enum_query_double\")  Double enumQueryDouble);\n     @GET\n     @Path(\"/jsonFormData\")", "fixed": "     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid request\", response = Void.class),\n         @ApiResponse(code = 404, message = \"Not found\", response = Void.class) })\n    void testEnumParameters(@FormParam(value = \"enum_form_string_array\")  List<String> enumFormStringArray,@FormParam(value = \"enum_form_string\")  String enumFormString,@HeaderParam(\"enum_header_string_array\")   @ApiParam(\"Header parameter enum test (string array)\") List<String> enumHeaderStringArray,@HeaderParam(\"enum_header_string\")  @DefaultValue(\"-efg\")  @ApiParam(\"Header parameter enum test (string)\") String enumHeaderString,@QueryParam(\"enum_query_string_array\")   @ApiParam(\"Query parameter enum test (string array)\")  List<String> enumQueryStringArray,@QueryParam(\"enum_query_string\")  @DefaultValue(\"-efg\")  @ApiParam(\"Query parameter enum test (string)\")  String enumQueryString,@QueryParam(\"enum_query_integer\")   @ApiParam(\"Query parameter enum test (double)\")  Integer enumQueryInteger,@FormParam(value = \"enum_query_double\")  Double enumQueryDouble) throws Exception;\n     @GET\n     @Path(\"/jsonFormData\")", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "53b0527a5dd35cd2e36650a6352b882cc32f714f", "projectName": "apache.hbase", "bugType": "Wrong Function Name", "problem": "    * @throws IOException\n    */\n   public void put(Put put) throws IOException {\n    this.put(put, null, put.writeToWAL());\n   }\n   /**", "fixed": "    * @throws IOException\n    */\n   public void put(Put put) throws IOException {\n    this.put(put, null, put.getWriteToWAL());\n   }\n   /**", "sourceBeforeFix": "put.writeToWAL()", "sourceAfterFix": "put.getWriteToWAL()"}
{"fixCommitSHA1": "c6e641e81964da8454021be53adb1e585eaf38e0", "projectName": "druid-io.druid", "bugType": "Same Function More Args", "problem": "   }\n   private String computeKey(String identifier, byte[] key) {\n    return identifier + Base64.encodeBytes(key);\n   }\n }", "fixed": "   }\n   private String computeKey(String identifier, byte[] key) {\n    return identifier + Base64.encodeBytes(key, Base64.DONT_BREAK_LINES);\n   }\n }", "sourceBeforeFix": "Base64.encodeBytes(key)", "sourceAfterFix": "Base64.encodeBytes(key,Base64.DONT_BREAK_LINES)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  private final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedTwitterDirectMessageEndpointBuilder\n             extends\n                 AdvancedTwitterDirectMessageEndpointConsumerBuilder, AdvancedTwitterDirectMessageEndpointProducerBuilder {\n         default TwitterDirectMessageEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedTwitterDirectMessageEndpointBuilder\n             extends\n                 AdvancedTwitterDirectMessageEndpointConsumerBuilder, AdvancedTwitterDirectMessageEndpointProducerBuilder {\n         default TwitterDirectMessageEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "73627df082ff499af4ca1c482f79e304905007eb", "projectName": "alibaba.canal", "bugType": "Same Function More Args", "problem": "             this.m_large = large;\n         }\n        public String key(int i) {\n             m_data.rewind();\n             int offset_size = m_large ? LARGE_OFFSET_SIZE : SMALL_OFFSET_SIZE;\n             int key_entry_size = m_large ? KEY_ENTRY_SIZE_LARGE : KEY_ENTRY_SIZE_SMALL;", "fixed": "             this.m_large = large;\n         }\n        public String key(int i, String charsetName) {\n             m_data.rewind();\n             int offset_size = m_large ? LARGE_OFFSET_SIZE : SMALL_OFFSET_SIZE;\n             int key_entry_size = m_large ? KEY_ENTRY_SIZE_LARGE : KEY_ENTRY_SIZE_SMALL;", "sourceBeforeFix": "m_data.getFixString((int)m_length)", "sourceAfterFix": "m_data.getFixString((int)m_length,charsetName)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      * @param hostName   the name of the host.\n      */\n     @LogMessage(level = Level.WARN)\n    @Message(id = 15802, value = \"Interrupted awaiting final response from server %s on host %s\")\n     void interruptedAwaitingFinalResponse(String serverName, String hostName);\n     /**", "fixed": "      * @param hostName   the name of the host.\n      */\n     @LogMessage(level = Level.WARN)\n    @Message(id = 10802, value = \"Interrupted awaiting final response from server %s on host %s\")\n     void interruptedAwaitingFinalResponse(String serverName, String hostName);\n     /**", "sourceBeforeFix": "id=15807", "sourceAfterFix": "id=10807"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15856, value = \"Invalid url stream.\")\n     String invalidUrlStream();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10856, value = \"Invalid url stream.\")\n     String invalidUrlStream();\n     /**", "sourceBeforeFix": "id=15867", "sourceAfterFix": "id=10867"}
{"fixCommitSHA1": "0cb756acf8ee44c28bee8b9ea626e2a65cee5880", "projectName": "google.guava", "bugType": "Change Caller in Function Call", "problem": "     rng.nextBytes(bytes);\n     ByteBuffer littleEndian = ByteBuffer.wrap(bytes).order(ByteOrder.LITTLE_ENDIAN);\n     ByteBuffer bigEndian = ByteBuffer.wrap(bytes).order(ByteOrder.BIG_ENDIAN);\n    assertEquals(hashFunction.hashBytes(littleEndian), hashFunction.hashBytes(littleEndian));\n     assertEquals(ByteOrder.LITTLE_ENDIAN, littleEndian.order());\n    assertEquals(ByteOrder.BIG_ENDIAN, littleEndian.order());\n   }\n   static void assertHasherByteBufferPreservesByteOrder(HashFunction hashFunction) {", "fixed": "     rng.nextBytes(bytes);\n     ByteBuffer littleEndian = ByteBuffer.wrap(bytes).order(ByteOrder.LITTLE_ENDIAN);\n     ByteBuffer bigEndian = ByteBuffer.wrap(bytes).order(ByteOrder.BIG_ENDIAN);\n    assertEquals(hashFunction.hashBytes(littleEndian), hashFunction.hashBytes(bigEndian));\n     assertEquals(ByteOrder.LITTLE_ENDIAN, littleEndian.order());\n    assertEquals(ByteOrder.BIG_ENDIAN, bigEndian.order());\n   }\n   static void assertHasherByteBufferPreservesByteOrder(HashFunction hashFunction) {", "sourceBeforeFix": "littleEndian.order()", "sourceAfterFix": "bigEndian.order()"}
{"fixCommitSHA1": "53b0527a5dd35cd2e36650a6352b882cc32f714f", "projectName": "apache.hbase", "bugType": "Wrong Function Name", "problem": "    * @throws IOException\n    */\n   public void put(Put put, Integer lockid) throws IOException {\n    this.put(put, lockid, put.writeToWAL());\n   }\n   /**", "fixed": "    * @throws IOException\n    */\n   public void put(Put put, Integer lockid) throws IOException {\n    this.put(put, lockid, put.getWriteToWAL());\n   }\n   /**", "sourceBeforeFix": "put.writeToWAL()", "sourceAfterFix": "put.getWriteToWAL()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  private final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "b715b5c1376b13452ef810bd5e8dedc9982e19ac", "projectName": "Atmosphere.atmosphere", "bugType": "Change Identifier Used", "problem": " public class AtmosphereResourceLifecycleInterceptor implements AtmosphereInterceptor {\n     private String method = \"GET\";\n    private static final Logger logger = LoggerFactory.getLogger(SSEAtmosphereInterceptor.class);\n     @Override\n     public void configure(AtmosphereConfig config) {", "fixed": " public class AtmosphereResourceLifecycleInterceptor implements AtmosphereInterceptor {\n     private String method = \"GET\";\n    private static final Logger logger = LoggerFactory.getLogger(AtmosphereResourceLifecycleInterceptor.class);\n     @Override\n     public void configure(AtmosphereConfig config) {", "sourceBeforeFix": "SSEAtmosphereInterceptor.class", "sourceAfterFix": "AtmosphereResourceLifecycleInterceptor.class"}
{"fixCommitSHA1": "0f93e30213cfcdd118a1bd22641d9e714539bd11", "projectName": "wildfly.wildfly", "bugType": "Same Function Swap Args", "problem": "         String sslPortString = CorbaORBService.getORBProperty(Constants.ORB_SSL_PORT);\n         int sslPort = sslPortString == null ? 0 : Integer.parseInt(sslPortString);\n         try {\n            SSL ssl = new SSL((short) 0,\n                    (short) MIN_SSL_OPTIONS, \n                     (short) sslPort);\n             ORB orb = ORB.init();\n             Any any = orb.create_any();", "fixed": "         String sslPortString = CorbaORBService.getORBProperty(Constants.ORB_SSL_PORT);\n         int sslPort = sslPortString == null ? 0 : Integer.parseInt(sslPortString);\n         try {\n            SSL ssl = new SSL((short) MIN_SSL_OPTIONS,\n                    (short) 0, \n                     (short) sslPort);\n             ORB orb = ORB.init();\n             Any any = orb.create_any();", "sourceBeforeFix": "new SSL((short)0,(short)MIN_SSL_OPTIONS,(short)sslPort)", "sourceAfterFix": "new SSL((short)MIN_SSL_OPTIONS,(short)0,(short)sslPort)"}
{"fixCommitSHA1": "fcbae65716a5006d4adee83eeafe35ed48ef1278", "projectName": "aws.aws-sdk-java", "bugType": "Change Identifier Used", "problem": "                 startChildWorkflowExecutionParameters.setTaskPriority(taskPriority);\n             }\n            String lambdaRole = options.getLambdaRole();\n             if (lambdaRole != null) {\n                 startChildWorkflowExecutionParameters.setLambdaRole(lambdaRole);\n             }", "fixed": "                 startChildWorkflowExecutionParameters.setTaskPriority(taskPriority);\n             }\n            String lambdaRole = optionsOverride.getLambdaRole();\n             if (lambdaRole != null) {\n                 startChildWorkflowExecutionParameters.setLambdaRole(lambdaRole);\n             }", "sourceBeforeFix": "options.getLambdaRole()", "sourceAfterFix": "optionsOverride.getLambdaRole()"}
{"fixCommitSHA1": "4bf80610fd2a67d952312e808edebdb74ebc26bb", "projectName": "Graylog2.graylog2-server", "bugType": "Change Numeric Literal", "problem": "         final PaginatedList<TestDTO> page1 = dbService.findPaginatedWithQueryFilterAndSort(DBQuery.empty(), filter, DBSort.asc(\"title\"), 1, 2);\n         assertThat(page1.pagination().getCount()).isEqualTo(2);\n        assertThat(page1.pagination().getGlobalTotal()).isEqualTo(7);\n         assertThat(page1.delegate())\n                 .extracting(\"title\")\n                 .containsExactly(\"hello2\", \"hello3\");", "fixed": "         final PaginatedList<TestDTO> page1 = dbService.findPaginatedWithQueryFilterAndSort(DBQuery.empty(), filter, DBSort.asc(\"title\"), 1, 2);\n         assertThat(page1.pagination().getCount()).isEqualTo(2);\n        assertThat(page1.pagination().getGlobalTotal()).isEqualTo(5);\n         assertThat(page1.delegate())\n                 .extracting(\"title\")\n                 .containsExactly(\"hello2\", \"hello3\");", "sourceBeforeFix": "assertThat(page2.pagination().getGlobalTotal()).isEqualTo(7)", "sourceAfterFix": "assertThat(page2.pagination().getGlobalTotal()).isEqualTo(5)"}
{"fixCommitSHA1": "35dc7982d28800b4fecdf0772236a2d8e054aa77", "projectName": "spring-projects.spring-boot", "bugType": "Change Modifier", "problem": " \tprivate int port = Integer.valueOf(System.getProperty(\"port\"));\n \t@Test\n\tpublic void testHome() throws Exception {\nString url = \"http:\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);\n \t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);", "fixed": " \tprivate int port = Integer.valueOf(System.getProperty(\"port\"));\n \t@Test\n\tvoid testHome() throws Exception {\nString url = \"http:\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);\n \t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "038ea1803bae1cf3be279b36395b4de4e0ff39b5", "projectName": "openhab.openhab", "bugType": "Change Identifier Used", "problem": " \t\tif (pollFuture != null && !pollFuture.isCancelled())\n \t\t\tpollFuture.cancel(false);\n\t\tlogger.debug(\"rapidRefreshFuture scheduleing for {} millis\", millis);\n \t\tpollFuture = pollService.scheduleAtFixedRate(new Runnable() {\n \t\t\t@Override", "fixed": " \t\tif (pollFuture != null && !pollFuture.isCancelled())\n \t\t\tpollFuture.cancel(false);\n\t\tlogger.trace(\"rapidRefreshFuture scheduleing for {} millis\", millis);\n \t\tpollFuture = pollService.scheduleAtFixedRate(new Runnable() {\n \t\t\t@Override", "sourceBeforeFix": "logger.debug(\"rapidRefreshFutureEnd stopping\")", "sourceAfterFix": "logger.trace(\"rapidRefreshFutureEnd stopping\")"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform2iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toIntBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform3f (int location, float x, float y, float z) {\r", "fixed": " \t}\r\n \tpublic void glUniform2iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform2iv(location, v);\r\n \t}\r\n \tpublic void glUniform2iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform2iv(location, toIntBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform3f (int location, float x, float y, float z) {\r", "sourceBeforeFix": "GL11.glGetInteger(pname,params)", "sourceAfterFix": "GL11.glGetIntegerv(pname,params)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "ba98d83f598bbf2e9f5c41eeb51d36369a088fa6", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Change Modifier", "problem": "                 transfertEncoding == null ? DEFAULT_TRANSFER_ENCODING : transfertEncoding);\n     }\n    public void setFileName(String fileName) {\n         this.fileName = fileName;\n     }", "fixed": "                 transfertEncoding == null ? DEFAULT_TRANSFER_ENCODING : transfertEncoding);\n     }\n    public final void setFileName(String fileName) {\n         this.fileName = fileName;\n     }", "sourceBeforeFix": "1", "sourceAfterFix": "17"}
{"fixCommitSHA1": "1c6bc8ead71b0f8f2939e12cf66a8c61f9fae26e", "projectName": "libgdx.libgdx", "bugType": "Change Caller in Function Call", "problem": " \tprivate IntBuffer toIntBuffer (int v[], int offset, int count) {\r\n \t\tensureBufferCapacity(count << 2);\r\n\t\tfloatBuffer.clear();\r\n \t\tcom.badlogic.gdx.utils.BufferUtils.copy(v, count, offset, intBuffer);\r\n \t\treturn intBuffer;\r\n \t}\r", "fixed": " \tprivate IntBuffer toIntBuffer (int v[], int offset, int count) {\r\n \t\tensureBufferCapacity(count << 2);\r\n\t\tintBuffer.clear();\r\n \t\tcom.badlogic.gdx.utils.BufferUtils.copy(v, count, offset, intBuffer);\r\n \t\treturn intBuffer;\r\n \t}\r", "sourceBeforeFix": "floatBuffer.clear()", "sourceAfterFix": "intBuffer.clear()"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedFtpsEndpointBuilder\n             extends\n                 AdvancedFtpsEndpointConsumerBuilder, AdvancedFtpsEndpointProducerBuilder {\n         default FtpsEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedFtpsEndpointBuilder\n             extends\n                 AdvancedFtpsEndpointConsumerBuilder, AdvancedFtpsEndpointProducerBuilder {\n         default FtpsEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_kr_3() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub14405\uc6d46\uc77c\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_kr_3() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub14405\uc6d46\uc77c\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * @return True, if the given number of bytes for a normalized suffice to determine the order of elements,\n \t *         false otherwise.\n \t */\n\tpublic boolean isNormalizedKeyPrefixOnly(int keyBytes);\n \t/**\n \t * Writes a normalized key for the given record into the target byte array, starting at the specified position", "fixed": " \t * @return True, if the given number of bytes for a normalized suffice to determine the order of elements,\n \t *         false otherwise.\n \t */\n\tpublic abstract boolean isNormalizedKeyPrefixOnly(int keyBytes);\n \t/**\n \t * Writes a normalized key for the given record into the target byte array, starting at the specified position", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "ce4cb40fd95ffc635374e074be1f9f8650dd57d4", "projectName": "apache.hive", "bugType": "Change Unary Operator\t", "problem": "      if (this.mrwork != null && this.mrwork.getHadoopSupportsSplittable()) {", "fixed": "      if (this.mrwork != null && !this.mrwork.getHadoopSupportsSplittable()) {", "sourceBeforeFix": "this.mrwork.getHadoopSupportsSplittable()", "sourceAfterFix": "!this.mrwork.getHadoopSupportsSplittable()"}
{"fixCommitSHA1": "dd20434290eb6ae6dff133d70073e35a3998d362", "projectName": "Alluxio.alluxio", "bugType": "Same Function Less Args", "problem": "                      NetworkAddressUtils.getLocalHostName(ClientContext.getConf()));\n         } catch (IOException ioe) {\n           LOG.warn(\"Failed to get TachyonStore stream, the block \" + currentBlockId\n              + \" will not be in TachyonStorage\", ioe);\n           mShouldCacheCurrentBlock = false;\n         }\n       }", "fixed": "                      NetworkAddressUtils.getLocalHostName(ClientContext.getConf()));\n         } catch (IOException ioe) {\n           LOG.warn(\"Failed to get TachyonStore stream, the block \" + currentBlockId\n              + \" will not be in TachyonStorage\");\n           mShouldCacheCurrentBlock = false;\n         }\n       }", "sourceBeforeFix": "LOG.warn(\"Block of ID \" + getCurrentBlockId() + \" could not be cached into Tachyon\",ioe)", "sourceAfterFix": "LOG.warn(\"Block of ID \" + getCurrentBlockId() + \" could not be cached into Tachyon\")"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShader(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "fixed": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShaderiv(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "sourceBeforeFix": "GL20.glUniform2(location,toIntBuffer(v,offset,count << 1))", "sourceAfterFix": "GL20.glUniform2iv(location,toIntBuffer(v,offset,count << 1))"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n     */\n     public ResponseList<DirectMessage> getDirectMessages() throws TwitterException {\n        return DirectMessage.constructDirectMessages(get(getBaseURL() + \"direct_messages.json\", true));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n     */\n     public ResponseList<DirectMessage> getDirectMessages() throws TwitterException {\n        return DirectMessage.createDirectMessageList(get(getBaseURL() + \"direct_messages.json\", true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweets/\" + statusId+ \".json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweets/\" + statusId+ \".json\",true))"}
{"fixCommitSHA1": "6e0e38f09f74fb633a33cfd5c59265518bcf85be", "projectName": "netty.netty", "bugType": "Wrong Function Name", "problem": "         HttpContent chunk = (HttpContent) ch.readInbound();\n         DecoderResult dr = chunk.getDecoderResult();\n         assertFalse(dr.isSuccess());\n        assertFalse(dr.isFailure());\n         ensureInboundTrafficDiscarded(ch);\n     }", "fixed": "         HttpContent chunk = (HttpContent) ch.readInbound();\n         DecoderResult dr = chunk.getDecoderResult();\n         assertFalse(dr.isSuccess());\n        assertTrue(dr.isFailure());\n         ensureInboundTrafficDiscarded(ch);\n     }", "sourceBeforeFix": "assertFalse(dr.isFailure())", "sourceAfterFix": "assertTrue(dr.isFailure())"}
{"fixCommitSHA1": "55afa119b8685a70ea6335e973814a345e99e2bb", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Change Modifier", "problem": "   private final String secret;\n   private final String percentEncodedKey;\n  ConsumerKey(String key, String secret) {\n     this.key = key;\n     this.secret = secret;\n     this.percentEncodedKey = Utf8UrlEncoder.percentEncodeQueryElement(key);", "fixed": "   private final String secret;\n   private final String percentEncodedKey;\n  public ConsumerKey(String key, String secret) {\n     this.key = key;\n     this.secret = secret;\n     this.percentEncodedKey = Utf8UrlEncoder.percentEncodeQueryElement(key);", "sourceBeforeFix": "0", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedJcloudsEndpointBuilder\n             extends\n                 AdvancedJcloudsEndpointConsumerBuilder, AdvancedJcloudsEndpointProducerBuilder {\n         default JcloudsEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedJcloudsEndpointBuilder\n             extends\n                 AdvancedJcloudsEndpointConsumerBuilder, AdvancedJcloudsEndpointProducerBuilder {\n         default JcloudsEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "a63faf44e1b103a49d25a15c720fc5940ae9fc07", "projectName": "square.retrofit", "bugType": "Change Identifier Used", "problem": "     assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mBodyWildcard = new TypeToken<Maybe<? extends String>>() {}.getType();\n    assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fBodyWildcard = new TypeToken<Flowable<? extends String>>() {}.getType();\n    assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oBodyGeneric = new TypeToken<Observable<List<String>>>() {}.getType();", "fixed": "     assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mBodyWildcard = new TypeToken<Maybe<? extends String>>() {}.getType();\n    assertThat(factory.get(mBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fBodyWildcard = new TypeToken<Flowable<? extends String>>() {}.getType();\n    assertThat(factory.get(fBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oBodyGeneric = new TypeToken<Observable<List<String>>>() {}.getType();", "sourceBeforeFix": "factory.get(sResultClass,NO_ANNOTATIONS,retrofit)", "sourceAfterFix": "factory.get(mResultClass,NO_ANNOTATIONS,retrofit)"}
{"fixCommitSHA1": "3407a44922289dc4ddb3ff87687b8766affeaad9", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t\t}\n \t}\n\tprivate static class SpeedTestForwarder extends AbstractInvokable {\n \t\t@Override\n \t\tpublic void invoke() throws Exception {", "fixed": " \t\t}\n \t}\n\t\n\tpublic static class SpeedTestForwarder extends AbstractInvokable {\n \t\t@Override\n \t\tpublic void invoke() throws Exception {", "sourceBeforeFix": "10", "sourceAfterFix": "9"}
{"fixCommitSHA1": "013bd22eb4848763ee8281e51109b6e98e071cdf", "projectName": "dropwizard.dropwizard", "bugType": "Change Modifier", "problem": "return null;\n     }\n    private void throwRoot() throws SocketTimeoutException {\n         throw new SocketTimeoutException(\"Timed-out reading from socket\");\n     }", "fixed": "return null;\n     }\n    private static void throwRoot() throws SocketTimeoutException {\n         throw new SocketTimeoutException(\"Timed-out reading from socket\");\n     }", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "53c0cde20042683e48266819a47099612e69d5bd", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "                 + \" \\\"deprecated\\\": \\\"false\\\", \\\"secret\\\": \\\"false\\\", \\\"defaultValue\\\": \\\"\\\\\\\\\\\", \\\"description\\\": \\\"The escape character.\\\"\"));\n         List<Map<String, String>> rows = JsonSchemaHelper.parseJsonSchema(\"properties\", json, true);\n        assertEquals(15, rows.size());\n         Map<String, String> found = null;\n         for (Map<String, String> row : rows) {", "fixed": "                 + \" \\\"deprecated\\\": \\\"false\\\", \\\"secret\\\": \\\"false\\\", \\\"defaultValue\\\": \\\"\\\\\\\\\\\", \\\"description\\\": \\\"The escape character.\\\"\"));\n         List<Map<String, String>> rows = JsonSchemaHelper.parseJsonSchema(\"properties\", json, true);\n        assertEquals(16, rows.size());\n         Map<String, String> found = null;\n         for (Map<String, String> row : rows) {", "sourceBeforeFix": "assertEquals(15,rows.size())", "sourceAfterFix": "assertEquals(16,rows.size())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8bfa50ba500a6ca952f97f11c8eaa2969947387e", "projectName": "brianfrankcooper.YCSB", "bugType": "Wrong Function Name", "problem": "\t\tlong st=System.currentTimeMillis();\n \t\tdb.read(table,keyname,fields,new HashMap<String,ByteIterator>());\n \t\tdb.update(table,keyname,values);\n\t\tlong en=System.currentTimeMillis();\n\t\tMeasurements.getMeasurements().measure(\"READ-MODIFY-WRITE\", (int)(en-st));\n \t}\n \tpublic void doTransactionScan(DB db)", "fixed": "\t\tlong st=System.nanoTime();\n \t\tdb.read(table,keyname,fields,new HashMap<String,ByteIterator>());\n \t\tdb.update(table,keyname,values);\n\t\tlong en=System.nanoTime();\n\t\tMeasurements.getMeasurements().measure(\"READ-MODIFY-WRITE\", (int)((en-st)/1000));\n \t}\n \tpublic void doTransactionScan(DB db)", "sourceBeforeFix": "System.currentTimeMillis()", "sourceAfterFix": "System.nanoTime()"}
{"fixCommitSHA1": "486b290863a66641b0ec30dbf2d9e349733cae44", "projectName": "apache.hbase", "bugType": "Wrong Function Name", "problem": "    */\n   public void closeRegion(final String regionname, final String serverName)\n   throws IOException {\n    closeRegion(Bytes.toBytesBinary(regionname), serverName);\n   }\n   /**", "fixed": "    */\n   public void closeRegion(final String regionname, final String serverName)\n   throws IOException {\n    closeRegion(Bytes.toBytes(regionname), serverName);\n   }\n   /**", "sourceBeforeFix": "Bytes.toBytesBinary(regionname)", "sourceAfterFix": "Bytes.toBytes(regionname)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "3757a700a89638e5747d966bdaa8266b62c974c8", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "  */\n @GwtCompatible(emulated = true)\n public class BaseEncodingTest extends TestCase {\n  public void assertEquals(byte[] expected, byte[] actual) {\n     assertEquals(expected.length, actual.length);\n     for (int i = 0; i < expected.length; i++) {\n       assertEquals(expected[i], actual[i]);", "fixed": "  */\n @GwtCompatible(emulated = true)\n public class BaseEncodingTest extends TestCase {\n  public static void assertEquals(byte[] expected, byte[] actual) {\n     assertEquals(expected.length, actual.length);\n     for (int i = 0; i < expected.length; i++) {\n       assertEquals(expected[i], actual[i]);", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "8038c106a246401ddf7690a004d6daa3ee098299", "projectName": "openhab.openhab", "bugType": "Change Identifier Used", "problem": " \t\t\t\t\t\t\tm_address, -dt);\nreturn (timeNow + 2000L);\n \t\t\t\t} else {\n\t\t\t\t\tlogger.warn(\"gave up waiting for query reply from device {}\", m_address);\n \t\t\t\t}\n \t\t\t}\nQEntry qe = m_requestQueue.poll();", "fixed": " \t\t\t\t\t\t\tm_address, -dt);\nreturn (timeNow + 2000L);\n \t\t\t\t} else {\n\t\t\t\t\tlogger.debug(\"gave up waiting for query reply from device {}\", m_address);\n \t\t\t\t}\n \t\t\t}\nQEntry qe = m_requestQueue.poll();", "sourceBeforeFix": "logger.warn(\"gave up waiting for query reply from device {}\",m_address)", "sourceAfterFix": "logger.debug(\"gave up waiting for query reply from device {}\",m_address)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fd2bf7d972c703a603f7ec043b96649347f7e184", "projectName": "facebook.presto", "bugType": "Change Numeric Literal", "problem": "         httpClientBinder(binder).bindHttpClient(\"execute\", ForExecute.class)\n                 .withTracing()\n                 .withConfigDefaults(config -> {\n                    config.setIdleTimeout(new Duration(2, SECONDS));\n                     config.setRequestTimeout(new Duration(10, SECONDS));\n                 });", "fixed": "         httpClientBinder(binder).bindHttpClient(\"execute\", ForExecute.class)\n                 .withTracing()\n                 .withConfigDefaults(config -> {\n                    config.setIdleTimeout(new Duration(30, SECONDS));\n                     config.setRequestTimeout(new Duration(10, SECONDS));\n                 });", "sourceBeforeFix": "new Duration(2,SECONDS)", "sourceAfterFix": "new Duration(30,SECONDS)"}
{"fixCommitSHA1": "1daccd54d2ff2ecdb21d8c60268600c37febbb70", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "         LOG.info(\"Verifying the reading data...\");\n         for (int pId = mLeft; pId < mRight; pId ++) {\n          TachyonFile file = mTC.getFile(FILE_NAME + mWorkerId);\n           buf = file.readByteBuffer(0);\n           IntBuffer intBuf;\n          intBuf = buf.DATA.asIntBuffer();\n           int tmp;\n           for (int i = 0; i < BLOCKS_PER_FILE; i ++) {\n             for (int k = 0; k < BLOCK_SIZE_BYTES / 4; k ++) {", "fixed": "         LOG.info(\"Verifying the reading data...\");\n         for (int pId = mLeft; pId < mRight; pId ++) {\n          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           IntBuffer intBuf;\n          intBuf = buf.DATA.order(ByteOrder.nativeOrder()).asIntBuffer();\n           int tmp;\n           for (int i = 0; i < BLOCKS_PER_FILE; i ++) {\n             for (int k = 0; k < BLOCK_SIZE_BYTES / 4; k ++) {", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "pId + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15860, value = \"No deployment with name %s found\")\n     String noDeploymentContentWithName(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10860, value = \"No deployment with name %s found\")\n     String noDeploymentContentWithName(String name);\n     /**", "sourceBeforeFix": "id=15830", "sourceAfterFix": "id=10830"}
{"fixCommitSHA1": "a382c85225c19d45fe7052af28654cd5aca7ef11", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "                 status = ufs.getStatus(ufsUri);\n               } catch (Exception e) {\n                 throw new IOException(String.format(\"Cannot sync UFS directory %s: %s.\", ufsUri,\n                    e.getMessage()), e);\n               }\n               if (status.isFile()) {\n                 throw new InvalidPathException(String.format(", "fixed": "                 status = ufs.getStatus(ufsUri);\n               } catch (Exception e) {\n                 throw new IOException(String.format(\"Cannot sync UFS directory %s: %s.\", ufsUri,\n                    e.toString()), e);\n               }\n               if (status.isFile()) {\n                 throw new InvalidPathException(String.format(", "sourceBeforeFix": "e.getMessage()", "sourceAfterFix": "e.toString()"}
{"fixCommitSHA1": "af07edf1ab9024a78cb280e85982b1d6661a09ad", "projectName": "apache.hadoop", "bugType": "Change Modifier", "problem": "     setChildren(children);\n   }\n  protected void setJobStatuses(org.apache.hadoop.mapreduce.JobStatus[] stats) {\n     super.setJobStatuses(stats);\n   }", "fixed": "     setChildren(children);\n   }\n  @InterfaceAudience.Private\n  public void setJobStatuses(org.apache.hadoop.mapreduce.JobStatus[] stats) {\n     super.setJobStatuses(stats);\n   }", "sourceBeforeFix": "4", "sourceAfterFix": "1"}
{"fixCommitSHA1": "bc675a98c050975d97bbaac4c135e9558d167b3b", "projectName": "stanfordnlp.CoreNLP", "bugType": "Change Identifier Used", "problem": "     setAll(lowResults,highResults,expectedResults,MENTION_TP,12370);\n     setAll(lowResults,highResults,expectedResults,MENTION_F1,55.6);\n    setAll(lowResults,highResults,expectedResults,MUC_TP,5965);\n     setAll(lowResults,highResults,expectedResults,MUC_F1,57.93);\n     setAll(lowResults,highResults,expectedResults,BCUBED_TP,6868.81);", "fixed": "     setAll(lowResults,highResults,expectedResults,MENTION_TP,12370);\n     setAll(lowResults,highResults,expectedResults,MENTION_F1,55.6);\n    setLowHighExpected(lowResults, highResults, expectedResults, MUC_TP, 5965, 5970, 5965);\n     setAll(lowResults,highResults,expectedResults,MUC_F1,57.93);\n     setAll(lowResults,highResults,expectedResults,BCUBED_TP,6868.81);", "sourceBeforeFix": "setAll(lowResults,highResults,expectedResults,MUC_TP,5965)", "sourceAfterFix": "setLowHighExpected(lowResults,highResults,expectedResults,MUC_TP,5965,5970,5965)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedPropertiesEndpointBuilder\n             extends\n                 AdvancedPropertiesEndpointConsumerBuilder, AdvancedPropertiesEndpointProducerBuilder {\n         default PropertiesEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedPropertiesEndpointBuilder\n             extends\n                 AdvancedPropertiesEndpointConsumerBuilder, AdvancedPropertiesEndpointProducerBuilder {\n         default PropertiesEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  private final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "46ac40646a39bd7aafde961695de777d725c0b7b", "projectName": "google.closure-compiler", "bugType": "Change Boolean Literal", "problem": "     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n       return new PeepholeOptimizationsPass(compiler,\n            new PeepholeSubstituteAlternateSyntax(true),\n             new PeepholeReplaceKnownMethods(),\n             new PeepholeRemoveDeadCode(),\n             new PeepholeFoldConstants(),", "fixed": "     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n       return new PeepholeOptimizationsPass(compiler,\n            new PeepholeSubstituteAlternateSyntax(false),\n             new PeepholeReplaceKnownMethods(),\n             new PeepholeRemoveDeadCode(),\n             new PeepholeFoldConstants(),", "sourceBeforeFix": "new PeepholeSubstituteAlternateSyntax(false)", "sourceAfterFix": "new PeepholeSubstituteAlternateSyntax(true)"}
{"fixCommitSHA1": "120e7f76c8012e3821d6c14f992ba44e7ddea8b8", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "     public void testRouteStartupOrder() throws Exception {\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedMessageCount(0);\n         template.sendBody(\"direct:start\", \"Hello World\");", "fixed": "     public void testRouteStartupOrder() throws Exception {\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedMessageCount(1);\n         template.sendBody(\"direct:start\", \"Hello World\");", "sourceBeforeFix": "mock.expectedMessageCount(0)", "sourceAfterFix": "mock.expectedMessageCount(1)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface KubernetesSecretsEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedKubernetesSecretsEndpointBuilder advanced() {", "fixed": "     \n    public interface KubernetesSecretsEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedKubernetesSecretsEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  private final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "62a4bfb9380fad4992d3e9f6347ad7ff34d904b7", "projectName": "neo4j.neo4j", "bugType": "Change Identifier Used", "problem": "             PropertyRecord prev = props.forceGetRecord( prevId );\n             if ( !prev.inUse() )\n                 fail |= inconsistent( props, property, prev, \"invalid prev reference, prev record not in use\" );\n            if ( prev.getPrevProp() != property.getId() )\n                 fail |= inconsistent( props, property, prev, \"invalid prev reference, prev record does not reference back\" );\n         }\nelse", "fixed": "             PropertyRecord prev = props.forceGetRecord( prevId );\n             if ( !prev.inUse() )\n                 fail |= inconsistent( props, property, prev, \"invalid prev reference, prev record not in use\" );\n            if ( prev.getNextProp() != property.getId() )\n                 fail |= inconsistent( props, property, prev, \"invalid prev reference, prev record does not reference back\" );\n         }\nelse", "sourceBeforeFix": "prev.getPrevProp()", "sourceAfterFix": "prev.getNextProp()"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedServiceNowEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default ServiceNowEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedServiceNowEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default ServiceNowEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<DirectMessage> getDirectMessages(Paging paging) throws TwitterException {\n        return DirectMessage.constructDirectMessages(get(getBaseURL()\n                 + \"direct_messages.json\", null, paging.asPostParameterList(), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<DirectMessage> getDirectMessages(Paging paging) throws TwitterException {\n        return DirectMessage.createDirectMessageList(get(getBaseURL()\n                 + \"direct_messages.json\", null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))"}
{"fixCommitSHA1": "f1e382c89dbbc36ae1b116052b1ed8f780c0178c", "projectName": "netty.netty", "bugType": "Same Function Less Args", "problem": "                 Class<?> sctpChannelClass = Class.forName(\"com.sun.nio.sctp.SctpChannel\");\n                Channel channel = (Channel) sctpChannelClass.getMethod(\"open\", null).invoke(null, null);\n                 try {\n                     channel.close();\n                 } catch (IOException e) {", "fixed": "                 Class<?> sctpChannelClass = Class.forName(\"com.sun.nio.sctp.SctpChannel\");\n                Channel channel = (Channel) sctpChannelClass.getMethod(\"open\").invoke(null);\n                 try {\n                     channel.close();\n                 } catch (IOException e) {", "sourceBeforeFix": "sctpChannelClass.getMethod(\"open\",null)", "sourceAfterFix": "sctpChannelClass.getMethod(\"open\")"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should return all global properties in the database\n \t */\n \t@Authorized(PrivilegeConstants.GET_GLOBAL_PROPERTIES)\n\tpublic List<GlobalProperty> getAllGlobalProperties() throws APIException;\n \t/**\n \t * Save the given list of global properties to the database.", "fixed": " \t * @should return all global properties in the database\n \t */\n \t@Authorized(PrivilegeConstants.GET_GLOBAL_PROPERTIES)\n\tpublic List<GlobalProperty> getAllGlobalProperties();\n \t/**\n \t * Save the given list of global properties to the database.", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleActionsPredicatesOptions_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(239);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");", "fixed": " \tpublic void testMultipleActionsPredicatesOptions_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(238);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");", "sourceBeforeFix": "new StringBuilder(561)", "sourceAfterFix": "new StringBuilder(560)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "2", "sourceAfterFix": "0"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "2", "sourceAfterFix": "0"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15860, value = \"No deployment with name %s found\")\n     String noDeploymentContentWithName(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10860, value = \"No deployment with name %s found\")\n     String noDeploymentContentWithName(String name);\n     /**", "sourceBeforeFix": "id=15837", "sourceAfterFix": "id=10837"}
{"fixCommitSHA1": "0c2a092d9e9116507ccd2dd8e66fd436e0fb025f", "projectName": "stanfordnlp.CoreNLP", "bugType": "Change Identifier Used", "problem": "   @Override\n   public Annotation createFromFile(File file) throws IOException {\n    return createFromFile(file.getAbsoluteFile());\n   }\n   @Override", "fixed": "   @Override\n   public Annotation createFromFile(File file) throws IOException {\n    return createFromFile(file.getAbsolutePath());\n   }\n   @Override", "sourceBeforeFix": "file.getAbsoluteFile()", "sourceAfterFix": "file.getAbsolutePath()"}
{"fixCommitSHA1": "8998e8b7b968250096364d48006a5c8708531290", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic Texture (FileHandle file, Format format, boolean useMipMaps) {\r\n\t\tif (file.name().contains(\".etc1\")) {\r\n \t\t\tcreate(new ETC1TextureData(file, useMipMaps));\r\n \t\t} else {\r\n \t\t\tcreate(new FileTextureData(file, null, format, useMipMaps));\r", "fixed": " \t}\r\n \tpublic Texture (FileHandle file, Format format, boolean useMipMaps) {\r\n\t\tif (file.name().endsWith(\".etc1\")) {\r\n \t\t\tcreate(new ETC1TextureData(file, useMipMaps));\r\n \t\t} else {\r\n \t\t\tcreate(new FileTextureData(file, null, format, useMipMaps));\r", "sourceBeforeFix": "file.name().contains(\".etc1\")", "sourceAfterFix": "file.name().endsWith(\".etc1\")"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface SoroushBotEndpointBuilder\n             extends\n                 SoroushBotEndpointConsumerBuilder, SoroushBotEndpointProducerBuilder {\n         default AdvancedSoroushBotEndpointBuilder advanced() {", "fixed": "     \n    public interface SoroushBotEndpointBuilder\n             extends\n                 SoroushBotEndpointConsumerBuilder, SoroushBotEndpointProducerBuilder {\n         default AdvancedSoroushBotEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "291e15e330c9b71a0d0238e9d56d4b2a473356af", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "             @Override\n             public void configure() throws Exception {\n                 from(\"direct:start\")\n                    .transform(to(\"direct:foo\")).to(\"mock:result\");\n                 from(\"direct:foo\").process(new Processor() {\n                     public void process(Exchange exchange) throws Exception {", "fixed": "             @Override\n             public void configure() throws Exception {\n                 from(\"direct:start\")\n                    .transform(sendTo(\"direct:foo\")).to(\"mock:result\");\n                 from(\"direct:foo\").process(new Processor() {\n                     public void process(Exchange exchange) throws Exception {", "sourceBeforeFix": "to(\"bar\")", "sourceAfterFix": "sendTo(\"bar\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e0e43deaec26384766a61874db4aaa6bda4ae415", "projectName": "druid-io.druid", "bugType": "Less Specific If", "problem": "         final DimensionSelector dimSelector = dims.get(0);\n         final IndexedInts row = dimSelector.getRow();\n        if (row.size() == 0) {\n           ByteBuffer newKey = key.duplicate();\n           newKey.putInt(dimSelector.getValueCardinality());\n           unaggregatedBuffers = updateValues(newKey, dims.subList(1, dims.size()));", "fixed": "         final DimensionSelector dimSelector = dims.get(0);\n         final IndexedInts row = dimSelector.getRow();\n        if (row == null || row.size() == 0) {\n           ByteBuffer newKey = key.duplicate();\n           newKey.putInt(dimSelector.getValueCardinality());\n           unaggregatedBuffers = updateValues(newKey, dims.subList(1, dims.size()));", "sourceBeforeFix": "row.size() == 0", "sourceAfterFix": "row == null || row.size() == 0"}
{"fixCommitSHA1": "7504963a65930f0b3332774f8a6d0db70c94fa12", "projectName": "Alluxio.alluxio", "bugType": "Change Modifier", "problem": "     CLIENT.user_deleteById(fileId);\n   }\n  public ClientFileInfo user_getClientFileInfoByPath(String path)\n       throws FileDoesNotExistException, InvalidPathException, TException {\n     return CLIENT.user_getClientFileInfoByPath(path);\n   }\n  public ClientFileInfo user_getClientFileInfoById(int id)\n       throws FileDoesNotExistException, TException {\n     return CLIENT.user_getClientFileInfoById(id);\n   }", "fixed": "     CLIENT.user_deleteById(fileId);\n   }\n  public synchronized ClientFileInfo user_getClientFileInfoByPath(String path)\n       throws FileDoesNotExistException, InvalidPathException, TException {\n     return CLIENT.user_getClientFileInfoByPath(path);\n   }\n  public synchronized ClientFileInfo user_getClientFileInfoById(int id)\n       throws FileDoesNotExistException, TException {\n     return CLIENT.user_getClientFileInfoById(id);\n   }", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_cn_4() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e7405\u670806\u65e5\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_cn_4() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\u5e7405\u670806\u65e5\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "bcb6eeec1d978d6d572ebec875d34dc64aeb5121", "projectName": "alibaba.dubbo", "bugType": "Wrong Function Name", "problem": "         String methodKey = method + \".\" + key;\r\n         Number n = getNumbers().get(methodKey);\r\n         if (n != null) {\r\n            return n.intValue();\r\n         }\r\n         String value = getMethodParameter(method, key);\r\n         if (StringUtils.isEmpty(value)) {\r", "fixed": "         String methodKey = method + \".\" + key;\r\n         Number n = getNumbers().get(methodKey);\r\n         if (n != null) {\r\n            return n.floatValue();\r\n         }\r\n         String value = getMethodParameter(method, key);\r\n         if (StringUtils.isEmpty(value)) {\r", "sourceBeforeFix": "n.intValue()", "sourceAfterFix": "n.longValue()"}
{"fixCommitSHA1": "a35860eadb4400f069e306ccd76f1a19ecfb3ba1", "projectName": "google.guava", "bugType": "Change Identifier Used", "problem": "   @SuppressWarnings(\"unchecked\")\n   @Override\n  public V value(Object node) {\n     Object value = adjacentNodeValues.get(node);\n     if (value == PRED) {\n       return null;", "fixed": "   @SuppressWarnings(\"unchecked\")\n   @Override\n  public V value(N node) {\n     Object value = adjacentNodeValues.get(node);\n     if (value == PRED) {\n       return null;", "sourceBeforeFix": "Object node", "sourceAfterFix": "N node"}
{"fixCommitSHA1": "38eb6222bddaf49c3c9ae73ddef0cfe4ff5efa48", "projectName": "alibaba.dubbo", "bugType": "Change Numeric Literal", "problem": "     @Test\n     public void test_Decode_Error_Length() throws IOException {\n        byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, 0x20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n         Person person = new Person();\n         byte[] request = getRequestBytes(person, header);", "fixed": "     @Test\n     public void test_Decode_Error_Length() throws IOException {\n        byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, 0x02, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n         Person person = new Person();\n         byte[] request = getRequestBytes(person, header);", "sourceBeforeFix": "(byte)0xdf", "sourceAfterFix": "(byte)0xe2"}
{"fixCommitSHA1": "0187e5106dfc5034b8b1650083eab37181ff0de3", "projectName": "spring-projects.spring-boot", "bugType": "Change Modifier", "problem": "  * @author Stephane Nicoll\n  * @author Dominic Gunn\n  * @author Andr\u00e1s De\u00e1k\n  */\n public class LiquibaseAutoConfigurationTests {", "fixed": "  * @author Stephane Nicoll\n  * @author Dominic Gunn\n  * @author Andr\u00e1s De\u00e1k\n * @author Andrii Hrytsiuk\n  */\n public class LiquibaseAutoConfigurationTests {", "sourceBeforeFix": "0", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15845, value = \"Invalid rollout plan. Server group %s has a %s value of %s; must be between 0 and 100.\")\n     String invalidRolloutPlanRange(String name, String propertyName, int value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10845, value = \"Invalid rollout plan. Server group %s has a %s value of %s; must be between 0 and 100.\")\n     String invalidRolloutPlanRange(String name, String propertyName, int value);\n     /**", "sourceBeforeFix": "id=15846", "sourceAfterFix": "id=10846"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 15872, value = \"Invalid code %d\")\n     IllegalArgumentException invalidCode(int code);\n }", "fixed": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 10872, value = \"Invalid code %d\")\n     IllegalArgumentException invalidCode(int code);\n }", "sourceBeforeFix": "id=15841", "sourceAfterFix": "id=10841"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": "grammarBuilder.append(\"  | '(' e ')'   {$v = $e.v;}\ngrammarBuilder.append(\"  | left=e INC  {$v = $left.v + 1;}\ngrammarBuilder.append(\"  | left=e DEC  {$v = $left.v - 1;}\n\t\tgrammarBuilder.append(\"  | ID          {$v = 3}\n \t\tgrammarBuilder.append(\"  ;\\n\");\n \t\tgrammarBuilder.append(\"ID : 'a'..'z'+ ;\\n\");\n \t\tgrammarBuilder.append(\"INT : '0'..'9'+ ;\\n\");", "fixed": "grammarBuilder.append(\"  | '(' e ')'   {$v = $e.v;}\ngrammarBuilder.append(\"  | left=e INC  {$v = $left.v + 1;}\ngrammarBuilder.append(\"  | left=e DEC  {$v = $left.v - 1;}\n\t\tgrammarBuilder.append(\"  | ID          {$v = 3;}\n \t\tgrammarBuilder.append(\"  ;\\n\");\n \t\tgrammarBuilder.append(\"ID : 'a'..'z'+ ;\\n\");\n \t\tgrammarBuilder.append(\"INT : '0'..'9'+ ;\\n\");", "sourceBeforeFix": "new StringBuilder(254)", "sourceAfterFix": "new StringBuilder(253)"}
{"fixCommitSHA1": "b06cd886290c6ff0c6f0a398b31c30d92c6e8fbf", "projectName": "hazelcast.hazelcast", "bugType": "Change Caller in Function Call", "problem": "         String trustStore = getProperty(properties, \"trustStore\", keyStore);\n         String trustStorePassword = getProperty(properties, \"trustStorePassword\", keyStorePassword);\n        String keyManagerAlgorithm = properties.getProperty(\"keyManagerAlgorithm\", TrustManagerFactory.getDefaultAlgorithm());\n         String trustManagerAlgorithm = properties.getProperty(\"trustManagerAlgorithm\", TrustManagerFactory.getDefaultAlgorithm());\n         String protocol = properties.getProperty(\"protocol\", \"TLS\");", "fixed": "         String trustStore = getProperty(properties, \"trustStore\", keyStore);\n         String trustStorePassword = getProperty(properties, \"trustStorePassword\", keyStorePassword);\n        String keyManagerAlgorithm = properties.getProperty(\"keyManagerAlgorithm\", KeyManagerFactory.getDefaultAlgorithm());\n         String trustManagerAlgorithm = properties.getProperty(\"trustManagerAlgorithm\", TrustManagerFactory.getDefaultAlgorithm());\n         String protocol = properties.getProperty(\"protocol\", \"TLS\");", "sourceBeforeFix": "TrustManagerFactory.getDefaultAlgorithm()", "sourceAfterFix": "KeyManagerFactory.getDefaultAlgorithm()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15860, value = \"No deployment with name %s found\")\n     String noDeploymentContentWithName(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10860, value = \"No deployment with name %s found\")\n     String noDeploymentContentWithName(String name);\n     /**", "sourceBeforeFix": "id=15859", "sourceAfterFix": "id=10859"}
{"fixCommitSHA1": "d904333295305778c4db69ce4b7c1b441fa1a99c", "projectName": "Activiti.Activiti", "bugType": "Change Unary Operator\t", "problem": "         Expression ruleName = itRuleNames.next();\n         filter.addSuffic(ruleName.getValue(execution).toString());\n       }\n      filter.setAccept(exclude);\n       ksession.fireAllRules(filter);\n     } else {", "fixed": "         Expression ruleName = itRuleNames.next();\n         filter.addSuffic(ruleName.getValue(execution).toString());\n       }\n      filter.setAccept(!exclude);\n       ksession.fireAllRules(filter);\n     } else {", "sourceBeforeFix": "exclude", "sourceAfterFix": "!exclude"}
{"fixCommitSHA1": "01652fca46c0149bb14ed9f159224213175c30d7", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "         when(mock.getColumn()).thenReturn(1);\n         when(mock.getMessage()).thenReturn(\"Mocked message.\");\n         when(mock.getFileName()).thenReturn(\"InputMockFile.java\");\n        final AuditEvemtFormatter formatter = new AuditEventDefaultFormatter();\n         final String expected = \"[WARN] InputMockFile.java:1:1: Mocked message. [TestModule]\";", "fixed": "         when(mock.getColumn()).thenReturn(1);\n         when(mock.getMessage()).thenReturn(\"Mocked message.\");\n         when(mock.getFileName()).thenReturn(\"InputMockFile.java\");\n        final AuditEventFormatter formatter = new AuditEventDefaultFormatter();\n         final String expected = \"[WARN] InputMockFile.java:1:1: Mocked message. [TestModule]\";", "sourceBeforeFix": "final AuditEvemtFormatter formatter=new AuditEventDefaultFormatter(); ", "sourceAfterFix": "final AuditEventFormatter formatter=new AuditEventDefaultFormatter(); "}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "fixed": "   }\n   \n  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "1daccd54d2ff2ecdb21d8c60268600c37febbb70", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "       } else {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n           InputStream is = mHdfsFs.open(new Path(filePath));\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;", "fixed": "       } else {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           InputStream is = mHdfsFs.open(new Path(filePath));\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "a63faf44e1b103a49d25a15c720fc5940ae9fc07", "projectName": "square.retrofit", "bugType": "Change Identifier Used", "problem": "     assertThat(factory.get(sBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mBodyClass = new TypeToken<Maybe<String>>() {}.getType();\n    assertThat(factory.get(sBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fBodyClass = new TypeToken<Flowable<String>>() {}.getType();\n    assertThat(factory.get(sBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oBodyWildcard = new TypeToken<Observable<? extends String>>() {}.getType();", "fixed": "     assertThat(factory.get(sBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mBodyClass = new TypeToken<Maybe<String>>() {}.getType();\n    assertThat(factory.get(mBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fBodyClass = new TypeToken<Flowable<String>>() {}.getType();\n    assertThat(factory.get(fBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oBodyWildcard = new TypeToken<Observable<? extends String>>() {}.getType();", "sourceBeforeFix": "factory.get(sBodyWildcard,NO_ANNOTATIONS,retrofit)", "sourceAfterFix": "factory.get(mBodyWildcard,NO_ANNOTATIONS,retrofit)"}
{"fixCommitSHA1": "3dddcc4cdf4a74ddbd4607c6aaee5bdd8ac46c27", "projectName": "gephi.gephi", "bugType": "Change Modifier", "problem": "     }\n     @Override\n    public void mouseMove() {\n         if (vizConfig.isSelectionEnable() && rectangleSelection) {\n             Rectangle rectangle = (Rectangle) currentSelectionArea;", "fixed": "     }\n     @Override\n    public synchronized void mouseMove() {\n         if (vizConfig.isSelectionEnable() && rectangleSelection) {\n             Rectangle rectangle = (Rectangle) currentSelectionArea;", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "038ea1803bae1cf3be279b36395b4de4e0ff39b5", "projectName": "openhab.openhab", "bugType": "Change Identifier Used", "problem": " \t\t\tObjectMapper mapper = new ObjectMapper();\n \t\t\tJsonNode rootNode = mapper.readTree(dataString);\n \t\t\tint returnCode = rootNode.get(\"ReturnCode\").asInt();\n\t\t\tlogger.debug(\"myq ReturnCode: {}\", returnCode);\n \t\t\tMyQResponseCode rc = MyQResponseCode.fromCode(returnCode);", "fixed": " \t\t\tObjectMapper mapper = new ObjectMapper();\n \t\t\tJsonNode rootNode = mapper.readTree(dataString);\n \t\t\tint returnCode = rootNode.get(\"ReturnCode\").asInt();\n\t\t\tlogger.trace(\"myq ReturnCode: {}\", returnCode);\n \t\t\tMyQResponseCode rc = MyQResponseCode.fromCode(returnCode);", "sourceBeforeFix": "logger.debug(\"Requsting URL {}\",url)", "sourceAfterFix": "logger.trace(\"Requsting URL {}\",url)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  private final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "40e6bbe55f7141bd66a52261e108a1f3b575ca6f", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "         final R record = createRecord(value, expirationTime);\n         updateHasExpiringEntry(record);\n         if (isEventsEnabled()) {\n            publishEvent(createCacheCreatedEvent(keyData, toEventData(value), expirationTime, origin, completionId));\n         }\n         return record;\n     }", "fixed": "         final R record = createRecord(value, expirationTime);\n         updateHasExpiringEntry(record);\n         if (isEventsEnabled()) {\n            publishEvent(createCacheCreatedEvent(toEventData(keyData), toEventData(value),\n                                                 expirationTime, origin, completionId));\n         }\n         return record;\n     }", "sourceBeforeFix": "toHeapData(key)", "sourceAfterFix": "toEventData(key)"}
{"fixCommitSHA1": "051910f66628ff4438c86ecdf5f6ea16810454f9", "projectName": "alibaba.druid", "bugType": "Less Specific If", "problem": "                 break;\n             }\n        } else if (lexer.token() == (Token.SELECT)) {\n             SQLSelect select = this.exprParser.createSelectParser().select();\n             select.setParent(insertStatement);\n             insertStatement.setQuery(select);", "fixed": "                 break;\n             }\n        } else if (lexer.token() == (Token.SELECT) \n        \t\t|| lexer.token() == (Token.SEL)) {\n             SQLSelect select = this.exprParser.createSelectParser().select();\n             select.setParent(insertStatement);\n             insertStatement.setQuery(select);", "sourceBeforeFix": "lexer.token() == (Token.SELECT)", "sourceAfterFix": "lexer.token() == (Token.SELECT) || lexer.token() == (Token.SEL)"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "                 cacheRecordStore.updateRecordWithExpiry(keyData, value, record, expiryPolicy, now, false);\n                 if (isStatisticsEnabled) {\n                     statistics.increaseCachePuts(1);\n                    statistics.addGetTimeNano(System.nanoTime() - start);\n                 }\n                 break;\n             case REMOVE:", "fixed": "                 cacheRecordStore.updateRecordWithExpiry(keyData, value, record, expiryPolicy, now, false);\n                 if (isStatisticsEnabled) {\n                     statistics.increaseCachePuts(1);\n                    statistics.addGetTimeNanos(System.nanoTime() - start);\n                 }\n                 break;\n             case REMOVE:", "sourceBeforeFix": "statistics.addGetTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addGetTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedSchematronEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default SchematronEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedSchematronEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default SchematronEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "1e2cf9d47636b382fe1c76f8d00e9e641699603a", "projectName": "alibaba.canal", "bugType": "Wrong Function Name", "problem": "                     switch (len) {\r\n                         case 1:\r\n                            value = buffer.getInt8();\r\n                             break;\r\n                         case 2:\r\n                             value = buffer.getBeUint16();\r", "fixed": "                     switch (len) {\r\n                         case 1:\r\n                            value = buffer.getUint8();\r\n                             break;\r\n                         case 2:\r\n                             value = buffer.getBeUint16();\r", "sourceBeforeFix": "buffer.getInt8()", "sourceAfterFix": "buffer.getUint8()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  private final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface ClassEndpointBuilder\n            extends\n                EndpointProducerBuilder {\n         default AdvancedClassEndpointBuilder advanced() {\n             return (AdvancedClassEndpointBuilder) this;\n         }", "fixed": "     \n    public interface ClassEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedClassEndpointBuilder advanced() {\n             return (AdvancedClassEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15867, value = \"Cannot use %s with the same value for parameters %s and %s. \" +\n             \"Use %s to redeploy the same content or %s to replace content with a new version with the same name.\")\n     String cannotUseSameValueForParameters(String opName, String param1, String param2, String redeployOpName, String replaceOpName);", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10867, value = \"Cannot use %s with the same value for parameters %s and %s. \" +\n             \"Use %s to redeploy the same content or %s to replace content with a new version with the same name.\")\n     String cannotUseSameValueForParameters(String opName, String param1, String param2, String redeployOpName, String replaceOpName);", "sourceBeforeFix": "id=15871", "sourceAfterFix": "id=10871"}
{"fixCommitSHA1": "19c2a076c25faf94ae9e8f4072f2a4590c9ee1fe", "projectName": "spring-projects.spring-boot", "bugType": "Wrong Function Name", "problem": " \t\t}\n \t\tfactory.setInitializers(Arrays.asList(initializers[2], initializers[3]));\n \t\tfactory.addInitializers(initializers[4], initializers[5]);\n\t\tthis.container = factory.getEmbdeddedServletContainer(initializers[0],\n \t\t\t\tinitializers[1]);\n \t\tInOrder ordered = inOrder((Object[]) initializers);\n \t\tfor (ServletContextInitializer initializer : initializers) {", "fixed": " \t\t}\n \t\tfactory.setInitializers(Arrays.asList(initializers[2], initializers[3]));\n \t\tfactory.addInitializers(initializers[4], initializers[5]);\n\t\tthis.container = factory.getEmbeddedServletContainer(initializers[0],\n \t\t\t\tinitializers[1]);\n \t\tInOrder ordered = inOrder((Object[]) initializers);\n \t\tfor (ServletContextInitializer initializer : initializers) {", "sourceBeforeFix": "factory.getEmbdeddedServletContainer()", "sourceAfterFix": "factory.getEmbeddedServletContainer()"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n \t * @param toCompare The element to set as the comparison reference.\n \t */\n\tpublic void setReference(T toCompare);\n \t/**\n \t * Checks, whether the given element is equal to the element that has been set as the comparison", "fixed": " \t * \n \t * @param toCompare The element to set as the comparison reference.\n \t */\n\tpublic abstract void setReference(T toCompare);\n \t/**\n \t * Checks, whether the given element is equal to the element that has been set as the comparison", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweets(long statusId) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL()\n                 + \"statuses/retweets/\" + statusId + \".json\", true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweets(long statusId) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL()\n                 + \"statuses/retweets/\" + statusId + \".json\", true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface KubernetesConfigMapsEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedKubernetesConfigMapsEndpointBuilder advanced() {", "fixed": "     \n    public interface KubernetesConfigMapsEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedKubernetesConfigMapsEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getMentions(Paging paging) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getMentions(Paging paging) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweets_of_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweets_of_me.json\",null,true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15869, value = \"Unknown %s %s\")\n     String unknown(String name, String value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10869, value = \"Unknown %s %s\")\n     String unknown(String name, String value);\n     /**", "sourceBeforeFix": "id=15860", "sourceAfterFix": "id=10860"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15857, value = \"Only 1 piece of content is currently supported (AS7-431)\")\n     String as7431();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10857, value = \"Only 1 piece of content is currently supported (AS7-431)\")\n     String as7431();\n     /**", "sourceBeforeFix": "id=15869", "sourceAfterFix": "id=10869"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "466bf63f35eee009f11ed069892907c7057ce1b7", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": " \nclass DeleteStoreHandler extends AbstactStoreHandler<DelayedEntry> {\n     protected DeleteStoreHandler(MapStoreWrapper storeWrapper) {\n         super(storeWrapper);", "fixed": " \nclass DeleteStoreHandler extends AbstractStoreHandler<DelayedEntry> {\n     protected DeleteStoreHandler(MapStoreWrapper storeWrapper) {\n         super(storeWrapper);", "sourceBeforeFix": "AbstactStoreHandler<DelayedEntry>", "sourceAfterFix": "AbstractStoreHandler<DelayedEntry>"}
{"fixCommitSHA1": "385b42d9fd284c23c48987dae294449740a70853", "projectName": "apache.flink", "bugType": "Wrong Function Name", "problem": " \t\t\t\t\tresponder.doRespond(call);\n \t\t\t\t} catch (InterruptedException e) {\nif (running) {\n\t\t\t\t\t\tLOG.info(getName() + \" caught: \", e);\n \t\t\t\t\t}\n \t\t\t\t} catch (Exception e) {\n\t\t\t\t\tLOG.info(getName() + \" caught: \", e);\n \t\t\t\t}\n \t\t\t}\n \t\t\tLOG.debug(getName() + \": exiting\");", "fixed": " \t\t\t\t\tresponder.doRespond(call);\n \t\t\t\t} catch (InterruptedException e) {\nif (running) {\n\t\t\t\t\t\tLOG.error(getName() + \" caught: \", e);\n \t\t\t\t\t}\n \t\t\t\t} catch (Exception e) {\n\t\t\t\t\tLOG.error(getName() + \" caught: \", e);\n \t\t\t\t}\n \t\t\t}\n \t\t\tLOG.debug(getName() + \": exiting\");", "sourceBeforeFix": "LOG.info(getName() + \" caught: \",e)", "sourceAfterFix": "LOG.error(getName() + \" caught: \",e)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  private final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "4d5804923d55353b214b8e2a45a6416a75665a4d", "projectName": "google.guice", "bugType": "Change Binary Operator", "problem": "             InjectableMethod injectableMethod = new InjectableMethod(\n                 current, method, atInject);\n             if (checkForMisplacedBindingAnnotations(method, errors)\n                | !isValidMethod(injectableMethod, errors)) {\n               if (overrideIndex != null) {\n                 boolean removed = overrideIndex.removeIfOverriddenBy(method, false, injectableMethod);\n                 if(removed) {", "fixed": "             InjectableMethod injectableMethod = new InjectableMethod(\n                 current, method, atInject);\n             if (checkForMisplacedBindingAnnotations(method, errors)\n                || !isValidMethod(injectableMethod, errors)) {\n               if (overrideIndex != null) {\n                 boolean removed = overrideIndex.removeIfOverriddenBy(method, false, injectableMethod);\n                 if(removed) {", "sourceBeforeFix": "checkForMisplacedBindingAnnotations(method,errors) | !isValidMethod(injectableMethod,errors)", "sourceAfterFix": "checkForMisplacedBindingAnnotations(method,errors) || !isValidMethod(injectableMethod,errors)"}
{"fixCommitSHA1": "f2188d334cf2e91dbd62f84aeba025186738f4ea", "projectName": "alibaba.dubbo", "bugType": "Change Numeric Literal", "problem": "     String layer() default \"\";\n    int retries() default 0;\n     String loadbalance() default \"\";", "fixed": "     String layer() default \"\";\n    int retries() default 2;\n     String loadbalance() default \"\";", "sourceBeforeFix": "int retries() default 0; ", "sourceAfterFix": "int retries() default 2; "}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface JGroupsRaftEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedJGroupsRaftEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface JGroupsRaftEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedJGroupsRaftEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCachePuts(1);\n            statistics.addPutTimeNano(System.nanoTime() - start);\n         }\n         return result;\n     }", "fixed": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCachePuts(1);\n            statistics.addPutTimeNanos(System.nanoTime() - start);\n         }\n         return result;\n     }", "sourceBeforeFix": "statistics.addPutTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addPutTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleActionsPredicatesOptions_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(239);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");", "fixed": " \tpublic void testMultipleActionsPredicatesOptions_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(238);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");", "sourceBeforeFix": "new StringBuilder(239)", "sourceAfterFix": "new StringBuilder(238)"}
{"fixCommitSHA1": "deebc98a0cad2ee5bba5c0fcf8c5da4d666ff3c4", "projectName": "wildfly.wildfly", "bugType": "Change Modifier", "problem": "      *\n      * @param context The start context\n      */\n    public void start(StartContext context) throws StartException {\n         classifyingModuleLoader = new ClassifyingModuleLoader(delegates, Module.getCurrentLoader());\n         Module.setModuleLoaderSelector(new SimpleModuleLoaderSelector(classifyingModuleLoader));\n     }", "fixed": "      *\n      * @param context The start context\n      */\n    public synchronized void start(StartContext context) throws StartException {\n         classifyingModuleLoader = new ClassifyingModuleLoader(delegates, Module.getCurrentLoader());\n         Module.setModuleLoaderSelector(new SimpleModuleLoaderSelector(classifyingModuleLoader));\n     }", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "7f35f8a98258ad87aebe45b6b9a88e269d19e5de", "projectName": "spring-projects.spring-boot", "bugType": "Change Unary Operator\t", "problem": " \t\t}\n \t\twhile (i2 < l2) {\n \t\t\tchar ch2 = e2.charAt(i, i2++);\n\t\t\tif (indexed2 || !ElementsParser.isAlphaNumeric(ch2)) {\n \t\t\t\treturn false;\n \t\t\t}\n \t\t}", "fixed": " \t\t}\n \t\twhile (i2 < l2) {\n \t\t\tchar ch2 = e2.charAt(i, i2++);\n\t\t\tif (indexed2 || ElementsParser.isAlphaNumeric(ch2)) {\n \t\t\t\treturn false;\n \t\t\t}\n \t\t}", "sourceBeforeFix": "!ElementsParser.isAlphaNumeric(ch2)", "sourceAfterFix": "ElementsParser.isAlphaNumeric(ch2)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  private final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "0355f17f04738ad9315d0c8ecad1b282f836e7f3", "projectName": "antlr.antlr4", "bugType": "Change Identifier Used", "problem": " \t\tchar[] serializedAtn = ATNSerializer.getSerializedAsChars(atn);\n \t\tATN deserialized = new ATNDeserializer().deserialize(serializedAtn);\n\t\treturn new LexerInterpreter(fileName, Arrays.asList(getTokenNames()), Arrays.asList(getRuleNames()), ((LexerGrammar)this).modes.keySet(), deserialized, input);\n \t}\n \tpublic ParserInterpreter createParserInterpreter(TokenStream tokenStream) {", "fixed": " \t\tchar[] serializedAtn = ATNSerializer.getSerializedAsChars(atn);\n \t\tATN deserialized = new ATNDeserializer().deserialize(serializedAtn);\n\t\treturn new LexerInterpreter(fileName, Arrays.asList(getTokenDisplayNames()), Arrays.asList(getRuleNames()), ((LexerGrammar)this).modes.keySet(), deserialized, input);\n \t}\n \tpublic ParserInterpreter createParserInterpreter(TokenStream tokenStream) {", "sourceBeforeFix": "getTokenNames()", "sourceAfterFix": "getTokenDisplayNames()"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "fixed": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "sourceBeforeFix": "GL11.glGetFloat(pname,params)", "sourceAfterFix": "GL11.glGetFloatv(pname,params)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      * @param hostName the name of the host.\n      */\n     @LogMessage(level = Level.WARN)\n    @Message(id = 15804, value = \"Interrupted awaiting final response from host %s\")\n     void interruptedAwaitingFinalResponse(String hostName);\n     /**", "fixed": "      * @param hostName the name of the host.\n      */\n     @LogMessage(level = Level.WARN)\n    @Message(id = 10804, value = \"Interrupted awaiting final response from host %s\")\n     void interruptedAwaitingFinalResponse(String hostName);\n     /**", "sourceBeforeFix": "id=15808", "sourceAfterFix": "id=10808"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should exclude not allowed locales\n \t * @should cache results for a user\n \t */\n\tpublic List<Locale> getSearchLocales() throws APIException;\n \t/**\n \t * Used by Spring to set the http client for accessing the openmrs implementation service", "fixed": " \t * @should exclude not allowed locales\n \t * @should cache results for a user\n \t */\n\tpublic List<Locale> getSearchLocales();\n \t/**\n \t * Used by Spring to set the http client for accessing the openmrs implementation service", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "13e4086131ce15468e91c6e211827fc45be51749", "projectName": "brianfrankcooper.YCSB", "bugType": "Same Function More Args", "problem": "         return RESULT_OK;\n       } catch (AerospikeException e) {\n         if (e.getResultCode() != ResultCode.DEVICE_OVERLOAD) {\n          System.err.println(\"Error while updating key \" + key + \": \" + e);\n           return RESULT_ERROR;\n         }", "fixed": "         return RESULT_OK;\n       } catch (AerospikeException e) {\n         if (e.getResultCode() != ResultCode.DEVICE_OVERLOAD) {\n          System.err.println(\"Error while writing key \" + key + \": \" + e);\n           return RESULT_ERROR;\n         }", "sourceBeforeFix": "new DBException(String.format(\"Error while creating Aerospike \" + \"client for %s:%d.\",host,port))", "sourceAfterFix": "new DBException(String.format(\"Error while creating Aerospike \" + \"client for %s:%d.\",host,port),e)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15870, value = \"Unknown server group %s\")\n     IllegalStateException unknownServerGroup(String serverGroup);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10870, value = \"Unknown server group %s\")\n     IllegalStateException unknownServerGroup(String serverGroup);\n     /**", "sourceBeforeFix": "id=15834", "sourceAfterFix": "id=10834"}
{"fixCommitSHA1": "9467bef8ea9a62658b32dd43a76f4f98087d1986", "projectName": "apache.hadoop", "bugType": "Change Unary Operator\t", "problem": "         command = new RollCommand(keyName);\n         if (\"--help\".equals(keyName)) {\n           printKeyShellUsage();\n          return -1;\n         }\n       } else if (\"list\".equals(args[i])) {\n         command = new ListCommand();", "fixed": "         command = new RollCommand(keyName);\n         if (\"--help\".equals(keyName)) {\n           printKeyShellUsage();\n          return 1;\n         }\n       } else if (\"list\".equals(args[i])) {\n         command = new ListCommand();", "sourceBeforeFix": "-1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "f779a4415cedcfa445777b186c8fe1d6341278df", "projectName": "netty.netty", "bugType": "Change Identifier Used", "problem": "         case CompactObjectOutputStream.TYPE_THIN_DESCRIPTOR:\n             String className = readUTF();\n             Class<?> clazz = classResolver.resolve(className);\n            return ObjectStreamClass.lookupAny(clazz);\n         default:\n             throw new StreamCorruptedException(\n                     \"Unexpected class descriptor type: \" + type);", "fixed": "         case CompactObjectOutputStream.TYPE_THIN_DESCRIPTOR:\n             String className = readUTF();\n             Class<?> clazz = classResolver.resolve(className);\n            return ObjectStreamClass.lookup(clazz);\n         default:\n             throw new StreamCorruptedException(\n                     \"Unexpected class descriptor type: \" + type);", "sourceBeforeFix": "ObjectStreamClass.lookupAny(clazz)", "sourceAfterFix": "ObjectStreamClass.lookup(clazz)"}
{"fixCommitSHA1": "6bae902bd35ed4f57e7a5d612b7ad9b72f4559bc", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "     node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n     Node node2 = Node.newString(Token.NAME, \"f\");\n     node2.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n    assertTrue(node1.checkTreeTypeAwareEqualsSilent(node2));\n   }\n   public void testCheckTreeTypeAwareEqualsSameNull() {", "fixed": "     node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n     Node node2 = Node.newString(Token.NAME, \"f\");\n     node2.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n    assertTrue(node1.isEquivalentToTyped(node2));\n   }\n   public void testCheckTreeTypeAwareEqualsSameNull() {", "sourceBeforeFix": "node1.checkTreeEqualsSilent(node1)", "sourceAfterFix": "node1.isEquivalentTo(node1)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15854, value = \"Null stream at index %d\")\n     String nullStream(int index);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10854, value = \"Null stream at index %d\")\n     String nullStream(int index);\n     /**", "sourceBeforeFix": "id=15831", "sourceAfterFix": "id=10831"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "22735f4e1c7de3c10301d5c8d5ae37980fd5bd5e", "projectName": "hazelcast.hazelcast", "bugType": "Change Numeric Literal", "problem": "                 {11, 6.5f},\n                 {12, 5.5f},\n                 {13, 3.5f},\n                {14, 3.0f},\n                 {15, 2.5f},\n                 {16, 2.0f},\n         });", "fixed": "                 {11, 6.5f},\n                 {12, 5.5f},\n                 {13, 3.5f},\n                {14, 3.5f},\n                 {15, 2.5f},\n                 {16, 2.0f},\n         });", "sourceBeforeFix": "{14,3.0f}", "sourceAfterFix": "{14,3.5f}"}
{"fixCommitSHA1": "1d5647b92215f0ceabced59275225ad829061663", "projectName": "spring-projects.spring-boot", "bugType": "Change Modifier", "problem": " \tprivate int port = Integer.valueOf(System.getProperty(\"port\"));\n \t@Test\n\tpublic void testHome() throws Exception {\nString url = \"http:\n \t\tResponseEntity<String> entity = this.rest.getForEntity(url, String.class);\n \t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);", "fixed": " \tprivate int port = Integer.valueOf(System.getProperty(\"port\"));\n \t@Test\n\tvoid testHome() throws Exception {\nString url = \"http:\n \t\tResponseEntity<String> entity = this.rest.getForEntity(url, String.class);\n \t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  private final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetProgramiv (int program, int pname, IntBuffer params) {\r\n\t\tGL20.glGetProgram(program, pname, params);\r\n \t}\r\n \tpublic void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tEXTFramebufferObject.glGetRenderbufferParameterEXT(target, pname, params);\r\n \t}\r\n \tpublic String glGetShaderInfoLog (int shader) {\r", "fixed": " \t}\r\n \tpublic void glGetProgramiv (int program, int pname, IntBuffer params) {\r\n\t\tGL20.glGetProgramiv(program, pname, params);\r\n \t}\r\n \tpublic void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tEXTFramebufferObject.glGetRenderbufferParameterivEXT(target, pname, params);\r\n \t}\r\n \tpublic String glGetShaderInfoLog (int shader) {\r", "sourceBeforeFix": "GL20.glGetVertexAttrib(index,pname,params)", "sourceAfterFix": "GL20.glGetVertexAttribiv(index,pname,params)"}
{"fixCommitSHA1": "918716b66d408ddb7ea013d65f948e0892b4a23e", "projectName": "wildfly.wildfly", "bugType": "Change Modifier", "problem": "     public static final ServiceName ENDPOINT_SERVICE = WS_SERVICE.append(\"endpoint\");\n     public static final ServiceName ENDPOINT_PUBLISH_SERVICE = WS_SERVICE.append(\"endpoint-publish\");\n    private static ServiceRegistry registry;\n     public static void saveContainerRegistry(ServiceRegistry containerRegistry) {\n         registry = containerRegistry;", "fixed": "     public static final ServiceName ENDPOINT_SERVICE = WS_SERVICE.append(\"endpoint\");\n     public static final ServiceName ENDPOINT_PUBLISH_SERVICE = WS_SERVICE.append(\"endpoint-publish\");\n    private static volatile ServiceRegistry registry;\n     public static void saveContainerRegistry(ServiceRegistry containerRegistry) {\n         registry = containerRegistry;", "sourceBeforeFix": "10", "sourceAfterFix": "74"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "22d5241b5f75631e9cfda82a6912a2555eecb165", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "     @Override\n     protected void doStop() throws Exception {\n         if (channel != null) {\n            LOG.trace(\"Terminating channel to the remote gRPC server\");\n             channel.shutdown().shutdownNow();\n             channel = null;\n             grpcStub = null;", "fixed": "     @Override\n     protected void doStop() throws Exception {\n         if (channel != null) {\n            LOG.debug(\"Terminating channel to the remote gRPC server\");\n             channel.shutdown().shutdownNow();\n             channel = null;\n             grpcStub = null;", "sourceBeforeFix": "LOG.trace(\"Terminating channel to the remote gRPC server\")", "sourceAfterFix": "LOG.debug(\"Terminating channel to the remote gRPC server\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface SipEndpointBuilder\n             extends\n                 SipEndpointConsumerBuilder, SipEndpointProducerBuilder {\n         default AdvancedSipEndpointBuilder advanced() {", "fixed": "     \n    public interface SipEndpointBuilder\n             extends\n                 SipEndpointConsumerBuilder, SipEndpointProducerBuilder {\n         default AdvancedSipEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "9467bef8ea9a62658b32dd43a76f4f98087d1986", "projectName": "apache.hadoop", "bugType": "Change Unary Operator\t", "problem": "         command = new RollCommand(keyName);\n         if (\"--help\".equals(keyName)) {\n           printKeyShellUsage();\n          return -1;\n         }\n       } else if (\"list\".equals(args[i])) {\n         command = new ListCommand();", "fixed": "         command = new RollCommand(keyName);\n         if (\"--help\".equals(keyName)) {\n           printKeyShellUsage();\n          return 1;\n         }\n       } else if (\"list\".equals(args[i])) {\n         command = new ListCommand();", "sourceBeforeFix": "-1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "d349a29b7e7acfceb67454a40bbca333fb18f960", "projectName": "apache.hadoop", "bugType": "Change Numeric Literal", "problem": "         listApplications(appTypes, appStates);\n       }\n     } else if (cliParser.hasOption(KILL_CMD)) {\n      if (args.length != 2) {\n         printUsage(opts);\n         return exitCode;\n       }", "fixed": "         listApplications(appTypes, appStates);\n       }\n     } else if (cliParser.hasOption(KILL_CMD)) {\n      if (args.length != 3) {\n         printUsage(opts);\n         return exitCode;\n       }", "sourceBeforeFix": "args.length != 2", "sourceAfterFix": "args.length != 3"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform1fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform1(location, v);\r\n \t}\r\n \tpublic void glUniform1fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform1(location, toFloatBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform1i (int location, int x) {\r", "fixed": " \t}\r\n \tpublic void glUniform1fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform1fv(location, v);\r\n \t}\r\n \tpublic void glUniform1fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform1fv(location, toFloatBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform1i (int location, int x) {\r", "sourceBeforeFix": "GL20.glUniform2(location,toIntBuffer(v,offset,count << 1))", "sourceAfterFix": "GL20.glUniform2iv(location,toIntBuffer(v,offset,count << 1))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15855, value = \"Invalid byte stream.\")\n     String invalidByteStream();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10855, value = \"Invalid byte stream.\")\n     String invalidByteStream();\n     /**", "sourceBeforeFix": "id=15836", "sourceAfterFix": "id=10836"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserLists(String user, long cursor) throws TwitterException {\n        return twitter4j.List.constructListOfLists(get(getApiBaseURL() + V1 +\n                 user + \"/lists.json?cursor=\" + cursor, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserLists(String user, long cursor) throws TwitterException {\n        return twitter4j.List.createListList(get(getApiBaseURL() + V1 +\n                 user + \"/lists.json?cursor=\" + cursor, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\",true))"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedKubernetesNamespacesEndpointBuilder\n             extends\n                 AdvancedKubernetesNamespacesEndpointConsumerBuilder, AdvancedKubernetesNamespacesEndpointProducerBuilder {\n         default KubernetesNamespacesEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedKubernetesNamespacesEndpointBuilder\n             extends\n                 AdvancedKubernetesNamespacesEndpointConsumerBuilder, AdvancedKubernetesNamespacesEndpointProducerBuilder {\n         default KubernetesNamespacesEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15858, value = \"No deployment content with hash %s is available in the deployment content repository.\")\n     String noDeploymentContentWithHash(String hash);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10858, value = \"No deployment content with hash %s is available in the deployment content repository.\")\n     String noDeploymentContentWithHash(String hash);\n     /**", "sourceBeforeFix": "id=15867", "sourceAfterFix": "id=10867"}
{"fixCommitSHA1": "e376b7be0a40adaba56bbefce50c3f0930a9475c", "projectName": "gephi.gephi", "bugType": "Change Modifier", "problem": "         }\n     }\n    public AttributeModel getModel() {\n         Workspace workspace = projectController.getCurrentWorkspace();\n         if (workspace != null) {\n             AttributeModel model = workspace.getLookup().lookup(AttributeModel.class);", "fixed": "         }\n     }\n    public synchronized AttributeModel getModel() {\n         Workspace workspace = projectController.getCurrentWorkspace();\n         if (workspace != null) {\n             AttributeModel model = workspace.getLookup().lookup(AttributeModel.class);", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "9c3af103e09bdcb4addeab973881eb27bc91722d", "projectName": "spring-projects.spring-boot", "bugType": "Change Modifier", "problem": " \t}\n \t@Configuration\n\tprivate static class CustomEndpointConfiguration {\n \t\t@Bean\n \t\tpublic CustomEndpoint customEndpoint() {", "fixed": " \t}\n \t@Configuration\n\tstatic class CustomEndpointConfiguration {\n \t\t@Bean\n \t\tpublic CustomEndpoint customEndpoint() {", "sourceBeforeFix": "10", "sourceAfterFix": "8"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should delete global property from database\n \t */\n \t@Authorized(PrivilegeConstants.PURGE_GLOBAL_PROPERTIES)\n\tpublic void purgeGlobalProperty(GlobalProperty globalProperty) throws APIException;\n \t/**\n \t * Completely remove the given global properties from the database", "fixed": " \t * @should delete global property from database\n \t */\n \t@Authorized(PrivilegeConstants.PURGE_GLOBAL_PROPERTIES)\n\tpublic void purgeGlobalProperty(GlobalProperty globalProperty);\n \t/**\n \t * Completely remove the given global properties from the database", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15862, value = \"Invalid '%s' value: %d, the maximum index is %d\")\n     String invalidValue(String name, int value, int maxIndex);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10862, value = \"Invalid '%s' value: %d, the maximum index is %d\")\n     String invalidValue(String name, int value, int maxIndex);\n     /**", "sourceBeforeFix": "id=15843", "sourceAfterFix": "id=10843"}
{"fixCommitSHA1": "3dddcc4cdf4a74ddbd4607c6aaee5bdd8ac46c27", "projectName": "gephi.gephi", "bugType": "Change Modifier", "problem": "     }\n     @Override\n    public void mouseClick() {\n         if (vizConfig.isSelectionEnable() && rectangleSelection && !customSelection) {\n             Rectangle rectangle = (Rectangle) currentSelectionArea;", "fixed": "     }\n     @Override\n    public synchronized void mouseClick() {\n         if (vizConfig.isSelectionEnable() && rectangleSelection && !customSelection) {\n             Rectangle rectangle = (Rectangle) currentSelectionArea;", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedKubernetesPodsEndpointBuilder\n             extends\n                 AdvancedKubernetesPodsEndpointConsumerBuilder, AdvancedKubernetesPodsEndpointProducerBuilder {\n         default KubernetesPodsEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedKubernetesPodsEndpointBuilder\n             extends\n                 AdvancedKubernetesPodsEndpointConsumerBuilder, AdvancedKubernetesPodsEndpointProducerBuilder {\n         default KubernetesPodsEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "9f0d922f042d7342252ad2e1476ae45002c89cfd", "projectName": "openhab.openhab", "bugType": "Change Numeric Literal", "problem": "             for (int i = 0; i < 10; i++) {\r\n                 sendDecrease(bulb, 27, bridgeId);\r\n                 try {\r\n                    Thread.sleep(50);\r\n                 } catch (InterruptedException e) {\r\n                 }\r\n             }\r", "fixed": "             for (int i = 0; i < 10; i++) {\r\n                 sendDecrease(bulb, 27, bridgeId);\r\n                 try {\r\n                    Thread.sleep(100);\r\n                 } catch (InterruptedException e) {\r\n                 }\r\n             }\r", "sourceBeforeFix": "Thread.sleep(50)", "sourceAfterFix": "Thread.sleep(100)"}
{"fixCommitSHA1": "38eb6222bddaf49c3c9ae73ddef0cfe4ff5efa48", "projectName": "alibaba.dubbo", "bugType": "Change Numeric Literal", "problem": "     @Test\n     public void test_Decode_Error_Length() throws IOException {\n        byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, 0x20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n         Person person = new Person();\n         byte[] request = getRequestBytes(person, header);", "fixed": "     @Test\n     public void test_Decode_Error_Length() throws IOException {\n        byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, 0x02, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n         Person person = new Person();\n         byte[] request = getRequestBytes(person, header);", "sourceBeforeFix": "{MAGIC_HIGH,MAGIC_LOW,0x20,20,0,0,0,0,0,0,0,0,0,0,0,0}", "sourceAfterFix": "{MAGIC_HIGH,MAGIC_LOW,0x02,20,0,0,0,0,0,0,0,0,0,0,0,0}"}
{"fixCommitSHA1": "0656040933973f55afa8b6e8f53140b6f76b7446", "projectName": "apache.hive", "bugType": "Change Unary Operator\t", "problem": "     \n     public enum _Fields implements org.apache.thrift.TFieldIdEnum {\n      RQST((short)-1, \"rqst\");\n       private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();", "fixed": "     \n     public enum _Fields implements org.apache.thrift.TFieldIdEnum {\n      RQST((short)1, \"rqst\");\n       private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();", "sourceBeforeFix": "-1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "4a14fe194b8163a6b7b0c97c436e2d173c7929c0", "projectName": "openmrs.openmrs-core", "bugType": "Change Numeric Literal", "problem": " \t\tt5.setTaskClass(SampleTask5.class.getName());\r\n \t\tschedulerService.scheduleTask(t5);\r\n\t\tThread.sleep(1200);\r\n \t\tassertEquals(Arrays.asList(\"INIT-START-5\", \"INIT-END-5\", \"IN EXECUTE\"), outputForInitExecSync);\r\n \t}\r", "fixed": " \t\tt5.setTaskClass(SampleTask5.class.getName());\r\n \t\tschedulerService.scheduleTask(t5);\r\n\t\tThread.sleep(2500);\r\n \t\tassertEquals(Arrays.asList(\"INIT-START-5\", \"INIT-END-5\", \"IN EXECUTE\"), outputForInitExecSync);\r\n \t}\r", "sourceBeforeFix": "Thread.sleep(600)", "sourceAfterFix": "Thread.sleep(2500)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "b37bb91fdcabe6e8926b23aaa935200c52c511b7", "projectName": "neo4j.neo4j", "bugType": "Change Unary Operator\t", "problem": "                    (file.isDirectory() && file.getName().startsWith( \"branched-\" ) ) )\n             {\n                 File dest = new File( oldDir, file.getName() );\n                 if ( !file.renameTo( dest ) )", "fixed": "                    (file.isDirectory() && !file.getName().startsWith( \"branched-\" ) ) )\n             {\n                 File dest = new File( oldDir, file.getName() );\n                 if ( !file.renameTo( dest ) )", "sourceBeforeFix": "file.getName().startsWith(\"branched-\")", "sourceAfterFix": "!file.getName().startsWith(\"branched-\")"}
{"fixCommitSHA1": "e70960913c07d921dea470857f9bcdb67f38959f", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "          * @param importFullPath\n          *        import full path variable.\n          */\n        public void setImportFullPath(String importFullPath) {\n             this.importFullPath = importFullPath;\n         }", "fixed": "          * @param importFullPath\n          *        import full path variable.\n          */\n        public final void setImportFullPath(String importFullPath) {\n             this.importFullPath = importFullPath;\n         }", "sourceBeforeFix": "1", "sourceAfterFix": "17"}
{"fixCommitSHA1": "0eea03987839ba88fac6015355a2b067d6cfe436", "projectName": "Alluxio.alluxio", "bugType": "Change Modifier", "problem": " \npublic class CreateUfsFileOptionsTest {\n   ", "fixed": " \npublic final class CreateUfsFileOptionsTest {\n   ", "sourceBeforeFix": "1", "sourceAfterFix": "17"}
{"fixCommitSHA1": "6d4e9989f7d371e2871210eb285562ac4821d856", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "     @Override\n     public <T> ICompletableFuture<T> submitInternal(final Callable<T> command) {\n         CompletableFutureTask futureTask = new CompletableFutureTask(command, internalExecutor);\n        internalExecutor.submit(command);\n         return futureTask;\n     }", "fixed": "     @Override\n     public <T> ICompletableFuture<T> submitInternal(final Callable<T> command) {\n         CompletableFutureTask futureTask = new CompletableFutureTask(command, internalExecutor);\n        internalExecutor.submit(futureTask);\n         return futureTask;\n     }", "sourceBeforeFix": "internalExecutor.submit(command)", "sourceAfterFix": "internalExecutor.submit(futureTask)"}
{"fixCommitSHA1": "a63faf44e1b103a49d25a15c720fc5940ae9fc07", "projectName": "square.retrofit", "bugType": "Change Identifier Used", "problem": "     assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mBodyWildcard = new TypeToken<Maybe<? extends String>>() {}.getType();\n    assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fBodyWildcard = new TypeToken<Flowable<? extends String>>() {}.getType();\n    assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oBodyGeneric = new TypeToken<Observable<List<String>>>() {}.getType();", "fixed": "     assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mBodyWildcard = new TypeToken<Maybe<? extends String>>() {}.getType();\n    assertThat(factory.get(mBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fBodyWildcard = new TypeToken<Flowable<? extends String>>() {}.getType();\n    assertThat(factory.get(fBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oBodyGeneric = new TypeToken<Observable<List<String>>>() {}.getType();", "sourceBeforeFix": "factory.get(sBodyClass,NO_ANNOTATIONS,retrofit)", "sourceAfterFix": "factory.get(mBodyClass,NO_ANNOTATIONS,retrofit)"}
{"fixCommitSHA1": "63e47d927e70c83a170b0d2f93deb7f460ef54a3", "projectName": "hazelcast.hazelcast", "bugType": "Change Numeric Literal", "problem": "         topic.publish(message);\n         topic.removeMessageListener(messageListener);\n         topic.publish(message);\n        assertFalse(latch.await(100, TimeUnit.MILLISECONDS));\n     }\n     @AfterClass", "fixed": "         topic.publish(message);\n         topic.removeMessageListener(messageListener);\n         topic.publish(message);\n        assertFalse(latch.await(10000, TimeUnit.MILLISECONDS));\n     }\n     @AfterClass", "sourceBeforeFix": "latch.await(100,TimeUnit.MILLISECONDS)", "sourceAfterFix": "latch.await(10000,TimeUnit.MILLISECONDS)"}
{"fixCommitSHA1": "ea98386dfd18da047c877a2320cfdcf15df2ea06", "projectName": "facebook.presto", "bugType": "Change Modifier", "problem": "                 .retLong();\n     }\n    private void generateAppendToMethod(ClassDefinition classDefinition, CallSiteBinder callSiteBinder, List<Type> types, List<FieldDefinition> channelFields)\n     {\n         Parameter blockIndex = arg(\"blockIndex\", int.class);\n         Parameter blockPosition = arg(\"blockPosition\", int.class);", "fixed": "                 .retLong();\n     }\n    private static void generateAppendToMethod(ClassDefinition classDefinition, CallSiteBinder callSiteBinder, List<Type> types, List<FieldDefinition> channelFields)\n     {\n         Parameter blockIndex = arg(\"blockIndex\", int.class);\n         Parameter blockPosition = arg(\"blockPosition\", int.class);", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public List<SavedSearch> getSavedSearches() throws TwitterException {\n        return SavedSearch.constructSavedSearches(get(getBaseURL() + \"saved_searches.json\", true));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n      */\n     public List<SavedSearch> getSavedSearches() throws TwitterException {\n        return SavedSearch.createSavedSearchList(get(getBaseURL() + \"saved_searches.json\", true));\n     }\n     /**", "sourceBeforeFix": "DirectMessage.constructDirectMessages(get(getBaseURL() + \"direct_messages.json\",true))", "sourceAfterFix": "DirectMessage.createDirectMessageList(get(getBaseURL() + \"direct_messages.json\",true))"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserListMemberships(String user, long cursor) throws TwitterException {\n        return twitter4j.List.constructListOfLists(get(getApiBaseURL() + V1 +\n                 user + \"/lists/memberships.json?cursor=\" + cursor, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserListMemberships(String user, long cursor) throws TwitterException {\n        return twitter4j.List.createListList(get(getApiBaseURL() + V1 +\n                 user + \"/lists/memberships.json?cursor=\" + cursor, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites/\" + id+ \".json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites/\" + id+ \".json\",new PostParameter[0],true))"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      * @param hostName   the name of the host.\n      */\n     @LogMessage(level = Level.WARN)\n    @Message(id = 15802, value = \"Interrupted awaiting final response from server %s on host %s\")\n     void interruptedAwaitingFinalResponse(String serverName, String hostName);\n     /**", "fixed": "      * @param hostName   the name of the host.\n      */\n     @LogMessage(level = Level.WARN)\n    @Message(id = 10802, value = \"Interrupted awaiting final response from server %s on host %s\")\n     void interruptedAwaitingFinalResponse(String serverName, String hostName);\n     /**", "sourceBeforeFix": "id=15805", "sourceAfterFix": "id=10805"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "423fca2f16ef73c1e4bce7cf11660a510be1456e", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "       return false;\n     }\n     if (!info.isOffline()) {\n      LOG.warn(\"Region is split but not offline: \" + info.getRegionName());\n     }\n     return true;\n   }", "fixed": "       return false;\n     }\n     if (!info.isOffline()) {\n      LOG.warn(\"Region is split but not offline: \" +\n        info.getRegionNameAsString());\n     }\n     return true;\n   }", "sourceBeforeFix": "info.getRegionName()", "sourceAfterFix": "info.getRegionNameAsString()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "1ab08ad4abff024bdd3fbeb6f08a1a4a61c49b65", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "         }\n     }\n    private void checkTree(final DetailAST node,\n                            final DetailAST parent,\n                            final DetailAST prev,\n                            final String filename,", "fixed": "         }\n     }\n    private static void checkTree(final DetailAST node,\n                            final DetailAST parent,\n                            final DetailAST prev,\n                            final String filename,", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "bc53fc00817adf77d0e25d07ae0aaea0f16dddd7", "projectName": "Alluxio.alluxio", "bugType": "Same Function More Args", "problem": "    * @return A mapping from storage tier alias to blocks\n    */\n   public Map<String, List<Long>> getBlockList() {\n    Preconditions.checkNotNull(mBlockIdsOnTiers);\n     return mBlockIdsOnTiers;\n   }", "fixed": "    * @return A mapping from storage tier alias to blocks\n    */\n   public Map<String, List<Long>> getBlockList() {\n    Preconditions.checkNotNull(mBlockIdsOnTiers,\"mBlockIdsOnTiers\");\n     return mBlockIdsOnTiers;\n   }", "sourceBeforeFix": "Preconditions.checkNotNull(manager)", "sourceAfterFix": "Preconditions.checkNotNull(manager,\"manager\")"}
{"fixCommitSHA1": "24611c974516590fd401228f86cf11be71f71fd6", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "                         CHECK_TEXT.get(\"Description\")\n                                 + CHECK_TEXT.computeIfAbsent(\"Rule Description\", unused -> \"\")\n                                 + CHECK_TEXT.computeIfAbsent(\"Notes\", unused -> \"\")\n                                + CHECK_TEXT.get(\"Properties\")\n                                 + CHECK_TEXT.get(\"Examples\") + \" @since \"\n                                 + CHECK_TEXT.get(\"since\"), getJavaDocText(ast));\n             }", "fixed": "                         CHECK_TEXT.get(\"Description\")\n                                 + CHECK_TEXT.computeIfAbsent(\"Rule Description\", unused -> \"\")\n                                 + CHECK_TEXT.computeIfAbsent(\"Notes\", unused -> \"\")\n                                + CHECK_TEXT.computeIfAbsent(\"Properties\", unused -> \"\")\n                                 + CHECK_TEXT.get(\"Examples\") + \" @since \"\n                                 + CHECK_TEXT.get(\"since\"), getJavaDocText(ast));\n             }", "sourceBeforeFix": "CHECK_TEXT.get(\"Properties\")", "sourceAfterFix": "CHECK_TEXT.computeIfAbsent(\"Properties\",unused -> \"\")"}
{"fixCommitSHA1": "4c1b34b34b68f102fbb5021a801b6d99de967550", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "       return delegate.getTopScope();\n     }\n    @Override State getIntermediateState() {\n       return delegate.getIntermediateState();\n     }\n    @Override void setIntermediateState(State state) {\n       delegate.setIntermediateState(state);\n     }\n   }", "fixed": "       return delegate.getTopScope();\n     }\n    @Override protected State getIntermediateState() {\n       return delegate.getIntermediateState();\n     }\n    @Override protected void setIntermediateState(State state) {\n       delegate.setIntermediateState(state);\n     }\n   }", "sourceBeforeFix": "0", "sourceAfterFix": "4"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15867, value = \"Cannot use %s with the same value for parameters %s and %s. \" +\n             \"Use %s to redeploy the same content or %s to replace content with a new version with the same name.\")\n     String cannotUseSameValueForParameters(String opName, String param1, String param2, String redeployOpName, String replaceOpName);", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10867, value = \"Cannot use %s with the same value for parameters %s and %s. \" +\n             \"Use %s to redeploy the same content or %s to replace content with a new version with the same name.\")\n     String cannotUseSameValueForParameters(String opName, String param1, String param2, String redeployOpName, String replaceOpName);", "sourceBeforeFix": "id=15837", "sourceAfterFix": "id=10837"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface TwitterStreamingEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default AdvancedTwitterStreamingEndpointBuilder advanced() {", "fixed": "     \n    public interface TwitterStreamingEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default AdvancedTwitterStreamingEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "06f8fe87421493280f6602aeb73153e677844542", "projectName": "apache.flink", "bugType": "Wrong Function Name", "problem": " \t\tfor (int i = 0; i < noOfTasks; i++) {\n \t\t\tfor (int j = 0; j < 2 + i; j++) {\n\t\t\t\tfinal String part = new Path(bucketPath, \"test-\" + i + '-' + j).toString();\n \t\t\t\tAssert.assertTrue(paths.contains(part));\n \t\t\t\tpaths.remove(part);\n \t\t\t}", "fixed": " \t\tfor (int i = 0; i < noOfTasks; i++) {\n \t\t\tfor (int j = 0; j < 2 + i; j++) {\n\t\t\t\tfinal String part = new Path(bucketPath, \"test-\" + i + '-' + j).getPath();\n \t\t\t\tAssert.assertTrue(paths.contains(part));\n \t\t\t\tpaths.remove(part);\n \t\t\t}", "sourceBeforeFix": "(new Path(testBucket.getParent(),\".test.inprogress\")).toString()", "sourceAfterFix": "(new Path(testBucket.getParent(),\".test.inprogress\")).getPath()"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface DirectVmEndpointBuilder\n             extends\n                 DirectVmEndpointConsumerBuilder, DirectVmEndpointProducerBuilder {\n         default AdvancedDirectVmEndpointBuilder advanced() {", "fixed": "     \n    public interface DirectVmEndpointBuilder\n             extends\n                 DirectVmEndpointConsumerBuilder, DirectVmEndpointProducerBuilder {\n         default AdvancedDirectVmEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "9716d2ae673a576cb345c3bfb24cf71654d8f112", "projectName": "openhab.openhab", "bugType": "Change Identifier Used", "problem": " \t\tif (pollFuture != null && !pollFuture.isCancelled())\n \t\t\tpollFuture.cancel(false);\n\t\tlogger.debug(\"rapidRefreshFuture scheduleing for {} millis\", millis);\n \t\tpollFuture = pollService.scheduleAtFixedRate(new Runnable() {\n \t\t\t@Override", "fixed": " \t\tif (pollFuture != null && !pollFuture.isCancelled())\n \t\t\tpollFuture.cancel(false);\n\t\tlogger.trace(\"rapidRefreshFuture scheduleing for {} millis\", millis);\n \t\tpollFuture = pollService.scheduleAtFixedRate(new Runnable() {\n \t\t\t@Override", "sourceBeforeFix": "logger.debug(\"MyQ binding received command '{}' for item '{}'\",command,itemName)", "sourceAfterFix": "logger.trace(\"MyQ binding received command '{}' for item '{}'\",command,itemName)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedAtomixQueueEndpointBuilder\n             extends\n                 AdvancedAtomixQueueEndpointConsumerBuilder, AdvancedAtomixQueueEndpointProducerBuilder {\n         default AtomixQueueEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedAtomixQueueEndpointBuilder\n             extends\n                 AdvancedAtomixQueueEndpointConsumerBuilder, AdvancedAtomixQueueEndpointProducerBuilder {\n         default AtomixQueueEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15859, value = \"A slave domain controller cannot accept deployment content uploads\")\n     String slaveCannotAcceptUploads();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10859, value = \"A slave domain controller cannot accept deployment content uploads\")\n     String slaveCannotAcceptUploads();\n     /**", "sourceBeforeFix": "id=15849", "sourceAfterFix": "id=10849"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<Status> getUserTimeline() throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline.json\"\n                 , true));\n     }", "fixed": "      */\n     public ResponseList<Status> getUserTimeline() throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline.json\"\n                 , true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweets_of_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweets_of_me.json\",null,true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   }\n   \n  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "4665dcf9ab41c3c61cd42aad296ebfe518bfa003", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\n \tpublic void glDrawArrays (int mode, int first, int count) {\n\t\tGL.glDrawArraysEXT(mode, first, count);\n \t}\n \tpublic void glDrawElements (int mode, int count, int type, Buffer indices) {", "fixed": " \t}\n \tpublic void glDrawArrays (int mode, int first, int count) {\n\t\tGL.glDrawArrays(mode, first, count);\n \t}\n \tpublic void glDrawElements (int mode, int count, int type, Buffer indices) {", "sourceBeforeFix": "GL.glDeleteTexturesEXT(n,textures,Memory.getPosition(textures))", "sourceAfterFix": "GL.glDeleteTextures(n,textures,Memory.getPosition(textures))"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r", "fixed": " \t}\r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r", "sourceBeforeFix": "GL20.glUniform1(location,toIntBuffer(v,offset,count))", "sourceAfterFix": "GL20.glUniform1iv(location,toIntBuffer(v,offset,count))"}
{"fixCommitSHA1": "1c93b2a8d7e7dc8d7a1620c5566e7eb20df8f0ec", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         taken = watch.stop();\n         assertEquals(taken, watch.taken());\n        assertTrue(\"Should take approx 200 millis, was: \" + taken, taken > 190);\n     }\n     public void testStopWatchRestart() throws Exception {", "fixed": "         taken = watch.stop();\n         assertEquals(taken, watch.taken());\n        assertTrue(\"Should take approx 200 millis, was: \" + taken, taken > 150);\n     }\n     public void testStopWatchRestart() throws Exception {", "sourceBeforeFix": "taken > 190", "sourceAfterFix": "taken > 150"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsCsv(String path, long millis) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, null);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsCsv(String path, long millis) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, null);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15852, value = \"Caught %s storing deployment content -- %s\")\n     String caughtExceptionStoringDeploymentContent(String exceptionName, Throwable exception);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10852, value = \"Caught %s storing deployment content -- %s\")\n     String caughtExceptionStoringDeploymentContent(String exceptionName, Throwable exception);\n     /**", "sourceBeforeFix": "id=15831", "sourceAfterFix": "id=10831"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15841, value = \"Exception getting result from server %s: %s\")\n     String exceptionAwaitingResultFromServer(ServerIdentity server, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10841, value = \"Exception getting result from server %s: %s\")\n     String exceptionAwaitingResultFromServer(ServerIdentity server, String message);\n     /**", "sourceBeforeFix": "id=15869", "sourceAfterFix": "id=10869"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCachePuts(1);\n            statistics.addPutTimeNano(System.nanoTime() - start);\n         }\n         return result;\n     }", "fixed": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCachePuts(1);\n            statistics.addPutTimeNanos(System.nanoTime() - start);\n         }\n         return result;\n     }", "sourceBeforeFix": "statistics.addPutTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addPutTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "5d12b156e1150162ba3def263b2da14793304b4e", "projectName": "facebook.presto", "bugType": "Change Identifier Used", "problem": "         );\n        MaterializedResult expected = MaterializedResult.resultBuilder(taskContext.getSession(), concat(probePages.getTypes(), buildPages.getTypes()))\n                 .row(\"20\", 1020L, 2020L, \"20\", 30L, 40L)\n                 .row(\"21\", 1021L, 2021L, \"21\", 31L, 41L)\n                 .row(\"22\", 1022L, 2022L, \"22\", 32L, 42L)", "fixed": "         );\n        MaterializedResult expected = MaterializedResult.resultBuilder(taskContext.getSession(), concat(probePages.getTypesWithoutHash(), buildPages.getTypesWithoutHash()))\n                 .row(\"20\", 1020L, 2020L, \"20\", 30L, 40L)\n                 .row(\"21\", 1021L, 2021L, \"21\", 31L, 41L)\n                 .row(\"22\", 1022L, 2022L, \"22\", 32L, 42L)", "sourceBeforeFix": "buildPages.getTypes()", "sourceAfterFix": "buildPages.getTypesWithoutHash()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   }\n   \n  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "c888434580c601ac9c4734e19d8eefac63518031", "projectName": "swagger-api.swagger-codegen", "bugType": "Wrong Function Name", "problem": "         return cp.isEnum || !languageSpecificPrimitives.contains(cp.baseType == null ? cp.dataType : cp.baseType);\n     }\n     private String getJSDocTypeWithBraces(CodegenOperation co) {\n         String jsDocType = getJSDocType(co);\n         return jsDocType == null ? null : \"{\" + jsDocType + \"}\";\n     }\n     private String getJSDocType(CodegenOperation co) {\n         String returnType = trimBrackets(co.returnType);", "fixed": "         return cp.isEnum || !languageSpecificPrimitives.contains(cp.baseType == null ? cp.dataType : cp.baseType);\n     }\n    \n     private String getJSDocType(CodegenOperation co) {\n         String returnType = trimBrackets(co.returnType);", "sourceBeforeFix": "getJSDocTypeWithBraces(cm,var)", "sourceAfterFix": "getJSDocType(cm,var)"}
{"fixCommitSHA1": "d8894542ad7a8c3bece89f1db4108fc2fb5c17ef", "projectName": "Alluxio.alluxio", "bugType": "Change Modifier", "problem": "         && sUnderFSClass.equals(\"tachyon.underfs.hdfs.LocalMiniDFSCluster\");\n   }\n  protected final String mBaseDir;\n   protected final TachyonConf mTachyonConf;", "fixed": "         && sUnderFSClass.equals(\"tachyon.underfs.hdfs.LocalMiniDFSCluster\");\n   }\n  protected String mBaseDir;\n   protected final TachyonConf mTachyonConf;", "sourceBeforeFix": "20", "sourceAfterFix": "4"}
{"fixCommitSHA1": "cad6e4d396e7b901b8c83257312860021f01c060", "projectName": "apache.flink", "bugType": "Change Caller in Function Call", "problem": " \t@Override\n \tpublic void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n \t\tfinal String msg = \"Exception in server pipeline. Caused by: \" + ExceptionUtils.stringifyException(cause);\n\t\tfinal ByteBuf err = serializer.serializeServerFailure(ctx.alloc(), new RuntimeException(msg));\n \t\tLOG.debug(msg);\n \t\tctx.writeAndFlush(err).addListener(ChannelFutureListener.CLOSE);", "fixed": " \t@Override\n \tpublic void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n \t\tfinal String msg = \"Exception in server pipeline. Caused by: \" + ExceptionUtils.stringifyException(cause);\n\t\tfinal ByteBuf err = MessageSerializer.serializeServerFailure(ctx.alloc(), new RuntimeException(msg));\n \t\tLOG.debug(msg);\n \t\tctx.writeAndFlush(err).addListener(ChannelFutureListener.CLOSE);", "sourceBeforeFix": "serializer.serializeServerFailure(ctx.alloc(),new RuntimeException(msg))", "sourceAfterFix": "MessageSerializer.serializeServerFailure(ctx.alloc(),new RuntimeException(msg))"}
{"fixCommitSHA1": "f8c20919f9c2e18e48142c2712e34298f98b983e", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \tpublic void stopServlet() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tthis.container = factory\n\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n \t\tthis.container.stop();\n \t\tthis.thrown.expect(ConnectException.class);\ngetResponse(\"http:", "fixed": " \tpublic void stopServlet() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tthis.container = factory\n\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \t\tthis.container.stop();\n \t\tthis.thrown.expect(ConnectException.class);\ngetResponse(\"http:", "sourceBeforeFix": "factory.getEmbdeddedServletContainer()", "sourceAfterFix": "factory.getEmbeddedServletContainer()"}
{"fixCommitSHA1": "ea891b1fd030f0e7442611ed4c3c81893124712b", "projectName": "checkstyle.checkstyle", "bugType": "Same Function Swap Args", "problem": "         }\n         catch (InvocationTargetException ex) {\n             assertTrue(ex.getCause() instanceof IllegalArgumentException);\n            assertEquals(ex.getCause().getMessage(), \"ClassInfo's name should be non-null\");\n         }\n         Constructor<?> tokenConstructor = tokenType.getDeclaredConstructor(String.class, int.class,", "fixed": "         }\n         catch (InvocationTargetException ex) {\n             assertTrue(ex.getCause() instanceof IllegalArgumentException);\n            assertEquals(\"ClassInfo's name should be non-null\", ex.getCause().getMessage());\n         }\n         Constructor<?> tokenConstructor = tokenType.getDeclaredConstructor(String.class, int.class,", "sourceBeforeFix": "assertEquals(ex.getCause().getMessage(),\"ClassInfo's name should be non-null\")", "sourceAfterFix": "assertEquals(\"ClassInfo's name should be non-null\",ex.getCause().getMessage())"}
{"fixCommitSHA1": "59c498e520c50c99b06affb6b2ff96959ae9744e", "projectName": "naver.pinpoint", "bugType": "Change Identifier Used", "problem": "             }\n         }\n         if (logger.isInfoEnabled()) {\n            logger.debug(\"defineClass pluginClass:{} cl:{}\", className, classLoader);\n         }\n         final byte[] bytes = ct.toBytecode();\n         return (Class<?>)DEFINE_CLASS.invoke(classLoader, ct.getName(), bytes, 0, bytes.length);", "fixed": "             }\n         }\n         if (logger.isInfoEnabled()) {\n            logger.info(\"defineClass pluginClass:{} cl:{}\", className, classLoader);\n         }\n         final byte[] bytes = ct.toBytecode();\n         return (Class<?>)DEFINE_CLASS.invoke(classLoader, ct.getName(), bytes, 0, bytes.length);", "sourceBeforeFix": "logger.debug(\"defineClass pluginClass:{} cl:{}\",className,classLoader)", "sourceAfterFix": "logger.info(\"defineClass pluginClass:{} cl:{}\",className,classLoader)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  private final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid username supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"User not found\", response = Void.class) })\n    void testEndpointParameters(@FormParam(value = \"number\")  BigDecimal number,@FormParam(value = \"double\")  Double _double,@FormParam(value = \"pattern_without_delimiter\")  String patternWithoutDelimiter,@FormParam(value = \"byte\")  byte[] _byte,@FormParam(value = \"integer\")  Integer integer,@FormParam(value = \"int32\")  Integer int32,@FormParam(value = \"int64\")  Long int64,@FormParam(value = \"float\")  Float _float,@FormParam(value = \"string\")  String string,@FormParam(value = \"binary\")  byte[] binary,@FormParam(value = \"date\")  LocalDate date,@FormParam(value = \"dateTime\")  Date dateTime,@FormParam(value = \"password\")  String password,@FormParam(value = \"callback\")  String paramCallback);\n     @GET\n     @Consumes({ \"*/*\" })", "fixed": "     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid username supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"User not found\", response = Void.class) })\n    void testEndpointParameters(@FormParam(value = \"number\")  BigDecimal number,@FormParam(value = \"double\")  Double _double,@FormParam(value = \"pattern_without_delimiter\")  String patternWithoutDelimiter,@FormParam(value = \"byte\")  byte[] _byte,@FormParam(value = \"integer\")  Integer integer,@FormParam(value = \"int32\")  Integer int32,@FormParam(value = \"int64\")  Long int64,@FormParam(value = \"float\")  Float _float,@FormParam(value = \"string\")  String string,@FormParam(value = \"binary\")  byte[] binary,@FormParam(value = \"date\")  LocalDate date,@FormParam(value = \"dateTime\")  Date dateTime,@FormParam(value = \"password\")  String password,@FormParam(value = \"callback\")  String paramCallback) throws Exception;\n     @GET\n     @Consumes({ \"*/*\" })", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15857, value = \"Only 1 piece of content is currently supported (AS7-431)\")\n     String as7431();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10857, value = \"Only 1 piece of content is currently supported (AS7-431)\")\n     String as7431();\n     /**", "sourceBeforeFix": "id=15841", "sourceAfterFix": "id=10841"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  private final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedJSR356WebSocketEndpointBuilder\n             extends\n                 AdvancedJSR356WebSocketEndpointConsumerBuilder, AdvancedJSR356WebSocketEndpointProducerBuilder {\n         default JSR356WebSocketEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedJSR356WebSocketEndpointBuilder\n             extends\n                 AdvancedJSR356WebSocketEndpointConsumerBuilder, AdvancedJSR356WebSocketEndpointProducerBuilder {\n         default JSR356WebSocketEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStream<OUT> writeAsCsv(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsCsv<OUT> format, long millis, OUT endTuple) {\n\t\tDataStream<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByMillis<OUT>(\n \t\t\t\tpath, format, millis, endTuple));\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "fixed": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStreamSink<OUT> writeAsCsv(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsCsv<OUT> format, long millis, OUT endTuple) {\n\t\tDataStreamSink<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByMillis<OUT>(\n \t\t\t\tpath, format, millis, endTuple));\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "b879b0eed088b3cc42d7346f06f85f048442eb2c", "projectName": "code4craft.webmagic", "bugType": "Change Binary Operator", "problem": "     public boolean isDuplicate(Request request, Task task) {\n         Jedis jedis = pool.getResource();\n         try {\n            return jedis.sadd(getSetKey(task), request.getUrl()) > 0;\n         } finally {\n             pool.returnResource(jedis);\n         }", "fixed": "     public boolean isDuplicate(Request request, Task task) {\n         Jedis jedis = pool.getResource();\n         try {\n            return jedis.sadd(getSetKey(task), request.getUrl()) == 0;\n         } finally {\n             pool.returnResource(jedis);\n         }", "sourceBeforeFix": "jedis.sadd(getSetKey(task),request.getUrl()) > 0", "sourceAfterFix": "jedis.sadd(getSetKey(task),request.getUrl()) == 0"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     return additionalReplacements;\n   }\n  private final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     return additionalReplacements;\n   }\n  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface SjmsEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedSjmsEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface SjmsEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedSjmsEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "557a51f3ac19cf4b2ffbcb32354152c88643398d", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "         maker, computingFunction);\n   }\n  private MapMaker createMapMaker() {\n     MapMaker maker = new MapMaker();\n     maker.useCustomMap = true;\n     return maker;", "fixed": "         maker, computingFunction);\n   }\n  private static MapMaker createMapMaker() {\n     MapMaker maker = new MapMaker();\n     maker.useCustomMap = true;\n     return maker;", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "0ef571a65fc3e299a1c94cf24a1233a6fbd0a0d1", "projectName": "libgdx.libgdx", "bugType": "Change Unary Operator\t", "problem": " \t\tElement position = item.getChildByName(\"Position\");\n \t\trectangle.getRectangle().set(Float.parseFloat(position.getChildByName(\"X\").getText()),\n\t\t\t\t\t\t\t\t\t\t\t  Float.parseFloat(position.getChildByName(\"Y\").getText()),\n \t\t\t\t\t\t\t\t\t\t\t  Float.parseFloat(item.getChildByName(\"Width\").getText()),\n \t\t\t\t\t\t\t\t\t\t\t  Float.parseFloat(item.getChildByName(\"Height\").getText()));", "fixed": " \t\tElement position = item.getChildByName(\"Position\");\n \t\trectangle.getRectangle().set(Float.parseFloat(position.getChildByName(\"X\").getText()),\n\t\t\t\t\t\t\t\t\t\t\t  -Float.parseFloat(position.getChildByName(\"Y\").getText()),\n \t\t\t\t\t\t\t\t\t\t\t  Float.parseFloat(item.getChildByName(\"Width\").getText()),\n \t\t\t\t\t\t\t\t\t\t\t  Float.parseFloat(item.getChildByName(\"Height\").getText()));", "sourceBeforeFix": "Float.parseFloat(position.getChildByName(\"Y\").getText())", "sourceAfterFix": "-Float.parseFloat(position.getChildByName(\"Y\").getText())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "780e4a27f74b52de0a0fff72c71d0006c60a2165", "projectName": "druid-io.druid", "bugType": "Change Numeric Literal", "problem": "   private void waitForTestVerificationAndCleanup(Future future)\n   {\n     try {\n      queryNotifyLatch.await(25, TimeUnit.MILLISECONDS);\n       queryWaitYieldLatch.countDown();\n       queryWaitLatch.countDown();\n       future.get();", "fixed": "   private void waitForTestVerificationAndCleanup(Future future)\n   {\n     try {\n      queryNotifyLatch.await(1000, TimeUnit.MILLISECONDS);\n       queryWaitYieldLatch.countDown();\n       queryWaitLatch.countDown();\n       future.get();", "sourceBeforeFix": "waitLatch.await(25,TimeUnit.MILLISECONDS)", "sourceAfterFix": "waitLatch.await(1000,TimeUnit.MILLISECONDS)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedHazelcastSedaEndpointBuilder\n             extends\n                 AdvancedHazelcastSedaEndpointConsumerBuilder, AdvancedHazelcastSedaEndpointProducerBuilder {\n         default HazelcastSedaEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedHazelcastSedaEndpointBuilder\n             extends\n                 AdvancedHazelcastSedaEndpointConsumerBuilder, AdvancedHazelcastSedaEndpointProducerBuilder {\n         default HazelcastSedaEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform1iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform1(location, v);\r\n \t}\r\n \t@Override\r\n \tpublic void glUniform1iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform1(location, toIntBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform2f (int location, float x, float y) {\r", "fixed": " \t}\r\n \tpublic void glUniform1iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform1iv(location, v);\r\n \t}\r\n \t@Override\r\n \tpublic void glUniform1iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform1iv(location, toIntBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform2f (int location, float x, float y) {\r", "sourceBeforeFix": "GL20.glGetUniform(program,location,params)", "sourceAfterFix": "GL20.glGetUniformfv(program,location,params)"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "         if (isStatisticsEnabled()) {\n             if (isPutSucceed) {\n                 statistics.increaseCachePuts(1);\n                statistics.addPutTimeNano(System.nanoTime() - start);\n             }\n             if (getValue) {\n                 if (oldValueNull) {", "fixed": "         if (isStatisticsEnabled()) {\n             if (isPutSucceed) {\n                 statistics.increaseCachePuts(1);\n                statistics.addPutTimeNanos(System.nanoTime() - start);\n             }\n             if (getValue) {\n                 if (oldValueNull) {", "sourceBeforeFix": "statistics.addPutTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addPutTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "1b93a2f8d9a40a28615c3acc0c6415d678e26466", "projectName": "facebook.presto", "bugType": "Wrong Function Name", "problem": "         failureCause.compareAndSet(null, toFailure(throwable));\n         boolean failed = queryState.setIf(FAILED, currentState -> !currentState.isDone());\n         if (failed) {\n            log.error(throwable, \"Query %s failed\", queryId);\n         }\n         else {\n             log.debug(throwable, \"Failure after query %s finished\", queryId);", "fixed": "         failureCause.compareAndSet(null, toFailure(throwable));\n         boolean failed = queryState.setIf(FAILED, currentState -> !currentState.isDone());\n         if (failed) {\n            log.debug(throwable, \"Query %s failed\", queryId);\n         }\n         else {\n             log.debug(throwable, \"Failure after query %s finished\", queryId);", "sourceBeforeFix": "log.error(throwable,\"Query %s failed\",queryId)", "sourceAfterFix": "log.debug(throwable,\"Query %s failed\",queryId)"}
{"fixCommitSHA1": "eba21442eb7ab27514cf82240bb443955c5e52c4", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "       URIStatus status = statuses.get(k);\n       ret[k] = new FileStatus(status.getLength(), status.isFolder(), 3, status.getBlockSizeBytes(),\n          status.getCreationTimeMs(), status.getCreationTimeMs(), null, null, null,\n           new Path(mAlluxioHeader + status.getPath()));\n     }\n     return ret;", "fixed": "       URIStatus status = statuses.get(k);\n       ret[k] = new FileStatus(status.getLength(), status.isFolder(), 3, status.getBlockSizeBytes(),\n          status.getLastModificationTimeMs(), status.getCreationTimeMs(), null, null, null,\n           new Path(mAlluxioHeader + status.getPath()));\n     }\n     return ret;", "sourceBeforeFix": "status.getCreationTimeMs()", "sourceAfterFix": "status.getLastModificationTimeMs()"}
{"fixCommitSHA1": "c97c55c5fe3bd7a54b9f36cf68f17b5cf19ecaf3", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Change Identifier Used", "problem": "     private void markAsDoneAndCacheConnection(final NettyResponseFuture<?> future, final Channel channel) throws MalformedURLException {\n         if (future.getKeepAlive() && maxConnectionsPerHost++ < config.getMaxConnectionPerHost()) {\n            connectionsPool.put(future.getUrl(), channel);\n         } else {\n             connectionsPool.remove(future.getUrl());\n         }", "fixed": "     private void markAsDoneAndCacheConnection(final NettyResponseFuture<?> future, final Channel channel) throws MalformedURLException {\n         if (future.getKeepAlive() && maxConnectionsPerHost++ < config.getMaxConnectionPerHost()) {\n            connectionsPool.put(future.getUrl().getBaseUrl(), channel);\n         } else {\n             connectionsPool.remove(future.getUrl());\n         }", "sourceBeforeFix": "Entry<Url,Channel>", "sourceAfterFix": "Entry<String,Channel>"}
{"fixCommitSHA1": "bee7a939ade6ee0b42f00ea8727996986e31d6db", "projectName": "eclipse.vert.x", "bugType": "Change Binary Operator", "problem": "     @Override\n     public ByteBuf buffer(int initialCapacity) {\n      if (initialCapacity < capacity) {\n         return buffer();\n       } else {\n         throw new IllegalArgumentException();", "fixed": "     @Override\n     public ByteBuf buffer(int initialCapacity) {\n      if (initialCapacity <= capacity) {\n         return buffer();\n       } else {\n         throw new IllegalArgumentException();", "sourceBeforeFix": "initialCapacity < capacity", "sourceAfterFix": "initialCapacity <= capacity"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedByMe(Paging paging) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedByMe(Paging paging) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))"}
{"fixCommitSHA1": "15cdc5cc799e2ceb78af974d32feff2096f6571e", "projectName": "apache.flink", "bugType": "Same Function Swap Args", "problem": " \t\tfinal CompletableFuture<KvStateLocation> cachedFuture = lookupCache.get(cacheKey);\n \t\tif (!forceUpdate && cachedFuture != null && !cachedFuture.isCompletedExceptionally()) {\n\t\t\tLOG.debug(\"Retrieving location for state={} of job={} from the cache.\", jobId, queryableStateName);\n \t\t\treturn cachedFuture;\n \t\t}\n \t\tfinal KvStateLocationOracle kvStateLocationOracle = proxy.getKvStateLocationOracle(jobId);\n \t\tif (kvStateLocationOracle != null) {\n\t\t\tLOG.debug(\"Retrieving location for state={} of job={} from the key-value state location oracle.\", jobId, queryableStateName);\n \t\t\tfinal CompletableFuture<KvStateLocation> location = new CompletableFuture<>();\n \t\t\tlookupCache.put(cacheKey, location);", "fixed": " \t\tfinal CompletableFuture<KvStateLocation> cachedFuture = lookupCache.get(cacheKey);\n \t\tif (!forceUpdate && cachedFuture != null && !cachedFuture.isCompletedExceptionally()) {\n\t\t\tLOG.debug(\"Retrieving location for state={} of job={} from the cache.\", queryableStateName, jobId);\n \t\t\treturn cachedFuture;\n \t\t}\n \t\tfinal KvStateLocationOracle kvStateLocationOracle = proxy.getKvStateLocationOracle(jobId);\n \t\tif (kvStateLocationOracle != null) {\n\t\t\tLOG.debug(\"Retrieving location for state={} of job={} from the key-value state location oracle.\", queryableStateName, jobId);\n \t\t\tfinal CompletableFuture<KvStateLocation> location = new CompletableFuture<>();\n \t\t\tlookupCache.put(cacheKey, location);", "sourceBeforeFix": "LOG.debug(\"Retrieving location for state={} of job={} from the cache.\",jobId,queryableStateName)", "sourceAfterFix": "LOG.debug(\"Retrieving location for state={} of job={} from the cache.\",queryableStateName,jobId)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "cd70b8db19db4a22136c8411fd0b72252b2f975a", "projectName": "AsyncHttpClient.async-http-client", "bugType": "More Specific If", "problem": "     public String getResponseBody(String charset) throws IOException {\n         String contentType = getContentType();\n        if (contentType != null) {\n             charset = AsyncHttpProviderUtils.parseCharset(contentType);\n         }", "fixed": "     public String getResponseBody(String charset) throws IOException {\n         String contentType = getContentType();\n        if (contentType != null && charset == null) {\n             charset = AsyncHttpProviderUtils.parseCharset(contentType);\n         }", "sourceBeforeFix": "contentType != null", "sourceAfterFix": "contentType != null && charset == null"}
{"fixCommitSHA1": "1c93b2a8d7e7dc8d7a1620c5566e7eb20df8f0ec", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "     @Before\n     @Override\n     public void setUp() throws Exception {\n        nagios = new NagiosNscaStub(25667, \"secret\");\n         nagios.start();\n         super.setUp();", "fixed": "     @Before\n     @Override\n     public void setUp() throws Exception {\n        nagios = new NagiosNscaStub(25668, \"secret\");\n         nagios.start();\n         super.setUp();", "sourceBeforeFix": "config.setPort(25667)", "sourceAfterFix": "config.setPort(25668)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 15831, value = \"The master host controller cannot register slave host controllers as it's current running mode is '%s'\")\n     String adminOnlyModeCannotAcceptSlaves(RunningMode runningMode);\n     /**", "fixed": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 10831, value = \"The master host controller cannot register slave host controllers as it's current running mode is '%s'\")\n     String adminOnlyModeCannotAcceptSlaves(RunningMode runningMode);\n     /**", "sourceBeforeFix": "id=15872", "sourceAfterFix": "id=10872"}
{"fixCommitSHA1": "c97c55c5fe3bd7a54b9f36cf68f17b5cf19ecaf3", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Change Identifier Used", "problem": "     private void markAsDoneAndCacheConnection(final NettyResponseFuture<?> future, final Channel channel) throws MalformedURLException {\n         if (future.getKeepAlive() && maxConnectionsPerHost++ < config.getMaxConnectionPerHost()) {\n            connectionsPool.put(future.getUrl(), channel);\n         } else {\n             connectionsPool.remove(future.getUrl());\n         }", "fixed": "     private void markAsDoneAndCacheConnection(final NettyResponseFuture<?> future, final Channel channel) throws MalformedURLException {\n         if (future.getKeepAlive() && maxConnectionsPerHost++ < config.getMaxConnectionPerHost()) {\n            connectionsPool.put(future.getUrl().getBaseUrl(), channel);\n         } else {\n             connectionsPool.remove(future.getUrl());\n         }", "sourceBeforeFix": "ConcurrentHashMap<Url,Channel>", "sourceAfterFix": "ConcurrentHashMap<String,Channel>"}
{"fixCommitSHA1": "a63faf44e1b103a49d25a15c720fc5940ae9fc07", "projectName": "square.retrofit", "bugType": "Change Identifier Used", "problem": "     assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n     Type mBodyGeneric = new TypeToken<Maybe<List<String>>>() {}.getType();\n    assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n     Type fBodyGeneric = new TypeToken<Flowable<List<String>>>() {}.getType();\n    assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n     Type oResponseClass = new TypeToken<Observable<Response<String>>>() {}.getType();", "fixed": "     assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n     Type mBodyGeneric = new TypeToken<Maybe<List<String>>>() {}.getType();\n    assertThat(factory.get(mBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n     Type fBodyGeneric = new TypeToken<Flowable<List<String>>>() {}.getType();\n    assertThat(factory.get(fBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n     Type oResponseClass = new TypeToken<Observable<Response<String>>>() {}.getType();", "sourceBeforeFix": "factory.get(sBodyClass,NO_ANNOTATIONS,retrofit)", "sourceAfterFix": "factory.get(fBodyClass,NO_ANNOTATIONS,retrofit)"}
{"fixCommitSHA1": "4597da262b00311e03c657db986f712387def622", "projectName": "swagger-api.swagger-core", "bugType": "Change Identifier Used", "problem": "         final ModelImpl model = Json.mapper().readValue(json, ModelImpl.class);\n        assertTrue(model.getUniqueItems());\n     }\n     @Test", "fixed": "         final ModelImpl model = Json.mapper().readValue(json, ModelImpl.class);\n        assertFalse(model.getUniqueItems());\n     }\n     @Test", "sourceBeforeFix": "assertFalse(model.getUniqueItems())", "sourceAfterFix": "assertTrue(model.getUniqueItems())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "a295b91c37f681199a83fdb963344c19e0d015c0", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "     private void handleAtomicNumberSet(String[] args) {\n         long v = 0;\n         if (args.length > 1) {\n            v = Long.valueOf(args[1]);\n         }\n         getAtomicNumber().set(v);\n         println(getAtomicNumber().get());", "fixed": "     private void handleAtomicNumberSet(String[] args) {\n         long v = 0;\n         if (args.length > 1) {\n            v = Long.parseLong(args[1]);\n         }\n         getAtomicNumber().set(v);\n         println(getAtomicNumber().get());", "sourceBeforeFix": "Long.valueOf(args[2])", "sourceAfterFix": "Long.parseLong(args[2])"}
{"fixCommitSHA1": "2f77b4e6a3f1ab8bd855476a15a4ab2f6f7ae32c", "projectName": "neo4j.neo4j", "bugType": "Wrong Function Name", "problem": "                        + \") match admins<-[:PART_OF*0..]-group<-[:MEMBER_OF]-user return user.name, group.name\";\n         gen.get().addSnippet( \"query-get-admins\", createCypherSnippet( query ) );\n         String result = engine.execute( query )\n                .toString();\n         assertTrue( result.contains(\"Engin\") );\n         gen.get().addSnippet( \"o-query-get-admins\", createQueryResultSnippet( result ) );", "fixed": "                        + \") match admins<-[:PART_OF*0..]-group<-[:MEMBER_OF]-user return user.name, group.name\";\n         gen.get().addSnippet( \"query-get-admins\", createCypherSnippet( query ) );\n         String result = engine.execute( query )\n                .dumpToString();\n         assertTrue( result.contains(\"Engin\") );\n         gen.get().addSnippet( \"o-query-get-admins\", createQueryResultSnippet( result ) );", "sourceBeforeFix": "engine.execute(query).toString()", "sourceAfterFix": "engine.execute(query).dumpToString()"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface CMISEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedCMISEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface CMISEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedCMISEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "a50af4dbd590499463b96fbb2799974afbf4c7dd", "projectName": "alibaba.druid", "bugType": "Change Identifier Used", "problem": "                 Map<String, Object> row = new LinkedHashMap<String, Object>();\r\n                 for (int i = 0, size = rsMeta.getColumnCount(); i < size; ++i) {\r\n                    String columName = rsMeta.getColumnName(i + 1);\r\n                     Object value = rs.getObject(i + 1);\r\n                     row.put(columName, value);\r\n                 }\r", "fixed": "                 Map<String, Object> row = new LinkedHashMap<String, Object>();\r\n                 for (int i = 0, size = rsMeta.getColumnCount(); i < size; ++i) {\r\n                    String columName = rsMeta.getColumnLabel(i + 1);\r\n                     Object value = rs.getObject(i + 1);\r\n                     row.put(columName, value);\r\n                 }\r", "sourceBeforeFix": "rsMeta.getColumnName(i + 1)", "sourceAfterFix": "rsMeta.getColumnLabel(i + 1)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<Status> getUserTimeline(Paging paging) throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline.json\"\n                 , null, paging.asPostParameterList(), true));\n     }", "fixed": "      */\n     public ResponseList<Status> getUserTimeline(Paging paging) throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline.json\"\n                 , null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/home_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/home_timeline.json\",true))"}
{"fixCommitSHA1": "197c80a69418a88d3baa4d0b2c8b056c7b411320", "projectName": "druid-io.druid", "bugType": "Wrong Function Name", "problem": "   @Override\n   public void progressSection(String section, String message)\n   {\n    Stopwatch sectionWatch = sections.remove(section);\n     if (sectionWatch == null) {\n       throw new ISE(\"[%s]: Cannot progress tracker for [%s]. Nothing started.\", progressName, section);\n     }", "fixed": "   @Override\n   public void progressSection(String section, String message)\n   {\n    Stopwatch sectionWatch = sections.get(section);\n     if (sectionWatch == null) {\n       throw new ISE(\"[%s]: Cannot progress tracker for [%s]. Nothing started.\", progressName, section);\n     }", "sourceBeforeFix": "sections.remove(section)", "sourceAfterFix": "sections.get(section)"}
{"fixCommitSHA1": "bdd386e699e23c48524b822b9b890b077f294c69", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "         \"function f() {goog.asserts.assertInstanceof(this, Error);}\");\n   }\n  private String config(String rule, String message, String... fields) {\n     String result = \"requirement: {\\n\"\n         + \"  type: CUSTOM\\n\"\n         + \"  java_class: '\" + rule + \"'\\n\";", "fixed": "         \"function f() {goog.asserts.assertInstanceof(this, Error);}\");\n   }\n  private static String config(String rule, String message, String... fields) {\n     String result = \"requirement: {\\n\"\n         + \"  type: CUSTOM\\n\"\n         + \"  java_class: '\" + rule + \"'\\n\";", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "022423e200ae95a00393c3e4551a1985705795d8", "projectName": "druid-io.druid", "bugType": "Change Identifier Used", "problem": "               for (ComplexColumn complexColumn : complexColumnCache.values()) {\n                 Closeables.closeQuietly(complexColumn);\n               }\n              for (Object column : complexColumnCache.values()) {\n                 if (column instanceof Closeable) {\n                   Closeables.closeQuietly((Closeable) column);\n                 }", "fixed": "               for (ComplexColumn complexColumn : complexColumnCache.values()) {\n                 Closeables.closeQuietly(complexColumn);\n               }\n              for (Object column : objectColumnCache.values()) {\n                 if (column instanceof Closeable) {\n                   Closeables.closeQuietly((Closeable) column);\n                 }", "sourceBeforeFix": "complexColumnCache.values()", "sourceAfterFix": "objectColumnCache.values()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15851, value = \"Operation targets host %s but that host is not registered\")\n     String invalidOperationTargetHost(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10851, value = \"Operation targets host %s but that host is not registered\")\n     String invalidOperationTargetHost(String name);\n     /**", "sourceBeforeFix": "id=15830", "sourceAfterFix": "id=10830"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsText(String path, int batchSize, OUT endTuple) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), batchSize, endTuple);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsText(String path, int batchSize, OUT endTuple) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), batchSize, endTuple);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "e2283c8ee0b667ad14d017573c1a4da98dedfcac", "projectName": "neo4j.neo4j", "bugType": "Change Modifier", "problem": "         }\n     }\n    public String filterVersionForUDC( String version )\n     {\n         if ( !version.contains( \"+\" ) )\n         {", "fixed": "         }\n     }\n    public static String filterVersionForUDC( String version )\n     {\n         if ( !version.contains( \"+\" ) )\n         {", "sourceBeforeFix": "1", "sourceAfterFix": "9"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "2f77b4e6a3f1ab8bd855476a15a4ab2f6f7ae32c", "projectName": "neo4j.neo4j", "bugType": "Wrong Function Name", "problem": "         \t\t\"order by min(length(p)), user.name\";\n         gen.get().addSnippet( \"query-get-members\", createCypherSnippet( query ) );\n         result = engine.execute( query )\n                .toString();\n         assertTrue( result.contains(\"Engin\") );\n         gen.get()\n                 .addSnippet( \"o-query-get-members\",", "fixed": "         \t\t\"order by min(length(p)), user.name\";\n         gen.get().addSnippet( \"query-get-members\", createCypherSnippet( query ) );\n         result = engine.execute( query )\n                .dumpToString();\n         assertTrue( result.contains(\"Engin\") );\n         gen.get()\n                 .addSnippet( \"o-query-get-members\",", "sourceBeforeFix": "engine.execute(query).toString()", "sourceAfterFix": "engine.execute(query).dumpToString()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "eb86a81034dce144bd7ac1e879ddf51a8e412a91", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "         private final Endpoint endpoint;\n         private final ProducerTemplate producerTemplate;\n        public CamelClient(CamelContext camelContext) {\nthis.endpoint = camelContext.getEndpoint(\"netty:tcp:\n             this.producerTemplate = camelContext.createProducerTemplate();\n         }", "fixed": "         private final Endpoint endpoint;\n         private final ProducerTemplate producerTemplate;\n        CamelClient(CamelContext camelContext) {\nthis.endpoint = camelContext.getEndpoint(\"netty:tcp:\n             this.producerTemplate = camelContext.createProducerTemplate();\n         }", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedToMe(Paging paging) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_to_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedToMe(Paging paging) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_to_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "DirectMessage.constructDirectMessages(get(getBaseURL() + \"direct_messages.json\",true))", "sourceAfterFix": "DirectMessage.createDirectMessageList(get(getBaseURL() + \"direct_messages.json\",true))"}
{"fixCommitSHA1": "5ba6ded7e01cc902e75403dac6cb5c5f9d74f74d", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "       if (CommonUtils.isLocalHost(address) && Configuration\n           .getBoolean(PropertyKey.USER_SHORT_CIRCUIT_ENABLED) && !NettyUtils\n           .isDomainSocketSupported(address)) {\n        LOG.info(\"Creating short circuit output stream for block {} @ {}\", blockId, address);\n         return LocalFilePacketWriter.create(context, address, blockId, options);\n       } else {\n        LOG.info(\"Creating netty output stream for block {} @ {} from client {}\", blockId, address,\n             NetworkAddressUtils.getClientHostName());\n         return NettyPacketWriter\n             .create(context, address, blockId, blockSize, Protocol.RequestType.ALLUXIO_BLOCK,", "fixed": "       if (CommonUtils.isLocalHost(address) && Configuration\n           .getBoolean(PropertyKey.USER_SHORT_CIRCUIT_ENABLED) && !NettyUtils\n           .isDomainSocketSupported(address)) {\n        LOG.debug(\"Creating short circuit output stream for block {} @ {}\", blockId, address);\n         return LocalFilePacketWriter.create(context, address, blockId, options);\n       } else {\n        LOG.debug(\"Creating netty output stream for block {} @ {} from client {}\", blockId, address,\n             NetworkAddressUtils.getClientHostName());\n         return NettyPacketWriter\n             .create(context, address, blockId, blockSize, Protocol.RequestType.ALLUXIO_BLOCK,", "sourceBeforeFix": "LOG.info(\"Creating short circuit output stream for block {} @ {}\",blockId,address)", "sourceAfterFix": "LOG.debug(\"Creating short circuit output stream for block {} @ {}\",blockId,address)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface SqsEndpointBuilder\n             extends\n                 SqsEndpointConsumerBuilder, SqsEndpointProducerBuilder {\n         default AdvancedSqsEndpointBuilder advanced() {", "fixed": "     \n    public interface SqsEndpointBuilder\n             extends\n                 SqsEndpointConsumerBuilder, SqsEndpointProducerBuilder {\n         default AdvancedSqsEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should fail if global property being updated does not already exist\n \t * @should update a global property whose typed value is handled by a custom datatype\n \t */\n\tpublic void updateGlobalProperty(String propertyName, String propertyValue) throws IllegalStateException;\n \t/**\n \t * Save the given global property to the database", "fixed": " \t * @should fail if global property being updated does not already exist\n \t * @should update a global property whose typed value is handled by a custom datatype\n \t */\n\tpublic void updateGlobalProperty(String propertyName, String propertyValue);\n \t/**\n \t * Save the given global property to the database", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public List<Trends> getDailyTrends() throws TwitterException {\n        return Trends.constructTrendsList(get(getSearchBaseURL() + \"trends/daily.json\", false));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n      */\n     public List<Trends> getDailyTrends() throws TwitterException {\n        return Trends.createTrendsList(get(getSearchBaseURL() + \"trends/daily.json\", false));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/public_timeline.json\",false))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/public_timeline.json\",false))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "19c2a076c25faf94ae9e8f4072f2a4590c9ee1fe", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t\t}\n \t\tfactory.setConfigurations(Arrays.asList(configurations[0], configurations[1]));\n \t\tfactory.addConfigurations(configurations[2], configurations[3]);\n\t\tthis.container = factory.getEmbdeddedServletContainer();\n \t\tInOrder ordered = inOrder((Object[]) configurations);\n \t\tfor (Configuration configuration : configurations) {\n \t\t\tordered.verify(configuration).configure((WebAppContext) anyObject());", "fixed": " \t\t}\n \t\tfactory.setConfigurations(Arrays.asList(configurations[0], configurations[1]));\n \t\tfactory.addConfigurations(configurations[2], configurations[3]);\n\t\tthis.container = factory.getEmbeddedServletContainer();\n \t\tInOrder ordered = inOrder((Object[]) configurations);\n \t\tfor (Configuration configuration : configurations) {\n \t\t\tordered.verify(configuration).configure((WebAppContext) anyObject());", "sourceBeforeFix": "factory.getEmbdeddedServletContainer()", "sourceAfterFix": "factory.getEmbeddedServletContainer()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  private final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedFlinkEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default FlinkEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedFlinkEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default FlinkEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "8b3c80c0bf286943881455566423a18c563c3896", "projectName": "Graylog2.graylog2-server", "bugType": "Change Identifier Used", "problem": "     }\n     protected Set<String> getSelectedFields(String fields) {\n        Set<String> selectedFields = Sets.newHashSet();\n         if (fields != null && !fields.isEmpty()) {\n             Iterables.addAll(selectedFields, Splitter.on(',').split(fields));\n         } else {", "fixed": "     }\n     protected Set<String> getSelectedFields(String fields) {\n        Set<String> selectedFields = Sets.newLinkedHashSet();\n         if (fields != null && !fields.isEmpty()) {\n             Iterables.addAll(selectedFields, Splitter.on(',').split(fields));\n         } else {", "sourceBeforeFix": "Sets.newHashSet()", "sourceAfterFix": "Sets.newLinkedHashSet()"}
{"fixCommitSHA1": "e74cd24ff2229b060e219af33c3abe5cbf1079d1", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "                   Bytes.toStringBinary(data));\n               throw e;\n             }\n            LOG.error(\"Node \" + path + \" already exists and this is not a \" +\n                 \"retry\");\n             throw e;", "fixed": "                   Bytes.toStringBinary(data));\n               throw e;\n             }\n            LOG.info(\"Node \" + path + \" already exists and this is not a \" +\n                 \"retry\");\n             throw e;", "sourceBeforeFix": "LOG.error(\"Node \" + path + \" already exists and this is not a \"+ \"retry\")", "sourceAfterFix": "LOG.info(\"Node \" + path + \" already exists and this is not a \"+ \"retry\")"}
{"fixCommitSHA1": "4665dcf9ab41c3c61cd42aad296ebfe518bfa003", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\n \tpublic void glDeleteTextures (int n, IntBuffer textures) {\n\t\tGL.glDeleteTexturesEXT(n, textures, Memory.getPosition(textures));\n \t}\n \tpublic void glDepthFunc (int func) {", "fixed": " \t}\n \tpublic void glDeleteTextures (int n, IntBuffer textures) {\n\t\tGL.glDeleteTextures(n, textures, Memory.getPosition(textures));\n \t}\n \tpublic void glDepthFunc (int func) {", "sourceBeforeFix": "GL.glCopyTexSubImage2DEXT(target,level,xoffset,yoffset,x,y,width,height)", "sourceAfterFix": "GL.glCopyTexSubImage2D(target,level,xoffset,yoffset,x,y,width,height)"}
{"fixCommitSHA1": "5c77a7dcd455f7a6e0ba3f289266032be687dc4f", "projectName": "apache.hbase", "bugType": "Change Numeric Literal", "problem": "     ResultScanner scan = table.getScanner(fam1);\n     scan.next();\n     scan.close();\n    counter = verifyCount(counter + 2);\n     Get g2 = new Get(row);\n     table.get(Lists.newArrayList(g, g2));", "fixed": "     ResultScanner scan = table.getScanner(fam1);\n     scan.next();\n     scan.close();\n    counter = verifyCount(counter + 1);\n     Get g2 = new Get(row);\n     table.get(Lists.newArrayList(g, g2));", "sourceBeforeFix": "counter + 2", "sourceAfterFix": "counter + 1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "9716d2ae673a576cb345c3bfb24cf71654d8f112", "projectName": "openhab.openhab", "bugType": "Wrong Function Name", "problem": " \t * Validates Username and Password then saved sercurityToken to a variable\n \t */\n \tprivate void login() throws InvalidLoginException, IOException {\n\t\tlogger.debug(\"attempting to login\");\n \t\tString url = String\n \t\t\t\t.format(\"%s/api/user/validate?appId=%s&SecurityToken=null&username=%s&password=%s\",\n \t\t\t\t\t\tWEBSITE, enc(appId), enc(userName), enc(password));", "fixed": " \t * Validates Username and Password then saved sercurityToken to a variable\n \t */\n \tprivate void login() throws InvalidLoginException, IOException {\n\t\tlogger.trace(\"attempting to login\");\n \t\tString url = String\n \t\t\t\t.format(\"%s/api/user/validate?appId=%s&SecurityToken=null&username=%s&password=%s\",\n \t\t\t\t\t\tWEBSITE, enc(appId), enc(userName), enc(password));", "sourceBeforeFix": "logger.debug(\"Retreiveing door data\")", "sourceAfterFix": "logger.trace(\"Retreiveing door data\")"}
{"fixCommitSHA1": "536a8fa49fc8ce69e42af6004dc328ddc2ded045", "projectName": "Graylog2.graylog2-server", "bugType": "Same Function More Args", "problem": "         final Map<String, String> result = ImmutableMap.of(\"alarmcallback_id\", id);\n         final URI alarmCallbackUri = UriBuilder.fromResource(AlarmCallbackResource.class)\n                 .path(\"{alarmCallbackId}\")\n                .build(id);\n         return Response.created(alarmCallbackUri).entity(result).build();\n     }", "fixed": "         final Map<String, String> result = ImmutableMap.of(\"alarmcallback_id\", id);\n         final URI alarmCallbackUri = UriBuilder.fromResource(AlarmCallbackResource.class)\n                 .path(\"{alarmCallbackId}\")\n                .build(streamid, id);\n         return Response.created(alarmCallbackUri).entity(result).build();\n     }", "sourceBeforeFix": "UriBuilder.fromResource(AlarmCallbackResource.class).path(\"{alarmCallbackId}\").build(id)", "sourceAfterFix": "UriBuilder.fromResource(AlarmCallbackResource.class).path(\"{alarmCallbackId}\").build(streamid,id)"}
{"fixCommitSHA1": "4605ae0a34858309171e726e1924b9a37695c977", "projectName": "apache.storm", "bugType": "Change Identifier Used", "problem": "         private TreeSet<ObjectResources> getSortedNodesFor(String rackId) {\n             return cachedNodes.computeIfAbsent(rackId,\n                (rid) -> sortNodes(rackIdToNodes.get(rid), exec, td, rid, perNodeScheduledCount));\n         }\n         @Override", "fixed": "         private TreeSet<ObjectResources> getSortedNodesFor(String rackId) {\n             return cachedNodes.computeIfAbsent(rackId,\n                (rid) -> sortNodes(rackIdToNodes.getOrDefault(rid, Collections.emptyList()), exec, td, rid, perNodeScheduledCount));\n         }\n         @Override", "sourceBeforeFix": "rackIdToNodes.get(rid)", "sourceAfterFix": "rackIdToNodes.getOrDefault(rid,Collections.emptyList())"}
{"fixCommitSHA1": "2918286bf4a010c9ac8eadffb958ff10fb41ad62", "projectName": "junit-team.junit", "bugType": "Wrong Function Name", "problem": "  * @since 4.5\n  */\n public class BlockJUnit4ClassRunner extends ParentRunner<FrameworkMethod> {\n    private ConcurrentHashMap<FrameworkMethod, Description> fMethodDescriptions = new ConcurrentHashMap<FrameworkMethod, Description>();\n     /**\n      * Creates a BlockJUnit4ClassRunner to run {@code klass}\n      *", "fixed": "  * @since 4.5\n  */\n public class BlockJUnit4ClassRunner extends ParentRunner<FrameworkMethod> {\n    private final ConcurrentHashMap<FrameworkMethod, Description> fMethodDescriptions = new ConcurrentHashMap<FrameworkMethod, Description>();\n     /**\n      * Creates a BlockJUnit4ClassRunner to run {@code klass}\n      *", "sourceBeforeFix": "fMethodDescriptions.put(method,description)", "sourceAfterFix": "fMethodDescriptions.putIfAbsent(method,description)"}
{"fixCommitSHA1": "39fe5a830bb4e05a85bef3e52115c708f9409abf", "projectName": "wildfly.wildfly", "bugType": "Wrong Function Name", "problem": "     }\n     private static ModelControllerClient createClient2() throws UnknownHostException {\n        return ModelControllerClient.Factory.create(InetAddress.getByName(TestSuiteEnvironment.getServerAddress()),\n                 TestSuiteEnvironment.getServerPort() + 300,\n                 Authentication.getCallbackHandler());\n     }", "fixed": "     }\n     private static ModelControllerClient createClient2() throws UnknownHostException {\n        return ModelControllerClient.Factory.create(InetAddress.getByName(TestSuiteEnvironment.getServerAddressNode1()),\n                 TestSuiteEnvironment.getServerPort() + 300,\n                 Authentication.getCallbackHandler());\n     }", "sourceBeforeFix": "TestSuiteEnvironment.getServerAddress()", "sourceAfterFix": "TestSuiteEnvironment.getServerAddressNode1()"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform3fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform3(location, v);\r\n \t}\r\n \tpublic void glUniform3fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform3(location, toFloatBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform3i (int location, int x, int y, int z) {\r", "fixed": " \t}\r\n \tpublic void glUniform3fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform3fv(location, v);\r\n \t}\r\n \tpublic void glUniform3fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform3fv(location, toFloatBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform3i (int location, int x, int y, int z) {\r", "sourceBeforeFix": "GL20.glUniform3(location,v)", "sourceAfterFix": "GL20.glUniform3fv(location,v)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedIgniteCacheEndpointBuilder\n             extends\n                 AdvancedIgniteCacheEndpointConsumerBuilder, AdvancedIgniteCacheEndpointProducerBuilder {\n         default IgniteCacheEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedIgniteCacheEndpointBuilder\n             extends\n                 AdvancedIgniteCacheEndpointConsumerBuilder, AdvancedIgniteCacheEndpointProducerBuilder {\n         default IgniteCacheEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface SqsEndpointBuilder\n             extends\n                 SqsEndpointConsumerBuilder, SqsEndpointProducerBuilder {\n         default AdvancedSqsEndpointBuilder advanced() {", "fixed": "     \n    public interface SqsEndpointBuilder\n             extends\n                 SqsEndpointConsumerBuilder, SqsEndpointProducerBuilder {\n         default AdvancedSqsEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "55ed50c4975cf694828d46ee9ca32ce72a9ef913", "projectName": "clojure.clojure", "bugType": "Change Identifier Used", "problem": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 10:\r\n\t\t\treturn invoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "fixed": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 10:\r\n\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "sourceBeforeFix": "invoke(args.first(),(args=args.rest()).first(),args.rest())", "sourceAfterFix": "doInvoke(args.first(),(args=args.rest()).first(),args.rest())"}
{"fixCommitSHA1": "4e2b481ca535a5db34807f8cc88c79740f485c49", "projectName": "openmrs.openmrs-core", "bugType": "Wrong Function Name", "problem": " \t\t\tHttpServletResponse response) throws ServletException, IOException {\r\n \t\tHttpSession httpSession = request.getSession();\r\n\t\tString ipAddress = request.getLocalAddr();\r\n \t\tInteger loginAttempts = loginAttemptsByIP.get(ipAddress);\r\n \t\tif (loginAttempts == null)\r\n \t\t\tloginAttempts = 1;\r", "fixed": " \t\t\tHttpServletResponse response) throws ServletException, IOException {\r\n \t\tHttpSession httpSession = request.getSession();\r\n\t\tString ipAddress = request.getRemoteAddr();\r\n \t\tInteger loginAttempts = loginAttemptsByIP.get(ipAddress);\r\n \t\tif (loginAttempts == null)\r\n \t\t\tloginAttempts = 1;\r", "sourceBeforeFix": "request.getLocalAddr()", "sourceAfterFix": "request.getRemoteAddr()"}
{"fixCommitSHA1": "761d3ff3b19109715644ebc2bfa0396f3148d772", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "                 } catch (InterruptedException e) {\n                     e.printStackTrace();\n                 }\n                hz1.getLifecycleService().terminate();\n             }\n         };", "fixed": "                 } catch (InterruptedException e) {\n                     e.printStackTrace();\n                 }\n                hz1.getLifecycleService().shutdown();\n             }\n         };", "sourceBeforeFix": "hz1.getLifecycleService().terminate()", "sourceAfterFix": "hz1.getLifecycleService().shutdown()"}
{"fixCommitSHA1": "55ed50c4975cf694828d46ee9ca32ce72a9ef913", "projectName": "clojure.clojure", "bugType": "Wrong Function Name", "problem": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 8:\r\n\t\t\treturn invoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "fixed": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 8:\r\n\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "sourceBeforeFix": "invoke(args.first(),(args=args.rest()).first(),args.rest())", "sourceAfterFix": "doInvoke(args.first(),(args=args.rest()).first(),args.rest())"}
{"fixCommitSHA1": "f135cc4188dd173e8fc175bc5d26cf1a970ac39e", "projectName": "wildfly.wildfly", "bugType": "Wrong Function Name", "problem": "                 ModelNode oldResponse = response;\n                 try {\n                     flags = EnumSet.noneOf(Flag.class);\n                    response = step.response;\n                     ModelNode newOperation = operation = step.operation;\n                     modelAddress = PathAddress.pathAddress(newOperation.get(ADDRESS));\n                     step.handler.execute(this, newOperation);", "fixed": "                 ModelNode oldResponse = response;\n                 try {\n                     flags = EnumSet.noneOf(Flag.class);\n                    response = this.response = step.response;\n                     ModelNode newOperation = operation = step.operation;\n                     modelAddress = PathAddress.pathAddress(newOperation.get(ADDRESS));\n                     step.handler.execute(this, newOperation);", "sourceBeforeFix": "response.set(ROLLED_BACK)", "sourceAfterFix": "response.get(ROLLED_BACK)"}
{"fixCommitSHA1": "cbed2a13b8417c5f78f4f0ac1cea2f9b6e4f5526", "projectName": "apache.flink", "bugType": "Change Numeric Literal", "problem": " /**\n  * The base class of all tuples. Tuples have a fix length and contain a set of fields,\n  * which may all be of different types. Because Tuples are strongly typed, each distinct\n * tuple length is represented by its own class. Tuples exists with up to 22 fields and\n * are described in the classes {@link Tuple1} to {@link Tuple22}.\n  * <p>\n  * The fields in the tuples may be accessed directly a public fields, or via position (zero indexed)\n* {@link", "fixed": " /**\n  * The base class of all tuples. Tuples have a fix length and contain a set of fields,\n  * which may all be of different types. Because Tuples are strongly typed, each distinct\n * tuple length is represented by its own class. Tuples exists with up to 25 fields and\n * are described in the classes {@link Tuple1} to {@link Tuple25}.\n  * <p>\n  * The fields in the tuples may be accessed directly a public fields, or via position (zero indexed)\n* {@link", "sourceBeforeFix": "MAX_ARITY=22", "sourceAfterFix": "MAX_ARITY=25"}
{"fixCommitSHA1": "39aa03261a00c409f29341c286febaec99468d65", "projectName": "apache.flink", "bugType": "Change Boolean Literal", "problem": " \t *         thrown if the given vertex cannot be connected to <code>vertex</code> in the requested manner\n \t */\n \tpublic void connectTo(final AbstractJobVertex vertex) throws JobGraphDefinitionException {\n\t\tthis.connectTo(vertex, null, null, -1, -1, DistributionPattern.BIPARTITE, false);\n \t}\n \t/**", "fixed": " \t *         thrown if the given vertex cannot be connected to <code>vertex</code> in the requested manner\n \t */\n \tpublic void connectTo(final AbstractJobVertex vertex) throws JobGraphDefinitionException {\n\t\tthis.connectTo(vertex, null, null, -1, -1, DistributionPattern.BIPARTITE, true);\n \t}\n \t/**", "sourceBeforeFix": "this.connectTo(vertex,channelType,compressionLevel,-1,-1,DistributionPattern.BIPARTITE,false)", "sourceAfterFix": "this.connectTo(vertex,channelType,compressionLevel,-1,-1,DistributionPattern.BIPARTITE,true)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15856, value = \"Invalid url stream.\")\n     String invalidUrlStream();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10856, value = \"Invalid url stream.\")\n     String invalidUrlStream();\n     /**", "sourceBeforeFix": "id=15851", "sourceAfterFix": "id=10851"}
{"fixCommitSHA1": "e04cbbf23e9273cca31b1cc12142e34fae753542", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "         }\n         \n        void reportPrivateCtor() {\n             withPrivateCtor = true;\n         }\n         \n        void reportNonPrivateCtor() {\n             withNonPrivateCtor = true;\n         }", "fixed": "         }\n         \n        private void reportPrivateCtor() {\n             withPrivateCtor = true;\n         }\n         \n        private void reportNonPrivateCtor() {\n             withNonPrivateCtor = true;\n         }", "sourceBeforeFix": "0", "sourceAfterFix": "2"}
{"fixCommitSHA1": "a4d8f930af1f17a6c48a9abd94f49e5fd719fc31", "projectName": "netty.netty", "bugType": "Wrong Function Name", "problem": "             int equalsPos = encoding.indexOf('=');\n             if (equalsPos != -1) {\n                 try {\n                    q = Float.valueOf(encoding.substring(equalsPos + 1));\n                 } catch (NumberFormatException e) {\n                     q = 0.0f;", "fixed": "             int equalsPos = encoding.indexOf('=');\n             if (equalsPos != -1) {\n                 try {\n                    q = Float.parseFloat(encoding.substring(equalsPos + 1));\n                 } catch (NumberFormatException e) {\n                     q = 0.0f;", "sourceBeforeFix": "Float.valueOf(encoding.substring(equalsPos + 1))", "sourceAfterFix": "Float.parseFloat(encoding.substring(equalsPos + 1))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleAlternativesWithCommonLabel_1() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(561);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "fixed": " \tpublic void testMultipleAlternativesWithCommonLabel_1() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(560);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "sourceBeforeFix": "new StringBuilder(561)", "sourceAfterFix": "new StringBuilder(560)"}
{"fixCommitSHA1": "d33c0ebf8f8f52fb6fb82d615cec50a10627d267", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t\t\n\t\tprivate String port = \"5000\";\n \t\t@Override\n \t\tprotected void applyToCrshShellConfig(Properties config) {\n \t\t\tif (this.enabled) {\n\t\t\t\tconfig.put(\"crash.telnet.port\", this.port);\n \t\t\t}\n \t\t}", "fixed": " \t\t\n\t\tprivate Integer port = 5000;\n \t\t@Override\n \t\tprotected void applyToCrshShellConfig(Properties config) {\n \t\t\tif (this.enabled) {\n\t\t\t\tconfig.put(\"crash.telnet.port\", String.valueOf(this.port));\n \t\t\t}\n \t\t}", "sourceBeforeFix": "public String getPort(){   return this.port; } ", "sourceAfterFix": "public Integer getPort(){   return this.port; } "}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15853, value = \"Unexpected initial path key %s\")\n     IllegalStateException unexpectedInitialPathKey(String key);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10853, value = \"Unexpected initial path key %s\")\n     IllegalStateException unexpectedInitialPathKey(String key);\n     /**", "sourceBeforeFix": "id=15863", "sourceAfterFix": "id=10863"}
{"fixCommitSHA1": "9754de49878983bf090655203e0c880cccad7b2e", "projectName": "Atmosphere.atmosphere", "bugType": "Change Identifier Used", "problem": "     }\n     protected void invalidateExpiredEntries() {\n        long now = System.nanoTime();\n         synchronized (messages) {\n             Set<String> inactiveClients = new HashSet<String>();", "fixed": "     }\n     protected void invalidateExpiredEntries() {\n        long now = System.currentTimeMillis();\n         synchronized (messages) {\n             Set<String> inactiveClients = new HashSet<String>();", "sourceBeforeFix": "System.nanoTime()", "sourceAfterFix": "System.currentTimeMillis()"}
{"fixCommitSHA1": "f24f07f3cd5f7a1b9fe0ed4606208dbf2cf0f817", "projectName": "eclipse.vert.x", "bugType": "Change Binary Operator", "problem": "   public S binaryMessageHandler(Handler<Buffer> handler) {\n     synchronized (conn) {\n       checkClosed();\n      if (frameHandler == null || frameHandler.getClass() == FrameAggregator.class) {\n         frameHandler = new FrameAggregator();\n       }\n       ((FrameAggregator) frameHandler).binaryMessageHandler = handler;", "fixed": "   public S binaryMessageHandler(Handler<Buffer> handler) {\n     synchronized (conn) {\n       checkClosed();\n      if (frameHandler == null || frameHandler.getClass() != FrameAggregator.class) {\n         frameHandler = new FrameAggregator();\n       }\n       ((FrameAggregator) frameHandler).binaryMessageHandler = handler;", "sourceBeforeFix": "frameHandler.getClass() == FrameAggregator.class", "sourceAfterFix": "frameHandler.getClass() != FrameAggregator.class"}
{"fixCommitSHA1": "8716b68d562606ede1091f5a4dc90a2c9bac47f8", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "         SimpleRegistry registry = new SimpleRegistry();\n        registry.put(\"curator\", client);\n         producerContext = new DefaultCamelContext(registry);", "fixed": "         SimpleRegistry registry = new SimpleRegistry();\n        registry.bind(\"curator\", client);\n         producerContext = new DefaultCamelContext(registry);", "sourceBeforeFix": "registry.put(\"curator\",client)", "sourceAfterFix": "registry.bind(\"curator\",client)"}
{"fixCommitSHA1": "2ebebdf68c3f6d4d93d4a485a0be98f41530e890", "projectName": "wildfly.wildfly", "bugType": "Same Function More Args", "problem": "         NewOperationContextImpl context = new NewOperationContextImpl(this, controllerType, EnumSet.of(NewOperationContextImpl.ContextFlag.ROLLBACK_ON_FAIL), handler, modelReference.get(), control, bootingFlag.getAndSet(false));\n         ModelNode response = new ModelNode();\n         if (prepareStep != null) {\n            context.addStep(prepareStep, NewOperationContext.Stage.MODEL);\n         }\n        context.addStep(new NewStepHandler() {\n             public void execute(final NewOperationContext context, final ModelNode operation) {\n                 if (context.completeStep() == NewOperationContext.ResultAction.KEEP && context.isModelAffected()) {", "fixed": "         NewOperationContextImpl context = new NewOperationContextImpl(this, controllerType, EnumSet.of(NewOperationContextImpl.ContextFlag.ROLLBACK_ON_FAIL), handler, modelReference.get(), control, bootingFlag.getAndSet(false));\n         ModelNode response = new ModelNode();\n         if (prepareStep != null) {\n            context.addStep(response, operation, prepareStep, NewOperationContext.Stage.MODEL);\n         }\n        context.addStep(response, operation, new NewStepHandler() {\n             public void execute(final NewOperationContext context, final ModelNode operation) {\n                 if (context.completeStep() == NewOperationContext.ResultAction.KEEP && context.isModelAffected()) {", "sourceBeforeFix": "context.addStep(prepareStep,NewOperationContext.Stage.MODEL)", "sourceAfterFix": "context.addStep(response,operation,prepareStep,NewOperationContext.Stage.MODEL)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n  private final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Alias string literals with global variables, to avoid creating lots of\n    * transient objects.\n    */\n  final PassFactory aliasStrings =\n       new PassFactory(\"aliasStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "557a51f3ac19cf4b2ffbcb32354152c88643398d", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "     assertThat(keySet).containsExactly(5, 6, 7, 8, 9, 10, 11, 12);\n   }\n  private void getAll(LoadingCache<Integer, Integer> cache, List<Integer> keys) {\n     for (int i : keys) {\n       cache.getUnchecked(i);\n     }", "fixed": "     assertThat(keySet).containsExactly(5, 6, 7, 8, 9, 10, 11, 12);\n   }\n  private static void getAll(LoadingCache<Integer, Integer> cache, List<Integer> keys) {\n     for (int i : keys) {\n       cache.getUnchecked(i);\n     }", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "ec850bd48804a670b56d49d9e3d8d36c26f7674b", "projectName": "openhab.openhab", "bugType": "More Specific If", "problem": "\t\t\tif (sendMessage() == false) {\n \t\t\t\tcurrentStage = currentStage.getNextStage();\n \t\t\t\tstageAdvanced = true;", "fixed": "\t\t\tif (currentStage != NodeStage.DONE && sendMessage() == false) {\n \t\t\t\tcurrentStage = currentStage.getNextStage();\n \t\t\t\tstageAdvanced = true;", "sourceBeforeFix": "sendMessage() == false", "sourceAfterFix": "currentStage != NodeStage.DONE && sendMessage() == false"}
{"fixCommitSHA1": "a295b91c37f681199a83fdb963344c19e0d015c0", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "     protected void handleMultiMapTryLock(String[] args) {\n         String key = args[1];\n        long time = (args.length > 2) ? Long.valueOf(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMultiMap().tryLock(key);", "fixed": "     protected void handleMultiMapTryLock(String[] args) {\n         String key = args[1];\n        long time = (args.length > 2) ? Long.parseLong(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMultiMap().tryLock(key);", "sourceBeforeFix": "Long.valueOf(args[1])", "sourceAfterFix": "Long.parseLong(args[1])"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedMiloServerEndpointBuilder\n             extends\n                 AdvancedMiloServerEndpointConsumerBuilder, AdvancedMiloServerEndpointProducerBuilder {\n         default MiloServerEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedMiloServerEndpointBuilder\n             extends\n                 AdvancedMiloServerEndpointConsumerBuilder, AdvancedMiloServerEndpointProducerBuilder {\n         default MiloServerEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "66181be1c62816d916c9301dddd2c8c5bc7be1dc", "projectName": "druid-io.druid", "bugType": "Change Modifier", "problem": "   @Override\n   public Object compute(Map<String, Object> combinedAggregators)\n   {\n    Object[] args = new Object[fieldNames.size()];\n     int i = 0;\n     for(String field : fieldNames) {\n       args[i++] = combinedAggregators.get(field);", "fixed": "   @Override\n   public Object compute(Map<String, Object> combinedAggregators)\n   {\n    final Object[] args = new Object[fieldNames.size()];\n     int i = 0;\n     for(String field : fieldNames) {\n       args[i++] = combinedAggregators.get(field);", "sourceBeforeFix": "0", "sourceAfterFix": "16"}
{"fixCommitSHA1": "84d6e4785ecad972742bb1bb869cfc3a5efa731d", "projectName": "cucumber.cucumber-jvm", "bugType": "Change Modifier", "problem": "         Executable testMethod = injectorSourceFactory::create;\n         InjectorSourceInstantiationFailed actualThrown = assertThrows(InjectorSourceInstantiationFailed.class, testMethod);\n         assertAll(\"Checking Exception including cause\",\n            () -> assertThat(\"Unexpected exception message\", actualThrown.getMessage(), is(equalTo(\"Instantiation of 'io.cucumber.guice.InjectorSourceFactoryTest$NoDefaultConstructor' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a   zero args constructor.\"))),\n             () -> assertThat(\"Unexpected exception cause class\", actualThrown.getCause(), isA(InstantiationException.class))\n         );\n     }", "fixed": "         Executable testMethod = injectorSourceFactory::create;\n         InjectorSourceInstantiationFailed actualThrown = assertThrows(InjectorSourceInstantiationFailed.class, testMethod);\n         assertAll(\"Checking Exception including cause\",\n            () -> assertThat(\"Unexpected exception message\", actualThrown.getMessage(), is(equalTo(\"Instantiation of 'io.cucumber.guice.InjectorSourceFactoryTest$NoDefaultConstructor' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a public zero args constructor.\"))),\n             () -> assertThat(\"Unexpected exception cause class\", actualThrown.getCause(), isA(InstantiationException.class))\n         );\n     }", "sourceBeforeFix": "8", "sourceAfterFix": "9"}
{"fixCommitSHA1": "83b9dd427535bce39be43a9e8224cdbc352d7427", "projectName": "square.okhttp", "bugType": "Change Modifier", "problem": "     private Sink body;\n     boolean done;\n    public CacheRequestImpl(final DiskLruCache.Editor editor) {\n       this.editor = editor;\n       this.cacheOut = editor.newSink(ENTRY_BODY);\n       this.body = new ForwardingSink(cacheOut) {", "fixed": "     private Sink body;\n     boolean done;\n    CacheRequestImpl(final DiskLruCache.Editor editor) {\n       this.editor = editor;\n       this.cacheOut = editor.newSink(ENTRY_BODY);\n       this.body = new ForwardingSink(cacheOut) {", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "9418ff826024ef85b3a74de9e82951e3157051d4", "projectName": "hazelcast.hazelcast", "bugType": "Less Specific If", "problem": "      * This call is only made by the IO thread.\n      */\n     private void unschedule() {\n        if (dirtyOutputBuffer()) {\n             registerOp(SelectionKey.OP_WRITE);", "fixed": "      * This call is only made by the IO thread.\n      */\n     private void unschedule() {\n        if (dirtyOutputBuffer() || currentPacket != null) {\n             registerOp(SelectionKey.OP_WRITE);", "sourceBeforeFix": "dirtyOutputBuffer()", "sourceAfterFix": "dirtyOutputBuffer() || currentPacket != null"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15852, value = \"Caught %s storing deployment content -- %s\")\n     String caughtExceptionStoringDeploymentContent(String exceptionName, Throwable exception);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10852, value = \"Caught %s storing deployment content -- %s\")\n     String caughtExceptionStoringDeploymentContent(String exceptionName, Throwable exception);\n     /**", "sourceBeforeFix": "id=15846", "sourceAfterFix": "id=10846"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "51c2b049c21582fcf9db82244063e67196cabad5", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t\tpublic CodecCustomizer jacksonCodecCustomizer(ObjectMapper objectMapper) {\n \t\t\treturn (configurer) -> {\n \t\t\t\tCodecConfigurer.DefaultCodecs defaults = configurer.defaultCodecs();\n\t\t\t\tdefaults.jackson2Decoder(\n \t\t\t\t\t\tnew Jackson2JsonDecoder(objectMapper, EMPTY_MIME_TYPES));\n\t\t\t\tdefaults.jackson2Encoder(\n \t\t\t\t\t\tnew Jackson2JsonEncoder(objectMapper, EMPTY_MIME_TYPES));\n \t\t\t};\n \t\t}", "fixed": " \t\tpublic CodecCustomizer jacksonCodecCustomizer(ObjectMapper objectMapper) {\n \t\t\treturn (configurer) -> {\n \t\t\t\tCodecConfigurer.DefaultCodecs defaults = configurer.defaultCodecs();\n\t\t\t\tdefaults.jackson2JsonDecoder(\n \t\t\t\t\t\tnew Jackson2JsonDecoder(objectMapper, EMPTY_MIME_TYPES));\n\t\t\t\tdefaults.jackson2JsonEncoder(\n \t\t\t\t\t\tnew Jackson2JsonEncoder(objectMapper, EMPTY_MIME_TYPES));\n \t\t\t};\n \t\t}", "sourceBeforeFix": "defaults.jackson2Decoder(new Jackson2JsonDecoder(objectMapper,EMPTY_MIME_TYPES))", "sourceAfterFix": "defaults.jackson2JsonDecoder(new Jackson2JsonDecoder(objectMapper,EMPTY_MIME_TYPES))"}
{"fixCommitSHA1": "1fb1de0cd8008d64284da71f49d56c435f7d153b", "projectName": "openmrs.openmrs-core", "bugType": "Change Boolean Literal", "problem": " \t@ModelAttribute(\"providerAttributeTypes\")\r\n \tpublic List<ProviderAttributeType> getProviderAttributeTypes() throws Exception {\r\n\t\treturn Context.getProviderService().getAllProviderAttributeTypes(false);\r\n \t}\r\n \t@RequestMapping(method = RequestMethod.GET)\r", "fixed": " \t@ModelAttribute(\"providerAttributeTypes\")\r\n \tpublic List<ProviderAttributeType> getProviderAttributeTypes() throws Exception {\r\n\t\treturn Context.getProviderService().getAllProviderAttributeTypes(true);\r\n \t}\r\n \t@RequestMapping(method = RequestMethod.GET)\r", "sourceBeforeFix": "Context.getProviderService().getAllProviderAttributeTypes(false)", "sourceAfterFix": "Context.getProviderService().getAllProviderAttributeTypes(true)"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n* @see\n \t */\n\tpublic int compareToReference(TypeComparator<T> referencedComparator);\n \t/**\n \t * Compares two records in serialized from. The return value indicates the order of the two in the same way", "fixed": " \t * \n* @see\n \t */\n\tpublic abstract int compareToReference(TypeComparator<T> referencedComparator);\n \t/**\n \t * Compares two records in serialized from. The return value indicates the order of the two in the same way", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "87b554d0620d5607b8ef0adcd3931c00a61588d0", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t\t}\n \t\tcatch (IllegalArgumentException ex) {\n \t\t\tMetric added = this.registry.getMetrics().get(name);\n\t\t\tregistrar.checkExisting(metric);\n \t\t\treturn (T) added;\n \t\t}\n \t}", "fixed": " \t\t}\n \t\tcatch (IllegalArgumentException ex) {\n \t\t\tMetric added = this.registry.getMetrics().get(name);\n\t\t\tregistrar.checkExisting(added);\n \t\t\treturn (T) added;\n \t\t}\n \t}", "sourceBeforeFix": "registrar.checkExisting(metric)", "sourceAfterFix": "registrar.checkExisting(added)"}
{"fixCommitSHA1": "f8d9a3b19b8a69e20c4469b541a5ae96b07e7cc8", "projectName": "druid-io.druid", "bugType": "Change Binary Operator", "problem": "         @Override\n         public long increment(long timeMillis)\n         {\n          return timeMillis - MILLIS_IN;\n         }\n         @Override", "fixed": "         @Override\n         public long increment(long timeMillis)\n         {\n          return timeMillis + MILLIS_IN;\n         }\n         @Override", "sourceBeforeFix": "timeMillis - MILLIS_IN", "sourceAfterFix": "timeMillis + MILLIS_IN"}
{"fixCommitSHA1": "d725e4c654270636bc7de92cc6d74683b1de29fe", "projectName": "facebook.presto", "bugType": "Wrong Function Name", "problem": "         boolean needPostProjectionCoercion = false;\n         for (FunctionCall aggregate : analysis.getAggregates(node)) {\n             Expression rewritten = subPlan.rewrite(aggregate);\n            Symbol newSymbol = symbolAllocator.newSymbol(rewritten, analysis.getType(aggregate));", "fixed": "         boolean needPostProjectionCoercion = false;\n         for (FunctionCall aggregate : analysis.getAggregates(node)) {\n             Expression rewritten = subPlan.rewrite(aggregate);\n            Symbol newSymbol = symbolAllocator.newSymbol(rewritten, analysis.getTypeWithCoercions(aggregate));", "sourceBeforeFix": "analysis.getType(expression)", "sourceAfterFix": "analysis.getTypeWithCoercions(expression)"}
{"fixCommitSHA1": "34e23fe425e62f240a65c435d41adfbbe211522d", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "     org.apache.hadoop.hbase.client.SnapshotDescription snapshotPOJO = null;\n     if (cpHost != null) {\n      snapshotPOJO = ProtobufUtil.createSnapshotDesc(reqSnapshot);\n       cpHost.preRestoreSnapshot(snapshotPOJO, snapshotTableDesc);\n     }", "fixed": "     org.apache.hadoop.hbase.client.SnapshotDescription snapshotPOJO = null;\n     if (cpHost != null) {\n      snapshotPOJO = ProtobufUtil.createSnapshotDesc(snapshot);\n       cpHost.preRestoreSnapshot(snapshotPOJO, snapshotTableDesc);\n     }", "sourceBeforeFix": "ProtobufUtil.createSnapshotDesc(reqSnapshot)", "sourceAfterFix": "ProtobufUtil.createSnapshotDesc(snapshot)"}
{"fixCommitSHA1": "bfffe6afb376df07702965da9106062f5fa47e22", "projectName": "facebook.presto", "bugType": "Wrong Function Name", "problem": "                 dataSizeSessionProperty(\n                         ORC_STREAM_BUFFER_SIZE,\n                         \"ORC: Size of buffer for streaming reads\",\n                        config.getOrcMaxBufferSize(),\n                         false),\n                 booleanSessionProperty(\n                         PARQUET_OPTIMIZED_READER_ENABLED,", "fixed": "                 dataSizeSessionProperty(\n                         ORC_STREAM_BUFFER_SIZE,\n                         \"ORC: Size of buffer for streaming reads\",\n                        config.getOrcStreamBufferSize(),\n                         false),\n                 booleanSessionProperty(\n                         PARQUET_OPTIMIZED_READER_ENABLED,", "sourceBeforeFix": "config.getOrcMaxBufferSize()", "sourceAfterFix": "config.getOrcStreamBufferSize()"}
{"fixCommitSHA1": "ea13a9c821a275561e56c45d5f0b90479904508d", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "             return record;\n         }\n         if (isEventsEnabled()) {\n            publishEvent(createCacheCompleteEvent(key, CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                   origin, completionId));\n         }\n         return null;", "fixed": "             return record;\n         }\n         if (isEventsEnabled()) {\n            publishEvent(createCacheCompleteEvent(toEventData(key), CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                   origin, completionId));\n         }\n         return null;", "sourceBeforeFix": "toHeapData(key)", "sourceAfterFix": "toEventData(key)"}
{"fixCommitSHA1": "c30e67b81a0d9ac45c4151d20a960e542ad97b4f", "projectName": "dropwizard.dropwizard", "bugType": "Wrong Function Name", "problem": "     @Test\n     public void returnsA404WhenNotFound() throws Exception {\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getRequestURI()).thenReturn(\"/tasks/test\");\n         servlet.service(request, response);", "fixed": "     @Test\n     public void returnsA404WhenNotFound() throws Exception {\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getServletPath()).thenReturn(\"/tasks/test\");\n         servlet.service(request, response);", "sourceBeforeFix": "request.getRequestURI()", "sourceAfterFix": "request.getServletPath()"}
{"fixCommitSHA1": "48e0acb98213234b32dd4c21eb5a7d4d94e25ca2", "projectName": "brettwooldridge.HikariCP", "bugType": "Change Identifier Used", "problem": "    {\n       if (connectionTimeout != Integer.MAX_VALUE) {\n          try {\n            dataSource.setLoginTimeout((int) TimeUnit.MILLISECONDS.toSeconds(Math.min(1000L, connectionTimeout)));\n          }\n          catch (SQLException e) {\n             logger.warn(\"Unable to set DataSource login timeout\", e);", "fixed": "    {\n       if (connectionTimeout != Integer.MAX_VALUE) {\n          try {\n            dataSource.setLoginTimeout((int) TimeUnit.MILLISECONDS.toSeconds(Math.max(1000L, connectionTimeout)));\n          }\n          catch (SQLException e) {\n             logger.warn(\"Unable to set DataSource login timeout\", e);", "sourceBeforeFix": "Math.min(1000L,connectionTimeout)", "sourceAfterFix": "Math.max(1000L,connectionTimeout)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<Status> getFriendsTimeline() throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\", true));\n     }\n     /**", "fixed": "      */\n     public ResponseList<Status> getFriendsTimeline() throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\", true));\n     }\n     /**", "sourceBeforeFix": "SavedSearch.constructSavedSearches(get(getBaseURL() + \"saved_searches.json\",true))", "sourceAfterFix": "SavedSearch.createSavedSearchList(get(getBaseURL() + \"saved_searches.json\",true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  private final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform1fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform1(location, v);\r\n \t}\r\n \tpublic void glUniform1fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform1(location, toFloatBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform1i (int location, int x) {\r", "fixed": " \t}\r\n \tpublic void glUniform1fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform1fv(location, v);\r\n \t}\r\n \tpublic void glUniform1fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform1fv(location, toFloatBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform1i (int location, int x) {\r", "sourceBeforeFix": "GL20.glUniform1(location,v)", "sourceAfterFix": "GL20.glUniform1iv(location,v)"}
{"fixCommitSHA1": "f9374238b2870cad6c090589ec18933983e1c902", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "      * whether the supression turns checkstyle reporting on or off.\n      * @author Rick Giles\n      */\n    public class Tag\n         implements Comparable<Tag>\n     {\n         ", "fixed": "      * whether the supression turns checkstyle reporting on or off.\n      * @author Rick Giles\n      */\n    public static class Tag\n         implements Comparable<Tag>\n     {\n         ", "sourceBeforeFix": "1", "sourceAfterFix": "9"}
{"fixCommitSHA1": "58e2311116b2b7eab93c2f26a2ddc823d56e5375", "projectName": "openmrs.openmrs-core", "bugType": "More Specific If", "problem": " \t\t\t\tString other = null;\r\n\t\t\t\tif (args.length > 1)\r\n \t\t\t\t\tother = (String) args[1];\r\n \t\t\t\trecursivelyHandle(SaveHandler.class, (OpenmrsObject) mainArgument, other);\r", "fixed": " \t\t\t\tString other = null;\r\n\t\t\t\tif (args.length > 1 && args[1] instanceof String)\r\n \t\t\t\t\tother = (String) args[1];\r\n \t\t\t\trecursivelyHandle(SaveHandler.class, (OpenmrsObject) mainArgument, other);\r", "sourceBeforeFix": "args.length > 1", "sourceAfterFix": "args.length > 1 && args[1] instanceof String"}
{"fixCommitSHA1": "43b2fa49ca351c05c453c8cd0eec32ce6277c830", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " public class Label extends Widget {\r\n \tprivate LabelStyle style;\r\n \tprivate final TextBounds bounds = new TextBounds();\r\n\tprivate String text;\r\n \tprivate BitmapFontCache cache;\r\n \tprivate float prefWidth, prefHeight;\r\n \tprivate int labelAlign = Align.LEFT;\r", "fixed": " public class Label extends Widget {\r\n \tprivate LabelStyle style;\r\n \tprivate final TextBounds bounds = new TextBounds();\r\n\tprivate CharSequence text;\r\n \tprivate BitmapFontCache cache;\r\n \tprivate float prefWidth, prefHeight;\r\n \tprivate int labelAlign = Align.LEFT;\r", "sourceBeforeFix": "public String getText(){   return text; } ", "sourceAfterFix": "public CharSequence getText(){   return text; } "}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15856, value = \"Invalid url stream.\")\n     String invalidUrlStream();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10856, value = \"Invalid url stream.\")\n     String invalidUrlStream();\n     /**", "sourceBeforeFix": "id=15840", "sourceAfterFix": "id=10840"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<Status> getHomeTimeline() throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/home_timeline.json\", true));\n     }", "fixed": "      */\n     public ResponseList<Status> getHomeTimeline() throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/home_timeline.json\", true));\n     }", "sourceBeforeFix": "SavedSearch.constructSavedSearches(get(getBaseURL() + \"saved_searches.json\",true))", "sourceAfterFix": "SavedSearch.createSavedSearchList(get(getBaseURL() + \"saved_searches.json\",true))"}
{"fixCommitSHA1": "ab9be0fd8eafec78ecec4f228ff1101658ea6d49", "projectName": "openhab.openhab", "bugType": "Change Numeric Literal", "problem": "put(43239, new VariableInformation(1,\t\"Total hot water operation time add\",\tNibeDataType.S32,\tType.Sensor));\nput(43395, new VariableInformation(1,\t\"HPAC relays\",\t\t\t\t\t\t\tNibeDataType.U8,\tType.Sensor));\nput(43416, new VariableInformation(1,\t\"Compressor starts EB100-EP14\",\t\t\tNibeDataType.S32,\tType.Sensor));\nput(43420, new VariableInformation(10,\t\"Total operation time compressor\",\t\tNibeDataType.S32,\tType.Sensor));\nput(43424, new VariableInformation(1,\t\"Total hot water operation time compr\",\tNibeDataType.S32,\tType.Sensor));\nput(43427, new VariableInformation(1,\t\"Compressor state EP14\",\t\t\t\tNibeDataType.U8,\tType.Sensor));\nput(43514, new VariableInformation(1,\t\"PCA-Base relayes EP14\",\t\t\t\tNibeDataType.U8,\tType.Sensor));", "fixed": "put(43239, new VariableInformation(1,\t\"Total hot water operation time add\",\tNibeDataType.S32,\tType.Sensor));\nput(43395, new VariableInformation(1,\t\"HPAC relays\",\t\t\t\t\t\t\tNibeDataType.U8,\tType.Sensor));\nput(43416, new VariableInformation(1,\t\"Compressor starts EB100-EP14\",\t\t\tNibeDataType.S32,\tType.Sensor));\nput(43420, new VariableInformation(1,\t\"Total operation time compressor\",\t\tNibeDataType.S32,\tType.Sensor));\nput(43424, new VariableInformation(1,\t\"Total hot water operation time compr\",\tNibeDataType.S32,\tType.Sensor));\nput(43427, new VariableInformation(1,\t\"Compressor state EP14\",\t\t\t\tNibeDataType.U8,\tType.Sensor));\nput(43514, new VariableInformation(1,\t\"PCA-Base relayes EP14\",\t\t\t\tNibeDataType.U8,\tType.Sensor));", "sourceBeforeFix": "new VariableInformation(10,\"Total operation time compressor\",NibeDataType.S32,Type.Sensor)", "sourceAfterFix": "new VariableInformation(1,\"Total operation time compressor\",NibeDataType.S32,Type.Sensor)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<Status> getUserTimeline(String id, Paging paging)\n             throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline/\" + id + \".json\",\n                 null, paging.asPostParameterList(), http.isAuthenticationEnabled()));\n     }", "fixed": "      */\n     public ResponseList<Status> getUserTimeline(String id, Paging paging)\n             throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline/\" + id + \".json\",\n                 null, paging.asPostParameterList(), http.isAuthenticationEnabled()));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))"}
{"fixCommitSHA1": "3757a700a89638e5747d966bdaa8266b62c974c8", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "   }\n   @GwtIncompatible(\"Reader/Writer\")\n  private void testStreamingEncodingWithCasing(\n       BaseEncoding encoding, String decoded, String encoded) throws IOException {\n     testStreamingEncodingWithSeparators(encoding, decoded, encoded);\n     testStreamingEncodingWithSeparators(encoding.upperCase(), decoded, Ascii.toUpperCase(encoded));", "fixed": "   }\n   @GwtIncompatible(\"Reader/Writer\")\n  private static void testStreamingEncodingWithCasing(\n       BaseEncoding encoding, String decoded, String encoded) throws IOException {\n     testStreamingEncodingWithSeparators(encoding, decoded, encoded);\n     testStreamingEncodingWithSeparators(encoding.upperCase(), decoded, Ascii.toUpperCase(encoded));", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  private final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8ce6064f094303387317b2f834d782b53a264251", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "      * @param name  the suggested name for the background thread\n      * @return the thread pool\n      */\n    protected ExecutorService createAggregateExecutorService(String name) {\n         return camelContext.getExecutorServiceStrategy().newThreadPool(this, name, 1, Integer.MAX_VALUE);\n     }", "fixed": "      * @param name  the suggested name for the background thread\n      * @return the thread pool\n      */\n    protected synchronized ExecutorService createAggregateExecutorService(String name) {\n         return camelContext.getExecutorServiceStrategy().newThreadPool(this, name, 1, Integer.MAX_VALUE);\n     }", "sourceBeforeFix": "4", "sourceAfterFix": "36"}
{"fixCommitSHA1": "2ea6ea3e6dd568fe52a9410913e801714da07c13", "projectName": "gephi.gephi", "bugType": "Wrong Function Name", "problem": "             }\n             Object[] valuesArray = vals.toArray();\n             min = AttributeUtils.getDefault().getMin(column, valuesArray);\n            max = AttributeUtils.getDefault().getMin(column, valuesArray);\n         }\n         public String getName() {", "fixed": "             }\n             Object[] valuesArray = vals.toArray();\n             min = AttributeUtils.getDefault().getMin(column, valuesArray);\n            max = AttributeUtils.getDefault().getMax(column, valuesArray);\n         }\n         public String getName() {", "sourceBeforeFix": "AttributeUtils.getDefault().getMin(column,valuesArray)", "sourceAfterFix": "AttributeUtils.getDefault().getMax(column,valuesArray)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "2", "sourceAfterFix": "0"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "b1a156d3f2c86c78f64da0def78727b0952018da", "projectName": "netty.netty", "bugType": "Change Modifier", "problem": "  * A {@link TimeoutException} raised by {@link WriteTimeoutHandler} when no data\n  * was written within a certain period of time.\n  */\npublic class WriteTimeoutException extends TimeoutException {\n     private static final long serialVersionUID = -144786655770296065L;", "fixed": "  * A {@link TimeoutException} raised by {@link WriteTimeoutHandler} when no data\n  * was written within a certain period of time.\n  */\npublic final class WriteTimeoutException extends TimeoutException {\n     private static final long serialVersionUID = -144786655770296065L;", "sourceBeforeFix": "1", "sourceAfterFix": "17"}
{"fixCommitSHA1": "d2b19965df52e66385a2d7146887a44cea50330a", "projectName": "google.closure-compiler", "bugType": "Wrong Function Name", "problem": "   }\n   public void normalize() {\n    logger.info(\"Normalizing\");\n     startPass(\"normalize\");\n     process(new Normalize(this, false));\n     endPass();", "fixed": "   }\n   public void normalize() {\n    logger.fine(\"Normalizing\");\n     startPass(\"normalize\");\n     process(new Normalize(this, false));\n     endPass();", "sourceBeforeFix": "logger.info(\"Strip code\")", "sourceAfterFix": "logger.fine(\"Strip code\")"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getUserTimeline(String id) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline/\" + id + \".json\", http.isAuthenticationEnabled()));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getUserTimeline(String id) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline/\" + id + \".json\", http.isAuthenticationEnabled()));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweets_of_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweets_of_me.json\",null,true))"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n \t * @return True, if the data type supports the creation of a normalized key for comparison, false otherwise.\n \t */\n\tpublic boolean supportsNormalizedKey();\n \t/**\n \t * Check whether this comparator supports to serialize the record in a format that replaces its keys by a normalized", "fixed": " \t * \n \t * @return True, if the data type supports the creation of a normalized key for comparison, false otherwise.\n \t */\n\tpublic abstract boolean supportsNormalizedKey();\n \t/**\n \t * Check whether this comparator supports to serialize the record in a format that replaces its keys by a normalized", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedStompEndpointBuilder\n             extends\n                 AdvancedStompEndpointConsumerBuilder, AdvancedStompEndpointProducerBuilder {\n         default StompEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedStompEndpointBuilder\n             extends\n                 AdvancedStompEndpointConsumerBuilder, AdvancedStompEndpointProducerBuilder {\n         default StompEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "4fa38aeba48a4f6641e48b3f73e1bc0c55c18156", "projectName": "spring-projects.spring-boot", "bugType": "Wrong Function Name", "problem": " \t\t\tif (!super.supports(type)) {\n \t\t\t\treturn false;\n \t\t\t}\n\t\t\tif (AnnotatedElementUtils.isAnnotated(type, Validated.class)) {\n \t\t\t\treturn true;\n \t\t\t}\n \t\t\tif (type.getPackage().getName().startsWith(\"org.springframework.boot\")) {", "fixed": " \t\t\tif (!super.supports(type)) {\n \t\t\t\treturn false;\n \t\t\t}\n\t\t\tif (AnnotatedElementUtils.hasAnnotation(type, Validated.class)) {\n \t\t\t\treturn true;\n \t\t\t}\n \t\t\tif (type.getPackage().getName().startsWith(\"org.springframework.boot\")) {", "sourceBeforeFix": "AnnotatedElementUtils.isAnnotated(type,Validated.class)", "sourceAfterFix": "AnnotatedElementUtils.hasAnnotation(type,Validated.class)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getFavorites(String id, int page) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"favorites/\" + id + \".json\", \"page\", String.valueOf(page), true));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getFavorites(String id, int page) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"favorites/\" + id + \".json\", \"page\", String.valueOf(page), true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline.json\",true))"}
{"fixCommitSHA1": "3065978a391204e4dacea84430ad1d5fa410534c", "projectName": "stanfordnlp.CoreNLP", "bugType": "Change Binary Operator", "problem": "     Map<String, String> labelMap = readLabelMap(labelsFile, separator, remapLabels);\n     List<String> sentences;\n    if (sentencesFile == null) {\n       sentences = readSentences(sentencesFile);\n     } else {\n       sentences = new ArrayList<String>(labelMap.keySet());", "fixed": "     Map<String, String> labelMap = readLabelMap(labelsFile, separator, remapLabels);\n     List<String> sentences;\n    if (sentencesFile != null) {\n       sentences = readSentences(sentencesFile);\n     } else {\n       sentences = new ArrayList<String>(labelMap.keySet());", "sourceBeforeFix": "sentencesFile == null", "sourceAfterFix": "sentencesFile != null"}
{"fixCommitSHA1": "bf50ea13662770de9f2a6546fa2cd40e83ba1aee", "projectName": "swagger-api.swagger-codegen", "bugType": "Wrong Function Name", "problem": "         config.processOpts();\n         config.preprocessSwagger(swagger);\n         config.additionalProperties().put(\"generatedDate\", DateTime.now().toString());\n        config.additionalProperties().put(\"generatorClass\", config.getClass().toString());\n         config.additionalProperties().put(\"inputSpec\", config.getInputSpec());\n         if (swagger.getVendorExtensions() != null) {\n             config.vendorExtensions().putAll(swagger.getVendorExtensions());", "fixed": "         config.processOpts();\n         config.preprocessSwagger(swagger);\n         config.additionalProperties().put(\"generatedDate\", DateTime.now().toString());\n        config.additionalProperties().put(\"generatorClass\", config.getClass().getName());\n         config.additionalProperties().put(\"inputSpec\", config.getInputSpec());\n         if (swagger.getVendorExtensions() != null) {\n             config.vendorExtensions().putAll(swagger.getVendorExtensions());", "sourceBeforeFix": "config.getClass().toString()", "sourceAfterFix": "config.getClass().getName()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  private final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform1iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform1(location, v);\r\n \t}\r\n \t@Override\r\n \tpublic void glUniform1iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform1(location, toIntBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform2f (int location, float x, float y) {\r", "fixed": " \t}\r\n \tpublic void glUniform1iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform1iv(location, v);\r\n \t}\r\n \t@Override\r\n \tpublic void glUniform1iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform1iv(location, toIntBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform2f (int location, float x, float y) {\r", "sourceBeforeFix": "GL20.glUniform1(location,toIntBuffer(v,offset,count))", "sourceAfterFix": "GL20.glUniform1iv(location,toIntBuffer(v,offset,count))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * @return True, if all normalized key comparisons should invert the sign of the comparison result,\n \t *         false if the normalized key should be used as is.\n \t */\n\tpublic boolean invertNormalizedKey();", "fixed": " \t * @return True, if all normalized key comparisons should invert the sign of the comparison result,\n \t *         false if the normalized key should be used as is.\n \t */\n\tpublic abstract boolean invertNormalizedKey();", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "01fec049c0fb6b1c326d802687f3093b502123e0", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": " \t\t\t\t}\r\n \t\t\t}\r\n \t\t}\r\n\t\tcatch (Throwable e) {\r\n \t\t\tSystem.err.println(\"Listener.contextDestroyed: Failed to cleanup drivers in webapp\");\r\n \t\t\te.printStackTrace();\r\n \t\t}\r", "fixed": " \t\t\t\t}\r\n \t\t\t}\r\n \t\t}\r\n\t\tcatch (Exception e) {\r\n \t\t\tSystem.err.println(\"Listener.contextDestroyed: Failed to cleanup drivers in webapp\");\r\n \t\t\te.printStackTrace();\r\n \t\t}\r", "sourceBeforeFix": "Throwable t", "sourceAfterFix": "Exception t"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "df63f141ab829146a5586f2b8da43eb8119b536b", "projectName": "apache.camel", "bugType": "More Specific If", "problem": "             LOG.debug(\"Uploading a dir...\");\n            if (entry != null) {\n                 throw new DropboxException(dropboxPath + \" exists on dropbox and is not a folder!\");\n             }\n             if (!dropboxPath.endsWith(DropboxConstants.DROPBOX_FILE_SEPARATOR)) {", "fixed": "             LOG.debug(\"Uploading a dir...\");\n            if (entry != null && !DropboxUploadMode.force.equals(mode)) {\n                 throw new DropboxException(dropboxPath + \" exists on dropbox and is not a folder!\");\n             }\n             if (!dropboxPath.endsWith(DropboxConstants.DROPBOX_FILE_SEPARATOR)) {", "sourceBeforeFix": "entry != null", "sourceAfterFix": "entry != null && !DropboxUploadMode.force.equals(mode)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "4e92c5bf64ea83a33f1a3898cf2335c983f4858e", "projectName": "gephi.gephi", "bugType": "More Specific If", "problem": "             public void disable() {\n                 GraphModel graphModel = Lookup.getDefault().lookup(GraphController.class).getModel();\n                if (model.getCurrentResult() != null) {\n                     graphModel.destroyView(model.getCurrentResult());\n                     model.setCurrentResult(null);\n                 }", "fixed": "             public void disable() {\n                 GraphModel graphModel = Lookup.getDefault().lookup(GraphController.class).getModel();\n                if (model.getCurrentResult() != null && graphModel != null) {\n                     graphModel.destroyView(model.getCurrentResult());\n                     model.setCurrentResult(null);\n                 }", "sourceBeforeFix": "model.getCurrentResult() != null", "sourceAfterFix": "model.getCurrentResult() != null && graphModel != null"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "98fbf9e8e06e0dbc35e1d079029dfa32f05b5848", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "       String[] parts = payload.split(\"\\u0000\", 3);\n       if (parts.length != 3) {\n        throw new IllegalArgumentException(\"Received corrupt response\");\n       }\n       String authzid = parts[0];\n       mAuthcid = parts[1];", "fixed": "       String[] parts = payload.split(\"\\u0000\", 3);\n       if (parts.length != 3) {\n        throw new IllegalArgumentException(\"Invalid message format, parts must contain 3 items\");\n       }\n       String authzid = parts[0];\n       mAuthcid = parts[1];", "sourceBeforeFix": "new IllegalStateException(\"PLAIN supports neither integrity nor privacy\")", "sourceAfterFix": "new UnsupportedOperationException(\"PLAIN doesn't support wrap or unwrap operation\")"}
{"fixCommitSHA1": "59970361c11b8177edbf56786e896ce4da82c6ba", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t\t}\n \t\tif (CopyableValue.class.isAssignableFrom(type)) {\n\t\t\treturn (TypeComparator<T>) new ValueComparator(sortOrderAscending, type);\n \t\t}\n \t\telse {\n\t\t\treturn (TypeComparator<T>) new CopyableValueComparator(sortOrderAscending, type);\n \t\t}\n \t}", "fixed": " \t\t}\n \t\tif (CopyableValue.class.isAssignableFrom(type)) {\n\t\t\treturn (TypeComparator<T>) new CopyableValueComparator(sortOrderAscending, type);\n \t\t}\n \t\telse {\n\t\t\treturn (TypeComparator<T>) new ValueComparator(sortOrderAscending, type);\n \t\t}\n \t}", "sourceBeforeFix": "new ValueComparator(sortOrderAscending,type)", "sourceAfterFix": "new CopyableValueComparator(sortOrderAscending,type)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface IgniteMessagingEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedIgniteMessagingEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface IgniteMessagingEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedIgniteMessagingEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "0187e5106dfc5034b8b1650083eab37181ff0de3", "projectName": "spring-projects.spring-boot", "bugType": "Change Modifier", "problem": " \t}\n \t@Test\n\tvoid userConfigurationBeans() {\n \t\tthis.contextRunner\n \t\t\t\t.withUserConfiguration(LiquibaseUserConfiguration.class, EmbeddedDataSourceConfiguration.class)\n \t\t\t\t.run((context) -> {", "fixed": " \t}\n \t@Test\n\tpublic void userConfigurationBeans() {\n \t\tthis.contextRunner\n \t\t\t\t.withUserConfiguration(LiquibaseUserConfiguration.class, EmbeddedDataSourceConfiguration.class)\n \t\t\t\t.run((context) -> {", "sourceBeforeFix": "0", "sourceAfterFix": "1"}
{"fixCommitSHA1": "639ca0c8d5f1e74a3dad3bb0014602bdd57dc602", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         newConfig.setEvictionPolicy(mapConfig.getEvictionPolicy());\n         newConfig.setEvictionPercentage(mapConfig.getEvictionPercentage());\n         newConfig.setReadBackupData(mapConfig.isReadBackupData());\n        newConfig.setBackupCount(mapConfig.getTotalBackupCount());\n         newConfig.setAsyncBackupCount(mapConfig.getAsyncBackupCount());\n         newConfig.setMaxSizeConfig(mapConfig.getMaxSizeConfig());\n         service.getMapContainer(mapName).setMapConfig(newConfig.getAsReadOnly());", "fixed": "         newConfig.setEvictionPolicy(mapConfig.getEvictionPolicy());\n         newConfig.setEvictionPercentage(mapConfig.getEvictionPercentage());\n         newConfig.setReadBackupData(mapConfig.isReadBackupData());\n        newConfig.setBackupCount(mapConfig.getBackupCount());\n         newConfig.setAsyncBackupCount(mapConfig.getAsyncBackupCount());\n         newConfig.setMaxSizeConfig(mapConfig.getMaxSizeConfig());\n         service.getMapContainer(mapName).setMapConfig(newConfig.getAsReadOnly());", "sourceBeforeFix": "mapConfig.getTotalBackupCount()", "sourceAfterFix": "mapConfig.getBackupCount()"}
{"fixCommitSHA1": "5ef9fe421732a256519e0dbac06f73f728f12564", "projectName": "Alluxio.alluxio", "bugType": "Missing Throws Exception", "problem": "     return getFile(path, false);\n   }\n  public synchronized TachyonFile getFile(String path, boolean useCachedMetadata) {\n     path = CommonUtils.cleanPath(path);\n     ClientFileInfo clientFileInfo = getClientFileInfo(path, useCachedMetadata);\n     if (clientFileInfo == null) {", "fixed": "     return getFile(path, false);\n   }\n  public synchronized TachyonFile getFile(String path, boolean useCachedMetadata) \n      throws IOException {\n     path = CommonUtils.cleanPath(path);\n     ClientFileInfo clientFileInfo = getClientFileInfo(path, useCachedMetadata);\n     if (clientFileInfo == null) {", "sourceBeforeFix": "34", "sourceAfterFix": "34"}
{"fixCommitSHA1": "d0a169978942736556fd0af1b8e4306c0291e107", "projectName": "apache.storm", "bugType": "Change Unary Operator\t", "problem": "      * @return nullToZero\n      */\n     private static Long nullToZero(Long value) {\n        return Objects.isNull(value) ? value : 0;\n     }\n     /**", "fixed": "      * @return nullToZero\n      */\n     private static Long nullToZero(Long value) {\n        return !Objects.isNull(value) ? value : 0;\n     }\n     /**", "sourceBeforeFix": "Objects.isNull(value)", "sourceAfterFix": "!Objects.isNull(value)"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should return null if no implementation id is defined yet\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)\n\tpublic ImplementationId getImplementationId() throws APIException;\n \t/**\n \t * Set the given <code>implementationId</code> as this implementation's unique id", "fixed": " \t * @should return null if no implementation id is defined yet\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)\n\tpublic ImplementationId getImplementationId();\n \t/**\n \t * Set the given <code>implementationId</code> as this implementation's unique id", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "b5f11bdc58c807ea7a8a3ff5f68e2d4af0f6da2d", "projectName": "apache.camel", "bugType": "Change Binary Operator", "problem": "     }\n     private static String dateAsString(long value) {\n        if (value == 0) {\n             return \"\";\n         }\n         return new SimpleDateFormat(TIMESTAMP_FORMAT).format(value);", "fixed": "     }\n     private static String dateAsString(long value) {\n        if (value <= 0) {\n             return \"\";\n         }\n         return new SimpleDateFormat(TIMESTAMP_FORMAT).format(value);", "sourceBeforeFix": "value == 0", "sourceAfterFix": "value <= 0"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15861, value = \"Cannot remove deployment %s from the domain as it is still used by server groups %s\")\n     String cannotRemoveDeploymentInUse(String name, List<String> groups);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10861, value = \"Cannot remove deployment %s from the domain as it is still used by server groups %s\")\n     String cannotRemoveDeploymentInUse(String name, List<String> groups);\n     /**", "sourceBeforeFix": "id=15860", "sourceAfterFix": "id=10860"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "fixed": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2fv(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2fv(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "sourceBeforeFix": "GL20.glUniform4(location,v)", "sourceAfterFix": "GL20.glUniform4fv(location,v)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15833, value = \"%s is missing %s: %s\")\n     String requiredChildIsMissing(String parent, String child, String parentSpec);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10833, value = \"%s is missing %s: %s\")\n     String requiredChildIsMissing(String parent, String child, String parentSpec);\n     /**", "sourceBeforeFix": "id=15855", "sourceAfterFix": "id=10855"}
{"fixCommitSHA1": "2798f6edf82b64780fd846aaa5b860185c87f915", "projectName": "libgdx.libgdx", "bugType": "Change Numeric Literal", "problem": " \t}\r\n \tprivate void getTiles (int startX, int startY, int endX, int endY, Array<Rectangle> tiles) {\r\n\t\tTiledMapTileLayer layer = (TiledMapTileLayer)map.getLayers().get(1);\r\n \t\trectPool.freeAll(tiles);\r\n \t\ttiles.clear();\r\n \t\tfor (int y = startY; y <= endY; y++) {\r", "fixed": " \t}\r\n \tprivate void getTiles (int startX, int startY, int endX, int endY, Array<Rectangle> tiles) {\r\n\t\tTiledMapTileLayer layer = (TiledMapTileLayer)map.getLayers().get(\"walls\");\r\n \t\trectPool.freeAll(tiles);\r\n \t\ttiles.clear();\r\n \t\tfor (int y = startY; y <= endY; y++) {\r", "sourceBeforeFix": "isTouched(0.75f,1)", "sourceAfterFix": "isTouched(0.5f,1)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "98a8875db1735c4a60bf1989fd727217a739baf0", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "template.sendBodyAndHeader(\"file:\n         MockEndpoint mock = getMockEndpoint(\"mock:result2\");\n        mock.expectedBodiesReceived(\"Hello World 2\");\n         assertMockEndpointsSatisfied();\n         oneExchangeDone.matchesMockWaitTime();", "fixed": "template.sendBodyAndHeader(\"file:\n         MockEndpoint mock = getMockEndpoint(\"mock:result2\");\n        mock.expectedBodiesReceivedInAnyOrder(\"Hello World 2\");\n         assertMockEndpointsSatisfied();\n         oneExchangeDone.matchesMockWaitTime();", "sourceBeforeFix": "mock.expectedBodiesReceived(\"Hello World 2\")", "sourceAfterFix": "mock.expectedBodiesReceivedInAnyOrder(\"Hello World 2\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "f790d5907229357f8e0aca7681de6b5ca2dd2090", "projectName": "javaee-samples.javaee7-samples", "bugType": "Change Numeric Literal", "problem": " @WebServlet(urlPatterns = {\"/TestJAXRS2Client\"})\n public class TestJAXRS2Client extends HttpServlet {\n    private static final long serialVersionUID = 1L;\n     /**\n      * Processes requests for both HTTP", "fixed": " @WebServlet(urlPatterns = {\"/TestJAXRS2Client\"})\n public class TestJAXRS2Client extends HttpServlet {\n    private static final long serialVersionUID = 1975269372645791816L;\n     /**\n      * Processes requests for both HTTP", "sourceBeforeFix": "serialVersionUID=1L", "sourceAfterFix": "serialVersionUID=1975269372645791816L"}
{"fixCommitSHA1": "a161d8d1924d1fb49a4d229370d998be1493957c", "projectName": "Graylog2.graylog2-server", "bugType": "Change Identifier Used", "problem": "     protected void flushDirtyLogs() {\n         log.debug(\"Checking for dirty logs to flush...\");\n        final Set<Map.Entry<TopicAndPartition, Log>> entries = JavaConversions.asMap(logManager.logsByTopicPartition()).entrySet();\n         for (final Map.Entry<TopicAndPartition, Log> topicAndPartitionLogEntry : entries) {\n             final TopicAndPartition topicAndPartition = topicAndPartitionLogEntry.getKey();\n             final Log kafkaLog = topicAndPartitionLogEntry.getValue();", "fixed": "     protected void flushDirtyLogs() {\n         log.debug(\"Checking for dirty logs to flush...\");\n        final Set<Map.Entry<TopicAndPartition, Log>> entries = JavaConversions.mapAsJavaMap(logManager.logsByTopicPartition()).entrySet();\n         for (final Map.Entry<TopicAndPartition, Log> topicAndPartitionLogEntry : entries) {\n             final TopicAndPartition topicAndPartition = topicAndPartitionLogEntry.getKey();\n             final Log kafkaLog = topicAndPartitionLogEntry.getValue();", "sourceBeforeFix": "JavaConversions.asMap(logManager.logsByTopicPartition())", "sourceAfterFix": "JavaConversions.mapAsJavaMap(logManager.logsByTopicPartition())"}
{"fixCommitSHA1": "83b9dd427535bce39be43a9e8224cdbc352d7427", "projectName": "square.okhttp", "bugType": "Change Modifier", "problem": "       }\n     };\n    public UnexpectedException(Throwable cause) {\n       super(cause);\n     }\n   }", "fixed": "       }\n     };\n    UnexpectedException(Throwable cause) {\n       super(cause);\n     }\n   }", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "1a89a3fedeff90da5fa2e62fa49b26bfd8ec7f24", "projectName": "apache.hbase", "bugType": "Wrong Function Name", "problem": "       return HConstants.NORMAL_QOS;\n     }\nif (methodName.equals(\"scan\")) {\n       ScanRequest request = (ScanRequest)param;\n       if (!request.hasScannerId()) {\n         return HConstants.NORMAL_QOS;", "fixed": "       return HConstants.NORMAL_QOS;\n     }\nif (methodName.equalsIgnoreCase(\"scan\")) {\n       ScanRequest request = (ScanRequest)param;\n       if (!request.hasScannerId()) {\n         return HConstants.NORMAL_QOS;", "sourceBeforeFix": "methodName.equals(\"scan\")", "sourceAfterFix": "methodName.equalsIgnoreCase(\"scan\")"}
{"fixCommitSHA1": "2921e7bf0d74a65fdcc71d3ce3053037d14e4d44", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "     private void handleAtomicNumberSet(String[] args) {\n         long v = 0;\n         if (args.length > 1) {\n            v = Long.valueOf(args[1]);\n         }\n         getAtomicNumber().set(v);\n         println(getAtomicNumber().get());", "fixed": "     private void handleAtomicNumberSet(String[] args) {\n         long v = 0;\n         if (args.length > 1) {\n            v = Long.parseLong(args[1]);\n         }\n         getAtomicNumber().set(v);\n         println(getAtomicNumber().get());", "sourceBeforeFix": "Long.valueOf(args[1])", "sourceAfterFix": "Long.parseLong(args[1])"}
{"fixCommitSHA1": "75655f1848bd22e798f10de84bb6caffa9d6bf2c", "projectName": "hazelcast.hazelcast", "bugType": "Change Binary Operator", "problem": "     private void validateTx(Xid xid,Transaction.State state) throws XAException {\n         final Transaction tx = getTransaction(xid);\n        if(tx == null) {\n             switch (state){\n                 case ACTIVE:\n                     if(tx.getState() != Transaction.State.ACTIVE){", "fixed": "     private void validateTx(Xid xid,Transaction.State state) throws XAException {\n         final Transaction tx = getTransaction(xid);\n        if(tx != null) {\n             switch (state){\n                 case ACTIVE:\n                     if(tx.getState() != Transaction.State.ACTIVE){", "sourceBeforeFix": "tx == null", "sourceAfterFix": "tx != null"}
{"fixCommitSHA1": "f4c635d30b23be6ce51866704c178232e98015e7", "projectName": "netty.netty", "bugType": "Change Modifier", "problem": " import static io.netty.util.internal.ObjectUtil.checkPositive;\n import static io.netty.util.internal.ThrowableUtil.unknownStackTrace;\nfinal class HpackDecoder {\n     private static final Http2Exception DECODE_ULE_128_DECOMPRESSION_EXCEPTION = unknownStackTrace(\n             connectionError(COMPRESSION_ERROR, \"HPACK - decompression failure\"), HpackDecoder.class,\n             \"decodeULE128(..)\");", "fixed": " import static io.netty.util.internal.ObjectUtil.checkPositive;\n import static io.netty.util.internal.ThrowableUtil.unknownStackTrace;\npublic final class HpackDecoder {\n     private static final Http2Exception DECODE_ULE_128_DECOMPRESSION_EXCEPTION = unknownStackTrace(\n             connectionError(COMPRESSION_ERROR, \"HPACK - decompression failure\"), HpackDecoder.class,\n             \"decodeULE128(..)\");", "sourceBeforeFix": "16", "sourceAfterFix": "17"}
{"fixCommitSHA1": "d270a8582b50321bc4b8a5921ff2439022a403d2", "projectName": "checkstyle.checkstyle", "bugType": "Less Specific If", "problem": "              token = token.getParent())\n         {\n             final int type = token.getType();\n            if (type == TokenTypes.CLASS_DEF) {\nbreak;\n             }\n             else if (type == TokenTypes.LITERAL_NEW) {\nbreak;", "fixed": "              token = token.getParent())\n         {\n             final int type = token.getType();\n            if (type == TokenTypes.CLASS_DEF\n                || type == TokenTypes.ENUM_DEF\n                || type == TokenTypes.ANNOTATION_DEF)\n            {\nbreak;\n             }\n             else if (type == TokenTypes.LITERAL_NEW) {\nbreak;", "sourceBeforeFix": "type == TokenTypes.CLASS_DEF", "sourceAfterFix": "type == TokenTypes.CLASS_DEF || type == TokenTypes.ENUM_DEF || type == TokenTypes.ANNOTATION_DEF"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform3fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform3(location, v);\r\n \t}\r\n \tpublic void glUniform3fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform3(location, toFloatBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform3i (int location, int x, int y, int z) {\r", "fixed": " \t}\r\n \tpublic void glUniform3fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform3fv(location, v);\r\n \t}\r\n \tpublic void glUniform3fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform3fv(location, toFloatBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform3i (int location, int x, int y, int z) {\r", "sourceBeforeFix": "EXTFramebufferObject.glGetFramebufferAttachmentParameterEXT(target,attachment,pname,params)", "sourceAfterFix": "EXTFramebufferObject.glGetFramebufferAttachmentParameterivEXT(target,attachment,pname,params)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15860, value = \"No deployment with name %s found\")\n     String noDeploymentContentWithName(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10860, value = \"No deployment with name %s found\")\n     String noDeploymentContentWithName(String name);\n     /**", "sourceBeforeFix": "id=15853", "sourceAfterFix": "id=10853"}
{"fixCommitSHA1": "28a04af5f4b957b75ba7dbf6486999b75547673c", "projectName": "libgdx.libgdx", "bugType": "Change Numeric Literal", "problem": " \t\t\t\tif (koala.velocity.y > 0) {\r\n \t\t\t\t\tkoala.position.y = tile.y - Koala.HEIGHT;\r\n\t\t\t\t\tTiledMapTileLayer layer = (TiledMapTileLayer)map.getLayers().get(1);\r\n \t\t\t\t\tlayer.setCell((int)tile.x, (int)tile.y, null);\r\n \t\t\t\t} else {\r\n \t\t\t\t\tkoala.position.y = tile.y + tile.height;\r", "fixed": " \t\t\t\tif (koala.velocity.y > 0) {\r\n \t\t\t\t\tkoala.position.y = tile.y - Koala.HEIGHT;\r\n\t\t\t\t\tTiledMapTileLayer layer = (TiledMapTileLayer)map.getLayers().get(\"walls\");\r\n \t\t\t\t\tlayer.setCell((int)tile.x, (int)tile.y, null);\r\n \t\t\t\t} else {\r\n \t\t\t\t\tkoala.position.y = tile.y + tile.height;\r", "sourceBeforeFix": "isTouched(0.75f,1)", "sourceAfterFix": "isTouched(0.5f,1)"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should exclude not allowed locales\n \t * @should cache results for a user\n \t */\n\tpublic List<Locale> getSearchLocales() throws APIException;\n \t/**\n \t * Used by Spring to set the http client for accessing the openmrs implementation service", "fixed": " \t * @should exclude not allowed locales\n \t * @should cache results for a user\n \t */\n\tpublic List<Locale> getSearchLocales();\n \t/**\n \t * Used by Spring to set the http client for accessing the openmrs implementation service", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "a63faf44e1b103a49d25a15c720fc5940ae9fc07", "projectName": "square.retrofit", "bugType": "Change Identifier Used", "problem": "     assertThat(factory.get(sResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResponseWildcard = new TypeToken<Maybe<Response<? extends String>>>() {}.getType();\n    assertThat(factory.get(sResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResponseWildcard = new TypeToken<Flowable<Response<? extends String>>>() {}.getType();\n    assertThat(factory.get(sResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oResultClass = new TypeToken<Observable<Result<String>>>() {}.getType();", "fixed": "     assertThat(factory.get(sResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResponseWildcard = new TypeToken<Maybe<Response<? extends String>>>() {}.getType();\n    assertThat(factory.get(mResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResponseWildcard = new TypeToken<Flowable<Response<? extends String>>>() {}.getType();\n    assertThat(factory.get(fResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oResultClass = new TypeToken<Observable<Result<String>>>() {}.getType();", "sourceBeforeFix": "factory.get(sResultClass,NO_ANNOTATIONS,retrofit)", "sourceAfterFix": "factory.get(fResultClass,NO_ANNOTATIONS,retrofit)"}
{"fixCommitSHA1": "3dddcc4cdf4a74ddbd4607c6aaee5bdd8ac46c27", "projectName": "gephi.gephi", "bugType": "Change Modifier", "problem": "     }\n     @Override\n    public List<Edge> getSelectedUnderlyingEdges() {\n         List<Edge> selected = new ArrayList<>();\n         for (Iterator<EdgeModel> itr = octree.getEdgeIterator(); itr.hasNext();) {\n             EdgeModel edgeModel = itr.next();", "fixed": "     }\n     @Override\n    public synchronized List<Edge> getSelectedUnderlyingEdges() {\n         List<Edge> selected = new ArrayList<>();\n         for (Iterator<EdgeModel> itr = octree.getEdgeIterator(); itr.hasNext();) {\n             EdgeModel edgeModel = itr.next();", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "a27a122e62bf3ab286d0b045515eecfbabe5b375", "projectName": "jersey.jersey", "bugType": "Change Identifier Used", "problem": "                         warnings.append(LocalizationMessages.WARNING_MSG(error.getMessage())).append('\\n');\n                         break;\n                     case HINT:\n                        warnings.append(LocalizationMessages.HINT_MSG(error.getMessage())).append('\\n');\n                         break;\n                 }\n             }", "fixed": "                         warnings.append(LocalizationMessages.WARNING_MSG(error.getMessage())).append('\\n');\n                         break;\n                     case HINT:\n                        hints.append(LocalizationMessages.HINT_MSG(error.getMessage())).append('\\n');\n                         break;\n                 }\n             }", "sourceBeforeFix": "warnings.append(LocalizationMessages.HINT_MSG(error.getMessage()))", "sourceAfterFix": "hints.append(LocalizationMessages.HINT_MSG(error.getMessage()))"}
