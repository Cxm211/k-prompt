{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<Status> getPublicTimeline(long sinceID) throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() +\n                 \"statuses/public_timeline.json\", null, new Paging((long) sinceID).asPostParameterList(Paging.S)\n                 , false));\n     }", "fixed": "      */\n     public ResponseList<Status> getPublicTimeline(long sinceID) throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() +\n                 \"statuses/public_timeline.json\", null, new Paging((long) sinceID).asPostParameterList(Paging.S)\n                 , false));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))"}
{"fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "projectName": "Alluxio.alluxio", "bugType": "Change Operand ", "problem": "         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n            file = new RandomAccessFile(FOLDER + (mWorkerId + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());", "fixed": "         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n            file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "fixed": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "sourceBeforeFix": "GL20.glGetVertexAttrib(index,pname,params)", "sourceAfterFix": "GL20.glGetVertexAttribfv(index,pname,params)"}
{"fixCommitSHA1": "9716d2ae673a576cb345c3bfb24cf71654d8f112", "projectName": "openhab.openhab", "bugType": "Wrong Function Name", "problem": " \t\tif (pollFuture != null && !pollFuture.isCancelled())\n \t\t\tpollFuture.cancel(false);\n\t\tlogger.debug(\"rapidRefreshFuture scheduleing for {} millis\", millis);\n \t\tpollFuture = pollService.scheduleAtFixedRate(new Runnable() {\n \t\t\t@Override", "fixed": " \t\tif (pollFuture != null && !pollFuture.isCancelled())\n \t\t\tpollFuture.cancel(false);\n\t\tlogger.trace(\"rapidRefreshFuture scheduleing for {} millis\", millis);\n \t\tpollFuture = pollService.scheduleAtFixedRate(new Runnable() {\n \t\t\t@Override", "sourceBeforeFix": "logger.debug(\"Invalid Account Credentials\")", "sourceAfterFix": "logger.trace(\"Invalid Account Credentials\")"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15852, value = \"Caught %s storing deployment content -- %s\")\n     String caughtExceptionStoringDeploymentContent(String exceptionName, Throwable exception);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10852, value = \"Caught %s storing deployment content -- %s\")\n     String caughtExceptionStoringDeploymentContent(String exceptionName, Throwable exception);\n     /**", "sourceBeforeFix": "id=15843", "sourceAfterFix": "id=10843"}
{"fixCommitSHA1": "e04cbbf23e9273cca31b1cc12142e34fae753542", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "          *  Is class declared as abstract.\n          *  @return true if class is declared as final\n          */\n        boolean isDeclaredAsAbstract() {\n             return declaredAsAbstract;\n         }\n     }", "fixed": "          *  Is class declared as abstract.\n          *  @return true if class is declared as final\n          */\n        private boolean isDeclaredAsAbstract() {\n             return declaredAsAbstract;\n         }\n     }", "sourceBeforeFix": "0", "sourceAfterFix": "2"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface TwilioEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedTwilioEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface TwilioEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedTwilioEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         if (isStatisticsEnabled()) {\n             if (result) {\n                 statistics.increaseCachePuts(1);\n                statistics.addPutTimeNano(System.nanoTime() - start);\n             }\n            statistics.addGetTimeNano(System.nanoTime() - start);\n             if (isHit) {\n                 statistics.increaseCacheHits(1);\n             } else {", "fixed": "         if (isStatisticsEnabled()) {\n             if (result) {\n                 statistics.increaseCachePuts(1);\n                statistics.addPutTimeNanos(System.nanoTime() - start);\n             }\n            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (isHit) {\n                 statistics.increaseCacheHits(1);\n             } else {", "sourceBeforeFix": "statistics.addGetTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addGetTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "d5db9f7ce7f4b2c3bfeed3e421213d03b19a8fdd", "projectName": "openhab.openhab", "bugType": "Change Binary Operator", "problem": " \t\t\tif (bulb < 6) {\r\n \t\t\t\tif (command.compareTo(oldPercent) > 0) {\r\n \t\t\t\t\tint repeatCount = (command.intValue() - oldPercent.intValue()) / 10;\r\n\t\t\t\t\tfor(int i = 0; i <= repeatCount; i++) {\r\n \t\t\t\t\t\tThread.sleep(100);\r\n \t\t\t\t\t\tif(BindingType.brightness.equals(type) && bulb < 6) {\r\n \t\t\t\t\t\t\tsendIncrease(bulb, rgbwSteps, bridgeId);\r", "fixed": " \t\t\tif (bulb < 6) {\r\n \t\t\t\tif (command.compareTo(oldPercent) > 0) {\r\n \t\t\t\t\tint repeatCount = (command.intValue() - oldPercent.intValue()) / 10;\r\n\t\t\t\t\tfor(int i = 0; i < repeatCount; i++) {\r\n \t\t\t\t\t\tThread.sleep(100);\r\n \t\t\t\t\t\tif(BindingType.brightness.equals(type) && bulb < 6) {\r\n \t\t\t\t\t\t\tsendIncrease(bulb, rgbwSteps, bridgeId);\r", "sourceBeforeFix": "i <= repeatCount", "sourceAfterFix": "i < repeatCount"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedByMe() throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",\n                 null, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedByMe() throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",\n                 null, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",null,true))"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShader(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "fixed": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShaderiv(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "sourceBeforeFix": "GL20.glGetVertexAttrib(index,pname,params)", "sourceAfterFix": "GL20.glGetVertexAttribfv(index,pname,params)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "626cf14a6e42fa0a2d144e8e16940e09bafd754a", "projectName": "druid-io.druid", "bugType": "Wrong Function Name", "problem": "     return worker;\n   }\n  @JsonProperty\n   public Map<String, TaskStatus> getRunningTasks()\n   {\n     Map<String, TaskStatus> retVal = Maps.newHashMap();", "fixed": "     return worker;\n   }\n  @JsonProperty(\"runningTasks\")\n   public Map<String, TaskStatus> getRunningTasks()\n   {\n     Map<String, TaskStatus> retVal = Maps.newHashMap();", "sourceBeforeFix": "getCurrCapacity()", "sourceAfterFix": "getCurrCapacityUsed()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15848, value = \"Exception getting result from host %s: %s\")\n     String exceptionAwaitingResultFromHost(String name, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10848, value = \"Exception getting result from host %s: %s\")\n     String exceptionAwaitingResultFromHost(String name, String message);\n     /**", "sourceBeforeFix": "id=15834", "sourceAfterFix": "id=10834"}
{"fixCommitSHA1": "48b99e43fca1306ba54dad61bdacd4259673552b", "projectName": "druid-io.druid", "bugType": "Change Identifier Used", "problem": "     synchronized (lock) {\n       if (segmentsToLoad.contains(holder)) {\n         if ((callback != null)) {\n          currentlyProcessing.addCallback(callback);\n         }\n         return;\n       }", "fixed": "     synchronized (lock) {\n       if (segmentsToLoad.contains(holder)) {\n         if ((callback != null)) {\n          holder.addCallback(callback);\n         }\n         return;\n       }", "sourceBeforeFix": "currentlyProcessing.addCallback(callback)", "sourceAfterFix": "holder.addCallback(callback)"}
{"fixCommitSHA1": "04ad420f594bedd8cd5c40160d67585f70686a9c", "projectName": "aws.aws-sdk-java", "bugType": "Wrong Function Name", "problem": "             try {\n                 return MAPPER.readTree(rawJsonContent);\n             } catch (Exception e) {\n                LOG.error(\"Unable to parse HTTP response content\", e);\n                 return null;\n             }\n         }", "fixed": "             try {\n                 return MAPPER.readTree(rawJsonContent);\n             } catch (Exception e) {\n                LOG.info(\"Unable to parse HTTP response content\", e);\n                 return null;\n             }\n         }", "sourceBeforeFix": "LOG.error(\"Unable to unmarshall exception content\",e)", "sourceAfterFix": "LOG.info(\"Unable to unmarshall exception content\",e)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15859, value = \"A slave domain controller cannot accept deployment content uploads\")\n     String slaveCannotAcceptUploads();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10859, value = \"A slave domain controller cannot accept deployment content uploads\")\n     String slaveCannotAcceptUploads();\n     /**", "sourceBeforeFix": "id=15831", "sourceAfterFix": "id=10831"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "6bae902bd35ed4f57e7a5d612b7ad9b72f4559bc", "projectName": "google.closure-compiler", "bugType": "Wrong Function Name", "problem": "     node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n     Node node2 = Node.newString(Token.NAME, \"f\");\n     node2.setJSType(registry.getNativeType(JSTypeNative.STRING_TYPE));\n    assertFalse(node1.checkTreeTypeAwareEqualsSilent(node2));\n   }\n   public void testCheckTreeTypeAwareEqualsDifferentNull() {", "fixed": "     node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n     Node node2 = Node.newString(Token.NAME, \"f\");\n     node2.setJSType(registry.getNativeType(JSTypeNative.STRING_TYPE));\n    assertFalse(node1.isEquivalentToTyped(node2));\n   }\n   public void testCheckTreeTypeAwareEqualsDifferentNull() {", "sourceBeforeFix": "node1.checkTreeTypeAwareEqualsSilent(node2)", "sourceAfterFix": "node1.isEquivalentToTyped(node2)"}
{"fixCommitSHA1": "5d12b156e1150162ba3def263b2da14793304b4e", "projectName": "facebook.presto", "bugType": "Change Identifier Used", "problem": "         );\n        MaterializedResult expected = MaterializedResult.resultBuilder(taskContext.getSession(), concat(probePages.getTypes(), buildPages.getTypes()))\n                 .row(\"20\", 1020L, 2020L, \"20\", 30L, 40L)\n                 .row(\"21\", 1021L, 2021L, \"21\", 31L, 41L)\n                 .row(\"22\", 1022L, 2022L, \"22\", 32L, 42L)", "fixed": "         );\n        MaterializedResult expected = MaterializedResult.resultBuilder(taskContext.getSession(), concat(probePages.getTypesWithoutHash(), buildPages.getTypesWithoutHash()))\n                 .row(\"20\", 1020L, 2020L, \"20\", 30L, 40L)\n                 .row(\"21\", 1021L, 2021L, \"21\", 31L, 41L)\n                 .row(\"22\", 1022L, 2022L, \"22\", 32L, 42L)", "sourceBeforeFix": "buildPages.getTypes()", "sourceAfterFix": "buildPages.getTypesWithoutHash()"}
{"fixCommitSHA1": "e9fbd7f493863da1e68776473d8b5d03861daa6f", "projectName": "apache.flink", "bugType": "Change Numeric Literal", "problem": "  */\n public class AsynchronousPartialSorter<E> extends UnilateralSortMerger<E>\n {\n\tprivate static final int MAX_MEM_PER_PARTIAL_SORT = 64 * 1024 * 0124;\n \tprivate BufferQueueIterator bufferIterator;", "fixed": "  */\n public class AsynchronousPartialSorter<E> extends UnilateralSortMerger<E>\n {\n\tprivate static final int MAX_MEM_PER_PARTIAL_SORT = 512 * 1024 * 1024;\n \tprivate BufferQueueIterator bufferIterator;", "sourceBeforeFix": "64 * 1024 * 0124", "sourceAfterFix": "512 * 1024 * 1024"}
{"fixCommitSHA1": "e2efffc72002968f835a0ea6a70f8e7762752b15", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": " \t\tConceptName anotherConceptName = ConceptNameTest.createMockConceptName(3, Context.getLocale(), null, true);\r\n \t\tanotherConceptName.setName(duplicateName);\r\n \t\tnewConcept.addName(anotherConceptName);\r\n\t\tErrors errors = new BindException(concept, \"concept\");\r\n \t\tnew ConceptValidator().validate(newConcept, errors);\r\n \t}\r", "fixed": " \t\tConceptName anotherConceptName = ConceptNameTest.createMockConceptName(3, Context.getLocale(), null, true);\r\n \t\tanotherConceptName.setName(duplicateName);\r\n \t\tnewConcept.addName(anotherConceptName);\r\n\t\tErrors errors = new BindException(newConcept, \"concept\");\r\n \t\tnew ConceptValidator().validate(newConcept, errors);\r\n \t}\r", "sourceBeforeFix": "new BindException(concept,\"concept\")", "sourceAfterFix": "new BindException(newConcept,\"concept\")"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsCsv(String path, int batchSize, OUT endTuple) {\n \t\tif (this instanceof SingleOutputStreamOperator) {\n \t\t\t((SingleOutputStreamOperator<?, ?>) this).setMutability(false);\n \t\t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsCsv(String path, int batchSize, OUT endTuple) {\n \t\tif (this instanceof SingleOutputStreamOperator) {\n \t\t\t((SingleOutputStreamOperator<?, ?>) this).setMutability(false);\n \t\t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<Status> getHomeTimeline(Paging paging) throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/home_timeline.json\", null, paging.asPostParameterList(), true));\n     }\n     /**", "fixed": "      */\n     public ResponseList<Status> getHomeTimeline(Paging paging) throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/home_timeline.json\", null, paging.asPostParameterList(), true));\n     }\n     /**", "sourceBeforeFix": "SavedSearch.constructSavedSearches(get(getBaseURL() + \"saved_searches.json\",true))", "sourceAfterFix": "SavedSearch.createSavedSearchList(get(getBaseURL() + \"saved_searches.json\",true))"}
{"fixCommitSHA1": "e70960913c07d921dea470857f9bcdb67f38959f", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "      * @param format a <code>String</code> value\n      * @throws ConversionException if unable to create Pattern object.\n      */\n    public void setOnCommentFormat(String format) {\n         onRegexp = Utils.createPattern(format);\n     }", "fixed": "      * @param format a <code>String</code> value\n      * @throws ConversionException if unable to create Pattern object.\n      */\n    public final void setOnCommentFormat(String format) {\n         onRegexp = Utils.createPattern(format);\n     }", "sourceBeforeFix": "1", "sourceAfterFix": "17"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15857, value = \"Only 1 piece of content is currently supported (AS7-431)\")\n     String as7431();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10857, value = \"Only 1 piece of content is currently supported (AS7-431)\")\n     String as7431();\n     /**", "sourceBeforeFix": "id=15847", "sourceAfterFix": "id=10847"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "a5a28bef5e182a059f2dbe1718d7cde06e33cd78", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "             }\n             modulePath = jbossHome + File.separatorChar + \"modules\";\n         } else {\n            modulePath = modulePath.split(File.pathSeparator)[1];\n         }\n         File moduleDir = new File(modulePath);\n         if (!moduleDir.exists()) {", "fixed": "             }\n             modulePath = jbossHome + File.separatorChar + \"modules\";\n         } else {\n            modulePath = modulePath.split(File.pathSeparator)[0];\n         }\n         File moduleDir = new File(modulePath);\n         if (!moduleDir.exists()) {", "sourceBeforeFix": "modulePath.split(File.pathSeparator)[1]", "sourceAfterFix": "modulePath.split(File.pathSeparator)[0]"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "51271a02806489a2e2b5539475eb2131fd29b77d", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "     renameProperties();\n    GatherGettersAndSetterProperties.update(compiler, externs, root);\n   }\n   ", "fixed": "     renameProperties();\n    GatherGetterAndSetterProperties.update(compiler, externs, root);\n   }\n   ", "sourceBeforeFix": "GatherGettersAndSetterProperties.update(compiler,externs,root)", "sourceAfterFix": "GatherGetterAndSetterProperties.update(compiler,externs,root)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface PulsarEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedPulsarEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface PulsarEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedPulsarEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15858, value = \"No deployment content with hash %s is available in the deployment content repository.\")\n     String noDeploymentContentWithHash(String hash);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10858, value = \"No deployment content with hash %s is available in the deployment content repository.\")\n     String noDeploymentContentWithHash(String hash);\n     /**", "sourceBeforeFix": "id=15858", "sourceAfterFix": "id=10858"}
{"fixCommitSHA1": "bb562c242d8b01af3b54696ee9bb81d03fdeb66a", "projectName": "apache.flink", "bugType": "Same Function More Args", "problem": " \t@Override\n \tpublic JobExecutionResult execute(String jobName) throws Exception {\n\t\tPreconditions.checkNotNull(\"Streaming Job name should not be null.\");\n \t\tStreamGraph streamGraph = this.getStreamGraph();\n \t\tstreamGraph.setJobName(jobName);", "fixed": " \t@Override\n \tpublic JobExecutionResult execute(String jobName) throws Exception {\n\t\tPreconditions.checkNotNull(jobName, \"Streaming Job name should not be null.\");\n \t\tStreamGraph streamGraph = this.getStreamGraph();\n \t\tstreamGraph.setJobName(jobName);", "sourceBeforeFix": "Preconditions.checkNotNull(\"Streaming Job name should not be null.\")", "sourceAfterFix": "Preconditions.checkNotNull(jobName,\"Streaming Job name should not be null.\")"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 15832, value = \"There is already a registered host named '%s'\")\n     String slaveAlreadyRegistered(String slaveName);\n     /**", "fixed": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 10832, value = \"There is already a registered host named '%s'\")\n     String slaveAlreadyRegistered(String slaveName);\n     /**", "sourceBeforeFix": "id=15861", "sourceAfterFix": "id=10861"}
{"fixCommitSHA1": "4a19c2c078ddf5484e0cb8c1ac075451f158fa40", "projectName": "Atmosphere.atmosphere", "bugType": "Change Unary Operator\t", "problem": "                 case BEFORE_DEFAULT:\n                     switch (p2) {\n                         case AFTER_DEFAULT:\n                            orderResult = 1;\n                             break;\n                         case FIRST_BEFORE_DEFAULT:\n                            orderResult = -1;\n                             break;\n                     }\n                     break;", "fixed": "                 case BEFORE_DEFAULT:\n                     switch (p2) {\n                         case AFTER_DEFAULT:\n                            orderResult = -1;\n                             break;\n                         case FIRST_BEFORE_DEFAULT:\n                            orderResult = 1;\n                             break;\n                     }\n                     break;", "sourceBeforeFix": "1", "sourceAfterFix": "-1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedKubernetesNodesEndpointBuilder\n             extends\n                 AdvancedKubernetesNodesEndpointConsumerBuilder, AdvancedKubernetesNodesEndpointProducerBuilder {\n         default KubernetesNodesEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedKubernetesNodesEndpointBuilder\n             extends\n                 AdvancedKubernetesNodesEndpointConsumerBuilder, AdvancedKubernetesNodesEndpointProducerBuilder {\n         default KubernetesNodesEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedTwilioEndpointBuilder\n             extends\n                 AdvancedTwilioEndpointConsumerBuilder, AdvancedTwilioEndpointProducerBuilder {\n         default TwilioEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedTwilioEndpointBuilder\n             extends\n                 AdvancedTwilioEndpointConsumerBuilder, AdvancedTwilioEndpointProducerBuilder {\n         default TwilioEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<DirectMessage> getSentDirectMessages() throws\n             TwitterException {\n        return DirectMessage.constructDirectMessages(get(getBaseURL() +\n                 \"direct_messages/sent.json\", new PostParameter[0], true));\n     }", "fixed": "      */\n     public ResponseList<DirectMessage> getSentDirectMessages() throws\n             TwitterException {\n        return DirectMessage.createDirectMessageList(get(getBaseURL() +\n                 \"direct_messages/sent.json\", new PostParameter[0], true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "359ce65a7b6ec7725d4fea3aca1a299cd2b7f7ba", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "      * @param detailNode javadoc tag node\n      * @return java doc tag content appended in result\n      */\n    private String getStringInsideTag(String result, DetailNode detailNode) {\n         final StringBuilder contents = new StringBuilder(result);\n         DetailNode tempNode = detailNode;\n         while (tempNode != null) {", "fixed": "      * @param detailNode javadoc tag node\n      * @return java doc tag content appended in result\n      */\n    private static String getStringInsideTag(String result, DetailNode detailNode) {\n         final StringBuilder contents = new StringBuilder(result);\n         DetailNode tempNode = detailNode;\n         while (tempNode != null) {", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "41467c8004b716fb78002c3139ea771b70ed165d", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tprivate void renderCached () {\r\n\t\tcache5.setColor(red);\r\n \t\tcache5.draw(spriteBatch);\r\n \t\tcache1.draw(spriteBatch);\r", "fixed": " \t}\r\n \tprivate void renderCached () {\r\n\t\tcache5.setColors(red);\r\n \t\tcache5.draw(spriteBatch);\r\n \t\tcache1.draw(spriteBatch);\r", "sourceBeforeFix": "cacheScaled5.setColor(red)", "sourceAfterFix": "cacheScaled5.setColors(red)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<Status> getHomeTimeline() throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/home_timeline.json\", true));\n     }", "fixed": "      */\n     public ResponseList<Status> getHomeTimeline() throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/home_timeline.json\", true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline.json\",true))"}
{"fixCommitSHA1": "1a9bb447fd14415ef270f3dd7af8a0d4e0017177", "projectName": "Atmosphere.atmosphere", "bugType": "Change Identifier Used", "problem": "         response.setHeader(HeaderConfig.X_ATMOSPHERE_TRACKING_ID, uuid);\n         return create(config,\n                 noOps,\n                DefaultAtmosphereRequest.newInstance(),\n                 response,\n                 config.framework().getAsyncSupport(),\n                 noOpsHandler);", "fixed": "         response.setHeader(HeaderConfig.X_ATMOSPHERE_TRACKING_ID, uuid);\n         return create(config,\n                 noOps,\n                AtmosphereRequest.newInstance(),\n                 response,\n                 config.framework().getAsyncSupport(),\n                 noOpsHandler);", "sourceBeforeFix": "DefaultAtmosphereRequest.newInstance()", "sourceAfterFix": "AtmosphereRequest.newInstance()"}
{"fixCommitSHA1": "979ce2a33924be23a6343640ed0c038af5a33740", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \tpublic boolean act (float delta) {\n \t\tActor actor = (targetActor != null ? targetActor : this.actor);\n \t\tif (capture)\n\t\t\ttargetActor.addCaptureListener(listener);\n \t\telse\n\t\t\ttargetActor.addListener(listener);\n \t\treturn true;\n \t}", "fixed": " \tpublic boolean act (float delta) {\n \t\tActor actor = (targetActor != null ? targetActor : this.actor);\n \t\tif (capture)\n\t\t\tactor.addCaptureListener(listener);\n \t\telse\n\t\t\tactor.addListener(listener);\n \t\treturn true;\n \t}", "sourceBeforeFix": "targetActor.addCaptureListener(listener)", "sourceAfterFix": "actor.addCaptureListener(listener)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "06f8fe87421493280f6602aeb73153e677844542", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t\tfor (int i = 0; i < noOfTasks; i++) {\n \t\t\tfor (int j = 0; j < 2 + i; j++) {\n\t\t\t\tfinal String part = new Path(bucketPath, \"test-\" + i + '-' + j).toString();\n \t\t\t\tAssert.assertTrue(paths.contains(part));\n \t\t\t\tpaths.remove(part);\n \t\t\t}", "fixed": " \t\tfor (int i = 0; i < noOfTasks; i++) {\n \t\t\tfor (int j = 0; j < 2 + i; j++) {\n\t\t\t\tfinal String part = new Path(bucketPath, \"test-\" + i + '-' + j).getPath();\n \t\t\t\tAssert.assertTrue(paths.contains(part));\n \t\t\t\tpaths.remove(part);\n \t\t\t}", "sourceBeforeFix": "new Path(testBucket.getParent(),\".test-2.inprogress\").toString()", "sourceAfterFix": "new Path(testBucket.getParent(),\".test-2.inprogress\").getPath()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15869, value = \"Unknown %s %s\")\n     String unknown(String name, String value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10869, value = \"Unknown %s %s\")\n     String unknown(String name, String value);\n     /**", "sourceBeforeFix": "id=15869", "sourceAfterFix": "id=10869"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "fixed": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "sourceBeforeFix": "GL20.glGetShader(shader,pname,params)", "sourceAfterFix": "GL20.glGetShaderiv(shader,pname,params)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface EtcdEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedEtcdEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface EtcdEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedEtcdEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "038ea1803bae1cf3be279b36395b4de4e0ff39b5", "projectName": "openhab.openhab", "bugType": "Change Identifier Used", "problem": " \t\tif (pollFuture != null && !pollFuture.isCancelled())\n \t\t\tpollFuture.cancel(false);\n\t\tlogger.debug(\"rapidRefreshFuture scheduleing for {} millis\", millis);\n \t\tpollFuture = pollService.scheduleAtFixedRate(new Runnable() {\n \t\t\t@Override", "fixed": " \t\tif (pollFuture != null && !pollFuture.isCancelled())\n \t\t\tpollFuture.cancel(false);\n\t\tlogger.trace(\"rapidRefreshFuture scheduleing for {} millis\", millis);\n \t\tpollFuture = pollService.scheduleAtFixedRate(new Runnable() {\n \t\t\t@Override", "sourceBeforeFix": "logger.debug(\"rapidRefreshFuture scheduleing for {} millis\",millis)", "sourceAfterFix": "logger.trace(\"rapidRefreshFuture scheduleing for {} millis\",millis)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  private final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedLogEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default LogEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedLogEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default LogEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "007ea4a7f2ba64fad78f78c1b798ca45455719e4", "projectName": "dropwizard.dropwizard", "bugType": "Change Identifier Used", "problem": "     public void defaultsToAllowingComments() throws Exception {\n         final ObjectMapper mapper = factory.build();\n        assertThat(mapper.getJsonFactory().isEnabled(JsonParser.Feature.ALLOW_COMMENTS))\n                 .isTrue();\n     }", "fixed": "     public void defaultsToAllowingComments() throws Exception {\n         final ObjectMapper mapper = factory.build();\n        assertThat(mapper.getFactory().isEnabled(JsonParser.Feature.ALLOW_COMMENTS))\n                 .isTrue();\n     }", "sourceBeforeFix": "mapper.getJsonFactory()", "sourceAfterFix": "mapper.getFactory()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "26307cbc3e1ce776eb2f3ccd40ca216f7edcdbc6", "projectName": "netty.netty", "bugType": "More Specific If", "problem": "         if (getDomain() == null && that.getDomain() != null) {\n             return false;\n        } else if (that.getDomain() == null) {\n             return false;\n         }\n         return getDomain().equalsIgnoreCase(that.getDomain());", "fixed": "         if (getDomain() == null && that.getDomain() != null) {\n             return false;\n        } else if (that.getDomain() == null && getDomain() != null) {\n             return false;\n         }\n         return getDomain().equalsIgnoreCase(that.getDomain());", "sourceBeforeFix": "that.getPath() == null", "sourceAfterFix": "that.getPath() == null && getPath() != null"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface FlatpackEndpointBuilder\n             extends\n                 FlatpackEndpointConsumerBuilder, FlatpackEndpointProducerBuilder {\n         default AdvancedFlatpackEndpointBuilder advanced() {", "fixed": "     \n    public interface FlatpackEndpointBuilder\n             extends\n                 FlatpackEndpointConsumerBuilder, FlatpackEndpointProducerBuilder {\n         default AdvancedFlatpackEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "fixed": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2fv(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2fv(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "sourceBeforeFix": "GL20.glGetVertexAttrib(index,pname,params)", "sourceAfterFix": "GL20.glGetVertexAttribiv(index,pname,params)"}
{"fixCommitSHA1": "1d5647b92215f0ceabced59275225ad829061663", "projectName": "spring-projects.spring-boot", "bugType": "Change Modifier", "problem": " \t}\n \t@Test\n\tpublic void testHealth() throws Exception {\nString url = \"http:\n \t\tSystem.out.println(url);\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);", "fixed": " \t}\n \t@Test\n\tvoid testHealth() throws Exception {\nString url = \"http:\n \t\tSystem.out.println(url);\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "f652e2465b9f44d024cbb1a91f5793c147a50471", "projectName": "Graylog2.graylog2-server", "bugType": "Change Numeric Literal", "problem": "         reader.join();\n         writer.join();\n        await().atMost(5, TimeUnit.SECONDS).until(new Callable<Boolean>() {\n             @Override\n             public Boolean call() throws Exception {\n                 return stream.isDone();", "fixed": "         reader.join();\n         writer.join();\n        await().atMost(20, TimeUnit.SECONDS).until(new Callable<Boolean>() {\n             @Override\n             public Boolean call() throws Exception {\n                 return stream.isDone();", "sourceBeforeFix": "await().atMost(5,TimeUnit.SECONDS)", "sourceAfterFix": "await().atMost(20,TimeUnit.SECONDS)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public Trends getCurrentTrends(boolean excludeHashTags) throws TwitterException {\n        return Trends.constructTrendsList(get(getSearchBaseURL() + \"trends/current.json\"\n                 + (excludeHashTags ? \"?exclude=hashtags\" : \"\"), false)).get(0);\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public Trends getCurrentTrends(boolean excludeHashTags) throws TwitterException {\n        return Trends.createTrendsList(get(getSearchBaseURL() + \"trends/current.json\"\n                 + (excludeHashTags ? \"?exclude=hashtags\" : \"\"), false)).get(0);\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_to_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_to_me.json\",null,true))"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15851, value = \"Operation targets host %s but that host is not registered\")\n     String invalidOperationTargetHost(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10851, value = \"Operation targets host %s but that host is not registered\")\n     String invalidOperationTargetHost(String name);\n     /**", "sourceBeforeFix": "id=15850", "sourceAfterFix": "id=10850"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "7504963a65930f0b3332774f8a6d0db70c94fa12", "projectName": "Alluxio.alluxio", "bugType": "Change Modifier", "problem": "     return CLIENT.user_getNumberOfFiles(folderPath);\n   }\n  public int user_mkdir(String path) \n       throws FileAlreadyExistException, InvalidPathException, TException {\n     return CLIENT.user_mkdir(path);\n   }", "fixed": "     return CLIENT.user_getNumberOfFiles(folderPath);\n   }\n  public synchronized int user_mkdir(String path) \n       throws FileAlreadyExistException, InvalidPathException, TException {\n     return CLIENT.user_mkdir(path);\n   }", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "9771ba62390a56363b20e52f12a8b9b34c51da62", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "     public void testSamplingUsingmessageFrequencyViaDSL() throws Exception {\n         long totalMessages = 50;\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedMessageCount(10);\n         mock.setResultWaitTime(100);\n         for (int i = 0; i < totalMessages; i++) {", "fixed": "     public void testSamplingUsingmessageFrequencyViaDSL() throws Exception {\n         long totalMessages = 50;\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedMinimumMessageCount(10);\n         mock.setResultWaitTime(100);\n         for (int i = 0; i < totalMessages; i++) {", "sourceBeforeFix": "mock.expectedMessageCount(10)", "sourceAfterFix": "mock.expectedMinimumMessageCount(10)"}
{"fixCommitSHA1": "9754de49878983bf090655203e0c880cccad7b2e", "projectName": "Atmosphere.atmosphere", "bugType": "Wrong Function Name", "problem": "             logger.debug(\"Active clients {}\", activeClients());\n         }\n        long now = System.nanoTime();\n         String messageId = UUID.randomUUID().toString();\n         CacheMessage cacheMessage = new CacheMessage(messageId, e);\n         synchronized (messages) {", "fixed": "             logger.debug(\"Active clients {}\", activeClients());\n         }\n        long now = System.currentTimeMillis();\n         String messageId = UUID.randomUUID().toString();\n         CacheMessage cacheMessage = new CacheMessage(messageId, e);\n         synchronized (messages) {", "sourceBeforeFix": "System.nanoTime()", "sourceAfterFix": "System.currentTimeMillis()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15844, value = \"Invalid rollout plan. Server group %s appears more than once in the plan.\")\n     String invalidRolloutPlanGroupAlreadyExists(String group);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10844, value = \"Invalid rollout plan. Server group %s appears more than once in the plan.\")\n     String invalidRolloutPlanGroupAlreadyExists(String group);\n     /**", "sourceBeforeFix": "id=15838", "sourceAfterFix": "id=10838"}
{"fixCommitSHA1": "71457e50581dd7f16b18cf8faaec3f0aa21cd880", "projectName": "stanfordnlp.CoreNLP", "bugType": "Change Numeric Literal", "problem": "     assertNotNull(compressedProto);\n    assertTrue(\"\" + compressedProto.length, compressedProto.length < 390200);\n     assertTrue(\"\" + uncompressedProto.length, uncompressedProto.length < 2100000);\n   }", "fixed": "     assertNotNull(compressedProto);\n    assertTrue(\"\" + compressedProto.length, compressedProto.length < 391000);\n     assertTrue(\"\" + uncompressedProto.length, uncompressedProto.length < 2100000);\n   }", "sourceBeforeFix": "compressedProto.length < 390200", "sourceAfterFix": "compressedProto.length < 391000"}
{"fixCommitSHA1": "0cb756acf8ee44c28bee8b9ea626e2a65cee5880", "projectName": "google.guava", "bugType": "Change Identifier Used", "problem": "     rng.nextBytes(bytes);\n     ByteBuffer littleEndian = ByteBuffer.wrap(bytes).order(ByteOrder.LITTLE_ENDIAN);\n     ByteBuffer bigEndian = ByteBuffer.wrap(bytes).order(ByteOrder.BIG_ENDIAN);\n    assertEquals(hashFunction.hashBytes(littleEndian), hashFunction.hashBytes(littleEndian));\n     assertEquals(ByteOrder.LITTLE_ENDIAN, littleEndian.order());\n    assertEquals(ByteOrder.BIG_ENDIAN, littleEndian.order());\n   }\n   static void assertHasherByteBufferPreservesByteOrder(HashFunction hashFunction) {", "fixed": "     rng.nextBytes(bytes);\n     ByteBuffer littleEndian = ByteBuffer.wrap(bytes).order(ByteOrder.LITTLE_ENDIAN);\n     ByteBuffer bigEndian = ByteBuffer.wrap(bytes).order(ByteOrder.BIG_ENDIAN);\n    assertEquals(hashFunction.hashBytes(littleEndian), hashFunction.hashBytes(bigEndian));\n     assertEquals(ByteOrder.LITTLE_ENDIAN, littleEndian.order());\n    assertEquals(ByteOrder.BIG_ENDIAN, bigEndian.order());\n   }\n   static void assertHasherByteBufferPreservesByteOrder(HashFunction hashFunction) {", "sourceBeforeFix": "littleEndian.order()", "sourceAfterFix": "bigEndian.order()"}
{"fixCommitSHA1": "53694f29adf8c68992e1b966c86380219f438c14", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         String uri = getScpUri() + \"?username=admin&password=admin&chmod=640&knownHostsFile=\" + getKnownHostsFile();\n         template.sendBodyAndHeader(uri, \"Bonjour Monde\", Exchange.FILE_NAME, \"monde.txt\");\n        Thread.sleep(100);\n         File file = new File(getScpPath() + \"/monde.txt\");\n         assertFileExists(file.getAbsolutePath());", "fixed": "         String uri = getScpUri() + \"?username=admin&password=admin&chmod=640&knownHostsFile=\" + getKnownHostsFile();\n         template.sendBodyAndHeader(uri, \"Bonjour Monde\", Exchange.FILE_NAME, \"monde.txt\");\n        Thread.sleep(200);\n         File file = new File(getScpPath() + \"/monde.txt\");\n         assertFileExists(file.getAbsolutePath());", "sourceBeforeFix": "Thread.sleep(100)", "sourceAfterFix": "Thread.sleep(200)"}
{"fixCommitSHA1": "5530d4c27d508c513b68af67aadede84b4cfa102", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "     }\n     \n    private PkgControl getRoot() {\n         return stack.peek();\n     }", "fixed": "     }\n     \n    private ImportControl getRoot() {\n         return stack.peek();\n     }", "sourceBeforeFix": "new PkgControl(stack.peek(),name,regex)", "sourceAfterFix": "new ImportControl(stack.peek(),name,regex)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "f3a55f30abec0d1445ef65a89b16e49e3a8e2a2d", "projectName": "swagger-api.swagger-core", "bugType": "Wrong Function Name", "problem": "                 if (field != null) {\n                    paramType = field.getRawType();\n                     for (final Annotation fieldAnnotation : field.annotations()) {\n                         if (!paramAnnotations.contains(fieldAnnotation)) {", "fixed": "                 if (field != null) {\n                \tparamType = field.getType();\n                     for (final Annotation fieldAnnotation : field.annotations()) {\n                         if (!paramAnnotations.contains(fieldAnnotation)) {", "sourceBeforeFix": "field.getRawType()", "sourceAfterFix": "field.getType()"}
{"fixCommitSHA1": "93c745c53b03deda947da3358b8948c5d539e05e", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Change Identifier Used", "problem": "      * @since 2.0.0\n      */\n     public boolean hasResponseFilters() {\n        return !requestFilters.isEmpty();\n     }\n     /**", "fixed": "      * @since 2.0.0\n      */\n     public boolean hasResponseFilters() {\n        return !responseFilters.isEmpty();\n     }\n     /**", "sourceBeforeFix": "requestFilters.isEmpty()", "sourceAfterFix": "responseFilters.isEmpty()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "864435a71cd9e8b0dec4150284ee43372167b091", "projectName": "google.guava", "bugType": "Change Identifier Used", "problem": "     ticker.advance(16000000);\n     stopwatch.start();\n    assertEquals(9, stopwatch.elapsedMillis());\n     ticker.advance(25000000);\n    assertEquals(34, stopwatch.elapsedMillis());\n     stopwatch.stop();\n     ticker.advance(36000000);\n    assertEquals(34, stopwatch.elapsedMillis());\n   }\n   @GwtIncompatible(\"String.format()\")", "fixed": "     ticker.advance(16000000);\n     stopwatch.start();\n    assertEquals(9, stopwatch.elapsed(MILLISECONDS));\n     ticker.advance(25000000);\n    assertEquals(34, stopwatch.elapsed(MILLISECONDS));\n     stopwatch.stop();\n     ticker.advance(36000000);\n    assertEquals(34, stopwatch.elapsed(MILLISECONDS));\n   }\n   @GwtIncompatible(\"String.format()\")", "sourceBeforeFix": "stopwatch.elapsedMillis()", "sourceAfterFix": "stopwatch.elapsed(MILLISECONDS)"}
{"fixCommitSHA1": "df43a7a353d1f56e6996170bd74f7a6267eb2bb8", "projectName": "libgdx.libgdx", "bugType": "Same Function More Args", "problem": " \t\n \tpublic Container<T> maxSize (float width, float height) {\n\t\tmaxSize(new Fixed(width));\n \t\treturn this;\n \t}", "fixed": " \t\n \tpublic Container<T> maxSize (float width, float height) {\n\t\tmaxSize(new Fixed(width), new Fixed(height));\n \t\treturn this;\n \t}", "sourceBeforeFix": "maxSize(new Fixed(width))", "sourceAfterFix": "maxSize(new Fixed(width),new Fixed(height))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "1daccd54d2ff2ecdb21d8c60268600c37febbb70", "projectName": "Alluxio.alluxio", "bugType": "Change Operand ", "problem": "         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n            file = new RandomAccessFile(FOLDER + (mWorkerId + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());", "fixed": "         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n           if (!mMemoryOnly) {\n            file = new RandomAccessFile(FOLDER + (times + BASE_FILE_NUMBER), \"rw\");\n             dst = file.getChannel().map(MapMode.READ_WRITE, 0, FILE_BYTES);\n           }\n           dst.order(ByteOrder.nativeOrder());", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "af233c9c353322adf1fa91d5e6ca706b9d9d98b7", "projectName": "dropwizard.dropwizard", "bugType": "Wrong Function Name", "problem": "     @SuppressWarnings(\"unchecked\")\n     public void returnsA500OnExceptions() throws Exception {\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getServletPath()).thenReturn(\"/tasks/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.<String>of()));\n         final RuntimeException ex = new RuntimeException(\"whoops\");", "fixed": "     @SuppressWarnings(\"unchecked\")\n     public void returnsA500OnExceptions() throws Exception {\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getPathInfo()).thenReturn(\"/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.<String>of()));\n         final RuntimeException ex = new RuntimeException(\"whoops\");", "sourceBeforeFix": "request.getServletPath()", "sourceAfterFix": "request.getPathInfo()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "486b290863a66641b0ec30dbf2d9e349733cae44", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "    */\n   public void compact(final String tableNameOrRegionName)\n   throws IOException, InterruptedException {\n    compact(Bytes.toBytesBinary(tableNameOrRegionName));\n   }\n   /**", "fixed": "    */\n   public void compact(final String tableNameOrRegionName)\n   throws IOException, InterruptedException {\n    compact(Bytes.toBytes(tableNameOrRegionName));\n   }\n   /**", "sourceBeforeFix": "Bytes.toBytesBinary(tableOrRegionName)", "sourceAfterFix": "Bytes.toBytes(tableOrRegionName)"}
{"fixCommitSHA1": "4310aa87ecca59bfef4cb9fd0a664d328c061269", "projectName": "wildfly.wildfly", "bugType": "Same Function Less Args", "problem": "                 }\n             }\n             if (deploymentUnit.getParent() != null) {\n                phaseServiceBuilder.addDependencies(Services.deploymentUnitName(deploymentUnit.getParent().getName(), deploymentUnit.getName(), nextPhase));\n             }\n             List<DeploymentUnit> subDeployments = deploymentUnit.getAttachmentList(Attachments.SUB_DEPLOYMENTS);", "fixed": "                 }\n             }\n             if (deploymentUnit.getParent() != null) {\n                phaseServiceBuilder.addDependencies(Services.deploymentUnitName(deploymentUnit.getParent().getName(), nextPhase));\n             }\n             List<DeploymentUnit> subDeployments = deploymentUnit.getAttachmentList(Attachments.SUB_DEPLOYMENTS);", "sourceBeforeFix": "Services.deploymentUnitName(deploymentUnit.getParent().getName(),deploymentUnit.getName(),nextPhase)", "sourceAfterFix": "Services.deploymentUnitName(deploymentUnit.getParent().getName(),nextPhase)"}
{"fixCommitSHA1": "5b13fe70c25812157a1e4432135eb9639e72bc6a", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t\tfinal Sink result = new Sink(\"result.json\").withInputs(join);\n \t\texpectedPlan.setSinks(result);\n\t\tassertEquals(expectedPlan, actualPlan);\n \t}\n \t@Test", "fixed": " \t\tfinal Sink result = new Sink(\"result.json\").withInputs(join);\n \t\texpectedPlan.setSinks(result);\n\t\tassertPlanEquals(expectedPlan, actualPlan);\n \t}\n \t@Test", "sourceBeforeFix": "assertEquals(expectedPlan,actualPlan)", "sourceAfterFix": "assertPlanEquals(expectedPlan,actualPlan)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should return null if no implementation id is defined yet\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)\n\tpublic ImplementationId getImplementationId() throws APIException;\n \t/**\n \t * Set the given <code>implementationId</code> as this implementation's unique id", "fixed": " \t * @should return null if no implementation id is defined yet\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)\n\tpublic ImplementationId getImplementationId();\n \t/**\n \t * Set the given <code>implementationId</code> as this implementation's unique id", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "cb6f6e26c12839e59243f25bfb142ec5e5b71135", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "     public void testBeanRecipientListParallelTimeout() throws Exception {\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedBodiesReceived(\"BC\");\n         template.sendBody(\"direct:start\", \"Hello\");", "fixed": "     public void testBeanRecipientListParallelTimeout() throws Exception {\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.message(0).body().not(body().contains(\"A\"));\n         template.sendBody(\"direct:start\", \"Hello\");", "sourceBeforeFix": "assertEquals(2000,timeout)", "sourceAfterFix": "assertEquals(1000,timeout)"}
{"fixCommitSHA1": "23efcad891c91fc131ed4729c734ff6b122197df", "projectName": "Activiti.Activiti", "bugType": "Change Identifier Used", "problem": " \t * a barrier for starting and a barrier for completing the command, so they each insert a new variable guaranteed.\n \t */\n \tpublic void testDuplicateVariableInsertOnExecution() throws Exception {\n\t\tString processDefinitionId = deployOneTaskProcess();\n \t\tfinal ProcessInstance processInstance = runtimeService.startProcessInstanceById(processDefinitionId);\n \t\tfinal CyclicBarrier startBarrier = new CyclicBarrier(2);", "fixed": " \t * a barrier for starting and a barrier for completing the command, so they each insert a new variable guaranteed.\n \t */\n \tpublic void testDuplicateVariableInsertOnExecution() throws Exception {\n\t\tString processDefinitionId = deployOneTaskTestProcess();\n \t\tfinal ProcessInstance processInstance = runtimeService.startProcessInstanceById(processDefinitionId);\n \t\tfinal CyclicBarrier startBarrier = new CyclicBarrier(2);", "sourceBeforeFix": "deployOneTaskProcess()", "sourceAfterFix": "deployOneTaskTestProcess()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15843, value = \"Invalid rollout plan. Plan operations affect server groups %s that are not reflected in the rollout plan\")\n     String invalidRolloutPlan(Set<String> groups);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10843, value = \"Invalid rollout plan. Plan operations affect server groups %s that are not reflected in the rollout plan\")\n     String invalidRolloutPlan(Set<String> groups);\n     /**", "sourceBeforeFix": "id=15835", "sourceAfterFix": "id=10835"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   }\n   \n  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15847, value = \"Interrupted waiting for result from host %s\")\n     String interruptedAwaitingResultFromHost(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10847, value = \"Interrupted waiting for result from host %s\")\n     String interruptedAwaitingResultFromHost(String name);\n     /**", "sourceBeforeFix": "id=15867", "sourceAfterFix": "id=10867"}
{"fixCommitSHA1": "e7bf415427b37bbc760ff9b9c69650db8ec477e4", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t}\n \t@Configuration\n\t@ConditionalOnEnablednHealthIndicator(\"diskspace\")\n \tpublic static class DiskSpaceHealthIndicatorConfiguration {\n \t\t@Bean", "fixed": " \t}\n \t@Configuration\n\t@ConditionalOnEnabledHealthIndicator(\"diskspace\")\n \tpublic static class DiskSpaceHealthIndicatorConfiguration {\n \t\t@Bean", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"db\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"db\")"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform3fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform3(location, v);\r\n \t}\r\n \tpublic void glUniform3fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform3(location, toFloatBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform3i (int location, int x, int y, int z) {\r", "fixed": " \t}\r\n \tpublic void glUniform3fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform3fv(location, v);\r\n \t}\r\n \tpublic void glUniform3fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform3fv(location, toFloatBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform3i (int location, int x, int y, int z) {\r", "sourceBeforeFix": "GL20.glGetUniform(program,location,params)", "sourceAfterFix": "GL20.glGetUniformiv(program,location,params)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @return property value in the type of the default value\n \t * @since 1.7\n \t */\n\tpublic <T> T getGlobalPropertyValue(String propertyName, T defaultValue) throws APIException;\n \t/**\n \t * @param aClass class of object getting length for", "fixed": " \t * @return property value in the type of the default value\n \t * @since 1.7\n \t */\n\tpublic <T> T getGlobalPropertyValue(String propertyName, T defaultValue);\n \t/**\n \t * @param aClass class of object getting length for", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15855, value = \"Invalid byte stream.\")\n     String invalidByteStream();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10855, value = \"Invalid byte stream.\")\n     String invalidByteStream();\n     /**", "sourceBeforeFix": "id=15842", "sourceAfterFix": "id=10842"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "ec729c57f331ebdce98a63d413210dc6496fff2c", "projectName": "libgdx.libgdx", "bugType": "More Specific If", "problem": " \t\t\tset(u_fogColor, ((ColorAttribute)attributes.get(ColorAttribute.Fog)).color);\r\n \t\t}\r\n\t\tif (lights.shadowMap != null) {\r\n \t\t\tset(u_shadowMapProjViewTrans, lights.shadowMap.getProjViewTrans());\r\n \t\t\tset(u_shadowTexture, lights.shadowMap.getDepthMap());\r\n \t\t\tset(u_shadowPCFOffset, 1.f / (float)(2f * lights.shadowMap.getDepthMap().texture.getWidth()));\r", "fixed": " \t\t\tset(u_fogColor, ((ColorAttribute)attributes.get(ColorAttribute.Fog)).color);\r\n \t\t}\r\n\t\tif (lights != null && lights.shadowMap != null) {\r\n \t\t\tset(u_shadowMapProjViewTrans, lights.shadowMap.getProjViewTrans());\r\n \t\t\tset(u_shadowTexture, lights.shadowMap.getDepthMap());\r\n \t\t\tset(u_shadowPCFOffset, 1.f / (float)(2f * lights.shadowMap.getDepthMap().texture.getWidth()));\r", "sourceBeforeFix": "lights.shadowMap != null", "sourceAfterFix": "lights != null && lights.shadowMap != null"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "fixed": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniformfv(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniformiv(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "sourceBeforeFix": "GL20.glUniform1(location,v)", "sourceAfterFix": "GL20.glUniform1iv(location,v)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform1fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform1(location, v);\r\n \t}\r\n \tpublic void glUniform1fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform1(location, toFloatBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform1i (int location, int x) {\r", "fixed": " \t}\r\n \tpublic void glUniform1fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform1fv(location, v);\r\n \t}\r\n \tpublic void glUniform1fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform1fv(location, toFloatBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform1i (int location, int x) {\r", "sourceBeforeFix": "GL15.glGetBufferParameter(target,pname,params)", "sourceAfterFix": "GL15.glGetBufferParameteriv(target,pname,params)"}
{"fixCommitSHA1": "2921e7bf0d74a65fdcc71d3ce3053037d14e4d44", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "     protected void handleMapTryLock(String[] args) {\n         String key = args[1];\n        long time = (args.length > 2) ? Long.valueOf(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMap().tryLock(key);", "fixed": "     protected void handleMapTryLock(String[] args) {\n         String key = args[1];\n        long time = (args.length > 2) ? Long.parseLong(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMap().tryLock(key);", "sourceBeforeFix": "Long.valueOf(args[1])", "sourceAfterFix": "Long.parseLong(args[1])"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStream<OUT> writeAsText(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsText<OUT> format, int batchSize, OUT endTuple) {\n\t\tDataStream<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByBatches<OUT>(\n \t\t\t\tpath, format, batchSize, endTuple), null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "fixed": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStreamSink<OUT> writeAsText(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsText<OUT> format, int batchSize, OUT endTuple) {\n\t\tDataStreamSink<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByBatches<OUT>(\n \t\t\t\tpath, format, batchSize, endTuple), null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<Status> getFriendsTimeline(Paging paging) throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\",null, paging.asPostParameterList(), true));\n     }\n     /**", "fixed": "      */\n     public ResponseList<Status> getFriendsTimeline(Paging paging) throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\",null, paging.asPostParameterList(), true));\n     }\n     /**", "sourceBeforeFix": "SavedSearch.constructSavedSearches(get(getBaseURL() + \"saved_searches.json\",true))", "sourceAfterFix": "SavedSearch.createSavedSearchList(get(getBaseURL() + \"saved_searches.json\",true))"}
{"fixCommitSHA1": "6618cef776cf1c9ce67ff8ee461412110ca5ada7", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t\t\t\ttaskManagerQueryServiceGatewaysFuture.whenCompleteAsync(\n \t\t\t\t\t(Collection<Tuple2<ResourceID, String>> queryServiceGateways, Throwable throwable) -> {\n \t\t\t\t\t\tif (throwable != null) {\n\t\t\t\t\t\t\tLOG.warn(\"Requesting TaskManager's path for query services failed.\", throwable);\n \t\t\t\t\t\t} else {\n \t\t\t\t\t\t\tList<String> taskManagersToRetain = queryServiceGateways\n \t\t\t\t\t\t\t\t.stream()", "fixed": " \t\t\t\ttaskManagerQueryServiceGatewaysFuture.whenCompleteAsync(\n \t\t\t\t\t(Collection<Tuple2<ResourceID, String>> queryServiceGateways, Throwable throwable) -> {\n \t\t\t\t\t\tif (throwable != null) {\n\t\t\t\t\t\t\tLOG.debug(\"Requesting TaskManager's path for query services failed.\", throwable);\n \t\t\t\t\t\t} else {\n \t\t\t\t\t\t\tList<String> taskManagersToRetain = queryServiceGateways\n \t\t\t\t\t\t\t\t.stream()", "sourceBeforeFix": "LOG.warn(\"Requesting paths for query services failed.\",throwable)", "sourceAfterFix": "LOG.debug(\"Requesting paths for query services failed.\",throwable)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 15872, value = \"Invalid code %d\")\n     IllegalArgumentException invalidCode(int code);\n }", "fixed": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 10872, value = \"Invalid code %d\")\n     IllegalArgumentException invalidCode(int code);\n }", "sourceBeforeFix": "id=15853", "sourceAfterFix": "id=10853"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedExecEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default ExecEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedExecEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default ExecEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface CoAPEndpointBuilder\n             extends\n                 CoAPEndpointConsumerBuilder, CoAPEndpointProducerBuilder {\n         default AdvancedCoAPEndpointBuilder advanced() {", "fixed": "     \n    public interface CoAPEndpointBuilder\n             extends\n                 CoAPEndpointConsumerBuilder, CoAPEndpointProducerBuilder {\n         default AdvancedCoAPEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15841, value = \"Exception getting result from server %s: %s\")\n     String exceptionAwaitingResultFromServer(ServerIdentity server, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10841, value = \"Exception getting result from server %s: %s\")\n     String exceptionAwaitingResultFromServer(ServerIdentity server, String message);\n     /**", "sourceBeforeFix": "id=15855", "sourceAfterFix": "id=10855"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "ee9817dbd92495886965eeecd65325e09a78d5fc", "projectName": "hazelcast.hazelcast", "bugType": "Change Unary Operator\t", "problem": "                            EntryEventType eventType) {\n         final String mapName = name;\n         final MapServiceContext mapServiceContext = getMapServiceContext();\n        if (mapServiceContext.hasRegisteredListener(mapName) || eventType == NO_NEED_TO_FIRE_EVENT) {\n             return;\n         }\n         final Data oldValue = mapServiceContext.toData(valueBeforeProcess);", "fixed": "                            EntryEventType eventType) {\n         final String mapName = name;\n         final MapServiceContext mapServiceContext = getMapServiceContext();\n        if (!mapServiceContext.hasRegisteredListener(mapName) || eventType == NO_NEED_TO_FIRE_EVENT) {\n             return;\n         }\n         final Data oldValue = mapServiceContext.toData(valueBeforeProcess);", "sourceBeforeFix": "mapServiceContext.hasRegisteredListener(mapName)", "sourceAfterFix": "!mapServiceContext.hasRegisteredListener(mapName)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<Status> getPublicTimeline() throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() +\n                 \"statuses/public_timeline.json\", false));\n     }", "fixed": "      */\n     public ResponseList<Status> getPublicTimeline() throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() +\n                 \"statuses/public_timeline.json\", false));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites/\" + id+ \".json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites/\" + id+ \".json\",new PostParameter[0],true))"}
{"fixCommitSHA1": "f467d695be2ae4ee7d5c2978191e1415aef37a9e", "projectName": "netty.netty", "bugType": "Change Boolean Literal", "problem": "      * Creates a builder for new client-side {@link SslContext}.\n      */\n     public static SslContextBuilder forClient() {\n        return new SslContextBuilder(true);\n     }\n     /**", "fixed": "      * Creates a builder for new client-side {@link SslContext}.\n      */\n     public static SslContextBuilder forClient() {\n        return new SslContextBuilder(false);\n     }\n     /**", "sourceBeforeFix": "new SslContextBuilder(false)", "sourceAfterFix": "new SslContextBuilder(true)"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \t@Test\n \tpublic void testMultipleActionsPredicatesOptions_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(246);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {console.log($ctx.toStringTree(null, this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");", "fixed": " \t@Test\n \tpublic void testMultipleActionsPredicatesOptions_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(245);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {console.log($ctx.toStringTree(null, this));} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");", "sourceBeforeFix": "new StringBuilder(246)", "sourceAfterFix": "new StringBuilder(245)"}
{"fixCommitSHA1": "afa23f7192a27a30797fac848c59081b94cbe34c", "projectName": "wildfly.wildfly", "bugType": "Change Modifier", "problem": " public interface StatelessSession extends EJBObject {\n     \n    public String echo(String arg) throws RemoteException;\n     \n    public void noop() throws RemoteException;\n     \n    public ReturnData getData() throws RemoteException;\n }", "fixed": " public interface StatelessSession extends EJBObject {\n     \n    String echo(String arg) throws RemoteException;\n     \n    void noop() throws RemoteException;\n     \n    ReturnData getData() throws RemoteException;\n }", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "62bf8fd4813271c64afbb1509b31811c79246bce", "projectName": "apache.flink", "bugType": "Wrong Function Name", "problem": " \t\tresultFuture.whenComplete(\n \t\t\t(Void ignored, Throwable throwable) -> {\n \t\t\t\tif (throwable != null) {\n\t\t\t\t\tlog.debug(\"Failed to transfer file from TaskExecutor {}.\", taskManagerId, throwable);\n \t\t\t\t\tfileBlobKeys.invalidate(taskManagerId);\n \t\t\t\t\tfinal Throwable strippedThrowable = ExceptionUtils.stripCompletionException(throwable);", "fixed": " \t\tresultFuture.whenComplete(\n \t\t\t(Void ignored, Throwable throwable) -> {\n \t\t\t\tif (throwable != null) {\n\t\t\t\t\tlog.error(\"Failed to transfer file from TaskExecutor {}.\", taskManagerId, throwable);\n \t\t\t\t\tfileBlobKeys.invalidate(taskManagerId);\n \t\t\t\t\tfinal Throwable strippedThrowable = ExceptionUtils.stripCompletionException(throwable);", "sourceBeforeFix": "log.debug(\"Failed to transfer file from TaskExecutor {}.\",taskManagerId,throwable)", "sourceAfterFix": "log.error(\"Failed to transfer file from TaskExecutor {}.\",taskManagerId,throwable)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedServiceEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default ServiceEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedServiceEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default ServiceEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "28839656db6bc11561d17a66761d8592e8a67de1", "projectName": "google.closure-compiler", "bugType": "Same Function More Args", "problem": "     for (Node n : candidates) {\n       String propName = getPropName(n);\n       if (!used.contains(propName)) {\n        t.report(n, UNUSED_PRIVATE_PROPERTY);\n       }\n     }\n   }", "fixed": "     for (Node n : candidates) {\n       String propName = getPropName(n);\n       if (!used.contains(propName)) {\n        t.report(n, UNUSED_PRIVATE_PROPERTY, propName);\n       }\n     }\n   }", "sourceBeforeFix": "t.report(n,UNUSED_PRIVATE_PROPERTY)", "sourceAfterFix": "t.report(n,UNUSED_PRIVATE_PROPERTY,propName)"}
{"fixCommitSHA1": "1daccd54d2ff2ecdb21d8c60268600c37febbb70", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "       mBuf.flip();\n       for (int pId = mLeft; pId < mRight; pId ++) {\n         long startTimeMs = System.currentTimeMillis();\n        TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n         OutStream os = file.getOutStream(WriteType.MUST_CACHE);\n         for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n          mBuf.array()[0] = (byte) (k + mWorkerId);\n           os.write(mBuf.array());\n         }\n         os.close();", "fixed": "       mBuf.flip();\n       for (int pId = mLeft; pId < mRight; pId ++) {\n         long startTimeMs = System.currentTimeMillis();\n        TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n         OutStream os = file.getOutStream(WriteType.MUST_CACHE);\n         for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n          mBuf.putInt(0, k + mWorkerId);\n           os.write(mBuf.array());\n         }\n         os.close();", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "a13c4373a5e57d322b143516b493e84f14909fec", "projectName": "stanfordnlp.CoreNLP", "bugType": "Change Numeric Literal", "problem": "     List<CoreLabel> tokens = document1.get(CoreAnnotations.TokensAnnotation.class);\n    assertEquals(15, tokens.size());\n   }\n   @Test", "fixed": "     List<CoreLabel> tokens = document1.get(CoreAnnotations.TokensAnnotation.class);\n    assertEquals(13, tokens.size());\n   }\n   @Test", "sourceBeforeFix": "assertEquals(12,tokens.size())", "sourceAfterFix": "assertEquals(9,tokens.size())"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15845, value = \"Invalid rollout plan. Server group %s has a %s value of %s; must be between 0 and 100.\")\n     String invalidRolloutPlanRange(String name, String propertyName, int value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10845, value = \"Invalid rollout plan. Server group %s has a %s value of %s; must be between 0 and 100.\")\n     String invalidRolloutPlanRange(String name, String propertyName, int value);\n     /**", "sourceBeforeFix": "id=15861", "sourceAfterFix": "id=10861"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         if (isStatisticsEnabled()) {\n             if (result) {\n                 statistics.increaseCachePuts(1);\n                statistics.addPutTimeNano(System.nanoTime() - start);\n             }\n            statistics.addGetTimeNano(System.nanoTime() - start);\n             if (isHit) {\n                 statistics.increaseCacheHits(1);\n             } else {", "fixed": "         if (isStatisticsEnabled()) {\n             if (result) {\n                 statistics.increaseCachePuts(1);\n                statistics.addPutTimeNanos(System.nanoTime() - start);\n             }\n            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (isHit) {\n                 statistics.increaseCacheHits(1);\n             } else {", "sourceBeforeFix": "statistics.addRemoveTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addRemoveTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "a80c49828f8d52b70e68b8a4c80f677ca44af0af", "projectName": "netty.netty", "bugType": "Wrong Function Name", "problem": "                                 public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n                                     if (cause.getCause() instanceof SSLException) {\n                                        promise.setSuccess(null);\n                                     }\n                                 }\n                             });", "fixed": "                                 public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n                                     if (cause.getCause() instanceof SSLException) {\n                                        promise.trySuccess(null);\n                                     }\n                                 }\n                             });", "sourceBeforeFix": "promise.setSuccess(null)", "sourceAfterFix": "promise.trySuccess(null)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "4d3362aa0a967882f43185cbee3ec82339106f6e", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "                         from(\"direct:joinBrothers\").aggregator(header(TYPE_HEADER),\n                                 brothersAggregator);\n                agg.setBatchTimeout(1000L);\n                 agg.removeHeader(SURNAME_HEADER)\n                         .removeHeader(TYPE_HEADER)\n                         .to(\"mock:result\");", "fixed": "                         from(\"direct:joinBrothers\").aggregator(header(TYPE_HEADER),\n                                 brothersAggregator);\n                agg.setBatchTimeout(2000L);\n                 agg.removeHeader(SURNAME_HEADER)\n                         .removeHeader(TYPE_HEADER)\n                         .to(\"mock:result\");", "sourceBeforeFix": "agg.setBatchTimeout(1000L)", "sourceAfterFix": "agg.setBatchTimeout(2000L)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "2f880c73edb600ab92cdd580ac74f7388b5c6135", "projectName": "Alluxio.alluxio", "bugType": "Change Modifier", "problem": "     }\n   }\n  public void rename(int fileId, String dstPath) {\n     if (INACTIVE) {\n       return;\n     }", "fixed": "     }\n   }\n  public synchronized void rename(int fileId, String dstPath) {\n     if (INACTIVE) {\n       return;\n     }", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "dea7ef0e0aae5ba4aef9d104cd10af986be9fc53", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "  * Please use the CamelFilterWrapper instead of using this classs\n  */\n @Deprecated \nclass CamelMultipartFilter extends CamelFilterWrapper {\n     public CamelMultipartFilter(Filter wrapped) {\n         super(wrapped);", "fixed": "  * Please use the CamelFilterWrapper instead of using this classs\n  */\n @Deprecated \npublic class CamelMultipartFilter extends CamelFilterWrapper {\n     public CamelMultipartFilter(Filter wrapped) {\n         super(wrapped);", "sourceBeforeFix": "0", "sourceAfterFix": "1"}
{"fixCommitSHA1": "06f8fe87421493280f6602aeb73153e677844542", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t\tfor (int i = 0; i < noOfTasks; i++) {\n \t\t\tfor (int j = 0; j < 2 + i; j++) {\n\t\t\t\tfinal String part = new Path(bucketPath, \"part-\" + i + '-' + j).toString();\n \t\t\t\tAssert.assertTrue(paths.contains(part));\n \t\t\t\tpaths.remove(part);\n \t\t\t}", "fixed": " \t\tfor (int i = 0; i < noOfTasks; i++) {\n \t\t\tfor (int j = 0; j < 2 + i; j++) {\n\t\t\t\tfinal String part = new Path(bucketPath, \"part-\" + i + '-' + j).getPath();\n \t\t\t\tAssert.assertTrue(paths.contains(part));\n \t\t\t\tpaths.remove(part);\n \t\t\t}", "sourceBeforeFix": "new Path(bucketPath,\"part-\" + i + '-'+ j).toString()", "sourceAfterFix": "new Path(bucketPath,\"part-\" + i + '-'+ j).getPath()"}
{"fixCommitSHA1": "72d409c6065de1209ad00289f147b0f65accef16", "projectName": "apache.storm", "bugType": "Change Identifier Used", "problem": "                 Integer workerCount = distribution.get(executorCount);\n                 if (workerCount != null && workerCount > 0) {\n                     slots.add(entry.getKey());\n                    executorCount--;\n                     distribution.put(executorCount, workerCount);\n                 }\n             }", "fixed": "                 Integer workerCount = distribution.get(executorCount);\n                 if (workerCount != null && workerCount > 0) {\n                     slots.add(entry.getKey());\n                    workerCount--;\n                     distribution.put(executorCount, workerCount);\n                 }\n             }", "sourceBeforeFix": "executorCount--", "sourceAfterFix": "workerCount--"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15853, value = \"Unexpected initial path key %s\")\n     IllegalStateException unexpectedInitialPathKey(String key);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10853, value = \"Unexpected initial path key %s\")\n     IllegalStateException unexpectedInitialPathKey(String key);\n     /**", "sourceBeforeFix": "id=15836", "sourceAfterFix": "id=10836"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e9f14f107361d9cef5582c2d2a8e657691e76ec6", "projectName": "apache.hbase", "bugType": "Wrong Function Name", "problem": "     Mockito.when(mockRegionScanner.getRegionInfo()).thenReturn(mockRegionInfo);\n     Mockito.when(mockRS.getRegion((RegionSpecifier)Mockito.any())).thenReturn(mockRegion);\n     Mockito.when(mockRegion.getRegionInfo()).thenReturn(mockRegionInfo);\n    Mockito.when(mockRegionInfo.isMetaRegion()).thenReturn(true);\n     qosFunction.setRegionServer(mockRS);\n     assertTrue (qosFunction.apply(rpcRequest) == HConstants.HIGH_QOS);\n    Mockito.when(mockRegionInfo.isMetaRegion()).thenReturn(false);\n     assertTrue (qosFunction.apply(rpcRequest) == HConstants.NORMAL_QOS);\n   }", "fixed": "     Mockito.when(mockRegionScanner.getRegionInfo()).thenReturn(mockRegionInfo);\n     Mockito.when(mockRS.getRegion((RegionSpecifier)Mockito.any())).thenReturn(mockRegion);\n     Mockito.when(mockRegion.getRegionInfo()).thenReturn(mockRegionInfo);\n    Mockito.when(mockRegionInfo.isMetaTable()).thenReturn(true);\n     qosFunction.setRegionServer(mockRS);\n     assertTrue (qosFunction.apply(rpcRequest) == HConstants.HIGH_QOS);\n    Mockito.when(mockRegionInfo.isMetaTable()).thenReturn(false);\n     assertTrue (qosFunction.apply(rpcRequest) == HConstants.NORMAL_QOS);\n   }", "sourceBeforeFix": "mockRegionInfo.isMetaRegion()", "sourceAfterFix": "mockRegionInfo.isMetaTable()"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsCsv(String path, int batchSize) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), batchSize, null);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsCsv(String path, int batchSize) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), batchSize, null);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15858, value = \"No deployment content with hash %s is available in the deployment content repository.\")\n     String noDeploymentContentWithHash(String hash);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10858, value = \"No deployment content with hash %s is available in the deployment content repository.\")\n     String noDeploymentContentWithHash(String hash);\n     /**", "sourceBeforeFix": "id=15855", "sourceAfterFix": "id=10855"}
{"fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "projectName": "Alluxio.alluxio", "bugType": "Change Operand ", "problem": "       if (mWrite) {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n           OutputStream os = mHdfsFs.create(new Path(filePath));\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n             mBuf.putInt(0, k + mWorkerId);", "fixed": "       if (mWrite) {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           OutputStream os = mHdfsFs.create(new Path(filePath));\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n             mBuf.putInt(0, k + mWorkerId);", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "e2119d33293008fcc876f5fcd58ede2993eb24d6", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnBean(ConnectionFactory.class)\n\t@ConditionalOnEnablednHealthIndicator(\"jms\")\n \tpublic static class JmsHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<JmsHealthIndicator, ConnectionFactory> {", "fixed": " \t@Configuration\n \t@ConditionalOnBean(ConnectionFactory.class)\n\t@ConditionalOnEnabledHealthIndicator(\"jms\")\n \tpublic static class JmsHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<JmsHealthIndicator, ConnectionFactory> {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"rabbit\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"rabbit\")"}
{"fixCommitSHA1": "3d46b36b001130b80769714ad3c2856db14603d2", "projectName": "JakeWharton.NineOldAndroids", "bugType": "Less Specific If", "problem": "      */\n     public static AnimatorProxy wrap(View view) {\n         AnimatorProxy proxy = PROXIES.get(view);\n        if (proxy == null) {\n             proxy = new AnimatorProxy(view);\n             PROXIES.put(view, proxy);\n         }", "fixed": "      */\n     public static AnimatorProxy wrap(View view) {\n         AnimatorProxy proxy = PROXIES.get(view);\n        if (proxy == null || proxy != view.getAnimation()) {\n             proxy = new AnimatorProxy(view);\n             PROXIES.put(view, proxy);\n         }", "sourceBeforeFix": "proxy == null", "sourceAfterFix": "proxy == null || proxy != view.getAnimation()"}
{"fixCommitSHA1": "f60a9cfe8b1b27d5ea25095bdfc690001da9f4d6", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": " \n public class FilterSetTest {\n    private CSVFilter filter;\n     @Before\n     public void setUp() {\n        filter = new CSVFilter(\"\");\n     }\n     @Test", "fixed": " \n public class FilterSetTest {\n    private CsvFilter filter;\n     @Before\n     public void setUp() {\n        filter = new CsvFilter(\"\");\n     }\n     @Test", "sourceBeforeFix": "private CSVFilter filter; ", "sourceAfterFix": "private CsvFilter filter; "}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15854, value = \"Null stream at index %d\")\n     String nullStream(int index);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10854, value = \"Null stream at index %d\")\n     String nullStream(int index);\n     /**", "sourceBeforeFix": "id=15841", "sourceAfterFix": "id=10841"}
{"fixCommitSHA1": "dcc24b58f7a426eed6d81d0c9f85367e12810efa", "projectName": "facebook.presto", "bugType": "Change Unary Operator\t", "problem": "         QualifiedTableName remoteTableName = createQualifiedTableName(stateMachine.getSession(), statement.getRemote());\n         Optional<TableHandle> remoteTableHandle = metadataManager.getTableHandle(remoteTableName);\n        checkState(!remoteTableHandle.isPresent(), \"Table %s does not exist\", remoteTableName);\n         Optional<String> remoteConnectorId = metadataManager.getConnectorId(remoteTableHandle.get());\n         Preconditions.checkArgument(remoteConnectorId.isPresent(), \"Table %s can not be aliased\", remoteTableName);", "fixed": "         QualifiedTableName remoteTableName = createQualifiedTableName(stateMachine.getSession(), statement.getRemote());\n         Optional<TableHandle> remoteTableHandle = metadataManager.getTableHandle(remoteTableName);\n        checkState(remoteTableHandle.isPresent(), \"Table %s does not exist\", remoteTableName);\n         Optional<String> remoteConnectorId = metadataManager.getConnectorId(remoteTableHandle.get());\n         Preconditions.checkArgument(remoteConnectorId.isPresent(), \"Table %s can not be aliased\", remoteTableName);", "sourceBeforeFix": "!remoteTableHandle.isPresent()", "sourceAfterFix": "remoteTableHandle.isPresent()"}
{"fixCommitSHA1": "9e6f96dbfc8bf1ae1ffbe0115f53f1de0fc86ffc", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "         }\n         doRemoveRecord(key, source);\n         if (isEventsEnabled()) {\n            publishEvent(createCacheExpiredEvent(key, toEventData(record), CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                  origin, IGNORE_COMPLETION));\n         }\n         return null;", "fixed": "         }\n         doRemoveRecord(key, source);\n         if (isEventsEnabled()) {\n            publishEvent(createCacheExpiredEvent(toEventData(key), toEventData(record),\n                                                 CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                  origin, IGNORE_COMPLETION));\n         }\n         return null;", "sourceBeforeFix": "toHeapData(key)", "sourceAfterFix": "toEventData(key)"}
{"fixCommitSHA1": "bc53fc00817adf77d0e25d07ae0aaea0f16dddd7", "projectName": "Alluxio.alluxio", "bugType": "Same Function More Args", "problem": "    * @return A mapping from storage tier alias to blocks\n    */\n   public Map<String, List<Long>> getBlockList() {\n    Preconditions.checkNotNull(mBlockIdsOnTiers);\n     return mBlockIdsOnTiers;\n   }", "fixed": "    * @return A mapping from storage tier alias to blocks\n    */\n   public Map<String, List<Long>> getBlockList() {\n    Preconditions.checkNotNull(mBlockIdsOnTiers,\"mBlockIdsOnTiers\");\n     return mBlockIdsOnTiers;\n   }", "sourceBeforeFix": "Preconditions.checkNotNull(mBlockIdsOnTiers)", "sourceAfterFix": "Preconditions.checkNotNull(mBlockIdsOnTiers,\"mBlockIdsOnTiers\")"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15833, value = \"%s is missing %s: %s\")\n     String requiredChildIsMissing(String parent, String child, String parentSpec);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10833, value = \"%s is missing %s: %s\")\n     String requiredChildIsMissing(String parent, String child, String parentSpec);\n     /**", "sourceBeforeFix": "id=15830", "sourceAfterFix": "id=10830"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15840, value = \"Interrupted waiting for result from server %s\")\n     String interruptedAwaitingResultFromServer(ServerIdentity server);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10840, value = \"Interrupted waiting for result from server %s\")\n     String interruptedAwaitingResultFromServer(ServerIdentity server);\n     /**", "sourceBeforeFix": "id=15854", "sourceAfterFix": "id=10854"}
{"fixCommitSHA1": "b87311df5630fab6a5a5f57a056511f4c09eaab1", "projectName": "apache.hive", "bugType": "Change Identifier Used", "problem": "  */\n public class PartitionColumnsSeparator extends Transform {\n  private static final Log LOG = LogFactory.getLog(PointLookupOptimizer.class);\n   private static final String IN_UDF =\n     GenericUDFIn.class.getAnnotation(Description.class).name();\n   private static final String STRUCT_UDF =", "fixed": "  */\n public class PartitionColumnsSeparator extends Transform {\n  private static final Log LOG = LogFactory.getLog(PartitionColumnsSeparator.class);\n   private static final String IN_UDF =\n     GenericUDFIn.class.getAnnotation(Description.class).name();\n   private static final String STRUCT_UDF =", "sourceBeforeFix": "PointLookupOptimizer.class", "sourceAfterFix": "PartitionColumnsSeparator.class"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15840, value = \"Interrupted waiting for result from server %s\")\n     String interruptedAwaitingResultFromServer(ServerIdentity server);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10840, value = \"Interrupted waiting for result from server %s\")\n     String interruptedAwaitingResultFromServer(ServerIdentity server);\n     /**", "sourceBeforeFix": "id=15836", "sourceAfterFix": "id=10836"}
{"fixCommitSHA1": "783ce801bf1c82eb4cf2e55e46b15d9ef85f4349", "projectName": "pardom.ActiveAndroid", "bugType": "Change Identifier Used", "problem": " \t\tnew Delete().from(type).where(\"Id=?\", id).execute();\n \t}\n\tpublic static <T extends Model> T load(Class<? extends Model> type, long id) {\n \t\treturn new Select().from(type).where(\"Id=?\", id).executeSingle();\n \t}", "fixed": " \t\tnew Delete().from(type).where(\"Id=?\", id).execute();\n \t}\n\tpublic static <T extends Model> T load(Class<T> type, long id) {\n \t\treturn new Select().from(type).where(\"Id=?\", id).executeSingle();\n \t}", "sourceBeforeFix": "E extends Model", "sourceAfterFix": "T extends Model"}
{"fixCommitSHA1": "55ed50c4975cf694828d46ee9ca32ce72a9ef913", "projectName": "clojure.clojure", "bugType": "Wrong Function Name", "problem": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 17:\r\n\t\t\treturn invoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "fixed": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 17:\r\n\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "sourceBeforeFix": "invoke(args.first(),(args=args.rest()).first(),args.rest())", "sourceAfterFix": "doInvoke(args.first(),(args=args.rest()).first(),args.rest())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<Status> getHomeTimeline(Paging paging) throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/home_timeline.json\", null, paging.asPostParameterList(), true));\n     }\n     /**", "fixed": "      */\n     public ResponseList<Status> getHomeTimeline(Paging paging) throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/home_timeline.json\", null, paging.asPostParameterList(), true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/home_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/home_timeline.json\",true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface HazelcastSetEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedHazelcastSetEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface HazelcastSetEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedHazelcastSetEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "0cb756acf8ee44c28bee8b9ea626e2a65cee5880", "projectName": "google.guava", "bugType": "Change Identifier Used", "problem": "     ByteBuffer bigEndian = ByteBuffer.wrap(bytes).order(ByteOrder.BIG_ENDIAN);\n     assertEquals(\n         hashFunction.newHasher().putBytes(littleEndian).hash(),\n        hashFunction.newHasher().putBytes(littleEndian).hash());\n     assertEquals(ByteOrder.LITTLE_ENDIAN, littleEndian.order());\n    assertEquals(ByteOrder.BIG_ENDIAN, littleEndian.order());\n   }\n   static void assertHashBytesThrowsCorrectExceptions(HashFunction hashFunction) {", "fixed": "     ByteBuffer bigEndian = ByteBuffer.wrap(bytes).order(ByteOrder.BIG_ENDIAN);\n     assertEquals(\n         hashFunction.newHasher().putBytes(littleEndian).hash(),\n        hashFunction.newHasher().putBytes(bigEndian).hash());\n     assertEquals(ByteOrder.LITTLE_ENDIAN, littleEndian.order());\n    assertEquals(ByteOrder.BIG_ENDIAN, bigEndian.order());\n   }\n   static void assertHashBytesThrowsCorrectExceptions(HashFunction hashFunction) {", "sourceBeforeFix": "hashFunction.hashBytes(littleEndian)", "sourceAfterFix": "hashFunction.hashBytes(bigEndian)"}
{"fixCommitSHA1": "d9762ac9bd5c578bc9b975dd1233cfea917134b2", "projectName": "druid-io.druid", "bugType": "Change Identifier Used", "problem": "     log.info(\"Stopping job\");\n     for (final Map.Entry<Long, Sink> entry : getSinks().entrySet()) {\n      flushAfterDuration(entry.getKey(), entry.getValue());\n     }\n     shutdownExecutors();", "fixed": "     log.info(\"Stopping job\");\n     for (final Map.Entry<Long, Sink> entry : getSinks().entrySet()) {\n      abandonSegment(entry.getKey(), entry.getValue());\n     }\n     shutdownExecutors();", "sourceBeforeFix": "flushAfterDuration(entry.getKey(),entry.getValue())", "sourceAfterFix": "abandonSegment(entry.getKey(),entry.getValue())"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15865, value = \"Invalid content declaration\")\n     String invalidContentDeclaration();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10865, value = \"Invalid content declaration\")\n     String invalidContentDeclaration();\n     /**", "sourceBeforeFix": "id=15848", "sourceAfterFix": "id=10848"}
{"fixCommitSHA1": "864435a71cd9e8b0dec4150284ee43372167b091", "projectName": "google.guava", "bugType": "Change Identifier Used", "problem": "     ticker.advance(16000000);\n     stopwatch.start();\n    assertEquals(9, stopwatch.elapsedMillis());\n     ticker.advance(25000000);\n    assertEquals(34, stopwatch.elapsedMillis());\n     stopwatch.stop();\n     ticker.advance(36000000);\n    assertEquals(34, stopwatch.elapsedMillis());\n   }\n   @GwtIncompatible(\"String.format()\")", "fixed": "     ticker.advance(16000000);\n     stopwatch.start();\n    assertEquals(9, stopwatch.elapsed(MILLISECONDS));\n     ticker.advance(25000000);\n    assertEquals(34, stopwatch.elapsed(MILLISECONDS));\n     stopwatch.stop();\n     ticker.advance(36000000);\n    assertEquals(34, stopwatch.elapsed(MILLISECONDS));\n   }\n   @GwtIncompatible(\"String.format()\")", "sourceBeforeFix": "stopwatch.elapsedMillis()", "sourceAfterFix": "stopwatch.elapsed(MILLISECONDS)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "bf98dcad6cd2048935d2fed2847ce24622cc418a", "projectName": "alibaba.druid", "bugType": "Change Boolean Literal", "problem": "         lock.writeLock().lock();\r\n         try {\r\n             if (whiteList == null) {\r\n                whiteList = new LinkedHashMap<String, Object>(whileListMaxSize, 0.75f, true);\r\n             }\r\n             whiteList.put(sql, PRESENT);\r", "fixed": "         lock.writeLock().lock();\r\n         try {\r\n             if (whiteList == null) {\r\n                whiteList = new LinkedHashMap<String, Object>(whileListMaxSize, 0.75f, false);\r\n             }\r\n             whiteList.put(sql, PRESENT);\r", "sourceBeforeFix": "new LinkedHashMap<String,Object>(whileListMaxSize,0.75f,true)", "sourceAfterFix": "new LinkedHashMap<String,Object>(whileListMaxSize,0.75f,false)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15847, value = \"Interrupted waiting for result from host %s\")\n     String interruptedAwaitingResultFromHost(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10847, value = \"Interrupted waiting for result from host %s\")\n     String interruptedAwaitingResultFromHost(String name);\n     /**", "sourceBeforeFix": "id=15832", "sourceAfterFix": "id=10832"}
{"fixCommitSHA1": "d2b19965df52e66385a2d7146887a44cea50330a", "projectName": "google.closure-compiler", "bugType": "Wrong Function Name", "problem": "       }\n     }\n    logger.info(sb.toString());\n   }", "fixed": "       }\n     }\n    logger.fine(sb.toString());\n   }", "sourceBeforeFix": "logger.info(\"Aliasing common strings\")", "sourceAfterFix": "logger.fine(\"Aliasing common strings\")"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<Status> getFriendsTimeline(Paging paging) throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\",null, paging.asPostParameterList(), true));\n     }\n     /**", "fixed": "      */\n     public ResponseList<Status> getFriendsTimeline(Paging paging) throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\",null, paging.asPostParameterList(), true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\",true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "51271a02806489a2e2b5539475eb2131fd29b77d", "projectName": "google.closure-compiler", "bugType": "Change Caller in Function Call", "problem": "   public void process(Node externs, Node root) {\n     NodeTraversal.traverse(compiler, root, this);\n    GatherGettersAndSetterProperties.update(compiler, externs, root);\n   }\n   @Override", "fixed": "   public void process(Node externs, Node root) {\n     NodeTraversal.traverse(compiler, root, this);\n    GatherGetterAndSetterProperties.update(compiler, externs, root);\n   }\n   @Override", "sourceBeforeFix": "GatherGettersAndSetterProperties.update(compiler,externs,root)", "sourceAfterFix": "GatherGetterAndSetterProperties.update(compiler,externs,root)"}
{"fixCommitSHA1": "0d35621b5c32f5d64ba2056c143d4bc351615c81", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    */\n   private transient Predicate<JSType> validator;\n  \n  private List<PropertyContinuation> propertyContinuations = null;\n   /**\n    * Template types defined on a named, not yet resolved type, or {@code null} if none. These are", "fixed": "    */\n   private transient Predicate<JSType> validator;\n  \n  private transient List<PropertyContinuation> propertyContinuations = null;\n   /**\n    * Template types defined on a named, not yet resolved type, or {@code null} if none. These are", "sourceBeforeFix": "2", "sourceAfterFix": "130"}
{"fixCommitSHA1": "203b3e338e1941cfee5df5a431cd82e44d2c1a66", "projectName": "google.guava", "bugType": "Change Identifier Used", "problem": "   }\n   private static final SortedMap<Integer, Integer> SORTED_EMPTY = Maps.newTreeMap();\n  private static final SortedMap<Integer, Integer> SORTED_SINGLETON =\n       ImmutableSortedMap.of(1, 2);\n   public void testMapDifferenceOfSortedMapIsSorted() {", "fixed": "   }\n   private static final SortedMap<Integer, Integer> SORTED_EMPTY = Maps.newTreeMap();\n  private static final ImmutableSortedMap<Integer, Integer> SORTED_SINGLETON =\n       ImmutableSortedMap.of(1, 2);\n   public void testMapDifferenceOfSortedMapIsSorted() {", "sourceBeforeFix": "SortedMap<Integer,Integer>", "sourceAfterFix": "ImmutableSortedMap<Integer,Integer>"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15868, value = \"Deployment %s is already started\")\n     String deploymentAlreadyStarted(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10868, value = \"Deployment %s is already started\")\n     String deploymentAlreadyStarted(String name);\n     /**", "sourceBeforeFix": "id=15871", "sourceAfterFix": "id=10871"}
{"fixCommitSHA1": "2798f6edf82b64780fd846aaa5b860185c87f915", "projectName": "libgdx.libgdx", "bugType": "Change Numeric Literal", "problem": " \t\tkoala.stateTime += deltaTime;\r\n\t\tif ((Gdx.input.isKeyPressed(Keys.SPACE) || isTouched(0.75f, 1)) && koala.grounded) {\r\n \t\t\tkoala.velocity.y += Koala.JUMP_VELOCITY;\r\n \t\t\tkoala.state = Koala.State.Jumping;\r\n \t\t\tkoala.grounded = false;\r", "fixed": " \t\tkoala.stateTime += deltaTime;\r\n\t\tif ((Gdx.input.isKeyPressed(Keys.SPACE) || isTouched(0.5f, 1)) && koala.grounded) {\r\n \t\t\tkoala.velocity.y += Koala.JUMP_VELOCITY;\r\n \t\t\tkoala.state = Koala.State.Jumping;\r\n \t\t\tkoala.grounded = false;\r", "sourceBeforeFix": "isTouched(0.75f,1)", "sourceAfterFix": "isTouched(0.5f,1)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedFreemarkerEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default FreemarkerEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedFreemarkerEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default FreemarkerEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "4bf80610fd2a67d952312e808edebdb74ebc26bb", "projectName": "Graylog2.graylog2-server", "bugType": "Change Numeric Literal", "problem": "         final PaginatedList<TestDTO> page2 = dbService.findPaginatedWithQueryFilterAndSort(DBQuery.empty(), filter, DBSort.asc(\"title\"), 2, 2);\n         assertThat(page2.pagination().getCount()).isEqualTo(2);\n        assertThat(page2.pagination().getGlobalTotal()).isEqualTo(7);\n         assertThat(page2.delegate())\n                 .extracting(\"title\")\n                 .containsExactly(\"hello4\", \"hello5\");", "fixed": "         final PaginatedList<TestDTO> page2 = dbService.findPaginatedWithQueryFilterAndSort(DBQuery.empty(), filter, DBSort.asc(\"title\"), 2, 2);\n         assertThat(page2.pagination().getCount()).isEqualTo(2);\n        assertThat(page2.pagination().getGlobalTotal()).isEqualTo(5);\n         assertThat(page2.delegate())\n                 .extracting(\"title\")\n                 .containsExactly(\"hello4\", \"hello5\");", "sourceBeforeFix": "assertThat(page1reverse.pagination().getGlobalTotal()).isEqualTo(7)", "sourceAfterFix": "assertThat(page1reverse.pagination().getGlobalTotal()).isEqualTo(5)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": " };\n   \n  private final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler", "fixed": " };\n   \n  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "a421ca3133ddf727a147e87455a5511444d8d4bb", "projectName": "google.auto", "bugType": "Change Identifier Used", "problem": "           if (supertypeMethod.getModifiers().contains(Modifier.ABSTRACT)) {\n             ExecutableType methodType = Elements2.getExecutableElementAsMemberOf(\n                 types, supertypeMethod, extendingType);\n            implemetationMethodDescriptors.add(new ImplemetationMethodDescriptor.Builder()\n                 .name(supertypeMethod.getSimpleName().toString())\n                 .returnType(getAnnotatedType(element).getQualifiedName().toString())\n                 .publicMethod()", "fixed": "           if (supertypeMethod.getModifiers().contains(Modifier.ABSTRACT)) {\n             ExecutableType methodType = Elements2.getExecutableElementAsMemberOf(\n                 types, supertypeMethod, extendingType);\n            implementationMethodDescriptors.add(new ImplementationMethodDescriptor.Builder()\n                 .name(supertypeMethod.getSimpleName().toString())\n                 .returnType(getAnnotatedType(element).getQualifiedName().toString())\n                 .publicMethod()", "sourceBeforeFix": "implemetationMethodDescriptors.build()", "sourceAfterFix": "implementationMethodDescriptors.build()"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "fixed": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniformfv(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniformiv(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "sourceBeforeFix": "GL20.glUniform3(location,toIntBuffer(v,offset,count * 3))", "sourceAfterFix": "GL20.glUniform3iv(location,toIntBuffer(v,offset,count * 3))"}
{"fixCommitSHA1": "64dff91895f9df55fe3a07217a333efa4d37d92a", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "     try {\n       jarFile = new JarInputStream(new FileInputStream(jarFileName));\n     } catch (IOException ioEx) {\n      LOG.error(\"Failed to look for classes in \" + jarFileName + \": \" + ioEx);\n       throw ioEx;\n     }", "fixed": "     try {\n       jarFile = new JarInputStream(new FileInputStream(jarFileName));\n     } catch (IOException ioEx) {\n      LOG.warn(\"Failed to look for classes in \" + jarFileName + \": \" + ioEx);\n       throw ioEx;\n     }", "sourceBeforeFix": "LOG.error(\"Failed to look for classes in \" + jarFileName + \": \"+ ioEx)", "sourceAfterFix": "LOG.warn(\"Failed to look for classes in \" + jarFileName + \": \"+ ioEx)"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleAlternativesWithCommonLabel_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(561);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "fixed": " \tpublic void testMultipleAlternativesWithCommonLabel_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(560);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "sourceBeforeFix": "new StringBuilder(239)", "sourceAfterFix": "new StringBuilder(238)"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n \t * @return True, if the data type supports the creation of a normalized key for comparison, false otherwise.\n \t */\n\tpublic boolean supportsNormalizedKey();\n \t/**\n \t * Check whether this comparator supports to serialize the record in a format that replaces its keys by a normalized", "fixed": " \t * \n \t * @return True, if the data type supports the creation of a normalized key for comparison, false otherwise.\n \t */\n\tpublic abstract boolean supportsNormalizedKey();\n \t/**\n \t * Check whether this comparator supports to serialize the record in a format that replaces its keys by a normalized", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface ChunkEndpointBuilder\n            extends\n                EndpointProducerBuilder {\n         default AdvancedChunkEndpointBuilder advanced() {\n             return (AdvancedChunkEndpointBuilder) this;\n         }", "fixed": "     \n    public interface ChunkEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedChunkEndpointBuilder advanced() {\n             return (AdvancedChunkEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "244d0b64b446dd9a10b097d696b49894d4058a9e", "projectName": "Alluxio.alluxio", "bugType": "Change Modifier", "problem": " \npublic class ShellUtils {\n   private static final Logger LOG = LoggerFactory.getLogger(Constants.LOGGER_TYPE);\n   ", "fixed": " \npublic final class ShellUtils {\n   private static final Logger LOG = LoggerFactory.getLogger(Constants.LOGGER_TYPE);\n   ", "sourceBeforeFix": "1", "sourceAfterFix": "17"}
{"fixCommitSHA1": "3dddcc4cdf4a74ddbd4607c6aaee5bdd8ac46c27", "projectName": "gephi.gephi", "bugType": "Change Modifier", "problem": "     }\n     @Override\n    public void updateLOD() {\n         Iterator<NodeModel> iterator = octree.getNodeIterator();\n         for (; iterator.hasNext();) {\n             NodeModel obj = iterator.next();", "fixed": "     }\n     @Override\n    public synchronized void updateLOD() {\n         Iterator<NodeModel> iterator = octree.getNodeIterator();\n         for (; iterator.hasNext();) {\n             NodeModel obj = iterator.next();", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": " };\n   \n  private final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler", "fixed": " };\n   \n  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "projectName": "Alluxio.alluxio", "bugType": "Change Operand ", "problem": "       if (mWrite) {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n           OutputStream os = mHdfsFs.create(new Path(filePath));\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n             mBuf.putInt(0, k + mWorkerId);", "fixed": "       if (mWrite) {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           OutputStream os = mHdfsFs.create(new Path(filePath));\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n             mBuf.putInt(0, k + mWorkerId);", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "pId + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "c888434580c601ac9c4734e19d8eefac63518031", "projectName": "swagger-api.swagger-codegen", "bugType": "Change Identifier Used", "problem": "             + (StringUtils.isEmpty(modelPackage) ? \"\" : (modelPackage + \"/\")) + dataType;\n     }\n     private String getJSDocTypeWithBraces(CodegenModel cm, CodegenProperty cp) {\n         return \"{\" + getJSDocType(cm, cp) + \"}\";\n     }\n     private String getJSDocType(CodegenModel cm, CodegenProperty cp) {\n         if (Boolean.TRUE.equals(cp.isContainer)) {", "fixed": "             + (StringUtils.isEmpty(modelPackage) ? \"\" : (modelPackage + \"/\")) + dataType;\n     }\n    \n     private String getJSDocType(CodegenModel cm, CodegenProperty cp) {\n         if (Boolean.TRUE.equals(cp.isContainer)) {", "sourceBeforeFix": "getJSDocTypeWithBraces(cm,var)", "sourceAfterFix": "getJSDocType(cm,var)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15860, value = \"No deployment with name %s found\")\n     String noDeploymentContentWithName(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10860, value = \"No deployment with name %s found\")\n     String noDeploymentContentWithName(String name);\n     /**", "sourceBeforeFix": "id=15835", "sourceAfterFix": "id=10835"}
{"fixCommitSHA1": "b7e092e821021b7c0dbd91eacfe369181bfa28b8", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t\tRSocketWebSocketNettyRouteProvider rSocketWebsocketRouteProvider(RSocketProperties properties,\n \t\t\t\tRSocketMessageHandler messageHandler) {\n \t\t\treturn new RSocketWebSocketNettyRouteProvider(properties.getServer().getMappingPath(),\n\t\t\t\t\tmessageHandler.serverAcceptor());\n \t\t}\n \t}", "fixed": " \t\tRSocketWebSocketNettyRouteProvider rSocketWebsocketRouteProvider(RSocketProperties properties,\n \t\t\t\tRSocketMessageHandler messageHandler) {\n \t\t\treturn new RSocketWebSocketNettyRouteProvider(properties.getServer().getMappingPath(),\n\t\t\t\t\tmessageHandler.serverResponder());\n \t\t}\n \t}", "sourceBeforeFix": "rSocketMessageHandler.serverAcceptor()", "sourceAfterFix": "rSocketMessageHandler.serverResponder()"}
{"fixCommitSHA1": "700b61dacfe5ed709d08f0fe196563dc55481398", "projectName": "Graylog2.graylog2-server", "bugType": "Change Identifier Used", "problem": "     }\n     public boolean aliasExists(String alias) {\n        return c.admin().indices().existsAliases(new IndicesGetAliasesRequest(alias)).actionGet().exists();\n     }\n     public String aliasTarget(String alias) {", "fixed": "     }\n     public boolean aliasExists(String alias) {\n        return c.admin().indices().aliasesExist(new IndicesGetAliasesRequest(alias)).actionGet().exists();\n     }\n     public String aliasTarget(String alias) {", "sourceBeforeFix": "c.admin().indices().existsAliases(new IndicesGetAliasesRequest(alias))", "sourceAfterFix": "c.admin().indices().aliasesExist(new IndicesGetAliasesRequest(alias))"}
{"fixCommitSHA1": "5b13fe70c25812157a1e4432135eb9639e72bc6a", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t\tfinal Sink output = new Sink(\"output.json\").withInputs(projection);\n \t\texpectedPlan.setSinks(output);\n\t\tassertEquals(expectedPlan, actualPlan);\n \t}\n }", "fixed": " \t\tfinal Sink output = new Sink(\"output.json\").withInputs(projection);\n \t\texpectedPlan.setSinks(output);\n\t\tassertPlanEquals(expectedPlan, actualPlan);\n \t}\n }", "sourceBeforeFix": "assertEquals(expectedPlan,actualPlan)", "sourceAfterFix": "assertPlanEquals(expectedPlan,actualPlan)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform2iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toIntBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform3f (int location, float x, float y, float z) {\r", "fixed": " \t}\r\n \tpublic void glUniform2iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform2iv(location, v);\r\n \t}\r\n \tpublic void glUniform2iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform2iv(location, toIntBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform3f (int location, float x, float y, float z) {\r", "sourceBeforeFix": "GL15.glGetBufferParameter(target,pname,params)", "sourceAfterFix": "GL15.glGetBufferParameteriv(target,pname,params)"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n \t * @return A deep copy of this comparator instance.\n \t */\n\tpublic TypeComparator<T> duplicate();\n }", "fixed": " \t * \n \t * @return A deep copy of this comparator instance.\n \t */\n\tpublic abstract TypeComparator<T> duplicate();\n }", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "a63faf44e1b103a49d25a15c720fc5940ae9fc07", "projectName": "square.retrofit", "bugType": "Change Identifier Used", "problem": "     assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResultClass = new TypeToken<Maybe<Result<String>>>() {}.getType();\n    assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResultClass = new TypeToken<Flowable<Result<String>>>() {}.getType();\n    assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oResultWildcard = new TypeToken<Observable<Result<? extends String>>>() {}.getType();", "fixed": "     assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResultClass = new TypeToken<Maybe<Result<String>>>() {}.getType();\n    assertThat(factory.get(mResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResultClass = new TypeToken<Flowable<Result<String>>>() {}.getType();\n    assertThat(factory.get(fResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oResultWildcard = new TypeToken<Observable<Result<? extends String>>>() {}.getType();", "sourceBeforeFix": "factory.get(sBodyGeneric,NO_ANNOTATIONS,retrofit)", "sourceAfterFix": "factory.get(fBodyGeneric,NO_ANNOTATIONS,retrofit)"}
{"fixCommitSHA1": "6d58e63eb085ef21adf9170fbc3e9eb93db0c621", "projectName": "apache.storm", "bugType": "Change Identifier Used", "problem": "         private TreeSet<ObjectResources> getSortedNodesFor(String rackId) {\n             return cachedNodes.computeIfAbsent(rackId,\n                (rid) -> sortNodes(rackIdToNodes.get(rid), exec, td, rid, perNodeScheduledCount));\n         }\n         @Override", "fixed": "         private TreeSet<ObjectResources> getSortedNodesFor(String rackId) {\n             return cachedNodes.computeIfAbsent(rackId,\n                (rid) -> sortNodes(rackIdToNodes.getOrDefault(rid, Collections.emptyList()), exec, td, rid, perNodeScheduledCount));\n         }\n         @Override", "sourceBeforeFix": "rackIdToNodes.get(rid)", "sourceAfterFix": "rackIdToNodes.getOrDefault(rid,Collections.emptyList())"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform2iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toIntBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform3f (int location, float x, float y, float z) {\r", "fixed": " \t}\r\n \tpublic void glUniform2iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform2iv(location, v);\r\n \t}\r\n \tpublic void glUniform2iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform2iv(location, toIntBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform3f (int location, float x, float y, float z) {\r", "sourceBeforeFix": "EXTFramebufferObject.glGetFramebufferAttachmentParameterEXT(target,attachment,pname,params)", "sourceAfterFix": "EXTFramebufferObject.glGetFramebufferAttachmentParameterivEXT(target,attachment,pname,params)"}
{"fixCommitSHA1": "0c4f7988dc8c947eb7bda3afa8c58ace04d4d1d8", "projectName": "apache.flink", "bugType": "Change Numeric Literal", "problem": " \t\t\t\t\tbreak;\n \t\t\t\t} else {\n\t\t\t\t\tThread.sleep(500);\n \t\t\t\t}\n \t\t\t}\n\t\t\tassertTrue(\"Producer thread is not blocked: \" + Arrays.toString(ASYNC_CONSUMER_THREAD.getStackTrace()), producerBlocked);\n \t\t\tboolean consumerWaiting = false;\n \t\t\tfor (int i = 0; i < 50; i++) {", "fixed": " \t\t\t\t\tbreak;\n \t\t\t\t} else {\n\t\t\t\t\tThread.sleep(500L);\n \t\t\t\t}\n \t\t\t}\n\t\t\tassertTrue(\"Producer thread is not blocked: \" + Arrays.toString(ASYNC_PRODUCER_THREAD.getStackTrace()), producerBlocked);\n \t\t\tboolean consumerWaiting = false;\n \t\t\tfor (int i = 0; i < 50; i++) {", "sourceBeforeFix": "Thread.sleep(500)", "sourceAfterFix": "Thread.sleep(500L)"}
{"fixCommitSHA1": "6ee201465a3287e5700c5cba712852a8f4de4bca", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "     }\n     @Override\n    public DynamicAwareEntry prepare(Exchange exchange, String uri) throws Exception {\n         RuntimeCamelCatalog catalog = exchange.getContext().getExtension(RuntimeCamelCatalog.class);\n         Map<String, String> properties = catalog.endpointProperties(uri);\n         Map<String, String> lenient = catalog.endpointLenientProperties(uri);\n        return new DynamicAwareEntry(uri, properties, lenient);\n     }\n     @Override", "fixed": "     }\n     @Override\n    public DynamicAwareEntry prepare(Exchange exchange, String uri, String originalUri) throws Exception {\n         RuntimeCamelCatalog catalog = exchange.getContext().getExtension(RuntimeCamelCatalog.class);\n         Map<String, String> properties = catalog.endpointProperties(uri);\n         Map<String, String> lenient = catalog.endpointLenientProperties(uri);\n        return new DynamicAwareEntry(uri, originalUri, properties, lenient);\n     }\n     @Override", "sourceBeforeFix": "entry.getOriginalUri()", "sourceAfterFix": "entry.getUri()"}
{"fixCommitSHA1": "e530010502964b1815d5dbf9733a248f5e1bc4e1", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         for (int i = 0; i < size; i++) {\n             map.put(i, i);\n         }\n        instance2.getLifecycleService().terminate();\n         mapStore.awaitStores();\n     }", "fixed": "         for (int i = 0; i < size; i++) {\n             map.put(i, i);\n         }\n        instance2.getLifecycleService().shutdown();\n         mapStore.awaitStores();\n     }", "sourceBeforeFix": "instance2.getLifecycleService().terminate()", "sourceAfterFix": "instance2.getLifecycleService().shutdown()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "                 } else {\n                     statistics.increaseCacheHits(1);\n                 }\n                statistics.addGetTimeNano(System.nanoTime() - start);\n             }\n         }\n     }", "fixed": "                 } else {\n                     statistics.increaseCacheHits(1);\n                 }\n                statistics.addGetTimeNanos(System.nanoTime() - start);\n             }\n         }\n     }", "sourceBeforeFix": "statistics.addGetTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addGetTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "41ff1f19d2188256f4c38928e7a5dd837c5d2edd", "projectName": "naver.pinpoint", "bugType": "Change Identifier Used", "problem": "     @Deprecated\n     @Override\n     public void put(final byte[] v) {\n        put(v);\n     }\n     @Override", "fixed": "     @Deprecated\n     @Override\n     public void put(final byte[] v) {\n        putBytes(v);\n     }\n     @Override", "sourceBeforeFix": "put(v)", "sourceAfterFix": "putBytes(v)"}
{"fixCommitSHA1": "d37d345f6b168a610f2dfc2879dc00bce089f72b", "projectName": "facebook.presto", "bugType": "Change Identifier Used", "problem": "         BlockBuilder col1 = BIGINT.createBlockBuilder(new BlockBuilderStatus(), 1);\n         BlockBuilder col2 = DOUBLE.createBlockBuilder(new BlockBuilderStatus(), 1);\n        BlockBuilder col3 = VARCHAR.createBlockBuilder(new BlockBuilderStatus(), 1);\n         col1.writeLong(42).closeEntry();\n         col2.writeLong(doubleToLongBits(43.0)).closeEntry();", "fixed": "         BlockBuilder col1 = BIGINT.createBlockBuilder(new BlockBuilderStatus(), 1);\n         BlockBuilder col2 = DOUBLE.createBlockBuilder(new BlockBuilderStatus(), 1);\n        BlockBuilder col3 = VARBINARY.createBlockBuilder(new BlockBuilderStatus(), 1);\n         col1.writeLong(42).closeEntry();\n         col2.writeLong(doubleToLongBits(43.0)).closeEntry();", "sourceBeforeFix": "VARCHAR.createBlockBuilder(new BlockBuilderStatus(),1)", "sourceAfterFix": "VARBINARY.createBlockBuilder(new BlockBuilderStatus(),1)"}
{"fixCommitSHA1": "1ec309268bbed966214ce1a4f3880f48d0ca25e3", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Change Numeric Literal", "problem": "c.prepareGet(\"http:\n                 public STATE onStatusReceived(HttpResponseStatus status) throws Exception {\n                    assertEquals(301, status.getStatusCode());\n                     return STATE.CONTINUE;\n                 }", "fixed": "c.prepareGet(\"http:\n                 public STATE onStatusReceived(HttpResponseStatus status) throws Exception {\n                    assertEquals(302, status.getStatusCode());\n                     return STATE.CONTINUE;\n                 }", "sourceBeforeFix": "assertEquals(301,status.getStatusCode())", "sourceAfterFix": "assertEquals(302,status.getStatusCode())"}
{"fixCommitSHA1": "46d3a4007fe1418d53baabc16dec39275079684b", "projectName": "Activiti.Activiti", "bugType": "Same Function More Args", "problem": "     @Override\n     protected List<ProcessEngineConfigurator> getConfigurators() {\n         ProcessEngineConfigurator configurator = new SecureServiceTaskConfigurator()\n                .setWhiteListedShellCommands(new HashSet<String>(Arrays.asList(\"ls\", \"pwd\")));\n         return Arrays.asList(configurator);\n     }", "fixed": "     @Override\n     protected List<ProcessEngineConfigurator> getConfigurators() {\n         ProcessEngineConfigurator configurator = new SecureServiceTaskConfigurator()\n                .setWhiteListedShellCommands(new HashSet<String>(Arrays.asList(\"cmd\",\"ls\", \"pwd\")));\n         return Arrays.asList(configurator);\n     }", "sourceBeforeFix": "Arrays.asList(\"ls\",\"pwd\")", "sourceAfterFix": "Arrays.asList(\"cmd\",\"ls\",\"pwd\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "05e061d5a98f58b04cb7a7d942e8b3c7ffd7f962", "projectName": "thinkaurelius.titan", "bugType": "Change Modifier", "problem": " \t}\n \t@Override\n\tpublic void forceDelete() {\n \t\tgetTransaction().deletedRelation(this);\n \t}", "fixed": " \t}\n \t@Override\n\tpublic synchronized void forceDelete() {\n \t\tgetTransaction().deletedRelation(this);\n \t}", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface TwitterSearchEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedTwitterSearchEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface TwitterSearchEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedTwitterSearchEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "d80d48fcf4b812f5b4d5df3f4cd65e310dbc35a1", "projectName": "openmrs.openmrs-core", "bugType": "Same Function More Args", "problem": " \t\t\t\t}\r\n\t\t\t\tthrow new CustomChangeException(\"Failed to insert one or more concept map types\");\r\n \t\t\t}\r\n \t\t}\r\n \t\tcatch (DatabaseException e) {\r", "fixed": " \t\t\t\t}\r\n\t\t\t\tthrow new CustomChangeException(\"Failed to insert one or more concept map types\", be);\r\n \t\t\t}\r\n \t\t}\r\n \t\tcatch (DatabaseException e) {\r", "sourceBeforeFix": "new CustomChangeException(\"Failed to insert one or more concept map types\")", "sourceAfterFix": "new CustomChangeException(\"Failed to insert one or more concept map types\",be)"}
{"fixCommitSHA1": "359ce65a7b6ec7725d4fea3aca1a299cd2b7f7ba", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "      * @param column column index.\n      * @return value at specified column.\n      */\n    private Object getValueAtDetailNode(DetailNode node, int column) {\n         final Object value;\n         switch (column) {", "fixed": "      * @param column column index.\n      * @return value at specified column.\n      */\n    private static Object getValueAtDetailNode(DetailNode node, int column) {\n         final Object value;\n         switch (column) {", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedWsEndpointBuilder\n             extends\n                 AdvancedWsEndpointConsumerBuilder, AdvancedWsEndpointProducerBuilder {\n         default WsEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedWsEndpointBuilder\n             extends\n                 AdvancedWsEndpointConsumerBuilder, AdvancedWsEndpointProducerBuilder {\n         default WsEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "bc61b7eb2f40cb6ff6027d59ad68ee5cc2d3fae0", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "             rootName = options.get(ROOT_NAME);\n         }\n         if (options.containsKey(ELEMENT_NAME)) {\n            encoding = options.get(ELEMENT_NAME);\n         }\n         if (options.containsKey(ARRAY_NAME)) {\n            elementName = options.get(ARRAY_NAME);\n         }\n         if (options.containsKey(EXPANDABLE_PROPERTIES)) {\n             expandableProperties = Arrays.asList(options.get(EXPANDABLE_PROPERTIES).split(\" \"));", "fixed": "             rootName = options.get(ROOT_NAME);\n         }\n         if (options.containsKey(ELEMENT_NAME)) {\n            elementName = options.get(ELEMENT_NAME);\n         }\n         if (options.containsKey(ARRAY_NAME)) {\n            arrayName = options.get(ARRAY_NAME);\n         }\n         if (options.containsKey(EXPANDABLE_PROPERTIES)) {\n             expandableProperties = Arrays.asList(options.get(EXPANDABLE_PROPERTIES).split(\" \"));", "sourceBeforeFix": "elementName=options.get(ARRAY_NAME)", "sourceAfterFix": "arrayName=options.get(ARRAY_NAME)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface DataFormatEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedDataFormatEndpointBuilder advanced() {", "fixed": "     \n    public interface DataFormatEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedDataFormatEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  private final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "d5b318132a1f6c792c153abe354f51d1054bab81", "projectName": "openhab.openhab", "bugType": "Wrong Function Name", "problem": " \t\t\t\t\treq.getParameter(\"items\"), req.getParameter(\"groups\"));\n \t\t\tImageIO.write(chart, provider.getChartType().toString(), res.getOutputStream());\n \t\t} catch (ItemNotFoundException e) {\n\t\t\tlogger.debug(\"Item not found error while generating chart.\");\n \t\t} catch (IllegalArgumentException e) {\n\t\t\tlogger.debug(\"Illegal argument in chart: {}\", e);\n \t\t}\n \t}", "fixed": " \t\t\t\t\treq.getParameter(\"items\"), req.getParameter(\"groups\"));\n \t\t\tImageIO.write(chart, provider.getChartType().toString(), res.getOutputStream());\n \t\t} catch (ItemNotFoundException e) {\n\t\t\tlogger.info(\"Item not found error while generating chart: {}\", e);\n \t\t} catch (IllegalArgumentException e) {\n\t\t\tlogger.info(\"Illegal argument in chart: {}\", e);\n \t\t}\n \t}", "sourceBeforeFix": "logger.debug(\"Illegal argument in chart: {}\",e)", "sourceAfterFix": "logger.info(\"Illegal argument in chart: {}\",e)"}
{"fixCommitSHA1": "8fe9347ccf26084928d9bb4367c03a44953a3934", "projectName": "dropwizard.metrics", "bugType": "Change Modifier", "problem": "     private void setMin(long potentialMin) {\n         boolean done = false;\n         while (!done) {\n            long currentMin = _min.get();\n             done = currentMin <= potentialMin || _min.compareAndSet(currentMin, potentialMin);\n         }\n     }", "fixed": "     private void setMin(long potentialMin) {\n         boolean done = false;\n         while (!done) {\n            final long currentMin = _min.get();\n             done = currentMin <= potentialMin || _min.compareAndSet(currentMin, potentialMin);\n         }\n     }", "sourceBeforeFix": "0", "sourceAfterFix": "16"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "         if (isStatisticsEnabled()) {\n             if (result) {\n                 statistics.increaseCachePuts(1);\n                statistics.addPutTimeNano(System.nanoTime() - start);\n             }\n            statistics.addGetTimeNano(System.nanoTime() - start);\n             if (isHit) {\n                 statistics.increaseCacheHits(1);\n             } else {", "fixed": "         if (isStatisticsEnabled()) {\n             if (result) {\n                 statistics.increaseCachePuts(1);\n                statistics.addPutTimeNanos(System.nanoTime() - start);\n             }\n            statistics.addGetTimeNanos(System.nanoTime() - start);\n             if (isHit) {\n                 statistics.increaseCacheHits(1);\n             } else {", "sourceBeforeFix": "statistics.addGetTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addGetTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform3(location, v);\r\n \t}\r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform3(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r", "fixed": " \t}\r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform3iv(location, v);\r\n \t}\r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform3iv(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r", "sourceBeforeFix": "GL20.glUniform2(location,v)", "sourceAfterFix": "GL20.glUniform2fv(location,v)"}
{"fixCommitSHA1": "1eda3c24396baa2067d8a048fd98a6ac13785a55", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "   throws IOException {\n    Path tableDir = new Path(rootdir, tableName.toString());\n     fs.mkdirs(tableDir);", "fixed": "   throws IOException {\n    Path tableDir = new Path(rootdir, Bytes.toString(tableName));\n     fs.mkdirs(tableDir);", "sourceBeforeFix": "tableName.toString()", "sourceAfterFix": "Bytes.toString(tableName)"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should exclude not allowed locales\n \t * @should cache results for a user\n \t */\n\tpublic List<Locale> getSearchLocales() throws APIException;\n \t/**\n \t * Used by Spring to set the http client for accessing the openmrs implementation service", "fixed": " \t * @should exclude not allowed locales\n \t * @should cache results for a user\n \t */\n\tpublic List<Locale> getSearchLocales();\n \t/**\n \t * Used by Spring to set the http client for accessing the openmrs implementation service", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "f3c01ca3b39c23758a34d711579a567a5f841944", "projectName": "eclipse.vert.x", "bugType": "Change Numeric Literal", "problem": "       Process process = startExternalNode(i);\n       externalNodes.add(process);\n     }\n    waitUntil(() -> externalNodesStarted.get() == NODE_COUNT, 30_000);\n     JsonArray message1 = new JsonArray();\n     IntStream.range(0, NODE_COUNT).forEach(message1::add);\n     vertx.eventBus().publish(\"ping\", message1);\n    waitUntil(() -> pongsReceived.get() == NODE_COUNT * NODE_COUNT * ADDRESSES_COUNT, 30_000);\n     for (int i = 0; i < NODE_COUNT - 1; i++) {\n       externalNodes.get(i).destroyForcibly();", "fixed": "       Process process = startExternalNode(i);\n       externalNodes.add(process);\n     }\n    waitUntil(() -> externalNodesStarted.get() == NODE_COUNT, 60_000);\n     JsonArray message1 = new JsonArray();\n     IntStream.range(0, NODE_COUNT).forEach(message1::add);\n     vertx.eventBus().publish(\"ping\", message1);\n    waitUntil(() -> pongsReceived.get() == NODE_COUNT * NODE_COUNT * ADDRESSES_COUNT, 60_000);\n     for (int i = 0; i < NODE_COUNT - 1; i++) {\n       externalNodes.get(i).destroyForcibly();", "sourceBeforeFix": "waitUntil(() -> clusterManager.getNodes().size() == 2,30_000)", "sourceAfterFix": "waitUntil(() -> clusterManager.getNodes().size() == 2,60_000)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "492fd118d4902c730fc8619851a7135b623631e2", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         MockEndpoint result = getMockEndpoint(\"mock:result\");\r\n        result.expectedMessageCount(3);\r\n         result.expectedBodiesReceived(\"Message 1c\", \"Message 2b\", \"Message 3a\");\r", "fixed": "         MockEndpoint result = getMockEndpoint(\"mock:result\");\r\n        result.expectedMinimumMessageCount(3);\r\n         result.expectedBodiesReceived(\"Message 1c\", \"Message 2b\", \"Message 3a\");\r", "sourceBeforeFix": "from(\"direct:start\").aggregator().header(\"id\").batchTimeout(2000L)", "sourceAfterFix": "from(\"direct:start\").aggregator().header(\"id\").batchTimeout(500L)"}
{"fixCommitSHA1": "e6035b9a4040f237a62feb042d68b389f3b6e464", "projectName": "neo4j.neo4j", "bugType": "Change Modifier", "problem": "         this.base = base.getAbsoluteFile();\n     }\n    private void recursiveDelete( File file )\n     {\n         File[] files = file.listFiles();\n         if ( files != null ) for ( File each : files )", "fixed": "         this.base = base.getAbsoluteFile();\n     }\n    public static void recursiveDelete( File file )\n     {\n         File[] files = file.listFiles();\n         if ( files != null ) for ( File each : files )", "sourceBeforeFix": "2", "sourceAfterFix": "9"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": " };\n   \n  private final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler", "fixed": " };\n   \n  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler", "sourceBeforeFix": "2", "sourceAfterFix": "0"}
{"fixCommitSHA1": "8c5369562390bee531eb35c00744821b0c4821e3", "projectName": "xetorthio.jedis", "bugType": "Change Identifier Used", "problem": "   public Set<Tuple> zrevrangeByScoreWithScores(final byte[] key, final double max, final double min) {\n     checkIsInMultiOrPipeline();\n     client.zrevrangeByScoreWithScores(key, max, min);\n    return getBinaryTupledSet();\n   }\n   @Override", "fixed": "   public Set<Tuple> zrevrangeByScoreWithScores(final byte[] key, final double max, final double min) {\n     checkIsInMultiOrPipeline();\n     client.zrevrangeByScoreWithScores(key, max, min);\n    return getTupledSet();\n   }\n   @Override", "sourceBeforeFix": "getBinaryTupledSet()", "sourceAfterFix": "getTupledSet()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "782a7444a6cf0d212cac614358d830cd66b8ae10", "projectName": "apache.hive", "bugType": "Change Identifier Used", "problem": "         assert(expr.getChildCount() == 2);\n         String tabAlias = BaseSemanticAnalyzer.unescapeIdentifier(expr.getChild(0).getText());\n         String colName = BaseSemanticAnalyzer.unescapeIdentifier(expr.getChild(1).getText());\n        if (tabAlias.equals(tableAlias) && tab.isPartitionKey(colName)) {\n           hasPPred = true;\n         }\n         break;", "fixed": "         assert(expr.getChildCount() == 2);\n         String tabAlias = BaseSemanticAnalyzer.unescapeIdentifier(expr.getChild(0).getText());\n         String colName = BaseSemanticAnalyzer.unescapeIdentifier(expr.getChild(1).getText());\n        if (tabAlias.equalsIgnoreCase(tableAlias) && tab.isPartitionKey(colName)) {\n           hasPPred = true;\n         }\n         break;", "sourceBeforeFix": "tabAlias.equals(tableAlias)", "sourceAfterFix": "tabAlias.equalsIgnoreCase(tableAlias)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<Status> getFriendsTimeline() throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\", true));\n     }\n     /**", "fixed": "      */\n     public ResponseList<Status> getFriendsTimeline() throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\", true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "34df86db858d325c9ae6951ae9e69c2fae914be7", "projectName": "libgdx.libgdx", "bugType": "Change Operand ", "problem": " \t\t\t\t}\r\n \t\t\t\tx += layerTileWidth;\r\n \t\t\t}\r\n\t\t\ty += layerTileHeight;\r\n \t\t}\r\n \t}\r\n }\r", "fixed": " \t\t\t\t}\r\n \t\t\t\tx += layerTileWidth;\r\n \t\t\t}\r\n\t\t\ty -= layerTileHeight;\r\n \t\t}\r\n \t}\r\n }\r", "sourceBeforeFix": "row1 * layerTileHeight", "sourceAfterFix": "row2 * layerTileHeight"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e0bd630e8adb61a9085a2cc3eb1302fcba9a47fd", "projectName": "alibaba.dubbo", "bugType": "Change Numeric Literal", "problem": "URL publishUrl = URL.valueOf(\"dubbo:\n         metadataReportService1.publishConsumer(publishUrl);\n        Thread.sleep(100);\n         Assert.assertTrue(metadataReportService1.metadataReport instanceof JTestMetadataReport4Test);", "fixed": "URL publishUrl = URL.valueOf(\"dubbo:\n         metadataReportService1.publishConsumer(publishUrl);\n        Thread.sleep(300);\n         Assert.assertTrue(metadataReportService1.metadataReport instanceof JTestMetadataReport4Test);", "sourceBeforeFix": "Thread.sleep(100)", "sourceAfterFix": "Thread.sleep(300)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15860, value = \"No deployment with name %s found\")\n     String noDeploymentContentWithName(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10860, value = \"No deployment with name %s found\")\n     String noDeploymentContentWithName(String name);\n     /**", "sourceBeforeFix": "id=15856", "sourceAfterFix": "id=10856"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<Status> getHomeTimeline(Paging paging) throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/home_timeline.json\", null, paging.asPostParameterList(), true));\n     }\n     /**", "fixed": "      */\n     public ResponseList<Status> getHomeTimeline(Paging paging) throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/home_timeline.json\", null, paging.asPostParameterList(), true));\n     }\n     /**", "sourceBeforeFix": "SavedSearch.constructSavedSearches(get(getBaseURL() + \"saved_searches.json\",true))", "sourceAfterFix": "SavedSearch.createSavedSearchList(get(getBaseURL() + \"saved_searches.json\",true))"}
{"fixCommitSHA1": "5924329db91d304964119a1cf1989b5b2c82f85e", "projectName": "openmrs.openmrs-core", "bugType": "More Specific If", "problem": " \t\t\t\tString other = null;\r\n\t\t\t\tif (args.length > 1)\r\n \t\t\t\t\tother = (String) args[1];\r\n \t\t\t\trecursivelyHandle(SaveHandler.class, (OpenmrsObject) mainArgument, other);\r", "fixed": " \t\t\t\tString other = null;\r\n\t\t\t\tif (args.length > 1 && args[1] instanceof String)\r\n \t\t\t\t\tother = (String) args[1];\r\n \t\t\t\trecursivelyHandle(SaveHandler.class, (OpenmrsObject) mainArgument, other);\r", "sourceBeforeFix": "args.length > 1", "sourceAfterFix": "args.length > 1 && args[1] instanceof String"}
{"fixCommitSHA1": "4665dcf9ab41c3c61cd42aad296ebfe518bfa003", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\n \t\tBuffer pixels) {\n\t\tGL.glTexSubImage2DEXT(target, level, xoffset, yoffset, width, height, format, type, pixels, Memory.getPosition(pixels));\n \t}\n \tpublic void glViewport (int x, int y, int width, int height) {", "fixed": " \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\n \t\tBuffer pixels) {\n\t\tGL.glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels, Memory.getPosition(pixels));\n \t}\n \tpublic void glViewport (int x, int y, int width, int height) {", "sourceBeforeFix": "GL.glDeleteTexturesEXT(n,textures,Memory.getPosition(textures))", "sourceAfterFix": "GL.glDeleteTextures(n,textures,Memory.getPosition(textures))"}
{"fixCommitSHA1": "aebe2ca06a3fb220c7211b174c85250f36afae25", "projectName": "wildfly.wildfly", "bugType": "Same Function Swap Args", "problem": "             Assert.fail(\"Test should fail, user shouldn't be allowed to invoke that method\");\n         } catch (WebServiceException e) {\n            Assert.assertEquals(e.getCause().getMessage(), getNotAllowedExceptionMessage(\"helloForNone\"));\n         }\n     }", "fixed": "             Assert.fail(\"Test should fail, user shouldn't be allowed to invoke that method\");\n         } catch (WebServiceException e) {\n            Assert.assertEquals(getNotAllowedExceptionMessage(\"helloForNone\"), e.getCause().getMessage());\n         }\n     }", "sourceBeforeFix": "Assert.assertEquals(e.getCause().getMessage(),getNotAllowedExceptionMessage(\"helloForNone\"))", "sourceAfterFix": "Assert.assertEquals(getNotAllowedExceptionMessage(\"helloForNone\"),e.getCause().getMessage())"}
{"fixCommitSHA1": "a4d8f930af1f17a6c48a9abd94f49e5fd719fc31", "projectName": "netty.netty", "bugType": "Wrong Function Name", "problem": "         if (value instanceof AsciiString) {\n             return ((AsciiString) value).parseFloat();\n         }\n        return Float.valueOf(value.toString());\n     }\n     @Override", "fixed": "         if (value instanceof AsciiString) {\n             return ((AsciiString) value).parseFloat();\n         }\n        return Float.parseFloat(value.toString());\n     }\n     @Override", "sourceBeforeFix": "Double.valueOf(value.toString())", "sourceAfterFix": "Double.parseDouble(value.toString())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  private final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<DirectMessage> getDirectMessages(Paging paging) throws TwitterException {\n        return DirectMessage.constructDirectMessages(get(getBaseURL()\n                 + \"direct_messages.json\", null, paging.asPostParameterList(), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<DirectMessage> getDirectMessages(Paging paging) throws TwitterException {\n        return DirectMessage.createDirectMessageList(get(getBaseURL()\n                 + \"direct_messages.json\", null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))"}
{"fixCommitSHA1": "1568a560348de41adffd9b4a181bcf64b4f01073", "projectName": "facebook.presto", "bugType": "Change Unary Operator\t", "problem": "         AggregationNode child = (AggregationNode) input;\n        if (isDistinct(child)) {\n             return Optional.empty();\n         }", "fixed": "         AggregationNode child = (AggregationNode) input;\n        if (!isDistinct(child)) {\n             return Optional.empty();\n         }", "sourceBeforeFix": "isDistinct(child)", "sourceAfterFix": "!isDistinct(child)"}
{"fixCommitSHA1": "e7bf415427b37bbc760ff9b9c69650db8ec477e4", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnBean(ConnectionFactory.class)\n\t@ConditionalOnEnablednHealthIndicator(\"jms\")\n \tpublic static class JmsHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<JmsHealthIndicator, ConnectionFactory> {", "fixed": " \t@Configuration\n \t@ConditionalOnBean(ConnectionFactory.class)\n\t@ConditionalOnEnabledHealthIndicator(\"jms\")\n \tpublic static class JmsHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<JmsHealthIndicator, ConnectionFactory> {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"solr\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"solr\")"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<Status> getFriendsTimeline(Paging paging) throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\",null, paging.asPostParameterList(), true));\n     }\n     /**", "fixed": "      */\n     public ResponseList<Status> getFriendsTimeline(Paging paging) throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\",null, paging.asPostParameterList(), true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))"}
{"fixCommitSHA1": "4281cc1c5d3aa51b56db9d9e251c761c52a855e3", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t * before growing the backing table. */\r\n \tpublic LongMap (int initialCapacity, float loadFactor) {\r\n \t\tif (initialCapacity < 0) throw new IllegalArgumentException(\"initialCapacity must be >= 0: \" + initialCapacity);\r\n\t\tif (capacity > 1 << 30) throw new IllegalArgumentException(\"initialCapacity is too large: \" + initialCapacity);\r\n \t\tcapacity = MathUtils.nextPowerOfTwo(initialCapacity);\r\n \t\tif (loadFactor <= 0) throw new IllegalArgumentException(\"loadFactor must be > 0: \" + loadFactor);\r", "fixed": " \t * before growing the backing table. */\r\n \tpublic LongMap (int initialCapacity, float loadFactor) {\r\n \t\tif (initialCapacity < 0) throw new IllegalArgumentException(\"initialCapacity must be >= 0: \" + initialCapacity);\r\n\t\tif (initialCapacity > 1 << 30) throw new IllegalArgumentException(\"initialCapacity is too large: \" + initialCapacity);\r\n \t\tcapacity = MathUtils.nextPowerOfTwo(initialCapacity);\r\n \t\tif (loadFactor <= 0) throw new IllegalArgumentException(\"loadFactor must be > 0: \" + loadFactor);\r", "sourceBeforeFix": "capacity > 1 << 30", "sourceAfterFix": "initialCapacity > 1 << 30"}
{"fixCommitSHA1": "4633bbc0240015345b63f1ca91afffcb6c727838", "projectName": "apache.hive", "bugType": "Change Numeric Literal", "problem": "   private static String sparkHome = \"/home/xzhang/apache/spark\";\n  private static int reducerCount = 5;\n   private static String execMem = \"1g\";\n   private static String execJvmOpts = \"\";", "fixed": "   private static String sparkHome = \"/home/xzhang/apache/spark\";\n  private static int reducerCount = 1;\n   private static String execMem = \"1g\";\n   private static String execJvmOpts = \"\";", "sourceBeforeFix": "reducerCount=5", "sourceAfterFix": "reducerCount=1"}
{"fixCommitSHA1": "067ed0a9c50964ebaca5b413684cc56339c5c23f", "projectName": "junit-team.junit", "bugType": "Same Function Swap Args", "problem": "         @Test\n         public void duration() throws InterruptedException {\n             Thread.sleep(300L);\n            assertEquals(fStopwatch.runtime(MILLISECONDS), 300d, 100d);\n             Thread.sleep(500L);\n            assertEquals(fStopwatch.runtime(MILLISECONDS), 800d, 250d);\n         }\n     }", "fixed": "         @Test\n         public void duration() throws InterruptedException {\n             Thread.sleep(300L);\n            assertEquals(300d, fStopwatch.runtime(MILLISECONDS), 100d);\n             Thread.sleep(500L);\n            assertEquals(800d, fStopwatch.runtime(MILLISECONDS), 250d);\n         }\n     }", "sourceBeforeFix": "assertEquals(fStopwatch.runtime(MILLISECONDS),800d,250d)", "sourceAfterFix": "assertEquals(800d,fStopwatch.runtime(MILLISECONDS),250d)"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleActionsPredicatesOptions_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(239);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");", "fixed": " \tpublic void testMultipleActionsPredicatesOptions_2() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(238);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");", "sourceBeforeFix": "new StringBuilder(239)", "sourceAfterFix": "new StringBuilder(238)"}
{"fixCommitSHA1": "73a03b5e232d8f7049a03361e0454cb2eecb90c7", "projectName": "hazelcast.hazelcast", "bugType": "Change Modifier", "problem": "         }\n     }\n    @Test(timeout = 30000)\n     public void testSemaphoreWithFailuresAndJoin() {\n         final TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(3);", "fixed": "         }\n     }\n    @Test(timeout = 120000)\n     public void testSemaphoreWithFailuresAndJoin() {\n         final TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(3);", "sourceBeforeFix": "0", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15856, value = \"Invalid url stream.\")\n     String invalidUrlStream();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10856, value = \"Invalid url stream.\")\n     String invalidUrlStream();\n     /**", "sourceBeforeFix": "id=15849", "sourceAfterFix": "id=10849"}
{"fixCommitSHA1": "edc53a74553f19c2ec83ab7c12945758ba6084bf", "projectName": "apache.flink", "bugType": "Change Binary Operator", "problem": " \tpublic static String getCallLocationName(int depth) {\n \t\tStackTraceElement[] stackTrace = Thread.currentThread().getStackTrace();\n\t\tif (stackTrace.length < depth) {\n \t\t\treturn \"<unknown>\";\n \t\t}", "fixed": " \tpublic static String getCallLocationName(int depth) {\n \t\tStackTraceElement[] stackTrace = Thread.currentThread().getStackTrace();\n\t\tif (stackTrace.length <= depth) {\n \t\t\treturn \"<unknown>\";\n \t\t}", "sourceBeforeFix": "stackTrace.length < depth", "sourceAfterFix": "stackTrace.length <= depth"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n            statistics.addRemoveTimeNano(System.nanoTime() - start);\n             if (hitCount == 1) {\n                 statistics.increaseCacheHits(hitCount);\n             } else {", "fixed": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n            statistics.addRemoveTimeNanos(System.nanoTime() - start);\n             if (hitCount == 1) {\n                 statistics.increaseCacheHits(hitCount);\n             } else {", "sourceBeforeFix": "statistics.addGetTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addGetTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "a35860eadb4400f069e306ccd76f1a19ecfb3ba1", "projectName": "google.guava", "bugType": "Change Identifier Used", "problem": "   @SuppressWarnings(\"unchecked\")\n   @Override\n  public V value(Object node) {\n     Object value = adjacentNodeValues.get(node);\n     if (value == PRED) {\n       return null;", "fixed": "   @SuppressWarnings(\"unchecked\")\n   @Override\n  public V value(N node) {\n     Object value = adjacentNodeValues.get(node);\n     if (value == PRED) {\n       return null;", "sourceBeforeFix": "Object node", "sourceAfterFix": "N node"}
{"fixCommitSHA1": "0d3c78b6f28fb3cad00c12605209c524702adb0a", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "             return record;\n         }\n         if (isEventsEnabled()) {\n            publishEvent(createCacheCompleteEvent(key, CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                   origin, completionId));\n         }\n         return null;", "fixed": "             return record;\n         }\n         if (isEventsEnabled()) {\n            publishEvent(createCacheCompleteEvent(toEventData(key), CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                   origin, completionId));\n         }\n         return null;", "sourceBeforeFix": "toHeapData(key)", "sourceAfterFix": "toEventData(key)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15833, value = \"%s is missing %s: %s\")\n     String requiredChildIsMissing(String parent, String child, String parentSpec);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10833, value = \"%s is missing %s: %s\")\n     String requiredChildIsMissing(String parent, String child, String parentSpec);\n     /**", "sourceBeforeFix": "id=15868", "sourceAfterFix": "id=10868"}
{"fixCommitSHA1": "c64fbc67c3358437202bb923b45037e5921942d4", "projectName": "jersey.jersey", "bugType": "Same Function Swap Args", "problem": "      * @return {@link Consumer} object for the newly registered consumer.\n      */\n     public Consumer registerConsumer(final String owner, final MultivaluedMap<String, String> attributes) {\n        return registerConsumer(newUUIDString(), newUUIDString(), owner, attributes);\n     }\n     /**", "fixed": "      * @return {@link Consumer} object for the newly registered consumer.\n      */\n     public Consumer registerConsumer(final String owner, final MultivaluedMap<String, String> attributes) {\n        return registerConsumer(owner, newUUIDString(), newUUIDString(), attributes);\n     }\n     /**", "sourceBeforeFix": "registerConsumer(newUUIDString(),newUUIDString(),owner,attributes)", "sourceAfterFix": "registerConsumer(owner,newUUIDString(),newUUIDString(),attributes)"}
{"fixCommitSHA1": "e04cbbf23e9273cca31b1cc12142e34fae753542", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "          *  Does class have private ctors.\n          *  @return true if class has private ctors\n          */\n        boolean isWithPrivateCtor() {\n             return withPrivateCtor;\n         }", "fixed": "          *  Does class have private ctors.\n          *  @return true if class has private ctors\n          */\n        private boolean isWithPrivateCtor() {\n             return withPrivateCtor;\n         }", "sourceBeforeFix": "0", "sourceAfterFix": "2"}
{"fixCommitSHA1": "f8c20919f9c2e18e48142c2712e34298f98b983e", "projectName": "spring-projects.spring-boot", "bugType": "Wrong Function Name", "problem": " \t\t\t\tnew FileWriter(this.temporaryFolder.newFile(\"test.txt\")));\n \t\tAbstractEmbeddedServletContainerFactory factory = getFactory();\n \t\tfactory.setDocumentRoot(this.temporaryFolder.getRoot());\n\t\tthis.container = factory.getEmbdeddedServletContainer();\nassertThat(getResponse(\"http:\n \t}", "fixed": " \t\t\t\tnew FileWriter(this.temporaryFolder.newFile(\"test.txt\")));\n \t\tAbstractEmbeddedServletContainerFactory factory = getFactory();\n \t\tfactory.setDocumentRoot(this.temporaryFolder.getRoot());\n\t\tthis.container = factory.getEmbeddedServletContainer();\nassertThat(getResponse(\"http:\n \t}", "sourceBeforeFix": "factory.getEmbdeddedServletContainer()", "sourceAfterFix": "factory.getEmbeddedServletContainer()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AtmosphereWebsocketEndpointBuilder\n             extends\n                 AtmosphereWebsocketEndpointConsumerBuilder, AtmosphereWebsocketEndpointProducerBuilder {\n         default AdvancedAtmosphereWebsocketEndpointBuilder advanced() {", "fixed": "     \n    public interface AtmosphereWebsocketEndpointBuilder\n             extends\n                 AtmosphereWebsocketEndpointConsumerBuilder, AtmosphereWebsocketEndpointProducerBuilder {\n         default AdvancedAtmosphereWebsocketEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getUserTimeline(String id) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline/\" + id + \".json\", http.isAuthenticationEnabled()));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getUserTimeline(String id) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline/\" + id + \".json\", http.isAuthenticationEnabled()));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_to_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_to_me.json\",null,true))"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "fixed": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4fv(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4fv(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "sourceBeforeFix": "GL20.glUniform3(location,toIntBuffer(v,offset,count * 3))", "sourceAfterFix": "GL20.glUniform3iv(location,toIntBuffer(v,offset,count * 3))"}
{"fixCommitSHA1": "d222fc981c938bd3543ee61f22422d20efcdcd94", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         String uri = getScpUri() + \"?username=admin&password=admin&chmod=640&knownHostsFile=\" + getKnownHostsFile();\n         template.sendBodyAndHeader(uri, \"Bonjour Monde\", Exchange.FILE_NAME, \"monde.txt\");\n        Thread.sleep(500);\n         File file = new File(getScpPath() + \"/monde.txt\");\n         assertFileExists(file.getAbsolutePath());", "fixed": "         String uri = getScpUri() + \"?username=admin&password=admin&chmod=640&knownHostsFile=\" + getKnownHostsFile();\n         template.sendBodyAndHeader(uri, \"Bonjour Monde\", Exchange.FILE_NAME, \"monde.txt\");\n        Thread.sleep(800);\n         File file = new File(getScpPath() + \"/monde.txt\");\n         assertFileExists(file.getAbsolutePath());", "sourceBeforeFix": "Thread.sleep(500)", "sourceAfterFix": "Thread.sleep(800)"}
{"fixCommitSHA1": "25bce516d60ca8448ed6bfb269dd89987395c0c8", "projectName": "gephi.gephi", "bugType": "Same Function More Args", "problem": "         if (!pid.isEmpty()) {\n            report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class, \"importerGEXF_error_pid\"), Issue.Level.SEVERE));\n         }\n         if (!container.nodeExists(id)) {", "fixed": "         if (!pid.isEmpty()) {\n            report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class, \"importerGEXF_error_pid\", id), Issue.Level.SEVERE));\n         }\n         if (!container.nodeExists(id)) {", "sourceBeforeFix": "NbBundle.getMessage(ImporterGEXF.class,\"importerGEXF_error_pid\")", "sourceAfterFix": "NbBundle.getMessage(ImporterGEXF.class,\"importerGEXF_error_pid\",id)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedChunkEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default ChunkEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedChunkEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default ChunkEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsCsv(String path) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), 1, null);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsCsv(String path) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), 1, null);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      * @param task          the task.\n      */\n     @LogMessage(level = Level.ERROR)\n    @Message(id = 15809, value = \"%s caught %s waiting for task %s; returning\")\n     void caughtExceptionWaitingForTaskReturning(String className, String exceptionName, String task);\n }", "fixed": "      * @param task          the task.\n      */\n     @LogMessage(level = Level.ERROR)\n    @Message(id = 10809, value = \"%s caught %s waiting for task %s; returning\")\n     void caughtExceptionWaitingForTaskReturning(String className, String exceptionName, String task);\n }", "sourceBeforeFix": "id=15809", "sourceAfterFix": "id=10809"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface NeutronEndpointBuilder\n            extends\n                EndpointProducerBuilder {\n         default AdvancedNeutronEndpointBuilder advanced() {\n             return (AdvancedNeutronEndpointBuilder) this;\n         }", "fixed": "     \n    public interface NeutronEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedNeutronEndpointBuilder advanced() {\n             return (AdvancedNeutronEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "73a03b5e232d8f7049a03361e0454cb2eecb90c7", "projectName": "hazelcast.hazelcast", "bugType": "Change Numeric Literal", "problem": "         }\n     }\n    @Test(timeout = 30000)\n     public void testSemaphoreWithFailuresAndJoin() {\n         final TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(3);", "fixed": "         }\n     }\n    @Test(timeout = 120000)\n     public void testSemaphoreWithFailuresAndJoin() {\n         final TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(3);", "sourceBeforeFix": "timeout=30000", "sourceAfterFix": "timeout=120000"}
{"fixCommitSHA1": "3dddcc4cdf4a74ddbd4607c6aaee5bdd8ac46c27", "projectName": "gephi.gephi", "bugType": "Change Modifier", "problem": "     }\n     @Override\n    public List<Edge> getSelectedUnderlyingEdges() {\n         List<Edge> selected = new ArrayList<>();\n         for (Iterator<EdgeModel> itr = octree.getEdgeIterator(); itr.hasNext();) {\n             EdgeModel edgeModel = itr.next();", "fixed": "     }\n     @Override\n    public synchronized List<Edge> getSelectedUnderlyingEdges() {\n         List<Edge> selected = new ArrayList<>();\n         for (Iterator<EdgeModel> itr = octree.getEdgeIterator(); itr.hasNext();) {\n             EdgeModel edgeModel = itr.next();", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
