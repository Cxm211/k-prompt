{"fixCommitSHA1": "4b52e5d010469405c1ec24baa2f8457f3eada222", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic boolean keyUp (int keycode) {\r\n\t\tInputProcessor[] items = processors.begin();\r\n \t\ttry {\r\n \t\t\tfor (int i = 0, n = processors.size; i < n; i++)\r\n\t\t\t\tif (items[i].keyUp(keycode)) return true;\r\n \t\t} finally {\r\n \t\t\tprocessors.end();\r\n \t\t}\r", "fixed": " \t}\r\n \tpublic boolean keyUp (int keycode) {\r\n\t\tObject[] items = processors.begin();\r\n \t\ttry {\r\n \t\t\tfor (int i = 0, n = processors.size; i < n; i++)\r\n\t\t\t\tif (((InputProcessor)items[i]).keyUp(keycode)) return true;\r\n \t\t} finally {\r\n \t\t\tprocessors.end();\r\n \t\t}\r", "sourceBeforeFix": "InputProcessor[]", "sourceAfterFix": "Object[]"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  private final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e1d74627f527eb147f041030d9b853190a5c1046", "projectName": "spring-projects.spring-boot", "bugType": "Change Modifier", "problem": "  * Auto-configuration for {@link MockRestServiceServer} support.\n  *\n  * @author Phillip Webb\n  * @see AutoConfigureMockRestServiceServer\n  */\n @Configuration\n @ConditionalOnProperty(prefix = \"spring.test.webclient.mockrestserviceserver\", name = \"enabled\")\nclass MockRestServiceServerAutoConfiguration {\n \t@Bean\n \tpublic MockServerRestTemplateCustomizer mockServerRestTemplateCustomizer() {", "fixed": "  * Auto-configuration for {@link MockRestServiceServer} support.\n  *\n  * @author Phillip Webb\n * @since 1.4.0\n  * @see AutoConfigureMockRestServiceServer\n  */\n @Configuration\n @ConditionalOnProperty(prefix = \"spring.test.webclient.mockrestserviceserver\", name = \"enabled\")\npublic class MockRestServiceServerAutoConfiguration {\n \t@Bean\n \tpublic MockServerRestTemplateCustomizer mockServerRestTemplateCustomizer() {", "sourceBeforeFix": "0", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15835, value = IN_SERIES + \" is missing groups: %s\")\n     String inSeriesIsMissingGroups(String rolloutPlan);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10835, value = IN_SERIES + \" is missing groups: %s\")\n     String inSeriesIsMissingGroups(String rolloutPlan);\n     /**", "sourceBeforeFix": "id=15836", "sourceAfterFix": "id=10836"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n* @see NormalizableKey\n \t */\n\tpublic void putNormalizedKey(T record, byte[] target, int offset, int numBytes);\n \t/**\n \t * Writes the record in such a fashion that all keys are normalizing and at the beginning of the serialized data.", "fixed": " \t * \n* @see NormalizableKey\n \t */\n\tpublic abstract void putNormalizedKey(T record, byte[] target, int offset, int numBytes);\n \t/**\n \t * Writes the record in such a fashion that all keys are normalizing and at the beginning of the serialized data.", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "b61375cec50559b26f5b22fb359e7f920a458dab", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "         if (trustManager == null || (lastChain = trustManager.getLastFailedCertificateChain()) == null) {\n             return false;\n         }\n        error(\"Unable to connect due to unrecognised server certificate\");\n         for (Certificate current : lastChain) {\n             if (current instanceof X509Certificate) {\n                 X509Certificate x509Current = (X509Certificate) current;", "fixed": "         if (trustManager == null || (lastChain = trustManager.getLastFailedCertificateChain()) == null) {\n             return false;\n         }\n        printLine(\"Unable to connect due to unrecognised server certificate\");\n         for (Certificate current : lastChain) {\n             if (current instanceof X509Certificate) {\n                 X509Certificate x509Current = (X509Certificate) current;", "sourceBeforeFix": "error(\"Unable to connect due to unrecognised server certificate\")", "sourceAfterFix": "printLine(\"Unable to connect due to unrecognised server certificate\")"}
{"fixCommitSHA1": "9467bef8ea9a62658b32dd43a76f4f98087d1986", "projectName": "apache.hadoop", "bugType": "Change Unary Operator\t", "problem": "config.set(KeyProviderFactory.KEY_PROVIDER_PATH, \"user:\n     ks.setConf(config);\n     rc = ks.run(args1);\n    assertEquals(-1, rc);\n     assertTrue(outContent.toString().contains(\"There are no valid \" +\n \t\t\"KeyProviders configured.\"));\n   }", "fixed": "config.set(KeyProviderFactory.KEY_PROVIDER_PATH, \"user:\n     ks.setConf(config);\n     rc = ks.run(args1);\n    assertEquals(1, rc);\n     assertTrue(outContent.toString().contains(\"There are no valid \" +\n \t\t\"KeyProviders configured.\"));\n   }", "sourceBeforeFix": "-1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "b55782ed056e6265eeee028f891f291eb11d736b", "projectName": "wildfly.wildfly", "bugType": "Change Caller in Function Call", "problem": "         Node node = archive.get(MANIFEST);\n         Assert.assertNotNull(node);\n        Manifest mf = processor.getOrCreateManifest(archive);\n         Attributes attributes = mf.getMainAttributes();\n         String value = attributes.getValue(\"Dependencies\");\n         Set<String> deps = new HashSet<String>();", "fixed": "         Node node = archive.get(MANIFEST);\n         Assert.assertNotNull(node);\n        Manifest mf = ManifestUtils.getOrCreateManifest(archive);\n         Attributes attributes = mf.getMainAttributes();\n         String value = attributes.getValue(\"Dependencies\");\n         Set<String> deps = new HashSet<String>();", "sourceBeforeFix": "processor.getOrCreateManifest(archive)", "sourceAfterFix": "ManifestUtils.getOrCreateManifest(archive)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15860, value = \"No deployment with name %s found\")\n     String noDeploymentContentWithName(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10860, value = \"No deployment with name %s found\")\n     String noDeploymentContentWithName(String name);\n     /**", "sourceBeforeFix": "id=15849", "sourceAfterFix": "id=10849"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform3fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform3(location, v);\r\n \t}\r\n \tpublic void glUniform3fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform3(location, toFloatBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform3i (int location, int x, int y, int z) {\r", "fixed": " \t}\r\n \tpublic void glUniform3fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform3fv(location, v);\r\n \t}\r\n \tpublic void glUniform3fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform3fv(location, toFloatBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform3i (int location, int x, int y, int z) {\r", "sourceBeforeFix": "GL11.glTexParameter(target,pname,params)", "sourceAfterFix": "GL11.glTexParameterfv(target,pname,params)"}
{"fixCommitSHA1": "64dff91895f9df55fe3a07217a333efa4d37d92a", "projectName": "apache.hbase", "bugType": "Wrong Function Name", "problem": "         Class<?> c = makeClass(className, proceedOnExceptions);\n         if (c != null) {\n           if (!classes.add(c)) {\n            LOG.error(\"Ignoring duplicate class \" + className);\n           }\n         }\n       }", "fixed": "         Class<?> c = makeClass(className, proceedOnExceptions);\n         if (c != null) {\n           if (!classes.add(c)) {\n            LOG.warn(\"Ignoring duplicate class \" + className);\n           }\n         }\n       }", "sourceBeforeFix": "LOG.error(\"Ignoring duplicate class \" + className)", "sourceAfterFix": "LOG.warn(\"Ignoring duplicate class \" + className)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e7eb9f2c98dd576658bf0160d2ef4720740897ab", "projectName": "Graylog2.graylog2-server", "bugType": "Wrong Function Name", "problem": "         final Role roleToUpdate = roleService.load(name);\n         roleToUpdate.setName(role.name());\n        roleToUpdate.setDescription(role.description().get());\n         roleToUpdate.setPermissions(role.permissions());\n         try {\n             roleService.save(roleToUpdate);", "fixed": "         final Role roleToUpdate = roleService.load(name);\n         roleToUpdate.setName(role.name());\n        roleToUpdate.setDescription(role.description().orNull());\n         roleToUpdate.setPermissions(role.permissions());\n         try {\n             roleService.save(roleToUpdate);", "sourceBeforeFix": "role.description().get()", "sourceAfterFix": "role.description().orNull()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStream<OUT> writeAsText(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsText<OUT> format, long millis, OUT endTuple) {\n\t\tDataStream<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByMillis<OUT>(\n \t\t\t\tpath, format, millis, endTuple), null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "fixed": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStreamSink<OUT> writeAsText(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsText<OUT> format, long millis, OUT endTuple) {\n\t\tDataStreamSink<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByMillis<OUT>(\n \t\t\t\tpath, format, millis, endTuple), null);\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     return additionalReplacements;\n   }\n  private final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     return additionalReplacements;\n   }\n  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface GridFsEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedGridFsEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface GridFsEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedGridFsEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     @ApiOperation(value = \"test json serialization of form data\", notes = \"\", tags={ \"fake\" })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Void.class) })\n    void testJsonFormData(@FormParam(value = \"param\")  String param,@FormParam(value = \"param2\")  String param2);\n }", "fixed": "     @ApiOperation(value = \"test json serialization of form data\", notes = \"\", tags={ \"fake\" })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Void.class) })\n    void testJsonFormData(@FormParam(value = \"param\")  String param,@FormParam(value = \"param2\")  String param2) throws Exception;\n }", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "d2fe78793f8158678660e24b397b23ad2055b396", "projectName": "eclipse.vert.x", "bugType": "Change Numeric Literal", "problem": "   public static final int DEFAULT_CACHE_MAX_TIME_TO_LIVE = Integer.MAX_VALUE;\n   public static final int DEFAULT_CACHE_NEGATIVE_TIME_TO_LIVE = 0;\n   public static final int DEFAULT_QUERY_TIMEOUT = 5000;\n  public static final int DEFAULT_MAX_QUERIES = 3;\n   public static final boolean DEFAULT_RD_FLAG = true;\n   public static final List<String> DEFAULT_SEACH_DOMAINS = null;\n   public static final boolean DEFAULT_ROUND_ROBIN = false;", "fixed": "   public static final int DEFAULT_CACHE_MAX_TIME_TO_LIVE = Integer.MAX_VALUE;\n   public static final int DEFAULT_CACHE_NEGATIVE_TIME_TO_LIVE = 0;\n   public static final int DEFAULT_QUERY_TIMEOUT = 5000;\n  public static final int DEFAULT_MAX_QUERIES = 4;\n   public static final boolean DEFAULT_RD_FLAG = true;\n   public static final List<String> DEFAULT_SEACH_DOMAINS = null;\n   public static final boolean DEFAULT_ROUND_ROBIN = false;", "sourceBeforeFix": "DEFAULT_MAX_QUERIES=3", "sourceAfterFix": "DEFAULT_MAX_QUERIES=4"}
{"fixCommitSHA1": "3dddcc4cdf4a74ddbd4607c6aaee5bdd8ac46c27", "projectName": "gephi.gephi", "bugType": "Change Modifier", "problem": "     }\n     @Override\n    public List<NodeModel> getSelectedNodes() {\n         List<NodeModel> selected = new ArrayList<>();\n         for (Iterator<NodeModel> itr = octree.getNodeIterator(); itr.hasNext();) {\n             NodeModel nodeModel = itr.next();", "fixed": "     }\n     @Override\n    public synchronized List<NodeModel> getSelectedNodes() {\n         List<NodeModel> selected = new ArrayList<>();\n         for (Iterator<NodeModel> itr = octree.getNodeIterator(); itr.hasNext();) {\n             NodeModel nodeModel = itr.next();", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "55a4b30e72ad36e69499aa5db9b25f63ea7884ac", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "         result.expectedMessageCount(2);\n         MockEndpoint error = getMockEndpoint(\"mock:error\");\n        error.expectedMessageCount(2);\n         MockEndpoint kaboom = getMockEndpoint(\"mock:kaboom\");", "fixed": "         result.expectedMessageCount(2);\n         MockEndpoint error = getMockEndpoint(\"mock:error\");\n        error.expectedMinimumMessageCount(2);\n         MockEndpoint kaboom = getMockEndpoint(\"mock:kaboom\");", "sourceBeforeFix": "error.expectedMessageCount(2)", "sourceAfterFix": "error.expectedMinimumMessageCount(2)"}
{"fixCommitSHA1": "8c5369562390bee531eb35c00744821b0c4821e3", "projectName": "xetorthio.jedis", "bugType": "Wrong Function Name", "problem": "       final double min, final int offset, final int count) {\n     checkIsInMultiOrPipeline();\n     client.zrevrangeByScoreWithScores(key, max, min, offset, count);\n    return getBinaryTupledSet();\n   }\n   @Override", "fixed": "       final double min, final int offset, final int count) {\n     checkIsInMultiOrPipeline();\n     client.zrevrangeByScoreWithScores(key, max, min, offset, count);\n    return getTupledSet();\n   }\n   @Override", "sourceBeforeFix": "getBinaryTupledSet()", "sourceAfterFix": "getTupledSet()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "           \"functions are set.\");\n   \n  private final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "           \"functions are set.\");\n   \n  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "4665dcf9ab41c3c61cd42aad296ebfe518bfa003", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\n \tpublic void glGenTextures (int n, IntBuffer textures) {\n\t\tGL.glGenTexturesEXT(n, textures, Memory.getPosition(textures));\n \t}\n \tpublic int glGetError () {", "fixed": " \t}\n \tpublic void glGenTextures (int n, IntBuffer textures) {\n\t\tGL.glGenTextures(n, textures, Memory.getPosition(textures));\n \t}\n \tpublic int glGetError () {", "sourceBeforeFix": "GL.glGenTexturesEXT(n,toBuffer(textures,offset),0)", "sourceAfterFix": "GL.glGenTextures(n,toBuffer(textures,offset),0)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fa5635c39e3000406103657977b98efa79bd4512", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      * {@inheritDoc}\n      */\n     public List<Trends> getWeeklyTrends(Date date, boolean excludeHashTags) throws TwitterException {\n        return TrendsJSONImpl.createTrendsList(http.get(conf.getSearchBaseURL()\n                 + \"trends/weekly.json?date=\" + toDateStr(date)\n                 + (excludeHashTags ? \"&exclude=hashtags\" : \"\")));\n     }", "fixed": "      * {@inheritDoc}\n      */\n     public List<Trends> getWeeklyTrends(Date date, boolean excludeHashTags) throws TwitterException {\n        return TrendsJSONImpl.createTrendsList(http.get(conf.getRestBaseURL()\n                 + \"trends/weekly.json?date=\" + toDateStr(date)\n                 + (excludeHashTags ? \"&exclude=hashtags\" : \"\")));\n     }", "sourceBeforeFix": "conf.getSearchBaseURL()", "sourceAfterFix": "conf.getRestBaseURL()"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should delete global property from database\n \t */\n \t@Authorized(PrivilegeConstants.PURGE_GLOBAL_PROPERTIES)\n\tpublic void purgeGlobalProperty(GlobalProperty globalProperty) throws APIException;\n \t/**\n \t * Completely remove the given global properties from the database", "fixed": " \t * @should delete global property from database\n \t */\n \t@Authorized(PrivilegeConstants.PURGE_GLOBAL_PROPERTIES)\n\tpublic void purgeGlobalProperty(GlobalProperty globalProperty);\n \t/**\n \t * Completely remove the given global properties from the database", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      * @param task          the task.\n      */\n     @LogMessage(level = Level.ERROR)\n    @Message(id = 15808, value = \"%s caught %s waiting for task %s\")\n     void caughtExceptionWaitingForTask(String className, String exceptionName, String task);\n     /**", "fixed": "      * @param task          the task.\n      */\n     @LogMessage(level = Level.ERROR)\n    @Message(id = 10808, value = \"%s caught %s waiting for task %s\")\n     void caughtExceptionWaitingForTask(String className, String exceptionName, String task);\n     /**", "sourceBeforeFix": "id=15801", "sourceAfterFix": "id=10801"}
{"fixCommitSHA1": "0689e877255da69d9b511cb7cff1878a32bc8860", "projectName": "Alluxio.alluxio", "bugType": "Change Modifier", "problem": "   private static final Logger LOG =\n       LoggerFactory.getLogger(DataServerShortCircuitWriteHandler.class);\n  private static long INVALID_SESSION_ID = -1;\n   \n   private final BlockWorker mBlockWorker;", "fixed": "   private static final Logger LOG =\n       LoggerFactory.getLogger(DataServerShortCircuitWriteHandler.class);\n  private static final long INVALID_SESSION_ID = -1;\n   \n   private final BlockWorker mBlockWorker;", "sourceBeforeFix": "10", "sourceAfterFix": "26"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<Status> getUserTimeline(String id, Paging paging)\n             throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline/\" + id + \".json\",\n                 null, paging.asPostParameterList(), http.isAuthenticationEnabled()));\n     }", "fixed": "      */\n     public ResponseList<Status> getUserTimeline(String id, Paging paging)\n             throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline/\" + id + \".json\",\n                 null, paging.asPostParameterList(), http.isAuthenticationEnabled()));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/home_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/home_timeline.json\",true))"}
{"fixCommitSHA1": "4652223dec1e4cd9f9a2978e4a0e6d4086c3b24a", "projectName": "netty.netty", "bugType": "Change Identifier Used", "problem": "         assertEquals(CONTENT_LENGTH, c.content().readableBytes());\n         assertEquals(\n                 Unpooled.wrappedBuffer(content, content.length - CONTENT_LENGTH, CONTENT_LENGTH),\n                c.content().readBytes(CONTENT_LENGTH));\n         c.release();\n         assertFalse(channel.finish());", "fixed": "         assertEquals(CONTENT_LENGTH, c.content().readableBytes());\n         assertEquals(\n                 Unpooled.wrappedBuffer(content, content.length - CONTENT_LENGTH, CONTENT_LENGTH),\n                c.content().readSlice(CONTENT_LENGTH));\n         c.release();\n         assertFalse(channel.finish());", "sourceBeforeFix": "c.content().readBytes(CONTENT_LENGTH)", "sourceAfterFix": "c.content().readSlice(CONTENT_LENGTH)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "bbb27cf272ba5d2dc74f8f21d1d3a92486e27ee1", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " /*\n * Copyright 2012-2014 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.", "fixed": " /*\n * Copyright 2012-2015 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.", "sourceBeforeFix": "HornetQAutoConfiguration.class", "sourceAfterFix": "HornetQEmbeddedConfigurationFactory.class"}
{"fixCommitSHA1": "fa5635c39e3000406103657977b98efa79bd4512", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      * {@inheritDoc}\n      */\n     public List<Trends> getWeeklyTrends(Date date, boolean excludeHashTags) throws TwitterException {\n        return TrendsJSONImpl.createTrendsList(http.get(conf.getSearchBaseURL()\n                 + \"trends/weekly.json?date=\" + toDateStr(date)\n                 + (excludeHashTags ? \"&exclude=hashtags\" : \"\")));\n     }", "fixed": "      * {@inheritDoc}\n      */\n     public List<Trends> getWeeklyTrends(Date date, boolean excludeHashTags) throws TwitterException {\n        return TrendsJSONImpl.createTrendsList(http.get(conf.getRestBaseURL()\n                 + \"trends/weekly.json?date=\" + toDateStr(date)\n                 + (excludeHashTags ? \"&exclude=hashtags\" : \"\")));\n     }", "sourceBeforeFix": "conf.getSearchBaseURL()", "sourceAfterFix": "conf.getRestBaseURL()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15856, value = \"Invalid url stream.\")\n     String invalidUrlStream();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10856, value = \"Invalid url stream.\")\n     String invalidUrlStream();\n     /**", "sourceBeforeFix": "id=15869", "sourceAfterFix": "id=10869"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  private final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "0a2b272cb8cb45faafd95a3bbc9e9af813620e09", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "     private void clearLockStore(String name) {\n         final NodeEngine nodeEngine = mapService.getMapServiceContext().getNodeEngine();\n        final LockService lockService = nodeEngine.getService(LockService.SERVICE_NAME);\n         if (lockService != null) {\n             final DefaultObjectNamespace namespace = new DefaultObjectNamespace(MapService.SERVICE_NAME, name);\n             lockService.clearLockStore(partitionId, namespace);", "fixed": "     private void clearLockStore(String name) {\n         final NodeEngine nodeEngine = mapService.getMapServiceContext().getNodeEngine();\n        final LockService lockService = nodeEngine.getSharedService(LockService.SERVICE_NAME);\n         if (lockService != null) {\n             final DefaultObjectNamespace namespace = new DefaultObjectNamespace(MapService.SERVICE_NAME, name);\n             lockService.clearLockStore(partitionId, namespace);", "sourceBeforeFix": "nodeEngine.getService(LockService.SERVICE_NAME)", "sourceAfterFix": "nodeEngine.getSharedService(LockService.SERVICE_NAME)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15852, value = \"Caught %s storing deployment content -- %s\")\n     String caughtExceptionStoringDeploymentContent(String exceptionName, Throwable exception);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10852, value = \"Caught %s storing deployment content -- %s\")\n     String caughtExceptionStoringDeploymentContent(String exceptionName, Throwable exception);\n     /**", "sourceBeforeFix": "id=15830", "sourceAfterFix": "id=10830"}
{"fixCommitSHA1": "3a82878c2163e69855a8dac520d1e22971d19ff4", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "         MockEndpoint endpointB = getMockEndpoint(\"mock:b\");\n         MockEndpoint endpointC = getMockEndpoint(\"mock:c\");\n        endpointA.expectedBodiesReceived(\"A blue car!\", \"A blue car, again!\");\n         endpointA.expectedHeaderReceived(\"color\", \"blue\");\n         endpointB.expectedHeaderReceived(\"color\", \"red\");\n         endpointB.expectedBodiesReceived(\"A red car!\");", "fixed": "         MockEndpoint endpointB = getMockEndpoint(\"mock:b\");\n         MockEndpoint endpointC = getMockEndpoint(\"mock:c\");\n        endpointA.expectedBodiesReceivedInAnyOrder(\"A blue car!\", \"A blue car, again!\");\n         endpointA.expectedHeaderReceived(\"color\", \"blue\");\n         endpointB.expectedHeaderReceived(\"color\", \"red\");\n         endpointB.expectedBodiesReceived(\"A red car!\");", "sourceBeforeFix": "endpointA.expectedBodiesReceived(\"A blue car!\",\"A blue car, again!\")", "sourceAfterFix": "endpointA.expectedBodiesReceivedInAnyOrder(\"A blue car!\",\"A blue car, again!\")"}
{"fixCommitSHA1": "eba7e984d0999606f90689ca3b89ee644b1e92a4", "projectName": "Graylog2.graylog2-server", "bugType": "Change Caller in Function Call", "problem": "         stats.order(TermsStatsFacet.ComparatorType.fromString(order.toString().toLowerCase()));\n         stats.size(size);\n        terms.facetFilter(standardFilters(range, filter));\n         srb.addFacet(stats);", "fixed": "         stats.order(TermsStatsFacet.ComparatorType.fromString(order.toString().toLowerCase()));\n         stats.size(size);\n        stats.facetFilter(standardFilters(range, filter));\n         srb.addFacet(stats);", "sourceBeforeFix": "terms.facetFilter(standardFilters(range,filter))", "sourceAfterFix": "stats.facetFilter(standardFilters(range,filter))"}
{"fixCommitSHA1": "e28e3cedad91e10c3c5ca9b1c22a82a16065e5bb", "projectName": "naver.pinpoint", "bugType": "Wrong Function Name", "problem": "             }\n         }\n         if (logger.isInfoEnabled()) {\n            logger.debug(\"defineClass pluginClass:{} cl:{}\", className, classLoader);\n         }\n         final byte[] bytes = ct.toBytecode();\n         return (Class<?>)DEFINE_CLASS.invoke(classLoader, ct.getName(), bytes, 0, bytes.length);", "fixed": "             }\n         }\n         if (logger.isInfoEnabled()) {\n            logger.info(\"defineClass pluginClass:{} cl:{}\", className, classLoader);\n         }\n         final byte[] bytes = ct.toBytecode();\n         return (Class<?>)DEFINE_CLASS.invoke(classLoader, ct.getName(), bytes, 0, bytes.length);", "sourceBeforeFix": "logger.debug(\"defineClass pluginClass:{} cl:{}\",className,classLoader)", "sourceAfterFix": "logger.info(\"defineClass pluginClass:{} cl:{}\",className,classLoader)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "fixed": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "sourceBeforeFix": "GL11.glTexParameter(target,pname,params)", "sourceAfterFix": "GL11.glTexParameterfv(target,pname,params)"}
{"fixCommitSHA1": "5d3b99b2ee5639dc5baaf6d49f76d70c9f3901a2", "projectName": "antlr.antlr4", "bugType": "Same Function More Args", "problem": " \tprotected void enterTerminal(GrammarAST tree) {\n \t\tString text = tree.getText();\n \t\tif (text.equals(\"''\")) {\n\t\t\tg.tool.errMgr.grammarError(ErrorType.EMPTY_STRINGS_AND_SETS_NOT_ALLOWED, g.fileName, tree.token);\n \t\t}\n \t}", "fixed": " \tprotected void enterTerminal(GrammarAST tree) {\n \t\tString text = tree.getText();\n \t\tif (text.equals(\"''\")) {\n\t\t\tg.tool.errMgr.grammarError(ErrorType.EMPTY_STRINGS_AND_SETS_NOT_ALLOWED, g.fileName, tree.token, \"''\");\n \t\t}\n \t}", "sourceBeforeFix": "g.tool.errMgr.grammarError(ErrorType.EMPTY_STRINGS_AND_SETS_NOT_ALLOWED,g.fileName,tree.token)", "sourceAfterFix": "g.tool.errMgr.grammarError(ErrorType.EMPTY_STRINGS_AND_SETS_NOT_ALLOWED,g.fileName,tree.token,\"''\")"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShader(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "fixed": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShaderiv(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "sourceBeforeFix": "GL11.glGetFloat(pname,params)", "sourceAfterFix": "GL11.glGetFloatv(pname,params)"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * @param from The element to copy.\n \t * @return A copy of the given element.\n \t */\n\tpublic T createCopy(T from);\n \t/**\n \t * Creates a copy from the given element, storing the copied result in the given target element.", "fixed": " \t * @param from The element to copy.\n \t * @return A copy of the given element.\n \t */\n\tpublic abstract T createCopy(T from);\n \t/**\n \t * Creates a copy from the given element, storing the copied result in the given target element.", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedInfinispanEndpointBuilder\n             extends\n                 AdvancedInfinispanEndpointConsumerBuilder, AdvancedInfinispanEndpointProducerBuilder {\n         default InfinispanEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedInfinispanEndpointBuilder\n             extends\n                 AdvancedInfinispanEndpointConsumerBuilder, AdvancedInfinispanEndpointProducerBuilder {\n         default InfinispanEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fd2bf7d972c703a603f7ec043b96649347f7e184", "projectName": "facebook.presto", "bugType": "Change Numeric Literal", "problem": "         httpClientBinder(binder).bindHttpClient(\"scheduler\", ForScheduler.class)\n                 .withTracing()\n                 .withConfigDefaults(config -> {\n                    config.setIdleTimeout(new Duration(2, SECONDS));\n                     config.setRequestTimeout(new Duration(10, SECONDS));\n                     config.setMaxConnectionsPerServer(250);\n                 });", "fixed": "         httpClientBinder(binder).bindHttpClient(\"scheduler\", ForScheduler.class)\n                 .withTracing()\n                 .withConfigDefaults(config -> {\n                    config.setIdleTimeout(new Duration(30, SECONDS));\n                     config.setRequestTimeout(new Duration(10, SECONDS));\n                     config.setMaxConnectionsPerServer(250);\n                 });", "sourceBeforeFix": "new Duration(2,SECONDS)", "sourceAfterFix": "new Duration(30,SECONDS)"}
{"fixCommitSHA1": "ce033a15d08bba9cfff373badab1bfe5aba24d1c", "projectName": "clojure.clojure", "bugType": "Change Binary Operator", "problem": " }\n public int absCount(long start, long end, long step) {\n    double c = (end - start) / step;\n     int ic = (int) c;\n    if(c < ic)\n         return ic + 1;\n     else\n         return ic;", "fixed": " }\n public int absCount(long start, long end, long step) {\n    double c = (double) (end - start) / step;\n     int ic = (int) c;\n    if(c > ic)\n         return ic + 1;\n     else\n         return ic;", "sourceBeforeFix": "c < ic", "sourceAfterFix": "c > ic"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface DisruptorEndpointBuilder\n             extends\n                 DisruptorEndpointConsumerBuilder, DisruptorEndpointProducerBuilder {\n         default AdvancedDisruptorEndpointBuilder advanced() {", "fixed": "     \n    public interface DisruptorEndpointBuilder\n             extends\n                 DisruptorEndpointConsumerBuilder, DisruptorEndpointProducerBuilder {\n         default AdvancedDisruptorEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites() throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"favorites.json\", new PostParameter[0], true));\n     }\n     /**", "fixed": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites() throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"favorites.json\", new PostParameter[0], true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/public_timeline.json\",false))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/public_timeline.json\",false))"}
{"fixCommitSHA1": "3691be4c1f9974b445e682c6d290306700eab602", "projectName": "Atmosphere.atmosphere", "bugType": "Wrong Function Name", "problem": "             final Map<String, String> m = new HashMap<String, String>();\n             for (Map.Entry<String,AtmosphereHandlerWrapper> e : config.handlers().entrySet()) {\n                 UriTemplate t = new UriTemplate(e.getKey());\n                logger.trace(\"Trying to map {} to {}\", t, path);\n                 if (t.match(path, m)) {\n                     atmosphereHandlerWrapper = e.getValue();\n                     logger.trace(\"Mapped {} to {}\", t, e.getValue());", "fixed": "             final Map<String, String> m = new HashMap<String, String>();\n             for (Map.Entry<String,AtmosphereHandlerWrapper> e : config.handlers().entrySet()) {\n                 UriTemplate t = new UriTemplate(e.getKey());\n                logger.debug(\"Trying to map {} to {}\", t, path);\n                 if (t.match(path, m)) {\n                     atmosphereHandlerWrapper = e.getValue();\n                     logger.trace(\"Mapped {} to {}\", t, e.getValue());", "sourceBeforeFix": "logger.trace(\"Trying to map {} to {}\",t,path)", "sourceAfterFix": "logger.debug(\"Trying to map {} to {}\",t,path)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "fixed": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniformfv(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniformiv(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "sourceBeforeFix": "EXTFramebufferObject.glGetFramebufferAttachmentParameterEXT(target,attachment,pname,params)", "sourceAfterFix": "EXTFramebufferObject.glGetFramebufferAttachmentParameterivEXT(target,attachment,pname,params)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": " };\n   \n  private final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler", "fixed": " };\n   \n  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<Status> getHomeTimeline(Paging paging) throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/home_timeline.json\", null, paging.asPostParameterList(), true));\n     }\n     /**", "fixed": "      */\n     public ResponseList<Status> getHomeTimeline(Paging paging) throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/home_timeline.json\", null, paging.asPostParameterList(), true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites/\" + id+ \".json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites/\" + id+ \".json\",new PostParameter[0],true))"}
{"fixCommitSHA1": "a295b91c37f681199a83fdb963344c19e0d015c0", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "     protected void handleMapTryLock(String[] args) {\n         String key = args[1];\n        long time = (args.length > 2) ? Long.valueOf(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMap().tryLock(key);", "fixed": "     protected void handleMapTryLock(String[] args) {\n         String key = args[1];\n        long time = (args.length > 2) ? Long.parseLong(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMap().tryLock(key);", "sourceBeforeFix": "Long.valueOf(args[2])", "sourceAfterFix": "Long.parseLong(args[2])"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform2iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toIntBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform3f (int location, float x, float y, float z) {\r", "fixed": " \t}\r\n \tpublic void glUniform2iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform2iv(location, v);\r\n \t}\r\n \tpublic void glUniform2iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform2iv(location, toIntBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform3f (int location, float x, float y, float z) {\r", "sourceBeforeFix": "GL20.glGetUniform(program,location,params)", "sourceAfterFix": "GL20.glGetUniformfv(program,location,params)"}
{"fixCommitSHA1": "2e3328d3b849d29df6afd79a9d803a2ccb71793d", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "                 findPathInPairList(recursiveUFSDeletes, ancestor);\n             while (ancestor != null && ancestorPair != null) {\n               toAdd.add(ancestorPair);\n              recursiveUFSDeletes.remove(ancestor);\n               ancestor = ancestor.getParent();\n               ancestorPair = findPathInPairList(recursiveUFSDeletes, ancestor);\n             }", "fixed": "                 findPathInPairList(recursiveUFSDeletes, ancestor);\n             while (ancestor != null && ancestorPair != null) {\n               toAdd.add(ancestorPair);\n              recursiveUFSDeletes.remove(ancestorPair);\n               ancestor = ancestor.getParent();\n               ancestorPair = findPathInPairList(recursiveUFSDeletes, ancestor);\n             }", "sourceBeforeFix": "recursiveUFSDeletes.remove(ancestor)", "sourceAfterFix": "recursiveUFSDeletes.remove(ancestorPair)"}
{"fixCommitSHA1": "5f66fbd181273bff71207c060123a197664c23e1", "projectName": "thinkaurelius.titan", "bugType": "Change Modifier", "problem": " \t}\n \t@Override\n\tpublic void forceDelete() {\n \t\tsuper.forceDelete();\n \t\tentity.remove();\n \t}", "fixed": " \t}\n \t@Override\n\tpublic synchronized void forceDelete() {\n \t\tsuper.forceDelete();\n \t\tentity.remove();\n \t}", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "cb84b2788aeed6aad2bc4b1acb98290e060861e2", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "       Assert.assertEquals(2, result.size());\n       hbck.assigns(Arrays.asList(result.keySet().toArray(new String[0])).stream()\n           .map(regionName -> regionName.split(\"\\\\.\")[1]).collect(Collectors.toList()));\n      ProcedureTestingUtility.waitNoProcedureRunning(master.getMasterProcedureExecutor());\n       result = hbck.getFailedSplitMergeLegacyRegions(Arrays.asList(TableName.valueOf(testTable)));\n       Assert.assertEquals(0, result.size());", "fixed": "       Assert.assertEquals(2, result.size());\n       hbck.assigns(Arrays.asList(result.keySet().toArray(new String[0])).stream()\n           .map(regionName -> regionName.split(\"\\\\.\")[1]).collect(Collectors.toList()));\n      ProcedureTestingUtility.waitAllProcedures(master.getMasterProcedureExecutor());\n       result = hbck.getFailedSplitMergeLegacyRegions(Arrays.asList(TableName.valueOf(testTable)));\n       Assert.assertEquals(0, result.size());", "sourceBeforeFix": "ProcedureTestingUtility.waitNoProcedureRunning(master.getMasterProcedureExecutor())", "sourceAfterFix": "ProcedureTestingUtility.waitAllProcedures(master.getMasterProcedureExecutor())"}
{"fixCommitSHA1": "46941b16a30e493238924701f938cbf3318eb355", "projectName": "Alluxio.alluxio", "bugType": "Same Function More Args", "problem": "    * @param manager a block metadata manager handle\n    */\n   private BlockStoreMeta(BlockMetadataManager manager, boolean shouldIncludeBlockIds) {\n    Preconditions.checkNotNull(manager);\n     for (StorageTier tier : manager.getTiers()) {\n       Long capacityBytes = mCapacityBytesOnTiers.get(tier.getTierAlias());\n       Long usedBytes = mUsedBytesOnTiers.get(tier.getTierAlias());", "fixed": "    * @param manager a block metadata manager handle\n    */\n   private BlockStoreMeta(BlockMetadataManager manager, boolean shouldIncludeBlockIds) {\n    Preconditions.checkNotNull(manager, \"manager\");\n     for (StorageTier tier : manager.getTiers()) {\n       Long capacityBytes = mCapacityBytesOnTiers.get(tier.getTierAlias());\n       Long usedBytes = mUsedBytesOnTiers.get(tier.getTierAlias());", "sourceBeforeFix": "Preconditions.checkNotNull(mBlockIdsOnTiers)", "sourceAfterFix": "Preconditions.checkNotNull(mBlockIdsOnTiers,\"mBlockIdsOnTiers\")"}
{"fixCommitSHA1": "9467bef8ea9a62658b32dd43a76f4f98087d1986", "projectName": "apache.hadoop", "bugType": "Change Unary Operator\t", "problem": "     KeyShell ks = new KeyShell();\n     ks.setConf(new Configuration());\n     rc = ks.run(args1);\n    assertEquals(-1, rc);\n     assertTrue(outContent.toString().contains(\"key1 has not been created.\"));\n   }", "fixed": "     KeyShell ks = new KeyShell();\n     ks.setConf(new Configuration());\n     rc = ks.run(args1);\n    assertEquals(1, rc);\n     assertTrue(outContent.toString().contains(\"key1 has not been created.\"));\n   }", "sourceBeforeFix": "-1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AtomixMessagingEndpointBuilder\n             extends\n                 AtomixMessagingEndpointConsumerBuilder, AtomixMessagingEndpointProducerBuilder {\n         default AdvancedAtomixMessagingEndpointBuilder advanced() {", "fixed": "     \n    public interface AtomixMessagingEndpointBuilder\n             extends\n                 AtomixMessagingEndpointConsumerBuilder, AtomixMessagingEndpointProducerBuilder {\n         default AdvancedAtomixMessagingEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "c98bab51de22a20990ff8805825e8638e0686464", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "   @Test\n   public void testOnlineConfigChange() throws IOException {\n     LOG.debug(\"Starting the test\");\n    Admin admin = TEST_UTIL.getHBaseAdmin();\n     ServerName server = TEST_UTIL.getHBaseCluster().getRegionServer(0).getServerName();\n     admin.updateConfiguration(server);\n   }", "fixed": "   @Test\n   public void testOnlineConfigChange() throws IOException {\n     LOG.debug(\"Starting the test\");\n    Admin admin = TEST_UTIL.getAdmin();\n     ServerName server = TEST_UTIL.getHBaseCluster().getRegionServer(0).getServerName();\n     admin.updateConfiguration(server);\n   }", "sourceBeforeFix": "TEST_UTIL.getHBaseAdmin()", "sourceAfterFix": "TEST_UTIL.getAdmin()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15837, value = \"One of the groups does not define neither \" + SERVER_GROUP + \" nor \" + CONCURRENT_GROUPS + \": %s\")\n     String unexpectedInSeriesGroup(String rolloutPlan);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10837, value = \"One of the groups does not define neither \" + SERVER_GROUP + \" nor \" + CONCURRENT_GROUPS + \": %s\")\n     String unexpectedInSeriesGroup(String rolloutPlan);\n     /**", "sourceBeforeFix": "id=15834", "sourceAfterFix": "id=10834"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getUserTimeline(String id) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline/\" + id + \".json\", http.isAuthenticationEnabled()));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getUserTimeline(String id) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline/\" + id + \".json\", http.isAuthenticationEnabled()));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_to_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_to_me.json\",null,true))"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "      * Advanced builder for endpoint for the AWS Simple Notification System\n      * component.\n      */\n    public static interface AdvancedSnsEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default SnsEndpointBuilder basic() {", "fixed": "      * Advanced builder for endpoint for the AWS Simple Notification System\n      * component.\n      */\n    public interface AdvancedSnsEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default SnsEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "41467c8004b716fb78002c3139ea771b70ed165d", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tprivate void renderCached () {\r\n\t\tcache5.setColor(red);\r\n \t\tcache5.draw(spriteBatch);\r\n \t\tcache1.draw(spriteBatch);\r", "fixed": " \t}\r\n \tprivate void renderCached () {\r\n\t\tcache5.setColors(red);\r\n \t\tcache5.draw(spriteBatch);\r\n \t\tcache1.draw(spriteBatch);\r", "sourceBeforeFix": "cacheScaled5.setColor(red)", "sourceAfterFix": "cacheScaled5.setColors(red)"}
{"fixCommitSHA1": "b3203058be9aba7abbbfa8091413a75603b270bc", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \tSkipPatternJarScanner(JarScanner jarScanner, Set<String> patterns) {\n \t\tAssert.notNull(jarScanner, \"JarScanner must not be null\");\n\t\tAssert.notNull(jarScanner, \"Patterns must not be null\");\n \t\tthis.jarScanner = jarScanner;\n \t\tthis.patterns = patterns;\n \t\tsetPatternToTomcat8SkipFilter();", "fixed": " \tSkipPatternJarScanner(JarScanner jarScanner, Set<String> patterns) {\n \t\tAssert.notNull(jarScanner, \"JarScanner must not be null\");\n\t\tAssert.notNull(patterns, \"Patterns must not be null\");\n \t\tthis.jarScanner = jarScanner;\n \t\tthis.patterns = patterns;\n \t\tsetPatternToTomcat8SkipFilter();", "sourceBeforeFix": "Assert.notNull(jarScanner,\"Patterns must not be null\")", "sourceAfterFix": "Assert.notNull(patterns,\"Patterns must not be null\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "dbd841562137595e365ccf2ad1524ecfdee958c9", "projectName": "google.auto", "bugType": "Change Identifier Used", "problem": "                 publicType,\n                 ImmutableSet.copyOf(entry.getValue()),\n                implemetationMethodDescriptors.build()));\n       } catch (IOException e) {\n         messager.printMessage(Kind.ERROR, \"failed\");\n       }", "fixed": "                 publicType,\n                 ImmutableSet.copyOf(entry.getValue()),\n                implementationMethodDescriptors.build()));\n       } catch (IOException e) {\n         messager.printMessage(Kind.ERROR, \"failed\");\n       }", "sourceBeforeFix": "ImmutableSet.Builder<ImplemetationMethodDescriptor>", "sourceAfterFix": "ImmutableSet.Builder<ImplementationMethodDescriptor>"}
{"fixCommitSHA1": "4665dcf9ab41c3c61cd42aad296ebfe518bfa003", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\n \tpublic void glBindTexture (int target, int texture) {\n\t\tGL.glBindTextureEXT(target, texture);\n \t}\n \tpublic void glBlendFunc (int sfactor, int dfactor) {", "fixed": " \t}\n \tpublic void glBindTexture (int target, int texture) {\n\t\tGL.glBindTexture(target, texture);\n \t}\n \tpublic void glBlendFunc (int sfactor, int dfactor) {", "sourceBeforeFix": "GL.glBindTextureEXT(target,texture)", "sourceAfterFix": "GL.glBindTexture(target,texture)"}
{"fixCommitSHA1": "4a19c2c078ddf5484e0cb8c1ac075451f158fa40", "projectName": "Atmosphere.atmosphere", "bugType": "Change Unary Operator\t", "problem": "                 case BEFORE_DEFAULT:\n                     switch (p2) {\n                         case AFTER_DEFAULT:\n                            orderResult = 1;\n                             break;\n                         case FIRST_BEFORE_DEFAULT:\n                            orderResult = -1;\n                             break;\n                     }\n                     break;", "fixed": "                 case BEFORE_DEFAULT:\n                     switch (p2) {\n                         case AFTER_DEFAULT:\n                            orderResult = -1;\n                             break;\n                         case FIRST_BEFORE_DEFAULT:\n                            orderResult = 1;\n                             break;\n                     }\n                     break;", "sourceBeforeFix": "1", "sourceAfterFix": "-1"}
{"fixCommitSHA1": "e1d89ddbf6028369fd3117ff648fc6f16a1786fe", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "                     LOG.warn(\"OpenTracing: could not find managed span for exchange=\" + exchange);\n                 }\n             } catch (Throwable t) {\n                LOG.error(\"OpenTracing: Failed to capture tracing data\", t);\n             }\n         }\n     }", "fixed": "                     LOG.warn(\"OpenTracing: could not find managed span for exchange=\" + exchange);\n                 }\n             } catch (Throwable t) {\n                LOG.warn(\"OpenTracing: Failed to capture tracing data\", t);\n             }\n         }\n     }", "sourceBeforeFix": "LOG.error(\"OpenTracing: Failed to capture tracing data\",t)", "sourceAfterFix": "LOG.warn(\"OpenTracing: Failed to capture tracing data\",t)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface KubernetesNodesEndpointBuilder\n             extends\n                 KubernetesNodesEndpointConsumerBuilder, KubernetesNodesEndpointProducerBuilder {\n         default AdvancedKubernetesNodesEndpointBuilder advanced() {", "fixed": "     \n    public interface KubernetesNodesEndpointBuilder\n             extends\n                 KubernetesNodesEndpointConsumerBuilder, KubernetesNodesEndpointProducerBuilder {\n         default AdvancedKubernetesNodesEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 15872, value = \"Invalid code %d\")\n     IllegalArgumentException invalidCode(int code);\n }", "fixed": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 10872, value = \"Invalid code %d\")\n     IllegalArgumentException invalidCode(int code);\n }", "sourceBeforeFix": "id=15857", "sourceAfterFix": "id=10857"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<Status> getFriendsTimeline() throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\", true));\n     }\n     /**", "fixed": "      */\n     public ResponseList<Status> getFriendsTimeline() throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\", true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_to_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_to_me.json\",null,true))"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "fixed": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "sourceBeforeFix": "GL11.glTexParameter(target,pname,params)", "sourceAfterFix": "GL11.glTexParameterfv(target,pname,params)"}
{"fixCommitSHA1": "af87fe0e2580cafb6b563688f119b3d40ae100f2", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "                     new ModelNode[] { removeDwm, removeContext });\n             mcc.execute(compositeOp);\n             ServerReload.executeReloadAndWaitForCompletion(mcc, 60000, false,\n                    TestSuiteEnvironment.getServerAddress(), serverPort);\n         }\n         protected abstract Policy getPolicy();", "fixed": "                     new ModelNode[] { removeDwm, removeContext });\n             mcc.execute(compositeOp);\n             ServerReload.executeReloadAndWaitForCompletion(mcc, 60000, false,\n                    CONTAINER_0.equals(containerId) ? TestSuiteEnvironment.getServerAddress() : TestSuiteEnvironment.getServerAddressNode1(),\n                    serverPort);\n         }\n         protected abstract Policy getPolicy();", "sourceBeforeFix": "TestSuiteEnvironment.getServerAddress()", "sourceAfterFix": "TestSuiteEnvironment.getServerAddressNode1()"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedAtomixMultiMapEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default AtomixMultiMapEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedAtomixMultiMapEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default AtomixMultiMapEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15852, value = \"Caught %s storing deployment content -- %s\")\n     String caughtExceptionStoringDeploymentContent(String exceptionName, Throwable exception);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10852, value = \"Caught %s storing deployment content -- %s\")\n     String caughtExceptionStoringDeploymentContent(String exceptionName, Throwable exception);\n     /**", "sourceBeforeFix": "id=15867", "sourceAfterFix": "id=10867"}
{"fixCommitSHA1": "58a85ddcb5c3ad5bee1a893862b0c31c4e731dbd", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \tprotected IOSApplication createApplication() {\n \t\tIOSApplicationConfiguration config = new IOSApplicationConfiguration();\r\n \t\tconfig.useAccelerometer = false;\n\t\treturn new IOSApplication(new BulletTestCollection(), config);\n \t}\n \tpublic static void main(String[] argv) {", "fixed": " \tprotected IOSApplication createApplication() {\n \t\tIOSApplicationConfiguration config = new IOSApplicationConfiguration();\r\n \t\tconfig.useAccelerometer = false;\n\t\treturn new IOSApplication(new Box2DTestCollection(), config);\n \t}\n \tpublic static void main(String[] argv) {", "sourceBeforeFix": "new BulletTestCollection()", "sourceAfterFix": "new Box2DTestCollection()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15869, value = \"Unknown %s %s\")\n     String unknown(String name, String value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10869, value = \"Unknown %s %s\")\n     String unknown(String name, String value);\n     /**", "sourceBeforeFix": "id=15835", "sourceAfterFix": "id=10835"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedClientEndpointBuilder\n             extends\n                 AdvancedClientEndpointConsumerBuilder, AdvancedClientEndpointProducerBuilder {\n         default ClientEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedClientEndpointBuilder\n             extends\n                 AdvancedClientEndpointConsumerBuilder, AdvancedClientEndpointProducerBuilder {\n         default ClientEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "d992605788f97bbb0cbe4d43087a164046a6a80b", "projectName": "nhaarman.ListViewAnimations", "bugType": "More Specific If", "problem": "         boolean found = false;\n         for (int i = 0; i < mAbsListView.getChildCount() && !found; i++) {\n             View childView = mAbsListView.getChildAt(i);\n            if (mAbsListView.getPositionForView(childView) == position) {\n                 found = true;\n                 toggle(((ViewHolder) childView.getTag()).contentParent);\n             }", "fixed": "         boolean found = false;\n         for (int i = 0; i < mAbsListView.getChildCount() && !found; i++) {\n             View childView = mAbsListView.getChildAt(i);\n            if (mAbsListView.getPositionForView(childView) == position && childView.getTag() instanceof ViewHolder) {\n                 found = true;\n                 toggle(((ViewHolder) childView.getTag()).contentParent);\n             }", "sourceBeforeFix": "mAbsListView.getPositionForView(childView) == position", "sourceAfterFix": "mAbsListView.getPositionForView(childView) == position && childView.getTag() instanceof ViewHolder"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getFavorites(String id, int page) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"favorites/\" + id + \".json\", \"page\", String.valueOf(page), true));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getFavorites(String id, int page) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"favorites/\" + id + \".json\", \"page\", String.valueOf(page), true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/home_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/home_timeline.json\",true))"}
{"fixCommitSHA1": "9716d2ae673a576cb345c3bfb24cf71654d8f112", "projectName": "openhab.openhab", "bugType": "Change Identifier Used", "problem": " \t\tpollResetFuture = pollService.schedule(new Runnable() {\n \t\t\tpublic void run() {\n\t\t\t\tlogger.debug(\"rapidRefreshFutureEnd stopping\");\n \t\t\t\tschedulePoll(refreshInterval);\n \t\t\t}\n \t\t}, MAX_RAPID_REFRESH, TimeUnit.MILLISECONDS);", "fixed": " \t\tpollResetFuture = pollService.schedule(new Runnable() {\n \t\t\tpublic void run() {\n\t\t\t\tlogger.trace(\"rapidRefreshFutureEnd stopping\");\n \t\t\t\tschedulePoll(refreshInterval);\n \t\t\t}\n \t\t}, MAX_RAPID_REFRESH, TimeUnit.MILLISECONDS);", "sourceBeforeFix": "logger.debug(\"Invalid Account Credentials\")", "sourceAfterFix": "logger.trace(\"Invalid Account Credentials\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e0617be01454b663de5e21ae73f0f1d61b504da0", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t\treturn this;\n \t}\n\tpublic ResultPartitionBuilder setNetworkBufferSize(int networkBufferSize) {\n \t\tthis.networkBufferSize = networkBufferSize;\n \t\treturn this;\n \t}", "fixed": " \t\treturn this;\n \t}\n\tResultPartitionBuilder setNetworkBufferSize(int networkBufferSize) {\n \t\tthis.networkBufferSize = networkBufferSize;\n \t\treturn this;\n \t}", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e0fed4569f1a6d111166eab0d4d07b9d20cf031c", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "         private Cache<String, String> cache;\n         private ScheduledFuture<?> future;\n        public EmbeddedCacheService(Cache<String, String> cache) {\n             this.cache = cache;\n             this.future = null;\n         }", "fixed": "         private Cache<String, String> cache;\n         private ScheduledFuture<?> future;\n        EmbeddedCacheService(Cache<String, String> cache) {\n             this.cache = cache;\n             this.future = null;\n         }", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "e81be4536f5156b105fff4b7328fc3e4e7a24931", "projectName": "junit-team.junit", "bugType": "Same Function Less Args", "problem": "         }\n         Method suiteMethod = null;\n         try {\n            suiteMethod = testClass.getMethod(SUITE_METHODNAME, new Class[0]);\n         } catch (Exception e) {\n             clearStatus();", "fixed": "         }\n         Method suiteMethod = null;\n         try {\n            suiteMethod = testClass.getMethod(SUITE_METHODNAME);\n         } catch (Exception e) {\n             clearStatus();", "sourceBeforeFix": "testClass.getMethod(SUITE_METHODNAME,new Class[0])", "sourceAfterFix": "testClass.getMethod(SUITE_METHODNAME)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "fixed": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttribfv(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttribiv(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "sourceBeforeFix": "GL20.glUniform2(location,v)", "sourceAfterFix": "GL20.glUniform2fv(location,v)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getMentions(Paging paging) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getMentions(Paging paging) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": " };\n   \n  private final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler", "fixed": " };\n   \n  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStream<OUT> writeAsCsv(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsCsv<OUT> format, long millis, OUT endTuple) {\n\t\tDataStream<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByMillis<OUT>(\n \t\t\t\tpath, format, millis, endTuple));\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "fixed": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStreamSink<OUT> writeAsCsv(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsCsv<OUT> format, long millis, OUT endTuple) {\n\t\tDataStreamSink<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByMillis<OUT>(\n \t\t\t\tpath, format, millis, endTuple));\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     return additionalReplacements;\n   }\n  private final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     return additionalReplacements;\n   }\n  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "486b290863a66641b0ec30dbf2d9e349733cae44", "projectName": "apache.hbase", "bugType": "Wrong Function Name", "problem": "    */\n   public void flush(final String tableNameOrRegionName)\n   throws IOException, InterruptedException {\n    flush(Bytes.toBytesBinary(tableNameOrRegionName));\n   }\n   /**", "fixed": "    */\n   public void flush(final String tableNameOrRegionName)\n   throws IOException, InterruptedException {\n    flush(Bytes.toBytes(tableNameOrRegionName));\n   }\n   /**", "sourceBeforeFix": "Bytes.toBytesBinary(tableNameOrRegionName)", "sourceAfterFix": "Bytes.toBytes(tableNameOrRegionName)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15833, value = \"%s is missing %s: %s\")\n     String requiredChildIsMissing(String parent, String child, String parentSpec);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10833, value = \"%s is missing %s: %s\")\n     String requiredChildIsMissing(String parent, String child, String parentSpec);\n     /**", "sourceBeforeFix": "id=15872", "sourceAfterFix": "id=10872"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public List<Trends> getWeeklyTrends() throws TwitterException {\n        return Trends.constructTrendsList(get(getSearchBaseURL()\n                 + \"trends/weekly.json\", false));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public List<Trends> getWeeklyTrends() throws TwitterException {\n        return Trends.createTrendsList(get(getSearchBaseURL()\n                 + \"trends/weekly.json\", false));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))"}
{"fixCommitSHA1": "cd750463fa622ca2ba5c60e3b54aeceb8d29e4f8", "projectName": "druid-io.druid", "bugType": "Change Numeric Literal", "problem": "           {\n             binder.bindConstant().annotatedWith(Names.named(\"serviceName\")).to(\"druid/indexer\");\n             binder.bindConstant().annotatedWith(Names.named(\"servicePort\")).to(8091);\n            binder.bindConstant().annotatedWith(Names.named(\"tlsServicePort\")).to(8091);\n             IndexingServiceModuleHelper.configureTaskRunnerConfigs(binder);", "fixed": "           {\n             binder.bindConstant().annotatedWith(Names.named(\"serviceName\")).to(\"druid/indexer\");\n             binder.bindConstant().annotatedWith(Names.named(\"servicePort\")).to(8091);\n            binder.bindConstant().annotatedWith(Names.named(\"tlsServicePort\")).to(8291);\n             IndexingServiceModuleHelper.configureTaskRunnerConfigs(binder);", "sourceBeforeFix": "binder.bindConstant().annotatedWith(Names.named(\"tlsServicePort\")).to(8091)", "sourceAfterFix": "binder.bindConstant().annotatedWith(Names.named(\"tlsServicePort\")).to(8291)"}
{"fixCommitSHA1": "a448fc53877d025130f05b8738d8104c66139fbb", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t\t\t\t\tif (comparison != 0) {\n \t\t\t\t\t\treturn comparison;\n \t\t\t\t\t}\n\t\t\t\t\treturn (int) (sr0.getValue().f1 - sr1.getValue().f1);\n \t\t\t\t}\n \t\t\t}\n \t\t}", "fixed": " \t\t\t\t\tif (comparison != 0) {\n \t\t\t\t\t\treturn comparison;\n \t\t\t\t\t}\n\t\t\t\t\treturn (int) (sr0.getValue().f2 - sr1.getValue().f2);\n \t\t\t\t}\n \t\t\t}\n \t\t}", "sourceBeforeFix": "sr0.getValue().f1", "sourceAfterFix": "sr0.getValue().f2"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "ddb852cdf7da29827fcab0b25a2b2ed6ee443cf9", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "      * <p/>\n      * This is similar to how multicast processor does.\n      */\n    static final class PreparedErrorHandler extends KeyValueHolder<RouteContext, Processor> {\n        PreparedErrorHandler(RouteContext key, Processor value) {\n             super(key, value);\n         }", "fixed": "      * <p/>\n      * This is similar to how multicast processor does.\n      */\n    static final class PreparedErrorHandler extends KeyValueHolder<String, Processor> {\n        PreparedErrorHandler(String key, Processor value) {\n             super(key, value);\n         }", "sourceBeforeFix": "KeyValueHolder<RouteContext,Processor>", "sourceAfterFix": "KeyValueHolder<String,Processor>"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedMina2EndpointBuilder\n             extends\n                 AdvancedMina2EndpointConsumerBuilder, AdvancedMina2EndpointProducerBuilder {\n         default Mina2EndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedMina2EndpointBuilder\n             extends\n                 AdvancedMina2EndpointConsumerBuilder, AdvancedMina2EndpointProducerBuilder {\n         default Mina2EndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "80ae0c0b7908424e7f6fef38d3dd5aa3a173347a", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "     private void peekMessage(Message mail) {\n        if (mail.getClass().getName().startsWith(\"IMAP\")) {\n             try {\n                 LOG.trace(\"Calling setPeek(true) on mail message {}\", mail);\n                 IntrospectionSupport.setProperty(mail, \"peek\", true);", "fixed": "     private void peekMessage(Message mail) {\n        if (mail.getClass().getSimpleName().startsWith(\"IMAP\")) {\n             try {\n                 LOG.trace(\"Calling setPeek(true) on mail message {}\", mail);\n                 IntrospectionSupport.setProperty(mail, \"peek\", true);", "sourceBeforeFix": "mail.getClass().getName()", "sourceAfterFix": "mail.getClass().getSimpleName()"}
{"fixCommitSHA1": "c4b0fd69f64869db0c26e9389e4d511c6ce53d1d", "projectName": "neo4j.neo4j", "bugType": "Less Specific If", "problem": "      */\n     public String getVersion()\n     {\n        if ( version == null )\n         {\n             return \"<unknown>\";\n         }", "fixed": "      */\n     public String getVersion()\n     {\n        if ( version == null || version.equals( \"\" ) )\n         {\n             return \"<unknown>\";\n         }", "sourceBeforeFix": "version == null", "sourceAfterFix": "version == null || version.equals(\"\")"}
{"fixCommitSHA1": "6031e948694c50252def3e1df5a65323567e03ed", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "         super.compare(modelA, modelB);\n        assertRemoveSubsystemResources(servicesA);\n     }", "fixed": "         super.compare(modelA, modelB);\n        assertRemoveSubsystemResources(servicesB);\n     }", "sourceBeforeFix": "assertRemoveSubsystemResources(servicesA)", "sourceAfterFix": "assertRemoveSubsystemResources(servicesB)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     return additionalReplacements;\n   }\n  private final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     return additionalReplacements;\n   }\n  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "ce8d80dd2543eaa821e861969cfb53b9b3a666de", "projectName": "alibaba.fastjson", "bugType": "Less Specific If", "problem": "                }\n                superClass = superClass.getSuperclass();\n               if (superClass == Object.class) {\n                    break;\n                }\n             }", "fixed": "                }\n                superClass = superClass.getSuperclass();\n               if (superClass == Object.class || superClass == null) {\n                    break;\n                }\n             }", "sourceBeforeFix": "superClass == Object.class", "sourceAfterFix": "superClass == Object.class || superClass == null"}
{"fixCommitSHA1": "e04cbbf23e9273cca31b1cc12142e34fae753542", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "         }\n         \n        void reportPrivateCtor() {\n             withPrivateCtor = true;\n         }\n         \n        void reportNonPrivateCtor() {\n             withNonPrivateCtor = true;\n         }", "fixed": "         }\n         \n        private void reportPrivateCtor() {\n             withPrivateCtor = true;\n         }\n         \n        private void reportNonPrivateCtor() {\n             withNonPrivateCtor = true;\n         }", "sourceBeforeFix": "0", "sourceAfterFix": "2"}
{"fixCommitSHA1": "9fc02469522f77d08bd814f383c3dbf59977b39b", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "       Logger.getLogger(SourceMapInput.class.getName());\n   private SourceFile sourceFile;\n  private volatile SourceMapConsumerV3 parsedSourceMap = null;\n   public SourceMapInput(SourceFile sourceFile) {\n     this.sourceFile = sourceFile;", "fixed": "       Logger.getLogger(SourceMapInput.class.getName());\n   private SourceFile sourceFile;\n  private SourceMapConsumerV3 parsedSourceMap = null;\n   public SourceMapInput(SourceFile sourceFile) {\n     this.sourceFile = sourceFile;", "sourceBeforeFix": "66", "sourceAfterFix": "2"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15841, value = \"Exception getting result from server %s: %s\")\n     String exceptionAwaitingResultFromServer(ServerIdentity server, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10841, value = \"Exception getting result from server %s: %s\")\n     String exceptionAwaitingResultFromServer(ServerIdentity server, String message);\n     /**", "sourceBeforeFix": "id=15830", "sourceAfterFix": "id=10830"}
{"fixCommitSHA1": "85f06101fa691a3391f4dda25c50cbab6814c542", "projectName": "hazelcast.hazelcast", "bugType": "Change Numeric Literal", "problem": "      */\n     private static class TargetOperation extends AbstractOperation {\n         public void run() throws InterruptedException {\n            Thread.sleep(5000);\n         }\n     }", "fixed": "      */\n     private static class TargetOperation extends AbstractOperation {\n         public void run() throws InterruptedException {\n            Thread.sleep(10000);\n         }\n     }", "sourceBeforeFix": "Thread.sleep(5000)", "sourceAfterFix": "Thread.sleep(10000)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface Olingo4EndpointBuilder\n             extends\n                 Olingo4EndpointConsumerBuilder, Olingo4EndpointProducerBuilder {\n         default AdvancedOlingo4EndpointBuilder advanced() {", "fixed": "     \n    public interface Olingo4EndpointBuilder\n             extends\n                 Olingo4EndpointConsumerBuilder, Olingo4EndpointProducerBuilder {\n         default AdvancedOlingo4EndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getFavorites(String id, int page) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"favorites/\" + id + \".json\", \"page\", String.valueOf(page), true));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getFavorites(String id, int page) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"favorites/\" + id + \".json\", \"page\", String.valueOf(page), true));\n     }\n     /**", "sourceBeforeFix": "DirectMessage.constructDirectMessages(get(getBaseURL() + \"direct_messages.json\",true))", "sourceAfterFix": "DirectMessage.createDirectMessageList(get(getBaseURL() + \"direct_messages.json\",true))"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<Status> getPublicTimeline() throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() +\n                 \"statuses/public_timeline.json\", false));\n     }", "fixed": "      */\n     public ResponseList<Status> getPublicTimeline() throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() +\n                 \"statuses/public_timeline.json\", false));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))"}
{"fixCommitSHA1": "c5e7dea98700e040d6dd872015b8dac472b9aa2d", "projectName": "checkstyle.checkstyle", "bugType": "Wrong Function Name", "problem": "     public void testGetRequiredTokens() {\n         MutableExceptionCheck obj = new MutableExceptionCheck();\n         int[] expected = {TokenTypes.CLASS_DEF, TokenTypes.VARIABLE_DEF};\n        assertArrayEquals(expected, obj.getAcceptableTokens());\n     }\n }", "fixed": "     public void testGetRequiredTokens() {\n         MutableExceptionCheck obj = new MutableExceptionCheck();\n         int[] expected = {TokenTypes.CLASS_DEF, TokenTypes.VARIABLE_DEF};\n        assertArrayEquals(expected, obj.getRequiredTokens());\n     }\n }", "sourceBeforeFix": "obj.getAcceptableTokens()", "sourceAfterFix": "obj.getRequiredTokens()"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n \t * @param toCompare The element to set as the comparison reference.\n \t */\n\tpublic void setReference(T toCompare);\n \t/**\n \t * Checks, whether the given element is equal to the element that has been set as the comparison", "fixed": " \t * \n \t * @param toCompare The element to set as the comparison reference.\n \t */\n\tpublic abstract void setReference(T toCompare);\n \t/**\n \t * Checks, whether the given element is equal to the element that has been set as the comparison", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "dc504c01fd9f55995cf59660de88fb2f9190057d", "projectName": "Bukkit.Bukkit", "bugType": "Change Modifier", "problem": "      * @param amplitude How much to alter the amplitude by each octave\n      * @return Resulting noise\n      */\n    public double getNoise(double x, double y, double z, int octaves, double frequency, double amplitude) {\n         return instance.noise(x, y, z, octaves, frequency, amplitude);\n     }\n }", "fixed": "      * @param amplitude How much to alter the amplitude by each octave\n      * @return Resulting noise\n      */\n    public static double getNoise(double x, double y, double z, int octaves, double frequency, double amplitude) {\n         return instance.noise(x, y, z, octaves, frequency, amplitude);\n     }\n }", "sourceBeforeFix": "1", "sourceAfterFix": "9"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface EventEndpointBuilder\n             extends\n                 EventEndpointConsumerBuilder, EventEndpointProducerBuilder {\n         default AdvancedEventEndpointBuilder advanced() {", "fixed": "     \n    public interface EventEndpointBuilder\n             extends\n                 EventEndpointConsumerBuilder, EventEndpointProducerBuilder {\n         default AdvancedEventEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "2f77b4e6a3f1ab8bd855476a15a4ab2f6f7ae32c", "projectName": "neo4j.neo4j", "bugType": "Wrong Function Name", "problem": "         \t\t\"RETURN file.name, dir.name, role.name, readUser.name\";\n         gen.get().addSnippet( \"query3\", createCypherSnippet( query ) );\n         result = engine.execute( query )\n                .toString();\n         assertTrue( result.contains(\"File1\") );\n         assertTrue( result.contains(\"File2\") );\n         assertTrue( result.contains(\"Admin1\") );", "fixed": "         \t\t\"RETURN file.name, dir.name, role.name, readUser.name\";\n         gen.get().addSnippet( \"query3\", createCypherSnippet( query ) );\n         result = engine.execute( query )\n                .dumpToString();\n         assertTrue( result.contains(\"File1\") );\n         assertTrue( result.contains(\"File2\") );\n         assertTrue( result.contains(\"Admin1\") );", "sourceBeforeFix": "engine.execute(query).toString()", "sourceAfterFix": "engine.execute(query).dumpToString()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "fixed": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4fv(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4fv(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "sourceBeforeFix": "GL20.glUniform3(location,toFloatBuffer(v,offset,count * 3))", "sourceAfterFix": "GL20.glUniform3fv(location,toFloatBuffer(v,offset,count * 3))"}
{"fixCommitSHA1": "d18446f8da47a778fa65b9c0ca77019740879a21", "projectName": "cucumber.cucumber-jvm", "bugType": "Change Identifier Used", "problem": "     private static final List<PickleTag> NO_TAGS = Collections.<PickleTag>emptyList();\n     @Test\n    public void does_not_match_pickles_from_files_not_in_the_predicate_map() {\n         PickleEvent pickleEvent = createPickleEventWithLocations(\"path/file.feature\", asList(pickleLocation(4)));\n        LinePredicate predicate = new LinePredicate(singletonMap(\"another_path/file.feature\", asList(4L)));\n        assertFalse(predicate.apply(pickleEvent));\n     }\n     @Test", "fixed": "     private static final List<PickleTag> NO_TAGS = Collections.<PickleTag>emptyList();\n     @Test\n    public void matches_pickles_from_files_not_in_the_predicate_map() {\n         PickleEvent pickleEvent = createPickleEventWithLocations(\"path/file.feature\", asList(pickleLocation(4)));\n        LinePredicate predicate = new LinePredicate(singletonMap(\"another_path/file.feature\", asList(8L)));\n        assertTrue(predicate.apply(pickleEvent));\n     }\n     @Test", "sourceBeforeFix": "assertFalse(predicate.apply(pickleEvent))", "sourceAfterFix": "assertTrue(predicate.apply(pickleEvent))"}
{"fixCommitSHA1": "4f952dac30892ce9458bee0403d908ee642c4481", "projectName": "wildfly.wildfly", "bugType": "Same Function Swap Args", "problem": "                     .setXmlName(Attribute.MODE.getLocalName())\n                     .setAllowExpression(true)\n                     .setFlags(AttributeAccess.Flag.RESTART_ALL_SERVICES)\n                    .setValidator(new EnumValidator<Mode>(Mode.class, true, false))\n                     .build();\n     ClusteredCacheAdd(CacheMode mode) {", "fixed": "                     .setXmlName(Attribute.MODE.getLocalName())\n                     .setAllowExpression(true)\n                     .setFlags(AttributeAccess.Flag.RESTART_ALL_SERVICES)\n                    .setValidator(new EnumValidator<Mode>(Mode.class, false, true))\n                     .build();\n     ClusteredCacheAdd(CacheMode mode) {", "sourceBeforeFix": "new EnumValidator<Mode>(Mode.class,true,false)", "sourceAfterFix": "new EnumValidator<Mode>(Mode.class,false,true)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedMiloServerEndpointBuilder\n             extends\n                 AdvancedMiloServerEndpointConsumerBuilder, AdvancedMiloServerEndpointProducerBuilder {\n         default MiloServerEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedMiloServerEndpointBuilder\n             extends\n                 AdvancedMiloServerEndpointConsumerBuilder, AdvancedMiloServerEndpointProducerBuilder {\n         default MiloServerEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedInfluxDbEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default InfluxDbEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedInfluxDbEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default InfluxDbEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "0a2b272cb8cb45faafd95a3bbc9e9af813620e09", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "         for (int partition = 0; partition < partitionCount; partition++) {\n             partitionContainers[partition] = new MultiMapPartitionContainer(this, partition);\n         }\n        final LockService lockService = nodeEngine.getService(LockService.SERVICE_NAME);\n         if (lockService != null) {\n             lockService.registerLockStoreConstructor(SERVICE_NAME,\n                     new ConstructorFunction<ObjectNamespace, LockStoreInfo>() {", "fixed": "         for (int partition = 0; partition < partitionCount; partition++) {\n             partitionContainers[partition] = new MultiMapPartitionContainer(this, partition);\n         }\n        final LockService lockService = nodeEngine.getSharedService(LockService.SERVICE_NAME);\n         if (lockService != null) {\n             lockService.registerLockStoreConstructor(SERVICE_NAME,\n                     new ConstructorFunction<ObjectNamespace, LockStoreInfo>() {", "sourceBeforeFix": "nodeEngine.getService(LockService.SERVICE_NAME)", "sourceAfterFix": "nodeEngine.getSharedService(LockService.SERVICE_NAME)"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleActionsPredicatesOptions_1() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(254);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {std::cout << $ctx->toStringTree(this) << std::endl;} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");", "fixed": " \tpublic void testMultipleActionsPredicatesOptions_1() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(253);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {std::cout << $ctx->toStringTree(this) << std::endl;} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{true}?\\n\");", "sourceBeforeFix": "new StringBuilder(254)", "sourceAfterFix": "new StringBuilder(253)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface ClientEndpointBuilder\n             extends\n                 ClientEndpointConsumerBuilder, ClientEndpointProducerBuilder {\n         default AdvancedClientEndpointBuilder advanced() {", "fixed": "     \n    public interface ClientEndpointBuilder\n             extends\n                 ClientEndpointConsumerBuilder, ClientEndpointProducerBuilder {\n         default AdvancedClientEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n            statistics.addRemoveTimeNano(System.nanoTime() - start);\n             if (hitCount == 1) {\n                 statistics.increaseCacheHits(hitCount);\n             } else {", "fixed": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n            statistics.addRemoveTimeNanos(System.nanoTime() - start);\n             if (hitCount == 1) {\n                 statistics.increaseCacheHits(hitCount);\n             } else {", "sourceBeforeFix": "statistics.addPutTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addPutTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e3e1fea787147261448e30c1745d9157f442cb9f", "projectName": "alibaba.fastjson", "bugType": "Change Numeric Literal", "problem": "     public void test_ran_2() throws Exception {\n         Random rand = new Random();\n        for (int i = 0; i < 1000 * 1000 * 10; ++i) {\n             float val = rand.nextFloat();\n             String str = JSON.toJSONString(new Model(val), SerializerFeature.BeanToArray);", "fixed": "     public void test_ran_2() throws Exception {\n         Random rand = new Random();\n        for (int i = 0; i < 1000 * 1000 * 1; ++i) {\n             float val = rand.nextFloat();\n             String str = JSON.toJSONString(new Model(val), SerializerFeature.BeanToArray);", "sourceBeforeFix": "1000 * 1000 * 10", "sourceAfterFix": "1000 * 1000 * 1"}
{"fixCommitSHA1": "39fe5a830bb4e05a85bef3e52115c708f9409abf", "projectName": "wildfly.wildfly", "bugType": "Wrong Function Name", "problem": "     @Before\n     public void setUpAdminObjects() throws NamingException {\n         server1Proxy = lookupAdminObject(TestSuiteEnvironment.getServerAddress(), \"8280\");\n        server2Proxy = lookupAdminObject(TestSuiteEnvironment.getServerAddress(), \"8380\");\n         Assert.assertNotNull(server1Proxy);\n         Assert.assertNotNull(server2Proxy);\n     }", "fixed": "     @Before\n     public void setUpAdminObjects() throws NamingException {\n         server1Proxy = lookupAdminObject(TestSuiteEnvironment.getServerAddress(), \"8280\");\n        server2Proxy = lookupAdminObject(TestSuiteEnvironment.getServerAddressNode1(), \"8380\");\n         Assert.assertNotNull(server1Proxy);\n         Assert.assertNotNull(server2Proxy);\n     }", "sourceBeforeFix": "TestSuiteEnvironment.getServerAddress()", "sourceAfterFix": "TestSuiteEnvironment.getServerAddressNode1()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  private final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<Status> getUserTimeline(Paging paging) throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline.json\"\n                 , null, paging.asPostParameterList(), true));\n     }", "fixed": "      */\n     public ResponseList<Status> getUserTimeline(Paging paging) throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline.json\"\n                 , null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",null,true))"}
{"fixCommitSHA1": "466bd55e92d40e7193aa1ffd28c823d66aeb0ab6", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Wrong Function Name", "problem": "     }\n     public static int convertExpireField(String timestring) {\n        String trimmedTimeString = removeQuote(timestring.trim());\n         for (SimpleDateFormat sdf : simpleDateFormat.get()) {\n             Date date = sdf.parse(trimmedTimeString, new ParsePosition(0));", "fixed": "     }\n     public static int convertExpireField(String timestring) {\n        String trimmedTimeString = removeQuotes(timestring.trim());\n         for (SimpleDateFormat sdf : simpleDateFormat.get()) {\n             Date date = sdf.parse(trimmedTimeString, new ParsePosition(0));", "sourceBeforeFix": "removeQuote(timestring.trim())", "sourceAfterFix": "removeQuotes(timestring.trim())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15853, value = \"Unexpected initial path key %s\")\n     IllegalStateException unexpectedInitialPathKey(String key);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10853, value = \"Unexpected initial path key %s\")\n     IllegalStateException unexpectedInitialPathKey(String key);\n     /**", "sourceBeforeFix": "id=15843", "sourceAfterFix": "id=10843"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface NettyEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedNettyEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface NettyEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedNettyEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface PropertiesEndpointBuilder\n             extends\n                 PropertiesEndpointConsumerBuilder, PropertiesEndpointProducerBuilder {\n         default AdvancedPropertiesEndpointBuilder advanced() {", "fixed": "     \n    public interface PropertiesEndpointBuilder\n             extends\n                 PropertiesEndpointConsumerBuilder, PropertiesEndpointProducerBuilder {\n         default AdvancedPropertiesEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "2f880c73edb600ab92cdd580ac74f7388b5c6135", "projectName": "Alluxio.alluxio", "bugType": "Change Modifier", "problem": "     }\n   }\n  public void completeFile(int fileId) {\n     if (INACTIVE) {\n       return;\n     }", "fixed": "     }\n   }\n  public synchronized void completeFile(int fileId) {\n     if (INACTIVE) {\n       return;\n     }", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsText(String path, long millis, OUT endTuple) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), millis, endTuple);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsText(String path, long millis, OUT endTuple) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), millis, endTuple);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "ce8d80dd2543eaa821e861969cfb53b9b3a666de", "projectName": "alibaba.fastjson", "bugType": "Less Specific If", "problem": "                }\n                superClass = superClass.getSuperclass();\n               if (superClass == Object.class) {\n                    break;\n                }\n             }", "fixed": "                }\n                superClass = superClass.getSuperclass();\n               if (superClass == Object.class || superClass == null) {\n                    break;\n                }\n             }", "sourceBeforeFix": "superClass == Object.class", "sourceAfterFix": "superClass == Object.class || superClass == null"}
{"fixCommitSHA1": "21810014f007080b96d6fa46deeef760ec542934", "projectName": "apache.hive", "bugType": "Change Binary Operator", "problem": "               includeStripe = new boolean[stripes.size()];\n               for(int i=0; i < stripes.size(); ++i) {\n                includeStripe[i] = (i > stripeStats.size()) ||\n                     isStripeSatisfyPredicate(stripeStats.get(i), sarg,\n                                              filterColumns);\n                 if (LOG.isDebugEnabled() && !includeStripe[i]) {", "fixed": "               includeStripe = new boolean[stripes.size()];\n               for(int i=0; i < stripes.size(); ++i) {\n                includeStripe[i] = (i >= stripeStats.size()) ||\n                     isStripeSatisfyPredicate(stripeStats.get(i), sarg,\n                                              filterColumns);\n                 if (LOG.isDebugEnabled() && !includeStripe[i]) {", "sourceBeforeFix": "i > stripeStats.size()", "sourceAfterFix": "i >= stripeStats.size()"}
{"fixCommitSHA1": "32942def7634511d8dd8fb5c5040e4168521bfb5", "projectName": "druid-io.druid", "bugType": "Wrong Function Name", "problem": "       } else {\n         Set<String> metricsSet = new HashSet<>();\n         for (TimelineObjectHolder<String, DataSegment> timelineObjectHolder : timeLineSegments) {\n          metricsSet.addAll(timelineObjectHolder.getObject().getChunk(0).getObject().getDimensions());\n         }\n         metricsList = Lists.newArrayList(metricsSet);\n       }", "fixed": "       } else {\n         Set<String> metricsSet = new HashSet<>();\n         for (TimelineObjectHolder<String, DataSegment> timelineObjectHolder : timeLineSegments) {\n          metricsSet.addAll(timelineObjectHolder.getObject().getChunk(0).getObject().getMetrics());\n         }\n         metricsList = Lists.newArrayList(metricsSet);\n       }", "sourceBeforeFix": "timelineObjectHolder.getObject().getChunk(0).getObject().getDimensions()", "sourceAfterFix": "timelineObjectHolder.getObject().getChunk(0).getObject().getMetrics()"}
{"fixCommitSHA1": "fa04fa8df997e88d5109f9fd6d8ec61167cf5750", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "    */\n   public void clearPersistedFiles(List<Long> persistedFiles) {\n     synchronized (mPersistedFiles) {\n      mPersistedFiles.removeAll(mPersistedFiles);\n     }\n   }\n }", "fixed": "    */\n   public void clearPersistedFiles(List<Long> persistedFiles) {\n     synchronized (mPersistedFiles) {\n      mPersistedFiles.removeAll(persistedFiles);\n     }\n   }\n }", "sourceBeforeFix": "mPersistedFiles.removeAll(mPersistedFiles)", "sourceAfterFix": "mPersistedFiles.removeAll(persistedFiles)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "f3a240337ca4534b2a61fc9f004b56472c0e1371", "projectName": "openhab.openhab", "bugType": "Wrong Function Name", "problem": "     }\n     if (!isProperlyConfigured) {\n      logger.error(\"Configuration for influxdb not yet loaded or broken.\");\n       return;\n     }\n     if (!isConnected()) {\n      logger.error(\"InfluxDB is not yet connected\");\n       return;\n     }", "fixed": "     }\n     if (!isProperlyConfigured) {\n      logger.warn(\"Configuration for influxdb not yet loaded or broken.\");\n       return;\n     }\n     if (!isConnected()) {\n      logger.warn(\"InfluxDB is not yet connected\");\n       return;\n     }", "sourceBeforeFix": "logger.error(\"InfluxDB is not yet connected\")", "sourceAfterFix": "logger.warn(\"InfluxDB is not yet connected\")"}
{"fixCommitSHA1": "5303dec13d7b0336f282e02dce4d169c7acc6fcf", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "       int i = 0;\n       for (FileStatus status : files) {\n        rtn[i++] =  new UnderFileStatus(status.getPath().getName(), status.isDirectory());\n       }\n       return rtn;\n     } else {", "fixed": "       int i = 0;\n       for (FileStatus status : files) {\n        rtn[i++] =  new UnderFileStatus(status.getPath().getName(), status.isDir());\n       }\n       return rtn;\n     } else {", "sourceBeforeFix": "status.isDirectory()", "sourceAfterFix": "status.isDir()"}
{"fixCommitSHA1": "4c1b34b34b68f102fbb5021a801b6d99de967550", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   @Override\n  State getIntermediateState() {\n     return state;\n   }", "fixed": "   }\n   @Override\n  protected State getIntermediateState() {\n     return state;\n   }", "sourceBeforeFix": "0", "sourceAfterFix": "4"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15871, value = \"Unknown server %s\")\n     IllegalStateException unknownServer(ServerIdentity server);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10871, value = \"Unknown server %s\")\n     IllegalStateException unknownServer(ServerIdentity server);\n     /**", "sourceBeforeFix": "id=15864", "sourceAfterFix": "id=10864"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedServiceEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default ServiceEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedServiceEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default ServiceEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  private final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "d7be9dbeb8c4b8a31eb012c98463d88a8264833e", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "     public void invalidConfiguration() throws Exception {\n         SimpleRegistry registry = new SimpleRegistry();\n        registry.put(\"eventBus\", new EventBus());\n         CamelContext context = new DefaultCamelContext(registry);\n         context.addRoutes(new RouteBuilder() {\n             @Override", "fixed": "     public void invalidConfiguration() throws Exception {\n         SimpleRegistry registry = new SimpleRegistry();\n        registry.bind(\"eventBus\", new EventBus());\n         CamelContext context = new DefaultCamelContext(registry);\n         context.addRoutes(new RouteBuilder() {\n             @Override", "sourceBeforeFix": "registry.put(\"eventBus\",new EventBus())", "sourceAfterFix": "registry.bind(\"eventBus\",new EventBus())"}
{"fixCommitSHA1": "5d9193eb8fcb699722980d5e5680557553c3ee39", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "     @Before\n     public void setup() throws Exception {\n         SimpleRegistry registry = new SimpleRegistry();\n        registry.put(\"firehoseClient\", amazonKinesisFirehoseClient);\n         camelContext = new DefaultCamelContext(registry);\n     }", "fixed": "     @Before\n     public void setup() throws Exception {\n         SimpleRegistry registry = new SimpleRegistry();\n        registry.bind(\"firehoseClient\", amazonKinesisFirehoseClient);\n         camelContext = new DefaultCamelContext(registry);\n     }", "sourceBeforeFix": "registry.put(\"firehoseClient\",amazonKinesisFirehoseClient)", "sourceAfterFix": "registry.bind(\"firehoseClient\",amazonKinesisFirehoseClient)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface KubernetesJobEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedKubernetesJobEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface KubernetesJobEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedKubernetesJobEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface ReactiveStreamsEndpointBuilder\n             extends\n                 ReactiveStreamsEndpointConsumerBuilder, ReactiveStreamsEndpointProducerBuilder {\n         default AdvancedReactiveStreamsEndpointBuilder advanced() {", "fixed": "     \n    public interface ReactiveStreamsEndpointBuilder\n             extends\n                 ReactiveStreamsEndpointConsumerBuilder, ReactiveStreamsEndpointProducerBuilder {\n         default AdvancedReactiveStreamsEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "ea13a9c821a275561e56c45d5f0b90479904508d", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "             }\n             if (!removed) {\n                 if (isEventsEnabled()) {\n                    publishEvent(createCacheCompleteEvent(key, CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                           origin, completionId));\n                 }\n             }", "fixed": "             }\n             if (!removed) {\n                 if (isEventsEnabled()) {\n                    publishEvent(createCacheCompleteEvent(toEventData(key), CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                           origin, completionId));\n                 }\n             }", "sourceBeforeFix": "toHeapData(key)", "sourceAfterFix": "toEventData(key)"}
{"fixCommitSHA1": "4b52e5d010469405c1ec24baa2f8457f3eada222", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic boolean keyDown (int keycode) {\r\n\t\tInputProcessor[] items = processors.begin();\r\n \t\ttry {\r\n \t\t\tfor (int i = 0, n = processors.size; i < n; i++)\r\n\t\t\t\tif (items[i].keyDown(keycode)) return true;\r\n \t\t} finally {\r\n \t\t\tprocessors.end();\r\n \t\t}\r", "fixed": " \t}\r\n \tpublic boolean keyDown (int keycode) {\r\n\t\tObject[] items = processors.begin();\r\n \t\ttry {\r\n \t\t\tfor (int i = 0, n = processors.size; i < n; i++)\r\n\t\t\t\tif (((InputProcessor)items[i]).keyDown(keycode)) return true;\r\n \t\t} finally {\r\n \t\t\tprocessors.end();\r\n \t\t}\r", "sourceBeforeFix": "InputProcessor[]", "sourceAfterFix": "Object[]"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "d2b19965df52e66385a2d7146887a44cea50330a", "projectName": "google.closure-compiler", "bugType": "Wrong Function Name", "problem": "    */\n   void stripCode(Set<String> stripTypes, Set<String> stripNameSuffixes,\n       Set<String> stripTypePrefixes, Set<String> stripNamePrefixes) {\n    logger.info(\"Strip code\");\n     startPass(\"stripCode\");\n     StripCode r = new StripCode(this, stripTypes, stripNameSuffixes,\n         stripTypePrefixes, stripNamePrefixes);", "fixed": "    */\n   void stripCode(Set<String> stripTypes, Set<String> stripNameSuffixes,\n       Set<String> stripTypePrefixes, Set<String> stripNamePrefixes) {\n    logger.fine(\"Strip code\");\n     startPass(\"stripCode\");\n     StripCode r = new StripCode(this, stripTypes, stripNameSuffixes,\n         stripTypePrefixes, stripNamePrefixes);", "sourceBeforeFix": "logger.info(\"Creating extern file for exports\")", "sourceAfterFix": "logger.fine(\"Creating extern file for exports\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  private final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should return all system information\n \t */\n \t@Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)\n\tpublic Map<String, Map<String, String>> getSystemInformation() throws APIException;\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>.", "fixed": " \t * @should return all system information\n \t */\n \t@Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)\n\tpublic Map<String, Map<String, String>> getSystemInformation();\n \t/**\n \t * Gets the global property that has the given <code>propertyName</code>.", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "823bfb98fed1336c299c463e74bb8c9b63a956c7", "projectName": "naver.pinpoint", "bugType": "Change Numeric Literal", "problem": "     public static StreamPongPacket readBuffer(short packetType, ChannelBuffer buffer) {\r\n         assert packetType == PACKET_TYPE;\r\n        if (buffer.readableBytes() < 4) {\r\n             buffer.resetReaderIndex();\r\n             return null;\r\n         }\r", "fixed": "     public static StreamPongPacket readBuffer(short packetType, ChannelBuffer buffer) {\r\n         assert packetType == PACKET_TYPE;\r\n        if (buffer.readableBytes() < 8) {\r\n             buffer.resetReaderIndex();\r\n             return null;\r\n         }\r", "sourceBeforeFix": "buffer.readableBytes() < 4", "sourceAfterFix": "buffer.readableBytes() < 8"}
{"fixCommitSHA1": "c30e67b81a0d9ac45c4151d20a960e542ad97b4f", "projectName": "dropwizard.dropwizard", "bugType": "Wrong Function Name", "problem": "         final PrintWriter output = mock(PrintWriter.class);\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getRequestURI()).thenReturn(\"/tasks/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.of(\"runs\")));\n         when(request.getParameterValues(\"runs\")).thenReturn(new String[]{\"1\"});\n         when(response.getWriter()).thenReturn(output);", "fixed": "         final PrintWriter output = mock(PrintWriter.class);\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getServletPath()).thenReturn(\"/tasks/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.of(\"runs\")));\n         when(request.getParameterValues(\"runs\")).thenReturn(new String[]{\"1\"});\n         when(response.getWriter()).thenReturn(output);", "sourceBeforeFix": "request.getRequestURI()", "sourceAfterFix": "request.getServletPath()"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should delete global properties from database\n \t */\n \t@Authorized(PrivilegeConstants.PURGE_GLOBAL_PROPERTIES)\n\tpublic void purgeGlobalProperties(List<GlobalProperty> globalProperties) throws APIException;\n \t/**\n \t * Save the given global property to the database. If the global property already exists,", "fixed": " \t * @should delete global properties from database\n \t */\n \t@Authorized(PrivilegeConstants.PURGE_GLOBAL_PROPERTIES)\n\tpublic void purgeGlobalProperties(List<GlobalProperty> globalProperties);\n \t/**\n \t * Save the given global property to the database. If the global property already exists,", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "9fdd285d30c306b99e59984c535fa1988620d523", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t\t\t} else if (attr.equals(\"COLOR\")) {\r\n \t\t\t\tvertexAttributes.add(VertexAttribute.ColorUnpacked());\r\n \t\t\t} else if (attr.equals(\"COLORPACKED\")) {\r\n\t\t\t\tvertexAttributes.add(VertexAttribute.Color());\r\n \t\t\t} else if (attr.equals(\"TANGENT\")) {\r\n \t\t\t\tvertexAttributes.add(VertexAttribute.Tangent());\r\n \t\t\t} else if (attr.equals(\"BINORMAL\")) {\r", "fixed": " \t\t\t} else if (attr.equals(\"COLOR\")) {\r\n \t\t\t\tvertexAttributes.add(VertexAttribute.ColorUnpacked());\r\n \t\t\t} else if (attr.equals(\"COLORPACKED\")) {\r\n\t\t\t\tvertexAttributes.add(VertexAttribute.ColorPacked());\r\n \t\t\t} else if (attr.equals(\"TANGENT\")) {\r\n \t\t\t\tvertexAttributes.add(VertexAttribute.Tangent());\r\n \t\t\t} else if (attr.equals(\"BINORMAL\")) {\r", "sourceBeforeFix": "VertexAttribute.Color()", "sourceAfterFix": "VertexAttribute.ColorPacked()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  private final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15855, value = \"Invalid byte stream.\")\n     String invalidByteStream();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10855, value = \"Invalid byte stream.\")\n     String invalidByteStream();\n     /**", "sourceBeforeFix": "id=15861", "sourceAfterFix": "id=10861"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform1fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform1(location, v);\r\n \t}\r\n \tpublic void glUniform1fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform1(location, toFloatBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform1i (int location, int x) {\r", "fixed": " \t}\r\n \tpublic void glUniform1fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform1fv(location, v);\r\n \t}\r\n \tpublic void glUniform1fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform1fv(location, toFloatBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform1i (int location, int x) {\r", "sourceBeforeFix": "GL20.glUniformMatrix2(location,transpose,toFloatBuffer(value,offset,count << 2))", "sourceAfterFix": "GL20.glUniformMatrix2fv(location,transpose,toFloatBuffer(value,offset,count << 2))"}
{"fixCommitSHA1": "bcb6eeec1d978d6d572ebec875d34dc64aeb5121", "projectName": "alibaba.dubbo", "bugType": "Change Identifier Used", "problem": "         String methodKey = method + \".\" + key;\r\n         Number n = getNumbers().get(methodKey);\r\n         if (n != null) {\r\n            return n.intValue();\r\n         }\r\n         String value = getMethodParameter(method, key);\r\n         if (StringUtils.isEmpty(value)) {\r", "fixed": "         String methodKey = method + \".\" + key;\r\n         Number n = getNumbers().get(methodKey);\r\n         if (n != null) {\r\n            return n.doubleValue();\r\n         }\r\n         String value = getMethodParameter(method, key);\r\n         if (StringUtils.isEmpty(value)) {\r", "sourceBeforeFix": "n.intValue()", "sourceAfterFix": "n.doubleValue()"}
{"fixCommitSHA1": "4a6e698536006e6ea9b0680756d9390b96ba278b", "projectName": "gephi.gephi", "bugType": "Less Specific If", "problem": "         if (streamTokenizer.ttype == ']' || streamTokenizer.ttype == StreamTokenizer.TT_EOF) {\n             return;\n        } else if (streamTokenizer.ttype == StreamTokenizer.TT_WORD) {\n             if (streamTokenizer.sval.equalsIgnoreCase(\"label\")) {\n                 streamTokenizer.nextToken();\n                 if (streamTokenizer.ttype == '=') {", "fixed": "         if (streamTokenizer.ttype == ']' || streamTokenizer.ttype == StreamTokenizer.TT_EOF) {\n             return;\n        } else if (streamTokenizer.ttype == StreamTokenizer.TT_WORD || streamTokenizer.ttype == '\"') {\n             if (streamTokenizer.sval.equalsIgnoreCase(\"label\")) {\n                 streamTokenizer.nextToken();\n                 if (streamTokenizer.ttype == '=') {", "sourceBeforeFix": "streamTokenizer.ttype == StreamTokenizer.TT_WORD", "sourceAfterFix": "streamTokenizer.ttype == StreamTokenizer.TT_WORD || streamTokenizer.ttype == '\"'"}
{"fixCommitSHA1": "7346f16a2b9513dabebfdbec521bbf520ad63d2b", "projectName": "gephi.gephi", "bugType": "Change Identifier Used", "problem": "         Graph graph;\n         if (mDirected) {\n            graph = graphModel.getDirectedGraph();\n         } else {\n            graph = graphModel.getUndirectedGraph();\n         }\n         this.mGraphRevision = \"(\" + graph.getNodeVersion() + \", \" + graph.getEdgeVersion() + \")\";", "fixed": "         Graph graph;\n         if (mDirected) {\n            graph = graphModel.getDirectedGraphVisible();\n         } else {\n            graph = graphModel.getUndirectedGraphVisible();\n         }\n         this.mGraphRevision = \"(\" + graph.getNodeVersion() + \", \" + graph.getEdgeVersion() + \")\";", "sourceBeforeFix": "graphModel.getUndirectedGraph()", "sourceAfterFix": "graphModel.getUndirectedGraphVisible()"}
{"fixCommitSHA1": "46fa8090954480eecdeb6e7367f0e30655853f42", "projectName": "checkstyle.checkstyle", "bugType": "Same Function More Args", "problem": "                 linesToPositionTemp.add(0);\n                final StringBuilder sb = new StringBuilder();\n                 for (final String element : sourceLines) {\n                     linesToPositionTemp.add(sb.length());", "fixed": "                 linesToPositionTemp.add(0);\n                final StringBuilder sb = new StringBuilder(1024);\n                 for (final String element : sourceLines) {\n                     linesToPositionTemp.add(sb.length());", "sourceBeforeFix": "new StringBuilder()", "sourceAfterFix": "new StringBuilder(1024)"}
{"fixCommitSHA1": "4c363a1bee919e1cee47ffc2fc24cf47cec51d5b", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": " import java.io.InputStream;\n import java.io.InputStreamReader;\nclass IOHelper {\n     private IOHelper() {\n     }", "fixed": " import java.io.InputStream;\n import java.io.InputStreamReader;\nfinal class IOHelper {\n     private IOHelper() {\n     }", "sourceBeforeFix": "0", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface PubNubEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedPubNubEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface PubNubEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedPubNubEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "55fcf189eb1c1c4d776ce3b3ad7835fb404b21d8", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "  * @author <a href=\"mailto:checkstyle@puppycrawl.com\">Oliver Burn</a>\n  * @version 1.0\n  */\npublic class ScopeUtils\n {\n     \n     private ScopeUtils()", "fixed": "  * @author <a href=\"mailto:checkstyle@puppycrawl.com\">Oliver Burn</a>\n  * @version 1.0\n  */\npublic final class ScopeUtils\n {\n     \n     private ScopeUtils()", "sourceBeforeFix": "1", "sourceAfterFix": "17"}
{"fixCommitSHA1": "5b13fe70c25812157a1e4432135eb9639e72bc6a", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t\tfinal Sink normalizedPersons = new Sink(\"normalizedPersons.json\").withInputs(replace);\n \t\texpectedPlan.setSinks(normalizedPersons);\n\t\tassertEquals(expectedPlan, actualPlan);\n \t}\n \t@Test", "fixed": " \t\tfinal Sink normalizedPersons = new Sink(\"normalizedPersons.json\").withInputs(replace);\n \t\texpectedPlan.setSinks(normalizedPersons);\n\t\tassertPlanEquals(expectedPlan, actualPlan);\n \t}\n \t@Test", "sourceBeforeFix": "assertEquals(expectedPlan,actualPlan)", "sourceAfterFix": "assertPlanEquals(expectedPlan,actualPlan)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsCsv(String path, int batchSize, OUT endTuple) {\n \t\tif (this instanceof SingleOutputStreamOperator) {\n \t\t\t((SingleOutputStreamOperator<?, ?>) this).setMutability(false);\n \t\t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsCsv(String path, int batchSize, OUT endTuple) {\n \t\tif (this instanceof SingleOutputStreamOperator) {\n \t\t\t((SingleOutputStreamOperator<?, ?>) this).setMutability(false);\n \t\t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": " };\n   \n  private final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler", "fixed": " };\n   \n  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should save properties with case difference only\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_GLOBAL_PROPERTIES)\n\tpublic List<GlobalProperty> saveGlobalProperties(List<GlobalProperty> props) throws APIException;\n \t/**\n \t * Completely remove the given global property from the database", "fixed": " \t * @should save properties with case difference only\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_GLOBAL_PROPERTIES)\n\tpublic List<GlobalProperty> saveGlobalProperties(List<GlobalProperty> props);\n \t/**\n \t * Completely remove the given global property from the database", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n \t * @throws IOException Thrown if any of the two views raises an exception.\n \t */\n\tpublic void copy(DataInputView source, DataOutputView target) throws IOException;\n }", "fixed": " \t * \n \t * @throws IOException Thrown if any of the two views raises an exception.\n \t */\n\tpublic abstract void copy(DataInputView source, DataOutputView target) throws IOException;\n }", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15853, value = \"Unexpected initial path key %s\")\n     IllegalStateException unexpectedInitialPathKey(String key);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10853, value = \"Unexpected initial path key %s\")\n     IllegalStateException unexpectedInitialPathKey(String key);\n     /**", "sourceBeforeFix": "id=15851", "sourceAfterFix": "id=10851"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should return all global properties in the database\n \t */\n \t@Authorized(PrivilegeConstants.GET_GLOBAL_PROPERTIES)\n\tpublic List<GlobalProperty> getAllGlobalProperties() throws APIException;\n \t/**\n \t * Save the given list of global properties to the database.", "fixed": " \t * @should return all global properties in the database\n \t */\n \t@Authorized(PrivilegeConstants.GET_GLOBAL_PROPERTIES)\n\tpublic List<GlobalProperty> getAllGlobalProperties();\n \t/**\n \t * Save the given list of global properties to the database.", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "3a45f84e3ea25e96bd89d48b8e5ddb145e4a3815", "projectName": "apache.flink", "bugType": "Change Caller in Function Call", "problem": " \t\t\t}\n \t\t}\n\t\tAssert.assertTrue(\"Resultset size was \"+aggMap.size()+\". Expected was \"+keyCnt, outList.size() == keyCnt);\n \t\tfor (PactInteger integer : aggMap.values()) {\n \t\t\tAssert.assertTrue(\"Incorrect result\", integer.getValue() == expSum);", "fixed": " \t\t\t}\n \t\t}\n\t\tAssert.assertTrue(\"Resultset size was \"+aggMap.size()+\". Expected was \"+keyCnt, aggMap.size() == keyCnt);\n \t\tfor (PactInteger integer : aggMap.values()) {\n \t\t\tAssert.assertTrue(\"Incorrect result\", integer.getValue() == expSum);", "sourceBeforeFix": "outList.size()", "sourceAfterFix": "aggMap.size()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "d83dd417fff4ae2407e04a21056f331a773d970b", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "         private boolean fallback;\n        public SampleComponent(boolean fallback) {\n             this.fallback = fallback;\n         }", "fixed": "         private boolean fallback;\n        SampleComponent(boolean fallback) {\n             this.fallback = fallback;\n         }", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "3d3aad91880410164be0372875fe702af44fa279", "projectName": "Alluxio.alluxio", "bugType": "Wrong Function Name", "problem": "       if ((fsType.equalsIgnoreCase(\"tmpfs\") || fsType.equalsIgnoreCase(\"ramfs\"))\n           && size < storageDir.getCapacityBytes()) {\n         throw new IllegalStateException(String.format(\n            \"tmpfs is smaller than the configured size: tmpfs size: %s, configured size: %s\", size,\n            storageDir.getCapacityBytes()));\n       }\n     }\n   }", "fixed": "       if ((fsType.equalsIgnoreCase(\"tmpfs\") || fsType.equalsIgnoreCase(\"ramfs\"))\n           && size < storageDir.getCapacityBytes()) {\n         throw new IllegalStateException(String.format(\n            \"tmpfs is smaller than the configured size: tmpfs size: %s, configured size: %s\",\n            FormatUtils.getSizeFromBytes(size),\n            FormatUtils.getSizeFromBytes(storageDir.getCapacityBytes())));\n       }\n     }\n   }", "sourceBeforeFix": "LOG.warn(\"Failed to get mount information: {}\",e.getMessage())", "sourceAfterFix": "LOG.debug(\"Failed to get mount information: {}\",e.getMessage())"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15855, value = \"Invalid byte stream.\")\n     String invalidByteStream();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10855, value = \"Invalid byte stream.\")\n     String invalidByteStream();\n     /**", "sourceBeforeFix": "id=15860", "sourceAfterFix": "id=10860"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface CordaEndpointBuilder\n             extends\n                 CordaEndpointConsumerBuilder, CordaEndpointProducerBuilder {\n         default AdvancedCordaEndpointBuilder advanced() {", "fixed": "     \n    public interface CordaEndpointBuilder\n             extends\n                 CordaEndpointConsumerBuilder, CordaEndpointProducerBuilder {\n         default AdvancedCordaEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "89ed905358dd09d005398028198cc388b9b59a94", "projectName": "square.javapoet", "bugType": "Change Identifier Used", "problem": "     javaWriter.emitPackage(\"com.squareup\");\n     javaWriter.beginType(\"com.squareup.Foo\", \"class\", 0);\n     javaWriter.beginMethod(\"int\", \"foo\", 0, \"java.lang.String\", \"s\");\n    javaWriter.emitSingleLineCOmment(\"foo\");\n     javaWriter.emitStatement(\"int j = s.length() + %s\", 13);\n     javaWriter.endMethod();\n     javaWriter.endType();", "fixed": "     javaWriter.emitPackage(\"com.squareup\");\n     javaWriter.beginType(\"com.squareup.Foo\", \"class\", 0);\n     javaWriter.beginMethod(\"int\", \"foo\", 0, \"java.lang.String\", \"s\");\n    javaWriter.emitSingleLineComment(\"foo\");\n     javaWriter.emitStatement(\"int j = s.length() + %s\", 13);\n     javaWriter.endMethod();\n     javaWriter.endType();", "sourceBeforeFix": "javaWriter.emitSingleLineCOmment(\"foo\")", "sourceAfterFix": "javaWriter.emitSingleLineComment(\"foo\")"}
{"fixCommitSHA1": "85ab63427be9f51f13f5042715fe7e8eba0aede8", "projectName": "apache.camel", "bugType": "Same Function More Args", "problem": "             int coff = reader.getLocation().getCharacterOffset();\n             if (coff != 0) {\n                LOG.error(\"XMLStreamReader {} not supporting Location\");\n                 throw new XMLStreamException(\"reader not supporting Location\");\n             }", "fixed": "             int coff = reader.getLocation().getCharacterOffset();\n             if (coff != 0) {\n                LOG.error(\"XMLStreamReader {} not supporting Location\", reader);\n                 throw new XMLStreamException(\"reader not supporting Location\");\n             }", "sourceBeforeFix": "LOG.error(\"XMLStreamReader {} not supporting Location\")", "sourceAfterFix": "LOG.error(\"XMLStreamReader {} not supporting Location\",reader)"}
{"fixCommitSHA1": "acc9d3961e1d0d8ebf12269a08566222ec382cf2", "projectName": "openhab.openhab", "bugType": "Change Numeric Literal", "problem": "put(43239, new VariableInformation(1,\t\"Total hot water operation time add\",\tNibeDataType.S32,\tType.Sensor));\nput(43395, new VariableInformation(1,\t\"HPAC relays\",\t\t\t\t\t\t\tNibeDataType.U8,\tType.Sensor));\nput(43416, new VariableInformation(1,\t\"Compressor starts EB100-EP14\",\t\t\tNibeDataType.S32,\tType.Sensor));\nput(43420, new VariableInformation(10,\t\"Total operation time compressor\",\t\tNibeDataType.S32,\tType.Sensor));\nput(43424, new VariableInformation(1,\t\"Total hot water operation time compr\",\tNibeDataType.S32,\tType.Sensor));\nput(43427, new VariableInformation(1,\t\"Compressor state EP14\",\t\t\t\tNibeDataType.U8,\tType.Sensor));\nput(43514, new VariableInformation(1,\t\"PCA-Base relayes EP14\",\t\t\t\tNibeDataType.U8,\tType.Sensor));", "fixed": "put(43239, new VariableInformation(1,\t\"Total hot water operation time add\",\tNibeDataType.S32,\tType.Sensor));\nput(43395, new VariableInformation(1,\t\"HPAC relays\",\t\t\t\t\t\t\tNibeDataType.U8,\tType.Sensor));\nput(43416, new VariableInformation(1,\t\"Compressor starts EB100-EP14\",\t\t\tNibeDataType.S32,\tType.Sensor));\nput(43420, new VariableInformation(1,\t\"Total operation time compressor\",\t\tNibeDataType.S32,\tType.Sensor));\nput(43424, new VariableInformation(1,\t\"Total hot water operation time compr\",\tNibeDataType.S32,\tType.Sensor));\nput(43427, new VariableInformation(1,\t\"Compressor state EP14\",\t\t\t\tNibeDataType.U8,\tType.Sensor));\nput(43514, new VariableInformation(1,\t\"PCA-Base relayes EP14\",\t\t\t\tNibeDataType.U8,\tType.Sensor));", "sourceBeforeFix": "new VariableInformation(10,\"Total operation time compressor\",NibeDataType.S32,Type.Sensor)", "sourceAfterFix": "new VariableInformation(1,\"Total operation time compressor\",NibeDataType.S32,Type.Sensor)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15840, value = \"Interrupted waiting for result from server %s\")\n     String interruptedAwaitingResultFromServer(ServerIdentity server);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10840, value = \"Interrupted waiting for result from server %s\")\n     String interruptedAwaitingResultFromServer(ServerIdentity server);\n     /**", "sourceBeforeFix": "id=15862", "sourceAfterFix": "id=10862"}
{"fixCommitSHA1": "a4662237bc467310f0dc1c28aa621f84571225b1", "projectName": "Activiti.Activiti", "bugType": "Change Numeric Literal", "problem": "     processEngineConfiguration.setClock(testClock);\n    testClock.setCurrentTime(new Date(0));\n     runtimeService.startProcessInstanceByKey(\"testTimerCancelledEvent\");\n     listener.clearEventsReceived();", "fixed": "     processEngineConfiguration.setClock(testClock);\n    testClock.setCurrentTime(new Date(1));\n     runtimeService.startProcessInstanceByKey(\"testTimerCancelledEvent\");\n     listener.clearEventsReceived();", "sourceBeforeFix": "new Date(0)", "sourceAfterFix": "new Date(1)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "ae59e41fb8dfd5e672edc822fe16f3306ca87002", "projectName": "neo4j.neo4j", "bugType": "Change Modifier", "problem": "         this.base = base.getAbsoluteFile();\n     }\n    private void recursiveDelete( File file )\n     {\n         File[] files = file.listFiles();\n         if ( files != null ) for ( File each : files )", "fixed": "         this.base = base.getAbsoluteFile();\n     }\n    public static void recursiveDelete( File file )\n     {\n         File[] files = file.listFiles();\n         if ( files != null ) for ( File each : files )", "sourceBeforeFix": "2", "sourceAfterFix": "9"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * @param from The element to copy.\n \t * @return A copy of the given element.\n \t */\n\tpublic T createCopy(T from);\n \t/**\n \t * Creates a copy from the given element, storing the copied result in the given target element.", "fixed": " \t * @param from The element to copy.\n \t * @return A copy of the given element.\n \t */\n\tpublic abstract T createCopy(T from);\n \t/**\n \t * Creates a copy from the given element, storing the copied result in the given target element.", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "d2314c583d3463e3fa020e9d42aecf91b55c582c", "projectName": "apache.hadoop", "bugType": "Wrong Function Name", "problem": "   private static final String EMPTY_DIAGNOSTICS = \"\";\n   private static final String RM_WEBAPP_ADDR =\n      WebAppUtils.getResolvedRMWebAppURLWithoutScheme(new Configuration());\n   private boolean isSecurityEnabled;\n   private RMContext rmContext;", "fixed": "   private static final String EMPTY_DIAGNOSTICS = \"\";\n   private static final String RM_WEBAPP_ADDR =\n      WebAppUtils.getResolvedRMWebAppURLWithScheme(new Configuration());\n   private boolean isSecurityEnabled;\n   private RMContext rmContext;", "sourceBeforeFix": "WebAppUtils.getResolvedRMWebAppURLWithoutScheme(new Configuration())", "sourceAfterFix": "WebAppUtils.getResolvedRMWebAppURLWithScheme(new Configuration())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "01d18f2c3db799d144cc8e3308da3fb2ade19417", "projectName": "google.guava", "bugType": "Change Identifier Used", "problem": "     private final Lock delegate;\n     @SuppressWarnings(\"unused\")\n    private final Object strongReference;\n    WeakSafeLock(Lock delegate, Object strongReference) {\n       this.delegate = delegate;\n       this.strongReference = strongReference;\n     }", "fixed": "     private final Lock delegate;\n     @SuppressWarnings(\"unused\")\n    private final WeakSafeReadWriteLock strongReference;\n    WeakSafeLock(Lock delegate, WeakSafeReadWriteLock strongReference) {\n       this.delegate = delegate;\n       this.strongReference = strongReference;\n     }", "sourceBeforeFix": "@SuppressWarnings(\"unused\") private final Object strongReference; ", "sourceAfterFix": "@SuppressWarnings(\"unused\") private final WeakSafeReadWriteLock strongReference; "}
{"fixCommitSHA1": "4e5331a21a2efbf87f31b2ccde50208a9ac31046", "projectName": "facebook.presto", "bugType": "Change Numeric Literal", "problem": "         double sinLatitude = Math.sin(latitude * Math.PI / 180);\n         double y = 0.5 - Math.log((1 + sinLatitude) / (1 - sinLatitude)) / (4 * Math.PI);\n        int mapSize = mapSize(zoomLevel);\n         int tileX = (int) clip(x * mapSize, 0, mapSize - 1);\n         int tileY = (int) clip(y * mapSize, 0, mapSize - 1);\n         return BingTile.fromCoordinates(tileX / TILE_PIXELS, tileY / TILE_PIXELS, zoomLevel);", "fixed": "         double sinLatitude = Math.sin(latitude * Math.PI / 180);\n         double y = 0.5 - Math.log((1 + sinLatitude) / (1 - sinLatitude)) / (4 * Math.PI);\n        long mapSize = mapSize(zoomLevel);\n         int tileX = (int) clip(x * mapSize, 0, mapSize - 1);\n         int tileY = (int) clip(y * mapSize, 0, mapSize - 1);\n         return BingTile.fromCoordinates(tileX / TILE_PIXELS, tileY / TILE_PIXELS, zoomLevel);", "sourceBeforeFix": "256 << zoomLevel", "sourceAfterFix": "256L << zoomLevel"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15847, value = \"Interrupted waiting for result from host %s\")\n     String interruptedAwaitingResultFromHost(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10847, value = \"Interrupted waiting for result from host %s\")\n     String interruptedAwaitingResultFromHost(String name);\n     /**", "sourceBeforeFix": "id=15852", "sourceAfterFix": "id=10852"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedAtomixQueueEndpointBuilder\n             extends\n                 AdvancedAtomixQueueEndpointConsumerBuilder, AdvancedAtomixQueueEndpointProducerBuilder {\n         default AtomixQueueEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedAtomixQueueEndpointBuilder\n             extends\n                 AdvancedAtomixQueueEndpointConsumerBuilder, AdvancedAtomixQueueEndpointProducerBuilder {\n         default AtomixQueueEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "0682e8dd41045e3375b61d3d76f6e6991e98c869", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "             }\n         }\n         if (simple.getFromReceivedDate() != null) {\n            String s = simple.getFromSentDate();\n             if (s.startsWith(\"now\")) {\n                 long offset = extractOffset(s, typeConverter);\n                 builder = builder.and(new NowSearchTerm(SearchTermBuilder.Comparison.GE.asNum(), false, offset));", "fixed": "             }\n         }\n         if (simple.getFromReceivedDate() != null) {\n            String s = simple.getFromReceivedDate();\n             if (s.startsWith(\"now\")) {\n                 long offset = extractOffset(s, typeConverter);\n                 builder = builder.and(new NowSearchTerm(SearchTermBuilder.Comparison.GE.asNum(), false, offset));", "sourceBeforeFix": "simple.getFromSentDate()", "sourceAfterFix": "simple.getToSentDate()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  private final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface LdifEndpointBuilder\n            extends\n                EndpointProducerBuilder {\n         default AdvancedLdifEndpointBuilder advanced() {\n             return (AdvancedLdifEndpointBuilder) this;\n         }", "fixed": "     \n    public interface LdifEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedLdifEndpointBuilder advanced() {\n             return (AdvancedLdifEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface IgniteCacheEndpointBuilder\n             extends\n                 IgniteCacheEndpointConsumerBuilder, IgniteCacheEndpointProducerBuilder {\n         default AdvancedIgniteCacheEndpointBuilder advanced() {", "fixed": "     \n    public interface IgniteCacheEndpointBuilder\n             extends\n                 IgniteCacheEndpointConsumerBuilder, IgniteCacheEndpointProducerBuilder {\n         default AdvancedIgniteCacheEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15870, value = \"Unknown server group %s\")\n     IllegalStateException unknownServerGroup(String serverGroup);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10870, value = \"Unknown server group %s\")\n     IllegalStateException unknownServerGroup(String serverGroup);\n     /**", "sourceBeforeFix": "id=15855", "sourceAfterFix": "id=10855"}
{"fixCommitSHA1": "3ae343b768bae5973a5634c8e287ae1173e30248", "projectName": "netty.netty", "bugType": "Change Identifier Used", "problem": "             assert amt > 0;\n             prioritizableForTree -= amt;\n             if (parent != null) {\n                parent.decrementPrioritizableForTree(amt);\n             }\n         }", "fixed": "             assert amt > 0;\n             prioritizableForTree -= amt;\n             if (parent != null) {\n                parent.decrementPrioritizableForTree0(amt);\n             }\n         }", "sourceBeforeFix": "parent.decrementPrioritizableForTree(amt)", "sourceAfterFix": "parent.decrementPrioritizableForTree0(amt)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedRestletEndpointBuilder\n             extends\n                 AdvancedRestletEndpointConsumerBuilder, AdvancedRestletEndpointProducerBuilder {\n         default RestletEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedRestletEndpointBuilder\n             extends\n                 AdvancedRestletEndpointConsumerBuilder, AdvancedRestletEndpointProducerBuilder {\n         default RestletEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "fixed": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "sourceBeforeFix": "GL20.glGetProgram(program,pname,params)", "sourceAfterFix": "GL20.glGetProgramiv(program,pname,params)"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should fail for an invalid object\n \t * @should throw throw APIException if the input is null\n \t */\n\tpublic void validate(Object object, Errors errors) throws APIException;\n \t/**\n \t * Returns a list of locales used by the user when searching.", "fixed": " \t * @should fail for an invalid object\n \t * @should throw throw APIException if the input is null\n \t */\n\tpublic void validate(Object object, Errors errors);\n \t/**\n \t * Returns a list of locales used by the user when searching.", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "9467bef8ea9a62658b32dd43a76f4f98087d1986", "projectName": "apache.hadoop", "bugType": "Change Unary Operator\t", "problem": "     KeyShell ks = new KeyShell();\n     ks.setConf(new Configuration());\n     rc = ks.run(args1);\n    assertEquals(-1, rc);\n     assertTrue(outContent.toString().contains(\"There are no valid \" +\n \t\t\"KeyProviders configured.\"));\n   }", "fixed": "     KeyShell ks = new KeyShell();\n     ks.setConf(new Configuration());\n     rc = ks.run(args1);\n    assertEquals(1, rc);\n     assertTrue(outContent.toString().contains(\"There are no valid \" +\n \t\t\"KeyProviders configured.\"));\n   }", "sourceBeforeFix": "-1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface HazelcastTopicEndpointBuilder\n             extends\n                 HazelcastTopicEndpointConsumerBuilder, HazelcastTopicEndpointProducerBuilder {\n         default AdvancedHazelcastTopicEndpointBuilder advanced() {", "fixed": "     \n    public interface HazelcastTopicEndpointBuilder\n             extends\n                 HazelcastTopicEndpointConsumerBuilder, HazelcastTopicEndpointProducerBuilder {\n         default AdvancedHazelcastTopicEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15839, value = \"Operation failed or was rolled back on all servers.\")\n     String operationFailedOrRolledBack();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10839, value = \"Operation failed or was rolled back on all servers.\")\n     String operationFailedOrRolledBack();\n     /**", "sourceBeforeFix": "id=15832", "sourceAfterFix": "id=10832"}
{"fixCommitSHA1": "a63faf44e1b103a49d25a15c720fc5940ae9fc07", "projectName": "square.retrofit", "bugType": "Change Identifier Used", "problem": "     assertThat(factory.get(sBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mBodyClass = new TypeToken<Maybe<String>>() {}.getType();\n    assertThat(factory.get(sBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fBodyClass = new TypeToken<Flowable<String>>() {}.getType();\n    assertThat(factory.get(sBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oBodyWildcard = new TypeToken<Observable<? extends String>>() {}.getType();", "fixed": "     assertThat(factory.get(sBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mBodyClass = new TypeToken<Maybe<String>>() {}.getType();\n    assertThat(factory.get(mBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fBodyClass = new TypeToken<Flowable<String>>() {}.getType();\n    assertThat(factory.get(fBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oBodyWildcard = new TypeToken<Observable<? extends String>>() {}.getType();", "sourceBeforeFix": "factory.get(sResponseWildcard,NO_ANNOTATIONS,retrofit)", "sourceAfterFix": "factory.get(mResponseWildcard,NO_ANNOTATIONS,retrofit)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedBeanstalkEndpointBuilder\n             extends\n                 AdvancedBeanstalkEndpointConsumerBuilder, AdvancedBeanstalkEndpointProducerBuilder {\n         default BeanstalkEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedBeanstalkEndpointBuilder\n             extends\n                 AdvancedBeanstalkEndpointConsumerBuilder, AdvancedBeanstalkEndpointProducerBuilder {\n         default BeanstalkEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  private final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that are pure, and annotate them\n    * that way.\n    */\n  final PassFactory markPureFunctions =\n       new PassFactory(\"markPureFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 15831, value = \"The master host controller cannot register slave host controllers as it's current running mode is '%s'\")\n     String adminOnlyModeCannotAcceptSlaves(RunningMode runningMode);\n     /**", "fixed": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 10831, value = \"The master host controller cannot register slave host controllers as it's current running mode is '%s'\")\n     String adminOnlyModeCannotAcceptSlaves(RunningMode runningMode);\n     /**", "sourceBeforeFix": "id=15871", "sourceAfterFix": "id=10871"}
{"fixCommitSHA1": "8abfa48f2eb5edaf3f5a2cc2350e4e3c232f4152", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "      * @param lowerBound the lower bound of the range.\n      * @param upperBound the upper bound of the range.\n      */\n    public IntRangeFilter(int lowerBound, int upperBound) {\n         this.lowerBound = lowerBound;\n         this.upperBound = upperBound;\n     }", "fixed": "      * @param lowerBound the lower bound of the range.\n      * @param upperBound the upper bound of the range.\n      */\n    IntRangeFilter(int lowerBound, int upperBound) {\n         this.lowerBound = lowerBound;\n         this.upperBound = upperBound;\n     }", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "737a3508546a125e900be9d1bb123952c0a81f20", "projectName": "netty.netty", "bugType": "Change Modifier", "problem": " \npublic class UdtChannelOption<T> extends ChannelOption<T> {\n     /**\n* See {@link OptionUDT", "fixed": " \npublic final class UdtChannelOption<T> extends ChannelOption<T> {\n     /**\n* See {@link OptionUDT", "sourceBeforeFix": "1", "sourceAfterFix": "17"}
{"fixCommitSHA1": "cdd0fd89f2781fae8b868c7f11b73179d8847cf3", "projectName": "Alluxio.alluxio", "bugType": "Same Function Less Args", "problem": "         socketSelector.close();\n       } catch (IOException ex) {\n        LOG.warn(\"Unable to close socket selector\", ex);\n       }\n       throw e;\n     } catch (RuntimeException e) {", "fixed": "         socketSelector.close();\n       } catch (IOException ex) {\n        LOG.warn(\"Unable to close socket selector\");\n       }\n       throw e;\n     } catch (RuntimeException e) {", "sourceBeforeFix": "LOG.warn(\"Unable to close socket selector\",ex)", "sourceAfterFix": "LOG.warn(\"Unable to close socket selector\")"}
{"fixCommitSHA1": "c7fd539c43b8e027a74d0f9118e9f3d48bc930d1", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "                 entry.value = value;\n                 entry.dirty = true;\n             } else {\n                getClusterMap().put(buildAttributeName(name), value);\n             }\n         }", "fixed": "                 entry.value = value;\n                 entry.dirty = true;\n             } else {\n                getClusterMap().set(buildAttributeName(name), value);\n             }\n         }", "sourceBeforeFix": "getClusterMap().put(buildAttributeName(name),value)", "sourceAfterFix": "getClusterMap().set(buildAttributeName(name),value)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface BeanstalkEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedBeanstalkEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface BeanstalkEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedBeanstalkEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "bd23d1bddd1154c7bc2a249b76d4ffdd5e4cfd92", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "             if (queueLength.isDefined() && queueLength.asInt() == 0) {\n                 if (coreThreads.isDefined() && coreThreads.asInt() <= 0) {\n                    throw EeLogger.ROOT_LOGGER.invalidCoreThreadsSize(coreThreads.asString());\n                 }\n             }", "fixed": "             if (queueLength.isDefined() && queueLength.asInt() == 0) {\n                 if (coreThreads.isDefined() && coreThreads.asInt() <= 0) {\n                    throw EeLogger.ROOT_LOGGER.invalidCoreThreadsSize(queueLength.asString());\n                 }\n             }", "sourceBeforeFix": "coreThreads.asString()", "sourceAfterFix": "queueLength.asString()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should execute sql containing group by\n \t */\n \t@Authorized(PrivilegeConstants.SQL_LEVEL_ACCESS)\n\tpublic List<List<Object>> executeSQL(String sql, boolean selectOnly) throws APIException;\n \t/**\n \t * Get the implementation id stored for this server Returns null if no implementation id has", "fixed": " \t * @should execute sql containing group by\n \t */\n \t@Authorized(PrivilegeConstants.SQL_LEVEL_ACCESS)\n\tpublic List<List<Object>> executeSQL(String sql, boolean selectOnly);\n \t/**\n \t * Get the implementation id stored for this server Returns null if no implementation id has", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedClassEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default ClassEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedClassEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default ClassEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform2iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toIntBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform3f (int location, float x, float y, float z) {\r", "fixed": " \t}\r\n \tpublic void glUniform2iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform2iv(location, v);\r\n \t}\r\n \tpublic void glUniform2iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform2iv(location, toIntBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform3f (int location, float x, float y, float z) {\r", "sourceBeforeFix": "GL20.glUniformMatrix3(location,transpose,value)", "sourceAfterFix": "GL20.glUniformMatrix3fv(location,transpose,value)"}
{"fixCommitSHA1": "e78d8584a1298e79c17a45e01f79062b55c9f703", "projectName": "druid-io.druid", "bugType": "Change Numeric Literal", "problem": "     );\n   }\n  @Test(timeout = 60_000L)\n   public void testQoS() throws Exception\n   {\n     final int fastThreads = 20;", "fixed": "     );\n   }\n  @Test(timeout = 120_000L)\n   public void testQoS() throws Exception\n   {\n     final int fastThreads = 20;", "sourceBeforeFix": "timeout=60_000L", "sourceAfterFix": "timeout=120_000L"}
{"fixCommitSHA1": "b041bcdeb2b96589efd6e6058fb0ba9dc630e949", "projectName": "libgdx.libgdx", "bugType": "Change Caller in Function Call", "problem": " \t * @param child The Node to add as child of this Node\r\n \t * @return the zero-based index of the child */\r\n \tpublic <T extends Node> int insertChild (int index, final T child) {\r\n\t\tfor (Node p = this; p != null; p = child.getParent()) {\r\n \t\t\tif (p == child) throw new GdxRuntimeException(\"Cannot add a parent as a child\");\r\n \t\t}\r\n \t\tNode p = child.getParent();\r", "fixed": " \t * @param child The Node to add as child of this Node\r\n \t * @return the zero-based index of the child */\r\n \tpublic <T extends Node> int insertChild (int index, final T child) {\r\n\t\tfor (Node p = this; p != null; p = p.getParent()) {\r\n \t\t\tif (p == child) throw new GdxRuntimeException(\"Cannot add a parent as a child\");\r\n \t\t}\r\n \t\tNode p = child.getParent();\r", "sourceBeforeFix": "child.getParent()", "sourceAfterFix": "p.getParent()"}
{"fixCommitSHA1": "62bf8fd4813271c64afbb1509b31811c79246bce", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t\tresultFuture.whenComplete(\n \t\t\t(Void ignored, Throwable throwable) -> {\n \t\t\t\tif (throwable != null) {\n\t\t\t\t\tlog.debug(\"Failed to transfer file from TaskExecutor {}.\", taskManagerId, throwable);\n \t\t\t\t\tfileBlobKeys.invalidate(taskManagerId);\n \t\t\t\t\tfinal Throwable strippedThrowable = ExceptionUtils.stripCompletionException(throwable);", "fixed": " \t\tresultFuture.whenComplete(\n \t\t\t(Void ignored, Throwable throwable) -> {\n \t\t\t\tif (throwable != null) {\n\t\t\t\t\tlog.error(\"Failed to transfer file from TaskExecutor {}.\", taskManagerId, throwable);\n \t\t\t\t\tfileBlobKeys.invalidate(taskManagerId);\n \t\t\t\t\tfinal Throwable strippedThrowable = ExceptionUtils.stripCompletionException(throwable);", "sourceBeforeFix": "log.debug(\"Failed to transfer file from TaskExecutor {}.\",taskManagerId,throwable)", "sourceAfterFix": "log.error(\"Failed to transfer file from TaskExecutor {}.\",taskManagerId,throwable)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n \t * @return True, if the data type supports the creation of a normalized key for comparison, false otherwise.\n \t */\n\tpublic boolean supportsNormalizedKey();\n \t/**\n \t * Check whether this comparator supports to serialize the record in a format that replaces its keys by a normalized", "fixed": " \t * \n \t * @return True, if the data type supports the creation of a normalized key for comparison, false otherwise.\n \t */\n\tpublic abstract boolean supportsNormalizedKey();\n \t/**\n \t * Check whether this comparator supports to serialize the record in a format that replaces its keys by a normalized", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface SshEndpointBuilder\n             extends\n                 SshEndpointConsumerBuilder, SshEndpointProducerBuilder {\n         default AdvancedSshEndpointBuilder advanced() {", "fixed": "     \n    public interface SshEndpointBuilder\n             extends\n                 SshEndpointConsumerBuilder, SshEndpointProducerBuilder {\n         default AdvancedSshEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedGangliaEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default GangliaEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedGangliaEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default GangliaEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15849, value = \"Operation %s for address %s can only be handled by the \" +\n             \"master Domain Controller; this host is not the master Domain Controller\")\n     String masterDomainControllerOnlyOperation(String operation, PathAddress address);", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10849, value = \"Operation %s for address %s can only be handled by the \" +\n             \"master Domain Controller; this host is not the master Domain Controller\")\n     String masterDomainControllerOnlyOperation(String operation, PathAddress address);", "sourceBeforeFix": "id=15855", "sourceAfterFix": "id=10855"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_4() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(639);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {console.log($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "fixed": " \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_4() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(638);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {console.log($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "sourceBeforeFix": "new StringBuilder(639)", "sourceAfterFix": "new StringBuilder(638)"}
{"fixCommitSHA1": "5cdfcd29a2d89e658f5f37aad3deb6130eeb47af", "projectName": "Atmosphere.atmosphere", "bugType": "Change Identifier Used", "problem": "     @Override\n     public WebSocket write(String s) throws IOException {\n        if (isOpen()) webSocketConnection.getRemote().sendString(s);\n         return this;\n     }\n     @Override\n     public WebSocket write(byte[] b, int offset, int length) throws IOException {\n        if (isOpen()) webSocketConnection.getRemote().sendBytes(ByteBuffer.wrap(b, offset, length));\n         return this;\n     }", "fixed": "     @Override\n     public WebSocket write(String s) throws IOException {\n        if (isOpen()) webSocketConnection.getRemote().sendStringByFuture(s);\n         return this;\n     }\n     @Override\n     public WebSocket write(byte[] b, int offset, int length) throws IOException {\n        if (isOpen()) webSocketConnection.getRemote().sendBytesByFuture(ByteBuffer.wrap(b, offset, length));\n         return this;\n     }", "sourceBeforeFix": "webSocketConnection.getRemote().sendBytes(ByteBuffer.wrap(b,offset,length))", "sourceAfterFix": "webSocketConnection.getRemote().sendBytesByFuture(ByteBuffer.wrap(b,offset,length))"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15842, value = \"Invalid rollout plan. %s is not a valid child of node %s\")\n     String invalidRolloutPlan(ModelNode modelNode, String nodeName);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10842, value = \"Invalid rollout plan. %s is not a valid child of node %s\")\n     String invalidRolloutPlan(ModelNode modelNode, String nodeName);\n     /**", "sourceBeforeFix": "id=15870", "sourceAfterFix": "id=10870"}
{"fixCommitSHA1": "ea36259d22c518ae70f5eb951123c74351be48b6", "projectName": "hazelcast.hazelcast", "bugType": "Change Numeric Literal", "problem": "         final String key = \"key\";\n         final String value = \"value\";\n        map.lock(key, 4, TimeUnit.SECONDS);\n         final CountDownLatch tryPutReturned = new CountDownLatch(1);\n         new Thread() {\n             public void run() {\n                map.tryPut(key, value, 8, TimeUnit.SECONDS);\n                 tryPutReturned.countDown();\n             }\n         }.start();", "fixed": "         final String key = \"key\";\n         final String value = \"value\";\n        map.lock(key, 1, TimeUnit.SECONDS);\n         final CountDownLatch tryPutReturned = new CountDownLatch(1);\n         new Thread() {\n             public void run() {\n                map.tryPut(key, value, 60, TimeUnit.SECONDS);\n                 tryPutReturned.countDown();\n             }\n         }.start();", "sourceBeforeFix": "map.lock(key,4,TimeUnit.SECONDS)", "sourceAfterFix": "map.lock(key,1,TimeUnit.SECONDS)"}
{"fixCommitSHA1": "cea7f4acbe4f286cbb031efa816f9e881278fdc3", "projectName": "checkstyle.checkstyle", "bugType": "Delete Throws Exception", "problem": "     private final PkgControl pcCommon = new PkgControl(pcRoot, \"common\");\n     @Before\n    public void setUp() throws Exception {\n         pcRoot.addGuard(new Guard(false, false, \"org.springframework\", false, false));\n         pcRoot.addGuard(new Guard(false, false, \"org.hibernate\", false, false));\n         pcRoot.addGuard(new Guard(true, false, \"org.apache.commons\", false, false));", "fixed": "     private final PkgControl pcCommon = new PkgControl(pcRoot, \"common\");\n     @Before\n    public void setUp() {\n         pcRoot.addGuard(new Guard(false, false, \"org.springframework\", false, false));\n         pcRoot.addGuard(new Guard(false, false, \"org.hibernate\", false, false));\n         pcRoot.addGuard(new Guard(true, false, \"org.apache.commons\", false, false));", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "cac8c34ac61668aa269366408e613ac0ed5db729", "projectName": "junit-team.junit", "bugType": "Change Modifier", "problem": "     }\n     @FixMethodOrder(MethodSorters.JVM)\n    private static class DummySortJvm {\n         Object alpha(int i, double d, Thread t) {return null;}\n         void beta(int[][] x) {}\n         int gamma() {return 0;}", "fixed": "     }\n     @FixMethodOrder(MethodSorters.JVM)\n    static class DummySortJvm {\n         Object alpha(int i, double d, Thread t) {return null;}\n         void beta(int[][] x) {}\n         int gamma() {return 0;}", "sourceBeforeFix": "10", "sourceAfterFix": "8"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetProgramiv (int program, int pname, IntBuffer params) {\r\n\t\tGL20.glGetProgram(program, pname, params);\r\n \t}\r\n \tpublic void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tEXTFramebufferObject.glGetRenderbufferParameterEXT(target, pname, params);\r\n \t}\r\n \tpublic String glGetShaderInfoLog (int shader) {\r", "fixed": " \t}\r\n \tpublic void glGetProgramiv (int program, int pname, IntBuffer params) {\r\n\t\tGL20.glGetProgramiv(program, pname, params);\r\n \t}\r\n \tpublic void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tEXTFramebufferObject.glGetRenderbufferParameterivEXT(target, pname, params);\r\n \t}\r\n \tpublic String glGetShaderInfoLog (int shader) {\r", "sourceBeforeFix": "GL20.glUniformMatrix2(location,transpose,value)", "sourceAfterFix": "GL20.glUniformMatrix2fv(location,transpose,value)"}
