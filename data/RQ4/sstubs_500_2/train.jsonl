{"fixCommitSHA1": "2f77b4e6a3f1ab8bd855476a15a4ab2f6f7ae32c", "projectName": "neo4j.neo4j", "bugType": "Change Identifier Used", "problem": "         query = \"start root=node:node_auto_index(name = 'FileRoot') match root-[:contains*0..]->()-[:leaf]->file<-[:owns]-user return file, user\";\n         gen.get().addSnippet( \"query2\", createCypherSnippet( query ) );\n         result = engine.execute( query )\n                .toString();\n         assertTrue( result.contains(\"File1\") );\n         assertTrue( result.contains(\"User1\") );\n         assertTrue( result.contains(\"User2\") );", "fixed": "         query = \"start root=node:node_auto_index(name = 'FileRoot') match root-[:contains*0..]->()-[:leaf]->file<-[:owns]-user return file, user\";\n         gen.get().addSnippet( \"query2\", createCypherSnippet( query ) );\n         result = engine.execute( query )\n                .dumpToString();\n         assertTrue( result.contains(\"File1\") );\n         assertTrue( result.contains(\"User1\") );\n         assertTrue( result.contains(\"User2\") );", "sourceBeforeFix": "engine.execute(query).toString()", "sourceAfterFix": "engine.execute(query).dumpToString()"}
{"fixCommitSHA1": "2ccd6714a1039f58ba171438af36ffada86343e1", "projectName": "Bukkit.Bukkit", "bugType": "Change Identifier Used", "problem": "             final double delta = Math.sqrt(deltaX * deltaX + deltaY * deltaY + deltaZ * deltaZ) / 2.0D;\n             if (delta > 0.0D) {\n                soundLocation.add(deltaX / delta, deltaY / delta, deltaZ / delta);\n             }\n            player.playSound(soundLocation, soundArg, (float) minimumVolume, (float) pitch);\n         } else {\n             player.playSound(soundLocation, soundArg, (float) volume, (float) pitch);\n         }", "fixed": "             final double delta = Math.sqrt(deltaX * deltaX + deltaY * deltaY + deltaZ * deltaZ) / 2.0D;\n             if (delta > 0.0D) {\n                location.add(deltaX / delta, deltaY / delta, deltaZ / delta);\n             }\n            player.playSound(location, soundArg, (float) minimumVolume, (float) pitch);\n         } else {\n             player.playSound(soundLocation, soundArg, (float) volume, (float) pitch);\n         }", "sourceBeforeFix": "soundLocation.add(deltaX / delta,deltaY / delta,deltaZ / delta)", "sourceAfterFix": "location.add(deltaX / delta,deltaY / delta,deltaZ / delta)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform3(location, v);\r\n \t}\r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform3(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r", "fixed": " \t}\r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform3iv(location, v);\r\n \t}\r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform3iv(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r", "sourceBeforeFix": "GL20.glUniform2(location,toFloatBuffer(v,offset,count << 1))", "sourceAfterFix": "GL20.glUniform2fv(location,toFloatBuffer(v,offset,count << 1))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": " };\n   \n  private final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler", "fixed": " };\n   \n  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<Status> getUserTimeline(Paging paging) throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline.json\"\n                 , null, paging.asPostParameterList(), true));\n     }", "fixed": "      */\n     public ResponseList<Status> getUserTimeline(Paging paging) throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline.json\"\n                 , null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweets_of_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweets_of_me.json\",null,true))"}
{"fixCommitSHA1": "4374760010679cae216f1c512564626520e00238", "projectName": "libgdx.libgdx", "bugType": "Change Operand ", "problem": " \t\t\tif (ClassReflection.isAssignableFrom(Enum.class, actualType)) {\n\t\t\t\tif (knownType == null || knownType != actualType) {\n \t\t\t\t\tif (actualType.getEnumConstants() == null) actualType = actualType.getSuperclass();", "fixed": " \t\t\tif (ClassReflection.isAssignableFrom(Enum.class, actualType)) {\n\t\t\t\tif (typeName != null && (knownType == null || knownType != actualType)) {\n \t\t\t\t\tif (actualType.getEnumConstants() == null) actualType = actualType.getSuperclass();", "sourceBeforeFix": "knownType != null", "sourceAfterFix": "typeName != null"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsText(String path, int batchSize) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), batchSize, null);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsText(String path, int batchSize) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), batchSize, null);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "64dff91895f9df55fe3a07217a333efa4d37d92a", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "         Class<?> c = makeClass(className, proceedOnExceptions);\n         if (c != null) {\n           if (!classes.add(c)) {\n            LOG.error(\"Ignoring duplicate class \" + className);\n           }\n         }\n       }", "fixed": "         Class<?> c = makeClass(className, proceedOnExceptions);\n         if (c != null) {\n           if (!classes.add(c)) {\n            LOG.warn(\"Ignoring duplicate class \" + className);\n           }\n         }\n       }", "sourceBeforeFix": "LOG.error(\"Failed to find \" + baseDirectory.getAbsolutePath())", "sourceAfterFix": "LOG.warn(\"Failed to find \" + baseDirectory.getAbsolutePath())"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface ElasticsearchEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedElasticsearchEndpointBuilder advanced() {", "fixed": "     \n    public interface ElasticsearchEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedElasticsearchEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n*  @see java.util.Comparator\n \t */\n\tpublic int compare(DataInputView firstSource, DataInputView secondSource) throws IOException;", "fixed": " \t * \n*  @see java.util.Comparator\n \t */\n\tpublic abstract int compare(DataInputView firstSource, DataInputView secondSource) throws IOException;", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15867, value = \"Cannot use %s with the same value for parameters %s and %s. \" +\n             \"Use %s to redeploy the same content or %s to replace content with a new version with the same name.\")\n     String cannotUseSameValueForParameters(String opName, String param1, String param2, String redeployOpName, String replaceOpName);", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10867, value = \"Cannot use %s with the same value for parameters %s and %s. \" +\n             \"Use %s to redeploy the same content or %s to replace content with a new version with the same name.\")\n     String cannotUseSameValueForParameters(String opName, String param1, String param2, String redeployOpName, String replaceOpName);", "sourceBeforeFix": "id=15850", "sourceAfterFix": "id=10850"}
{"fixCommitSHA1": "2dfcaeaf25ce13a46289b4917e7e2d4b9cfbc63f", "projectName": "neo4j.neo4j", "bugType": "Change Identifier Used", "problem": "     }\n     @DELETE\n    @Path(PATH_NODE_INDEX_ID)\n     public Response deleteFromRelationshipIndex( @PathParam(\"indexName\") String indexName,\n                                                  @PathParam(\"key\") String key, @PathParam(\"value\") String value,\n                                                  @PathParam(\"id\") long id )", "fixed": "     }\n     @DELETE\n    @Path(PATH_RELATIONSHIP_INDEX_ID)\n     public Response deleteFromRelationshipIndex( @PathParam(\"indexName\") String indexName,\n                                                  @PathParam(\"key\") String key, @PathParam(\"value\") String value,\n                                                  @PathParam(\"id\") long id )", "sourceBeforeFix": "@Path(PATH_NODE_INDEX_ID)", "sourceAfterFix": "@Path(PATH_RELATIONSHIP_INDEX_ID)"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         if (isStatisticsEnabled()) {\n             if (isPutSucceed) {\n                 statistics.increaseCachePuts(1);\n                statistics.addPutTimeNano(System.nanoTime() - start);\n             }\n             if (getValue) {\n                 if (oldValueNull) {", "fixed": "         if (isStatisticsEnabled()) {\n             if (isPutSucceed) {\n                 statistics.increaseCachePuts(1);\n                statistics.addPutTimeNanos(System.nanoTime() - start);\n             }\n             if (getValue) {\n                 if (oldValueNull) {", "sourceBeforeFix": "statistics.addGetTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addGetTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "26f1133593498a87216f0dd4954ff7c07313b740", "projectName": "google.closure-compiler", "bugType": "Wrong Function Name", "problem": "    * Expects the JS to generate one bad-read error.\n    */\n   private void assertRedeclare(String js) {\n    testWarning(js, VariableReferenceCheck.REDECLARED_VARIABLE);\n   }\n   /**", "fixed": "    * Expects the JS to generate one bad-read error.\n    */\n   private void assertRedeclare(String js) {\n    testError(js, VariableReferenceCheck.REDECLARED_VARIABLE);\n   }\n   /**", "sourceBeforeFix": "testWarning(js,VariableReferenceCheck.REDECLARED_VARIABLE)", "sourceAfterFix": "testError(js,VariableReferenceCheck.REDECLARED_VARIABLE)"}
{"fixCommitSHA1": "7c3d863cf7e5c361a71e35e850ffc72550ada997", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t\tpublic RequestMatcher antPath(RequestMatcherProvider matcherProvider,\n \t\t\t\tString... parts) {\n\t\t\tString pattern = this.prefix;\n \t\t\tfor (String part : parts) {\n\t\t\t\tpattern += part;\n \t\t\t}\n\t\t\treturn matcherProvider.getRequestMatcher(pattern);\n \t\t}\n \t}", "fixed": " \t\tpublic RequestMatcher antPath(RequestMatcherProvider matcherProvider,\n \t\t\t\tString... parts) {\n\t\t\tStringBuilder pattern = new StringBuilder(this.prefix);\n \t\t\tfor (String part : parts) {\n\t\t\t\tpattern.append(part);\n \t\t\t}\n\t\t\treturn matcherProvider.getRequestMatcher(pattern.toString());\n \t\t}\n \t}", "sourceBeforeFix": "String pattern=this.prefix; ", "sourceAfterFix": "StringBuilder pattern=new StringBuilder(this.prefix); "}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface IgniteCacheEndpointBuilder\n             extends\n                 IgniteCacheEndpointConsumerBuilder, IgniteCacheEndpointProducerBuilder {\n         default AdvancedIgniteCacheEndpointBuilder advanced() {", "fixed": "     \n    public interface IgniteCacheEndpointBuilder\n             extends\n                 IgniteCacheEndpointConsumerBuilder, IgniteCacheEndpointProducerBuilder {\n         default AdvancedIgniteCacheEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "2921e7bf0d74a65fdcc71d3ce3053037d14e4d44", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "     protected void handleMapTryLock(String[] args) {\n         String key = args[1];\n        long time = (args.length > 2) ? Long.valueOf(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMap().tryLock(key);", "fixed": "     protected void handleMapTryLock(String[] args) {\n         String key = args[1];\n        long time = (args.length > 2) ? Long.parseLong(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMap().tryLock(key);", "sourceBeforeFix": "Long.valueOf(args[1])", "sourceAfterFix": "Long.parseLong(args[1])"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  private final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "fixed": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2fv(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2fv(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "sourceBeforeFix": "GL20.glUniformMatrix2(location,transpose,toFloatBuffer(value,offset,count << 2))", "sourceAfterFix": "GL20.glUniformMatrix2fv(location,transpose,toFloatBuffer(value,offset,count << 2))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<Status> getFriendsTimeline(Paging paging) throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\",null, paging.asPostParameterList(), true));\n     }\n     /**", "fixed": "      */\n     public ResponseList<Status> getFriendsTimeline(Paging paging) throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\",null, paging.asPostParameterList(), true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/home_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/home_timeline.json\",true))"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface SmppEndpointBuilder\n             extends\n                 SmppEndpointConsumerBuilder, SmppEndpointProducerBuilder {\n         default AdvancedSmppEndpointBuilder advanced() {", "fixed": "     \n    public interface SmppEndpointBuilder\n             extends\n                 SmppEndpointConsumerBuilder, SmppEndpointProducerBuilder {\n         default AdvancedSmppEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fd2bf7d972c703a603f7ec043b96649347f7e184", "projectName": "facebook.presto", "bugType": "Change Numeric Literal", "problem": "         httpClientBinder(binder).bindHttpClient(\"scheduler\", ForScheduler.class)\n                 .withTracing()\n                 .withConfigDefaults(config -> {\n                    config.setIdleTimeout(new Duration(2, SECONDS));\n                     config.setRequestTimeout(new Duration(10, SECONDS));\n                     config.setMaxConnectionsPerServer(250);\n                 });", "fixed": "         httpClientBinder(binder).bindHttpClient(\"scheduler\", ForScheduler.class)\n                 .withTracing()\n                 .withConfigDefaults(config -> {\n                    config.setIdleTimeout(new Duration(30, SECONDS));\n                     config.setRequestTimeout(new Duration(10, SECONDS));\n                     config.setMaxConnectionsPerServer(250);\n                 });", "sourceBeforeFix": "new Duration(2,SECONDS)", "sourceAfterFix": "new Duration(30,SECONDS)"}
{"fixCommitSHA1": "5f2f072d694275f750d1ee139386cc64a0670f4f", "projectName": "netty.netty", "bugType": "Change Identifier Used", "problem": "                 allIdleTimeout =\n                     timer.newTimeout(this, allIdleTimeMillis, TimeUnit.MILLISECONDS);\n                 try {\n                    channelIdle(ctx, IdleState.ALL_IDLE, lastReadTime);\n                 } catch (Throwable t) {\n                     fireExceptionCaught(ctx, t);\n                 }", "fixed": "                 allIdleTimeout =\n                     timer.newTimeout(this, allIdleTimeMillis, TimeUnit.MILLISECONDS);\n                 try {\n                    channelIdle(ctx, IdleState.ALL_IDLE, lastIoTime);\n                 } catch (Throwable t) {\n                     fireExceptionCaught(ctx, t);\n                 }", "sourceBeforeFix": "channelIdle(ctx,IdleState.ALL_IDLE,lastReadTime)", "sourceAfterFix": "channelIdle(ctx,IdleState.ALL_IDLE,lastIoTime)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsCsv(String path, long millis, OUT endTuple) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, endTuple);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsCsv(String path, long millis, OUT endTuple) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, endTuple);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "93ec35952feb5bdcd58a7ac6ad0f07307ed0d367", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "                 prop.getField().getJavaDoc().setFullText(option.getDescription());\n             }\n             if (!Strings.isBlank(option.getDefaultValue())) {\n                if (\"java.lang.String\".equals(option.getType())) {\n                     prop.getField().setStringInitializer(option.getDefaultValue());\n                 } else if (\"long\".equals(option.getJavaType()) || \"java.lang.Long\".equals(option.getJavaType())) {", "fixed": "                 prop.getField().getJavaDoc().setFullText(option.getDescription());\n             }\n             if (!Strings.isBlank(option.getDefaultValue())) {\n                if (\"java.lang.String\".equals(option.getJavaType())) {\n                     prop.getField().setStringInitializer(option.getDefaultValue());\n                 } else if (\"long\".equals(option.getJavaType()) || \"java.lang.Long\".equals(option.getJavaType())) {", "sourceBeforeFix": "option.getType()", "sourceAfterFix": "option.getJavaType()"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedLuceneEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default LuceneEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedLuceneEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default LuceneEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "69b950bf50cc482a7bac2631a0d4d5afae964a94", "projectName": "swagger-api.swagger-core", "bugType": "Same Function More Args", "problem": "         BASE_CLASSES = Collections.unmodifiableMap(baseClasses);\n         final Map<String, PrimitiveType> externalClasses = new HashMap<String, PrimitiveType>();\n        addKeys(externalClasses, DATE, \"org.joda.time.LocalDate\");\n         addKeys(externalClasses, DATE_TIME, \"org.joda.time.DateTime\", \"org.joda.time.ReadableDateTime\",\n                \"javax.xml.datatype.XMLGregorianCalendar\");\n         EXTERNAL_CLASSES = Collections.unmodifiableMap(externalClasses);\n         final Map<String, PrimitiveType> names = new TreeMap<String, PrimitiveType>(String.CASE_INSENSITIVE_ORDER);", "fixed": "         BASE_CLASSES = Collections.unmodifiableMap(baseClasses);\n         final Map<String, PrimitiveType> externalClasses = new HashMap<String, PrimitiveType>();\n        addKeys(externalClasses, DATE, \"org.joda.time.LocalDate\", \"java.time.LocalDate\");\n         addKeys(externalClasses, DATE_TIME, \"org.joda.time.DateTime\", \"org.joda.time.ReadableDateTime\",\n                \"javax.xml.datatype.XMLGregorianCalendar\", \"java.time.LocalDateTime\");\n         EXTERNAL_CLASSES = Collections.unmodifiableMap(externalClasses);\n         final Map<String, PrimitiveType> names = new TreeMap<String, PrimitiveType>(String.CASE_INSENSITIVE_ORDER);", "sourceBeforeFix": "addKeys(externalClasses,DATE,\"org.joda.time.LocalDate\")", "sourceAfterFix": "addKeys(externalClasses,DATE,\"org.joda.time.LocalDate\",\"java.time.LocalDate\")"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedWebsocketEndpointBuilder\n             extends\n                 AdvancedWebsocketEndpointConsumerBuilder, AdvancedWebsocketEndpointProducerBuilder {\n         default WebsocketEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedWebsocketEndpointBuilder\n             extends\n                 AdvancedWebsocketEndpointConsumerBuilder, AdvancedWebsocketEndpointProducerBuilder {\n         default WebsocketEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "3dddcc4cdf4a74ddbd4607c6aaee5bdd8ac46c27", "projectName": "gephi.gephi", "bugType": "Change Modifier", "problem": "     }\n     @Override\n    public void updateLOD() {\n         Iterator<NodeModel> iterator = octree.getNodeIterator();\n         for (; iterator.hasNext();) {\n             NodeModel obj = iterator.next();", "fixed": "     }\n     @Override\n    public synchronized void updateLOD() {\n         Iterator<NodeModel> iterator = octree.getNodeIterator();\n         for (; iterator.hasNext();) {\n             NodeModel obj = iterator.next();", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "0397639dc6f21b1336674d1fe72c9b3b06578570", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         assertNotNull(resultMessage.getBody(SerializableResponseDto.class));\n         assertNotNull(resultMessage.getHeader(\"requestObject\", SerializableRequestDto.class));\n         assertEquals(Boolean.TRUE, resultMessage.getHeader(\"boolean\", Boolean.class));\n        assertEquals((Long) 123l, resultMessage.getHeader(\"long\", Long.class));\n         assertEquals((Double) 1.23, resultMessage.getHeader(\"double\", Double.class));\n         assertEquals(\"hello\", resultMessage.getHeader(\"string\", String.class));\n         assertNotNull(resultMessage.getHeader(\"responseHeader\", SerializableResponseDto.class));", "fixed": "         assertNotNull(resultMessage.getBody(SerializableResponseDto.class));\n         assertNotNull(resultMessage.getHeader(\"requestObject\", SerializableRequestDto.class));\n         assertEquals(Boolean.TRUE, resultMessage.getHeader(\"boolean\", Boolean.class));\n        assertEquals((Long) 123L, resultMessage.getHeader(\"long\", Long.class));\n         assertEquals((Double) 1.23, resultMessage.getHeader(\"double\", Double.class));\n         assertEquals(\"hello\", resultMessage.getHeader(\"string\", String.class));\n         assertNotNull(resultMessage.getHeader(\"responseHeader\", SerializableResponseDto.class));", "sourceBeforeFix": "(Long)123l", "sourceAfterFix": "(Long)123L"}
{"fixCommitSHA1": "06f8fe87421493280f6602aeb73153e677844542", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t\tfor (int i = 0; i < noOfTasks; i++) {\n \t\t\tfor (int j = 0; j < 2 + i; j++) {\n\t\t\t\tfinal String part = new Path(bucketPath, \"part-\" + i + '-' + j).toString();\n \t\t\t\tAssert.assertTrue(paths.contains(part));\n \t\t\t\tpaths.remove(part);\n \t\t\t}", "fixed": " \t\tfor (int i = 0; i < noOfTasks; i++) {\n \t\t\tfor (int j = 0; j < 2 + i; j++) {\n\t\t\t\tfinal String part = new Path(bucketPath, \"part-\" + i + '-' + j).getPath();\n \t\t\t\tAssert.assertTrue(paths.contains(part));\n \t\t\t\tpaths.remove(part);\n \t\t\t}", "sourceBeforeFix": "new Path(testBucket.getParent(),\".test-2.inprogress\").toString()", "sourceAfterFix": "new Path(testBucket.getParent(),\".test-2.inprogress\").getPath()"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should delete global property from database\n \t */\n \t@Authorized(PrivilegeConstants.PURGE_GLOBAL_PROPERTIES)\n\tpublic void purgeGlobalProperty(GlobalProperty globalProperty) throws APIException;\n \t/**\n \t * Completely remove the given global properties from the database", "fixed": " \t * @should delete global property from database\n \t */\n \t@Authorized(PrivilegeConstants.PURGE_GLOBAL_PROPERTIES)\n\tpublic void purgeGlobalProperty(GlobalProperty globalProperty);\n \t/**\n \t * Completely remove the given global properties from the database", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": " };\n   \n  private final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler", "fixed": " };\n   \n  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites() throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"favorites.json\", new PostParameter[0], true));\n     }\n     /**", "fixed": "      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites() throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"favorites.json\", new PostParameter[0], true));\n     }\n     /**", "sourceBeforeFix": "SavedSearch.constructSavedSearches(get(getBaseURL() + \"saved_searches.json\",true))", "sourceAfterFix": "SavedSearch.createSavedSearchList(get(getBaseURL() + \"saved_searches.json\",true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * @return True, if all normalized key comparisons should invert the sign of the comparison result,\n \t *         false if the normalized key should be used as is.\n \t */\n\tpublic boolean invertNormalizedKey();", "fixed": " \t * @return True, if all normalized key comparisons should invert the sign of the comparison result,\n \t *         false if the normalized key should be used as is.\n \t */\n\tpublic abstract boolean invertNormalizedKey();", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "da5e1827cf1c86cb1bddf3886a83736990a36430", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "         if (leftValue instanceof Comparable) {\n            Object value = converter.convertTo(leftValue.getClass(), rightValue);\n             if (value != null) {\n                 return ((Comparable) leftValue).compareTo(value);\n             }", "fixed": "         if (leftValue instanceof Comparable) {\n            Object value = converter.tryConvertTo(leftValue.getClass(), rightValue);\n             if (value != null) {\n                 return ((Comparable) leftValue).compareTo(value);\n             }", "sourceBeforeFix": "converter.convertTo(leftValue.getClass(),rightValue)", "sourceAfterFix": "converter.tryConvertTo(leftValue.getClass(),rightValue)"}
{"fixCommitSHA1": "06ed1d48da4a57dc87cf3c1215bfe23bce4e78d8", "projectName": "checkstyle.checkstyle", "bugType": "Wrong Function Name", "problem": " public class AllChecksTest extends BaseCheckTestSupport {\n     @Test\n     public void testAllChecksWithDefaultConfiguration() throws Exception {\n        final String inputFilePath = getNonCompilablePath(\"InputDefaultConfig.java\");\n         final String[] expected = ArrayUtils.EMPTY_STRING_ARRAY;\n         for (Class<?> check : CheckUtil.getCheckstyleChecks()) {", "fixed": " public class AllChecksTest extends BaseCheckTestSupport {\n     @Test\n     public void testAllChecksWithDefaultConfiguration() throws Exception {\n        final String inputFilePath = getPath(\"InputDefaultConfig.java\");\n         final String[] expected = ArrayUtils.EMPTY_STRING_ARRAY;\n         for (Class<?> check : CheckUtil.getCheckstyleChecks()) {", "sourceBeforeFix": "getNonCompilablePath(\"InputDefaultConfig.java\")", "sourceAfterFix": "getPath(\"InputDefaultConfig.java\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e9fbd7f493863da1e68776473d8b5d03861daa6f", "projectName": "apache.flink", "bugType": "Change Numeric Literal", "problem": " \t\t\tLOG.debug(\"Initializing sortmerger...\");\n \t\t\tSorter<PactRecord> sorter = new AsynchronousPartialSorter<PactRecord>(this.memoryManager, source,\n\t\t\t\tthis.parentTask, this.serializer, this.comparator, 32 * 1024 * 1024);\n\t\t\trunPartialSorter(sorter, NUM_RECORDS, 28);\n \t\t}\n \t\tcatch (Exception t) {\n \t\t\tt.printStackTrace();", "fixed": " \t\t\tLOG.debug(\"Initializing sortmerger...\");\n \t\t\tSorter<PactRecord> sorter = new AsynchronousPartialSorter<PactRecord>(this.memoryManager, source,\n\t\t\t\tthis.parentTask, this.serializer, this.comparator, 10 * 1024 * 1024);\n\t\t\trunPartialSorter(sorter, NUM_RECORDS, 25);\n \t\t}\n \t\tcatch (Exception t) {\n \t\t\tt.printStackTrace();", "sourceBeforeFix": "32 * 1024 * 1024", "sourceAfterFix": "10 * 1024 * 1024"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface ElsqlEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedElsqlEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface ElsqlEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedElsqlEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "9aa49c8f6d2b30577565f87984819e1df0d62d0f", "projectName": "checkstyle.checkstyle", "bugType": "Wrong Function Name", "problem": "                         .getLastColumn() >= column;\n             final boolean nameMatches =\n                 ALL_WARNING_MATCHING_ID.equals(entry.getCheckName())\n                    || entry.getCheckName().equals(checkAlias);\n             if (afterStart && beforeEnd && nameMatches) {\n                 return true;\n             }", "fixed": "                         .getLastColumn() >= column;\n             final boolean nameMatches =\n                 ALL_WARNING_MATCHING_ID.equals(entry.getCheckName())\n                    || entry.getCheckName().equalsIgnoreCase(checkAlias);\n             if (afterStart && beforeEnd && nameMatches) {\n                 return true;\n             }", "sourceBeforeFix": "entry.getCheckName().equals(checkAlias)", "sourceAfterFix": "entry.getCheckName().equalsIgnoreCase(checkAlias)"}
{"fixCommitSHA1": "5d53da64dbc5b3f166ef81fbc408dacb1bb28de3", "projectName": "apache.hadoop", "bugType": "Change Modifier", "problem": "       .transferStateFromPreviousAppSchedulingInfo(appAttempt.appSchedulingInfo);\n   }\n  public void move(Queue newQueue) {\n     QueueMetrics oldMetrics = queue.getMetrics();\n     QueueMetrics newMetrics = newQueue.getMetrics();\n     String user = getUser();", "fixed": "       .transferStateFromPreviousAppSchedulingInfo(appAttempt.appSchedulingInfo);\n   }\n  public synchronized void move(Queue newQueue) {\n     QueueMetrics oldMetrics = queue.getMetrics();\n     QueueMetrics newMetrics = newQueue.getMetrics();\n     String user = getUser();", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "3dddcc4cdf4a74ddbd4607c6aaee5bdd8ac46c27", "projectName": "gephi.gephi", "bugType": "Change Modifier", "problem": "     }\n     @Override\n    public boolean updateWorld() {\n         boolean repositioned = octree.repositionNodes();\n         boolean updated = dataBridge.updateWorld();", "fixed": "     }\n     @Override\n    public synchronized boolean updateWorld() {\n         boolean repositioned = octree.repositionNodes();\n         boolean updated = dataBridge.updateWorld();", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15846, value = \"Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.\")\n     String invalidRolloutPlanLess(String name, String propertyName, int value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10846, value = \"Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.\")\n     String invalidRolloutPlanLess(String name, String propertyName, int value);\n     /**", "sourceBeforeFix": "id=15857", "sourceAfterFix": "id=10857"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "             }\n         }\n         if (isStatisticsEnabled()) {\n            statistics.addGetTimeNano(System.nanoTime() - start);\n         }\n         CacheEntryProcessorEntry entry = new CacheEntryProcessorEntry(key, record, this, now);\n         final Object process = entryProcessor.process(entry, arguments);", "fixed": "             }\n         }\n         if (isStatisticsEnabled()) {\n            statistics.addGetTimeNanos(System.nanoTime() - start);\n         }\n         CacheEntryProcessorEntry entry = new CacheEntryProcessorEntry(key, record, this, now);\n         final Object process = entryProcessor.process(entry, arguments);", "sourceBeforeFix": "statistics.addPutTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addPutTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15871, value = \"Unknown server %s\")\n     IllegalStateException unknownServer(ServerIdentity server);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10871, value = \"Unknown server %s\")\n     IllegalStateException unknownServer(ServerIdentity server);\n     /**", "sourceBeforeFix": "id=15849", "sourceAfterFix": "id=10849"}
{"fixCommitSHA1": "e70960913c07d921dea470857f9bcdb67f38959f", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "      * @param format a <code>String</code> value\n      * @throws ConversionException if unable to create Pattern object.\n      */\n    public void setOnCommentFormat(String format) {\n         onRegexp = Utils.createPattern(format);\n     }", "fixed": "      * @param format a <code>String</code> value\n      * @throws ConversionException if unable to create Pattern object.\n      */\n    public final void setOnCommentFormat(String format) {\n         onRegexp = Utils.createPattern(format);\n     }", "sourceBeforeFix": "1", "sourceAfterFix": "17"}
{"fixCommitSHA1": "e2efffc72002968f835a0ea6a70f8e7762752b15", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": " \t\tConceptName anotherConceptName = ConceptNameTest.createMockConceptName(3, Context.getLocale(), null, true);\r\n \t\tanotherConceptName.setName(\"preferred name\");\r\n \t\tnewConcept.addName(anotherConceptName);\r\n\t\tErrors errors = new BindException(concept, \"concept\");\r\n \t\tnew ConceptValidator().validate(newConcept, errors);\r\n \t}\r", "fixed": " \t\tConceptName anotherConceptName = ConceptNameTest.createMockConceptName(3, Context.getLocale(), null, true);\r\n \t\tanotherConceptName.setName(\"preferred name\");\r\n \t\tnewConcept.addName(anotherConceptName);\r\n\t\tErrors errors = new BindException(newConcept, \"concept\");\r\n \t\tnew ConceptValidator().validate(newConcept, errors);\r\n \t}\r", "sourceBeforeFix": "new BindException(concept,\"concept\")", "sourceAfterFix": "new BindException(newConcept,\"concept\")"}
{"fixCommitSHA1": "3757a700a89638e5747d966bdaa8266b62c974c8", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "     assertEquals(encoded, encoding.encode(bytes));\n   }\n  private void testDecodes(BaseEncoding encoding, String encoded, String decoded) {\n     byte[] bytes;\n     try {\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();", "fixed": "     assertEquals(encoded, encoding.encode(bytes));\n   }\n  private static void testDecodes(BaseEncoding encoding, String encoded, String decoded) {\n     byte[] bytes;\n     try {\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedBonitaEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default BonitaEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedBonitaEndpointBuilder\n             extends\n                 EndpointConsumerBuilder {\n         default BonitaEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "41467c8004b716fb78002c3139ea771b70ed165d", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tprivate void renderCached () {\r\n\t\tcache5.setColor(red);\r\n \t\tcache5.draw(spriteBatch);\r\n \t\tcache1.draw(spriteBatch);\r", "fixed": " \t}\r\n \tprivate void renderCached () {\r\n\t\tcache5.setColors(red);\r\n \t\tcache5.draw(spriteBatch);\r\n \t\tcache1.draw(spriteBatch);\r", "sourceBeforeFix": "cache5.setColor(red)", "sourceAfterFix": "cache5.setColors(red)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "38eb6222bddaf49c3c9ae73ddef0cfe4ff5efa48", "projectName": "alibaba.dubbo", "bugType": "Change Numeric Literal", "problem": "     @Test\n     public void test_Header_Response_Heartbeat() throws IOException {\n        byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, 0x20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n         Person person = new Person();\n         byte[] request = getRequestBytes(person, header);", "fixed": "     @Test\n     public void test_Header_Response_Heartbeat() throws IOException {\n        byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, 0x02, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n         Person person = new Person();\n         byte[] request = getRequestBytes(person, header);", "sourceBeforeFix": "{MAGIC_HIGH,MAGIC_LOW,0x20,20,0,0,0,0,0,0,0,0,0,0,0,0}", "sourceAfterFix": "{MAGIC_HIGH,MAGIC_LOW,0x02,20,0,0,0,0,0,0,0,0,0,0,0,0}"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15858, value = \"No deployment content with hash %s is available in the deployment content repository.\")\n     String noDeploymentContentWithHash(String hash);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10858, value = \"No deployment content with hash %s is available in the deployment content repository.\")\n     String noDeploymentContentWithHash(String hash);\n     /**", "sourceBeforeFix": "id=15859", "sourceAfterFix": "id=10859"}
{"fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "projectName": "Alluxio.alluxio", "bugType": "Change Operand ", "problem": "       } else {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           for (int i = 0; i < BLOCKS_PER_FILE; i ++) {\n             buf.DATA.get(mBuf.array());", "fixed": "       } else {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           for (int i = 0; i < BLOCKS_PER_FILE; i ++) {\n             buf.DATA.get(mBuf.array());", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "pId + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "c634d7acdb3ce922a82807d8d85f863b65d0c673", "projectName": "Bukkit.Bukkit", "bugType": "Wrong Function Name", "problem": "     @Override\n     public ItemStack clone() {\n         ItemStack result = new ItemStack(type, amount, durability);\n        result.addEnchantments(getEnchantments());\n         return result;\n     }", "fixed": "     @Override\n     public ItemStack clone() {\n         ItemStack result = new ItemStack(type, amount, durability);\n        result.addUnsafeEnchantments(getEnchantments());\n         return result;\n     }", "sourceBeforeFix": "result.addEnchantments(getEnchantments())", "sourceAfterFix": "result.addUnsafeEnchantments(getEnchantments())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface WebsocketEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedWebsocketEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface WebsocketEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedWebsocketEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "0e8e5ba702fbbea71f8cffc063e2d873cbebe83e", "projectName": "wildfly.wildfly", "bugType": "Same Function Swap Args", "problem": "             Assert.fail(\"Test should fail, user shouldn't be allowed to invoke that method\");\n         } catch (WebServiceException e) {\n            Assert.assertEquals(e.getCause().getMessage(), getNotAllowedExceptionMessage(\"helloForNone\"));\n         }\n     }", "fixed": "             Assert.fail(\"Test should fail, user shouldn't be allowed to invoke that method\");\n         } catch (WebServiceException e) {\n            Assert.assertEquals(getNotAllowedExceptionMessage(\"helloForNone\"), e.getCause().getMessage());\n         }\n     }", "sourceBeforeFix": "Assert.assertEquals(e.getCause().getMessage(),getNotAllowedExceptionMessage(\"helloForNone\"))", "sourceAfterFix": "Assert.assertEquals(getNotAllowedExceptionMessage(\"helloForNone\"),e.getCause().getMessage())"}
{"fixCommitSHA1": "761d3ff3b19109715644ebc2bfa0396f3148d772", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "                 } catch (InterruptedException e) {\n                     e.printStackTrace();\n                 }\n                hz1.getLifecycleService().terminate();\n             }\n         };", "fixed": "                 } catch (InterruptedException e) {\n                     e.printStackTrace();\n                 }\n                hz1.getLifecycleService().shutdown();\n             }\n         };", "sourceBeforeFix": "hz1.getLifecycleService().terminate()", "sourceAfterFix": "hz1.getLifecycleService().shutdown()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "2", "sourceAfterFix": "0"}
{"fixCommitSHA1": "a6dc024ed1176e0a4c523b1a64e8e907e1394d7b", "projectName": "openhab.openhab", "bugType": "Wrong Function Name", "problem": " \t    \t\t\t\tsendAllowed.release();\n \t    \t\t\t}\n \t\t\t\t\trecvMessage = recvQueue.take();\n\t\t\t\t\tlogger.trace(\"Receive queue TAKE: Length={}\", recvQueue.size());\n \t\t\t\t\tlogger.debug(\"Process Message = {}\", SerialMessage.bb2hex(recvMessage.getMessageBuffer()));\n \t\t    \t\thandleIncomingMessage(recvMessage);", "fixed": " \t    \t\t\t\tsendAllowed.release();\n \t    \t\t\t}\n \t\t\t\t\trecvMessage = recvQueue.take();\n\t\t\t\t\tlogger.debug(\"Receive queue TAKE: Length={}\", recvQueue.size());\n \t\t\t\t\tlogger.debug(\"Process Message = {}\", SerialMessage.bb2hex(recvMessage.getMessageBuffer()));\n \t\t    \t\thandleIncomingMessage(recvMessage);", "sourceBeforeFix": "logger.trace(\"Receive queue ADD: Length={}\",recvQueue.size())", "sourceAfterFix": "logger.debug(\"Receive queue ADD: Length={}\",recvQueue.size())"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15869, value = \"Unknown %s %s\")\n     String unknown(String name, String value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10869, value = \"Unknown %s %s\")\n     String unknown(String name, String value);\n     /**", "sourceBeforeFix": "id=15861", "sourceAfterFix": "id=10861"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  private final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     return additionalReplacements;\n   }\n  private final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     return additionalReplacements;\n   }\n  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     @ApiOperation(value = \"Creates list of users with given input array\", notes = \"\", tags={ \"user\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Void.class) })\n    void createUsersWithArrayInput(@Valid List<User> body);\n     @POST\n     @Path(\"/createWithList\")", "fixed": "     @ApiOperation(value = \"Creates list of users with given input array\", notes = \"\", tags={ \"user\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Void.class) })\n    void createUsersWithArrayInput(@Valid List<User> body) throws Exception;\n     @POST\n     @Path(\"/createWithList\")", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface BoxEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedBoxEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface BoxEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedBoxEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "5ac2955ff4451c72db1e157dda76786f30511679", "projectName": "eclipse.vert.x", "bugType": "Change Numeric Literal", "problem": "     int receiverBufferSize = TestUtils.randomPortInt();\n     Random rand = new Random();\n     boolean reuseAddress = rand.nextBoolean();\n    int trafficClass = TestUtils.randomByte() + 127;\n     boolean tcpNoDelay = rand.nextBoolean();\n     boolean tcpKeepAlive = rand.nextBoolean();\n     int soLinger = TestUtils.randomPositiveInt();", "fixed": "     int receiverBufferSize = TestUtils.randomPortInt();\n     Random rand = new Random();\n     boolean reuseAddress = rand.nextBoolean();\n    int trafficClass = TestUtils.randomByte() + 128;\n     boolean tcpNoDelay = rand.nextBoolean();\n     boolean tcpKeepAlive = rand.nextBoolean();\n     int soLinger = TestUtils.randomPositiveInt();", "sourceBeforeFix": "TestUtils.randomByte() + 127", "sourceAfterFix": "TestUtils.randomByte() + 128"}
{"fixCommitSHA1": "dbd841562137595e365ccf2ad1524ecfdee958c9", "projectName": "google.auto", "bugType": "Change Identifier Used", "problem": "     ImmutableListMultimap.Builder<String, FactoryMethodDescriptor> indexedMethods =\n         ImmutableListMultimap.builder();\n    ImmutableSet.Builder<ImplemetationMethodDescriptor> implemetationMethodDescriptors =\n         ImmutableSet.builder();\n     for (Element element : roundEnv.getElementsAnnotatedWith(AutoFactory.class)) {\n       Optional<AutoFactoryDeclaration> declaration = declarationFactory.createIfValid(element);", "fixed": "     ImmutableListMultimap.Builder<String, FactoryMethodDescriptor> indexedMethods =\n         ImmutableListMultimap.builder();\n    ImmutableSet.Builder<ImplementationMethodDescriptor> implementationMethodDescriptors =\n         ImmutableSet.builder();\n     for (Element element : roundEnv.getElementsAnnotatedWith(AutoFactory.class)) {\n       Optional<AutoFactoryDeclaration> declaration = declarationFactory.createIfValid(element);", "sourceBeforeFix": "implemetationMethodDescriptors.build()", "sourceAfterFix": "implementationMethodDescriptors.build()"}
{"fixCommitSHA1": "e75b06a12cc6de7b6ffaa998c4c8540230ef5514", "projectName": "apache.flink", "bugType": "Change Numeric Literal", "problem": " \t\t\tcase SORT_BOTH_MERGE:      return 2;\n \t\t\tcase SORT_FIRST_MERGE:     return 1;\n \t\t\tcase SORT_SECOND_MERGE:    return 1;\n\t\t\tcase MERGE:                return 0;\n \t\t\tcase HYBRIDHASH_FIRST:     return 1;\n \t\t\tcase HYBRIDHASH_SECOND:    return 1;\n \t\t\tcase MMHASH_FIRST:         return 1;", "fixed": " \t\t\tcase SORT_BOTH_MERGE:      return 2;\n \t\t\tcase SORT_FIRST_MERGE:     return 1;\n \t\t\tcase SORT_SECOND_MERGE:    return 1;\n\t\t\tcase MERGE:                return 1;\n \t\t\tcase HYBRIDHASH_FIRST:     return 1;\n \t\t\tcase HYBRIDHASH_SECOND:    return 1;\n \t\t\tcase MMHASH_FIRST:         return 1;", "sourceBeforeFix": "return 0; ", "sourceAfterFix": "return 1; "}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "80fa3080b958523cf754f0523150acbf09e4bb78", "projectName": "Atmosphere.atmosphere", "bugType": "Change Numeric Literal", "problem": "         if (config.isSupportSession()\n                 && req.getSession(false) != null\n                 && req.getSession().getMaxInactiveInterval() >= 0\n                && req.getSession().getMaxInactiveInterval() * 1000 < timeout) {\n             throw new IllegalStateException(\"Cannot suspend a \" +\n                     \"response longer than the session timeout. Increase the value of session-timeout in web.xml\");\n         }", "fixed": "         if (config.isSupportSession()\n                 && req.getSession(false) != null\n                 && req.getSession().getMaxInactiveInterval() >= 0\n                && req.getSession().getMaxInactiveInterval() * 1000L < timeout) {\n             throw new IllegalStateException(\"Cannot suspend a \" +\n                     \"response longer than the session timeout. Increase the value of session-timeout in web.xml\");\n         }", "sourceBeforeFix": "req.getSession().getMaxInactiveInterval() * 1000", "sourceAfterFix": "req.getSession().getMaxInactiveInterval() * 1000L"}
{"fixCommitSHA1": "a6c394118fad3819a98baf4142fb59f6db3735f0", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "      * @param config            the swagger configuration\n      * @param classResolver     class resolver to use\n      * @return the swagger model\n      */\n    public Swagger read(List<RestDefinition> rests, String route, BeanConfig config, String camelContextId, ClassResolver classResolver) {\n         Swagger swagger = new Swagger();\n         for (RestDefinition rest : rests) {", "fixed": "      * @param config            the swagger configuration\n      * @param classResolver     class resolver to use\n      * @return the swagger model\n     * @throws ClassNotFoundException \n      */\n    public Swagger read(List<RestDefinition> rests, String route, BeanConfig config, String camelContextId, ClassResolver classResolver) throws ClassNotFoundException {\n         Swagger swagger = new Swagger();\n         for (RestDefinition rest : rests) {", "sourceBeforeFix": "classResolver.resolveClass(type)", "sourceAfterFix": "classResolver.resolveMandatoryClass(type)"}
{"fixCommitSHA1": "cddf42c30c1b839e44c03e017ccdb3619d3aa967", "projectName": "openmrs.openmrs-core", "bugType": "Wrong Function Name", "problem": " \t\tif (person.isPersonVoided()) {\r\n\t\t\tif (!StringUtils.hasLength(person.getVoidReason()))\r\n \t\t\t\tthrow new APIException(\r\n \t\t\t\t        \"The voided bit was set to true, so a void reason is required at save time for person: \" + person);\r", "fixed": " \t\tif (person.isPersonVoided()) {\r\n\t\t\tif (!StringUtils.hasLength(person.getPersonVoidReason()))\r\n \t\t\t\tthrow new APIException(\r\n \t\t\t\t        \"The voided bit was set to true, so a void reason is required at save time for person: \" + person);\r", "sourceBeforeFix": "person.getVoidReason()", "sourceAfterFix": "person.getPersonVoidReason()"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedGoogleDriveEndpointBuilder\n             extends\n                 AdvancedGoogleDriveEndpointConsumerBuilder, AdvancedGoogleDriveEndpointProducerBuilder {\n         default GoogleDriveEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedGoogleDriveEndpointBuilder\n             extends\n                 AdvancedGoogleDriveEndpointConsumerBuilder, AdvancedGoogleDriveEndpointProducerBuilder {\n         default GoogleDriveEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "       if (mWrite) {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n           OutputStream os = mHdfsFs.create(new Path(filePath));\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n             mBuf.putInt(0, k + mWorkerId);", "fixed": "       if (mWrite) {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           OutputStream os = mHdfsFs.create(new Path(filePath));\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n             mBuf.putInt(0, k + mWorkerId);", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface OptaPlannerEndpointBuilder\n             extends\n                 OptaPlannerEndpointConsumerBuilder, OptaPlannerEndpointProducerBuilder {\n         default AdvancedOptaPlannerEndpointBuilder advanced() {", "fixed": "     \n    public interface OptaPlannerEndpointBuilder\n             extends\n                 OptaPlannerEndpointConsumerBuilder, OptaPlannerEndpointProducerBuilder {\n         default AdvancedOptaPlannerEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "e16bf78360f5a93cbc6db48fa486f445e4b9a21a", "projectName": "openhab.openhab", "bugType": "Change Identifier Used", "problem": "     @Test\n     public void testGetBindingValueToStateConverter() {\n         NumberItem item = new NumberItem(NUMBER_ITEM_NAME);\n        converterLookup.addCustomConverter(item, IntegerDecimalConverter.class);\n         StateConverter<?, ?> converter = converterLookup.getBindingValueToStateConverter(item, null);\n         assertEquals(IntegerDecimalConverter.class, converter.getClass());\n     }", "fixed": "     @Test\n     public void testGetBindingValueToStateConverter() {\n         NumberItem item = new NumberItem(NUMBER_ITEM_NAME);\n        converterLookup.addCustomConverter(NUMBER_ITEM_NAME, IntegerDecimalConverter.class);\n         StateConverter<?, ?> converter = converterLookup.getBindingValueToStateConverter(item, null);\n         assertEquals(IntegerDecimalConverter.class, converter.getClass());\n     }", "sourceBeforeFix": "converterLookup.addCustomConverter(item,IntegerDecimalConverter.class)", "sourceAfterFix": "converterLookup.addCustomConverter(NUMBER_ITEM_NAME,IntegerDecimalConverter.class)"}
{"fixCommitSHA1": "46fa8090954480eecdeb6e7367f0e30655853f42", "projectName": "checkstyle.checkstyle", "bugType": "Same Function More Args", "problem": "     private static String getIndentation(DetailNode node) {\n         final boolean isLastChild = JavadocUtils.getNextSibling(node) == null;\n         DetailNode currentNode = node;\n        final StringBuilder indentation = new StringBuilder();\n         while (currentNode.getParent() != null) {\n             currentNode = currentNode.getParent();\n             if (currentNode.getParent() == null) {", "fixed": "     private static String getIndentation(DetailNode node) {\n         final boolean isLastChild = JavadocUtils.getNextSibling(node) == null;\n         DetailNode currentNode = node;\n        final StringBuilder indentation = new StringBuilder(1024);\n         while (currentNode.getParent() != null) {\n             currentNode = currentNode.getParent();\n             if (currentNode.getParent() == null) {", "sourceBeforeFix": "new StringBuilder()", "sourceAfterFix": "new StringBuilder(1024)"}
{"fixCommitSHA1": "d2b19965df52e66385a2d7146887a44cea50330a", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "   }\n   public void normalize() {\n    logger.info(\"Normalizing\");\n     startPass(\"normalize\");\n     process(new Normalize(this, false));\n     endPass();", "fixed": "   }\n   public void normalize() {\n    logger.fine(\"Normalizing\");\n     startPass(\"normalize\");\n     process(new Normalize(this, false));\n     endPass();", "sourceBeforeFix": "logger.info(\"Remove try/catch/finally\")", "sourceAfterFix": "logger.fine(\"Remove try/catch/finally\")"}
{"fixCommitSHA1": "41ab70ec4939adaf9fcbd090b680d1e22871bef7", "projectName": "facebook.presto", "bugType": "Change Identifier Used", "problem": "         @Override\n         public Void visitTableFinish(TableFinishNode node, Void context)\n         {\n            printNode(node, format(\"TableCommit[%s]\", Joiner.on(\", \").join(node.getOutputSymbols())), NODE_COLORS.get(NodeType.TABLE_COMMIT));\n             return node.getSource().accept(this, context);\n         }", "fixed": "         @Override\n         public Void visitTableFinish(TableFinishNode node, Void context)\n         {\n            printNode(node, format(\"TableFinish[%s]\", Joiner.on(\", \").join(node.getOutputSymbols())), NODE_COLORS.get(NodeType.TABLE_FINISH));\n             return node.getSource().accept(this, context);\n         }", "sourceBeforeFix": "TABLE_COMMIT", "sourceAfterFix": "TABLE_FINISH"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e7919feab1a5f371806a2f6d267e84e9542e3f26", "projectName": "mybatis.mybatis-3", "bugType": "Change Identifier Used", "problem": "   private void add(final Class<?> primitiveType, final Class<?> wrapperType) {\n     primitiveToWrappers.put(primitiveType, wrapperType);\n    primitiveToWrappers.put(wrapperType, primitiveType);\n   }\n   public Class<?> getWrapper(final Class<?> primitiveType) {", "fixed": "   private void add(final Class<?> primitiveType, final Class<?> wrapperType) {\n     primitiveToWrappers.put(primitiveType, wrapperType);\n    wrappersToPrimitives.put(wrapperType, primitiveType);\n   }\n   public Class<?> getWrapper(final Class<?> primitiveType) {", "sourceBeforeFix": "primitiveToWrappers.put(wrapperType,primitiveType)", "sourceAfterFix": "wrappersToPrimitives.put(wrapperType,primitiveType)"}
{"fixCommitSHA1": "e2854295f7c484671ce69bff7ec37fcb0c413a32", "projectName": "perwendel.spark", "bugType": "Change Identifier Used", "problem": "      *\n      * @param exceptionClass Type of exception\n      */\n    public void exceptionClass(Class<? extends Exception> exceptionClass) {\n         this.exceptionClass = exceptionClass;\n     }", "fixed": "      *\n      * @param exceptionClass Type of exception\n      */\n    public void exceptionClass(Class<? extends T> exceptionClass) {\n         this.exceptionClass = exceptionClass;\n     }", "sourceBeforeFix": "? extends Exception", "sourceAfterFix": "? extends T"}
{"fixCommitSHA1": "453488cff2a54f32c573589f1cfc47bbf30ebe09", "projectName": "apache.hadoop", "bugType": "Same Function More Args", "problem": "         this.configurationProvider.getConfigurationInputStream(this.conf,\n             YarnConfiguration.YARN_SITE_CONFIGURATION_FILE);\n     if (yarnSiteXMLInputStream != null) {\n      this.conf.addResource(yarnSiteXMLInputStream);\n     }\n     validateConfigs(this.conf);", "fixed": "         this.configurationProvider.getConfigurationInputStream(this.conf,\n             YarnConfiguration.YARN_SITE_CONFIGURATION_FILE);\n     if (yarnSiteXMLInputStream != null) {\n      this.conf.addResource(yarnSiteXMLInputStream,\n          YarnConfiguration.YARN_SITE_CONFIGURATION_FILE);\n     }\n     validateConfigs(this.conf);", "sourceBeforeFix": "this.conf.addResource(yarnSiteXMLInputStream)", "sourceAfterFix": "this.conf.addResource(yarnSiteXMLInputStream,YarnConfiguration.YARN_SITE_CONFIGURATION_FILE)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface XQueryEndpointBuilder\n             extends\n                 XQueryEndpointConsumerBuilder, XQueryEndpointProducerBuilder {\n         default AdvancedXQueryEndpointBuilder advanced() {", "fixed": "     \n    public interface XQueryEndpointBuilder\n             extends\n                 XQueryEndpointConsumerBuilder, XQueryEndpointProducerBuilder {\n         default AdvancedXQueryEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "05525065b2098f17217c31298a156d6ee44494fb", "projectName": "netty.netty", "bugType": "Change Binary Operator", "problem": "                         r = f;\n                         z.avail_in --;\n                         z.total_in ++;\n                    } while (z.next_in[z.next_in_index ++] == 0);\n                 }\n                 gzipBytesToRead = 2;\n                 z.istate.mode = GZIP_FHCRC;", "fixed": "                         r = f;\n                         z.avail_in --;\n                         z.total_in ++;\n                    } while (z.next_in[z.next_in_index ++] != 0);\n                 }\n                 gzipBytesToRead = 2;\n                 z.istate.mode = GZIP_FHCRC;", "sourceBeforeFix": "z.next_in[z.next_in_index++] == 0", "sourceAfterFix": "z.next_in[z.next_in_index++] != 0"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnreachableCode =\n       new PassFactory(\"removeUnreachableCode\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "2f880c73edb600ab92cdd580ac74f7388b5c6135", "projectName": "Alluxio.alluxio", "bugType": "Change Modifier", "problem": "     }\n   }\n  public void createFile(boolean recursive, String path, boolean directory, int columns,\n       ByteBuffer metadata, long blockSizeByte, long creationTimeMs) {\n     if (INACTIVE) {\n       return;", "fixed": "     }\n   }\n  public synchronized void createFile(boolean recursive, String path, boolean directory, int columns,\n       ByteBuffer metadata, long blockSizeByte, long creationTimeMs) {\n     if (INACTIVE) {\n       return;", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "3757a700a89638e5747d966bdaa8266b62c974c8", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "   }\n   @GwtIncompatible(\"Reader\")\n  private void testStreamingDecodes(BaseEncoding encoding, String encoded, String decoded)\n       throws IOException {\n     byte[] bytes;\n     try {\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();", "fixed": "   }\n   @GwtIncompatible(\"Reader\")\n  private static void testStreamingDecodes(BaseEncoding encoding, String encoded, String decoded)\n       throws IOException {\n     byte[] bytes;\n     try {\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "31b6f673fc5a826e1a649edaec147f2572d3dcf4", "projectName": "libgdx.libgdx", "bugType": "Change Unary Operator\t", "problem": " \t\tString packageDir = packageName.replace('.', '/');\r\n \t\tString sdkPath = sdkLocation.replace('\\\\', '/');\r\n\t\tif(isSdkLocationValid(sdkLocation)) {\r\n \t\t\tSystem.out.println(\"Android SDK location '\" + sdkLocation + \"' doesn't contain an SDK\");\r\n \t\t}\r", "fixed": " \t\tString packageDir = packageName.replace('.', '/');\r\n \t\tString sdkPath = sdkLocation.replace('\\\\', '/');\r\n\t\tif(!isSdkLocationValid(sdkLocation)) {\r\n \t\t\tSystem.out.println(\"Android SDK location '\" + sdkLocation + \"' doesn't contain an SDK\");\r\n \t\t}\r", "sourceBeforeFix": "isSdkLocationValid(sdkLocation)", "sourceAfterFix": "!isSdkLocationValid(sdkLocation)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8abfa48f2eb5edaf3f5a2cc2350e4e3c232f4152", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "     private class FileDropListener implements FileDrop.Listener {\n         private final JScrollPane scrollPane;\n        public FileDropListener(JScrollPane scrollPane) {\n             this.scrollPane = scrollPane;\n         }", "fixed": "     private class FileDropListener implements FileDrop.Listener {\n         private final JScrollPane scrollPane;\n        FileDropListener(JScrollPane scrollPane) {\n             this.scrollPane = scrollPane;\n         }", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform2iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toIntBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform3f (int location, float x, float y, float z) {\r", "fixed": " \t}\r\n \tpublic void glUniform2iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform2iv(location, v);\r\n \t}\r\n \tpublic void glUniform2iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform2iv(location, toIntBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform3f (int location, float x, float y, float z) {\r", "sourceBeforeFix": "GL11.glGetTexParameter(target,pname,params)", "sourceAfterFix": "GL11.glGetTexParameterfv(target,pname,params)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "26d97d9b4d5428b695de89ad729b8ef20e93fab1", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "        ErrorHandlerFactory builder = routeContext.getRoute().getErrorHandlerBuilder();\n         if (builder instanceof ErrorHandlerBuilderRef) {", "fixed": "        ErrorHandlerBuilder builder = (ErrorHandlerBuilder)routeContext.getRoute().getErrorHandlerBuilder();\n         if (builder instanceof ErrorHandlerBuilderRef) {", "sourceBeforeFix": "ErrorHandlerFactory builder=routeContext.getRoute().getErrorHandlerBuilder(); ", "sourceAfterFix": "ErrorHandlerBuilder builder=(ErrorHandlerBuilder)routeContext.getRoute().getErrorHandlerBuilder(); "}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15859, value = \"A slave domain controller cannot accept deployment content uploads\")\n     String slaveCannotAcceptUploads();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10859, value = \"A slave domain controller cannot accept deployment content uploads\")\n     String slaveCannotAcceptUploads();\n     /**", "sourceBeforeFix": "id=15830", "sourceAfterFix": "id=10830"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getUserTimeline(String id) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline/\" + id + \".json\", http.isAuthenticationEnabled()));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getUserTimeline(String id) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline/\" + id + \".json\", http.isAuthenticationEnabled()));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "3757a700a89638e5747d966bdaa8266b62c974c8", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "  */\n @GwtCompatible(emulated = true)\n public class BaseEncodingTest extends TestCase {\n  public void assertEquals(byte[] expected, byte[] actual) {\n     assertEquals(expected.length, actual.length);\n     for (int i = 0; i < expected.length; i++) {\n       assertEquals(expected[i], actual[i]);", "fixed": "  */\n @GwtCompatible(emulated = true)\n public class BaseEncodingTest extends TestCase {\n  public static void assertEquals(byte[] expected, byte[] actual) {\n     assertEquals(expected.length, actual.length);\n     for (int i = 0; i < expected.length; i++) {\n       assertEquals(expected[i], actual[i]);", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "b641b46db4f01fdbbce2fe6d544cca4b4b27b3b5", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Same Function Swap Args", "problem": "         String ha2 = getMd5(method + \":\" + uri.getPath());\n         String expectedResponse = getMd5(ha1 + \":\" + nonce + \":\" + ha2);\n        assertEquals(expectedResponse, orig.getResponse());\n     }\n     @Test(groups = \"standalone\")", "fixed": "         String ha2 = getMd5(method + \":\" + uri.getPath());\n         String expectedResponse = getMd5(ha1 + \":\" + nonce + \":\" + ha2);\n        assertEquals(orig.getResponse(), expectedResponse);\n     }\n     @Test(groups = \"standalone\")", "sourceBeforeFix": "assertEquals(expectedResponse,orig.getResponse())", "sourceAfterFix": "assertEquals(orig.getResponse(),expectedResponse)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15863, value = \"%s is not a valid URL -- %s\")\n     String invalidUrl(String url, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10863, value = \"%s is not a valid URL -- %s\")\n     String invalidUrl(String url, String message);\n     /**", "sourceBeforeFix": "id=15841", "sourceAfterFix": "id=10841"}
{"fixCommitSHA1": "f9c863f126519ad2cfd7af4cef3eed04e8f87ea3", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"processKey\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;F)Ljava/lang/String;\");\n         } else if (propertyClass == double.class) {\n            mw.visitVarInsn(DLOAD, context.var(\"double\"));\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"processKey\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;D)Ljava/lang/String;\");\n         } else if (propertyClass == boolean.class) {", "fixed": "             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"processKey\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;F)Ljava/lang/String;\");\n         } else if (propertyClass == double.class) {\n            mw.visitVarInsn(DLOAD, context.var(\"double\", 2));\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"processKey\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;D)Ljava/lang/String;\");\n         } else if (propertyClass == boolean.class) {", "sourceBeforeFix": "context.var(\"long\")", "sourceAfterFix": "context.var(\"long\",2)"}
{"fixCommitSHA1": "f234c4b35a51ebc8950e2817ef8472d6971e9b85", "projectName": "openhab.openhab", "bugType": "Change Identifier Used", "problem": "                     records.add(record);\n                 }\n                if ((ZWaveConfigurationCommandClass) node.getCommandClass(CommandClass.WAKE_UP) != null) {\n                     record = new OpenHABConfigurationRecord(domain + \"wakeup/\", \"Wakeup Period\");\n                     record.addAction(\"Refresh\", \"Refresh\");\n                     records.add(record);", "fixed": "                     records.add(record);\n                 }\n                if ((ZWaveWakeUpCommandClass) node.getCommandClass(CommandClass.WAKE_UP) != null) {\n                     record = new OpenHABConfigurationRecord(domain + \"wakeup/\", \"Wakeup Period\");\n                     record.addAction(\"Refresh\", \"Refresh\");\n                     records.add(record);", "sourceBeforeFix": "(ZWaveConfigurationCommandClass)node.getCommandClass(CommandClass.WAKE_UP)", "sourceAfterFix": "(ZWaveWakeUpCommandClass)node.getCommandClass(CommandClass.WAKE_UP)"}
{"fixCommitSHA1": "f616c0c70964fb4e88c3dc60c59d99b6d1d4759a", "projectName": "apache.hbase", "bugType": "Missing Throws Exception", "problem": "   }\n   @Test\n  public void testTableWithStringName() {\n     HTablePool pool =\n       new HTablePool(TEST_UTIL.getConfiguration(), Integer.MAX_VALUE);\n     String tableName = Bytes.toString(TABLENAME);", "fixed": "   }\n   @Test\n  public void testTableWithStringName() throws Exception {\n     HTablePool pool =\n       new HTablePool(TEST_UTIL.getConfiguration(), Integer.MAX_VALUE);\n     String tableName = Bytes.toString(TABLENAME);", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "9e6f96dbfc8bf1ae1ffbe0115f53f1de0fc86ffc", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "             } else {\n                 result = false;\n                 if (isEventsEnabled()) {\n                    publishEvent(createCacheCompleteEvent(key, completionId));\n                 }\n             }\n             onPutIfAbsent(key, value, expiryPolicy, source, disableWriteThrough,", "fixed": "             } else {\n                 result = false;\n                 if (isEventsEnabled()) {\n                    publishEvent(createCacheCompleteEvent(toEventData(key), completionId));\n                 }\n             }\n             onPutIfAbsent(key, value, expiryPolicy, source, disableWriteThrough,", "sourceBeforeFix": "toHeapData(key)", "sourceAfterFix": "toEventData(key)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      * @param hostName the name of the host.\n      */\n     @LogMessage(level = Level.WARN)\n    @Message(id = 15805, value = \"Caught exception awaiting final response from host %s\")\n     void caughtExceptionAwaitingFinalResponse(@Cause Throwable cause, String hostName);\n     /**", "fixed": "      * @param hostName the name of the host.\n      */\n     @LogMessage(level = Level.WARN)\n    @Message(id = 10805, value = \"Caught exception awaiting final response from host %s\")\n     void caughtExceptionAwaitingFinalResponse(@Cause Throwable cause, String hostName);\n     /**", "sourceBeforeFix": "id=15801", "sourceAfterFix": "id=10801"}
{"fixCommitSHA1": "864435a71cd9e8b0dec4150284ee43372167b091", "projectName": "google.guava", "bugType": "Change Identifier Used", "problem": "     ticker.advance(16000000);\n     stopwatch.start();\n    assertEquals(9, stopwatch.elapsedMillis());\n     ticker.advance(25000000);\n    assertEquals(34, stopwatch.elapsedMillis());\n     stopwatch.stop();\n     ticker.advance(36000000);\n    assertEquals(34, stopwatch.elapsedMillis());\n   }\n   @GwtIncompatible(\"String.format()\")", "fixed": "     ticker.advance(16000000);\n     stopwatch.start();\n    assertEquals(9, stopwatch.elapsed(MILLISECONDS));\n     ticker.advance(25000000);\n    assertEquals(34, stopwatch.elapsed(MILLISECONDS));\n     stopwatch.stop();\n     ticker.advance(36000000);\n    assertEquals(34, stopwatch.elapsed(MILLISECONDS));\n   }\n   @GwtIncompatible(\"String.format()\")", "sourceBeforeFix": "stopwatch.elapsedMillis()", "sourceAfterFix": "stopwatch.elapsed(MILLISECONDS)"}
{"fixCommitSHA1": "e7bf415427b37bbc760ff9b9c69650db8ec477e4", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnBean(ConnectionFactory.class)\n\t@ConditionalOnEnablednHealthIndicator(\"jms\")\n \tpublic static class JmsHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<JmsHealthIndicator, ConnectionFactory> {", "fixed": " \t@Configuration\n \t@ConditionalOnBean(ConnectionFactory.class)\n\t@ConditionalOnEnabledHealthIndicator(\"jms\")\n \tpublic static class JmsHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<JmsHealthIndicator, ConnectionFactory> {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"mail\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"mail\")"}
{"fixCommitSHA1": "1daccd54d2ff2ecdb21d8c60268600c37febbb70", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "       if (TACHYON_STREAMING_READ) {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n           InputStream is = file.getInStream(ReadType.CACHE);\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;", "fixed": "       if (TACHYON_STREAMING_READ) {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           InputStream is = file.getInStream(ReadType.CACHE);\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "pId + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public Trends getCurrentTrends() throws TwitterException {\n        return Trends.constructTrendsList(get(getSearchBaseURL() + \"trends/current.json\"\n                 , false)).get(0);\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public Trends getCurrentTrends() throws TwitterException {\n        return Trends.createTrendsList(get(getSearchBaseURL() + \"trends/current.json\"\n                 , false)).get(0);\n     }", "sourceBeforeFix": "DirectMessage.constructDirectMessages(get(getBaseURL() + \"direct_messages.json\",true))", "sourceAfterFix": "DirectMessage.createDirectMessageList(get(getBaseURL() + \"direct_messages.json\",true))"}
{"fixCommitSHA1": "cac8c34ac61668aa269366408e613ac0ed5db729", "projectName": "junit-team.junit", "bugType": "Change Modifier", "problem": "     }\n     @FixMethodOrder(MethodSorters.JVM)\n    private static class DummySortJvm {\n         Object alpha(int i, double d, Thread t) {return null;}\n         void beta(int[][] x) {}\n         int gamma() {return 0;}", "fixed": "     }\n     @FixMethodOrder(MethodSorters.JVM)\n    static class DummySortJvm {\n         Object alpha(int i, double d, Thread t) {return null;}\n         void beta(int[][] x) {}\n         int gamma() {return 0;}", "sourceBeforeFix": "10", "sourceAfterFix": "8"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameMappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedIgniteQueueEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default IgniteQueueEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedIgniteQueueEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default IgniteQueueEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "a772531235259480a08e539c706b5884fbe6bfd6", "projectName": "stanfordnlp.CoreNLP", "bugType": "Change Identifier Used", "problem": "    */\n   public void preCompute(Set<Integer> toPreCompute) {\n     long startTime = System.currentTimeMillis();\n    saved = new double[toPreCompute.size()][config.hiddenSize];\n     for (int x : toPreCompute) {\n       int mapX = preMap.get(x);\n       int tok = x / config.numTokens;", "fixed": "    */\n   public void preCompute(Set<Integer> toPreCompute) {\n     long startTime = System.currentTimeMillis();\n    saved = new double[preMap.size()][config.hiddenSize];\n     for (int x : toPreCompute) {\n       int mapX = preMap.get(x);\n       int tok = x / config.numTokens;", "sourceBeforeFix": "toPreCompute.size()", "sourceAfterFix": "preMap.size()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "83b9dd427535bce39be43a9e8224cdbc352d7427", "projectName": "square.okhttp", "bugType": "Change Modifier", "problem": "   final Hpack.Reader hpackReader;\n   \n  public Http2Reader(BufferedSource source, boolean client) {\n     this.source = source;\n     this.client = client;\n     this.continuation = new ContinuationSource(this.source);", "fixed": "   final Hpack.Reader hpackReader;\n   \n  Http2Reader(BufferedSource source, boolean client) {\n     this.source = source;\n     this.client = client;\n     this.continuation = new ContinuationSource(this.source);", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "3757a700a89638e5747d966bdaa8266b62c974c8", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "   }\n   @GwtIncompatible(\"Reader/Writer\")\n  private void testStreamingEncodingWithSeparators(\n       BaseEncoding encoding, String decoded, String encoded) throws IOException {\n     testStreamingEncoding(encoding, decoded, encoded);", "fixed": "   }\n   @GwtIncompatible(\"Reader/Writer\")\n  private static void testStreamingEncodingWithSeparators(\n       BaseEncoding encoding, String decoded, String encoded) throws IOException {\n     testStreamingEncoding(encoding, decoded, encoded);", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "4665dcf9ab41c3c61cd42aad296ebfe518bfa003", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\n \tpublic void glDrawArrays (int mode, int first, int count) {\n\t\tGL.glDrawArraysEXT(mode, first, count);\n \t}\n \tpublic void glDrawElements (int mode, int count, int type, Buffer indices) {", "fixed": " \t}\n \tpublic void glDrawArrays (int mode, int first, int count) {\n\t\tGL.glDrawArrays(mode, first, count);\n \t}\n \tpublic void glDrawElements (int mode, int count, int type, Buffer indices) {", "sourceBeforeFix": "GL.glBindTextureEXT(target,texture)", "sourceAfterFix": "GL.glBindTexture(target,texture)"}
{"fixCommitSHA1": "0d3c78b6f28fb3cad00c12605209c524702adb0a", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "         }\n         doRemoveRecord(key, source);\n         if (isEventsEnabled()) {\n            publishEvent(createCacheExpiredEvent(key, toEventData(record), CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                  origin, IGNORE_COMPLETION));\n         }\n         return null;", "fixed": "         }\n         doRemoveRecord(key, source);\n         if (isEventsEnabled()) {\n            publishEvent(createCacheExpiredEvent(toEventData(key), toEventData(record),\n                                                 CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                  origin, IGNORE_COMPLETION));\n         }\n         return null;", "sourceBeforeFix": "toHeapData(key)", "sourceAfterFix": "toEventData(key)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetProgramiv (int program, int pname, IntBuffer params) {\r\n\t\tGL20.glGetProgram(program, pname, params);\r\n \t}\r\n \tpublic void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tEXTFramebufferObject.glGetRenderbufferParameterEXT(target, pname, params);\r\n \t}\r\n \tpublic String glGetShaderInfoLog (int shader) {\r", "fixed": " \t}\r\n \tpublic void glGetProgramiv (int program, int pname, IntBuffer params) {\r\n\t\tGL20.glGetProgramiv(program, pname, params);\r\n \t}\r\n \tpublic void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tEXTFramebufferObject.glGetRenderbufferParameterivEXT(target, pname, params);\r\n \t}\r\n \tpublic String glGetShaderInfoLog (int shader) {\r", "sourceBeforeFix": "GL20.glUniform1(location,v)", "sourceAfterFix": "GL20.glUniform1iv(location,v)"}
{"fixCommitSHA1": "486b290863a66641b0ec30dbf2d9e349733cae44", "projectName": "apache.hbase", "bugType": "Wrong Function Name", "problem": "    */\n   public void majorCompact(final String tableNameOrRegionName)\n   throws IOException, InterruptedException {\n    majorCompact(Bytes.toBytesBinary(tableNameOrRegionName));\n   }\n   /**", "fixed": "    */\n   public void majorCompact(final String tableNameOrRegionName)\n   throws IOException, InterruptedException {\n    majorCompact(Bytes.toBytes(tableNameOrRegionName));\n   }\n   /**", "sourceBeforeFix": "Bytes.toBytesBinary(tableOrRegionName)", "sourceAfterFix": "Bytes.toBytes(tableOrRegionName)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  private final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15858, value = \"No deployment content with hash %s is available in the deployment content repository.\")\n     String noDeploymentContentWithHash(String hash);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10858, value = \"No deployment content with hash %s is available in the deployment content repository.\")\n     String noDeploymentContentWithHash(String hash);\n     /**", "sourceBeforeFix": "id=15868", "sourceAfterFix": "id=10868"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15861, value = \"Cannot remove deployment %s from the domain as it is still used by server groups %s\")\n     String cannotRemoveDeploymentInUse(String name, List<String> groups);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10861, value = \"Cannot remove deployment %s from the domain as it is still used by server groups %s\")\n     String cannotRemoveDeploymentInUse(String name, List<String> groups);\n     /**", "sourceBeforeFix": "id=15867", "sourceAfterFix": "id=10867"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  private final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15864, value = \"Error obtaining input stream from URL %s -- %s\")\n     String errorObtainingUrlStream(String url, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10864, value = \"Error obtaining input stream from URL %s -- %s\")\n     String errorObtainingUrlStream(String url, String message);\n     /**", "sourceBeforeFix": "id=15844", "sourceAfterFix": "id=10844"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedServerEndpointBuilder\n             extends\n                 AdvancedServerEndpointConsumerBuilder, AdvancedServerEndpointProducerBuilder {\n         default ServerEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedServerEndpointBuilder\n             extends\n                 AdvancedServerEndpointConsumerBuilder, AdvancedServerEndpointProducerBuilder {\n         default ServerEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  private final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "fixed": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniformfv(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniformiv(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "sourceBeforeFix": "GL20.glUniform3(location,v)", "sourceAfterFix": "GL20.glUniform3fv(location,v)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "fixed": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "sourceBeforeFix": "GL20.glUniform4(location,v)", "sourceAfterFix": "GL20.glUniform4fv(location,v)"}
{"fixCommitSHA1": "c97c55c5fe3bd7a54b9f36cf68f17b5cf19ecaf3", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Change Identifier Used", "problem": "     private final AsyncHttpClientConfig config;\n    private final ConcurrentHashMap<Url, Channel> connectionsPool = new ConcurrentHashMap<Url, Channel>();\n     private volatile int maxConnectionsPerHost;\n     private final HashedWheelTimer timer = new HashedWheelTimer();", "fixed": "     private final AsyncHttpClientConfig config;\n    private final ConcurrentHashMap<String, Channel> connectionsPool = new ConcurrentHashMap<String, Channel>();\n     private volatile int maxConnectionsPerHost;\n     private final HashedWheelTimer timer = new HashedWheelTimer();", "sourceBeforeFix": "Entry<Url,Channel>", "sourceAfterFix": "Entry<String,Channel>"}
{"fixCommitSHA1": "e7bf415427b37bbc760ff9b9c69650db8ec477e4", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnBean(JavaMailSenderImpl.class)\n\t@ConditionalOnEnablednHealthIndicator(\"mail\")\n \tpublic static class MailHealthIndicatorConfiguration\n \t\t\textends\n \t\t\tCompositeHealthIndicatorConfiguration<MailHealthIndicator, JavaMailSenderImpl> {", "fixed": " \t@Configuration\n \t@ConditionalOnBean(JavaMailSenderImpl.class)\n\t@ConditionalOnEnabledHealthIndicator(\"mail\")\n \tpublic static class MailHealthIndicatorConfiguration\n \t\t\textends\n \t\t\tCompositeHealthIndicatorConfiguration<MailHealthIndicator, JavaMailSenderImpl> {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"mongo\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"mongo\")"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface HazelcastMapEndpointBuilder\n             extends\n                 HazelcastMapEndpointConsumerBuilder, HazelcastMapEndpointProducerBuilder {\n         default AdvancedHazelcastMapEndpointBuilder advanced() {", "fixed": "     \n    public interface HazelcastMapEndpointBuilder\n             extends\n                 HazelcastMapEndpointConsumerBuilder, HazelcastMapEndpointProducerBuilder {\n         default AdvancedHazelcastMapEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "7358784c887e9fb135e42c7083a81179085ba116", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \tpublic void setMinSize (float minWidth, float minHeight) {\n \t\tsetMinWidth(minWidth);\n\t\tsetMinHeight(minWidth);\n \t}\n \tpublic String getName () {", "fixed": " \tpublic void setMinSize (float minWidth, float minHeight) {\n \t\tsetMinWidth(minWidth);\n\t\tsetMinHeight(minHeight);\n \t}\n \tpublic String getName () {", "sourceBeforeFix": "setMinHeight(minWidth)", "sourceAfterFix": "setMinHeight(minHeight)"}
{"fixCommitSHA1": "5992b8ccbc9bc21d353ec3738c3f8994dfc3bbf8", "projectName": "Alluxio.alluxio", "bugType": "Wrong Function Name", "problem": "       URIStatus uriStatus = fs.getStatus(uri);\n       Permission perm = new Permission(uriStatus.getOwner(), uriStatus.getGroup(),\n           (short) uriStatus.getMode());\n      OutputStream out = closer.register(ufs.create(dstPath.getPath(),\n           new CreateOptions().setPermission(perm)));\n       ret = IOUtils.copyLarge(in, out);\n     } catch (Exception e) {", "fixed": "       URIStatus uriStatus = fs.getStatus(uri);\n       Permission perm = new Permission(uriStatus.getOwner(), uriStatus.getGroup(),\n           (short) uriStatus.getMode());\n      OutputStream out = closer.register(ufs.create(dstPath.toString(),\n           new CreateOptions().setPermission(perm)));\n       ret = IOUtils.copyLarge(in, out);\n     } catch (Exception e) {", "sourceBeforeFix": "dstPath.getPath()", "sourceAfterFix": "dstPath.toString()"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface DisruptorEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedDisruptorEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface DisruptorEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedDisruptorEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "238cd4579320c9aa534aaaa3a0597c1227247cc7", "projectName": "yusuke.twitter4j", "bugType": "Change Modifier", "problem": "         return TwitterStreamImpl.dispatcher;\n     }\n    private static transient Dispatcher dispatcher;\n     InputStream getSiteStream(boolean withFollowings, long[] follow) throws TwitterException {\n         ensureOAuthEnabled();", "fixed": "         return TwitterStreamImpl.dispatcher;\n     }\n    private static transient volatile Dispatcher dispatcher;\n     InputStream getSiteStream(boolean withFollowings, long[] follow) throws TwitterException {\n         ensureOAuthEnabled();", "sourceBeforeFix": "138", "sourceAfterFix": "202"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "fixed": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "sourceBeforeFix": "GL20.glUniformMatrix3(location,transpose,value)", "sourceAfterFix": "GL20.glUniformMatrix3fv(location,transpose,value)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  private final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "3fa91f277480e4089c47dba6af63c5f38a7ca5dd", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": "  */\n @Internal\n public abstract class ExecutorBase implements Executor {\n\tprivate final String DEFAULT_JOB_NAME = \"Flink Exec Table Job\";\n \tprivate final StreamExecutionEnvironment executionEnvironment;\n \tprotected List<Transformation<?>> transformations = new ArrayList<>();", "fixed": "  */\n @Internal\n public abstract class ExecutorBase implements Executor {\n\tprivate static final String DEFAULT_JOB_NAME = \"Flink Exec Table Job\";\n \tprivate final StreamExecutionEnvironment executionEnvironment;\n \tprotected List<Transformation<?>> transformations = new ArrayList<>();", "sourceBeforeFix": "18", "sourceAfterFix": "26"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15841, value = \"Exception getting result from server %s: %s\")\n     String exceptionAwaitingResultFromServer(ServerIdentity server, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10841, value = \"Exception getting result from server %s: %s\")\n     String exceptionAwaitingResultFromServer(ServerIdentity server, String message);\n     /**", "sourceBeforeFix": "id=15838", "sourceAfterFix": "id=10838"}
{"fixCommitSHA1": "01d18f2c3db799d144cc8e3308da3fb2ade19417", "projectName": "google.guava", "bugType": "Change Identifier Used", "problem": "     private final Lock delegate;\n     @SuppressWarnings(\"unused\")\n    private final Object strongReference;\n    WeakSafeLock(Lock delegate, Object strongReference) {\n       this.delegate = delegate;\n       this.strongReference = strongReference;\n     }", "fixed": "     private final Lock delegate;\n     @SuppressWarnings(\"unused\")\n    private final WeakSafeReadWriteLock strongReference;\n    WeakSafeLock(Lock delegate, WeakSafeReadWriteLock strongReference) {\n       this.delegate = delegate;\n       this.strongReference = strongReference;\n     }", "sourceBeforeFix": "@SuppressWarnings(\"unused\") private final Object strongReference; ", "sourceAfterFix": "@SuppressWarnings(\"unused\") private final WeakSafeReadWriteLock strongReference; "}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "9b649ac6da4293d736676de895a67aaf87fc5979", "projectName": "Activiti.Activiti", "bugType": "Change Caller in Function Call", "problem": "      if (DATABASE_TYPE_MYSQL.equals(databaseType)) {\n         maxNrOfStatementsInBulkInsert = DEFAULT_MAX_NR_OF_STATEMENTS_BULK_INSERT_SQL_SERVER;\n       }", "fixed": "      if (DATABASE_TYPE_MSSQL.equals(databaseType)) {\n         maxNrOfStatementsInBulkInsert = DEFAULT_MAX_NR_OF_STATEMENTS_BULK_INSERT_SQL_SERVER;\n       }", "sourceBeforeFix": "DATABASE_TYPE_MYSQL.equals(databaseType)", "sourceAfterFix": "DATABASE_TYPE_MSSQL.equals(databaseType)"}
{"fixCommitSHA1": "d08bf8738680178b111ce07d9b4593464125fe3a", "projectName": "yasserg.crawler4j", "bugType": "Less Specific If", "problem": "               webURL.setDepth((short) (curURL.getDepth() + 1));\n               if ((maxCrawlDepth == -1) || (curURL.getDepth() < maxCrawlDepth)) {\n                 if (shouldVisit(page, webURL)) {\n                  if (robotstxtServer.allows(webURL)) {\n                     webURL.setDocid(docIdServer.getNewDocID(webURL.getURL()));\n                     toSchedule.add(webURL);\n                   } else {", "fixed": "               webURL.setDepth((short) (curURL.getDepth() + 1));\n               if ((maxCrawlDepth == -1) || (curURL.getDepth() < maxCrawlDepth)) {\n                 if (shouldVisit(page, webURL)) {\n                  if (!shouldFollowLinksIn(webURL) || robotstxtServer.allows(webURL)) {\n                     webURL.setDocid(docIdServer.getNewDocID(webURL.getURL()));\n                     toSchedule.add(webURL);\n                   } else {", "sourceBeforeFix": "robotstxtServer.allows(webURL)", "sourceAfterFix": "!shouldFollowLinksIn(webURL) || robotstxtServer.allows(webURL)"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsText(String path) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), 1, null);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsText(String path) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), 1, null);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n \t * @return True, if the comparator supports that specific form of serialization, false if not.\n \t */\n\tpublic boolean supportsSerializationWithKeyNormalization();\n \t/**\n \t * Gets the number of bytes that the normalized key would maximally take. A value of", "fixed": " \t * \n \t * @return True, if the comparator supports that specific form of serialization, false if not.\n \t */\n\tpublic abstract boolean supportsSerializationWithKeyNormalization();\n \t/**\n \t * Gets the number of bytes that the normalized key would maximally take. A value of", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "2", "sourceAfterFix": "0"}
{"fixCommitSHA1": "1ab08ad4abff024bdd3fbeb6f08a1a4a61c49b65", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": " @PrepareForTest({ ConfigurationLoader.class, ConfigurationLoaderTest.class })\n public class ConfigurationLoaderTest {\n    private Configuration loadConfiguration(String name)\n         throws CheckstyleException {\n         return loadConfiguration(name, new Properties());\n     }\n    private Configuration loadConfiguration(\n         String name, Properties props) throws CheckstyleException {\n         final String fName =\n             \"src/test/resources/com/puppycrawl/tools/checkstyle/configs/\" + name;", "fixed": " @PrepareForTest({ ConfigurationLoader.class, ConfigurationLoaderTest.class })\n public class ConfigurationLoaderTest {\n    private static Configuration loadConfiguration(String name)\n         throws CheckstyleException {\n         return loadConfiguration(name, new Properties());\n     }\n    private static Configuration loadConfiguration(\n         String name, Properties props) throws CheckstyleException {\n         final String fName =\n             \"src/test/resources/com/puppycrawl/tools/checkstyle/configs/\" + name;", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "d9cee23da79c7368a47a894f1bf861f04fdb6f00", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         if (type == 0) {\n             return null;\n         } else if (type == 1) {\n            return in.readInt();\n         } else if (type == 2) {\n             return in.readInt();\n         } else if (type == 3) {", "fixed": "         if (type == 0) {\n             return null;\n         } else if (type == 1) {\n            return in.readLong();\n         } else if (type == 2) {\n             return in.readInt();\n         } else if (type == 3) {", "sourceBeforeFix": "in.readInt()", "sourceAfterFix": "in.readLong()"}
{"fixCommitSHA1": "b6e7034c72a3eb018d80a72fa17da5338d0381c8", "projectName": "apache.camel", "bugType": "Same Function More Args", "problem": "         if (s == null) {\n             return null;\n         }\n        return IOConverter.toInputStream(s);\n     }\n }", "fixed": "         if (s == null) {\n             return null;\n         }\n        return IOConverter.toInputStream(s, null);\n     }\n }", "sourceBeforeFix": "IOConverter.toInputStream(s)", "sourceAfterFix": "IOConverter.toInputStream(s,null)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<Status> getUserTimeline(String id, Paging paging)\n             throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline/\" + id + \".json\",\n                 null, paging.asPostParameterList(), http.isAuthenticationEnabled()));\n     }", "fixed": "      */\n     public ResponseList<Status> getUserTimeline(String id, Paging paging)\n             throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline/\" + id + \".json\",\n                 null, paging.asPostParameterList(), http.isAuthenticationEnabled()));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites/\" + id+ \".json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites/\" + id+ \".json\",new PostParameter[0],true))"}
{"fixCommitSHA1": "c30e67b81a0d9ac45c4151d20a960e542ad97b4f", "projectName": "dropwizard.dropwizard", "bugType": "Change Identifier Used", "problem": "         final PrintWriter output = mock(PrintWriter.class);\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getRequestURI()).thenReturn(\"/tasks/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.<String>of()));\n         when(response.getWriter()).thenReturn(output);", "fixed": "         final PrintWriter output = mock(PrintWriter.class);\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getServletPath()).thenReturn(\"/tasks/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.<String>of()));\n         when(response.getWriter()).thenReturn(output);", "sourceBeforeFix": "request.getRequestURI()", "sourceAfterFix": "request.getServletPath()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15855, value = \"Invalid byte stream.\")\n     String invalidByteStream();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10855, value = \"Invalid byte stream.\")\n     String invalidByteStream();\n     /**", "sourceBeforeFix": "id=15859", "sourceAfterFix": "id=10859"}
{"fixCommitSHA1": "e4ce636e7fd9b892e3a696366c1981d3fae46ab4", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "         MockEndpoint mock = context.getEndpoint(\"mock:result\", MockEndpoint.class);\n        mock.expectedMessageCount(2);", "fixed": "         MockEndpoint mock = context.getEndpoint(\"mock:result\", MockEndpoint.class);\n        mock.expectedMinimumMessageCount(2);", "sourceBeforeFix": "mock.expectedMessageCount(2)", "sourceAfterFix": "mock.expectedMinimumMessageCount(2)"}
{"fixCommitSHA1": "2f880c73edb600ab92cdd580ac74f7388b5c6135", "projectName": "Alluxio.alluxio", "bugType": "Change Modifier", "problem": "     }\n   }\n  public void updateRawTableMetadata(int tableId, ByteBuffer metadata) {\n     if (INACTIVE) {\n       return;\n     }", "fixed": "     }\n   }\n  public synchronized void updateRawTableMetadata(int tableId, ByteBuffer metadata) {\n     if (INACTIVE) {\n       return;\n     }", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "ea98386dfd18da047c877a2320cfdcf15df2ea06", "projectName": "facebook.presto", "bugType": "Change Modifier", "problem": "                 .retInt();\n     }\n    private void generateGetSizeInBytesMethod(ClassDefinition classDefinition, FieldDefinition sizeField)\n     {\n         MethodDefinition method = classDefinition.declareMethod(a(PUBLIC), \"getSizeInBytes\", type(long.class));", "fixed": "                 .retInt();\n     }\n    private static void generateGetSizeInBytesMethod(ClassDefinition classDefinition, FieldDefinition sizeField)\n     {\n         MethodDefinition method = classDefinition.declareMethod(a(PUBLIC), \"getSizeInBytes\", type(long.class));", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "de4c207aafb924e5a104e7f1b9e3b37c0f05bebb", "projectName": "yusuke.twitter4j", "bugType": "Same Function Swap Args", "problem": "         try {\n            user = twitter1.checkUserListSubscription(id1.screenName, id2.id, userList.getId());\n             fail(\"id2 shouldn't be a subscriber the userList. expecting a TwitterException\");\n         } catch (TwitterException ignore) {\n             assertEquals(404, ignore.getStatusCode());", "fixed": "         try {\n            user = twitter1.checkUserListSubscription(id1.screenName, userList.getId(), id2.id);\n             fail(\"id2 shouldn't be a subscriber the userList. expecting a TwitterException\");\n         } catch (TwitterException ignore) {\n             assertEquals(404, ignore.getStatusCode());", "sourceBeforeFix": "twitter1.checkUserListMembership(id1.screenName,id2.id,userList.getId())", "sourceAfterFix": "twitter1.checkUserListMembership(id1.screenName,userList.getId(),id2.id)"}
{"fixCommitSHA1": "a295b91c37f681199a83fdb963344c19e0d015c0", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "     protected void handleMultiMapTryLock(String[] args) {\n         String key = args[1];\n        long time = (args.length > 2) ? Long.valueOf(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMultiMap().tryLock(key);", "fixed": "     protected void handleMultiMapTryLock(String[] args) {\n         String key = args[1];\n        long time = (args.length > 2) ? Long.parseLong(args[2]) : 0;\n         boolean locked;\n         if (time == 0) {\n             locked = getMultiMap().tryLock(key);", "sourceBeforeFix": "Long.valueOf(timeout)", "sourceAfterFix": "Long.parseLong(timeout)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<Status> getFriendsTimeline() throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\", true));\n     }\n     /**", "fixed": "      */\n     public ResponseList<Status> getFriendsTimeline() throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\", true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))"}
{"fixCommitSHA1": "2d0de2bbf27a71b8d7dad6284e092ba456ec5794", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "         private final Endpoint startEndpoint;\n         private final SendProcessor asyncSender;\n        public ExchangeSubmitter(Endpoint startEndpoint, SendProcessor asyncSender) {\n             this.startEndpoint = startEndpoint;\n             this.asyncSender = asyncSender;\n         }", "fixed": "         private final Endpoint startEndpoint;\n         private final SendProcessor asyncSender;\n        ExchangeSubmitter(Endpoint startEndpoint, SendProcessor asyncSender) {\n             this.startEndpoint = startEndpoint;\n             this.asyncSender = asyncSender;\n         }", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "3a534d35b632476ca1a01520005a63914168d24c", "projectName": "google.guava", "bugType": "Change Binary Operator", "problem": "   try {\n     testCase.tearDown();\n   } catch (Throwable t) {\n    if (failure != null) {\n       failure = t;\n     }\n   }", "fixed": "   try {\n     testCase.tearDown();\n   } catch (Throwable t) {\n    if (failure == null) {\n       failure = t;\n     }\n   }", "sourceBeforeFix": "failure != null", "sourceAfterFix": "failure == null"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15863, value = \"%s is not a valid URL -- %s\")\n     String invalidUrl(String url, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10863, value = \"%s is not a valid URL -- %s\")\n     String invalidUrl(String url, String message);\n     /**", "sourceBeforeFix": "id=15846", "sourceAfterFix": "id=10846"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory specializeInitialModule =\n       new PassFactory(\"specializeInitialModule\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "3dddcc4cdf4a74ddbd4607c6aaee5bdd8ac46c27", "projectName": "gephi.gephi", "bugType": "Change Modifier", "problem": "         octree.initArchitecture();\n     }\n    public void updateSelection(GL2 gl, GLU glu) {\n         if (vizConfig.isSelectionEnable() && currentSelectionArea != null && currentSelectionArea.isEnabled()) {\n             float[] mp = Arrays.copyOf(graphIO.getMousePosition(), 2);\n             float[] cent = currentSelectionArea.getSelectionAreaCenter();", "fixed": "         octree.initArchitecture();\n     }\n    public synchronized void updateSelection(GL2 gl, GLU glu) {\n         if (vizConfig.isSelectionEnable() && currentSelectionArea != null && currentSelectionArea.isEnabled()) {\n             float[] mp = Arrays.copyOf(graphIO.getMousePosition(), 2);\n             float[] cent = currentSelectionArea.getSelectionAreaCenter();", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "83b9dd427535bce39be43a9e8224cdbc352d7427", "projectName": "square.okhttp", "bugType": "Change Modifier", "problem": "   final Method setProtocolMethod;\n   final Method getProtocolMethod;\n  public Jdk9Platform(Method setProtocolMethod, Method getProtocolMethod) {\n     this.setProtocolMethod = setProtocolMethod;\n     this.getProtocolMethod = getProtocolMethod;\n   }", "fixed": "   final Method setProtocolMethod;\n   final Method getProtocolMethod;\n  Jdk9Platform(Method setProtocolMethod, Method getProtocolMethod) {\n     this.setProtocolMethod = setProtocolMethod;\n     this.getProtocolMethod = getProtocolMethod;\n   }", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface StAXEndpointBuilder\n            extends\n                EndpointProducerBuilder {\n         default AdvancedStAXEndpointBuilder advanced() {\n             return (AdvancedStAXEndpointBuilder) this;\n         }", "fixed": "     \n    public interface StAXEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedStAXEndpointBuilder advanced() {\n             return (AdvancedStAXEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  private final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform3fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform3(location, v);\r\n \t}\r\n \tpublic void glUniform3fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform3(location, toFloatBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform3i (int location, int x, int y, int z) {\r", "fixed": " \t}\r\n \tpublic void glUniform3fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform3fv(location, v);\r\n \t}\r\n \tpublic void glUniform3fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform3fv(location, toFloatBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform3i (int location, int x, int y, int z) {\r", "sourceBeforeFix": "GL20.glUniform2(location,toIntBuffer(v,offset,count << 1))", "sourceAfterFix": "GL20.glUniform2iv(location,toIntBuffer(v,offset,count << 1))"}
{"fixCommitSHA1": "98a8875db1735c4a60bf1989fd727217a739baf0", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "template.sendBodyAndHeader(\"file:\n         MockEndpoint mock = getMockEndpoint(\"mock:result4\");\n        mock.expectedBodiesReceived(\"Hello World 3\");\n         assertMockEndpointsSatisfied();\n         oneExchangeDone.matchesMockWaitTime();", "fixed": "template.sendBodyAndHeader(\"file:\n         MockEndpoint mock = getMockEndpoint(\"mock:result4\");\n        mock.expectedBodiesReceivedInAnyOrder(\"Hello World 3\");\n         assertMockEndpointsSatisfied();\n         oneExchangeDone.matchesMockWaitTime();", "sourceBeforeFix": "mock.expectedBodiesReceived(\"Hello World 2\")", "sourceAfterFix": "mock.expectedBodiesReceivedInAnyOrder(\"Hello World 2\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public List<Trends> getWeeklyTrends(Date date, boolean excludeHashTags) throws TwitterException {\n        return Trends.constructTrendsList(get(getSearchBaseURL()\n                 + \"trends/weekly.json?date=\" + toDateStr(date)\n                 + (excludeHashTags ? \"&exclude=hashtags\" : \"\"), false));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public List<Trends> getWeeklyTrends(Date date, boolean excludeHashTags) throws TwitterException {\n        return Trends.createTrendsList(get(getSearchBaseURL()\n                 + \"trends/weekly.json?date=\" + toDateStr(date)\n                 + (excludeHashTags ? \"&exclude=hashtags\" : \"\"), false));\n     }", "sourceBeforeFix": "SavedSearch.constructSavedSearches(get(getBaseURL() + \"saved_searches.json\",true))", "sourceAfterFix": "SavedSearch.createSavedSearchList(get(getBaseURL() + \"saved_searches.json\",true))"}
{"fixCommitSHA1": "e7bf415427b37bbc760ff9b9c69650db8ec477e4", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnClass(JdbcTemplate.class)\n \t@ConditionalOnBean(DataSource.class)\n\t@ConditionalOnEnablednHealthIndicator(\"db\")\n \tpublic static class DataSourcesHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<DataSourceHealthIndicator, DataSource>\n \t\t\timplements InitializingBean {", "fixed": " \t@Configuration\n \t@ConditionalOnClass(JdbcTemplate.class)\n \t@ConditionalOnBean(DataSource.class)\n\t@ConditionalOnEnabledHealthIndicator(\"db\")\n \tpublic static class DataSourcesHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<DataSourceHealthIndicator, DataSource>\n \t\t\timplements InitializingBean {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"mail\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"mail\")"}
{"fixCommitSHA1": "63b7cec3050338899e04957cbc7039cd509cd214", "projectName": "cucumber.cucumber-jvm", "bugType": "Change Boolean Literal", "problem": "         RuntimeOptionsFactory runtimeOptionsFactory = new RuntimeOptionsFactory(SubClassWithMonoChromeTrue.class);\n         RuntimeOptions runtimeOptions = runtimeOptionsFactory.create();\n        assertFalse(runtimeOptions.isMonochrome());\n     }", "fixed": "         RuntimeOptionsFactory runtimeOptionsFactory = new RuntimeOptionsFactory(SubClassWithMonoChromeTrue.class);\n         RuntimeOptions runtimeOptions = runtimeOptionsFactory.create();\n        assertTrue(runtimeOptions.isMonochrome());\n     }", "sourceBeforeFix": "monochrome=false", "sourceAfterFix": "monochrome=true"}
{"fixCommitSHA1": "486d1df6b22e089bfe2f62b7f487ad09fb4d5fc3", "projectName": "facebook.presto", "bugType": "Change Identifier Used", "problem": "                     else if (any(taskStates, equalTo(TaskState.ABORTED))) {\n                         stageState.set(StageState.FAILED);\n                        failureCauses.add(new PrestoException(StandardErrorCode.INTERNAL_ERROR, \"A task is in the ABORTED state but stage is \" + stageState));\n                     }\n                     else if (currentState != StageState.PLANNED && currentState != StageState.SCHEDULING) {", "fixed": "                     else if (any(taskStates, equalTo(TaskState.ABORTED))) {\n                         stageState.set(StageState.FAILED);\n                        failureCauses.add(new PrestoException(StandardErrorCode.INTERNAL_ERROR, \"A task is in the ABORTED state but stage is \" + currentState));\n                     }\n                     else if (currentState != StageState.PLANNED && currentState != StageState.SCHEDULING) {", "sourceBeforeFix": "\"A task is in the ABORTED state but stage is \" + stageState", "sourceAfterFix": "\"A task is in the ABORTED state but stage is \" + currentState"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory peepholeOptimizations =\n       new PassFactory(\"peepholeOptimizations\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "28f046ef4ac16e7d260dfd505400c329030ebbe8", "projectName": "apache.hive", "bugType": "Less Specific If", "problem": "       }\n     }\n    if ( targetCondn == null ) {\n       return new ObjectPair(-1, null);\n     }", "fixed": "       }\n     }\n    if ( targetCondn == null || (nodeCondn.size() != targetCondn.size())) {\n       return new ObjectPair(-1, null);\n     }", "sourceBeforeFix": "targetCondn == null", "sourceAfterFix": "targetCondn == null || (nodeCondn.size() != targetCondn.size())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     return additionalReplacements;\n   }\n  private final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     return additionalReplacements;\n   }\n  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "3dddcc4cdf4a74ddbd4607c6aaee5bdd8ac46c27", "projectName": "gephi.gephi", "bugType": "Change Modifier", "problem": "     }\n     @Override\n    public void mouseClick() {\n         if (vizConfig.isSelectionEnable() && rectangleSelection && !customSelection) {\n             Rectangle rectangle = (Rectangle) currentSelectionArea;", "fixed": "     }\n     @Override\n    public synchronized void mouseClick() {\n         if (vizConfig.isSelectionEnable() && rectangleSelection && !customSelection) {\n             Rectangle rectangle = (Rectangle) currentSelectionArea;", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "fixed": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "sourceBeforeFix": "GL20.glUniform2(location,toFloatBuffer(v,offset,count << 1))", "sourceAfterFix": "GL20.glUniform2fv(location,toFloatBuffer(v,offset,count << 1))"}
{"fixCommitSHA1": "0b9749aa429c009e6e392e2e526cb382fbee18df", "projectName": "google.closure-compiler", "bugType": "Wrong Function Name", "problem": "   public void testConstNameInExterns() {\n     String externs = \" var FOO;\";\n     String js = \"FOO = 1;\";\n    test(externs, js, (String) null, ConstCheck.CONST_REASSIGNED_VALUE_ERROR, null);\n   }\n   private void testError(String js) {\n    testError(js, ConstCheck.CONST_REASSIGNED_VALUE_ERROR);\n   }\n }", "fixed": "   public void testConstNameInExterns() {\n     String externs = \" var FOO;\";\n     String js = \"FOO = 1;\";\n    test(externs, js, (String) null, null, ConstCheck.CONST_REASSIGNED_VALUE_ERROR);\n   }\n   private void testError(String js) {\n    testWarning(js, ConstCheck.CONST_REASSIGNED_VALUE_ERROR);\n   }\n }", "sourceBeforeFix": "testError(js,ConstCheck.CONST_REASSIGNED_VALUE_ERROR)", "sourceAfterFix": "testWarning(js,ConstCheck.CONST_REASSIGNED_VALUE_ERROR)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface SWFEndpointBuilder\n             extends\n                 SWFEndpointConsumerBuilder, SWFEndpointProducerBuilder {\n         default AdvancedSWFEndpointBuilder advanced() {", "fixed": "     \n    public interface SWFEndpointBuilder\n             extends\n                 SWFEndpointConsumerBuilder, SWFEndpointProducerBuilder {\n         default AdvancedSWFEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "c9e9aabd8148d596fe4b1bcb00691d819fc4eff5", "projectName": "alibaba.druid", "bugType": "Less Specific If", "problem": "     }\n     public boolean isExclusion(String requestURI) {\n        if (excludesPattern == null) {\n             return false;\n         }", "fixed": "     }\n     public boolean isExclusion(String requestURI) {\n        if (excludesPattern == null || requestURI == null) {\n             return false;\n         }", "sourceBeforeFix": "excludesPattern == null", "sourceAfterFix": "excludesPattern == null || requestURI == null"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "64dff91895f9df55fe3a07217a333efa4d37d92a", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "     try {\n       jarFile = new JarInputStream(new FileInputStream(jarFileName));\n     } catch (IOException ioEx) {\n      LOG.error(\"Failed to look for classes in \" + jarFileName + \": \" + ioEx);\n       throw ioEx;\n     }", "fixed": "     try {\n       jarFile = new JarInputStream(new FileInputStream(jarFileName));\n     } catch (IOException ioEx) {\n      LOG.warn(\"Failed to look for classes in \" + jarFileName + \": \" + ioEx);\n       throw ioEx;\n     }", "sourceBeforeFix": "LOG.error(\"Failed to find \" + baseDirectory.getAbsolutePath())", "sourceAfterFix": "LOG.warn(\"Failed to find \" + baseDirectory.getAbsolutePath())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkProvides =\n       new HotSwapPassFactory(\"checkProvides\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPreprocess =\n       new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "2", "sourceAfterFix": "0"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n            statistics.addRemoveTimeNano(System.nanoTime() - start);\n             if (hitCount == 1) {\n                 statistics.increaseCacheHits(hitCount);\n             } else {", "fixed": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n            statistics.addRemoveTimeNanos(System.nanoTime() - start);\n             if (hitCount == 1) {\n                 statistics.increaseCacheHits(hitCount);\n             } else {", "sourceBeforeFix": "statistics.addRemoveTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addRemoveTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "fd1fbd3bf7f1d6bca9b8c30703645dcb3f4c1f55", "projectName": "apache.camel", "bugType": "Change Boolean Literal", "problem": "     @Override\n     public boolean isSingleton() {\n        return false;\n     }\n }", "fixed": "     @Override\n     public boolean isSingleton() {\n        return true;\n     }\n }", "sourceBeforeFix": "return false; ", "sourceAfterFix": "return true; "}
{"fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "   public static void createFiles() throws IOException {\n     long startTimeMs = CommonUtils.getCurrentMs();\n    for (int k = 0; k < THREADS; k ++) {\n       int fileId = MTC.createFile(FILE_NAME + (k + BASE_FILE_NUMBER));\n       CommonUtils.printTimeTakenMs(startTimeMs, LOG, \"user_createFiles with fileId \" + fileId);\n     }", "fixed": "   public static void createFiles() throws IOException {\n     long startTimeMs = CommonUtils.getCurrentMs();\n    for (int k = 0; k < FILES; k++) {\n       int fileId = MTC.createFile(FILE_NAME + (k + BASE_FILE_NUMBER));\n       CommonUtils.printTimeTakenMs(startTimeMs, LOG, \"user_createFiles with fileId \" + fileId);\n     }", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "pId + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  private final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15834, value = \"%s recognizes only %s as children: %s\")\n     String unrecognizedChildren(String parent, String children, String parentSpec);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10834, value = \"%s recognizes only %s as children: %s\")\n     String unrecognizedChildren(String parent, String children, String parentSpec);\n     /**", "sourceBeforeFix": "id=15856", "sourceAfterFix": "id=10856"}
{"fixCommitSHA1": "df2d6b370eaa8d29822b928b0f307cb6918dfe4f", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t\tload(CustomArgumentResolvers.class);\n \t\tRequestMappingHandlerAdapter adapter = this.context\n \t\t\t\t.getBean(RequestMappingHandlerAdapter.class);\n\t\tassertThat(adapter.getArgumentResolvers()).contains(\n \t\t\t\tthis.context.getBean(\"firstResolver\",\n \t\t\t\t\t\tHandlerMethodArgumentResolver.class),\n \t\t\t\tthis.context.getBean(\"secondResolver\",", "fixed": " \t\tload(CustomArgumentResolvers.class);\n \t\tRequestMappingHandlerAdapter adapter = this.context\n \t\t\t\t.getBean(RequestMappingHandlerAdapter.class);\n\t\tassertThat(adapter.getCustomArgumentResolvers()).contains(\n \t\t\t\tthis.context.getBean(\"firstResolver\",\n \t\t\t\t\t\tHandlerMethodArgumentResolver.class),\n \t\t\t\tthis.context.getBean(\"secondResolver\",", "sourceBeforeFix": "adapter.getArgumentResolvers()", "sourceAfterFix": "adapter.getCustomArgumentResolvers()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15859, value = \"A slave domain controller cannot accept deployment content uploads\")\n     String slaveCannotAcceptUploads();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10859, value = \"A slave domain controller cannot accept deployment content uploads\")\n     String slaveCannotAcceptUploads();\n     /**", "sourceBeforeFix": "id=15841", "sourceAfterFix": "id=10841"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  private final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "1a9bb447fd14415ef270f3dd7af8a0d4e0017177", "projectName": "Atmosphere.atmosphere", "bugType": "Change Identifier Used", "problem": "      */\n     @Override\n     public final AtmosphereResource create(AtmosphereConfig config,\n                                           DefaultAtmosphereRequest request,\n                                            AtmosphereResponse response,\n                                            AsyncSupport<?> a) {\n         AtmosphereResource r = null;", "fixed": "      */\n     @Override\n     public final AtmosphereResource create(AtmosphereConfig config,\n                                           AtmosphereRequest request,\n                                            AtmosphereResponse response,\n                                            AsyncSupport<?> a) {\n         AtmosphereResource r = null;", "sourceBeforeFix": "DefaultAtmosphereRequest request", "sourceAfterFix": "AtmosphereRequest request"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckAst =\n       new PassFactory(\"sanityCheckAst\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<DirectMessage> getSentDirectMessages(Paging paging) throws\n             TwitterException {\n        return DirectMessage.constructDirectMessages(get(getBaseURL() +\n                 \"direct_messages/sent.json\", new PostParameter[0],\n                 paging.asPostParameterList(), true));\n     }", "fixed": "      */\n     public ResponseList<DirectMessage> getSentDirectMessages(Paging paging) throws\n             TwitterException {\n        return DirectMessage.createDirectMessageList(get(getBaseURL() +\n                 \"direct_messages/sent.json\", new PostParameter[0],\n                 paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\",true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface IgniteCacheEndpointBuilder\n             extends\n                 IgniteCacheEndpointConsumerBuilder, IgniteCacheEndpointProducerBuilder {\n         default AdvancedIgniteCacheEndpointBuilder advanced() {", "fixed": "     \n    public interface IgniteCacheEndpointBuilder\n             extends\n                 IgniteCacheEndpointConsumerBuilder, IgniteCacheEndpointProducerBuilder {\n         default AdvancedIgniteCacheEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "9074897ccf35e42710c3078d2e564ba53b6f6f94", "projectName": "hazelcast.hazelcast", "bugType": "Change Modifier", "problem": "  * For information about the implementation see:\n* https:\n  */\npublic class BackPressureService {\n     /**\n      * The percentage above and below a certain sync-window we should randomize.", "fixed": "  * For information about the implementation see:\n* https:\n  */\npublic final class BackPressureService {\n     /**\n      * The percentage above and below a certain sync-window we should randomize.", "sourceBeforeFix": "1", "sourceAfterFix": "17"}
{"fixCommitSHA1": "cedf72640d917a1d2df5ca88fb6a41d624ffd1ab", "projectName": "alibaba.druid", "bugType": "Change Boolean Literal", "problem": "     }\r\n     public PGExportParameterVisitor(final List<Object> parameters){\r\n        this(parameters,new StringBuilder(),false);\r\n     }\r\n     public PGExportParameterVisitor(final Appendable appender) {\r", "fixed": "     }\r\n     public PGExportParameterVisitor(final List<Object> parameters){\r\n        this(parameters,new StringBuilder(),true);\r\n     }\r\n     public PGExportParameterVisitor(final Appendable appender) {\r", "sourceBeforeFix": "this(parameters,new StringBuilder(),false); ", "sourceAfterFix": "this(parameters,new StringBuilder(),true); "}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "84d6e4785ecad972742bb1bb869cfc3a5efa731d", "projectName": "cucumber.cucumber-jvm", "bugType": "Change Modifier", "problem": "         Executable testMethod = injectorSourceFactory::create;\n         InjectorSourceInstantiationFailed actualThrown = assertThrows(InjectorSourceInstantiationFailed.class, testMethod);\n         assertAll(\"Checking Exception including cause\",\n            () -> assertThat(\"Unexpected exception message\", actualThrown.getMessage(), is(equalTo(\"Instantiation of 'java.lang.String' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a   zero args constructor.\"))),\n             () -> assertThat(\"Unexpected exception cause class\", actualThrown.getCause(), isA(ClassCastException.class))\n         );\n     }", "fixed": "         Executable testMethod = injectorSourceFactory::create;\n         InjectorSourceInstantiationFailed actualThrown = assertThrows(InjectorSourceInstantiationFailed.class, testMethod);\n         assertAll(\"Checking Exception including cause\",\n            () -> assertThat(\"Unexpected exception message\", actualThrown.getMessage(), is(equalTo(\"Instantiation of 'java.lang.String' failed. Check the caused by exception and ensure yourInjectorSource implementation is accessible and has a public zero args constructor.\"))),\n             () -> assertThat(\"Unexpected exception cause class\", actualThrown.getCause(), isA(ClassCastException.class))\n         );\n     }", "sourceBeforeFix": "8", "sourceAfterFix": "9"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform1iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform1(location, v);\r\n \t}\r\n \t@Override\r\n \tpublic void glUniform1iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform1(location, toIntBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform2f (int location, float x, float y) {\r", "fixed": " \t}\r\n \tpublic void glUniform1iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform1iv(location, v);\r\n \t}\r\n \t@Override\r\n \tpublic void glUniform1iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform1iv(location, toIntBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform2f (int location, float x, float y) {\r", "sourceBeforeFix": "GL20.glUniform1(location,toFloatBuffer(v,offset,count))", "sourceAfterFix": "GL20.glUniform1fv(location,toFloatBuffer(v,offset,count))"}
{"fixCommitSHA1": "35076f03b4d9b49d15c77bcf6d42f7463fff4397", "projectName": "gephi.gephi", "bugType": "Wrong Function Name", "problem": "         edgeE.setAttribute(\"source\", e.getSource().getNodeData().getId());\n         edgeE.setAttribute(\"target\", e.getTarget().getNodeData().getId());\n        if( e.isDirected() && !graphModel.isDirected() ) {\n             edgeE.setAttribute(\"type\", \"directed\");\n         }\n        else if( !e.isDirected() && graphModel.isDirected() ) {\n             edgeE.setAttribute(\"type\", \"undirected\");\n         }", "fixed": "         edgeE.setAttribute(\"source\", e.getSource().getNodeData().getId());\n         edgeE.setAttribute(\"target\", e.getTarget().getNodeData().getId());\n        if( e.isDirected() && graphModel.isMixed() ) {\n             edgeE.setAttribute(\"type\", \"directed\");\n         }\n        else if( !e.isDirected() && graphModel.isMixed() ) {\n             edgeE.setAttribute(\"type\", \"undirected\");\n         }", "sourceBeforeFix": "graphModel.isDirected()", "sourceAfterFix": "graphModel.isMixed()"}
{"fixCommitSHA1": "af233c9c353322adf1fa91d5e6ca706b9d9d98b7", "projectName": "dropwizard.dropwizard", "bugType": "Wrong Function Name", "problem": "         final PrintWriter output = mock(PrintWriter.class);\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getServletPath()).thenReturn(\"/tasks/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.of(\"runs\")));\n         when(request.getParameterValues(\"runs\")).thenReturn(new String[]{\"1\"});\n         when(response.getWriter()).thenReturn(output);", "fixed": "         final PrintWriter output = mock(PrintWriter.class);\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getPathInfo()).thenReturn(\"/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.of(\"runs\")));\n         when(request.getParameterValues(\"runs\")).thenReturn(new String[]{\"1\"});\n         when(response.getWriter()).thenReturn(output);", "sourceBeforeFix": "request.getServletPath()", "sourceAfterFix": "request.getPathInfo()"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform2iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toIntBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform3f (int location, float x, float y, float z) {\r", "fixed": " \t}\r\n \tpublic void glUniform2iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform2iv(location, v);\r\n \t}\r\n \tpublic void glUniform2iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform2iv(location, toIntBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform3f (int location, float x, float y, float z) {\r", "sourceBeforeFix": "GL20.glGetUniform(program,location,params)", "sourceAfterFix": "GL20.glGetUniformfv(program,location,params)"}
{"fixCommitSHA1": "557a51f3ac19cf4b2ffbcb32354152c88643398d", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "     }\n   }\n  private void removeModel(Map<Integer, Integer> model, Range<Integer> range) {\n     for (int i = MIN_BOUND - 1; i <= MAX_BOUND + 1; i++) {\n       if (range.contains(i)) {\n         model.remove(i);", "fixed": "     }\n   }\n  private static void removeModel(Map<Integer, Integer> model, Range<Integer> range) {\n     for (int i = MIN_BOUND - 1; i <= MAX_BOUND + 1; i++) {\n       if (range.contains(i)) {\n         model.remove(i);", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "c888434580c601ac9c4734e19d8eefac63518031", "projectName": "swagger-api.swagger-codegen", "bugType": "Wrong Function Name", "problem": "                 for (CodegenParameter cp : operation.allParams) {\n                    String jsdocType = getJSDocTypeWithBraces(cp);\n                     cp.vendorExtensions.put(\"x-jsdoc-type\", jsdocType);\n                 }\n                String jsdocType = getJSDocTypeWithBraces(operation);\n                 operation.vendorExtensions.put(\"x-jsdoc-type\", jsdocType);\n             }\n         }", "fixed": "                 for (CodegenParameter cp : operation.allParams) {\n                    String jsdocType = getJSDocType(cp);\n                     cp.vendorExtensions.put(\"x-jsdoc-type\", jsdocType);\n                 }\n                String jsdocType = getJSDocType(operation);\n                 operation.vendorExtensions.put(\"x-jsdoc-type\", jsdocType);\n             }\n         }", "sourceBeforeFix": "getJSDocTypeWithBraces(cp)", "sourceAfterFix": "getJSDocType(cp)"}
{"fixCommitSHA1": "af39d558ff5ca71fad662cc1fc7bb2927640751c", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t\t\t\t\tclusterProperties.getNodes());\n \t\t\tif (clusterProperties.getMaxRedirects() != null) {\n\t\t\t\tconfig.setMaxRedirects(config.getMaxRedirects());\n \t\t\t}\n \t\t\treturn config;\n \t\t}", "fixed": " \t\t\t\t\tclusterProperties.getNodes());\n \t\t\tif (clusterProperties.getMaxRedirects() != null) {\n\t\t\t\tconfig.setMaxRedirects(clusterProperties.getMaxRedirects());\n \t\t\t}\n \t\t\treturn config;\n \t\t}", "sourceBeforeFix": "config.getMaxRedirects()", "sourceAfterFix": "clusterProperties.getMaxRedirects()"}
{"fixCommitSHA1": "0b740e7040786e668408aafbabe33f5fcbdda2a5", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Change Binary Operator", "problem": "             long now = millisTime();\n            long currentIdleConnectionTimeoutInstant = idleConnectionTimeout - nettyResponseFuture.getLastTouch();\n             long durationBeforeCurrentIdleConnectionTimeout = currentIdleConnectionTimeoutInstant - now;\n             if (durationBeforeCurrentIdleConnectionTimeout <= 0L) {", "fixed": "             long now = millisTime();\n            long currentIdleConnectionTimeoutInstant = idleConnectionTimeout + nettyResponseFuture.getLastTouch();\n             long durationBeforeCurrentIdleConnectionTimeout = currentIdleConnectionTimeoutInstant - now;\n             if (durationBeforeCurrentIdleConnectionTimeout <= 0L) {", "sourceBeforeFix": "idleConnectionTimeout - nettyResponseFuture.getLastTouch()", "sourceAfterFix": "idleConnectionTimeout + nettyResponseFuture.getLastTouch()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15853, value = \"Unexpected initial path key %s\")\n     IllegalStateException unexpectedInitialPathKey(String key);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10853, value = \"Unexpected initial path key %s\")\n     IllegalStateException unexpectedInitialPathKey(String key);\n     /**", "sourceBeforeFix": "id=15860", "sourceAfterFix": "id=10860"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface MyBatisEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedMyBatisEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface MyBatisEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedMyBatisEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "eb9527a17038c6a44b4e1afa1fd82eb195baacb8", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t\tif (!this.autoTimer.isEnabled()) {\n \t\t\treturn chain.filter(exchange);\n \t\t}\n\t\treturn chain.filter(exchange).compose((call) -> filter(exchange, call));\n \t}\n \tprivate Publisher<Void> filter(ServerWebExchange exchange, Mono<Void> call) {", "fixed": " \t\tif (!this.autoTimer.isEnabled()) {\n \t\t\treturn chain.filter(exchange);\n \t\t}\n\t\treturn chain.filter(exchange).transformDeferred((call) -> filter(exchange, call));\n \t}\n \tprivate Publisher<Void> filter(ServerWebExchange exchange, Mono<Void> call) {", "sourceBeforeFix": "chain.filter(exchange).compose((call) -> filter(exchange,call))", "sourceAfterFix": "chain.filter(exchange).transformDeferred((call) -> filter(exchange,call))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fdd0b31d828c2e0d50f64ef8713a99ceeb8ffa03", "projectName": "eclipse.vert.x", "bugType": "Same Function More Args", "problem": "   @Override\n   public void handle(AsyncResult<T> asyncResult) {\n    throw new IllegalStateException();\n   }\n }", "fixed": "   @Override\n   public void handle(AsyncResult<T> asyncResult) {\n    throw new IllegalStateException(\"Result is already complete: succeeded\");\n   }\n }", "sourceBeforeFix": "new IllegalStateException()", "sourceAfterFix": "new IllegalStateException(\"Result is already complete: succeeded\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface PahoEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedPahoEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface PahoEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedPahoEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "c6f898a116427906702afb349275331494ecaeef", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "     public URL loadResourceAsURL(String uri) {\n         ObjectHelper.notEmpty(uri, \"uri\");\n        return bundleContext.getBundle().getEntry(uri);\n     }\n     protected Class<?> doLoadClass(String name, Bundle loader) {", "fixed": "     public URL loadResourceAsURL(String uri) {\n         ObjectHelper.notEmpty(uri, \"uri\");\n        return bundleContext.getBundle().getResource(uri);\n     }\n     protected Class<?> doLoadClass(String name, Bundle loader) {", "sourceBeforeFix": "bundleContext.getBundle().getEntry(uri)", "sourceAfterFix": "bundleContext.getBundle().getResource(uri)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "fixed": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4fv(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4fv(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "sourceBeforeFix": "GL20.glUniform2(location,toIntBuffer(v,offset,count << 1))", "sourceAfterFix": "GL20.glUniform2iv(location,toIntBuffer(v,offset,count << 1))"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface DataSetEndpointBuilder\n             extends\n                 DataSetEndpointConsumerBuilder, DataSetEndpointProducerBuilder {\n         default AdvancedDataSetEndpointBuilder advanced() {", "fixed": "     \n    public interface DataSetEndpointBuilder\n             extends\n                 DataSetEndpointConsumerBuilder, DataSetEndpointProducerBuilder {\n         default AdvancedDataSetEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "d83dd417fff4ae2407e04a21056f331a773d970b", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "         private boolean fallback;\n        public SampleLanguage(boolean fallback) {\n             this.fallback = fallback;\n         }", "fixed": "         private boolean fallback;\n        SampleLanguage(boolean fallback) {\n             this.fallback = fallback;\n         }", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedSedaEndpointBuilder\n             extends\n                 AdvancedSedaEndpointConsumerBuilder, AdvancedSedaEndpointProducerBuilder {\n         default SedaEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedSedaEndpointBuilder\n             extends\n                 AdvancedSedaEndpointConsumerBuilder, AdvancedSedaEndpointProducerBuilder {\n         default SedaEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface PrinterEndpointBuilder\n            extends\n                EndpointProducerBuilder {\n         default AdvancedPrinterEndpointBuilder advanced() {\n             return (AdvancedPrinterEndpointBuilder) this;\n         }", "fixed": "     \n    public interface PrinterEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedPrinterEndpointBuilder advanced() {\n             return (AdvancedPrinterEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "6190e5a019d5009864d47bf4b08ceef4ac52cf91", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "   @Test\n   public void doubleFlush() throws Exception {\n     mTestStream.write(INCREASING_BYTES, 1, 10);\n    Assert.assertEquals(0, mTestStream.getBytesFlushed());\n     mTestStream.flush();\n    Assert.assertEquals(10, mTestStream.getBytesFlushed());\n     mTestStream.flush();\n    Assert.assertEquals(10, mTestStream.getBytesFlushed());\n   }\n }", "fixed": "   @Test\n   public void doubleFlush() throws Exception {\n     mTestStream.write(INCREASING_BYTES, 1, 10);\n    Assert.assertEquals(0, mTestStream.getFlushedBytes());\n     mTestStream.flush();\n    Assert.assertEquals(10, mTestStream.getFlushedBytes());\n     mTestStream.flush();\n    Assert.assertEquals(10, mTestStream.getFlushedBytes());\n   }\n }", "sourceBeforeFix": "mTestStream.getBytesFlushed()", "sourceAfterFix": "mTestStream.getFlushedBytes()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15842, value = \"Invalid rollout plan. %s is not a valid child of node %s\")\n     String invalidRolloutPlan(ModelNode modelNode, String nodeName);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10842, value = \"Invalid rollout plan. %s is not a valid child of node %s\")\n     String invalidRolloutPlan(ModelNode modelNode, String nodeName);\n     /**", "sourceBeforeFix": "id=15835", "sourceAfterFix": "id=10835"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * @return True, if all normalized key comparisons should invert the sign of the comparison result,\n \t *         false if the normalized key should be used as is.\n \t */\n\tpublic boolean invertNormalizedKey();", "fixed": " \t * @return True, if all normalized key comparisons should invert the sign of the comparison result,\n \t *         false if the normalized key should be used as is.\n \t */\n\tpublic abstract boolean invertNormalizedKey();", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "08127e3110bd7ea8e6eb84fccaed501455394f63", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "     }\n   }\n  private int totalSize(Iterable<? extends Entry<?>> entries) {\n     int sum = 0;\n     for (Entry<?> entry : entries) {\n       sum += entry.getCount();", "fixed": "     }\n   }\n  private static int totalSize(Iterable<? extends Entry<?>> entries) {\n     int sum = 0;\n     for (Entry<?> entry : entries) {\n       sum += entry.getCount();", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getUserTimeline(String id) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline/\" + id + \".json\", http.isAuthenticationEnabled()));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getUserTimeline(String id) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline/\" + id + \".json\", http.isAuthenticationEnabled()));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/public_timeline.json\",false))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/public_timeline.json\",false))"}
{"fixCommitSHA1": "91c086b7af22b6cfaf2f66b2c872b752dc10a19c", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "             }\n             LOG.trace(\"List files {} found {} files\", file.getAbsoluteFilePath(), files.size());\n             for (ChannelSftp.LsEntry f : files) {\n                if (f.getFilename().equals(file.getFileName())) {\n                     newLastModified = f.getAttrs().getMTime();\n                     newLength = f.getAttrs().getSize();\n                 }", "fixed": "             }\n             LOG.trace(\"List files {} found {} files\", file.getAbsoluteFilePath(), files.size());\n             for (ChannelSftp.LsEntry f : files) {\n                if (f.getFilename().equals(file.getFileNameOnly())) {\n                     newLastModified = f.getAttrs().getMTime();\n                     newLength = f.getAttrs().getSize();\n                 }", "sourceBeforeFix": "file.getFileName()", "sourceAfterFix": "file.getFileNameOnly()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15849, value = \"Operation %s for address %s can only be handled by the \" +\n             \"master Domain Controller; this host is not the master Domain Controller\")\n     String masterDomainControllerOnlyOperation(String operation, PathAddress address);", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10849, value = \"Operation %s for address %s can only be handled by the \" +\n             \"master Domain Controller; this host is not the master Domain Controller\")\n     String masterDomainControllerOnlyOperation(String operation, PathAddress address);", "sourceBeforeFix": "id=15837", "sourceAfterFix": "id=10837"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 15872, value = \"Invalid code %d\")\n     IllegalArgumentException invalidCode(int code);\n }", "fixed": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 10872, value = \"Invalid code %d\")\n     IllegalArgumentException invalidCode(int code);\n }", "sourceBeforeFix": "id=15842", "sourceAfterFix": "id=10842"}
{"fixCommitSHA1": "19c2a076c25faf94ae9e8f4072f2a4590c9ee1fe", "projectName": "spring-projects.spring-boot", "bugType": "Wrong Function Name", "problem": " \tpublic void restartWithKeepAlive() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tthis.container = factory\n\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n \t\tMultiThreadedHttpConnectionManager connectionManager = new MultiThreadedHttpConnectionManager();\n \t\tHttpClient client = new HttpClient(connectionManager);", "fixed": " \tpublic void restartWithKeepAlive() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tthis.container = factory\n\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \t\tMultiThreadedHttpConnectionManager connectionManager = new MultiThreadedHttpConnectionManager();\n \t\tHttpClient client = new HttpClient(connectionManager);", "sourceBeforeFix": "factory.getEmbdeddedServletContainer()", "sourceAfterFix": "factory.getEmbeddedServletContainer()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      * @param hostName the name of the host.\n      */\n     @LogMessage(level = Level.WARN)\n    @Message(id = 15805, value = \"Caught exception awaiting final response from host %s\")\n     void caughtExceptionAwaitingFinalResponse(@Cause Throwable cause, String hostName);\n     /**", "fixed": "      * @param hostName the name of the host.\n      */\n     @LogMessage(level = Level.WARN)\n    @Message(id = 10805, value = \"Caught exception awaiting final response from host %s\")\n     void caughtExceptionAwaitingFinalResponse(@Cause Throwable cause, String hostName);\n     /**", "sourceBeforeFix": "id=15800", "sourceAfterFix": "id=10800"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "b757e19f494cf8bdd18ed9bd7672733e7e41f2d6", "projectName": "alibaba.dubbo", "bugType": "Same Function Swap Args", "problem": "         byte[] data = new byte[length];\n         buffer.getBytes(srcIndex, data, 0, length);\n        setBytes(0, data, index, length);\n     }", "fixed": "         byte[] data = new byte[length];\n         buffer.getBytes(srcIndex, data, 0, length);\n        setBytes(index, data, 0, length);\n     }", "sourceBeforeFix": "setBytes(0,data,index,length)", "sourceAfterFix": "setBytes(index,data,0,length)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "cea872d4e9317601eed60f7fa0a9a831446f41be", "projectName": "apache.storm", "bugType": "Wrong Function Name", "problem": "     private void die(Throwable exception) {\n         _exception = exception;\n        LOG.info(\"Halting process: ShellBolt died.\", exception);\n         _collector.reportError(exception);\n        Runtime.getRuntime().halt(11);\n     }\n }", "fixed": "     private void die(Throwable exception) {\n         _exception = exception;\n        LOG.error(\"Halting process: ShellBolt died.\", exception);\n         _collector.reportError(exception);\n        System.exit(11);\n     }\n }", "sourceBeforeFix": "LOG.info(\"Halting process: ShellBolt died.\",exception)", "sourceAfterFix": "LOG.error(\"Halting process: ShellBolt died.\",exception)"}
{"fixCommitSHA1": "0b52fefcc898f6f82c627bba9fcdd38a62583b22", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "         try {\n             final InputStream stream = new FileInputStream(file);\n             stream.close();\n            throw new Exception(\"File \" + file.getPath() + \" should not exist\");\n         }\n         catch (FileNotFoundException ex) {\n             return ex.getLocalizedMessage();", "fixed": "         try {\n             final InputStream stream = new FileInputStream(file);\n             stream.close();\n            throw new IllegalStateException(\"File \" + file.getPath() + \" should not exist\");\n         }\n         catch (FileNotFoundException ex) {\n             return ex.getLocalizedMessage();", "sourceBeforeFix": "new Exception(\"File \" + file.getPath() + \" should not exist\")", "sourceAfterFix": "new IllegalStateException(\"File \" + file.getPath() + \" should not exist\")"}
{"fixCommitSHA1": "f9618973978c704705ba657cf196370c2364c779", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "    */\n   public int unpin(TachyonURI path) throws IOException {\n     try {\n      mTfs.setPin(mTfs.open(path), true);\n       System.out.println(\"File '\" + path + \"' was successfully unpinned.\");\n       return 0;\n     } catch (Exception e) {", "fixed": "    */\n   public int unpin(TachyonURI path) throws IOException {\n     try {\n      mTfs.unpin(mTfs.open(path));\n       System.out.println(\"File '\" + path + \"' was successfully unpinned.\");\n       return 0;\n     } catch (Exception e) {", "sourceBeforeFix": "mTfs.setPin(mTfs.open(path),true)", "sourceAfterFix": "mTfs.unpin(mTfs.open(path))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "a161d8d1924d1fb49a4d229370d998be1493957c", "projectName": "Graylog2.graylog2-server", "bugType": "Wrong Function Name", "problem": "                 loggerForCleaner.debug(\"Beginning log cleanup\");\n                 int total = 0;\n                 final Timer.Context ctx = new Timer().time();\n                for (final Log kafkaLog : JavaConversions.asIterable(logManager.allLogs())) {\n                     if (kafkaLog.config().compact()) continue;\n                     loggerForCleaner.debug(\"Garbage collecting {}\", kafkaLog.name());\n                     total += cleanupExpiredSegments(kafkaLog) +", "fixed": "                 loggerForCleaner.debug(\"Beginning log cleanup\");\n                 int total = 0;\n                 final Timer.Context ctx = new Timer().time();\n                for (final Log kafkaLog : JavaConversions.asJavaIterable(logManager.allLogs())) {\n                     if (kafkaLog.config().compact()) continue;\n                     loggerForCleaner.debug(\"Garbage collecting {}\", kafkaLog.name());\n                     total += cleanupExpiredSegments(kafkaLog) +", "sourceBeforeFix": "JavaConversions.asIterable(logManager.allLogs())", "sourceAfterFix": "JavaConversions.asJavaIterable(logManager.allLogs())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "bb75dc34febfaebaee17da842105d4bb3274f863", "projectName": "libgdx.libgdx", "bugType": "Change Numeric Literal", "problem": " \tMap map;\r\n \tOrthographicCamera cam;\r\n \tSpriteCache cache;\r\n\tSpriteBatch batch = new SpriteBatch(10000);\r\n \tImmediateModeRenderer20 renderer = new ImmediateModeRenderer20(false, true, 0);\r\n \tint[][] blocks;\r\n \tTextureRegion tile;\r", "fixed": " \tMap map;\r\n \tOrthographicCamera cam;\r\n \tSpriteCache cache;\r\n\tSpriteBatch batch = new SpriteBatch(5460);\r\n \tImmediateModeRenderer20 renderer = new ImmediateModeRenderer20(false, true, 0);\r\n \tint[][] blocks;\r\n \tTextureRegion tile;\r", "sourceBeforeFix": "new SpriteBatch(10000)", "sourceAfterFix": "new SpriteBatch(5460)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15840, value = \"Interrupted waiting for result from server %s\")\n     String interruptedAwaitingResultFromServer(ServerIdentity server);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10840, value = \"Interrupted waiting for result from server %s\")\n     String interruptedAwaitingResultFromServer(ServerIdentity server);\n     /**", "sourceBeforeFix": "id=15855", "sourceAfterFix": "id=10855"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e9f858336e2ca5427369e024618dcbf952507cc5", "projectName": "facebook.presto", "bugType": "Same Function More Args", "problem": "             deserializer.initialize(configuration, schema);\n         }\n         catch (SerDeException e) {\n            throw new RuntimeException(\"error initializing deserializer: \" + deserializer.getClass().getName());\n         }\n     }", "fixed": "             deserializer.initialize(configuration, schema);\n         }\n         catch (SerDeException e) {\n            throw new RuntimeException(\"error initializing deserializer: \" + deserializer.getClass().getName(), e);\n         }\n     }", "sourceBeforeFix": "new RuntimeException(\"error initializing deserializer: \" + deserializer.getClass().getName())", "sourceAfterFix": "new RuntimeException(\"error initializing deserializer: \" + deserializer.getClass().getName(),e)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     return additionalReplacements;\n   }\n  private final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     return additionalReplacements;\n   }\n  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "031f769fa3c610748b48bc105b4518c880161d0a", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t*/\n \tpublic Vector2 getLocalAnchorB () {\n\t\tjniGetLocalAnchorA(addr, tmp);\n \t\tlocalAnchorB.set(tmp[0], tmp[1]);\n \t\treturn localAnchorB;\n \t}", "fixed": " \t*/\n \tpublic Vector2 getLocalAnchorB () {\n\t\tjniGetLocalAnchorB(addr, tmp);\n \t\tlocalAnchorB.set(tmp[0], tmp[1]);\n \t\treturn localAnchorB;\n \t}", "sourceBeforeFix": "jniGetLocalAnchorA(addr,tmp)", "sourceAfterFix": "jniGetLocalAxisA(addr,tmp)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AtomixMessagingEndpointBuilder\n             extends\n                 AtomixMessagingEndpointConsumerBuilder, AtomixMessagingEndpointProducerBuilder {\n         default AdvancedAtomixMessagingEndpointBuilder advanced() {", "fixed": "     \n    public interface AtomixMessagingEndpointBuilder\n             extends\n                 AtomixMessagingEndpointConsumerBuilder, AtomixMessagingEndpointProducerBuilder {\n         default AdvancedAtomixMessagingEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "a35860eadb4400f069e306ccd76f1a19ecfb3ba1", "projectName": "google.guava", "bugType": "Change Identifier Used", "problem": "   }\n   @Override\n  public N oppositeNode(Object edge) {\n     return checkNotNull(incidentEdgeMap.get(edge));\n   }\n   @Override\n  public N removeInEdge(Object edge, boolean isSelfLoop) {\n     if (!isSelfLoop) {\n       return removeOutEdge(edge);\n     }", "fixed": "   }\n   @Override\n  public N adjacentNode(E edge) {\n     return checkNotNull(incidentEdgeMap.get(edge));\n   }\n   @Override\n  public N removeInEdge(E edge, boolean isSelfLoop) {\n     if (!isSelfLoop) {\n       return removeOutEdge(edge);\n     }", "sourceBeforeFix": "Object edge", "sourceAfterFix": "E edge"}
{"fixCommitSHA1": "3757a700a89638e5747d966bdaa8266b62c974c8", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "     assertEquals(bytes, encoding.decode(encoded));\n   }\n  private void assertFailsToDecode(BaseEncoding encoding, String cannotDecode) {\n     try {\n       encoding.decode(cannotDecode);\n       fail(\"Expected IllegalArgumentException\");", "fixed": "     assertEquals(bytes, encoding.decode(encoded));\n   }\n  private static void assertFailsToDecode(BaseEncoding encoding, String cannotDecode) {\n     try {\n       encoding.decode(cannotDecode);\n       fail(\"Expected IllegalArgumentException\");", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedWordpressEndpointBuilder\n             extends\n                 AdvancedWordpressEndpointConsumerBuilder, AdvancedWordpressEndpointProducerBuilder {\n         default WordpressEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedWordpressEndpointBuilder\n             extends\n                 AdvancedWordpressEndpointConsumerBuilder, AdvancedWordpressEndpointProducerBuilder {\n         default WordpressEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "3ae343b768bae5973a5634c8e287ae1173e30248", "projectName": "netty.netty", "bugType": "Wrong Function Name", "problem": "             assert amt > 0;\n             prioritizableForTree -= amt;\n             if (parent != null) {\n                parent.decrementPrioritizableForTree(amt);\n             }\n         }", "fixed": "             assert amt > 0;\n             prioritizableForTree -= amt;\n             if (parent != null) {\n                parent.decrementPrioritizableForTree0(amt);\n             }\n         }", "sourceBeforeFix": "parent.incrementPrioritizableForTree(amt,oldParent)", "sourceAfterFix": "parent.incrementPrioritizableForTree0(amt,oldParent)"}
{"fixCommitSHA1": "b16ab7c7615dbf555ee60f5bac09821d1886e136", "projectName": "facebook.presto", "bugType": "Change Numeric Literal", "problem": "         root.setSoftMemoryLimit(new DataSize(1, BYTE));\n         root.setMaxQueuedQueries(4);\n         root.setMaxRunningQueries(3);\n        MockQueryExecution query1 = new MockQueryExecution(1);\n         root.run(query1);\n         root.processQueuedQueries();", "fixed": "         root.setSoftMemoryLimit(new DataSize(1, BYTE));\n         root.setMaxQueuedQueries(4);\n         root.setMaxRunningQueries(3);\n        MockQueryExecution query1 = new MockQueryExecution(2);\n         root.run(query1);\n         root.processQueuedQueries();", "sourceBeforeFix": "new MockQueryExecution(1)", "sourceAfterFix": "new MockQueryExecution(2)"}
{"fixCommitSHA1": "46941b16a30e493238924701f938cbf3318eb355", "projectName": "Alluxio.alluxio", "bugType": "Same Function More Args", "problem": "    * @param manager a block metadata manager handle\n    */\n   private BlockStoreMeta(BlockMetadataManager manager, boolean shouldIncludeBlockIds) {\n    Preconditions.checkNotNull(manager);\n     for (StorageTier tier : manager.getTiers()) {\n       Long capacityBytes = mCapacityBytesOnTiers.get(tier.getTierAlias());\n       Long usedBytes = mUsedBytesOnTiers.get(tier.getTierAlias());", "fixed": "    * @param manager a block metadata manager handle\n    */\n   private BlockStoreMeta(BlockMetadataManager manager, boolean shouldIncludeBlockIds) {\n    Preconditions.checkNotNull(manager, \"manager\");\n     for (StorageTier tier : manager.getTiers()) {\n       Long capacityBytes = mCapacityBytesOnTiers.get(tier.getTierAlias());\n       Long usedBytes = mUsedBytesOnTiers.get(tier.getTierAlias());", "sourceBeforeFix": "Preconditions.checkNotNull(mBlockIdsOnTiers)", "sourceAfterFix": "Preconditions.checkNotNull(mBlockIdsOnTiers,\"mBlockIdsOnTiers\")"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_tw() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016/05/06\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_tw() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016/05/06\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "58ce4c40970fc29d00e5740bc6098eb475668e86", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "             if (!found) {\n                 boolean reqd = true;\n                if (mCheckUnusedThrows) {\n                     final ClassResolver cr =\n                         new ClassResolver(\n                             getClassLoader(),", "fixed": "             if (!found) {\n                 boolean reqd = true;\n                if (mAllowUndeclaredRTE) {\n                     final ClassResolver cr =\n                         new ClassResolver(\n                             getClassLoader(),", "sourceBeforeFix": "mCheckUnusedThrows=aFlag", "sourceAfterFix": "mAllowUndeclaredRTE=aFlag"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  private final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "a36966d96196f3d64daa2809b7bc6077eedc5a9d", "projectName": "swagger-api.swagger-codegen", "bugType": "Same Function More Args", "problem": "         \"Bool\",\n         \"Void\",\n         \"String\",\n        \"Character\")\n     );\n     defaultIncludes = new HashSet<String>(\n       Arrays.asList(", "fixed": "         \"Bool\",\n         \"Void\",\n         \"String\",\n        \"Character\",\n        \"AnyObject\")\n     );\n     defaultIncludes = new HashSet<String>(\n       Arrays.asList(", "sourceBeforeFix": "Arrays.asList(\"Int\",\"Float\",\"Double\",\"Bool\",\"Void\",\"String\",\"Character\")", "sourceAfterFix": "Arrays.asList(\"Int\",\"Float\",\"Double\",\"Bool\",\"Void\",\"String\",\"Character\",\"AnyObject\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "70c0e3d96ba8a14efb61e375915027b7346ba49f", "projectName": "brettwooldridge.HikariCP", "bugType": "Less Specific If", "problem": "          connectionTimeout = CONNECTION_TIMEOUT;\n       }\n      if (minIdle < 0) {\n          minIdle = maxPoolSize;\n       }", "fixed": "          connectionTimeout = CONNECTION_TIMEOUT;\n       }\n      if (minIdle < 0 || minIdle > maxPoolSize) {\n          minIdle = maxPoolSize;\n       }", "sourceBeforeFix": "minIdle < 0", "sourceAfterFix": "minIdle < 0 || minIdle > maxPoolSize"}
{"fixCommitSHA1": "2b33aa6645b04dddf1100d2aa267b0c1600b431d", "projectName": "hazelcast.hazelcast", "bugType": "Change Binary Operator", "problem": "     @Override\n     public long getRemainingLeaseTime() {\n        if (expirationTime == Long.MAX_VALUE && expirationTime < 0) {\n             return Long.MAX_VALUE;\n         }\n         long now = Clock.currentTimeMillis();", "fixed": "     @Override\n     public long getRemainingLeaseTime() {\n        if (expirationTime == Long.MAX_VALUE || expirationTime < 0) {\n             return Long.MAX_VALUE;\n         }\n         long now = Clock.currentTimeMillis();", "sourceBeforeFix": "expirationTime == Long.MAX_VALUE && expirationTime < 0", "sourceAfterFix": "expirationTime == Long.MAX_VALUE || expirationTime < 0"}
{"fixCommitSHA1": "f4ab483493a6b24e9a991c03cfd5b0b5cdcbff69", "projectName": "dropwizard.metrics", "bugType": "Change Identifier Used", "problem": "      * @param unit      the unit for {@code period}\n      */\n     public void start(long period, TimeUnit unit) {\n        executor.scheduleWithFixedDelay(this, period, period, unit);\n     }\n     @Override", "fixed": "      * @param unit      the unit for {@code period}\n      */\n     public void start(long period, TimeUnit unit) {\n        executor.scheduleAtFixedRate(this, period, period, unit);\n     }\n     @Override", "sourceBeforeFix": "executor.scheduleWithFixedDelay(this,period,period,unit)", "sourceAfterFix": "executor.scheduleAtFixedRate(this,period,period,unit)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e7bf415427b37bbc760ff9b9c69650db8ec477e4", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnBean(RabbitTemplate.class)\n\t@ConditionalOnEnablednHealthIndicator(\"rabbit\")\n \tpublic static class RabbitHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<RabbitHealthIndicator, RabbitTemplate> {", "fixed": " \t@Configuration\n \t@ConditionalOnBean(RabbitTemplate.class)\n\t@ConditionalOnEnabledHealthIndicator(\"rabbit\")\n \tpublic static class RabbitHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<RabbitHealthIndicator, RabbitTemplate> {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"solr\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"solr\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsText(String path, int batchSize) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), batchSize, null);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsText(String path, int batchSize) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), batchSize, null);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "902905ad10c58669fe4e3950e8a4df7abe451765", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": "* @see Package\n \t */\n \tpublic static String getVersion() {\n\t\tPackage pkg = SpringApplication.class.getPackage();\n \t\treturn (pkg != null ? pkg.getImplementationVersion() : null);\n \t}", "fixed": "* @see Package\n \t */\n \tpublic static String getVersion() {\n\t\tPackage pkg = SpringBootVersion.class.getPackage();\n \t\treturn (pkg != null ? pkg.getImplementationVersion() : null);\n \t}", "sourceBeforeFix": "SpringApplication.class", "sourceAfterFix": "SpringBootVersion.class"}
{"fixCommitSHA1": "270185aba54cef1d8ce59ec347b5623f2e502afe", "projectName": "clojure.clojure", "bugType": "Change Identifier Used", "problem": " \t\telse\n \t\t\t{\n \t\t\tISeq s = RT.seq(sizeOrSeq);\n\t\t\tint size = s.count();\n \t\t\tfloat[] ret = new float[size];\n \t\t\tfor(int i = 0; i < size && s != null; i++, s = s.next())\n \t\t\t\tret[i] = ((Number) s.first()).floatValue();", "fixed": " \t\telse\n \t\t\t{\n \t\t\tISeq s = RT.seq(sizeOrSeq);\n\t\t\tint size = RT.count(s);\n \t\t\tfloat[] ret = new float[size];\n \t\t\tfor(int i = 0; i < size && s != null; i++, s = s.next())\n \t\t\t\tret[i] = ((Number) s.first()).floatValue();", "sourceBeforeFix": "s.count()", "sourceAfterFix": "RT.count(s)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "a3b9f6f1ebb21dd528effcceba2ac207f40b15e8", "projectName": "alibaba.canal", "bugType": "More Specific If", "problem": "     }\n     public static String unescapeQuotaName(String name) {\n        if (name.length() > 2) {\n             char c0 = name.charAt(0);\n             char x0 = name.charAt(name.length() - 1);\n             if (c0 == '\\'' && x0 == '\\'') {", "fixed": "     }\n     public static String unescapeQuotaName(String name) {\n        if (name != null && name.length() > 2) {\n             char c0 = name.charAt(0);\n             char x0 = name.charAt(name.length() - 1);\n             if (c0 == '\\'' && x0 == '\\'') {", "sourceBeforeFix": "name.length() > 2", "sourceAfterFix": "name != null && name.length() > 2"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "      * Advanced builder for endpoint for the Google BigQuery Standard SQL\n      * component.\n      */\n    public static interface AdvancedGoogleBigQuerySQLEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default GoogleBigQuerySQLEndpointBuilder basic() {", "fixed": "      * Advanced builder for endpoint for the Google BigQuery Standard SQL\n      * component.\n      */\n    public interface AdvancedGoogleBigQuerySQLEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default GoogleBigQuerySQLEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "fixed": " \t}\r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL15.glGetBufferParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetError () {\r", "sourceBeforeFix": "GL20.glUniform1(location,toIntBuffer(v,offset,count))", "sourceAfterFix": "GL20.glUniform1iv(location,toIntBuffer(v,offset,count))"}
{"fixCommitSHA1": "198ab0e862cdf33e8dff37bf24676ffcb392ed82", "projectName": "apache.hive", "bugType": "Change Identifier Used", "problem": "     for (String poolName : poolsToRedistribute) {\n       if (LOG.isDebugEnabled()) {\n        LOG.info(\"Processing changes for pool \" + poolName + \": \" + pools.get(poolName));\n       }\n       processPoolChangesOnMasterThread(poolName, hasRequeues, syncWork);\n     }", "fixed": "     for (String poolName : poolsToRedistribute) {\n       if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Processing changes for pool \" + poolName + \": \" + pools.get(poolName));\n       }\n       processPoolChangesOnMasterThread(poolName, hasRequeues, syncWork);\n     }", "sourceBeforeFix": "LOG.info(\"Processing changes for pool \" + poolName + \": \"+ pools.get(poolName))", "sourceAfterFix": "LOG.debug(\"Processing changes for pool \" + poolName + \": \"+ pools.get(poolName))"}
{"fixCommitSHA1": "4c1b34b34b68f102fbb5021a801b6d99de967550", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  static class State implements Serializable {\n     private static final long serialVersionUID = 1L;\n     final Map<String, Integer> cssNames;", "fixed": "   \n  public static class State implements Serializable {\n     private static final long serialVersionUID = 1L;\n     final Map<String, Integer> cssNames;", "sourceBeforeFix": "0", "sourceAfterFix": "4"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AtomixQueueEndpointBuilder\n             extends\n                 AtomixQueueEndpointConsumerBuilder, AtomixQueueEndpointProducerBuilder {\n         default AdvancedAtomixQueueEndpointBuilder advanced() {", "fixed": "     \n    public interface AtomixQueueEndpointBuilder\n             extends\n                 AtomixQueueEndpointConsumerBuilder, AtomixQueueEndpointProducerBuilder {\n         default AdvancedAtomixQueueEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15833, value = \"%s is missing %s: %s\")\n     String requiredChildIsMissing(String parent, String child, String parentSpec);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10833, value = \"%s is missing %s: %s\")\n     String requiredChildIsMissing(String parent, String child, String parentSpec);\n     /**", "sourceBeforeFix": "id=15861", "sourceAfterFix": "id=10861"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface KeystoneEndpointBuilder\n            extends\n                EndpointProducerBuilder {\n         default AdvancedKeystoneEndpointBuilder advanced() {\n             return (AdvancedKeystoneEndpointBuilder) this;\n         }", "fixed": "     \n    public interface KeystoneEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedKeystoneEndpointBuilder advanced() {\n             return (AdvancedKeystoneEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15840, value = \"Interrupted waiting for result from server %s\")\n     String interruptedAwaitingResultFromServer(ServerIdentity server);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10840, value = \"Interrupted waiting for result from server %s\")\n     String interruptedAwaitingResultFromServer(ServerIdentity server);\n     /**", "sourceBeforeFix": "id=15846", "sourceAfterFix": "id=10846"}
{"fixCommitSHA1": "0055e402262a4068722f33359974ca5b72db1511", "projectName": "apache.hadoop", "bugType": "Change Unary Operator\t", "problem": "       Preconditions.checkArgument(containerCount > 0,\n           \"The number of containers to request should larger than 0\");\n       Preconditions.checkArgument(\n              (!relaxLocality && (racks == null || racks.length == 0) \n                   && (nodes == null || nodes.length == 0)),\n               \"Can't turn off locality relaxation on a \" + \n               \"request with no location constraints\");", "fixed": "       Preconditions.checkArgument(containerCount > 0,\n           \"The number of containers to request should larger than 0\");\n       Preconditions.checkArgument(\n              !(!relaxLocality && (racks == null || racks.length == 0) \n                   && (nodes == null || nodes.length == 0)),\n               \"Can't turn off locality relaxation on a \" + \n               \"request with no location constraints\");", "sourceBeforeFix": "(!relaxLocality && (racks == null || racks.length == 0) && (nodes == null || nodes.length == 0))", "sourceAfterFix": "!(!relaxLocality && (racks == null || racks.length == 0) && (nodes == null || nodes.length == 0))"}
{"fixCommitSHA1": "b55782ed056e6265eeee028f891f291eb11d736b", "projectName": "wildfly.wildfly", "bugType": "Change Caller in Function Call", "problem": "         Node node = archive.get(MANIFEST);\n         Assert.assertNotNull(node);\n        Manifest mf = processor.getOrCreateManifest(archive);\n         Attributes attributes = mf.getMainAttributes();\n         String value = attributes.getValue(\"Dependencies\");\n         Set<String> deps = new HashSet<String>();", "fixed": "         Node node = archive.get(MANIFEST);\n         Assert.assertNotNull(node);\n        Manifest mf = ManifestUtils.getOrCreateManifest(archive);\n         Attributes attributes = mf.getMainAttributes();\n         String value = attributes.getValue(\"Dependencies\");\n         Set<String> deps = new HashSet<String>();", "sourceBeforeFix": "processor.getOrCreateManifest(archive)", "sourceAfterFix": "ManifestUtils.getOrCreateManifest(archive)"}
{"fixCommitSHA1": "19c2a076c25faf94ae9e8f4072f2a4590c9ee1fe", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \tpublic void startServlet() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tthis.container = factory\n\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\nassertThat(getResponse(\"http:\n \t}", "fixed": " \tpublic void startServlet() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tthis.container = factory\n\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\nassertThat(getResponse(\"http:\n \t}", "sourceBeforeFix": "factory.getEmbdeddedServletContainer()", "sourceAfterFix": "factory.getEmbeddedServletContainer()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15844, value = \"Invalid rollout plan. Server group %s appears more than once in the plan.\")\n     String invalidRolloutPlanGroupAlreadyExists(String group);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10844, value = \"Invalid rollout plan. Server group %s appears more than once in the plan.\")\n     String invalidRolloutPlanGroupAlreadyExists(String group);\n     /**", "sourceBeforeFix": "id=15863", "sourceAfterFix": "id=10863"}
{"fixCommitSHA1": "851141a35746241636a39315553f49d89643b358", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "                   HFileLink.createHFileLinkName(hri, storeFilePath.getName()));\n    StoreFile hsf = new StoreFile(this.fs, linkFilePath, conf, cacheConf,\n         BloomType.NONE, NoOpDataBlockEncoder.INSTANCE);\n     assertTrue(hsf.isLink());", "fixed": "                   HFileLink.createHFileLinkName(hri, storeFilePath.getName()));\n    StoreFile hsf = new StoreFile(this.fs, linkFilePath, testConf, cacheConf,\n         BloomType.NONE, NoOpDataBlockEncoder.INSTANCE);\n     assertTrue(hsf.isLink());", "sourceBeforeFix": "new StoreFile(this.fs,linkFilePath,conf,cacheConf,BloomType.NONE,NoOpDataBlockEncoder.INSTANCE)", "sourceAfterFix": "new StoreFile(this.fs,linkFilePath,testConf,cacheConf,BloomType.NONE,NoOpDataBlockEncoder.INSTANCE)"}
{"fixCommitSHA1": "4b52e5d010469405c1ec24baa2f8457f3eada222", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic boolean scrolled (int amount) {\r\n\t\tInputProcessor[] items = processors.begin();\r\n \t\ttry {\r\n \t\t\tfor (int i = 0, n = processors.size; i < n; i++)\r\n\t\t\t\tif (items[i].scrolled(amount)) return true;\r\n \t\t} finally {\r\n \t\t\tprocessors.end();\r\n \t\t}\r", "fixed": " \t}\r\n \tpublic boolean scrolled (int amount) {\r\n\t\tObject[] items = processors.begin();\r\n \t\ttry {\r\n \t\t\tfor (int i = 0, n = processors.size; i < n; i++)\r\n\t\t\t\tif (((InputProcessor)items[i]).scrolled(amount)) return true;\r\n \t\t} finally {\r\n \t\t\tprocessors.end();\r\n \t\t}\r", "sourceBeforeFix": "InputProcessor[]", "sourceAfterFix": "Object[]"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AMQPEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedAMQPEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface AMQPEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedAMQPEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "e04cbbf23e9273cca31b1cc12142e34fae753542", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "         }\n         \n        void reportPrivateCtor() {\n             withPrivateCtor = true;\n         }\n         \n        void reportNonPrivateCtor() {\n             withNonPrivateCtor = true;\n         }", "fixed": "         }\n         \n        private void reportPrivateCtor() {\n             withPrivateCtor = true;\n         }\n         \n        private void reportNonPrivateCtor() {\n             withNonPrivateCtor = true;\n         }", "sourceBeforeFix": "0", "sourceAfterFix": "2"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<Status> getUserTimeline() throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline.json\"\n                 , true));\n     }", "fixed": "      */\n     public ResponseList<Status> getUserTimeline() throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline.json\"\n                 , true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweets_of_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweets_of_me.json\",null,true))"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n            statistics.addRemoveTimeNano(System.nanoTime() - start);\n             if (hitCount == 1) {\n                 statistics.increaseCacheHits(hitCount);\n             } else {", "fixed": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n            statistics.addRemoveTimeNanos(System.nanoTime() - start);\n             if (hitCount == 1) {\n                 statistics.increaseCacheHits(hitCount);\n             } else {", "sourceBeforeFix": "statistics.addGetTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addGetTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "1e5fc1daab8364f1d16614e9013135a115e66e2c", "projectName": "google.guice", "bugType": "Change Caller in Function Call", "problem": "       fail();\n     } catch (Exception e) {\n      for (Throwable t = e; t != null; t = e.getCause()) {\n         StackTraceElement[] stackTraceElement = t.getStackTrace();\n         assertEquals(\"explode\", stackTraceElement[0].getMethodName());\n         assertEquals(\"invoke\", stackTraceElement[1].getMethodName());", "fixed": "       fail();\n     } catch (Exception e) {\n      for (Throwable t = e; t != null; t = t.getCause()) {\n         StackTraceElement[] stackTraceElement = t.getStackTrace();\n         assertEquals(\"explode\", stackTraceElement[0].getMethodName());\n         assertEquals(\"invoke\", stackTraceElement[1].getMethodName());", "sourceBeforeFix": "e.getCause()", "sourceAfterFix": "t.getCause()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "fixed": "   }\n   \n  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "55afb8268fa23107749ab8fc0feac49724afe751", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "      *\n      * @param resource the resource\n      */\n    public ResourceInternal(T resource) {\n       mResource = resource;\n       mLastAccessTimeMs = mClock.millis();\n     }", "fixed": "      *\n      * @param resource the resource\n      */\n    public ResourceInternal(R resource) {\n       mResource = resource;\n       mLastAccessTimeMs = mClock.millis();\n     }", "sourceBeforeFix": "T resource", "sourceAfterFix": "R resource"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsText(String path) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), 1, null);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsText(String path) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), 1, null);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public List<SavedSearch> getSavedSearches() throws TwitterException {\n        return SavedSearch.constructSavedSearches(get(getBaseURL() + \"saved_searches.json\", true));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n      */\n     public List<SavedSearch> getSavedSearches() throws TwitterException {\n        return SavedSearch.createSavedSearchList(get(getBaseURL() + \"saved_searches.json\", true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\",true))"}
{"fixCommitSHA1": "204c2156da54922cb0bfc9d944036e3503056a2f", "projectName": "pardom.ActiveAndroid", "bugType": "Change Identifier Used", "problem": " \t\t\t\t}\n \t\t\t\telse if (ReflectionUtils.isTypeSerializer(discoveredClass)) {\n \t\t\t\t\tTypeSerializer typeSerializer = (TypeSerializer) discoveredClass.newInstance();\n\t\t\t\t\tmTypeSerializers.put(typeSerializer.getClass(), typeSerializer);\n \t\t\t\t}\n \t\t\t}\n \t\t\tcatch (ClassNotFoundException e) {", "fixed": " \t\t\t\t}\n \t\t\t\telse if (ReflectionUtils.isTypeSerializer(discoveredClass)) {\n \t\t\t\t\tTypeSerializer typeSerializer = (TypeSerializer) discoveredClass.newInstance();\n\t\t\t\t\tmTypeSerializers.put(typeSerializer.getDeserializedType(), typeSerializer);\n \t\t\t\t}\n \t\t\t}\n \t\t\tcatch (ClassNotFoundException e) {", "sourceBeforeFix": "typeSerializer.getClass()", "sourceAfterFix": "typeSerializer.getDeserializedType()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "a204cc6e5f02a11438c0fc399f4c9a12f7888ea5", "projectName": "facebook.presto", "bugType": "Change Numeric Literal", "problem": "         try {\n            future1.get(1, TimeUnit.SECONDS);\n         }\n         catch (TimeoutException e) {", "fixed": "         try {\n            future1.get(2, TimeUnit.SECONDS);\n         }\n         catch (TimeoutException e) {", "sourceBeforeFix": "future1.get(1,TimeUnit.SECONDS)", "sourceAfterFix": "future1.get(2,TimeUnit.SECONDS)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedTwitterSearchEndpointBuilder\n             extends\n                 AdvancedTwitterSearchEndpointConsumerBuilder, AdvancedTwitterSearchEndpointProducerBuilder {\n         default TwitterSearchEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedTwitterSearchEndpointBuilder\n             extends\n                 AdvancedTwitterSearchEndpointConsumerBuilder, AdvancedTwitterSearchEndpointProducerBuilder {\n         default TwitterSearchEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsCsv(String path, int batchSize, OUT endTuple) {\n \t\tif (this instanceof SingleOutputStreamOperator) {\n \t\t\t((SingleOutputStreamOperator<?, ?>) this).setMutability(false);\n \t\t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsCsv(String path, int batchSize, OUT endTuple) {\n \t\tif (this instanceof SingleOutputStreamOperator) {\n \t\t\t((SingleOutputStreamOperator<?, ?>) this).setMutability(false);\n \t\t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     return additionalReplacements;\n   }\n  private final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     return additionalReplacements;\n   }\n  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e2119d33293008fcc876f5fcd58ede2993eb24d6", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnBean(RedisConnectionFactory.class)\n\t@ConditionalOnEnablednHealthIndicator(\"redis\")\n \tpublic static class RedisHealthIndicatorConfiguration\n \t\t\textends\n \t\t\tCompositeHealthIndicatorConfiguration<RedisHealthIndicator, RedisConnectionFactory> {", "fixed": " \t@Configuration\n \t@ConditionalOnBean(RedisConnectionFactory.class)\n\t@ConditionalOnEnabledHealthIndicator(\"redis\")\n \tpublic static class RedisHealthIndicatorConfiguration\n \t\t\textends\n \t\t\tCompositeHealthIndicatorConfiguration<RedisHealthIndicator, RedisConnectionFactory> {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"mail\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"mail\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "59116c60b91cc0bd2d7a52a3a6ff7cf8674527d7", "projectName": "apache.storm", "bugType": "Change Identifier Used", "problem": " import storm.trident.state.ValueUpdater;\n public class CachedBatchReadsMap<T> implements MapState<T> {\n    Map<List<Object>, Object> _cached = new HashMap();\n    public MapState _delegate;\n    public CachedBatchReadsMap(MapState delegate) {\n         _delegate = delegate;\n     }", "fixed": " import storm.trident.state.ValueUpdater;\n public class CachedBatchReadsMap<T> implements MapState<T> {\n    Map<List<Object>, T> _cached = new HashMap<List<Object>, T>();\n    public MapState<T> _delegate;\n    public CachedBatchReadsMap(MapState<T> delegate) {\n         _delegate = delegate;\n     }", "sourceBeforeFix": "Map<List<Object>,Object>", "sourceAfterFix": "Map<List<Object>,T>"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15857, value = \"Only 1 piece of content is currently supported (AS7-431)\")\n     String as7431();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10857, value = \"Only 1 piece of content is currently supported (AS7-431)\")\n     String as7431();\n     /**", "sourceBeforeFix": "id=15837", "sourceAfterFix": "id=10837"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  private final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "a63faf44e1b103a49d25a15c720fc5940ae9fc07", "projectName": "square.retrofit", "bugType": "Change Identifier Used", "problem": "     assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResultClass = new TypeToken<Maybe<Result<String>>>() {}.getType();\n    assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResultClass = new TypeToken<Flowable<Result<String>>>() {}.getType();\n    assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oResultWildcard = new TypeToken<Observable<Result<? extends String>>>() {}.getType();", "fixed": "     assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResultClass = new TypeToken<Maybe<Result<String>>>() {}.getType();\n    assertThat(factory.get(mResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResultClass = new TypeToken<Flowable<Result<String>>>() {}.getType();\n    assertThat(factory.get(fResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oResultWildcard = new TypeToken<Observable<Result<? extends String>>>() {}.getType();", "sourceBeforeFix": "factory.get(sBodyGeneric,NO_ANNOTATIONS,retrofit)", "sourceAfterFix": "factory.get(fBodyGeneric,NO_ANNOTATIONS,retrofit)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface PgEventEndpointBuilder\n             extends\n                 PgEventEndpointConsumerBuilder, PgEventEndpointProducerBuilder {\n         default AdvancedPgEventEndpointBuilder advanced() {", "fixed": "     \n    public interface PgEventEndpointBuilder\n             extends\n                 PgEventEndpointConsumerBuilder, PgEventEndpointProducerBuilder {\n         default AdvancedPgEventEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15834, value = \"%s recognizes only %s as children: %s\")\n     String unrecognizedChildren(String parent, String children, String parentSpec);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10834, value = \"%s recognizes only %s as children: %s\")\n     String unrecognizedChildren(String parent, String children, String parentSpec);\n     /**", "sourceBeforeFix": "id=15861", "sourceAfterFix": "id=10861"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15843, value = \"Invalid rollout plan. Plan operations affect server groups %s that are not reflected in the rollout plan\")\n     String invalidRolloutPlan(Set<String> groups);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10843, value = \"Invalid rollout plan. Plan operations affect server groups %s that are not reflected in the rollout plan\")\n     String invalidRolloutPlan(Set<String> groups);\n     /**", "sourceBeforeFix": "id=15861", "sourceAfterFix": "id=10861"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15846, value = \"Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.\")\n     String invalidRolloutPlanLess(String name, String propertyName, int value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10846, value = \"Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.\")\n     String invalidRolloutPlanLess(String name, String propertyName, int value);\n     /**", "sourceBeforeFix": "id=15863", "sourceAfterFix": "id=10863"}
{"fixCommitSHA1": "a63faf44e1b103a49d25a15c720fc5940ae9fc07", "projectName": "square.retrofit", "bugType": "Change Identifier Used", "problem": "     assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mBodyWildcard = new TypeToken<Maybe<? extends String>>() {}.getType();\n    assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fBodyWildcard = new TypeToken<Flowable<? extends String>>() {}.getType();\n    assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oBodyGeneric = new TypeToken<Observable<List<String>>>() {}.getType();", "fixed": "     assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mBodyWildcard = new TypeToken<Maybe<? extends String>>() {}.getType();\n    assertThat(factory.get(mBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fBodyWildcard = new TypeToken<Flowable<? extends String>>() {}.getType();\n    assertThat(factory.get(fBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oBodyGeneric = new TypeToken<Observable<List<String>>>() {}.getType();", "sourceBeforeFix": "factory.get(sBodyClass,NO_ANNOTATIONS,retrofit)", "sourceAfterFix": "factory.get(fBodyClass,NO_ANNOTATIONS,retrofit)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<DirectMessage> getSentDirectMessages() throws\n             TwitterException {\n        return DirectMessage.constructDirectMessages(get(getBaseURL() +\n                 \"direct_messages/sent.json\", new PostParameter[0], true));\n     }", "fixed": "      */\n     public ResponseList<DirectMessage> getSentDirectMessages() throws\n             TwitterException {\n        return DirectMessage.createDirectMessageList(get(getBaseURL() +\n                 \"direct_messages/sent.json\", new PostParameter[0], true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_to_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_to_me.json\",null,true))"}
{"fixCommitSHA1": "cac8c34ac61668aa269366408e613ac0ed5db729", "projectName": "junit-team.junit", "bugType": "Change Modifier", "problem": "     }\n     @FixMethodOrder(MethodSorters.DEFAULT)\n    private static class DummySortWithDefault {\n         Object alpha(int i, double d, Thread t) {return null;}\n         void beta(int[][] x) {}\n         int gamma() {return 0;}", "fixed": "     }\n     @FixMethodOrder(MethodSorters.DEFAULT)\n    static class DummySortWithDefault {\n         Object alpha(int i, double d, Thread t) {return null;}\n         void beta(int[][] x) {}\n         int gamma() {return 0;}", "sourceBeforeFix": "10", "sourceAfterFix": "8"}
{"fixCommitSHA1": "e04cbbf23e9273cca31b1cc12142e34fae753542", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "          *  Does class have non-private ctors.\n          *  @return true if class has non-private ctors\n          */\n        boolean isWithNonPrivateCtor() {\n             return withNonPrivateCtor;\n         }", "fixed": "          *  Does class have non-private ctors.\n          *  @return true if class has non-private ctors\n          */\n        private boolean isWithNonPrivateCtor() {\n             return withNonPrivateCtor;\n         }", "sourceBeforeFix": "0", "sourceAfterFix": "2"}
{"fixCommitSHA1": "73627df082ff499af4ca1c482f79e304905007eb", "projectName": "alibaba.canal", "bugType": "Same Function More Args", "problem": "                         if (i > 0) {\n                             buf.append(\", \");\n                         }\n                        buf.append('\"').append(key(i)).append('\"');\n                         buf.append(\": \");\n                        element(i).toJsonString(buf);\n                     }\n                     buf.append(\"}\");\n                     break;", "fixed": "                         if (i > 0) {\n                             buf.append(\", \");\n                         }\n                        buf.append('\"').append(key(i, charsetName)).append('\"');\n                         buf.append(\": \");\n                        element(i, charsetName).toJsonString(buf, charsetName);\n                     }\n                     buf.append(\"}\");\n                     break;", "sourceBeforeFix": "m_data.rewind().forward((int)key_offset).getFixString((int)key_length)", "sourceAfterFix": "m_data.rewind().forward((int)key_offset).getFixString((int)key_length,charsetName)"}
{"fixCommitSHA1": "038ea1803bae1cf3be279b36395b4de4e0ff39b5", "projectName": "openhab.openhab", "bugType": "Change Identifier Used", "problem": " \t@Override\n \tpublic void internalReceiveCommand(String itemName, Command command) {\n \t\tsuper.internalReceiveCommand(itemName, command);\n\t\tlogger.debug(\"MyQ binding received command '{}' for item '{}'\",\n \t\t\t\tcommand, itemName);\n \t\tif (myqOnlineData != null) {\n \t\t\tcomputeCommandForItem(command, itemName);", "fixed": " \t@Override\n \tpublic void internalReceiveCommand(String itemName, Command command) {\n \t\tsuper.internalReceiveCommand(itemName, command);\n\t\tlogger.trace(\"MyQ binding received command '{}' for item '{}'\",\n \t\t\t\tcommand, itemName);\n \t\tif (myqOnlineData != null) {\n \t\t\tcomputeCommandForItem(command, itemName);", "sourceBeforeFix": "logger.debug(\"rapidRefreshFutureEnd stopping\")", "sourceAfterFix": "logger.trace(\"rapidRefreshFutureEnd stopping\")"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface ZooKeeperEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedZooKeeperEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface ZooKeeperEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedZooKeeperEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "bbb28b514aadd4fc649dd0b7a47c6ece4d629fa7", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "                                        if (body.endsWith(\"6\")) {\n                                             log.info(\"5th message received.  Rolling back.\");\n                                             exchange.getOut().setFault(true);\n                                             exchange.getOut().setBody(\"5th message received.  Rolling back.\");", "fixed": "                                        if (body.endsWith(\"6\") || body.endsWith(\"10\")) {\n                                             log.info(\"5th message received.  Rolling back.\");\n                                             exchange.getOut().setFault(true);\n                                             exchange.getOut().setBody(\"5th message received.  Rolling back.\");", "sourceBeforeFix": "getMockEndpoint(\"mock:test.after.1\").expectedMinimumMessageCount(10)", "sourceAfterFix": "getMockEndpoint(\"mock:test.after.1\").expectedMessageCount(10)"}
{"fixCommitSHA1": "5d3b99b2ee5639dc5baaf6d49f76d70c9f3901a2", "projectName": "antlr.antlr4", "bugType": "Same Function More Args", "problem": " \tprotected void enterTerminal(GrammarAST tree) {\n \t\tString text = tree.getText();\n \t\tif (text.equals(\"''\")) {\n\t\t\tg.tool.errMgr.grammarError(ErrorType.EMPTY_STRINGS_AND_SETS_NOT_ALLOWED, g.fileName, tree.token);\n \t\t}\n \t}", "fixed": " \tprotected void enterTerminal(GrammarAST tree) {\n \t\tString text = tree.getText();\n \t\tif (text.equals(\"''\")) {\n\t\t\tg.tool.errMgr.grammarError(ErrorType.EMPTY_STRINGS_AND_SETS_NOT_ALLOWED, g.fileName, tree.token, \"''\");\n \t\t}\n \t}", "sourceBeforeFix": "g.tool.errMgr.grammarError(ErrorType.EMPTY_STRINGS_AND_SETS_NOT_ALLOWED,g.fileName,tree.token)", "sourceAfterFix": "g.tool.errMgr.grammarError(ErrorType.EMPTY_STRINGS_AND_SETS_NOT_ALLOWED,g.fileName,tree.token,\"''\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "b081c601989d65c3c26727bc6d31268815516a21", "projectName": "spring-projects.spring-security-oauth", "bugType": "Change Identifier Used", "problem": " \t\t\t\tscope = Collections.singleton(String.class.cast(scopeObj));\n \t\t\t} else if (Collection.class.<String>isAssignableFrom(scopeObj.getClass())) {\n \t\t\t\tCollection scopeColl = Collection.class.<String>cast(scopeObj);\n\t\t\t\tscope = new HashSet<String>(scopeColl);\n \t\t\t}\n \t\t}\n \t\treturn scope;", "fixed": " \t\t\t\tscope = Collections.singleton(String.class.cast(scopeObj));\n \t\t\t} else if (Collection.class.<String>isAssignableFrom(scopeObj.getClass())) {\n \t\t\t\tCollection scopeColl = Collection.class.<String>cast(scopeObj);\nscope = new LinkedHashSet<String>(scopeColl);\n \t\t\t}\n \t\t}\n \t\treturn scope;", "sourceBeforeFix": "HashSet<String>", "sourceAfterFix": "LinkedHashSet<String>"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "2", "sourceAfterFix": "0"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkAccessControls =\n       new HotSwapPassFactory(\"checkAccessControls\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "d039be568920d4aa4ef836f6b323faec909f965a", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": " import org.jboss.vfs.VirtualFile;\n /**\n  * Date: 05.11.2011\n  *\n  * @author <a href=\"mailto:jperkins@redhat.com\">James R. Perkins</a>", "fixed": " import org.jboss.vfs.VirtualFile;\n /**\n * This module is using message IDs in the range 11000-11099 and 16700-16799.\n * <p/>\n * This file is using the subset 11025-11099 and 16700-16799 for non-logger messages.\n * <p/>\n* See <a href=\"http:\n * list of currently reserved JBAS message id blocks.\n * <p/>\n  * Date: 05.11.2011\n  *\n  * @author <a href=\"mailto:jperkins@redhat.com\">James R. Perkins</a>", "sourceBeforeFix": "id=11100", "sourceAfterFix": "id=16700"}
{"fixCommitSHA1": "8abfa48f2eb5edaf3f5a2cc2350e4e3c232f4152", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "      * @param moduleClassLoader class loader used to load Checkstyle\n      *          core and custom modules\n      */\n    public PackageObjectFactory(Set<String> packageNames,\n             ClassLoader moduleClassLoader) {\n         if (moduleClassLoader == null) {\n             throw new IllegalArgumentException(", "fixed": "      * @param moduleClassLoader class loader used to load Checkstyle\n      *          core and custom modules\n      */\n    PackageObjectFactory(Set<String> packageNames,\n             ClassLoader moduleClassLoader) {\n         if (moduleClassLoader == null) {\n             throw new IllegalArgumentException(", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n            statistics.addRemoveTimeNano(System.nanoTime() - start);\n         }\n         return result;\n     }", "fixed": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCacheRemovals(1);\n            statistics.addRemoveTimeNanos(System.nanoTime() - start);\n         }\n         return result;\n     }", "sourceBeforeFix": "statistics.addRemoveTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addRemoveTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasKeywords =\n       new PassFactory(\"aliasKeywords\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "bdd386e699e23c48524b822b9b890b077f294c69", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   }\n  private SuggestionPair getClosestPropertySuggestion(\n       JSType objectType, String propName) {\n     return null;\n   }", "fixed": "     }\n   }\n  private static SuggestionPair getClosestPropertySuggestion(\n       JSType objectType, String propName) {\n     return null;\n   }", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     return additionalReplacements;\n   }\n  private final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     return additionalReplacements;\n   }\n  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedExecEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default ExecEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedExecEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default ExecEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "92b9986bd0c48759694a83cac77858f293801a11", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "             for (Map.Entry<Object, Object> entry : map.entrySet()) {\n                 Object key = entry.getKey();\n                 String jsonKey = TypeUtils.castToString(key);\n                Object jsonValue = toJSON(entry.getValue());\n                 json.put(jsonKey, jsonValue);\n             }", "fixed": "             for (Map.Entry<Object, Object> entry : map.entrySet()) {\n                 Object key = entry.getKey();\n                 String jsonKey = TypeUtils.castToString(key);\n                Object jsonValue = toJSON(entry.getValue(), config);\n                 json.put(jsonKey, jsonValue);\n             }", "sourceBeforeFix": "toJSON(entry.getValue())", "sourceAfterFix": "toJSON(entry.getValue(),config)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface JsonValidatorEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedJsonValidatorEndpointBuilder advanced() {", "fixed": "     \n    public interface JsonValidatorEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedJsonValidatorEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "a4662237bc467310f0dc1c28aa621f84571225b1", "projectName": "Activiti.Activiti", "bugType": "Change Numeric Literal", "problem": "     processEngineConfiguration.setClock(testClock);\n    testClock.setCurrentTime(new Date(0));\n     runtimeService.startProcessInstanceByKey(\"testTimerCancelledEvent\");\n     listener.clearEventsReceived();", "fixed": "     processEngineConfiguration.setClock(testClock);\n    testClock.setCurrentTime(new Date(1));\n     runtimeService.startProcessInstanceByKey(\"testTimerCancelledEvent\");\n     listener.clearEventsReceived();", "sourceBeforeFix": "new Date(0)", "sourceAfterFix": "new Date(1)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedUndertowEndpointBuilder\n             extends\n                 AdvancedUndertowEndpointConsumerBuilder, AdvancedUndertowEndpointProducerBuilder {\n         default UndertowEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedUndertowEndpointBuilder\n             extends\n                 AdvancedUndertowEndpointConsumerBuilder, AdvancedUndertowEndpointProducerBuilder {\n         default UndertowEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "ccbc0a97414992cb1b7d84a2283d2aaa7278f3a5", "projectName": "Atmosphere.atmosphere", "bugType": "Change Numeric Literal", "problem": "     @Override\n     protected void onSocketClosed(WebSocket socket) throws IOException {\n         logger.trace(\"WebSocket.onSocketClosed.\");\n        webSocketProcessor.close(webSocket, 0);\n     }\n     @Override", "fixed": "     @Override\n     protected void onSocketClosed(WebSocket socket) throws IOException {\n         logger.trace(\"WebSocket.onSocketClosed.\");\n        webSocketProcessor.close(webSocket, 1000);\n     }\n     @Override", "sourceBeforeFix": "webSocketProcessor.close(webSocket,0)", "sourceAfterFix": "webSocketProcessor.close(webSocket,1000)"}
{"fixCommitSHA1": "fae9ab4140b56123177d498845b738b3bb53808d", "projectName": "spring-projects.spring-boot", "bugType": "Change Numeric Literal", "problem": " \t\tthis.context.refresh();\n \t\tassertNotNull(this.context.getBean(AuthenticationManagerBuilder.class));\n\t\tassertEquals(9, this.context.getBean(FilterChainProxy.class).getFilterChains()\n \t\t\t\t.size());\n \t}", "fixed": " \t\tthis.context.refresh();\n \t\tassertNotNull(this.context.getBean(AuthenticationManagerBuilder.class));\n\t\tassertEquals(8, this.context.getBean(FilterChainProxy.class).getFilterChains()\n \t\t\t\t.size());\n \t}", "sourceBeforeFix": "assertEquals(9,this.context.getBean(FilterChainProxy.class).getFilterChains().size())", "sourceAfterFix": "assertEquals(8,this.context.getBean(FilterChainProxy.class).getFilterChains().size())"}
{"fixCommitSHA1": "1e5fc1daab8364f1d16614e9013135a115e66e2c", "projectName": "google.guice", "bugType": "Change Identifier Used", "problem": "       fail();\n     } catch (Exception e) {\n      for (Throwable t = e; t != null; t = e.getCause()) {\n         StackTraceElement[] stackTraceElement = t.getStackTrace();\n         assertEquals(\"explode\", stackTraceElement[0].getMethodName());\n         assertEquals(\"invoke\", stackTraceElement[1].getMethodName());", "fixed": "       fail();\n     } catch (Exception e) {\n      for (Throwable t = e; t != null; t = t.getCause()) {\n         StackTraceElement[] stackTraceElement = t.getStackTrace();\n         assertEquals(\"explode\", stackTraceElement[0].getMethodName());\n         assertEquals(\"invoke\", stackTraceElement[1].getMethodName());", "sourceBeforeFix": "e.getCause()", "sourceAfterFix": "t.getCause()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": " };\n   \n  private final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler", "fixed": " };\n   \n  final HotSwapPassFactory checkTypes =\n       new HotSwapPassFactory(\"checkTypes\", false) {\n     @Override\n     protected HotSwapCompilerPass createInternal(final AbstractCompiler", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  private final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": " import org.jboss.logging.Messages;\n /**\n * This module is using message IDs in the range 10900-10999. This file is using the subset 10975-10999 for domain\n* controller non-logger messages. See http:\n  * JBAS message id blocks.\n  * <p/>", "fixed": " import org.jboss.logging.Messages;\n /**\n * This module is using message IDs in the range 10800-10899. This file is using the subset 10830-10899 for domain\n* controller non-logger messages. See http:\n  * JBAS message id blocks.\n  * <p/>", "sourceBeforeFix": "id=15858", "sourceAfterFix": "id=10858"}
{"fixCommitSHA1": "f877cc6742ba3c75739edd9debae662d834d191d", "projectName": "mybatis.mybatis-3", "bugType": "Change Identifier Used", "problem": "     SqlSession sqlSession = sqlSessionFactory.openSession();\n     try {\n       Mapper mapper = sqlSession.getMapper(Mapper.class);\n      List<Map<Integer, Object>> map = mapper.getAListOfMaps();\n       Assert.assertEquals(1, map.get(0).get(\"ID\"));\n     } finally {\n       sqlSession.close();", "fixed": "     SqlSession sqlSession = sqlSessionFactory.openSession();\n     try {\n       Mapper mapper = sqlSession.getMapper(Mapper.class);\n      List<Map<String, Object>> map = mapper.getAListOfMaps();\n       Assert.assertEquals(1, map.get(0).get(\"ID\"));\n     } finally {\n       sqlSession.close();", "sourceBeforeFix": "Map<Integer,Object>", "sourceAfterFix": "Map<String,Object>"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "fixed": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4fv(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4fv(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "sourceBeforeFix": "GL20.glGetShader(shader,pname,params)", "sourceAfterFix": "GL20.glGetShaderiv(shader,pname,params)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  private final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "94f9754acb5cc92a32bf36d2a789325fed384325", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": " import com.puppycrawl.tools.checkstyle.grammars.javadoc.JavadocParser.TrTagOpenContext;\npublic final class ParseTreeBuilder {\n     private static final String LINE_SEPARATOR = System.getProperty(\"line.separator\");\n     private ParseTreeBuilder() {", "fixed": " import com.puppycrawl.tools.checkstyle.grammars.javadoc.JavadocParser.TrTagOpenContext;\nfinal class ParseTreeBuilder {\n     private static final String LINE_SEPARATOR = System.getProperty(\"line.separator\");\n     private ParseTreeBuilder() {", "sourceBeforeFix": "17", "sourceAfterFix": "16"}
{"fixCommitSHA1": "97f40446edd5f66145bde79c4a7c0de6a88716e9", "projectName": "square.javapoet", "bugType": "Change Modifier", "problem": "     this(out, \"  \");\n   }\n  public CodeWriter(Appendable out, String indent) {\n     this(out, indent, Collections.<String, ClassName>emptyMap());\n   }\n  public CodeWriter(Appendable out, String indent, Map<String, ClassName> importedTypes) {\n     this.out = checkNotNull(out, \"out == null\");\n     this.indent = checkNotNull(indent, \"indent == null\");\n     this.importedTypes = checkNotNull(importedTypes, \"importedTypes == null\");", "fixed": "     this(out, \"  \");\n   }\n  CodeWriter(Appendable out, String indent) {\n     this(out, indent, Collections.<String, ClassName>emptyMap());\n   }\n  CodeWriter(Appendable out, String indent, Map<String, ClassName> importedTypes) {\n     this.out = checkNotNull(out, \"out == null\");\n     this.indent = checkNotNull(indent, \"indent == null\");\n     this.importedTypes = checkNotNull(importedTypes, \"importedTypes == null\");", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "7504963a65930f0b3332774f8a6d0db70c94fa12", "projectName": "Alluxio.alluxio", "bugType": "Change Modifier", "problem": "     CLIENT.user_deleteById(fileId);\n   }\n  public ClientFileInfo user_getClientFileInfoByPath(String path)\n       throws FileDoesNotExistException, InvalidPathException, TException {\n     return CLIENT.user_getClientFileInfoByPath(path);\n   }\n  public ClientFileInfo user_getClientFileInfoById(int id)\n       throws FileDoesNotExistException, TException {\n     return CLIENT.user_getClientFileInfoById(id);\n   }", "fixed": "     CLIENT.user_deleteById(fileId);\n   }\n  public synchronized ClientFileInfo user_getClientFileInfoByPath(String path)\n       throws FileDoesNotExistException, InvalidPathException, TException {\n     return CLIENT.user_getClientFileInfoByPath(path);\n   }\n  public synchronized ClientFileInfo user_getClientFileInfoById(int id)\n       throws FileDoesNotExistException, TException {\n     return CLIENT.user_getClientFileInfoById(id);\n   }", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "af233c9c353322adf1fa91d5e6ca706b9d9d98b7", "projectName": "dropwizard.dropwizard", "bugType": "Change Identifier Used", "problem": "         final PrintWriter output = mock(PrintWriter.class);\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getServletPath()).thenReturn(\"/tasks/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.of(\"runs\")));\n         when(request.getParameterValues(\"runs\")).thenReturn(new String[]{\"1\"});\n         when(response.getWriter()).thenReturn(output);", "fixed": "         final PrintWriter output = mock(PrintWriter.class);\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getPathInfo()).thenReturn(\"/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.of(\"runs\")));\n         when(request.getParameterValues(\"runs\")).thenReturn(new String[]{\"1\"});\n         when(response.getWriter()).thenReturn(output);", "sourceBeforeFix": "request.getServletPath()", "sourceAfterFix": "request.getPathInfo()"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform1fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform1(location, v);\r\n \t}\r\n \tpublic void glUniform1fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform1(location, toFloatBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform1i (int location, int x) {\r", "fixed": " \t}\r\n \tpublic void glUniform1fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform1fv(location, v);\r\n \t}\r\n \tpublic void glUniform1fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform1fv(location, toFloatBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform1i (int location, int x) {\r", "sourceBeforeFix": "EXTFramebufferObject.glGetRenderbufferParameterEXT(target,pname,params)", "sourceAfterFix": "EXTFramebufferObject.glGetRenderbufferParameterivEXT(target,pname,params)"}
{"fixCommitSHA1": "bd97504fb632151d8e6abc1f9f860232bc1d78fa", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "         };\n         for (ModelNode update : updates) {\n             count.incrementAndGet();\n            controller.execute(ExecutionContextBuilder.Factory.create(update).build(), resultHandler);\n         }\n         if (count.decrementAndGet() == 0) {", "fixed": "         };\n         for (ModelNode update : updates) {\n             count.incrementAndGet();\n            domainModel.execute(ExecutionContextBuilder.Factory.create(update).build(), resultHandler);\n         }\n         if (count.decrementAndGet() == 0) {", "sourceBeforeFix": "controller.execute(ExecutionContextBuilder.Factory.create(update).build(),resultHandler)", "sourceAfterFix": "domainModel.execute(ExecutionContextBuilder.Factory.create(update).build(),resultHandler)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "1a9bb447fd14415ef270f3dd7af8a0d4e0017177", "projectName": "Atmosphere.atmosphere", "bugType": "Change Identifier Used", "problem": "     @Override\n     public final AtmosphereResource create(AtmosphereConfig config,\n                                            Broadcaster broadcaster,\n                                           DefaultAtmosphereRequest request,\n                                            AtmosphereResponse response,\n                                            AsyncSupport<?> a,\n                                            AtmosphereHandler handler) {", "fixed": "     @Override\n     public final AtmosphereResource create(AtmosphereConfig config,\n                                            Broadcaster broadcaster,\n                                           AtmosphereRequest request,\n                                            AtmosphereResponse response,\n                                            AsyncSupport<?> a,\n                                            AtmosphereHandler handler) {", "sourceBeforeFix": "DefaultAtmosphereRequest request", "sourceAfterFix": "AtmosphereRequest request"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface TwitterDirectMessageEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedTwitterDirectMessageEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface TwitterDirectMessageEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedTwitterDirectMessageEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<Status> getHomeTimeline() throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/home_timeline.json\", true));\n     }", "fixed": "      */\n     public ResponseList<Status> getHomeTimeline() throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/home_timeline.json\", true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline.json\",true))"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15857, value = \"Only 1 piece of content is currently supported (AS7-431)\")\n     String as7431();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10857, value = \"Only 1 piece of content is currently supported (AS7-431)\")\n     String as7431();\n     /**", "sourceBeforeFix": "id=15855", "sourceAfterFix": "id=10855"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleActionsPredicatesOptions_1() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(239);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");", "fixed": " \tpublic void testMultipleActionsPredicatesOptions_1() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(238);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s @after {print($ctx.toStringTree(recog=self))} : e ;\\n\");\n \t\tgrammarBuilder.append(\"e : a=e op=('*'|'/') b=e  {}{True}?\\n\");", "sourceBeforeFix": "new StringBuilder(239)", "sourceAfterFix": "new StringBuilder(238)"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should set uuid on implementation id global property\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)\n\tpublic void setImplementationId(ImplementationId implementationId) throws APIException;\n \t/**\n \t * Gets the list of locales which the administrator has allowed for use on the system. This is", "fixed": " \t * @should set uuid on implementation id global property\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)\n\tpublic void setImplementationId(ImplementationId implementationId);\n \t/**\n \t * Gets the list of locales which the administrator has allowed for use on the system. This is", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform3fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform3(location, v);\r\n \t}\r\n \tpublic void glUniform3fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform3(location, toFloatBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform3i (int location, int x, int y, int z) {\r", "fixed": " \t}\r\n \tpublic void glUniform3fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform3fv(location, v);\r\n \t}\r\n \tpublic void glUniform3fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform3fv(location, toFloatBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform3i (int location, int x, int y, int z) {\r", "sourceBeforeFix": "EXTFramebufferObject.glGetRenderbufferParameterEXT(target,pname,params)", "sourceAfterFix": "EXTFramebufferObject.glGetRenderbufferParameterivEXT(target,pname,params)"}
{"fixCommitSHA1": "8f9f46314222a36807eebee0fcacbab3d61b06d7", "projectName": "brianfrankcooper.YCSB", "bugType": "Change Identifier Used", "problem": "  */\n public class HBaseClient extends com.yahoo.ycsb.DB\n {\n    private static final Configuration config = HBaseConfiguration.create();\n     public boolean _debug=false;", "fixed": "  */\n public class HBaseClient extends com.yahoo.ycsb.DB\n {\n    private static final HBaseConfiguration config = new HBaseConfiguration();\n     public boolean _debug=false;", "sourceBeforeFix": "private static final Configuration config=HBaseConfiguration.create(); ", "sourceAfterFix": "private static final HBaseConfiguration config=new HBaseConfiguration(); "}
{"fixCommitSHA1": "2b6d45508192c28f6b957a1ec18eb4fc075f9a97", "projectName": "Alluxio.alluxio", "bugType": "Same Function Swap Args", "problem": "     InetSocketAddress workerAddress = BlockWorkerUtils.getWorkerAddress(mCustomPropsTachyonConf);\n     Assert.assertNotNull(workerAddress);\n    Assert.assertEquals(workerAddress, new InetSocketAddress(defaultHostname, 10001));\n     workerAddress = BlockWorkerUtils.getWorkerAddress(mNullTachyonConf);\n     Assert.assertNotNull(workerAddress);\n    Assert.assertEquals(workerAddress, new InetSocketAddress(defaultHostname, defaultPort));\n   }\n }", "fixed": "     InetSocketAddress workerAddress = BlockWorkerUtils.getWorkerAddress(mCustomPropsTachyonConf);\n     Assert.assertNotNull(workerAddress);\n    Assert.assertEquals(new InetSocketAddress(defaultHostname, 10001), workerAddress);\n     workerAddress = BlockWorkerUtils.getWorkerAddress(mNullTachyonConf);\n     Assert.assertNotNull(workerAddress);\n    Assert.assertEquals(new InetSocketAddress(defaultHostname, defaultPort), workerAddress);\n   }\n }", "sourceBeforeFix": "Assert.assertEquals(workerAddress,new InetSocketAddress(defaultHostname,10001))", "sourceAfterFix": "Assert.assertEquals(new InetSocketAddress(defaultHostname,10001),workerAddress)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedFtpsEndpointBuilder\n             extends\n                 AdvancedFtpsEndpointConsumerBuilder, AdvancedFtpsEndpointProducerBuilder {\n         default FtpsEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedFtpsEndpointBuilder\n             extends\n                 AdvancedFtpsEndpointConsumerBuilder, AdvancedFtpsEndpointProducerBuilder {\n         default FtpsEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "6e0e38f09f74fb633a33cfd5c59265518bcf85be", "projectName": "netty.netty", "bugType": "Wrong Function Name", "problem": "         HttpResponse res = (HttpResponse) ch.readInbound();\n         DecoderResult dr = res.getDecoderResult();\n         assertFalse(dr.isSuccess());\n        assertFalse(dr.isFailure());\n         ensureInboundTrafficDiscarded(ch);\n     }", "fixed": "         HttpResponse res = (HttpResponse) ch.readInbound();\n         DecoderResult dr = res.getDecoderResult();\n         assertFalse(dr.isSuccess());\n        assertTrue(dr.isFailure());\n         ensureInboundTrafficDiscarded(ch);\n     }", "sourceBeforeFix": "assertFalse(dr.isFailure())", "sourceAfterFix": "assertTrue(dr.isFailure())"}
{"fixCommitSHA1": "d4a1a1cdac176e1f13c04cbbee22b690c8c7b5fe", "projectName": "wildfly.wildfly", "bugType": "Change Operand ", "problem": "                 final String ref = include.asString();\n                 if (processed.add(ref)) {\n                     final ModelNode includedGroup = groups.get(ref);\n                    if (group == null) {\n                         throw MESSAGES.undefinedSocketBindingGroup(ref);\n                     }\n                     mergeBindingGroups(updates, groups, groupName, includedGroup, processed);", "fixed": "                 final String ref = include.asString();\n                 if (processed.add(ref)) {\n                     final ModelNode includedGroup = groups.get(ref);\n                    if (includedGroup == null) {\n                         throw MESSAGES.undefinedSocketBindingGroup(ref);\n                     }\n                     mergeBindingGroups(updates, groups, groupName, includedGroup, processed);", "sourceBeforeFix": "group == null", "sourceAfterFix": "includedGroup == null"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "fixed": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2fv(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2fv(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "sourceBeforeFix": "GL11.glTexParameter(target,pname,params)", "sourceAfterFix": "GL11.glTexParameterfv(target,pname,params)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15845, value = \"Invalid rollout plan. Server group %s has a %s value of %s; must be between 0 and 100.\")\n     String invalidRolloutPlanRange(String name, String propertyName, int value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10845, value = \"Invalid rollout plan. Server group %s has a %s value of %s; must be between 0 and 100.\")\n     String invalidRolloutPlanRange(String name, String propertyName, int value);\n     /**", "sourceBeforeFix": "id=15844", "sourceAfterFix": "id=10844"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15848, value = \"Exception getting result from host %s: %s\")\n     String exceptionAwaitingResultFromHost(String name, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10848, value = \"Exception getting result from host %s: %s\")\n     String exceptionAwaitingResultFromHost(String name, String message);\n     /**", "sourceBeforeFix": "id=15866", "sourceAfterFix": "id=10866"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "fixed": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "sourceBeforeFix": "GL20.glUniformMatrix3(location,transpose,toFloatBuffer(value,offset,count * 9))", "sourceAfterFix": "GL20.glUniformMatrix3fv(location,transpose,toFloatBuffer(value,offset,count * 9))"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * @param from The element to copy.\n \t * @return A copy of the given element.\n \t */\n\tpublic T createCopy(T from);\n \t/**\n \t * Creates a copy from the given element, storing the copied result in the given target element.", "fixed": " \t * @param from The element to copy.\n \t * @return A copy of the given element.\n \t */\n\tpublic abstract T createCopy(T from);\n \t/**\n \t * Creates a copy from the given element, storing the copied result in the given target element.", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15847, value = \"Interrupted waiting for result from host %s\")\n     String interruptedAwaitingResultFromHost(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10847, value = \"Interrupted waiting for result from host %s\")\n     String interruptedAwaitingResultFromHost(String name);\n     /**", "sourceBeforeFix": "id=15836", "sourceAfterFix": "id=10836"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleMethodMotion =\n       new PassFactory(\"crossModuleMethodMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15869, value = \"Unknown %s %s\")\n     String unknown(String name, String value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10869, value = \"Unknown %s %s\")\n     String unknown(String name, String value);\n     /**", "sourceBeforeFix": "id=15863", "sourceAfterFix": "id=10863"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15868, value = \"Deployment %s is already started\")\n     String deploymentAlreadyStarted(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10868, value = \"Deployment %s is already started\")\n     String deploymentAlreadyStarted(String name);\n     /**", "sourceBeforeFix": "id=15841", "sourceAfterFix": "id=10841"}
{"fixCommitSHA1": "14eade7f6e21e560a08de348504584cba5e94c94", "projectName": "wildfly.wildfly", "bugType": "Wrong Function Name", "problem": "     public static Archive<?> deployment() {\n         WebArchive war = ShrinkWrap.create(WebArchive.class, \"distributable.war\");\n         war.addClass(SimpleServlet.class);\n        war.addAsWebInfResource(SimpleWebTestCase.class.getPackage(), \"web.xml\");\n         System.out.println(war.toString(true));\n         return war;\n     }", "fixed": "     public static Archive<?> deployment() {\n         WebArchive war = ShrinkWrap.create(WebArchive.class, \"distributable.war\");\n         war.addClass(SimpleServlet.class);\n        war.setWebXML(SimpleWebTestCase.class.getPackage(), \"web.xml\");\n         System.out.println(war.toString(true));\n         return war;\n     }", "sourceBeforeFix": "war.addAsWebInfResource(SimpleWebTestCase.class.getPackage(),\"web.xml\")", "sourceAfterFix": "war.setWebXML(SimpleWebTestCase.class.getPackage(),\"web.xml\")"}
{"fixCommitSHA1": "46fa8090954480eecdeb6e7367f0e30655853f42", "projectName": "checkstyle.checkstyle", "bugType": "Same Function More Args", "problem": "         if (levels.cardinality() == 1) {\n             return String.valueOf(levels.nextSetBit(0));\n         }\n        final StringBuilder sb = new StringBuilder();\n         for (int i = levels.nextSetBit(0); i >= 0;\n             i = levels.nextSetBit(i + 1)) {\n             if (sb.length() > 0) {", "fixed": "         if (levels.cardinality() == 1) {\n             return String.valueOf(levels.nextSetBit(0));\n         }\n        final StringBuilder sb = new StringBuilder(50);\n         for (int i = levels.nextSetBit(0); i >= 0;\n             i = levels.nextSetBit(i + 1)) {\n             if (sb.length() > 0) {", "sourceBeforeFix": "new StringBuilder()", "sourceAfterFix": "new StringBuilder(50)"}
{"fixCommitSHA1": "0ee5eebaefe8c07c0c10f8595e241aa49ed12cc5", "projectName": "openmrs.openmrs-core", "bugType": "Less Specific If", "problem": " \t\tTS dateOfBirth = pid.getDateTimeOfBirth();\r\n\t    if (dateOfBirth == null)\t\r\n \t\t\tthrow new HL7Exception(\"Missing birth date in the PID segment\");\r\n \t\tpatient.setBirthdate(tsToDate(dateOfBirth));\r", "fixed": " \t\tTS dateOfBirth = pid.getDateTimeOfBirth();\r\n\t    if (dateOfBirth == null || dateOfBirth.getTime() == null || dateOfBirth.getTime().getValue() == null)\t\r\n \t\t\tthrow new HL7Exception(\"Missing birth date in the PID segment\");\r\n \t\tpatient.setBirthdate(tsToDate(dateOfBirth));\r", "sourceBeforeFix": "dateOfBirth == null", "sourceAfterFix": "dateOfBirth == null || dateOfBirth.getTime() == null || dateOfBirth.getTime().getValue() == null"}
{"fixCommitSHA1": "486b290863a66641b0ec30dbf2d9e349733cae44", "projectName": "apache.hbase", "bugType": "Wrong Function Name", "problem": "    */\n   public void split(final String tableNameOrRegionName)\n   throws IOException, InterruptedException {\n    split(Bytes.toBytesBinary(tableNameOrRegionName));\n   }\n   /**", "fixed": "    */\n   public void split(final String tableNameOrRegionName)\n   throws IOException, InterruptedException {\n    split(Bytes.toBytes(tableNameOrRegionName));\n   }\n   /**", "sourceBeforeFix": "Bytes.toBytesBinary(tableNameOrRegionName)", "sourceAfterFix": "Bytes.toBytes(tableNameOrRegionName)"}
{"fixCommitSHA1": "83b9dd427535bce39be43a9e8224cdbc352d7427", "projectName": "square.okhttp", "bugType": "Change Modifier", "problem": "     private final Request request;\n     private final Response response;\n    public CacheHttpURLConnection(Response response) {\n       super(response.request().url().url());\n       this.request = response.request();\n       this.response = response;", "fixed": "     private final Request request;\n     private final Response response;\n    CacheHttpURLConnection(Response response) {\n       super(response.request().url().url());\n       this.request = response.request();\n       this.response = response;", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedIgniteSetEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default IgniteSetEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedIgniteSetEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default IgniteSetEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "6b415679e1fd7d46122b8a4ddadd4fa422c635ca", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": "if (i < start + 2 || i > start + 9) break;\n \t\t\t\t\tColor color = colorPool.obtain();\n \t\t\t\t\tcolorStack.add(color);\n\t\t\t\t\tColor.rgb888ToColor(color, colorInt);\nif (i <= start + 7) color.a = 1f;\n \t\t\t\t\treturn i - start;\n \t\t\t\t}", "fixed": "if (i < start + 2 || i > start + 9) break;\n \t\t\t\t\tColor color = colorPool.obtain();\n \t\t\t\t\tcolorStack.add(color);\n\t\t\t\t\tColor.rgba8888ToColor(color, colorInt);\nif (i <= start + 7) color.a = 1f;\n \t\t\t\t\treturn i - start;\n \t\t\t\t}", "sourceBeforeFix": "Color.rgb888ToColor(color,colorInt)", "sourceAfterFix": "Color.rgba8888ToColor(color,colorInt)"}
{"fixCommitSHA1": "409f0c6a5ca0bfd80b3d7bb1750a870291a3a6f2", "projectName": "jersey.jersey", "bugType": "Change Numeric Literal", "problem": "         @GET\n         @Path(\"redirect\")\n         public Response redirect() {\n            return Response.status(302).location(UriBuilder.fromResource(RedirectResource.class).build()).build();\n         }\n     }", "fixed": "         @GET\n         @Path(\"redirect\")\n         public Response redirect() {\n            return Response.seeOther(UriBuilder.fromResource(RedirectResource.class).build()).build();\n         }\n     }", "sourceBeforeFix": "assertEquals(302,t.request().get().getStatus())", "sourceAfterFix": "assertEquals(303,t.request().get().getStatus())"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15867, value = \"Cannot use %s with the same value for parameters %s and %s. \" +\n             \"Use %s to redeploy the same content or %s to replace content with a new version with the same name.\")\n     String cannotUseSameValueForParameters(String opName, String param1, String param2, String redeployOpName, String replaceOpName);", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10867, value = \"Cannot use %s with the same value for parameters %s and %s. \" +\n             \"Use %s to redeploy the same content or %s to replace content with a new version with the same name.\")\n     String cannotUseSameValueForParameters(String opName, String param1, String param2, String redeployOpName, String replaceOpName);", "sourceBeforeFix": "id=15863", "sourceAfterFix": "id=10863"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fcc6ad1ae89a377ff91d93c61d3cdc4932fdacb9", "projectName": "Atmosphere.atmosphere", "bugType": "Wrong Function Name", "problem": "             logger.debug(\"The WebSocket handshake succeeded but the dispatched URI failed {}:{}. \" +\n                     \"The WebSocket connection is still open and client can continue sending messages.\", message, errorCode);\n         } else {\n            logger.warn(\"{} {}\", errorCode, message);\n         }\n     }", "fixed": "             logger.debug(\"The WebSocket handshake succeeded but the dispatched URI failed {}:{}. \" +\n                     \"The WebSocket connection is still open and client can continue sending messages.\", message, errorCode);\n         } else {\n            logger.debug(\"{} {}\", errorCode, message);\n         }\n     }", "sourceBeforeFix": "logger.warn(\"{} {}\",errorCode,message)", "sourceAfterFix": "logger.debug(\"{} {}\",errorCode,message)"}
{"fixCommitSHA1": "d4468b05034b3c4166195394e88eed6633bec842", "projectName": "jersey.jersey", "bugType": "Change Identifier Used", "problem": "                         warnings.append(LocalizationMessages.WARNING_MSG(error.getMessage())).append('\\n');\n                         break;\n                     case HINT:\n                        warnings.append(LocalizationMessages.HINT_MSG(error.getMessage())).append('\\n');\n                         break;\n                 }\n             }", "fixed": "                         warnings.append(LocalizationMessages.WARNING_MSG(error.getMessage())).append('\\n');\n                         break;\n                     case HINT:\n                        hints.append(LocalizationMessages.HINT_MSG(error.getMessage())).append('\\n');\n                         break;\n                 }\n             }", "sourceBeforeFix": "warnings.append(LocalizationMessages.HINT_MSG(error.getMessage()))", "sourceAfterFix": "hints.append(LocalizationMessages.HINT_MSG(error.getMessage()))"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedStAXEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default StAXEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedStAXEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default StAXEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "fixed": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "sourceBeforeFix": "GL15.glGetBufferParameter(target,pname,params)", "sourceAfterFix": "GL15.glGetBufferParameteriv(target,pname,params)"}
{"fixCommitSHA1": "ead7c5c75fd253dbeccc62673d180cc620b689c0", "projectName": "neo4j.neo4j", "bugType": "Change Identifier Used", "problem": "         } );\n         DoubleLatch latch = latchFetcher.fetch();\n        latch.countDownFirst();\n         try\n         {\n             executeJob( new CommonJobs.SetNodePropertyWithThrowJob( otherNodeId.longValue(),", "fixed": "         } );\n         DoubleLatch latch = latchFetcher.fetch();\nlatch.awaitFirst();\n         try\n         {\n             executeJob( new CommonJobs.SetNodePropertyWithThrowJob( otherNodeId.longValue(),", "sourceBeforeFix": "latch.countDownFirst()", "sourceAfterFix": "latch.awaitFirst()"}
{"fixCommitSHA1": "2071f9b5421f853e8515f309b2874399c895c43a", "projectName": "checkstyle.checkstyle", "bugType": "Same Function More Args", "problem": "             @Override\n             public void close() throws IOException {\n                throw new IOException();\n             }\n         });\n     }", "fixed": "             @Override\n             public void close() throws IOException {\n                throw new IOException(\"Test IOException\");\n             }\n         });\n     }", "sourceBeforeFix": "new IOException()", "sourceAfterFix": "new IOException(\"Test IOException\")"}
{"fixCommitSHA1": "e08f74620ba29298d59c97e7327cbe51fbd5b39e", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \tpublic boolean isVisualPressed () {\r\n \t\tif (pressed) return true;\r\n \t\tif (visualPressedTime <= 0) return false;\r\n\t\tif (visualPressedTime > TimeUtils.nanoTime() && Gdx.graphics.isContinuousRendering()) return true;\r\n \t\tvisualPressedTime = 0;\r\n \t\treturn false;\r\n \t}\r", "fixed": " \tpublic boolean isVisualPressed () {\r\n \t\tif (pressed) return true;\r\n \t\tif (visualPressedTime <= 0) return false;\r\n\t\tif (visualPressedTime > TimeUtils.millis() && Gdx.graphics.isContinuousRendering()) return true;\r\n \t\tvisualPressedTime = 0;\r\n \t\treturn false;\r\n \t}\r", "sourceBeforeFix": "TimeUtils.nanoTime()", "sourceAfterFix": "TimeUtils.millis()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15843, value = \"Invalid rollout plan. Plan operations affect server groups %s that are not reflected in the rollout plan\")\n     String invalidRolloutPlan(Set<String> groups);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10843, value = \"Invalid rollout plan. Plan operations affect server groups %s that are not reflected in the rollout plan\")\n     String invalidRolloutPlan(Set<String> groups);\n     /**", "sourceBeforeFix": "id=15847", "sourceAfterFix": "id=10847"}
{"fixCommitSHA1": "8264af051e753ff408e860607575178a2d892b7d", "projectName": "AsyncHttpClient.async-http-client", "bugType": "More Specific If", "problem": "                     int length = lengthWrapper[0];\n                     nettyRequest.setHeader(HttpHeaders.Names.CONTENT_LENGTH, String.valueOf(length));\n                     nettyRequest.setContent(ChannelBuffers.wrappedBuffer(bytes, 0, length));\n                } else if (request.getParams() != null) {\n                     StringBuilder sb = new StringBuilder();\n                     for (final Entry<String, List<String>> paramEntry : request.getParams()) {\n                         final String key = paramEntry.getKey();", "fixed": "                     int length = lengthWrapper[0];\n                     nettyRequest.setHeader(HttpHeaders.Names.CONTENT_LENGTH, String.valueOf(length));\n                     nettyRequest.setContent(ChannelBuffers.wrappedBuffer(bytes, 0, length));\n                } else if (request.getParams() != null && !request.getParams().isEmpty()) {\n                     StringBuilder sb = new StringBuilder();\n                     for (final Entry<String, List<String>> paramEntry : request.getParams()) {\n                         final String key = paramEntry.getKey();", "sourceBeforeFix": "request.getParams() != null", "sourceAfterFix": "request.getParams() != null && !request.getParams().isEmpty()"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": "  * \n  * @param T The data type that the comparator works on.\n  */\npublic interface TypeComparator<T>\n {\t\n \t/**\n \t * Computes a hash value for the given record. The hash value should include all fields in the record", "fixed": "  * \n  * @param T The data type that the comparator works on.\n  */\npublic abstract class TypeComparator<T>\n {\t\n \t/**\n \t * Computes a hash value for the given record. The hash value should include all fields in the record", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "ea98386dfd18da047c877a2320cfdcf15df2ea06", "projectName": "facebook.presto", "bugType": "Change Modifier", "problem": "             .ifFalse(type.invoke(\"hash\", int.class, blockRef, blockPosition));\n     }\n    private void generateRowEqualsRowMethod(\n             ClassDefinition classDefinition,\n             CallSiteBinder callSiteBinder,\n             List<Type> joinChannelTypes)", "fixed": "             .ifFalse(type.invoke(\"hash\", int.class, blockRef, blockPosition));\n     }\n    private static void generateRowEqualsRowMethod(\n             ClassDefinition classDefinition,\n             CallSiteBinder callSiteBinder,\n             List<Type> joinChannelTypes)", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "25923003ecdba4ed236618b917dadeb36e74addf", "projectName": "openhab.openhab", "bugType": "Change Numeric Literal", "problem": "             }\r\n             if (bulb > 5) {\r\n                 sendOn(bulb, bridgeId);\r\n                Thread.sleep(50);\r\n                 String messageBytes = \"40:\" + Integer.toHexString(milightColorNo) + \":55\";\r\n                 sendMessage(messageBytes, bridgeId);\r\n             }\r", "fixed": "             }\r\n             if (bulb > 5) {\r\n                 sendOn(bulb, bridgeId);\r\n                Thread.sleep(100);\r\n                 String messageBytes = \"40:\" + Integer.toHexString(milightColorNo) + \":55\";\r\n                 sendMessage(messageBytes, bridgeId);\r\n             }\r", "sourceBeforeFix": "Thread.sleep(50)", "sourceAfterFix": "Thread.sleep(100)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory crossModuleCodeMotion =\n       new PassFactory(\"crossModuleCodeMotion\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "296b9236fd1544637ae57d022c9e1dd9758577d0", "projectName": "druid-io.druid", "bugType": "Change Identifier Used", "problem": "       } else if (outputFS instanceof DistributedFileSystem) {\n         loadSpec = ImmutableMap.<String, Object>of(\n             \"type\", \"hdfs\",\n            \"path\", indexOutURI.getPath()\n         );\n       } else {\n         throw new ISE(\"Unknown file system[%s]\", outputFS.getClass());", "fixed": "       } else if (outputFS instanceof DistributedFileSystem) {\n         loadSpec = ImmutableMap.<String, Object>of(\n             \"type\", \"hdfs\",\n            \"path\", indexOutURI.toString()\n         );\n       } else {\n         throw new ISE(\"Unknown file system[%s]\", outputFS.getClass());", "sourceBeforeFix": "indexOutURI.getPath()", "sourceAfterFix": "indexOutURI.toString()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  private final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface JCacheEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedJCacheEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface JCacheEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedJCacheEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "0d3c78b6f28fb3cad00c12605209c524702adb0a", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "             return record;\n         }\n         if (isEventsEnabled()) {\n            publishEvent(createCacheCompleteEvent(key, CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                   origin, completionId));\n         }\n         return null;", "fixed": "             return record;\n         }\n         if (isEventsEnabled()) {\n            publishEvent(createCacheCompleteEvent(toEventData(key), CacheRecord.EXPIRATION_TIME_NOT_AVAILABLE,\n                                                   origin, completionId));\n         }\n         return null;", "sourceBeforeFix": "toHeapData(key)", "sourceAfterFix": "toEventData(key)"}
{"fixCommitSHA1": "6a95dd35511f4216481d8d0ffd4952ed1893a1c4", "projectName": "apache.hbase", "bugType": "Wrong Function Name", "problem": "       setPermission(loadPath, FsPermission.valueOf(\"-rwxrwxrwx\"));\n       try (HTable table = (HTable)TEST_UTIL.getConnection().getTable(tableName)) {\n        TEST_UTIL.waitTableEnabled(tableName);\n         LoadIncrementalHFiles loader = new LoadIncrementalHFiles(conf);\n         loader.doBulkLoad(loadPath, table);\n       }", "fixed": "       setPermission(loadPath, FsPermission.valueOf(\"-rwxrwxrwx\"));\n       try (HTable table = (HTable)TEST_UTIL.getConnection().getTable(tableName)) {\n        TEST_UTIL.waitUntilAllRegionsAssigned(tableName);\n         LoadIncrementalHFiles loader = new LoadIncrementalHFiles(conf);\n         loader.doBulkLoad(loadPath, table);\n       }", "sourceBeforeFix": "TEST_UTIL.waitTableEnabled(tableName)", "sourceAfterFix": "TEST_UTIL.waitUntilAllRegionsAssigned(tableName)"}
{"fixCommitSHA1": "0b3166b35fac48f68ba84f1110421d99c4222244", "projectName": "openhab.openhab", "bugType": "Change Numeric Literal", "problem": "     @Override\r\n     public byte[] decodeMessage() {\r\n        byte[] data = new byte[16];\r\n         data[0] = 0x10;\r\n         data[1] = RFXComBaseMessage.PacketType.RAIN.toByte();\r", "fixed": "     @Override\r\n     public byte[] decodeMessage() {\r\n        byte[] data = new byte[17];\r\n         data[0] = 0x10;\r\n         data[1] = RFXComBaseMessage.PacketType.RAIN.toByte();\r", "sourceBeforeFix": "new byte[16]", "sourceAfterFix": "new byte[17]"}
{"fixCommitSHA1": "435805f612bf78ee0d2fd93cd90fa6c6740e17c2", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         String uri = getScpUri() + \"?username=admin&password=admin&knownHostsFile=\" + getKnownHostsFile();\n         template.sendBodyAndHeader(uri, \"Bye World\", Exchange.FILE_NAME, \"mysub/bye.txt\");\n        Thread.sleep(200);\n         File file = new File(getScpPath() + \"/mysub/bye.txt\");\n         assertFileExists(file.getAbsolutePath());", "fixed": "         String uri = getScpUri() + \"?username=admin&password=admin&knownHostsFile=\" + getKnownHostsFile();\n         template.sendBodyAndHeader(uri, \"Bye World\", Exchange.FILE_NAME, \"mysub/bye.txt\");\n        Thread.sleep(500);\n         File file = new File(getScpPath() + \"/mysub/bye.txt\");\n         assertFileExists(file.getAbsolutePath());", "sourceBeforeFix": "Thread.sleep(200)", "sourceAfterFix": "Thread.sleep(500)"}
{"fixCommitSHA1": "95db9b935c3b0f4650e6fd13d807bb44e223ca95", "projectName": "openmrs.openmrs-core", "bugType": "Wrong Function Name", "problem": " \t\tsimpleDosingInstructions.setDurationUnits(order.getDurationUnits());\r\n \t\tsimpleDosingInstructions.setAsNeeded(order.getAsNeeded());\r\n \t\tsimpleDosingInstructions.setAsNeededCondition(order.getAsNeededCondition());\r\n\t\tsimpleDosingInstructions.setAdministrationInstructions(order.getInstructions());\r\n \t\treturn simpleDosingInstructions;\r\n \t}\r", "fixed": " \t\tsimpleDosingInstructions.setDurationUnits(order.getDurationUnits());\r\n \t\tsimpleDosingInstructions.setAsNeeded(order.getAsNeeded());\r\n \t\tsimpleDosingInstructions.setAsNeededCondition(order.getAsNeededCondition());\r\n\t\tsimpleDosingInstructions.setAdministrationInstructions(order.getDosingInstructions());\r\n \t\treturn simpleDosingInstructions;\r\n \t}\r", "sourceBeforeFix": "order.getInstructions()", "sourceAfterFix": "order.getDosingInstructions()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  private final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Checks possible execution paths of the program for problems: missing return\n    * statements and dead code.\n    */\n  final HotSwapPassFactory checkControlFlow =\n       new HotSwapPassFactory(\"checkControlFlow\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15871, value = \"Unknown server %s\")\n     IllegalStateException unknownServer(ServerIdentity server);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10871, value = \"Unknown server %s\")\n     IllegalStateException unknownServer(ServerIdentity server);\n     /**", "sourceBeforeFix": "id=15842", "sourceAfterFix": "id=10842"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedToMe() throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_to_me.json\",\n                 null, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedToMe() throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_to_me.json\",\n                 null, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface SpringIntegrationEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedSpringIntegrationEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface SpringIntegrationEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedSpringIntegrationEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "ae6599c6ec02c7973209010991a23fde5db8217f", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     }\n     @Converter\n    public static String toIso(Country country) {\n         return country.getIso();\n     }\n }", "fixed": "     }\n     @Converter\n    public String toIso(Country country) {\n         return country.getIso();\n     }\n }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "8abfa48f2eb5edaf3f5a2cc2350e4e3c232f4152", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "          */\n         private static final long serialVersionUID = -1021880396046355863L;\n        public ReloadAction() {\n             super(\"Reload Java File\");\n             putValue(Action.MNEMONIC_KEY, KeyEvent.VK_R);\n         }", "fixed": "          */\n         private static final long serialVersionUID = -1021880396046355863L;\n        ReloadAction() {\n             super(\"Reload Java File\");\n             putValue(Action.MNEMONIC_KEY, KeyEvent.VK_R);\n         }", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface DisruptorEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedDisruptorEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface DisruptorEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedDisruptorEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "1daccd54d2ff2ecdb21d8c60268600c37febbb70", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "       if (mWrite) {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n           OutputStream os = mHdfsFs.create(new Path(filePath));\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n            mBuf.array()[0] = (byte) (k + mWorkerId);\n             os.write(mBuf.array());\n           }\n           os.close();", "fixed": "       if (mWrite) {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           OutputStream os = mHdfsFs.create(new Path(filePath));\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n            mBuf.putInt(0, k + mWorkerId);\n             os.write(mBuf.array());\n           }\n           os.close();", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "pId + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCachePuts(1);\n            statistics.addPutTimeNano(System.nanoTime() - start);\n         }\n         return result;\n     }", "fixed": "         }\n         if (result && isStatisticsEnabled()) {\n             statistics.increaseCachePuts(1);\n            statistics.addPutTimeNanos(System.nanoTime() - start);\n         }\n         return result;\n     }", "sourceBeforeFix": "statistics.addRemoveTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addRemoveTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "62e7eb06d62b50ba6a03c25070c6ee1164c0962f", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "      * creation\n      */\n     protected ConnectionFactory createTemplateConnectionFactory() {\n        return getConnectionFactory();\n     }\n     /**", "fixed": "      * creation\n      */\n     protected ConnectionFactory createTemplateConnectionFactory() {\n        return getOrCreateConnectionFactory();\n     }\n     /**", "sourceBeforeFix": "getConnectionFactory()", "sourceAfterFix": "getOrCreateConnectionFactory()"}
{"fixCommitSHA1": "e1d89ddbf6028369fd3117ff648fc6f16a1786fe", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "                     LOG.trace(\"OpenTracing: start server span=\" + span);\n                 }\n             } catch (Throwable t) {\n                LOG.error(\"OpenTracing: Failed to capture tracing data\", t);\n             }\n         }", "fixed": "                     LOG.trace(\"OpenTracing: start server span=\" + span);\n                 }\n             } catch (Throwable t) {\n                LOG.warn(\"OpenTracing: Failed to capture tracing data\", t);\n             }\n         }", "sourceBeforeFix": "LOG.error(\"OpenTracing: Failed to capture tracing data\",t)", "sourceAfterFix": "LOG.warn(\"OpenTracing: Failed to capture tracing data\",t)"}
{"fixCommitSHA1": "ecfa6bd1b16a9e2a5a80cf4dd3ff1146c48353c2", "projectName": "druid-io.druid", "bugType": "Change Identifier Used", "problem": "           retVal.put(metricName, factory.combine(arg1Val.getMetric(metricName), arg2Val.getMetric(metricName)));\n         }\n         for (PostAggregator postAgg : postAggregations) {\n          if (postAgg.getName().equals(topNMetricName)) {\n             retVal.put(postAgg.getName(), postAgg.compute(retVal));\n           }\n         }", "fixed": "           retVal.put(metricName, factory.combine(arg1Val.getMetric(metricName), arg2Val.getMetric(metricName)));\n         }\n         for (PostAggregator postAgg : postAggregations) {\n          if (postAgg.getName().equalsIgnoreCase(topNMetricName)) {\n             retVal.put(postAgg.getName(), postAgg.compute(retVal));\n           }\n         }", "sourceBeforeFix": "postAgg.getName().equals(topNMetricName)", "sourceAfterFix": "postAgg.getName().equalsIgnoreCase(topNMetricName)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "fixed": "   }\n   \n  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform2iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toIntBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform3f (int location, float x, float y, float z) {\r", "fixed": " \t}\r\n \tpublic void glUniform2iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform2iv(location, v);\r\n \t}\r\n \tpublic void glUniform2iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform2iv(location, toIntBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform3f (int location, float x, float y, float z) {\r", "sourceBeforeFix": "GL20.glUniform3(location,toFloatBuffer(v,offset,count * 3))", "sourceAfterFix": "GL20.glUniform3fv(location,toFloatBuffer(v,offset,count * 3))"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15834, value = \"%s recognizes only %s as children: %s\")\n     String unrecognizedChildren(String parent, String children, String parentSpec);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10834, value = \"%s recognizes only %s as children: %s\")\n     String unrecognizedChildren(String parent, String children, String parentSpec);\n     /**", "sourceBeforeFix": "id=15862", "sourceAfterFix": "id=10862"}
{"fixCommitSHA1": "423fca2f16ef73c1e4bce7cf11660a510be1456e", "projectName": "apache.hbase", "bugType": "Wrong Function Name", "problem": "     }\n     if (LOG.isDebugEnabled()) {\n      LOG.debug(split.getRegionName().toString()\n          +\" no longer has references to \" + parent.toString());\n     }\n     BatchUpdate b = new BatchUpdate(parent);", "fixed": "     }\n     if (LOG.isDebugEnabled()) {\n      LOG.debug(split.getRegionNameAsString() +\n        \" no longer has references to \" + parent.toString());\n     }\n     BatchUpdate b = new BatchUpdate(parent);", "sourceBeforeFix": "parent.getRegionName()", "sourceAfterFix": "parent.getRegionNameAsString()"}
{"fixCommitSHA1": "4c1b34b34b68f102fbb5021a801b6d99de967550", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     final FunctionNames functionNames;\n     final String idGeneratorMap;\n    State(Map<String, Integer> cssNames, Set<String> exportedNames,\n           CrossModuleMethodMotion.IdGenerator crossModuleIdGenerator,\n           VariableMap variableMap, VariableMap propertyMap,\n           VariableMap anonymousFunctionNameMap,", "fixed": "     final FunctionNames functionNames;\n     final String idGeneratorMap;\n    public State(Map<String, Integer> cssNames, Set<String> exportedNames,\n           CrossModuleMethodMotion.IdGenerator crossModuleIdGenerator,\n           VariableMap variableMap, VariableMap propertyMap,\n           VariableMap anonymousFunctionNameMap,", "sourceBeforeFix": "1024", "sourceAfterFix": "1028"}
{"fixCommitSHA1": "7fe4af53a9c206fb201115be870694283f877740", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "         SortedMap<String, Properties> map = new TreeMap<String, Properties>();\n         while (componentDescriptionIter != null && componentDescriptionIter.hasMoreElements()) {\n             URL url = componentDescriptionIter.nextElement();\n            LOG.info(\"Finding components in url: {}\", url);\n             try {\n                 Properties properties = new Properties();\n                 properties.load(url.openStream());", "fixed": "         SortedMap<String, Properties> map = new TreeMap<String, Properties>();\n         while (componentDescriptionIter != null && componentDescriptionIter.hasMoreElements()) {\n             URL url = componentDescriptionIter.nextElement();\n            LOG.trace(\"Finding components in url: {}\", url);\n             try {\n                 Properties properties = new Properties();\n                 properties.load(url.openStream());", "sourceBeforeFix": "LOG.info(\"Finding components in url: {}\",url)", "sourceAfterFix": "LOG.trace(\"Finding components in url: {}\",url)"}
{"fixCommitSHA1": "6ee201465a3287e5700c5cba712852a8f4de4bca", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "     }\n     protected String[] parseUri(DynamicAwareEntry entry) {\n        String u = entry.getOriginalUri();\n         boolean httpComponent = \"http\".equals(scheme) || \"https\".equals(scheme) || \"http4\".equals(scheme) || \"https4\".equals(scheme);", "fixed": "     }\n     protected String[] parseUri(DynamicAwareEntry entry) {\n        String u = entry.getUri();\n         boolean httpComponent = \"http\".equals(scheme) || \"https\".equals(scheme) || \"http4\".equals(scheme) || \"https4\".equals(scheme);", "sourceBeforeFix": "entry.getOriginalUri()", "sourceAfterFix": "entry.getUri()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "d992605788f97bbb0cbe4d43087a164046a6a80b", "projectName": "nhaarman.ListViewAnimations", "bugType": "More Specific If", "problem": "         boolean found = false;\n         for (int i = 0; i < mAbsListView.getChildCount() && !found; i++) {\n             View childView = mAbsListView.getChildAt(i);\n            if (mAbsListView.getPositionForView(childView) == position) {\n                 found = true;\n                 toggle(((ViewHolder) childView.getTag()).contentParent);\n             }", "fixed": "         boolean found = false;\n         for (int i = 0; i < mAbsListView.getChildCount() && !found; i++) {\n             View childView = mAbsListView.getChildAt(i);\n            if (mAbsListView.getPositionForView(childView) == position && childView.getTag() instanceof ViewHolder) {\n                 found = true;\n                 toggle(((ViewHolder) childView.getTag()).contentParent);\n             }", "sourceBeforeFix": "mAbsListView.getPositionForView(childView) == position", "sourceAfterFix": "mAbsListView.getPositionForView(childView) == position && childView.getTag() instanceof ViewHolder"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface XsltEndpointBuilder\n            extends\n                EndpointProducerBuilder {\n         default AdvancedXsltEndpointBuilder advanced() {\n             return (AdvancedXsltEndpointBuilder) this;\n         }", "fixed": "     \n    public interface XsltEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedXsltEndpointBuilder advanced() {\n             return (AdvancedXsltEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "a63faf44e1b103a49d25a15c720fc5940ae9fc07", "projectName": "square.retrofit", "bugType": "Change Identifier Used", "problem": "     assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResultClass = new TypeToken<Maybe<Result<String>>>() {}.getType();\n    assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResultClass = new TypeToken<Flowable<Result<String>>>() {}.getType();\n    assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oResultWildcard = new TypeToken<Observable<Result<? extends String>>>() {}.getType();", "fixed": "     assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResultClass = new TypeToken<Maybe<Result<String>>>() {}.getType();\n    assertThat(factory.get(mResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResultClass = new TypeToken<Flowable<Result<String>>>() {}.getType();\n    assertThat(factory.get(fResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oResultWildcard = new TypeToken<Observable<Result<? extends String>>>() {}.getType();", "sourceBeforeFix": "factory.get(sResultClass,NO_ANNOTATIONS,retrofit)", "sourceAfterFix": "factory.get(mResultClass,NO_ANNOTATIONS,retrofit)"}
{"fixCommitSHA1": "8abd59029e7c0bc0973b492fd84a386b26661bc7", "projectName": "alibaba.dubbo", "bugType": "Wrong Function Name", "problem": "             }\n         });\n         try {\n            finish.await(getTimeout(), TimeUnit.MILLISECONDS);\n         } catch (InterruptedException e) {\n             throw new RemotingException(this, \"client(url: \" + getUrl() + \") failed to connect to server \" + getRemoteAddress() + \" client-side timeout \"\n                    + getTimeout() + \"ms (elapsed: \" + (System.currentTimeMillis() - start)\n                     + \"ms) from netty client \" + NetUtils.getLocalHost() + \" using dubbo version \"\n                     + Version.getVersion() + \", cause: \" + e.getMessage(), e);\n         }", "fixed": "             }\n         });\n         try {\n            finish.await(getConnectTimeout(), TimeUnit.MILLISECONDS);\n         } catch (InterruptedException e) {\n             throw new RemotingException(this, \"client(url: \" + getUrl() + \") failed to connect to server \" + getRemoteAddress() + \" client-side timeout \"\n                    + getConnectTimeout() + \"ms (elapsed: \" + (System.currentTimeMillis() - start)\n                     + \"ms) from netty client \" + NetUtils.getLocalHost() + \" using dubbo version \"\n                     + Version.getVersion() + \", cause: \" + e.getMessage(), e);\n         }", "sourceBeforeFix": "getTimeout()", "sourceAfterFix": "getConnectTimeout()"}
{"fixCommitSHA1": "c30e67b81a0d9ac45c4151d20a960e542ad97b4f", "projectName": "dropwizard.dropwizard", "bugType": "Change Identifier Used", "problem": "     @SuppressWarnings(\"unchecked\")\n     public void returnsA500OnExceptions() throws Exception {\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getRequestURI()).thenReturn(\"/tasks/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.<String>of()));\n         final RuntimeException ex = new RuntimeException(\"whoops\");", "fixed": "     @SuppressWarnings(\"unchecked\")\n     public void returnsA500OnExceptions() throws Exception {\n         when(request.getMethod()).thenReturn(\"POST\");\n        when(request.getServletPath()).thenReturn(\"/tasks/gc\");\n         when(request.getParameterNames()).thenReturn(Collections.enumeration(ImmutableList.<String>of()));\n         final RuntimeException ex = new RuntimeException(\"whoops\");", "sourceBeforeFix": "request.getRequestURI()", "sourceAfterFix": "request.getServletPath()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "dbd841562137595e365ccf2ad1524ecfdee958c9", "projectName": "google.auto", "bugType": "Change Caller in Function Call", "problem": "     ImmutableListMultimap.Builder<String, FactoryMethodDescriptor> indexedMethods =\n         ImmutableListMultimap.builder();\n    ImmutableSet.Builder<ImplemetationMethodDescriptor> implemetationMethodDescriptors =\n         ImmutableSet.builder();\n     for (Element element : roundEnv.getElementsAnnotatedWith(AutoFactory.class)) {\n       Optional<AutoFactoryDeclaration> declaration = declarationFactory.createIfValid(element);", "fixed": "     ImmutableListMultimap.Builder<String, FactoryMethodDescriptor> indexedMethods =\n         ImmutableListMultimap.builder();\n    ImmutableSet.Builder<ImplementationMethodDescriptor> implementationMethodDescriptors =\n         ImmutableSet.builder();\n     for (Element element : roundEnv.getElementsAnnotatedWith(AutoFactory.class)) {\n       Optional<AutoFactoryDeclaration> declaration = declarationFactory.createIfValid(element);", "sourceBeforeFix": "implemetationMethodDescriptors.build()", "sourceAfterFix": "implementationMethodDescriptors.build()"}
{"fixCommitSHA1": "761d3ff3b19109715644ebc2bfa0396f3148d772", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "                 } catch (InterruptedException e) {\n                     e.printStackTrace();\n                 }\n                hz1.getLifecycleService().terminate();\n             }\n         };", "fixed": "                 } catch (InterruptedException e) {\n                     e.printStackTrace();\n                 }\n                hz1.getLifecycleService().shutdown();\n             }\n         };", "sourceBeforeFix": "hz1.getLifecycleService().terminate()", "sourceAfterFix": "hz1.getLifecycleService().shutdown()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  private final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "47a3783d6cb0c09ee6c78c2e461bcb58fe879387", "projectName": "netty.netty", "bugType": "Change Identifier Used", "problem": "                 }\n                 int a = System.identityHashCode(this);\n                int b = System.identityHashCode(this);\n                 if (a < b) {\n                     return -1;\n                 } else if (a > b) {", "fixed": "                 }\n                 int a = System.identityHashCode(this);\n                int b = System.identityHashCode(o);\n                 if (a < b) {\n                     return -1;\n                 } else if (a > b) {", "sourceBeforeFix": "System.identityHashCode(this)", "sourceAfterFix": "System.identityHashCode(o)"}
{"fixCommitSHA1": "ceb0d5e68bc6cbf8015be6d5dd785991fbc81455", "projectName": "apache.hbase", "bugType": "Same Function More Args", "problem": "     Thread.yield();\n    response = client.get(path);\n     assertEquals(response.getCode(), 404);", "fixed": "     Thread.yield();\n    response = client.get(path, MIMETYPE_XML);\n     assertEquals(response.getCode(), 404);", "sourceBeforeFix": "client.get(path)", "sourceAfterFix": "client.get(path,MIMETYPE_XML)"}
{"fixCommitSHA1": "44074f6ae03031ab046b1886790fc31e66e2d74e", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         }\n         uptime /= 24;\n         long days = (long) uptime;\n        long hours = (long) ((uptime - days) * 60);\n         String s = fmtI.format(days) + (days > 1 ? \" days\" : \" day\");\n         if (hours != 0) {\n             s += \" \" + fmtI.format(hours) + (hours > 1 ? \" hours\" : \" hour\");", "fixed": "         }\n         uptime /= 24;\n         long days = (long) uptime;\n        long hours = (long) ((uptime - days) * 24);\n         String s = fmtI.format(days) + (days > 1 ? \" days\" : \" day\");\n         if (hours != 0) {\n             s += \" \" + fmtI.format(hours) + (hours > 1 ? \" hours\" : \" hour\");", "sourceBeforeFix": "(uptime - days) * 60", "sourceAfterFix": "(uptime - days) * 24"}
