{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid ID supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"Order not found\", response = Void.class) })\n    void deleteOrder(@PathParam(\"order_id\") @ApiParam(\"ID of the order that needs to be deleted\") String orderId);\n     @GET\n     @Path(\"/inventory\")", "fixed": "     @ApiResponses(value = { \n         @ApiResponse(code = 400, message = \"Invalid ID supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"Order not found\", response = Void.class) })\n    void deleteOrder(@PathParam(\"order_id\") @ApiParam(\"ID of the order that needs to be deleted\") String orderId) throws Exception;\n     @GET\n     @Path(\"/inventory\")", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleAlternativesWithCommonLabel_4() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(730);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {System.out.println($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "fixed": " \tpublic void testMultipleAlternativesWithCommonLabel_4() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(729);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {System.out.println($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "sourceBeforeFix": "new StringBuilder(730)", "sourceAfterFix": "new StringBuilder(729)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedPubNubEndpointBuilder\n             extends\n                 AdvancedPubNubEndpointConsumerBuilder, AdvancedPubNubEndpointProducerBuilder {\n         default PubNubEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedPubNubEndpointBuilder\n             extends\n                 AdvancedPubNubEndpointConsumerBuilder, AdvancedPubNubEndpointProducerBuilder {\n         default PubNubEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "64bc69ef4c547771f44f6b6b103cda7be2f0922b", "projectName": "dropwizard.metrics", "bugType": "Wrong Function Name", "problem": " \t}\n \tpublic SortedMap<String, Meter> getMeters(MetricFilter filter) {\n\t\treturn adaptMetrics(Meter.class, reg.getCounters(transformFilter(filter)));\n \t}\n \tpublic SortedMap<String, Timer> getTimers() {", "fixed": " \t}\n \tpublic SortedMap<String, Meter> getMeters(MetricFilter filter) {\n\t\treturn adaptMetrics(Meter.class, reg.getMeters(transformFilter(filter)));\n \t}\n \tpublic SortedMap<String, Timer> getTimers() {", "sourceBeforeFix": "reg.getCounters(transformFilter(filter))", "sourceAfterFix": "reg.getMeters(transformFilter(filter))"}
{"fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "       } else {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n           InputStream is = mHdfsFs.open(new Path(filePath));\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;", "fixed": "       } else {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           InputStream is = mHdfsFs.open(new Path(filePath));\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;", "sourceBeforeFix": "k < THREADS", "sourceAfterFix": "k < FILES"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform2iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toIntBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform3f (int location, float x, float y, float z) {\r", "fixed": " \t}\r\n \tpublic void glUniform2iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform2iv(location, v);\r\n \t}\r\n \tpublic void glUniform2iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform2iv(location, toIntBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform3f (int location, float x, float y, float z) {\r", "sourceBeforeFix": "GL20.glUniform1(location,toFloatBuffer(v,offset,count))", "sourceAfterFix": "GL20.glUniform1fv(location,toFloatBuffer(v,offset,count))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "2a874f56b35876b2fc8a08191e417db74099e6fb", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "         final String content = \"Hi camels\";\n         createFile(FILE_NAME, content);\n        context.startRoute(\"consumer\");\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n         mock.expectedMinimumMessageCount(1);", "fixed": "         final String content = \"Hi camels\";\n         createFile(FILE_NAME, content);\n        context.start();\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n         mock.expectedMinimumMessageCount(1);", "sourceBeforeFix": "context.startRoute(\"consumer\")", "sourceAfterFix": "context.start()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "2b5950d074b4b9e9c3d46ef08899d9629b2af104", "projectName": "Atmosphere.atmosphere", "bugType": "Same Function Less Args", "problem": "     }\n     public void startServer() throws Exception {\n        server = new Server(port);\n         root = new Context(server, \"/\", Context.SESSIONS);\n         root.addServlet(new ServletHolder(atmoServlet), ROOT);", "fixed": "     }\n     public void startServer() throws Exception {\n        server = new Server();\n         root = new Context(server, \"/\", Context.SESSIONS);\n         root.addServlet(new ServletHolder(atmoServlet), ROOT);", "sourceBeforeFix": "new Server(port)", "sourceAfterFix": "new Server()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "a63faf44e1b103a49d25a15c720fc5940ae9fc07", "projectName": "square.retrofit", "bugType": "Change Identifier Used", "problem": "     assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResponseClass = new TypeToken<Maybe<Response<String>>>() {}.getType();\n    assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResponseClass = new TypeToken<Flowable<Response<String>>>() {}.getType();\n    assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oResponseWildcard = new TypeToken<Observable<Response<? extends String>>>() {}.getType();", "fixed": "     assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResponseClass = new TypeToken<Maybe<Response<String>>>() {}.getType();\n    assertThat(factory.get(mResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResponseClass = new TypeToken<Flowable<Response<String>>>() {}.getType();\n    assertThat(factory.get(fResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type oResponseWildcard = new TypeToken<Observable<Response<? extends String>>>() {}.getType();", "sourceBeforeFix": "factory.get(sResultClass,NO_ANNOTATIONS,retrofit)", "sourceAfterFix": "factory.get(mResultClass,NO_ANNOTATIONS,retrofit)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory renameProperties =\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "a261bf70759098246da6a7ac5463d1db8a907214", "projectName": "swagger-api.swagger-core", "bugType": "Less Specific If", "problem": "                 }\n             }\n         }\n        if (subtypeProps.isEmpty()) {\n             child.setProperties(null);\n         }\n     }", "fixed": "                 }\n             }\n         }\n        if (subtypeProps == null || subtypeProps.isEmpty()) {\n             child.setProperties(null);\n         }\n     }", "sourceBeforeFix": "subtypeProps.isEmpty()", "sourceAfterFix": "subtypeProps == null || subtypeProps.isEmpty()"}
{"fixCommitSHA1": "6bae902bd35ed4f57e7a5d612b7ad9b72f4559bc", "projectName": "google.closure-compiler", "bugType": "Wrong Function Name", "problem": "   public void testCheckTreeEqualsBooleanSame() {\n     Node node1 = new Node(1);\n    assertEquals(true, node1.checkTreeEqualsSilent(node1));\n   }\n   public void testCheckTreeEqualsBooleanDifferent() {\n     Node node1 = new Node(1);\n     Node node2 = new Node(2);\n    assertEquals(false, node1.checkTreeEqualsSilent(node2));\n   }\n   public void testCheckTreeEqualsImplDifferentIncProp() {", "fixed": "   public void testCheckTreeEqualsBooleanSame() {\n     Node node1 = new Node(1);\n    assertEquals(true, node1.isEquivalentTo(node1));\n   }\n   public void testCheckTreeEqualsBooleanDifferent() {\n     Node node1 = new Node(1);\n     Node node2 = new Node(2);\n    assertEquals(false, node1.isEquivalentTo(node2));\n   }\n   public void testCheckTreeEqualsImplDifferentIncProp() {", "sourceBeforeFix": "node1.checkTreeTypeAwareEqualsSilent(node2)", "sourceAfterFix": "node1.isEquivalentToTyped(node2)"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         if (isStatisticsEnabled()) {\n             if (isPutSucceed) {\n                 statistics.increaseCachePuts(1);\n                statistics.addPutTimeNano(System.nanoTime() - start);\n             }\n             if (getValue) {\n                 if (oldValueNull) {", "fixed": "         if (isStatisticsEnabled()) {\n             if (isPutSucceed) {\n                 statistics.increaseCachePuts(1);\n                statistics.addPutTimeNanos(System.nanoTime() - start);\n             }\n             if (getValue) {\n                 if (oldValueNull) {", "sourceBeforeFix": "statistics.addRemoveTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addRemoveTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "544edb296479cbd05f35381b20a651e9d022e197", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         context.start();\n         for (int i = 0; i < 10; i++) {\n            getMockEndpoint(\"mock:\" + i).expectedMessageCount(1000);\n         }\n         ExecutorService executors = Executors.newFixedThreadPool(20);\n        for (int i = 0; i < 1000; i++) {\n             executors.execute(new Runnable() {\n                 public void run() {\n                     for (int i = 0; i < 10; i++) {", "fixed": "         context.start();\n         for (int i = 0; i < 10; i++) {\n            getMockEndpoint(\"mock:\" + i).expectedMessageCount(200);\n         }\n         ExecutorService executors = Executors.newFixedThreadPool(20);\n        for (int i = 0; i < 200; i++) {\n             executors.execute(new Runnable() {\n                 public void run() {\n                     for (int i = 0; i < 10; i++) {", "sourceBeforeFix": "i < 1000", "sourceAfterFix": "i < 200"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShader(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "fixed": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShaderiv(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "sourceBeforeFix": "GL20.glUniform3(location,toFloatBuffer(v,offset,count * 3))", "sourceAfterFix": "GL20.glUniform3fv(location,toFloatBuffer(v,offset,count * 3))"}
{"fixCommitSHA1": "2e32ba7ab68e22bfc398362d4e3b85bb5ebfacac", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "      * @return the starting column for the first line.\n      */\n     public int firstLineCol() {\n        final Object firstLineKey = lines.firstKey();\n         return lines.get(firstLineKey);\n     }", "fixed": "      * @return the starting column for the first line.\n      */\n     public int firstLineCol() {\n        final Integer firstLineKey = lines.firstKey();\n         return lines.get(firstLineKey);\n     }", "sourceBeforeFix": "final Object firstLineKey=lines.firstKey(); ", "sourceAfterFix": "final Integer firstLineKey=lines.firstKey(); "}
{"fixCommitSHA1": "e668660a9ca77bc1bfc091967cc10975594d884e", "projectName": "druid-io.druid", "bugType": "Wrong Function Name", "problem": "                   ),\n                   configFactory.build(EC2AutoScalingStrategyConfig.class)\n               );\n            } else if (config.getStorageImpl().equalsIgnoreCase(\"noop\")) {\n               strategy = new NoopScalingStrategy();\n             } else {\n               throw new ISE(\"Invalid strategy implementation: %s\",config.getStrategyImpl());", "fixed": "                   ),\n                   configFactory.build(EC2AutoScalingStrategyConfig.class)\n               );\n            } else if (config.getStrategyImpl().equalsIgnoreCase(\"noop\")) {\n               strategy = new NoopScalingStrategy();\n             } else {\n               throw new ISE(\"Invalid strategy implementation: %s\",config.getStrategyImpl());", "sourceBeforeFix": "config.getStorageImpl()", "sourceAfterFix": "config.getStrategyImpl()"}
{"fixCommitSHA1": "e05e6b2539c1b634d9a7f57cd3abc8f52669970c", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "     @Test\n     public void testStartDelayed() throws Exception {\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.setMinimumResultWaitTime(1900);\n         mock.setResultWaitTime(3000);\n         mock.expectedMessageCount(2);", "fixed": "     @Test\n     public void testStartDelayed() throws Exception {\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.setMinimumResultWaitTime(1500);\n         mock.setResultWaitTime(3000);\n         mock.expectedMessageCount(2);", "sourceBeforeFix": "mock.setMinimumResultWaitTime(1900)", "sourceAfterFix": "mock.setMinimumResultWaitTime(1500)"}
{"fixCommitSHA1": "d97984fe97b0374bc9b4ba271b5aaab08e256fe6", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "         assertEquals(\"sample-tag-key\", aws.getTagKey());\n         assertEquals(\"sample-tag-value\", aws.getTagValue());\n        assertFalse(\"reuse-address\", networkConfig.isReuseAddress());\n     }", "fixed": "         assertEquals(\"sample-tag-key\", aws.getTagKey());\n         assertEquals(\"sample-tag-value\", aws.getTagValue());\n        assertTrue(\"reuse-address\", networkConfig.isReuseAddress());\n     }", "sourceBeforeFix": "assertFalse(\"reuse-address\",networkConfig.isReuseAddress())", "sourceAfterFix": "assertTrue(\"reuse-address\",networkConfig.isReuseAddress())"}
{"fixCommitSHA1": "7aadad98f6eeda88f9725b0dffcc84848ac35ce3", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "     @Test\n     public void testPrePartitionAsIntegerHeaderAndOffsetAsLongHeader() {\n        Long testOffset = 4875454l;\n         Integer testPartition = 0;\n         Endpoint endpoint = Mockito.mock(Endpoint.class);", "fixed": "     @Test\n     public void testPrePartitionAsIntegerHeaderAndOffsetAsLongHeader() {\n        Long testOffset = 4875454L;\n         Integer testPartition = 0;\n         Endpoint endpoint = Mockito.mock(Endpoint.class);", "sourceBeforeFix": "testOffset=4875454l", "sourceAfterFix": "testOffset=4875454L"}
{"fixCommitSHA1": "c60610c399277d16c94872e2279f861eb8ccd9b1", "projectName": "gephi.gephi", "bugType": "Change Identifier Used", "problem": "             }\n            final String containerSource = \"Stream \" + importer;\n             executor.execute(task, new Runnable() {\n                 public void run() {", "fixed": "             }\n            final String containerSource = \"Stream \" + importerName;\n             executor.execute(task, new Runnable() {\n                 public void run() {", "sourceBeforeFix": "\"Stream \" + importer", "sourceAfterFix": "\"Stream \" + importerName"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   }\n   \n  final HotSwapPassFactory checkControlStructures =\n       new HotSwapPassFactory(\"checkControlStructures\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "fixed": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniformfv(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniformiv(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "sourceBeforeFix": "GL20.glUniformMatrix4(location,transpose,toFloatBuffer(value,offset,count << 4))", "sourceAfterFix": "GL20.glUniformMatrix4fv(location,transpose,toFloatBuffer(value,offset,count << 4))"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface ConsulEndpointBuilder\n             extends\n                 ConsulEndpointConsumerBuilder, ConsulEndpointProducerBuilder {\n         default AdvancedConsulEndpointBuilder advanced() {", "fixed": "     \n    public interface ConsulEndpointBuilder\n             extends\n                 ConsulEndpointConsumerBuilder, ConsulEndpointProducerBuilder {\n         default AdvancedConsulEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15867, value = \"Cannot use %s with the same value for parameters %s and %s. \" +\n             \"Use %s to redeploy the same content or %s to replace content with a new version with the same name.\")\n     String cannotUseSameValueForParameters(String opName, String param1, String param2, String redeployOpName, String replaceOpName);", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10867, value = \"Cannot use %s with the same value for parameters %s and %s. \" +\n             \"Use %s to redeploy the same content or %s to replace content with a new version with the same name.\")\n     String cannotUseSameValueForParameters(String opName, String param1, String param2, String redeployOpName, String replaceOpName);", "sourceBeforeFix": "id=15863", "sourceAfterFix": "id=10863"}
{"fixCommitSHA1": "7600f7af2ff10b7726557816e86d5af9190cf606", "projectName": "Graylog2.graylog2-server", "bugType": "Change Identifier Used", "problem": "             }));\n     }\n    protected <T> Function<String, Optional<T>> createRemoteInterfaceProvider(Class<T> interfaceClass) {\n         return (nodeId) -> {\n             try {\n                 final Node targetNode = nodeService.byNodeId(nodeId);", "fixed": "             }));\n     }\n    protected <RemoteInterfaceType> Function<String, Optional<RemoteInterfaceType>> createRemoteInterfaceProvider(Class<RemoteInterfaceType> interfaceClass) {\n         return (nodeId) -> {\n             try {\n                 final Node targetNode = nodeService.byNodeId(nodeId);", "sourceBeforeFix": "T", "sourceAfterFix": "RemoteInterfaceType"}
{"fixCommitSHA1": "e8a74c8ad07bbf497026a6b8bde532cd61f79f17", "projectName": "netty.netty", "bugType": "More Specific If", "problem": "         if (getDomain() == null && that.getDomain() != null) {\n             return false;\n        } else if (that.getDomain() == null) {\n             return false;\n         }\n         return getDomain().equalsIgnoreCase(that.getDomain());", "fixed": "         if (getDomain() == null && that.getDomain() != null) {\n             return false;\n        } else if (that.getDomain() == null && getDomain() != null) {\n             return false;\n         }\n         return getDomain().equalsIgnoreCase(that.getDomain());", "sourceBeforeFix": "that.getPath() == null", "sourceAfterFix": "that.getPath() == null && getPath() != null"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleAlternativesWithCommonLabel_4() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(561);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "fixed": " \tpublic void testMultipleAlternativesWithCommonLabel_4() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(560);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "sourceBeforeFix": "new StringBuilder(561)", "sourceAfterFix": "new StringBuilder(560)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15854, value = \"Null stream at index %d\")\n     String nullStream(int index);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10854, value = \"Null stream at index %d\")\n     String nullStream(int index);\n     /**", "sourceBeforeFix": "id=15841", "sourceAfterFix": "id=10841"}
{"fixCommitSHA1": "5755cf96d1689e1eda7dd2d7e03f1eff3bf5a074", "projectName": "perwendel.spark", "bugType": "Change Identifier Used", "problem": "      *\n      * @param exceptionClass Type of exception\n      */\n    public void exceptionClass(Class<? extends Exception> exceptionClass) {\n         this.exceptionClass = exceptionClass;\n     }", "fixed": "      *\n      * @param exceptionClass Type of exception\n      */\n    public void exceptionClass(Class<? extends T> exceptionClass) {\n         this.exceptionClass = exceptionClass;\n     }", "sourceBeforeFix": "? extends Exception", "sourceAfterFix": "? extends T"}
{"fixCommitSHA1": "d251856fc9062d7abcdb5b4e48e7385d8e978b9b", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tprivate NSString convertKey (String key) {\r\n\t\treturn NSString.stringWithString(key);\r\n \t}\r\n \t@Override\r", "fixed": " \t}\r\n \tprivate NSString convertKey (String key) {\r\n\t\treturn NSString.alloc().initWithString(key);\r\n \t}\r\n \t@Override\r", "sourceBeforeFix": "pool.dealloc()", "sourceAfterFix": "pool.drain()"}
{"fixCommitSHA1": "1daccd54d2ff2ecdb21d8c60268600c37febbb70", "projectName": "Alluxio.alluxio", "bugType": "Change Operand ", "problem": "       if (TACHYON_STREAMING_READ) {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n           InputStream is = file.getInStream(ReadType.CACHE);\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;", "fixed": "       if (TACHYON_STREAMING_READ) {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           InputStream is = file.getInStream(ReadType.CACHE);\n           long len = BLOCKS_PER_FILE * BLOCK_SIZE_BYTES;", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "pId + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "7999968685571a9ca189eaacb9552248de89026d", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "                     if (! theirIterator.hasNext()) {\n                         break;\n                     }\n                    ours = theirIterator.next();\n                 }\n             }\n         }", "fixed": "                     if (! theirIterator.hasNext()) {\n                         break;\n                     }\n                    theirs = theirIterator.next();\n                 }\n             }\n         }", "sourceBeforeFix": "ours=theirIterator.next()", "sourceAfterFix": "theirs=theirIterator.next()"}
{"fixCommitSHA1": "734c7a8318f516e4825fd72ab53699f96fabbe68", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         getMockEndpoint(\"mock:result\").assertNoDuplicates(body());\n         ExecutorService executor = Executors.newFixedThreadPool(poolSize);\n        Map<Integer, Future> responses = new ConcurrentHashMap();\n         for (int i = 0; i < files; i++) {\n             final int index = i;\n             Future out = executor.submit(new Callable<Object>() {", "fixed": "         getMockEndpoint(\"mock:result\").assertNoDuplicates(body());\n         ExecutorService executor = Executors.newFixedThreadPool(poolSize);\n        Map<Integer, Future> responses = new ConcurrentHashMap<Integer, Future>();\n         for (int i = 0; i < files; i++) {\n             final int index = i;\n             Future out = executor.submit(new Callable<Object>() {", "sourceBeforeFix": "Thread.sleep(1000)", "sourceAfterFix": "Thread.sleep(2000)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  private final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930eb4975915906bb8e88c4376ad40954f67c806", "projectName": "apache.hbase", "bugType": "Missing Throws Exception", "problem": "   }\n   @Override\n  public void postLogRoll(Path oldPath, Path newPath) {\n     getReplicationManager().logRolled(newPath);\n   }", "fixed": "   }\n   @Override\n  public void postLogRoll(Path oldPath, Path newPath) throws IOException {\n     getReplicationManager().logRolled(newPath);\n   }", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface ReactiveStreamsEndpointBuilder\n             extends\n                 ReactiveStreamsEndpointConsumerBuilder, ReactiveStreamsEndpointProducerBuilder {\n         default AdvancedReactiveStreamsEndpointBuilder advanced() {", "fixed": "     \n    public interface ReactiveStreamsEndpointBuilder\n             extends\n                 ReactiveStreamsEndpointConsumerBuilder, ReactiveStreamsEndpointProducerBuilder {\n         default AdvancedReactiveStreamsEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "b9b733ae36380b3c99749616ab638c3488841a50", "projectName": "joelittlejohn.jsonschema2pojo", "bugType": "Same Function More Args", "problem": "             return buildClass(_package, c, 0);\n         } catch (ParseException e) {\n            throw new GenerationException(e);\n         }\n     }", "fixed": "             return buildClass(_package, c, 0);\n         } catch (ParseException e) {\n            throw new GenerationException(\"Couldn't parse type: \" + typeDefinition, e);\n         }\n     }", "sourceBeforeFix": "new GenerationException(e)", "sourceAfterFix": "new GenerationException(\"Couldn't parse type: \" + typeDefinition,e)"}
{"fixCommitSHA1": "bafb1f877934f826d5f74f9f33e824dd1aa30432", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "         return getOutputFactory().createXMLStreamWriter(result);\n     }\n    @Converter\n     public XMLStreamReader createXMLStreamReader(InputStream in) throws XMLStreamException {\n         return getInputFactory().createXMLStreamReader(in);\n     }", "fixed": "         return getOutputFactory().createXMLStreamWriter(result);\n     }\n    @Deprecated\n     public XMLStreamReader createXMLStreamReader(InputStream in) throws XMLStreamException {\n         return getInputFactory().createXMLStreamReader(in);\n     }", "sourceBeforeFix": "@Converter", "sourceAfterFix": "@Deprecated"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsText(String path, int batchSize) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), batchSize, null);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsText(String path, int batchSize) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), batchSize, null);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e7bf415427b37bbc760ff9b9c69650db8ec477e4", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnClass(JdbcTemplate.class)\n \t@ConditionalOnBean(DataSource.class)\n\t@ConditionalOnEnablednHealthIndicator(\"db\")\n \tpublic static class DataSourcesHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<DataSourceHealthIndicator, DataSource>\n \t\t\timplements InitializingBean {", "fixed": " \t@Configuration\n \t@ConditionalOnClass(JdbcTemplate.class)\n \t@ConditionalOnBean(DataSource.class)\n\t@ConditionalOnEnabledHealthIndicator(\"db\")\n \tpublic static class DataSourcesHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<DataSourceHealthIndicator, DataSource>\n \t\t\timplements InitializingBean {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"mongo\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"mongo\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "projectName": "Alluxio.alluxio", "bugType": "Change Operand ", "problem": "   public static void createFiles() throws IOException {\n     long startTimeMs = CommonUtils.getCurrentMs();\n    for (int k = 0; k < THREADS; k ++) {\n       int fileId = MTC.createFile(FILE_NAME + (k + BASE_FILE_NUMBER));\n       CommonUtils.printTimeTakenMs(startTimeMs, LOG, \"user_createFiles with fileId \" + fileId);\n     }", "fixed": "   public static void createFiles() throws IOException {\n     long startTimeMs = CommonUtils.getCurrentMs();\n    for (int k = 0; k < FILES; k++) {\n       int fileId = MTC.createFile(FILE_NAME + (k + BASE_FILE_NUMBER));\n       CommonUtils.printTimeTakenMs(startTimeMs, LOG, \"user_createFiles with fileId \" + fileId);\n     }", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform1fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform1(location, v);\r\n \t}\r\n \tpublic void glUniform1fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform1(location, toFloatBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform1i (int location, int x) {\r", "fixed": " \t}\r\n \tpublic void glUniform1fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform1fv(location, v);\r\n \t}\r\n \tpublic void glUniform1fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform1fv(location, toFloatBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform1i (int location, int x) {\r", "sourceBeforeFix": "GL20.glGetProgram(program,pname,params)", "sourceAfterFix": "GL20.glGetProgramiv(program,pname,params)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedNatsEndpointBuilder\n             extends\n                 AdvancedNatsEndpointConsumerBuilder, AdvancedNatsEndpointProducerBuilder {\n         default NatsEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedNatsEndpointBuilder\n             extends\n                 AdvancedNatsEndpointConsumerBuilder, AdvancedNatsEndpointProducerBuilder {\n         default NatsEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": " import org.jboss.logging.Messages;\n /**\n * This module is using message IDs in the range 10900-10999. This file is using the subset 10975-10999 for domain\n* controller non-logger messages. See http:\n  * JBAS message id blocks.\n  * <p/>", "fixed": " import org.jboss.logging.Messages;\n /**\n * This module is using message IDs in the range 10800-10899. This file is using the subset 10830-10899 for domain\n* controller non-logger messages. See http:\n  * JBAS message id blocks.\n  * <p/>", "sourceBeforeFix": "id=15842", "sourceAfterFix": "id=10842"}
{"fixCommitSHA1": "a41179fbba2512dfa51a1057f5b32edbdba12c26", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t * @param radius The radius in pixels\r\n \t */\r\n \tpublic void fillCircle (int x, int y, int radius) {\r\n\t\tpixmap.drawCircle(x, y, radius, color);\r\n \t}\r\n \t/**\r", "fixed": " \t * @param radius The radius in pixels\r\n \t */\r\n \tpublic void fillCircle (int x, int y, int radius) {\r\n\t\tpixmap.fillCircle(x, y, radius, color);\r\n \t}\r\n \t/**\r", "sourceBeforeFix": "pixmap.drawCircle(x,y,radius,color)", "sourceAfterFix": "pixmap.fillCircle(x,y,radius,color)"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should delete global property from database\n \t */\n \t@Authorized(PrivilegeConstants.PURGE_GLOBAL_PROPERTIES)\n\tpublic void purgeGlobalProperty(GlobalProperty globalProperty) throws APIException;\n \t/**\n \t * Completely remove the given global properties from the database", "fixed": " \t * @should delete global property from database\n \t */\n \t@Authorized(PrivilegeConstants.PURGE_GLOBAL_PROPERTIES)\n\tpublic void purgeGlobalProperty(GlobalProperty globalProperty);\n \t/**\n \t * Completely remove the given global properties from the database", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface VelocityEndpointBuilder\n            extends\n                EndpointProducerBuilder {\n         default AdvancedVelocityEndpointBuilder advanced() {\n             return (AdvancedVelocityEndpointBuilder) this;\n         }", "fixed": "     \n    public interface VelocityEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedVelocityEndpointBuilder advanced() {\n             return (AdvancedVelocityEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "8c5369562390bee531eb35c00744821b0c4821e3", "projectName": "xetorthio.jedis", "bugType": "Change Identifier Used", "problem": "       final double min, final int offset, final int count) {\n     checkIsInMultiOrPipeline();\n     client.zrevrangeByScoreWithScores(key, max, min, offset, count);\n    return getBinaryTupledSet();\n   }\n   @Override", "fixed": "       final double min, final int offset, final int count) {\n     checkIsInMultiOrPipeline();\n     client.zrevrangeByScoreWithScores(key, max, min, offset, count);\n    return getTupledSet();\n   }\n   @Override", "sourceBeforeFix": "getBinaryTupledSet()", "sourceAfterFix": "getTupledSet()"}
{"fixCommitSHA1": "01652fca46c0149bb14ed9f159224213175c30d7", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "                          boolean closeInfoAfterUse,\n                          OutputStream errorStream,\n                          boolean closeErrorAfterUse,\n                         AuditEvemtFormatter messageFormatter) {\n         closeInfo = closeInfoAfterUse;\n         closeError = closeErrorAfterUse;\n         final Writer infoStreamWriter = new OutputStreamWriter(infoStream, StandardCharsets.UTF_8);", "fixed": "                          boolean closeInfoAfterUse,\n                          OutputStream errorStream,\n                          boolean closeErrorAfterUse,\n                         AuditEventFormatter messageFormatter) {\n         closeInfo = closeInfoAfterUse;\n         closeError = closeErrorAfterUse;\n         final Writer infoStreamWriter = new OutputStreamWriter(infoStream, StandardCharsets.UTF_8);", "sourceBeforeFix": "/**   * Formatter for the log message.   */ private final AuditEvemtFormatter formatter; ", "sourceAfterFix": "/**   * Formatter for the log message.   */ private final AuditEventFormatter formatter; "}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": "grammarBuilder.append(\"  | '(' e ')'   {$v = $e.v;}\ngrammarBuilder.append(\"  | left=e INC  {$v = $left.v + 1;}\ngrammarBuilder.append(\"  | left=e DEC  {$v = $left.v - 1;}\n\t\tgrammarBuilder.append(\"  | ID          {$v = 3}\n \t\tgrammarBuilder.append(\"  ;\\n\");\n \t\tgrammarBuilder.append(\"ID : 'a'..'z'+ ;\\n\");\n \t\tgrammarBuilder.append(\"INT : '0'..'9'+ ;\\n\");", "fixed": "grammarBuilder.append(\"  | '(' e ')'   {$v = $e.v;}\ngrammarBuilder.append(\"  | left=e INC  {$v = $left.v + 1;}\ngrammarBuilder.append(\"  | left=e DEC  {$v = $left.v - 1;}\n\t\tgrammarBuilder.append(\"  | ID          {$v = 3;}\n \t\tgrammarBuilder.append(\"  ;\\n\");\n \t\tgrammarBuilder.append(\"ID : 'a'..'z'+ ;\\n\");\n \t\tgrammarBuilder.append(\"INT : '0'..'9'+ ;\\n\");", "sourceBeforeFix": "new StringBuilder(254)", "sourceAfterFix": "new StringBuilder(253)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15871, value = \"Unknown server %s\")\n     IllegalStateException unknownServer(ServerIdentity server);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10871, value = \"Unknown server %s\")\n     IllegalStateException unknownServer(ServerIdentity server);\n     /**", "sourceBeforeFix": "id=15865", "sourceAfterFix": "id=10865"}
{"fixCommitSHA1": "79946366e1ab141ef2b595e0079dcac7b913da2b", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "             \"1: \" + getCheckMessage(MSG_KEY_MISMATCH),\n         };\n        verify(checkConfig, getPath(\"InputPackageDeclarationDiffDirectoryAtParent.java\"), expected);\n     }\n     @Test", "fixed": "             \"1: \" + getCheckMessage(MSG_KEY_MISMATCH),\n         };\n        verify(checkConfig,\n                getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtParent.java\"),\n                expected);\n     }\n     @Test", "sourceBeforeFix": "getPath(\"InputPackageDeclarationDiffDirectoryAtParent.java\")", "sourceAfterFix": "getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtParent.java\")"}
{"fixCommitSHA1": "c0daacd3e40a9c8adebf9e03512f325cdc188a6a", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t\t\t} else if(attr.equals(\"BLENDWEIGHTS\")) {\n \t\t\t\tvertexAttributes.add(VertexAttribute.BoneWeights(4));\n \t\t\t} else if(attr.equals(\"COLOR\")) {\n\t\t\t\tvertexAttributes.add(VertexAttribute.Color());\n \t\t\t} else {\n \t\t\t\tthrow new GdxRuntimeException(\"Unknown vertex attribuet '\" + attr + \"', should be one of position, normal, uv, tangent or binormal\");\n \t\t\t}", "fixed": " \t\t\t} else if(attr.equals(\"BLENDWEIGHTS\")) {\n \t\t\t\tvertexAttributes.add(VertexAttribute.BoneWeights(4));\n \t\t\t} else if(attr.equals(\"COLOR\")) {\n\t\t\t\tvertexAttributes.add(VertexAttribute.ColorUnpacked());\n \t\t\t} else {\n \t\t\t\tthrow new GdxRuntimeException(\"Unknown vertex attribuet '\" + attr + \"', should be one of position, normal, uv, tangent or binormal\");\n \t\t\t}", "sourceBeforeFix": "VertexAttribute.Color()", "sourceAfterFix": "VertexAttribute.ColorUnpacked()"}
{"fixCommitSHA1": "3757a700a89638e5747d966bdaa8266b62c974c8", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "   }\n   @GwtIncompatible(\"Reader\")\n  private void testStreamingDecodes(BaseEncoding encoding, String encoded, String decoded)\n       throws IOException {\n     byte[] bytes;\n     try {\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();", "fixed": "   }\n   @GwtIncompatible(\"Reader\")\n  private static void testStreamingDecodes(BaseEncoding encoding, String encoded, String decoded)\n       throws IOException {\n     byte[] bytes;\n     try {\n       bytes = decoded.getBytes(\"UTF-8\");\n     } catch (UnsupportedEncodingException e) {\n       throw new AssertionError();", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "db28d9720672b0198731ddf5d4427fd90b01610c", "projectName": "apache.hbase", "bugType": "More Specific If", "problem": "         LOG.warn(\"Failed flushing store file, retring num=\" + i, e);\n         lastException = e;\n       }\n      if (lastException != null) {\n         try {\n           Thread.sleep(pauseTime);\n         } catch (InterruptedException e) {", "fixed": "         LOG.warn(\"Failed flushing store file, retring num=\" + i, e);\n         lastException = e;\n       }\n      if (lastException != null && i < (flushRetriesNumber - 1)) {\n         try {\n           Thread.sleep(pauseTime);\n         } catch (InterruptedException e) {", "sourceBeforeFix": "lastException != null", "sourceAfterFix": "lastException != null && i < (flushRetriesNumber - 1)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15856, value = \"Invalid url stream.\")\n     String invalidUrlStream();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10856, value = \"Invalid url stream.\")\n     String invalidUrlStream();\n     /**", "sourceBeforeFix": "id=15832", "sourceAfterFix": "id=10832"}
{"fixCommitSHA1": "3dddcc4cdf4a74ddbd4607c6aaee5bdd8ac46c27", "projectName": "gephi.gephi", "bugType": "Change Modifier", "problem": "     }\n     @Override\n    public List<Node> getSelectedUnderlyingNodes() {\n         List<Node> selected = new ArrayList<>();\n         for (Iterator<NodeModel> itr = octree.getNodeIterator(); itr.hasNext();) {\n             NodeModel nodeModel = itr.next();", "fixed": "     }\n     @Override\n    public synchronized List<Node> getSelectedUnderlyingNodes() {\n         List<Node> selected = new ArrayList<>();\n         for (Iterator<NodeModel> itr = octree.getNodeIterator(); itr.hasNext();) {\n             NodeModel nodeModel = itr.next();", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getUserListStatuses(String user, int id, Paging paging) throws TwitterException {\n        return Status.constructStatuses(get(getApiBaseURL() + V1 + user +\n                 \"/lists/\" + id + \"/statuses.json\", new PostParameter[0],\n                 paging.asPostParameterList(Paging.SMCP, Paging.PER_PAGE), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getUserListStatuses(String user, int id, Paging paging) throws TwitterException {\n        return Status.createStatuseList(get(getApiBaseURL() + V1 + user +\n                 \"/lists/\" + id + \"/statuses.json\", new PostParameter[0],\n                 paging.asPostParameterList(Paging.SMCP, Paging.PER_PAGE), true));\n     }", "sourceBeforeFix": "SavedSearch.constructSavedSearches(get(getBaseURL() + \"saved_searches.json\",true))", "sourceAfterFix": "SavedSearch.createSavedSearchList(get(getBaseURL() + \"saved_searches.json\",true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "           \"functions are set.\");\n   \n  private final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "           \"functions are set.\");\n   \n  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fb707d86ec1fec06b2c43fd4fd7df38aea776053", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "                 boolean skip = false;\n                 for (ParamValueMetaData prop : md.getContextParams()) {\n                     if (prop.getParamName().equals(ENABLE_PROPERTY)) {\n                        boolean explicitEnable = Boolean.parseBoolean(prop.getParamName());\n                         if(explicitEnable) {\n                             found = true;\n                         } else {", "fixed": "                 boolean skip = false;\n                 for (ParamValueMetaData prop : md.getContextParams()) {\n                     if (prop.getParamName().equals(ENABLE_PROPERTY)) {\n                        boolean explicitEnable = Boolean.parseBoolean(prop.getParamValue());\n                         if(explicitEnable) {\n                             found = true;\n                         } else {", "sourceBeforeFix": "prop.getParamName()", "sourceAfterFix": "prop.getParamValue()"}
{"fixCommitSHA1": "abf2f457b12dcb128ebc437d7b8cc5a3e37c20a5", "projectName": "druid-io.druid", "bugType": "Change Modifier", "problem": "    * User can override this method if there is a better way to perform bulk lookup\n    */\n  Map<String, String> applyAll(Iterable<String> keys)\n   {\n     if (keys == null) {\n       return Collections.emptyMap();", "fixed": "    * User can override this method if there is a better way to perform bulk lookup\n    */\n  public Map<String, String> applyAll(Iterable<String> keys)\n   {\n     if (keys == null) {\n       return Collections.emptyMap();", "sourceBeforeFix": "0", "sourceAfterFix": "1"}
{"fixCommitSHA1": "994da4e53abe98a0f0004d7bb8c57e08c621570d", "projectName": "Atmosphere.atmosphere", "bugType": "Same Function More Args", "problem": "         });\n         AtmosphereRequest request = new AtmosphereRequest.Builder().destroyable(false).body(\"yoComet\").pathInfo(\"/a\").build();\n        processor.open(w, request);\n         processor.invokeWebSocketProtocol(w, \"yoWebSocket\");\n         BroadcasterFactory.getDefault().lookup(\"/*\").broadcast(\"yoBroadcast\").get();", "fixed": "         });\n         AtmosphereRequest request = new AtmosphereRequest.Builder().destroyable(false).body(\"yoComet\").pathInfo(\"/a\").build();\n        processor.open(w, request, AtmosphereResponse.newInstance(framework.getAtmosphereConfig(), request, w));\n         processor.invokeWebSocketProtocol(w, \"yoWebSocket\");\n         BroadcasterFactory.getDefault().lookup(\"/*\").broadcast(\"yoBroadcast\").get();", "sourceBeforeFix": "processor.open(w,request)", "sourceAfterFix": "processor.open(w,request,AtmosphereResponse.newInstance(framework.getAtmosphereConfig(),request,w))"}
{"fixCommitSHA1": "35b36bca468581e8e8b5152a99c562f18a7d44b5", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         h1.shutdown();\n         h1 = Hazelcast.newHazelcastInstance(config);\n         assertClusterSize(2, h1);\n        assertClusterSize(2, h2);\n     }\n     protected void testJoin_With_DifferentBuildNumber(Config config) {", "fixed": "         h1.shutdown();\n         h1 = Hazelcast.newHazelcastInstance(config);\n         assertClusterSize(2, h1);\n        assertClusterSizeEventually(2, h2);\n     }\n     protected void testJoin_With_DifferentBuildNumber(Config config) {", "sourceBeforeFix": "assertClusterSize(2,h2)", "sourceAfterFix": "assertClusterSizeEventually(2,h2)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15841, value = \"Exception getting result from server %s: %s\")\n     String exceptionAwaitingResultFromServer(ServerIdentity server, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10841, value = \"Exception getting result from server %s: %s\")\n     String exceptionAwaitingResultFromServer(ServerIdentity server, String message);\n     /**", "sourceBeforeFix": "id=15834", "sourceAfterFix": "id=10834"}
{"fixCommitSHA1": "30e80f8c5c7f0bb692dfd8efeadb24d1cf840be6", "projectName": "netty.netty", "bugType": "Wrong Function Name", "problem": "                 try {\n                     if (!isSupported(msg)) {\n                         if (out == null) {\n                            out = ctx.nextOutboundMessageBuffer();\n                         }\n                         out.add(msg);\n                         unsupportedFound = true;", "fixed": "                 try {\n                     if (!isSupported(msg)) {\n                         if (out == null) {\n                            out = ctx.nextInboundMessageBuffer();\n                         }\n                         out.add(msg);\n                         unsupportedFound = true;", "sourceBeforeFix": "ctx.nextOutboundMessageBuffer()", "sourceAfterFix": "ctx.nextInboundMessageBuffer()"}
{"fixCommitSHA1": "9e623c9cb121353e3624042afde411b321e10999", "projectName": "netty.netty", "bugType": "Change Modifier", "problem": "         unterminatableExecutor = null;\n     }\n    public Executor getChannelFactoryExecutor() {\n         return unterminatableExecutor;\n     }\n }", "fixed": "         unterminatableExecutor = null;\n     }\n    public synchronized Executor getChannelFactoryExecutor() {\n         return unterminatableExecutor;\n     }\n }", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "65f815b3aaa4ca2aff782b35c1fa0d318f10387c", "projectName": "Atmosphere.atmosphere", "bugType": "Change Identifier Used", "problem": "             final Map<String, String> m = new HashMap<String, String>();\n             for (Map.Entry<String, U> e : handlers.entrySet()) {\n                 UriTemplate t = new UriTemplate(e.getKey());\n                logger.debug(\"Trying to map {} to {}\", t, path);\n                 if (t.match(path, m)) {\n                     handler = e.getValue();\n                    logger.debug(\"Mapped {} to {}\", t, e.getValue());\n                     break;\n                 }\n             }", "fixed": "             final Map<String, String> m = new HashMap<String, String>();\n             for (Map.Entry<String, U> e : handlers.entrySet()) {\n                 UriTemplate t = new UriTemplate(e.getKey());\n                logger.trace(\"Trying to map {} to {}\", t, path);\n                 if (t.match(path, m)) {\n                     handler = e.getValue();\n                    logger.trace(\"Mapped {} to {}\", t, e.getValue());\n                     break;\n                 }\n             }", "sourceBeforeFix": "logger.debug(\"Mapped {} to {}\",t,e.getValue())", "sourceAfterFix": "logger.trace(\"Mapped {} to {}\",t,e.getValue())"}
{"fixCommitSHA1": "4bf80610fd2a67d952312e808edebdb74ebc26bb", "projectName": "Graylog2.graylog2-server", "bugType": "Change Numeric Literal", "problem": "         final PaginatedList<TestDTO> page2 = dbService.findPaginatedWithQueryFilterAndSort(DBQuery.empty(), filter, DBSort.asc(\"title\"), 2, 2);\n         assertThat(page2.pagination().getCount()).isEqualTo(2);\n        assertThat(page2.pagination().getGlobalTotal()).isEqualTo(7);\n         assertThat(page2.delegate())\n                 .extracting(\"title\")\n                 .containsExactly(\"hello4\", \"hello5\");", "fixed": "         final PaginatedList<TestDTO> page2 = dbService.findPaginatedWithQueryFilterAndSort(DBQuery.empty(), filter, DBSort.asc(\"title\"), 2, 2);\n         assertThat(page2.pagination().getCount()).isEqualTo(2);\n        assertThat(page2.pagination().getGlobalTotal()).isEqualTo(5);\n         assertThat(page2.delegate())\n                 .extracting(\"title\")\n                 .containsExactly(\"hello4\", \"hello5\");", "sourceBeforeFix": "assertThat(page1reverse.pagination().getGlobalTotal()).isEqualTo(7)", "sourceAfterFix": "assertThat(page1reverse.pagination().getGlobalTotal()).isEqualTo(5)"}
{"fixCommitSHA1": "dd6dbd5cf29795ac5bd8f76b76c562d4737917b8", "projectName": "Alluxio.alluxio", "bugType": "Wrong Function Name", "problem": "     mWorkerId = workerId;\n     mFileId = fileId;\n     mLength = length;\n    mCheckpointPath = checkpointPath.getPath();\n     mOpTimeMs = opTimeMs;\n   }", "fixed": "     mWorkerId = workerId;\n     mFileId = fileId;\n     mLength = length;\n    mCheckpointPath = checkpointPath.toString();\n     mOpTimeMs = opTimeMs;\n   }", "sourceBeforeFix": "checkpointPath.getPath()", "sourceAfterFix": "checkpointPath.toString()"}
{"fixCommitSHA1": "885bfcae0994d0b56d6978dc7482f71be04cfe3b", "projectName": "Alluxio.alluxio", "bugType": "Wrong Function Name", "problem": "     PosixFileAttributeView view =\n         Files.getFileAttributeView(Paths.get(path), PosixFileAttributeView.class,\n             LinkOption.NOFOLLOW_LINKS);\n    UserPrincipal userPrincipal = lookupService.lookupPrincipalByGroupName(user);\n     view.setOwner(userPrincipal);\n   }", "fixed": "     PosixFileAttributeView view =\n         Files.getFileAttributeView(Paths.get(path), PosixFileAttributeView.class,\n             LinkOption.NOFOLLOW_LINKS);\n    UserPrincipal userPrincipal = lookupService.lookupPrincipalByName(user);\n     view.setOwner(userPrincipal);\n   }", "sourceBeforeFix": "lookupService.lookupPrincipalByGroupName(user)", "sourceAfterFix": "lookupService.lookupPrincipalByName(user)"}
{"fixCommitSHA1": "7926d45bf0b4b2877603d033a70f089324af4696", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "         }\n     }\n    private class MyProducer extends DefaultProducer {\n         public MyProducer(Endpoint endpoint) {\n             super(endpoint);", "fixed": "         }\n     }\n    private final class MyProducer extends DefaultProducer {\n         public MyProducer(Endpoint endpoint) {\n             super(endpoint);", "sourceBeforeFix": "2", "sourceAfterFix": "18"}
{"fixCommitSHA1": "4b6a875c285429e1630c1839872d9c2990364714", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "         assertNotNull(camel2);\n         MockEndpoint mock2 = camel2.getEndpoint(\"mock:result\", MockEndpoint.class);\n        mock2.expectedMinimumMessageCount(3);\n         mock2.assertIsSatisfied();", "fixed": "         assertNotNull(camel2);\n         MockEndpoint mock2 = camel2.getEndpoint(\"mock:result\", MockEndpoint.class);\n        mock2.expectedMinimumMessageCount(2);\n         mock2.assertIsSatisfied();", "sourceBeforeFix": "mock2.expectedMinimumMessageCount(3)", "sourceAfterFix": "mock2.expectedMinimumMessageCount(2)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public Trends getTrends() throws TwitterException {\n        return Trends.constructTrends(get(getSearchBaseURL() + \"trends.json\", false));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n      */\n     public Trends getTrends() throws TwitterException {\n        return Trends.createTrends(get(getSearchBaseURL() + \"trends.json\", false));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",null,true))"}
{"fixCommitSHA1": "6a9e8a7860257545e4381d1e18df58234ee6f7c6", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "template.sendBodyAndHeader(\"file:\n        Thread.sleep(2000);\n         int count = jdbc.queryForInt(\"select count(*) from books\");", "fixed": "template.sendBodyAndHeader(\"file:\n        Thread.sleep(3000);\n         int count = jdbc.queryForInt(\"select count(*) from books\");", "sourceBeforeFix": "Thread.sleep(2000)", "sourceAfterFix": "Thread.sleep(3000)"}
{"fixCommitSHA1": "a7f54a539a4c8f92f4895934480061a2ccbcd499", "projectName": "wildfly.wildfly", "bugType": "Wrong Function Name", "problem": "     }\n     private static void writeAttribute(XMLExtendedStreamWriter writer, ModelNode model, Attribute attribute) throws XMLStreamException {\n        attribute.getDefinition().getAttributeMarshaller().marshallAsAttribute(attribute.getDefinition(), model, true, writer);\n     }\n     private static void writeElement(XMLExtendedStreamWriter writer, ModelNode model, Attribute attribute) throws XMLStreamException {\n        attribute.getDefinition().getAttributeMarshaller().marshallAsElement(attribute.getDefinition(), model, true, writer);\n     }\n     private static void writeThreadPoolElements(XMLElement element, ThreadPoolResourceDefinition pool, XMLExtendedStreamWriter writer, ModelNode container) throws XMLStreamException {", "fixed": "     }\n     private static void writeAttribute(XMLExtendedStreamWriter writer, ModelNode model, Attribute attribute) throws XMLStreamException {\n        attribute.getDefinition().getMarshaller().marshallAsAttribute(attribute.getDefinition(), model, true, writer);\n     }\n     private static void writeElement(XMLExtendedStreamWriter writer, ModelNode model, Attribute attribute) throws XMLStreamException {\n        attribute.getDefinition().getMarshaller().marshallAsElement(attribute.getDefinition(), model, true, writer);\n     }\n     private static void writeThreadPoolElements(XMLElement element, ThreadPoolResourceDefinition pool, XMLExtendedStreamWriter writer, ModelNode container) throws XMLStreamException {", "sourceBeforeFix": "attribute.getDefinition().getAttributeMarshaller()", "sourceAfterFix": "attribute.getDefinition().getMarshaller()"}
{"fixCommitSHA1": "7012976421d9e593d8b276697b2fbbc9328b6fa5", "projectName": "libgdx.libgdx", "bugType": "Same Function More Args", "problem": " \t\n \tpublic Container<T> maxSize (float width, float height) {\n\t\tmaxSize(new Fixed(width));\n \t\treturn this;\n \t}", "fixed": " \t\n \tpublic Container<T> maxSize (float width, float height) {\n\t\tmaxSize(new Fixed(width), new Fixed(height));\n \t\treturn this;\n \t}", "sourceBeforeFix": "minSize(new Fixed(width))", "sourceAfterFix": "minSize(new Fixed(width),new Fixed(height))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     return additionalReplacements;\n   }\n  private final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     return additionalReplacements;\n   }\n  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetProgramiv (int program, int pname, IntBuffer params) {\r\n\t\tGL20.glGetProgram(program, pname, params);\r\n \t}\r\n \tpublic void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tEXTFramebufferObject.glGetRenderbufferParameterEXT(target, pname, params);\r\n \t}\r\n \tpublic String glGetShaderInfoLog (int shader) {\r", "fixed": " \t}\r\n \tpublic void glGetProgramiv (int program, int pname, IntBuffer params) {\r\n\t\tGL20.glGetProgramiv(program, pname, params);\r\n \t}\r\n \tpublic void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tEXTFramebufferObject.glGetRenderbufferParameterivEXT(target, pname, params);\r\n \t}\r\n \tpublic String glGetShaderInfoLog (int shader) {\r", "sourceBeforeFix": "GL20.glUniformMatrix4(location,transpose,toFloatBuffer(value,offset,count << 4))", "sourceAfterFix": "GL20.glUniformMatrix4fv(location,transpose,toFloatBuffer(value,offset,count << 4))"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetProgramiv (int program, int pname, IntBuffer params) {\r\n\t\tGL20.glGetProgram(program, pname, params);\r\n \t}\r\n \tpublic void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tEXTFramebufferObject.glGetRenderbufferParameterEXT(target, pname, params);\r\n \t}\r\n \tpublic String glGetShaderInfoLog (int shader) {\r", "fixed": " \t}\r\n \tpublic void glGetProgramiv (int program, int pname, IntBuffer params) {\r\n\t\tGL20.glGetProgramiv(program, pname, params);\r\n \t}\r\n \tpublic void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tEXTFramebufferObject.glGetRenderbufferParameterivEXT(target, pname, params);\r\n \t}\r\n \tpublic String glGetShaderInfoLog (int shader) {\r", "sourceBeforeFix": "GL11.glGetTexParameter(target,pname,params)", "sourceAfterFix": "GL11.glGetTexParameterfv(target,pname,params)"}
{"fixCommitSHA1": "f60f4dbdad22bbd4ef94ce1b01eb63f9adeb7659", "projectName": "alibaba.druid", "bugType": "Delete Throws Exception", "problem": "     }\r\n    public Number integerValue() throws NumberFormatException {\r\n         long result = 0;\r\n         boolean negative = false;\r\n         int i = np, max = np + sp;\r", "fixed": "     }\r\n    public Number integerValue() {\r\n         long result = 0;\r\n         boolean negative = false;\r\n         int i = np, max = np + sp;\r", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<DirectMessage> getDirectMessages(Paging paging) throws TwitterException {\n        return DirectMessage.constructDirectMessages(get(getBaseURL()\n                 + \"direct_messages.json\", null, paging.asPostParameterList(), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<DirectMessage> getDirectMessages(Paging paging) throws TwitterException {\n        return DirectMessage.createDirectMessageList(get(getBaseURL()\n                 + \"direct_messages.json\", null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "DirectMessage.constructDirectMessages(get(getBaseURL() + \"direct_messages.json\",true))", "sourceAfterFix": "DirectMessage.createDirectMessageList(get(getBaseURL() + \"direct_messages.json\",true))"}
{"fixCommitSHA1": "1dd94a41119b58bb9a341b6897b0916add1fd344", "projectName": "facebook.presto", "bugType": "Same Function More Args", "problem": "         shardManager.createTable(tableId, columns, false);\n         long transactionId = shardManager.beginTransaction();\n        shardManager.commitShards(transactionId, tableId, columns, shardNodes, Optional.empty());\n         Set<UUID> actual = shardManager.getExistingShardUuids(tableId, ImmutableSet.of(shard1, shard2, UUID.randomUUID()));\n         Set<UUID> expected = ImmutableSet.of(shard1, shard2);\n         assertEquals(actual, expected);", "fixed": "         shardManager.createTable(tableId, columns, false);\n         long transactionId = shardManager.beginTransaction();\n        shardManager.commitShards(transactionId, tableId, columns, shardNodes, Optional.empty(), 0);\n         Set<UUID> actual = shardManager.getExistingShardUuids(tableId, ImmutableSet.of(shard1, shard2, UUID.randomUUID()));\n         Set<UUID> expected = ImmutableSet.of(shard1, shard2);\n         assertEquals(actual, expected);", "sourceBeforeFix": "shardManager.commitShards(transactionId,tableId,columns,shardNodes,Optional.empty())", "sourceAfterFix": "shardManager.commitShards(transactionId,tableId,columns,shardNodes,Optional.empty(),0)"}
{"fixCommitSHA1": "4b52e5d010469405c1ec24baa2f8457f3eada222", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic boolean touchUp (int screenX, int screenY, int pointer, int button) {\r\n\t\tInputProcessor[] items = processors.begin();\r\n \t\ttry {\r\n \t\t\tfor (int i = 0, n = processors.size; i < n; i++)\r\n\t\t\t\tif (items[i].touchUp(screenX, screenY, pointer, button)) return true;\r\n \t\t} finally {\r\n \t\t\tprocessors.end();\r\n \t\t}\r", "fixed": " \t}\r\n \tpublic boolean touchUp (int screenX, int screenY, int pointer, int button) {\r\n\t\tObject[] items = processors.begin();\r\n \t\ttry {\r\n \t\t\tfor (int i = 0, n = processors.size; i < n; i++)\r\n\t\t\t\tif (((InputProcessor)items[i]).touchUp(screenX, screenY, pointer, button)) return true;\r\n \t\t} finally {\r\n \t\t\tprocessors.end();\r\n \t\t}\r", "sourceBeforeFix": "InputProcessor[]", "sourceAfterFix": "Object[]"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  private final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * replacement values for the classnames.  If null, the raw class names are\n    * inlined.\n    */\n  final PassFactory closureReplaceGetCssName =\n       new PassFactory(\"renameCssNames\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "1dc7ebfc26b5ef1f88e84702582715eb631202db", "projectName": "Graylog2.graylog2-server", "bugType": "Change Identifier Used", "problem": "     public void delete(String index) throws APIException, IOException {\n        api.path(routes.IndicesResource().single(index))\n                 .timeout(apiTimeout(\"index_delete\", 60, TimeUnit.SECONDS))\n                 .expect(204)\n                 .execute();", "fixed": "     public void delete(String index) throws APIException, IOException {\n        api.path(routes.IndicesResource().delete(index))\n                 .timeout(apiTimeout(\"index_delete\", 60, TimeUnit.SECONDS))\n                 .expect(204)\n                 .execute();", "sourceBeforeFix": "routes.IndicesResource().single(index)", "sourceAfterFix": "routes.IndicesResource().delete(index)"}
{"fixCommitSHA1": "ca588103009cd6ffe00ee721ac9bb9832d3a182f", "projectName": "openhab.openhab", "bugType": "Change Identifier Used", "problem": " \tpublic static Range getRange(int startMonth, int startDay, int endMonth, int endDay) {\n \t\tCalendar start = Calendar.getInstance();\n \t\tstart.set(Calendar.MONTH, startMonth);\n\t\tstart.set(Calendar.DAY_OF_MONTH, startMonth);\n \t\tstart = truncateToMidnight(start);\n \t\tCalendar end = Calendar.getInstance();", "fixed": " \tpublic static Range getRange(int startMonth, int startDay, int endMonth, int endDay) {\n \t\tCalendar start = Calendar.getInstance();\n \t\tstart.set(Calendar.MONTH, startMonth);\n\t\tstart.set(Calendar.DAY_OF_MONTH, startDay);\n \t\tstart = truncateToMidnight(start);\n \t\tCalendar end = Calendar.getInstance();", "sourceBeforeFix": "start.set(Calendar.DAY_OF_MONTH,startMonth)", "sourceAfterFix": "start.set(Calendar.DAY_OF_MONTH,startDay)"}
{"fixCommitSHA1": "d33c0ebf8f8f52fb6fb82d615cec50a10627d267", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t\tpublic void setPort(Integer port) {\n \t\t\tAssert.notNull(port, \"port must not be null\");\n\t\t\tthis.port = port.toString();\n \t\t}\n\t\tpublic String getPort() {\n \t\t\treturn this.port;\n \t\t}", "fixed": " \t\tpublic void setPort(Integer port) {\n \t\t\tAssert.notNull(port, \"port must not be null\");\n\t\t\tthis.port = port;\n \t\t}\n\t\tpublic Integer getPort() {\n \t\t\treturn this.port;\n \t\t}", "sourceBeforeFix": "/**   * SSH port.  */ private String port=\"2000\"; ", "sourceAfterFix": "/**   * SSH port.  */ private Integer port=2000; "}
{"fixCommitSHA1": "150cc0a5beacbec117eb141846a4c6f1aeab5847", "projectName": "Atmosphere.atmosphere", "bugType": "Same Function More Args", "problem": "                     invokeAtmosphereHandler(r);\n                     try {\n                        r.getResponse().sendError(503);\n                         r.getResponse().getOutputStream().close();\n                     } catch (Throwable t) {\n                         try {", "fixed": "                     invokeAtmosphereHandler(r);\n                     try {\n                        r.getResponse().sendError(503, \"Remotely closed\");\n                         r.getResponse().getOutputStream().close();\n                     } catch (Throwable t) {\n                         try {", "sourceBeforeFix": "r.getResponse().sendError(503)", "sourceAfterFix": "r.getResponse().sendError(503,\"Remotely closed\")"}
{"fixCommitSHA1": "a421ca3133ddf727a147e87455a5511444d8d4bb", "projectName": "google.auto", "bugType": "Change Identifier Used", "problem": "     return methodDescriptors;\n   }\n  ImmutableSet<ImplemetationMethodDescriptor> implementationMethodDescriptors() {\n     return implementationMethodDescriptors;\n   }", "fixed": "     return methodDescriptors;\n   }\n  ImmutableSet<ImplementationMethodDescriptor> implementationMethodDescriptors() {\n     return implementationMethodDescriptors;\n   }", "sourceBeforeFix": "ImmutableSet<ImplemetationMethodDescriptor>", "sourceAfterFix": "ImmutableSet<ImplementationMethodDescriptor>"}
{"fixCommitSHA1": "312ba4238e15b4f95054ca33ee1b3604afbd8d74", "projectName": "openmrs.openmrs-core", "bugType": "Wrong Function Name", "problem": " \t\t\t\t\tif (OpenmrsUtil.compareWithNullAsLatest(patientState.getEndDate(), patientState.getStartDate()) < 0) {\r\n \t\t\t\t\t\terrors.rejectValue(\"states\", \"PatientState.error.endDateCannotBeBeforeStartDate\");\r\n \t\t\t\t\t\treturn;\r\n\t\t\t\t\t} else if (statesAndStartDates.contains(patientState.getState().getId() + \"\"\r\n \t\t\t\t\t        + patientState.getStartDate())) {\r\n \t\t\t\t\t\terrors.rejectValue(\"states\", \"PatientState.error.duplicatePatientStates\");\r", "fixed": " \t\t\t\t\tif (OpenmrsUtil.compareWithNullAsLatest(patientState.getEndDate(), patientState.getStartDate()) < 0) {\r\n \t\t\t\t\t\terrors.rejectValue(\"states\", \"PatientState.error.endDateCannotBeBeforeStartDate\");\r\n \t\t\t\t\t\treturn;\r\n\t\t\t\t\t} else if (statesAndStartDates.contains(patientState.getState().getUuid() + \"\"\r\n \t\t\t\t\t        + patientState.getStartDate())) {\r\n \t\t\t\t\t\terrors.rejectValue(\"states\", \"PatientState.error.duplicatePatientStates\");\r", "sourceBeforeFix": "patientState.getState().getId()", "sourceAfterFix": "patientState.getState().getUuid()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15864, value = \"Error obtaining input stream from URL %s -- %s\")\n     String errorObtainingUrlStream(String url, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10864, value = \"Error obtaining input stream from URL %s -- %s\")\n     String errorObtainingUrlStream(String url, String message);\n     /**", "sourceBeforeFix": "id=15862", "sourceAfterFix": "id=10862"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_tw() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016/05/06\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_tw() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016/05/06\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "338d4a036b25526d2e5bf53c5e49f56ccbbf356f", "projectName": "libgdx.libgdx", "bugType": "Change Numeric Literal", "problem": " \t */\r\n \tpublic void beginCache () {\r\n \t\tif (currentCache != null) throw new IllegalStateException(\"endCache must be called before begin.\");\r\n\t\tcurrentCache = new Cache(caches.size(), mesh.getNumVertices() / 2 * 6);\r\n \t\tcaches.add(currentCache);\r\n \t\tmesh.getVerticesBuffer().compact();\r\n \t}\r", "fixed": " \t */\r\n \tpublic void beginCache () {\r\n \t\tif (currentCache != null) throw new IllegalStateException(\"endCache must be called before begin.\");\r\n\t\tcurrentCache = new Cache(caches.size(), mesh.getNumVertices() / 4 * 6);\r\n \t\tcaches.add(currentCache);\r\n \t\tmesh.getVerticesBuffer().compact();\r\n \t}\r", "sourceBeforeFix": "mesh.getNumVertices() / 2", "sourceAfterFix": "mesh.getNumVertices() / 4"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "3d3aad91880410164be0372875fe702af44fa279", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "       if ((fsType.equalsIgnoreCase(\"tmpfs\") || fsType.equalsIgnoreCase(\"ramfs\"))\n           && size < storageDir.getCapacityBytes()) {\n         throw new IllegalStateException(String.format(\n            \"tmpfs is smaller than the configured size: tmpfs size: %s, configured size: %s\", size,\n            storageDir.getCapacityBytes()));\n       }\n     }\n   }", "fixed": "       if ((fsType.equalsIgnoreCase(\"tmpfs\") || fsType.equalsIgnoreCase(\"ramfs\"))\n           && size < storageDir.getCapacityBytes()) {\n         throw new IllegalStateException(String.format(\n            \"tmpfs is smaller than the configured size: tmpfs size: %s, configured size: %s\",\n            FormatUtils.getSizeFromBytes(size),\n            FormatUtils.getSizeFromBytes(storageDir.getCapacityBytes())));\n       }\n     }\n   }", "sourceBeforeFix": "LOG.warn(\"Failed to get mount information: {}\",e.getMessage())", "sourceAfterFix": "LOG.debug(\"Failed to get mount information: {}\",e.getMessage())"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r", "fixed": " \t}\r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r", "sourceBeforeFix": "EXTFramebufferObject.glGetRenderbufferParameterEXT(target,pname,params)", "sourceAfterFix": "EXTFramebufferObject.glGetRenderbufferParameterivEXT(target,pname,params)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  private final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "3079a06d9695ca88467c96c40c5608afef87fa5d", "projectName": "facebook.presto", "bugType": "Wrong Function Name", "problem": "                 exchange.getPartitioningScheme().getPartitioning(),\n                 outputBuilder.build(),\n                 exchange.getPartitioningScheme().getHashColumn(),\n                exchange.getPartitioningScheme().isReplicateNulls(),\n                 exchange.getPartitioningScheme().getBucketToPartition());\n         PlanNode result = new ExchangeNode(", "fixed": "                 exchange.getPartitioningScheme().getPartitioning(),\n                 outputBuilder.build(),\n                 exchange.getPartitioningScheme().getHashColumn(),\n                exchange.getPartitioningScheme().isReplicateNullsAndAny(),\n                 exchange.getPartitioningScheme().getBucketToPartition());\n         PlanNode result = new ExchangeNode(", "sourceBeforeFix": "exchange.getPartitioningScheme().isReplicateNulls()", "sourceAfterFix": "exchange.getPartitioningScheme().isReplicateNullsAndAny()"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface ValidatorEndpointBuilder\n            extends\n                EndpointProducerBuilder {\n         default AdvancedValidatorEndpointBuilder advanced() {\n             return (AdvancedValidatorEndpointBuilder) this;\n         }", "fixed": "     \n    public interface ValidatorEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedValidatorEndpointBuilder advanced() {\n             return (AdvancedValidatorEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkConsts =\n       new PassFactory(\"checkConsts\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15869, value = \"Unknown %s %s\")\n     String unknown(String name, String value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10869, value = \"Unknown %s %s\")\n     String unknown(String name, String value);\n     /**", "sourceBeforeFix": "id=15870", "sourceAfterFix": "id=10870"}
{"fixCommitSHA1": "a5f1f8199f76349cbcb39ba969e51dadc65f2c63", "projectName": "stanfordnlp.CoreNLP", "bugType": "Change Numeric Literal", "problem": "     String englishPOSTestPath = \"/u/nlp/data/pos-tagger/english/test-wsj-22-24\";\n     List<String> sentences = readInPOSData(englishPOSTestPath);\n     double ENGLISH_BIDIRECTIONAL_TOKEN_ACCURACY = .972;\n    double ENGLISH_BIDIRECTIONAL_SENTENCE_ACCURACY = .564;\n     runPOSTest(sentences, \"_\", englishBiDirectionalPipeline,\n         ENGLISH_BIDIRECTIONAL_TOKEN_ACCURACY, ENGLISH_BIDIRECTIONAL_SENTENCE_ACCURACY,\n         \"English BiDirectional\", false);", "fixed": "     String englishPOSTestPath = \"/u/nlp/data/pos-tagger/english/test-wsj-22-24\";\n     List<String> sentences = readInPOSData(englishPOSTestPath);\n     double ENGLISH_BIDIRECTIONAL_TOKEN_ACCURACY = .972;\n    double ENGLISH_BIDIRECTIONAL_SENTENCE_ACCURACY = .563;\n     runPOSTest(sentences, \"_\", englishBiDirectionalPipeline,\n         ENGLISH_BIDIRECTIONAL_TOKEN_ACCURACY, ENGLISH_BIDIRECTIONAL_SENTENCE_ACCURACY,\n         \"English BiDirectional\", false);", "sourceBeforeFix": "ENGLISH_BIDIRECTIONAL_SENTENCE_ACCURACY=.564", "sourceAfterFix": "ENGLISH_BIDIRECTIONAL_SENTENCE_ACCURACY=.563"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8c5369562390bee531eb35c00744821b0c4821e3", "projectName": "xetorthio.jedis", "bugType": "Change Identifier Used", "problem": "       final int offset, final int count) {\n     checkIsInMultiOrPipeline();\n     client.zrangeByScoreWithScores(key, min, max, offset, count);\n    return getBinaryTupledSet();\n   }\n   @Override", "fixed": "       final int offset, final int count) {\n     checkIsInMultiOrPipeline();\n     client.zrangeByScoreWithScores(key, min, max, offset, count);\n    return getTupledSet();\n   }\n   @Override", "sourceBeforeFix": "getBinaryTupledSet()", "sourceAfterFix": "getTupledSet()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15870, value = \"Unknown server group %s\")\n     IllegalStateException unknownServerGroup(String serverGroup);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10870, value = \"Unknown server group %s\")\n     IllegalStateException unknownServerGroup(String serverGroup);\n     /**", "sourceBeforeFix": "id=15832", "sourceAfterFix": "id=10832"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "           \"functions are set.\");\n   \n  private final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "           \"functions are set.\");\n   \n  final PassFactory generateExports =\n       new PassFactory(\"generateExports\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r", "fixed": " \t}\r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r", "sourceBeforeFix": "GL20.glUniform4(location,toFloatBuffer(v,offset,count << 2))", "sourceAfterFix": "GL20.glUniform4fv(location,toFloatBuffer(v,offset,count << 2))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShader(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "fixed": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShaderiv(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "sourceBeforeFix": "GL20.glUniform4(location,toIntBuffer(v,offset,count << 2))", "sourceAfterFix": "GL20.glUniform4iv(location,toIntBuffer(v,offset,count << 2))"}
{"fixCommitSHA1": "cb84b2788aeed6aad2bc4b1acb98290e060861e2", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "       Assert.assertEquals(1, result.size());\n       hbck.assigns(Arrays.asList(result.keySet().toArray(new String[0])).stream()\n           .map(regionName -> regionName.split(\"\\\\.\")[1]).collect(Collectors.toList()));\n      ProcedureTestingUtility.waitNoProcedureRunning(master.getMasterProcedureExecutor());\n       result = hbck.getFailedSplitMergeLegacyRegions(Arrays.asList(TableName.valueOf(testTable)));\n       Assert.assertEquals(0, result.size());", "fixed": "       Assert.assertEquals(1, result.size());\n       hbck.assigns(Arrays.asList(result.keySet().toArray(new String[0])).stream()\n           .map(regionName -> regionName.split(\"\\\\.\")[1]).collect(Collectors.toList()));\n      ProcedureTestingUtility.waitAllProcedures(master.getMasterProcedureExecutor());\n       result = hbck.getFailedSplitMergeLegacyRegions(Arrays.asList(TableName.valueOf(testTable)));\n       Assert.assertEquals(0, result.size());", "sourceBeforeFix": "ProcedureTestingUtility.waitNoProcedureRunning(master.getMasterProcedureExecutor())", "sourceAfterFix": "ProcedureTestingUtility.waitAllProcedures(master.getMasterProcedureExecutor())"}
{"fixCommitSHA1": "e99aac5890b67ae0705b0e970f657239ee9ee1ab", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "             op.run();\n             op.afterRun();\n         }\n        getOrCreateContainer().unlock(dataKey, caller, threadId);\n     }\n     protected void writeInternal(ObjectDataOutput out) throws IOException {", "fixed": "             op.run();\n             op.afterRun();\n         }\n        getOrCreateContainer().forceUnlock(dataKey);\n     }\n     protected void writeInternal(ObjectDataOutput out) throws IOException {", "sourceBeforeFix": "getOrCreateContainer().unlock(dataKey,caller,threadId)", "sourceAfterFix": "getOrCreateContainer().forceUnlock(dataKey)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface CxfRsEndpointBuilder\n             extends\n                 CxfRsEndpointConsumerBuilder, CxfRsEndpointProducerBuilder {\n         default AdvancedCxfRsEndpointBuilder advanced() {", "fixed": "     \n    public interface CxfRsEndpointBuilder\n             extends\n                 CxfRsEndpointConsumerBuilder, CxfRsEndpointProducerBuilder {\n         default AdvancedCxfRsEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkShadowVars =\n       new PassFactory(\"variableShadowDeclarationCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsText(String path) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), 1, null);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsText(String path) {\n \t\treturn writeAsText(this, path, new WriteFormatAsText<OUT>(), 1, null);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "6bae902bd35ed4f57e7a5d612b7ad9b72f4559bc", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "   public void testCheckTreeEqualsBooleanSame() {\n     Node node1 = new Node(1);\n    assertEquals(true, node1.checkTreeEqualsSilent(node1));\n   }\n   public void testCheckTreeEqualsBooleanDifferent() {\n     Node node1 = new Node(1);\n     Node node2 = new Node(2);\n    assertEquals(false, node1.checkTreeEqualsSilent(node2));\n   }\n   public void testCheckTreeEqualsImplDifferentIncProp() {", "fixed": "   public void testCheckTreeEqualsBooleanSame() {\n     Node node1 = new Node(1);\n    assertEquals(true, node1.isEquivalentTo(node1));\n   }\n   public void testCheckTreeEqualsBooleanDifferent() {\n     Node node1 = new Node(1);\n     Node node2 = new Node(2);\n    assertEquals(false, node1.isEquivalentTo(node2));\n   }\n   public void testCheckTreeEqualsImplDifferentIncProp() {", "sourceBeforeFix": "node1.checkTreeEqualsSilent(node2)", "sourceAfterFix": "node1.isEquivalentTo(node2)"}
{"fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "projectName": "Alluxio.alluxio", "bugType": "Change Operand ", "problem": "   public static void createFiles() throws IOException {\n     long startTimeMs = CommonUtils.getCurrentMs();\n    for (int k = 0; k < THREADS; k ++) {\n       int fileId = MTC.createFile(FILE_NAME + (k + BASE_FILE_NUMBER));\n       CommonUtils.printTimeTakenMs(startTimeMs, LOG, \"user_createFiles with fileId \" + fileId);\n     }", "fixed": "   public static void createFiles() throws IOException {\n     long startTimeMs = CommonUtils.getCurrentMs();\n    for (int k = 0; k < FILES; k++) {\n       int fileId = MTC.createFile(FILE_NAME + (k + BASE_FILE_NUMBER));\n       CommonUtils.printTimeTakenMs(startTimeMs, LOG, \"user_createFiles with fileId \" + fileId);\n     }", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "pId + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<Status> getPublicTimeline() throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() +\n                 \"statuses/public_timeline.json\", false));\n     }", "fixed": "      */\n     public ResponseList<Status> getPublicTimeline() throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() +\n                 \"statuses/public_timeline.json\", false));\n     }", "sourceBeforeFix": "SavedSearch.constructSavedSearches(get(getBaseURL() + \"saved_searches.json\",true))", "sourceAfterFix": "SavedSearch.createSavedSearchList(get(getBaseURL() + \"saved_searches.json\",true))"}
{"fixCommitSHA1": "0e2a0eede5bf85f3c1f64e5752501eddf9ab7202", "projectName": "google.guava", "bugType": "Change Identifier Used", "problem": "     LONG_MANY_VALUES_STATS_SNAPSHOT = accumulator.snapshot();\n   }\n  static final List<Stats> ALL_STATS =\n       ImmutableList.of(\n           EMPTY_STATS_VARARGS,\n           EMPTY_STATS_ITERABLE,", "fixed": "     LONG_MANY_VALUES_STATS_SNAPSHOT = accumulator.snapshot();\n   }\n  static final ImmutableList<Stats> ALL_STATS =\n       ImmutableList.of(\n           EMPTY_STATS_VARARGS,\n           EMPTY_STATS_ITERABLE,", "sourceBeforeFix": "List<Stats>", "sourceAfterFix": "ImmutableList<Stats>"}
{"fixCommitSHA1": "af6a9484ccb210facdbc5995dcf4836f126e8d04", "projectName": "Alluxio.alluxio", "bugType": "Change Unary Operator\t", "problem": "               unmountInternal(alluxioUriToDel);\n             } else if (!deleteOptions.isAlluxioOnly()) {\n              failedToDelete = ufsDeleter.delete(alluxioUriToDel, delInode);\n             }\n           } catch (InvalidPathException e) {\n             LOG.warn(e.getMessage());", "fixed": "               unmountInternal(alluxioUriToDel);\n             } else if (!deleteOptions.isAlluxioOnly()) {\n              failedToDelete = !ufsDeleter.delete(alluxioUriToDel, delInode);\n             }\n           } catch (InvalidPathException e) {\n             LOG.warn(e.getMessage());", "sourceBeforeFix": "ufsDeleter.delete(alluxioUriToDel,delInode)", "sourceAfterFix": "!ufsDeleter.delete(alluxioUriToDel,delInode)"}
{"fixCommitSHA1": "ddb852cdf7da29827fcab0b25a2b2ed6ee443cf9", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "                 RouteContext routeContext = exchange.getUnitOfWork() != null ? exchange.getUnitOfWork().getRouteContext() : null;\n                asyncProducer = createErrorHandler(routeContext, exchange, asyncProducer);\n                 exchange.setProperty(Exchange.TO_ENDPOINT, endpoint.getEndpointUri());", "fixed": "                 RouteContext routeContext = exchange.getUnitOfWork() != null ? exchange.getUnitOfWork().getRouteContext() : null;\n                asyncProducer = createErrorHandler(routeContext, exchange, asyncProducer, endpoint);\n                 exchange.setProperty(Exchange.TO_ENDPOINT, endpoint.getEndpointUri());", "sourceBeforeFix": "RouteContext key", "sourceAfterFix": "String key"}
{"fixCommitSHA1": "55ed50c4975cf694828d46ee9ca32ce72a9ef913", "projectName": "clojure.clojure", "bugType": "Wrong Function Name", "problem": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 9:\r\n\t\t\treturn invoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "fixed": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 9:\r\n\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "sourceBeforeFix": "invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())", "sourceAfterFix": "doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 15832, value = \"There is already a registered host named '%s'\")\n     String slaveAlreadyRegistered(String slaveName);\n     /**", "fixed": "      *\n      * @return a message for the error.\n      */\n    @Message(id = 10832, value = \"There is already a registered host named '%s'\")\n     String slaveAlreadyRegistered(String slaveName);\n     /**", "sourceBeforeFix": "id=15840", "sourceAfterFix": "id=10840"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory removeUnusedVars =\n       new PassFactory(\"removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "ce7567c23bf357a2ab98a6f11bd112f36f8177ba", "projectName": "apache.hbase", "bugType": "Same Function More Args", "problem": "     assertEquals(response.getCode(), 200);\n    HTable table = new HTable(TABLE);\n     Get get = new Get(Bytes.toBytes(ROW_1));\n     get.addFamily(Bytes.toBytes(CFA));\n     get.addFamily(Bytes.toBytes(CFB));", "fixed": "     assertEquals(response.getCode(), 200);\n    HTable table = new HTable(TEST_UTIL.getConfiguration(), TABLE);\n     Get get = new Get(Bytes.toBytes(ROW_1));\n     get.addFamily(Bytes.toBytes(CFA));\n     get.addFamily(Bytes.toBytes(CFB));", "sourceBeforeFix": "new HTable(TABLE)", "sourceAfterFix": "new HTable(TEST_UTIL.getConfiguration(),TABLE)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  private final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Creates synthetic blocks to prevent FoldConstants from moving code\n    * past markers in the source.\n    */\n  final PassFactory createSyntheticBlocks =\n       new PassFactory(\"createSyntheticBlocks\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory optimizeArgumentsArray =\n       new PassFactory(\"optimizeArgumentsArray\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface PropertiesEndpointBuilder\n             extends\n                 PropertiesEndpointConsumerBuilder, PropertiesEndpointProducerBuilder {\n         default AdvancedPropertiesEndpointBuilder advanced() {", "fixed": "     \n    public interface PropertiesEndpointBuilder\n             extends\n                 PropertiesEndpointConsumerBuilder, PropertiesEndpointProducerBuilder {\n         default AdvancedPropertiesEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory operaCompoundAssignFix =\n       new PassFactory(\"operaCompoundAssignFix\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory aliasExternals =\n       new PassFactory(\"aliasExternals\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "4acec50c8afb95544b08a6dbdda743264af69909", "projectName": "alibaba.dubbo", "bugType": "Change Identifier Used", "problem": "         service.setAddress(url.getHost());\n         service.setPort(url.getPort());\n         service.setId(buildId(url));\n        service.setName(url.getServiceInterface());\n         service.setCheck(buildCheck(url));\n         service.setTags(buildTags(url));\n         service.setMeta(Collections.singletonMap(URL_META_KEY, url.toFullString()));", "fixed": "         service.setAddress(url.getHost());\n         service.setPort(url.getPort());\n         service.setId(buildId(url));\n        service.setName(url.getServiceKey());\n         service.setCheck(buildCheck(url));\n         service.setTags(buildTags(url));\n         service.setMeta(Collections.singletonMap(URL_META_KEY, url.toFullString()));", "sourceBeforeFix": "url.getServiceInterface()", "sourceAfterFix": "url.getServiceKey()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15840, value = \"Interrupted waiting for result from server %s\")\n     String interruptedAwaitingResultFromServer(ServerIdentity server);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10840, value = \"Interrupted waiting for result from server %s\")\n     String interruptedAwaitingResultFromServer(ServerIdentity server);\n     /**", "sourceBeforeFix": "id=15831", "sourceAfterFix": "id=10831"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface SplunkEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedSplunkEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface SplunkEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedSplunkEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15843, value = \"Invalid rollout plan. Plan operations affect server groups %s that are not reflected in the rollout plan\")\n     String invalidRolloutPlan(Set<String> groups);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10843, value = \"Invalid rollout plan. Plan operations affect server groups %s that are not reflected in the rollout plan\")\n     String invalidRolloutPlan(Set<String> groups);\n     /**", "sourceBeforeFix": "id=15862", "sourceAfterFix": "id=10862"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "486b290863a66641b0ec30dbf2d9e349733cae44", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "   public void split(final String tableNameOrRegionName,\n     final String splitPoint) throws IOException, InterruptedException {\n    split(Bytes.toBytesBinary(tableNameOrRegionName), Bytes.toBytesBinary(splitPoint));\n   }\n   /**", "fixed": "   public void split(final String tableNameOrRegionName,\n     final String splitPoint) throws IOException, InterruptedException {\n    split(Bytes.toBytes(tableNameOrRegionName), Bytes.toBytes(splitPoint));\n   }\n   /**", "sourceBeforeFix": "Bytes.toBytesBinary(tableNameOrRegionName)", "sourceAfterFix": "Bytes.toBytes(tableNameOrRegionName)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15838, value = \"Unexplained failure\")\n     String unexplainedFailure();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10838, value = \"Unexplained failure\")\n     String unexplainedFailure();\n     /**", "sourceBeforeFix": "id=15842", "sourceAfterFix": "id=10842"}
{"fixCommitSHA1": "f33244ce792d0d1e420f55b222d56db0551d0bfb", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "                 headers.put(name, value);\n             }\n         }\n        if (request.getMethod().equals(\"POST\") && request.getContentType() != null && request.getContentType().equals(\"application/x-www-form-urlencoded\")) {\n             String charset = request.getCharacterEncoding();\n             if (charset == null) {\n                 charset = \"UTF-8\";", "fixed": "                 headers.put(name, value);\n             }\n         }\n        if (request.getMethod().equals(\"POST\") && request.getContentType() != null && request.getContentType().startsWith(\"application/x-www-form-urlencoded\")) {\n             String charset = request.getCharacterEncoding();\n             if (charset == null) {\n                 charset = \"UTF-8\";", "sourceBeforeFix": "request.getContentType().equals(\"application/x-www-form-urlencoded\")", "sourceAfterFix": "request.getContentType().startsWith(\"application/x-www-form-urlencoded\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "3ee84b5ac2da10343a88e7c360871d9547ebdcf5", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "     @Test\n     public void testConstructor() {\n        assertUtilityConstructor(BitSetUtils.class);\n     }\n     @Test", "fixed": "     @Test\n     public void testConstructor() {\n        assertUtilityConstructor(SetUtil.class);\n     }\n     @Test", "sourceBeforeFix": "BitSetUtils.class", "sourceAfterFix": "SetUtil.class"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<Status> getUserTimeline(String id, Paging paging)\n             throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline/\" + id + \".json\",\n                 null, paging.asPostParameterList(), http.isAuthenticationEnabled()));\n     }", "fixed": "      */\n     public ResponseList<Status> getUserTimeline(String id, Paging paging)\n             throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline/\" + id + \".json\",\n                 null, paging.asPostParameterList(), http.isAuthenticationEnabled()));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_to_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_to_me.json\",null,true))"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public Trends getCurrentTrends() throws TwitterException {\n        return Trends.constructTrendsList(get(getSearchBaseURL() + \"trends/current.json\"\n                 , false)).get(0);\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public Trends getCurrentTrends() throws TwitterException {\n        return Trends.createTrendsList(get(getSearchBaseURL() + \"trends/current.json\"\n                 , false)).get(0);\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/home_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/home_timeline.json\",true))"}
{"fixCommitSHA1": "3dddcc4cdf4a74ddbd4607c6aaee5bdd8ac46c27", "projectName": "gephi.gephi", "bugType": "Change Modifier", "problem": "     }\n     @Override\n    public void mouseMove() {\n         if (vizConfig.isSelectionEnable() && rectangleSelection) {\n             Rectangle rectangle = (Rectangle) currentSelectionArea;", "fixed": "     }\n     @Override\n    public synchronized void mouseMove() {\n         if (vizConfig.isSelectionEnable() && rectangleSelection) {\n             Rectangle rectangle = (Rectangle) currentSelectionArea;", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "2f880c73edb600ab92cdd580ac74f7388b5c6135", "projectName": "Alluxio.alluxio", "bugType": "Change Modifier", "problem": "     }\n   }\n  public void rename(int fileId, String dstPath) {\n     if (INACTIVE) {\n       return;\n     }", "fixed": "     }\n   }\n  public synchronized void rename(int fileId, String dstPath) {\n     if (INACTIVE) {\n       return;\n     }", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "d55fc4de68d1c8d9a5aff883e2c5f84ad02aa0b8", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "     @Test\n     public void testConfiguration() throws Exception {\n        assertNotPresent(GsonConverter.class);\n         assertPresent(JacksonConverter.class);\n     }", "fixed": "     @Test\n     public void testConfiguration() throws Exception {\n        assertPresent(GsonConverter.class);\n         assertPresent(JacksonConverter.class);\n     }", "sourceBeforeFix": "assertNotPresent(GsonConverter.class)", "sourceAfterFix": "assertPresent(GsonConverter.class)"}
{"fixCommitSHA1": "79946366e1ab141ef2b595e0079dcac7b913da2b", "projectName": "checkstyle.checkstyle", "bugType": "Wrong Function Name", "problem": "         checkConfig.addAttribute(\"matchDirectoryStructure\", \"false\");\n         final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;\n        verify(checkConfig, getPath(\"InputPackageDeclarationDiffDirectoryAtParent.java\"), expected);\n     }\n     @Test", "fixed": "         checkConfig.addAttribute(\"matchDirectoryStructure\", \"false\");\n         final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;\n        verify(checkConfig,\n                getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtParent.java\"),\n                expected);\n     }\n     @Test", "sourceBeforeFix": "getPath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\")", "sourceAfterFix": "getNonCompilablePath(\"InputPackageDeclarationDiffDirectoryAtSubpackage.java\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory chainCalls =\n       new PassFactory(\"chainCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleAlternativesWithCommonLabel_1() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(561);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "fixed": " \tpublic void testMultipleAlternativesWithCommonLabel_1() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(560);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {print($e.v)};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "sourceBeforeFix": "new StringBuilder(239)", "sourceAfterFix": "new StringBuilder(238)"}
{"fixCommitSHA1": "af87fe0e2580cafb6b563688f119b3d40ae100f2", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "     }\n     private static ModelControllerClient createClient2() throws UnknownHostException {\n        return ModelControllerClient.Factory.create(InetAddress.getByName(TestSuiteEnvironment.getServerAddress()),\n                 TestSuiteEnvironment.getServerPort() + 300,\n                 Authentication.getCallbackHandler());\n     }", "fixed": "     }\n     private static ModelControllerClient createClient2() throws UnknownHostException {\n        return ModelControllerClient.Factory.create(InetAddress.getByName(TestSuiteEnvironment.getServerAddressNode1()),\n                 TestSuiteEnvironment.getServerPort() + 300,\n                 Authentication.getCallbackHandler());\n     }", "sourceBeforeFix": "TestSuiteEnvironment.getServerAddress()", "sourceAfterFix": "TestSuiteEnvironment.getServerAddressNode1()"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface KinesisEndpointBuilder\n             extends\n                 KinesisEndpointConsumerBuilder, KinesisEndpointProducerBuilder {\n         default AdvancedKinesisEndpointBuilder advanced() {", "fixed": "     \n    public interface KinesisEndpointBuilder\n             extends\n                 KinesisEndpointConsumerBuilder, KinesisEndpointProducerBuilder {\n         default AdvancedKinesisEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "c4c48e72c78065000c55e71bf3df9190ddb8bc09", "projectName": "facebook.presto", "bugType": "Change Identifier Used", "problem": "                 throws IOException\n         {\n             generator.writeStartObject();\n            generator.writeStringField(\"type\", value.getType().getCanonicalName());\n             generator.writeFieldName(\"value\");\n             if (value.getValue() == null) {\n                 generator.writeNull();", "fixed": "                 throws IOException\n         {\n             generator.writeStartObject();\n            generator.writeStringField(\"type\", value.getType().getName());\n             generator.writeFieldName(\"value\");\n             if (value.getValue() == null) {\n                 generator.writeNull();", "sourceBeforeFix": "value.getType().getCanonicalName()", "sourceAfterFix": "value.getType().getName()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15841, value = \"Exception getting result from server %s: %s\")\n     String exceptionAwaitingResultFromServer(ServerIdentity server, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10841, value = \"Exception getting result from server %s: %s\")\n     String exceptionAwaitingResultFromServer(ServerIdentity server, String message);\n     /**", "sourceBeforeFix": "id=15868", "sourceAfterFix": "id=10868"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15834, value = \"%s recognizes only %s as children: %s\")\n     String unrecognizedChildren(String parent, String children, String parentSpec);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10834, value = \"%s recognizes only %s as children: %s\")\n     String unrecognizedChildren(String parent, String children, String parentSpec);\n     /**", "sourceBeforeFix": "id=15835", "sourceAfterFix": "id=10835"}
{"fixCommitSHA1": "4bf80610fd2a67d952312e808edebdb74ebc26bb", "projectName": "Graylog2.graylog2-server", "bugType": "Change Numeric Literal", "problem": "         final PaginatedList<TestDTO> page4 = dbService.findPaginatedWithQueryFilterAndSort(DBQuery.empty(), filter, DBSort.asc(\"title\"), 2, 4);\n         assertThat(page4.pagination().getCount()).isEqualTo(1);\n        assertThat(page4.pagination().getGlobalTotal()).isEqualTo(7);\n         assertThat(page4.delegate())\n                 .extracting(\"title\")\n                 .containsExactly(\"hello6\");", "fixed": "         final PaginatedList<TestDTO> page4 = dbService.findPaginatedWithQueryFilterAndSort(DBQuery.empty(), filter, DBSort.asc(\"title\"), 2, 4);\n         assertThat(page4.pagination().getCount()).isEqualTo(1);\n        assertThat(page4.pagination().getGlobalTotal()).isEqualTo(5);\n         assertThat(page4.delegate())\n                 .extracting(\"title\")\n                 .containsExactly(\"hello6\");", "sourceBeforeFix": "assertThat(page1.pagination().getGlobalTotal()).isEqualTo(7)", "sourceAfterFix": "assertThat(page1.pagination().getGlobalTotal()).isEqualTo(5)"}
{"fixCommitSHA1": "84340b3f05d39437b725f2f5510f44e862f98b19", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "                     client.setInstanceUrl(session.getInstanceUrl());\n                     client.setAccessToken(exchange);\n                 } else {\n                    exchange.addRequestHeader(HttpHeaders.AUTHORIZATION,\n                             \"OAuth \" + currentToken);\n                 }", "fixed": "                     client.setInstanceUrl(session.getInstanceUrl());\n                     client.setAccessToken(exchange);\n                 } else {\n                    exchange.setRequestHeader(HttpHeaders.AUTHORIZATION,\n                             \"OAuth \" + currentToken);\n                 }", "sourceBeforeFix": "exchange.addRequestHeader(HttpHeaders.AUTHORIZATION,\"OAuth \" + currentToken)", "sourceAfterFix": "exchange.setRequestHeader(HttpHeaders.AUTHORIZATION,\"OAuth \" + currentToken)"}
{"fixCommitSHA1": "5f78aa9c52a2f28419a5fa646ab28ee273e17e6a", "projectName": "hazelcast.hazelcast", "bugType": "Change Modifier", "problem": "     }\n     @Override\n    public Connection getOrConnect(Address address) {\n         Connection connection = getConnection(address);\n         if (connection != null && connection.isAlive()) {\n             return connection;", "fixed": "     }\n     @Override\n    public synchronized Connection getOrConnect(Address address) {\n         Connection connection = getConnection(address);\n         if (connection != null && connection.isAlive()) {\n             return connection;", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface HazelcastMapEndpointBuilder\n             extends\n                 HazelcastMapEndpointConsumerBuilder, HazelcastMapEndpointProducerBuilder {\n         default AdvancedHazelcastMapEndpointBuilder advanced() {", "fixed": "     \n    public interface HazelcastMapEndpointBuilder\n             extends\n                 HazelcastMapEndpointConsumerBuilder, HazelcastMapEndpointProducerBuilder {\n         default AdvancedHazelcastMapEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Optimizes unused function arguments, unused return values, and inlines\n    * constant parameters. Also runs RemoveUnusedVars.\n    */\n  final PassFactory optimizeCallsAndRemoveUnusedVars =\n       new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface ClientEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedClientEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface ClientEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedClientEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "1a9bb447fd14415ef270f3dd7af8a0d4e0017177", "projectName": "Atmosphere.atmosphere", "bugType": "Change Identifier Used", "problem": "     @Override\n     public final AtmosphereResource create(AtmosphereConfig config,\n                                            Broadcaster broadcaster,\n                                           DefaultAtmosphereRequest request,\n                                            AtmosphereResponse response,\n                                            AsyncSupport<?> a,\n                                            AtmosphereHandler handler) {", "fixed": "     @Override\n     public final AtmosphereResource create(AtmosphereConfig config,\n                                            Broadcaster broadcaster,\n                                           AtmosphereRequest request,\n                                            AtmosphereResponse response,\n                                            AsyncSupport<?> a,\n                                            AtmosphereHandler handler) {", "sourceBeforeFix": "DefaultAtmosphereRequest request", "sourceAfterFix": "AtmosphereRequest request"}
{"fixCommitSHA1": "370ead7395fc9194a3dc2d05afc4b3409f6b27da", "projectName": "apache.hive", "bugType": "Change Identifier Used", "problem": "     }\n   }\n  private HashMap<String, ASTNode> doPhase1GetAggregationsFromSelect(\n       ASTNode selExpr) {\n    HashMap<String, ASTNode> aggregationTrees = new HashMap<String, ASTNode>();\n     for (int i = 0; i < selExpr.getChildCount(); ++i) {\n       ASTNode sel = (ASTNode) selExpr.getChild(i).getChild(0);\n       doPhase1GetAllAggregations(sel, aggregationTrees);", "fixed": "     }\n   }\n  private LinkedHashMap<String, ASTNode> doPhase1GetAggregationsFromSelect(\n       ASTNode selExpr) {\n    LinkedHashMap<String, ASTNode> aggregationTrees = new LinkedHashMap<String, ASTNode>();\n     for (int i = 0; i < selExpr.getChildCount(); ++i) {\n       ASTNode sel = (ASTNode) selExpr.getChild(i).getChild(0);\n       doPhase1GetAllAggregations(sel, aggregationTrees);", "sourceBeforeFix": "HashMap<String,ASTNode>", "sourceAfterFix": "LinkedHashMap<String,ASTNode>"}
{"fixCommitSHA1": "852c8b720dd810c699d6303d0470efa246c84d26", "projectName": "wildfly.wildfly", "bugType": "Same Function Swap Args", "problem": "             Assert.fail(\"Test should fail, user shouldn't be allowed to invoke that method\");\n         } catch (WebServiceException e) {\n            Assert.assertEquals(e.getCause().getMessage(), getNotAllowedExceptionMessage(\"hello\"));\n         }\n     }", "fixed": "             Assert.fail(\"Test should fail, user shouldn't be allowed to invoke that method\");\n         } catch (WebServiceException e) {\n            Assert.assertEquals(getNotAllowedExceptionMessage(\"hello\"), e.getCause().getMessage());\n         }\n     }", "sourceBeforeFix": "Assert.assertEquals(e.getCause().getMessage(),getNotAllowedExceptionMessage(\"helloForRoles\"))", "sourceAfterFix": "Assert.assertEquals(getNotAllowedExceptionMessage(\"helloForRoles\"),e.getCause().getMessage())"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "fixed": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2fv(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2fv(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "sourceBeforeFix": "EXTFramebufferObject.glGetFramebufferAttachmentParameterEXT(target,attachment,pname,params)", "sourceAfterFix": "EXTFramebufferObject.glGetFramebufferAttachmentParameterivEXT(target,attachment,pname,params)"}
{"fixCommitSHA1": "e376b7be0a40adaba56bbefce50c3f0930a9475c", "projectName": "gephi.gephi", "bugType": "Change Modifier", "problem": "         return null;\n     }\n    public AttributeModel getModel(Workspace workspace) {\n         AttributeModel model = workspace.getLookup().lookup(AttributeModel.class);\n         if (model != null) {\n             return model;", "fixed": "         return null;\n     }\n    public synchronized AttributeModel getModel(Workspace workspace) {\n         AttributeModel model = workspace.getLookup().lookup(AttributeModel.class);\n         if (model != null) {\n             return model;", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "b16ab7c7615dbf555ee60f5bac09821d1886e136", "projectName": "facebook.presto", "bugType": "Change Numeric Literal", "problem": "         root.setSoftMemoryLimit(new DataSize(1, BYTE));\n         root.setMaxQueuedQueries(4);\n         root.setMaxRunningQueries(3);\n        MockQueryExecution query1 = new MockQueryExecution(1);\n         root.run(query1);\n         root.processQueuedQueries();", "fixed": "         root.setSoftMemoryLimit(new DataSize(1, BYTE));\n         root.setMaxQueuedQueries(4);\n         root.setMaxRunningQueries(3);\n        MockQueryExecution query1 = new MockQueryExecution(2);\n         root.run(query1);\n         root.processQueuedQueries();", "sourceBeforeFix": "new MockQueryExecution(1)", "sourceAfterFix": "new MockQueryExecution(2)"}
{"fixCommitSHA1": "20b4f8b2195a1bf214f63e10b1bbca4690c0290f", "projectName": "apache.storm", "bugType": "Same Function More Args", "problem": "                     Executors.newCachedThreadPool(workerFactory));\n         }\n        int otherWorkers = Utils.getInt(storm_conf.get(Config.TOPOLOGY_WORKERS)) - 1;\n         int poolSize = Math.min(Math.max(1, otherWorkers), MAX_CLIENT_SCHEDULER_THREAD_POOL_SIZE);\n         clientScheduleService = Executors.newScheduledThreadPool(poolSize, new NettyRenameThreadFactory(\"client-schedule-service\"));\n     }", "fixed": "                     Executors.newCachedThreadPool(workerFactory));\n         }\n        int otherWorkers = Utils.getInt(storm_conf.get(Config.TOPOLOGY_WORKERS), 1) - 1;\n         int poolSize = Math.min(Math.max(1, otherWorkers), MAX_CLIENT_SCHEDULER_THREAD_POOL_SIZE);\n         clientScheduleService = Executors.newScheduledThreadPool(poolSize, new NettyRenameThreadFactory(\"client-schedule-service\"));\n     }", "sourceBeforeFix": "Utils.getInt(storm_conf.get(Config.TOPOLOGY_WORKERS))", "sourceAfterFix": "Utils.getInt(storm_conf.get(Config.TOPOLOGY_WORKERS),1)"}
{"fixCommitSHA1": "b09c7e0a09669384073adecc4e1048de59a7f8ee", "projectName": "hazelcast.hazelcast", "bugType": "Same Function More Args", "problem": "             responsePacketHandler.handle(responsePacket);\n         } catch (Throwable e) {\n             inspectOutputMemoryError(e);\n            logger.severe(\"Failed to process response: \" + responsePacket + \" on response thread:\" + getName());\n         }\n     }", "fixed": "             responsePacketHandler.handle(responsePacket);\n         } catch (Throwable e) {\n             inspectOutputMemoryError(e);\n            logger.severe(\"Failed to process response: \" + responsePacket + \" on response thread:\" + getName(), e);\n         }\n     }", "sourceBeforeFix": "logger.severe(\"Failed to process response: \" + responsePacket + \" on response thread:\"+ getName())", "sourceAfterFix": "logger.severe(\"Failed to process response: \" + responsePacket + \" on response thread:\"+ getName(),e)"}
{"fixCommitSHA1": "f80e4773640190cbb2acfc7f7a88383dbc205c73", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": " \npublic class IOConverterOptimised {\n     private IOConverterOptimised() {\n     }\n     public static Object convertTo(final Class<?> type, final Exchange exchange, final Object value) throws Exception {\n         Class fromType = value.getClass();", "fixed": " \npublic final class IOConverterOptimised {\n     private IOConverterOptimised() {\n     }\n     public static Object convertTo(final Class<?> type, final Exchange exchange, final Object value) throws Exception {\n         Class fromType = value.getClass();", "sourceBeforeFix": "1", "sourceAfterFix": "17"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     return additionalReplacements;\n   }\n  private final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     return additionalReplacements;\n   }\n  final PassFactory printNameReferenceGraph =\n     new PassFactory(\"printNameReferenceGraph\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "acb1b41805a108bf3b9052af416510b5b5f4636d", "projectName": "facebook.presto", "bugType": "Wrong Function Name", "problem": "     {\n         checkState(canAdd(page), \"page buffer is full\");\n         pages.add(page);\n        usedMemoryBytes += page.getSizeInBytes();\n         rowCount = addExact(rowCount, page.getPositionCount());\n     }", "fixed": "     {\n         checkState(canAdd(page), \"page buffer is full\");\n         pages.add(page);\n        usedMemoryBytes += page.getRetainedSizeInBytes();\n         rowCount = addExact(rowCount, page.getPositionCount());\n     }", "sourceBeforeFix": "page.getSizeInBytes()", "sourceAfterFix": "page.getRetainedSizeInBytes()"}
{"fixCommitSHA1": "0a2b272cb8cb45faafd95a3bbc9e9af813620e09", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "     private void clearLockStore(String name) {\n         NodeEngine nodeEngine = service.getNodeEngine();\n        LockService lockService = nodeEngine.getService(LockService.SERVICE_NAME);\n         if (lockService != null) {\n             DefaultObjectNamespace namespace = new DefaultObjectNamespace(MultiMapService.SERVICE_NAME, name);\n             lockService.clearLockStore(partitionId, namespace);", "fixed": "     private void clearLockStore(String name) {\n         NodeEngine nodeEngine = service.getNodeEngine();\n        LockService lockService = nodeEngine.getSharedService(LockService.SERVICE_NAME);\n         if (lockService != null) {\n             DefaultObjectNamespace namespace = new DefaultObjectNamespace(MultiMapService.SERVICE_NAME, name);\n             lockService.clearLockStore(partitionId, namespace);", "sourceBeforeFix": "nodeEngine.getService(LockService.SERVICE_NAME)", "sourceAfterFix": "nodeEngine.getSharedService(LockService.SERVICE_NAME)"}
{"fixCommitSHA1": "040343b917a3989fe6fba30a6deddb8974a68bb5", "projectName": "alibaba.dubbo", "bugType": "Wrong Function Name", "problem": "         url = url.setPath(RegistryService.class.getName())\r\n                 .addParameter(Constants.INTERFACE_KEY, RegistryService.class.getName())\r\n                 .removeParameters(Constants.EXPORT_KEY, Constants.REFER_KEY);\r\n        String key = url.toServiceString();\r\n         LOCK.lock();\r\n         try {\r", "fixed": "         url = url.setPath(RegistryService.class.getName())\r\n                 .addParameter(Constants.INTERFACE_KEY, RegistryService.class.getName())\r\n                 .removeParameters(Constants.EXPORT_KEY, Constants.REFER_KEY);\r\n        String key = url.toServiceStringWithoutResolving();\r\n         LOCK.lock();\r\n         try {\r", "sourceBeforeFix": "url.toServiceString()", "sourceAfterFix": "url.toServiceStringWithoutResolving()"}
{"fixCommitSHA1": "6bae902bd35ed4f57e7a5d612b7ad9b72f4559bc", "projectName": "google.closure-compiler", "bugType": "Change Identifier Used", "problem": "     node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n     Node node2 = Node.newString(Token.NAME, \"f\");\n     node2.setJSType(registry.getNativeType(JSTypeNative.STRING_TYPE));\n    assertFalse(node1.checkTreeTypeAwareEqualsSilent(node2));\n   }\n   public void testCheckTreeTypeAwareEqualsDifferentNull() {", "fixed": "     node1.setJSType(registry.getNativeType(JSTypeNative.NUMBER_TYPE));\n     Node node2 = Node.newString(Token.NAME, \"f\");\n     node2.setJSType(registry.getNativeType(JSTypeNative.STRING_TYPE));\n    assertFalse(node1.isEquivalentToTyped(node2));\n   }\n   public void testCheckTreeTypeAwareEqualsDifferentNull() {", "sourceBeforeFix": "node1.checkTreeEqualsSilent(node1)", "sourceAfterFix": "node1.isEquivalentTo(node1)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  private final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Try to infer the actual types, which may be narrower\n    * than the declared types.\n    */\n  final PassFactory tightenTypesBuilder =\n       new PassFactory(\"tightenTypes\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "83b9dd427535bce39be43a9e8224cdbc352d7427", "projectName": "square.okhttp", "bugType": "Change Modifier", "problem": "     private final String contentType;\n     private final String contentLength;\n    public CacheResponseBody(final DiskLruCache.Snapshot snapshot,\n         String contentType, String contentLength) {\n       this.snapshot = snapshot;\n       this.contentType = contentType;", "fixed": "     private final String contentType;\n     private final String contentLength;\n    CacheResponseBody(final DiskLruCache.Snapshot snapshot,\n         String contentType, String contentLength) {\n       this.snapshot = snapshot;\n       this.contentType = contentType;", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "886096e8fc457546dd4071295b7c5cce2d722ecc", "projectName": "javaee-samples.javaee7-samples", "bugType": "Wrong Function Name", "problem": "                 MyManagedScheduledBatchBean.class,\n                 MyManagedScheduledBatchAlternative.class)\n             .addAsWebInfResource(\n                new StringAsset(beansXml.createAlternatives().clazz(\n                     MyManagedScheduledBatchAlternative.class.getName()).up().exportAsString()),\n                 beansXml.getDescriptorName())\n             .addAsResource(\"META-INF/batch-jobs/myJob.xml\");", "fixed": "                 MyManagedScheduledBatchBean.class,\n                 MyManagedScheduledBatchAlternative.class)\n             .addAsWebInfResource(\n                new StringAsset(beansXml.getOrCreateAlternatives().clazz(\n                     MyManagedScheduledBatchAlternative.class.getName()).up().exportAsString()),\n                 beansXml.getDescriptorName())\n             .addAsResource(\"META-INF/batch-jobs/myJob.xml\");", "sourceBeforeFix": "beansXml.createAlternatives()", "sourceAfterFix": "beansXml.getOrCreateAlternatives()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVariableReferences =\n       new HotSwapPassFactory(\"checkVariableReferences\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "e70960913c07d921dea470857f9bcdb67f38959f", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "      *\n      * @param basenameSeparator the basename separator\n      */\n    public void setBasenameSeparator(String basenameSeparator) {\n         this.basenameSeparator = basenameSeparator;\n     }", "fixed": "      *\n      * @param basenameSeparator the basename separator\n      */\n    public final void setBasenameSeparator(String basenameSeparator) {\n         this.basenameSeparator = basenameSeparator;\n     }", "sourceBeforeFix": "1", "sourceAfterFix": "17"}
{"fixCommitSHA1": "f47d4f07970a09a1aaf5b0e94eb5fe53c2e4b14f", "projectName": "Graylog2.graylog2-server", "bugType": "Wrong Function Name", "problem": "     }\n     public Map<String, String> getInputTypes() throws IOException, APIException {\n        return api.path(routes.InputsResource().types(), InputTypesResponse.class).node(this).execute().types;\n     }\n     public InputTypeSummaryResponse getInputTypeInformation(String type) throws IOException, APIException {\n        return api.path(routes.InputsResource().info(type), InputTypeSummaryResponse.class).node(this).execute();\n     }\n     public Map<String, InputTypeSummaryResponse> getAllInputTypeInformation() throws IOException, APIException {", "fixed": "     }\n     public Map<String, String> getInputTypes() throws IOException, APIException {\n        return api.path(routes.InputTypesResource().types(), InputTypesResponse.class).node(this).execute().types;\n     }\n     public InputTypeSummaryResponse getInputTypeInformation(String type) throws IOException, APIException {\n        return api.path(routes.InputTypesResource().info(type), InputTypeSummaryResponse.class).node(this).execute();\n     }\n     public Map<String, InputTypeSummaryResponse> getAllInputTypeInformation() throws IOException, APIException {", "sourceBeforeFix": "routes.InputsResource()", "sourceAfterFix": "routes.InputTypesResource()"}
{"fixCommitSHA1": "10b391e13590e61c2ec80e4c5522362cc7e9b646", "projectName": "xetorthio.jedis", "bugType": "Change Unary Operator\t", "problem": "           + \" only supports SCAN commands with non-empty MATCH patterns\");\n     }\n    if (JedisClusterHashTagUtil.isClusterCompliantMatchPattern(matchPattern)) {\n       throw new IllegalArgumentException(JedisCluster.class.getSimpleName()\n           + \" only supports SCAN commands with MATCH patterns containing hash-tags ( curly-brackets enclosed strings )\");\n     }", "fixed": "           + \" only supports SCAN commands with non-empty MATCH patterns\");\n     }\n    if (!JedisClusterHashTagUtil.isClusterCompliantMatchPattern(matchPattern)) {\n       throw new IllegalArgumentException(JedisCluster.class.getSimpleName()\n           + \" only supports SCAN commands with MATCH patterns containing hash-tags ( curly-brackets enclosed strings )\");\n     }", "sourceBeforeFix": "JedisClusterHashTagUtil.isClusterCompliantMatchPattern(matchPattern)", "sourceAfterFix": "!JedisClusterHashTagUtil.isClusterCompliantMatchPattern(matchPattern)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedToMe(Paging paging) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_to_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedToMe(Paging paging) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_to_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline.json\",true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkVars =\n       new HotSwapPassFactory(\"checkVars\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "83b9dd427535bce39be43a9e8224cdbc352d7427", "projectName": "square.okhttp", "bugType": "Change Modifier", "problem": "   private static final class CacheHttpsURLConnection extends DelegatingHttpsURLConnection {\n     private final CacheHttpURLConnection delegate;\n    public CacheHttpsURLConnection(CacheHttpURLConnection delegate) {\n       super(delegate);\n       this.delegate = delegate;\n     }", "fixed": "   private static final class CacheHttpsURLConnection extends DelegatingHttpsURLConnection {\n     private final CacheHttpURLConnection delegate;\n    CacheHttpsURLConnection(CacheHttpURLConnection delegate) {\n       super(delegate);\n       this.delegate = delegate;\n     }", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "38eb6222bddaf49c3c9ae73ddef0cfe4ff5efa48", "projectName": "alibaba.dubbo", "bugType": "Change Numeric Literal", "problem": "     @Test\n     public void test_Decode_Error_Response_Object() throws IOException {\n        byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, 0x20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n         Person person = new Person();\n         byte[] request = getRequestBytes(person, header);", "fixed": "     @Test\n     public void test_Decode_Error_Response_Object() throws IOException {\n        byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, 0x02, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n         Person person = new Person();\n         byte[] request = getRequestBytes(person, header);", "sourceBeforeFix": "{MAGIC_HIGH,MAGIC_LOW,0x20,20,0,0,0,0,0,0,0,0,0,0,0,0}", "sourceAfterFix": "{MAGIC_HIGH,MAGIC_LOW,0x02,20,0,0,0,0,0,0,0,0,0,0,0,0}"}
{"fixCommitSHA1": "d21216740a86906787667da2daf2c939b5e3b18b", "projectName": "gephi.gephi", "bugType": "More Specific If", "problem": "                 }\n                if (selectedFile != null) {\n                     String filePath = selectedFile.getAbsolutePath();\n                     filePath = filePath.substring(0, filePath.lastIndexOf(\".\"));\n                     filePath = filePath.concat(fileFilter.getExtensions().get(0));", "fixed": "                 }\n                if (selectedFile != null && fileFilter != null) {\n                     String filePath = selectedFile.getAbsolutePath();\n                     filePath = filePath.substring(0, filePath.lastIndexOf(\".\"));\n                     filePath = filePath.concat(fileFilter.getExtensions().get(0));", "sourceBeforeFix": "selectedFile != null", "sourceAfterFix": "selectedFile != null && fileFilter != null"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<Status> getFriendsTimeline() throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\", true));\n     }\n     /**", "fixed": "      */\n     public ResponseList<Status> getFriendsTimeline() throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\", true));\n     }\n     /**", "sourceBeforeFix": "SavedSearch.constructSavedSearches(get(getBaseURL() + \"saved_searches.json\",true))", "sourceAfterFix": "SavedSearch.createSavedSearchList(get(getBaseURL() + \"saved_searches.json\",true))"}
{"fixCommitSHA1": "c4d1a9b3fde355c8cdfb6fcdc1d30c1fa38625d4", "projectName": "hazelcast.hazelcast", "bugType": "Change Numeric Literal", "problem": "         final IMap<Integer, Long> map = h.getMap(MAP_NAME);\n         map.put(0, 10L);\n        assertEquals(148, map.getLocalMapStats().getHeapCost());\n     }\n     @Test", "fixed": "         final IMap<Integer, Long> map = h.getMap(MAP_NAME);\n         map.put(0, 10L);\n        assertEquals(156, map.getLocalMapStats().getHeapCost());\n     }\n     @Test", "sourceBeforeFix": "assertEquals(148,map.getLocalMapStats().getHeapCost())", "sourceAfterFix": "assertEquals(156,map.getLocalMapStats().getHeapCost())"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsCsv(String path, long millis, OUT endTuple) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, endTuple);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsCsv(String path, long millis, OUT endTuple) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), millis, endTuple);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "       } else {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n          TachyonFile file = mTC.getFile(FILE_NAME + (mWorkerId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           for (int i = 0; i < BLOCKS_PER_FILE; i ++) {\n             buf.DATA.get(mBuf.array());", "fixed": "       } else {\n         for (int pId = mLeft; pId < mRight; pId ++) {\n           long startTimeMs = System.currentTimeMillis();\n          TachyonFile file = mTC.getFile(FILE_NAME + (pId + BASE_FILE_NUMBER));\n           buf = file.readByteBuffer(0);\n           for (int i = 0; i < BLOCKS_PER_FILE; i ++) {\n             buf.DATA.get(mBuf.array());", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "e7bf415427b37bbc760ff9b9c69650db8ec477e4", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t}\n \t@Configuration\n\t@ConditionalOnEnablednHealthIndicator(\"diskspace\")\n \tpublic static class DiskSpaceHealthIndicatorConfiguration {\n \t\t@Bean", "fixed": " \t}\n \t@Configuration\n\t@ConditionalOnEnabledHealthIndicator(\"diskspace\")\n \tpublic static class DiskSpaceHealthIndicatorConfiguration {\n \t\t@Bean", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"db\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"db\")"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15854, value = \"Null stream at index %d\")\n     String nullStream(int index);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10854, value = \"Null stream at index %d\")\n     String nullStream(int index);\n     /**", "sourceBeforeFix": "id=15855", "sourceAfterFix": "id=10855"}
{"fixCommitSHA1": "8a9e1bcbff1ff10cf122b23b3a1aa437f02a2086", "projectName": "gephi.gephi", "bugType": "Change Unary Operator\t", "problem": "         org.gephi.graph.api.TextData sourceEdgeTextData = sourceEdgeData.getTextData();\n         String label = sourceEdgeData.getLabel();\n        if (sourceEdgeTextData != null && sourceEdgeTextData.getText() != null && sourceEdgeTextData.getText().isEmpty() && sourceEdgeTextData.isVisible()) {\n             label = sourceEdgeTextData.getText();\n         } else if (sourceEdgeTextData != null && !sourceEdgeTextData.isVisible()) {\n             label = null;", "fixed": "         org.gephi.graph.api.TextData sourceEdgeTextData = sourceEdgeData.getTextData();\n         String label = sourceEdgeData.getLabel();\n        if (sourceEdgeTextData != null && sourceEdgeTextData.getText() != null && !sourceEdgeTextData.getText().isEmpty() && sourceEdgeTextData.isVisible()) {\n             label = sourceEdgeTextData.getText();\n         } else if (sourceEdgeTextData != null && !sourceEdgeTextData.isVisible()) {\n             label = null;", "sourceBeforeFix": "sourceEdgeTextData.getText().isEmpty()", "sourceAfterFix": "!sourceEdgeTextData.getText().isEmpty()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": " import org.jboss.logging.Messages;\n /**\n * This module is using message IDs in the range 10900-10999. This file is using the subset 10975-10999 for domain\n* controller non-logger messages. See http:\n  * JBAS message id blocks.\n  * <p/>", "fixed": " import org.jboss.logging.Messages;\n /**\n * This module is using message IDs in the range 10800-10899. This file is using the subset 10830-10899 for domain\n* controller non-logger messages. See http:\n  * JBAS message id blocks.\n  * <p/>", "sourceBeforeFix": "id=15844", "sourceAfterFix": "id=10844"}
{"fixCommitSHA1": "fdd0b31d828c2e0d50f64ef8713a99ceeb8ffa03", "projectName": "eclipse.vert.x", "bugType": "Same Function More Args", "problem": "   @Override\n   public void handle(AsyncResult<T> asyncResult) {\n    throw new IllegalStateException();\n   }\n }", "fixed": "   @Override\n   public void handle(AsyncResult<T> asyncResult) {\n    throw new IllegalStateException(\"Result is already complete: succeeded\");\n   }\n }", "sourceBeforeFix": "new IllegalStateException()", "sourceAfterFix": "new IllegalStateException(\"Result is already complete: succeeded\")"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweets(long statusId) throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL()\n                 + \"statuses/retweets/\" + statusId + \".json\", true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweets(long statusId) throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL()\n                 + \"statuses/retweets/\" + statusId + \".json\", true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",new PostParameter[0],true))"}
{"fixCommitSHA1": "4665dcf9ab41c3c61cd42aad296ebfe518bfa003", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\n \tpublic void glPolygonOffset (float factor, float units) {\n\t\tGL.glPolygonOffsetEXT(factor, units);\n \t}\n \tpublic void glReadPixels (int x, int y, int width, int height, int format, int type, Buffer pixels) {", "fixed": " \t}\n \tpublic void glPolygonOffset (float factor, float units) {\n\t\tGL.glPolygonOffset(factor, units);\n \t}\n \tpublic void glReadPixels (int x, int y, int width, int height, int format, int type, Buffer pixels) {", "sourceBeforeFix": "GL.glCopyTexSubImage2DEXT(target,level,xoffset,yoffset,x,y,width,height)", "sourceAfterFix": "GL.glCopyTexSubImage2D(target,level,xoffset,yoffset,x,y,width,height)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory collapseVariableDeclarations =\n       new PassFactory(\"collapseVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "c5c423ee77274339c43b42e9c20948f8ad0534e9", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "         pausingLoader.awaitPause();\n         hz3.getLifecycleService().terminate();\n        assertClusterSize(2, nodes[0]);\n         pausingLoader.resume();", "fixed": "         pausingLoader.awaitPause();\n         hz3.getLifecycleService().terminate();\n        assertClusterSizeEventually(2, nodes[0]);\n         pausingLoader.resume();", "sourceBeforeFix": "assertClusterSize(2,nodes[0])", "sourceAfterFix": "assertClusterSizeEventually(2,nodes[0])"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface HipchatEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedHipchatEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface HipchatEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedHipchatEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "93a9fb352d11fb796964cbe4650b4a247d908b58", "projectName": "naver.pinpoint", "bugType": "Change Modifier", "problem": "         return 0;\n     }\n    private class ConnectorsArgumentValidator implements ArgumentValidator {\n         @Override\n         public boolean validate(Object[] args) {\n             if (args == null) {", "fixed": "         return 0;\n     }\n    private static class ConnectorsArgumentValidator implements ArgumentValidator {\n         @Override\n         public boolean validate(Object[] args) {\n             if (args == null) {", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "64dff91895f9df55fe3a07217a333efa4d37d92a", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "         Class<?> c = makeClass(className, proceedOnExceptions);\n         if (c != null) {\n           if (!classes.add(c)) {\n            LOG.error(\"Ignoring duplicate class \" + className);\n           }\n         }\n       }", "fixed": "         Class<?> c = makeClass(className, proceedOnExceptions);\n         if (c != null) {\n           if (!classes.add(c)) {\n            LOG.warn(\"Ignoring duplicate class \" + className);\n           }\n         }\n       }", "sourceBeforeFix": "LOG.error(\"Failed to look for classes in \" + jarFileName + \": \"+ ioEx)", "sourceAfterFix": "LOG.warn(\"Failed to look for classes in \" + jarFileName + \": \"+ ioEx)"}
{"fixCommitSHA1": "20f1014985fa5af16ab7b19248f0b0afcbd00f5c", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "             op.run();\n             op.afterRun();\n         }\n        getOrCreateContainer().unlock(dataKey, caller, threadId);\n     }\n     protected void writeInternal(ObjectDataOutput out) throws IOException {", "fixed": "             op.run();\n             op.afterRun();\n         }\n        getOrCreateContainer().forceUnlock(dataKey);\n     }\n     protected void writeInternal(ObjectDataOutput out) throws IOException {", "sourceBeforeFix": "getOrCreateContainer().unlock(dataKey,caller,threadId)", "sourceAfterFix": "getOrCreateContainer().forceUnlock(dataKey)"}
{"fixCommitSHA1": "9467bef8ea9a62658b32dd43a76f4f98087d1986", "projectName": "apache.hadoop", "bugType": "Change Unary Operator\t", "problem": "         command = new DeleteCommand(keyName);\n         if (\"--help\".equals(keyName)) {\n           printKeyShellUsage();\n          return -1;\n         }\n       } else if (args[i].equals(\"roll\")) {\n         String keyName = \"--help\";", "fixed": "         command = new DeleteCommand(keyName);\n         if (\"--help\".equals(keyName)) {\n           printKeyShellUsage();\n          return 1;\n         }\n       } else if (args[i].equals(\"roll\")) {\n         String keyName = \"--help\";", "sourceBeforeFix": "-1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "55ed50c4975cf694828d46ee9ca32ce72a9ef913", "projectName": "clojure.clojure", "bugType": "Wrong Function Name", "problem": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 20:\r\n\t\t\treturn invoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "fixed": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 20:\r\n\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "sourceBeforeFix": "invoke(args.first(),args.rest())", "sourceAfterFix": "doInvoke(args.first(),args.rest())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n*  @see java.util.Comparator\n \t */\n\tpublic int compare(DataInputView firstSource, DataInputView secondSource) throws IOException;", "fixed": " \t * \n*  @see java.util.Comparator\n \t */\n\tpublic abstract int compare(DataInputView firstSource, DataInputView secondSource) throws IOException;", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "423fca2f16ef73c1e4bce7cf11660a510be1456e", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "       return false;\n     }\n     if (!info.isOffline()) {\n      LOG.warn(\"Region is split but not offline: \" + info.getRegionName());\n     }\n     return true;\n   }", "fixed": "       return false;\n     }\n     if (!info.isOffline()) {\n      LOG.warn(\"Region is split but not offline: \" +\n        info.getRegionNameAsString());\n     }\n     return true;\n   }", "sourceBeforeFix": "info.getRegionName()", "sourceAfterFix": "info.getRegionNameAsString()"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface EhcacheEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedEhcacheEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface EhcacheEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedEhcacheEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseProperties =\n       new PassFactory(\"collapseProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "ab3350b4d657affb210da0770ab95f12fb576fdf", "projectName": "Alluxio.alluxio", "bugType": "Change Caller in Function Call", "problem": "    */\n   private void faultTestDataCheck(List<Pair<Integer, String>> answer) throws IOException {\n     TachyonFS tfs = mLocalTachyonClusterMultiMaster.getClient();\n    List<String> files = mTfs.ls(Constants.PATH_SEPARATOR, true);\n     if (answer.size() != files.size()) {\n       System.out.println(\"Files===========================\");\n       for (int k = 0; k < files.size(); k ++) {", "fixed": "    */\n   private void faultTestDataCheck(List<Pair<Integer, String>> answer) throws IOException {\n     TachyonFS tfs = mLocalTachyonClusterMultiMaster.getClient();\n    List<String> files = tfs.ls(Constants.PATH_SEPARATOR, true);\n     if (answer.size() != files.size()) {\n       System.out.println(\"Files===========================\");\n       for (int k = 0; k < files.size(); k ++) {", "sourceBeforeFix": "mTfs.ls(Constants.PATH_SEPARATOR,true)", "sourceAfterFix": "tfs.ls(Constants.PATH_SEPARATOR,true)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface CometdEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedCometdEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface CometdEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedCometdEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCodeRemoval =\n       new PassFactory(\"closureCodeRemoval\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "28f046ef4ac16e7d260dfd505400c329030ebbe8", "projectName": "apache.hive", "bugType": "Less Specific If", "problem": "       }\n     }\n    if ( targetCondn == null ) {\n       return new ObjectPair(-1, null);\n     }", "fixed": "       }\n     }\n    if ( targetCondn == null || (nodeCondn.size() != targetCondn.size())) {\n       return new ObjectPair(-1, null);\n     }", "sourceBeforeFix": "targetCondn == null", "sourceAfterFix": "targetCondn == null || (nodeCondn.size() != targetCondn.size())"}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \tpublic void testMultipleAlternativesWithCommonLabel_4() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(730);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {System.out.println($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "fixed": " \tpublic void testMultipleAlternativesWithCommonLabel_4() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(729);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {System.out.println($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "sourceBeforeFix": "new StringBuilder(730)", "sourceAfterFix": "new StringBuilder(729)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform3fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform3(location, v);\r\n \t}\r\n \tpublic void glUniform3fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform3(location, toFloatBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform3i (int location, int x, int y, int z) {\r", "fixed": " \t}\r\n \tpublic void glUniform3fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform3fv(location, v);\r\n \t}\r\n \tpublic void glUniform3fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform3fv(location, toFloatBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform3i (int location, int x, int y, int z) {\r", "sourceBeforeFix": "GL20.glUniform2(location,toIntBuffer(v,offset,count << 1))", "sourceAfterFix": "GL20.glUniform2iv(location,toIntBuffer(v,offset,count << 1))"}
{"fixCommitSHA1": "3deba86fbc98387501b2076b82c35ac78a56de21", "projectName": "square.javapoet", "bugType": "Change Identifier Used", "problem": "     javaWriter.emitPackage(\"com.squareup\");\n     javaWriter.beginType(\"com.squareup.Foo\", \"class\", 0);\n     javaWriter.beginMethod(\"int\", \"foo\", 0, \"java.lang.String\", \"s\");\n    javaWriter.emitSingleLineCOmment(\"foo\");\n     javaWriter.emitStatement(\"int j = s.length() + %s\", 13);\n     javaWriter.endMethod();\n     javaWriter.endType();", "fixed": "     javaWriter.emitPackage(\"com.squareup\");\n     javaWriter.beginType(\"com.squareup.Foo\", \"class\", 0);\n     javaWriter.beginMethod(\"int\", \"foo\", 0, \"java.lang.String\", \"s\");\n    javaWriter.emitSingleLineComment(\"foo\");\n     javaWriter.emitStatement(\"int j = s.length() + %s\", 13);\n     javaWriter.endMethod();\n     javaWriter.endType();", "sourceBeforeFix": "javaWriter.emitSingleLineCOmment(\"foo\")", "sourceAfterFix": "javaWriter.emitSingleLineComment(\"foo\")"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform1fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform1(location, v);\r\n \t}\r\n \tpublic void glUniform1fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform1(location, toFloatBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform1i (int location, int x) {\r", "fixed": " \t}\r\n \tpublic void glUniform1fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform1fv(location, v);\r\n \t}\r\n \tpublic void glUniform1fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform1fv(location, toFloatBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform1i (int location, int x) {\r", "sourceBeforeFix": "GL20.glUniformMatrix3(location,transpose,value)", "sourceAfterFix": "GL20.glUniformMatrix3fv(location,transpose,value)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineFunctions =\n       new PassFactory(\"inlineFunctions\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory printNameReferenceReport =\n       new PassFactory(\"printNameReferenceReport\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "3dddcc4cdf4a74ddbd4607c6aaee5bdd8ac46c27", "projectName": "gephi.gephi", "bugType": "Change Modifier", "problem": "     }\n     @Override\n    public void mouseClick() {\n         if (vizConfig.isSelectionEnable() && rectangleSelection && !customSelection) {\n             Rectangle rectangle = (Rectangle) currentSelectionArea;", "fixed": "     }\n     @Override\n    public synchronized void mouseClick() {\n         if (vizConfig.isSelectionEnable() && rectangleSelection && !customSelection) {\n             Rectangle rectangle = (Rectangle) currentSelectionArea;", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "35dc7982d28800b4fecdf0772236a2d8e054aa77", "projectName": "spring-projects.spring-boot", "bugType": "Change Modifier", "problem": " \tprivate int port = Integer.valueOf(System.getProperty(\"port\"));\n \t@Test\n\tpublic void testHome() throws Exception {\nString url = \"http:\n \t\tSystem.out.println(url);\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);", "fixed": " \tprivate int port = Integer.valueOf(System.getProperty(\"port\"));\n \t@Test\n\tvoid testHome() throws Exception {\nString url = \"http:\n \t\tSystem.out.println(url);\n \t\tResponseEntity<String> entity = new TestRestTemplate().getForEntity(url, String.class);", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  private final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Rewrite instance methods as static methods, to make them easier\n    * to inline.\n    */\n  final PassFactory devirtualizePrototypeMethods =\n       new PassFactory(\"devirtualizePrototypeMethods\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "958fa58492daee485f640bf3261449d9bab9ee6e", "projectName": "facebook.presto", "bugType": "Change Identifier Used", "problem": "     }\n     @Test(expectedExceptions = UnrecoverableS3OperationException.class, expectedExceptionsMessageRegExp = \".*\\\\Q (Path: /tmp/test/path)\\\\E\")\n    public void testUnrecoverableS3ExceptionMessage()\n     {\n         throw new UnrecoverableS3OperationException(new Path(\"/tmp/test/path\"), new IOException(\"test io exception\"));\n     }", "fixed": "     }\n     @Test(expectedExceptions = UnrecoverableS3OperationException.class, expectedExceptionsMessageRegExp = \".*\\\\Q (Path: /tmp/test/path)\\\\E\")\n    public void testUnrecoverableS3ExceptionMessage() throws Exception\n     {\n         throw new UnrecoverableS3OperationException(new Path(\"/tmp/test/path\"), new IOException(\"test io exception\"));\n     }", "sourceBeforeFix": "RuntimeException.class", "sourceAfterFix": "IOException.class"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "fixed": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2fv(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2fv(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "sourceBeforeFix": "GL20.glUniformMatrix3(location,transpose,value)", "sourceAfterFix": "GL20.glUniformMatrix3fv(location,transpose,value)"}
{"fixCommitSHA1": "8eaaa7fdcddab9de44049a062f413533d2447f26", "projectName": "brettwooldridge.HikariCP", "bugType": "Change Numeric Literal", "problem": "             quietlySleep(sleepBackoff);\n            sleepBackoff = Math.min(connectionTimeout / 2, (long) (sleepBackoff * 1.3));\n          }\n          return Boolean.FALSE;", "fixed": "             quietlySleep(sleepBackoff);\n            sleepBackoff = Math.min(connectionTimeout / 4, (long) (sleepBackoff * 1.3));\n          }\n          return Boolean.FALSE;", "sourceBeforeFix": "connectionTimeout / 2", "sourceAfterFix": "connectionTimeout / 4"}
{"fixCommitSHA1": "6b415679e1fd7d46122b8a4ddadd4fa422c635ca", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": "if (i < start + 2 || i > start + 9) break;\n \t\t\t\t\tColor color = colorPool.obtain();\n \t\t\t\t\tcolorStack.add(color);\n\t\t\t\t\tColor.rgb888ToColor(color, colorInt);\nif (i <= start + 7) color.a = 1f;\n \t\t\t\t\treturn i - start;\n \t\t\t\t}", "fixed": "if (i < start + 2 || i > start + 9) break;\n \t\t\t\t\tColor color = colorPool.obtain();\n \t\t\t\t\tcolorStack.add(color);\n\t\t\t\t\tColor.rgba8888ToColor(color, colorInt);\nif (i <= start + 7) color.a = 1f;\n \t\t\t\t\treturn i - start;\n \t\t\t\t}", "sourceBeforeFix": "Color.rgb888ToColor(color,colorInt)", "sourceAfterFix": "Color.rgba8888ToColor(color,colorInt)"}
{"fixCommitSHA1": "db5a771e90739dd0e121f45aff09f383a225113b", "projectName": "stanfordnlp.CoreNLP", "bugType": "Change Binary Operator", "problem": "       }\n     }\n     boolean overwriteOriginalNer = false;\n    if (prevNerEndIndex != (start-1) || nextNerStartIndex != end) {\n     } else if (startNer == null) {", "fixed": "       }\n     }\n     boolean overwriteOriginalNer = false;\n    if (prevNerEndIndex != (start-1) && nextNerStartIndex != end) {\n     } else if (startNer == null) {", "sourceBeforeFix": "prevNerEndIndex != (start - 1) || nextNerStartIndex != end", "sourceAfterFix": "prevNerEndIndex != (start - 1) && nextNerStartIndex != end"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform1iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform1(location, v);\r\n \t}\r\n \t@Override\r\n \tpublic void glUniform1iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform1(location, toIntBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform2f (int location, float x, float y) {\r", "fixed": " \t}\r\n \tpublic void glUniform1iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform1iv(location, v);\r\n \t}\r\n \t@Override\r\n \tpublic void glUniform1iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform1iv(location, toIntBuffer(v, offset, count));\r\n \t}\r\n \tpublic void glUniform2f (int location, float x, float y) {\r", "sourceBeforeFix": "GL20.glGetVertexAttrib(index,pname,params)", "sourceAfterFix": "GL20.glGetVertexAttribiv(index,pname,params)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface KubernetesJobEndpointBuilder\n             extends\n                 KubernetesJobEndpointConsumerBuilder, KubernetesJobEndpointProducerBuilder {\n         default AdvancedKubernetesJobEndpointBuilder advanced() {", "fixed": "     \n    public interface KubernetesJobEndpointBuilder\n             extends\n                 KubernetesJobEndpointConsumerBuilder, KubernetesJobEndpointProducerBuilder {\n         default AdvancedKubernetesJobEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsCsv(String path, int batchSize) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), batchSize, null);\n \t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsCsv(String path, int batchSize) {\n \t\treturn writeAsCsv(this, path, new WriteFormatAsCsv<OUT>(), batchSize, null);\n \t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface GooglePubsubEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedGooglePubsubEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface GooglePubsubEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedGooglePubsubEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniform(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "fixed": " \t}\r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n\t\tGL20.glGetUniformfv(program, location, params);\r\n \t}\r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n\t\tGL20.glGetUniformiv(program, location, params);\r\n \t}\r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r", "sourceBeforeFix": "GL20.glUniform2(location,v)", "sourceAfterFix": "GL20.glUniform2fv(location,v)"}
{"fixCommitSHA1": "2a8f12e49c15a3a369ce9fa67f5b1953c9f23578", "projectName": "facebook.presto", "bugType": "Change Numeric Literal", "problem": "     private Duration metastoreTimeout = new Duration(10, TimeUnit.SECONDS);\n     private Duration ipcPingInterval = new Duration(10, TimeUnit.SECONDS);\n    private Duration dfsTimeout = new Duration(10, TimeUnit.SECONDS);\n     private Duration dfsConnectTimeout = new Duration(500, TimeUnit.MILLISECONDS);\n     private int dfsConnectMaxRetries = 5;\n     private boolean verifyChecksum = true;", "fixed": "     private Duration metastoreTimeout = new Duration(10, TimeUnit.SECONDS);\n     private Duration ipcPingInterval = new Duration(10, TimeUnit.SECONDS);\n    private Duration dfsTimeout = new Duration(60, TimeUnit.SECONDS);\n     private Duration dfsConnectTimeout = new Duration(500, TimeUnit.MILLISECONDS);\n     private int dfsConnectMaxRetries = 5;\n     private boolean verifyChecksum = true;", "sourceBeforeFix": "new Duration(10,TimeUnit.SECONDS)", "sourceAfterFix": "new Duration(60,TimeUnit.SECONDS)"}
{"fixCommitSHA1": "73a03b5e232d8f7049a03361e0454cb2eecb90c7", "projectName": "hazelcast.hazelcast", "bugType": "Change Numeric Literal", "problem": "         }\n     }\n    @Test(timeout = 30000)\n     public void testSemaphoreWithFailuresAndJoin() {\n         final TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(3);", "fixed": "         }\n     }\n    @Test(timeout = 120000)\n     public void testSemaphoreWithFailuresAndJoin() {\n         final TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(3);", "sourceBeforeFix": "timeout=30000", "sourceAfterFix": "timeout=120000"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform3fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform3(location, v);\r\n \t}\r\n \tpublic void glUniform3fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform3(location, toFloatBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform3i (int location, int x, int y, int z) {\r", "fixed": " \t}\r\n \tpublic void glUniform3fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform3fv(location, v);\r\n \t}\r\n \tpublic void glUniform3fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform3fv(location, toFloatBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform3i (int location, int x, int y, int z) {\r", "sourceBeforeFix": "GL20.glUniform2(location,v)", "sourceAfterFix": "GL20.glUniform2iv(location,v)"}
{"fixCommitSHA1": "4a1fe28154e697fe94e5d611cf0586032bc95d63", "projectName": "facebook.presto", "bugType": "Change Binary Operator", "problem": "         else if (SEQUENCE_FILE_MAGIC.equals(magic)) {\n             byte sequenceFileVersion = input.readByte();\n            if (sequenceFileVersion == SEQUENCE_FILE_VERSION) {\n                 throw corrupt(\"File %s is a SequenceFile not an RCFile\", dataSource);\n             }", "fixed": "         else if (SEQUENCE_FILE_MAGIC.equals(magic)) {\n             byte sequenceFileVersion = input.readByte();\n            if (sequenceFileVersion != SEQUENCE_FILE_VERSION) {\n                 throw corrupt(\"File %s is a SequenceFile not an RCFile\", dataSource);\n             }", "sourceBeforeFix": "sequenceFileVersion == SEQUENCE_FILE_VERSION", "sourceAfterFix": "sequenceFileVersion != SEQUENCE_FILE_VERSION"}
{"fixCommitSHA1": "0a2b272cb8cb45faafd95a3bbc9e9af813620e09", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "     private void clearLockStore(String name) {\n         NodeEngine nodeEngine = service.getNodeEngine();\n        LockService lockService = nodeEngine.getService(LockService.SERVICE_NAME);\n         if (lockService != null) {\n             DefaultObjectNamespace namespace = new DefaultObjectNamespace(MultiMapService.SERVICE_NAME, name);\n             lockService.clearLockStore(partitionId, namespace);", "fixed": "     private void clearLockStore(String name) {\n         NodeEngine nodeEngine = service.getNodeEngine();\n        LockService lockService = nodeEngine.getSharedService(LockService.SERVICE_NAME);\n         if (lockService != null) {\n             DefaultObjectNamespace namespace = new DefaultObjectNamespace(MultiMapService.SERVICE_NAME, name);\n             lockService.clearLockStore(partitionId, namespace);", "sourceBeforeFix": "nodeEngine.getService(LockService.SERVICE_NAME)", "sourceAfterFix": "nodeEngine.getSharedService(LockService.SERVICE_NAME)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface ElsqlEndpointBuilder\n             extends\n                 ElsqlEndpointConsumerBuilder, ElsqlEndpointProducerBuilder {\n         default AdvancedElsqlEndpointBuilder advanced() {", "fixed": "     \n    public interface ElsqlEndpointBuilder\n             extends\n                 ElsqlEndpointConsumerBuilder, ElsqlEndpointProducerBuilder {\n         default AdvancedElsqlEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "6618cef776cf1c9ce67ff8ee461412110ca5ada7", "projectName": "apache.flink", "bugType": "Wrong Function Name", "problem": " \t\t\t\t\texecutor);\n \t\t\t}\n \t\t} catch (Exception e) {\n\t\t\tLOG.warn(\"Exception while fetching metrics.\", e);\n \t\t}\n \t}", "fixed": " \t\t\t\t\texecutor);\n \t\t\t}\n \t\t} catch (Exception e) {\n\t\t\tLOG.debug(\"Exception while fetching metrics.\", e);\n \t\t}\n \t}", "sourceBeforeFix": "LOG.warn(\"Requesting paths for query services failed.\",throwable)", "sourceAfterFix": "LOG.debug(\"Requesting paths for query services failed.\",throwable)"}
{"fixCommitSHA1": "5d9193eb8fcb699722980d5e5680557553c3ee39", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "     @Before\n     public void setup() throws Exception {\n         SimpleRegistry registry = new SimpleRegistry();\n        registry.put(\"firehoseClient\", amazonKinesisFirehoseClient);\n         camelContext = new DefaultCamelContext(registry);\n     }", "fixed": "     @Before\n     public void setup() throws Exception {\n         SimpleRegistry registry = new SimpleRegistry();\n        registry.bind(\"firehoseClient\", amazonKinesisFirehoseClient);\n         camelContext = new DefaultCamelContext(registry);\n     }", "sourceBeforeFix": "registry.put(\"firehoseClient\",amazonKinesisFirehoseClient)", "sourceAfterFix": "registry.bind(\"firehoseClient\",amazonKinesisFirehoseClient)"}
{"fixCommitSHA1": "6c4e39d4c1356bd3c068af3a2d42cf020e960842", "projectName": "spring-projects.spring-boot", "bugType": "Wrong Function Name", "problem": " \tpublic boolean matches(ClassNode classNode) {\n\t\treturn AstUtils.hasLeastOneAnnotation(classNode, \"MessageEndpoint\",\n \t\t\t\t\"EnableIntegrationPatterns\");\n \t}", "fixed": " \tpublic boolean matches(ClassNode classNode) {\n\t\treturn AstUtils.hasAtLeastOneAnnotation(classNode, \"MessageEndpoint\",\n \t\t\t\t\"EnableIntegrationPatterns\");\n \t}", "sourceBeforeFix": "AstUtils.hasLeastOneAnnotation(classNode,\"MessageEndpoint\",\"EnableIntegrationPatterns\")", "sourceAfterFix": "AstUtils.hasAtLeastOneAnnotation(classNode,\"MessageEndpoint\",\"EnableIntegrationPatterns\")"}
{"fixCommitSHA1": "cec2ed6d25f9b3f70b90ee3c8af70149992dbbce", "projectName": "alibaba.druid", "bugType": "Same Function More Args", "problem": "     protected final AtomicLong                         cachedPreparedStatementDeleteCount        = new AtomicLong();\n     protected final AtomicLong                         cachedPreparedStatementMissCount          = new AtomicLong();\n    protected final Histogram                          transactionHistogram                      = new Histogram(\n                                                                                                                  10,\n                                                                                                                  100,\n                                                                                                                  1000,", "fixed": "     protected final AtomicLong                         cachedPreparedStatementDeleteCount        = new AtomicLong();\n     protected final AtomicLong                         cachedPreparedStatementMissCount          = new AtomicLong();\n    protected final Histogram                          transactionHistogram                      = new Histogram(1,\n                                                                                                                  10,\n                                                                                                                  100,\n                                                                                                                  1000,", "sourceBeforeFix": "new Histogram(10,100,1000,10 * 1000,100 * 1000)", "sourceAfterFix": "new Histogram(1,10,100,1000,10 * 1000,100 * 1000)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory deadAssignmentsElimination =\n       new PassFactory(\"deadAssignmentsElimination\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15839, value = \"Operation failed or was rolled back on all servers.\")\n     String operationFailedOrRolledBack();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10839, value = \"Operation failed or was rolled back on all servers.\")\n     String operationFailedOrRolledBack();\n     /**", "sourceBeforeFix": "id=15841", "sourceAfterFix": "id=10841"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "      */\n     public ResponseList<Status> getUserTimeline(String id, Paging paging)\n             throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline/\" + id + \".json\",\n                 null, paging.asPostParameterList(), http.isAuthenticationEnabled()));\n     }", "fixed": "      */\n     public ResponseList<Status> getUserTimeline(String id, Paging paging)\n             throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline/\" + id + \".json\",\n                 null, paging.asPostParameterList(), http.isAuthenticationEnabled()));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/public_timeline.json\",false))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/public_timeline.json\",false))"}
{"fixCommitSHA1": "2921e7bf0d74a65fdcc71d3ce3053037d14e4d44", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "     protected void handleQPoll(String[] args) {\n         long timeout = 0;\n         if (args.length > 1) {\n            timeout = Long.valueOf(args[1]);\n         }\n         try {\n             println(getQueue().poll(timeout, TimeUnit.SECONDS));", "fixed": "     protected void handleQPoll(String[] args) {\n         long timeout = 0;\n         if (args.length > 1) {\n            timeout = Long.parseLong(args[1]);\n         }\n         try {\n             println(getQueue().poll(timeout, TimeUnit.SECONDS));", "sourceBeforeFix": "Long.valueOf(args[1])", "sourceAfterFix": "Long.parseLong(args[1])"}
{"fixCommitSHA1": "cac8c34ac61668aa269366408e613ac0ed5db729", "projectName": "junit-team.junit", "bugType": "Change Modifier", "problem": "     private static final String DELTA= \"void delta()\";\n     private static final String EPSILON= \"void epsilon()\";\n    private static class Dummy {\n         Object alpha(int i, double d, Thread t) {return null;}\n         void beta(int[][] x) {}\n         int gamma() {return 0;}", "fixed": "     private static final String DELTA= \"void delta()\";\n     private static final String EPSILON= \"void epsilon()\";\n    static class Dummy {\n         Object alpha(int i, double d, Thread t) {return null;}\n         void beta(int[][] x) {}\n         int gamma() {return 0;}", "sourceBeforeFix": "10", "sourceAfterFix": "8"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory denormalize =\n       new PassFactory(\"denormalize\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "3757a700a89638e5747d966bdaa8266b62c974c8", "projectName": "google.guava", "bugType": "Change Modifier", "problem": "   }\n   @GwtIncompatible(\"Reader/Writer\")\n  private void testStreamingEncodingWithSeparators(\n       BaseEncoding encoding, String decoded, String encoded) throws IOException {\n     testStreamingEncoding(encoding, decoded, encoded);", "fixed": "   }\n   @GwtIncompatible(\"Reader/Writer\")\n  private static void testStreamingEncodingWithSeparators(\n       BaseEncoding encoding, String decoded, String encoded) throws IOException {\n     testStreamingEncoding(encoding, decoded, encoded);", "sourceBeforeFix": "1", "sourceAfterFix": "9"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface BraintreeEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedBraintreeEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface BraintreeEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedBraintreeEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "7f4ede5a12b6a6056d545edcbcba8754e7d05624", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "         env.put(\"java.naming.security.authentication\", \"simple\");\n         SimpleRegistry reg = new SimpleRegistry();\n        reg.put(\"localhost:\" + port, env);\n         camel = new DefaultCamelContext(reg);\n         template = camel.createProducerTemplate();\n     }", "fixed": "         env.put(\"java.naming.security.authentication\", \"simple\");\n         SimpleRegistry reg = new SimpleRegistry();\n        reg.bind(\"localhost:\" + port, env);\n         camel = new DefaultCamelContext(reg);\n         template = camel.createProducerTemplate();\n     }", "sourceBeforeFix": "reg.put(\"localhost:\" + port,env)", "sourceAfterFix": "reg.bind(\"localhost:\" + port,env)"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     @ApiOperation(value = \"test json serialization of form data\", notes = \"\", tags={ \"fake\" })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Void.class) })\n    void testJsonFormData(@FormParam(value = \"param\")  String param,@FormParam(value = \"param2\")  String param2);\n }", "fixed": "     @ApiOperation(value = \"test json serialization of form data\", notes = \"\", tags={ \"fake\" })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Void.class) })\n    void testJsonFormData(@FormParam(value = \"param\")  String param,@FormParam(value = \"param2\")  String param2) throws Exception;\n }", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": "* @see\n* @see NormalizableKey\n \t */\n\tpublic void writeWithKeyNormalization(T record, DataOutputView target) throws IOException;\n \t/**\n \t * Reads the record back while de-normalizing the key fields. This must only be used when", "fixed": "* @see\n* @see NormalizableKey\n \t */\n\tpublic abstract void writeWithKeyNormalization(T record, DataOutputView target) throws IOException;\n \t/**\n \t * Reads the record back while de-normalizing the key fields. This must only be used when", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "fixed": " \t}\r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform4fv(location, v);\r\n \t}\r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform4fv(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r", "sourceBeforeFix": "GL20.glUniform4(location,v)", "sourceAfterFix": "GL20.glUniform4iv(location,v)"}
{"fixCommitSHA1": "73b39f0f9d0221f0e932ea27f9ba779d6f5bb71b", "projectName": "Alluxio.alluxio", "bugType": "Same Function Less Args", "problem": "       try {\n         mCurrentCacheStream.write(data);\n       } catch (IOException ioe) {\n        LOG.warn(\"Block of ID \" + getCurrentBlockId() + \" could not be cached into Tachyon\", ioe);\n         mShouldCacheCurrentBlock = false;\n       }\n     }", "fixed": "       try {\n         mCurrentCacheStream.write(data);\n       } catch (IOException ioe) {\n        LOG.warn(\"Block of ID \" + getCurrentBlockId() + \" could not be cached into Tachyon\");\n         mShouldCacheCurrentBlock = false;\n       }\n     }", "sourceBeforeFix": "LOG.warn(\"Block of ID \" + getCurrentBlockId() + \" could not be cached into Tachyon\",ioe)", "sourceAfterFix": "LOG.warn(\"Block of ID \" + getCurrentBlockId() + \" could not be cached into Tachyon\")"}
{"fixCommitSHA1": "3dddcc4cdf4a74ddbd4607c6aaee5bdd8ac46c27", "projectName": "gephi.gephi", "bugType": "Change Modifier", "problem": "     }\n     @Override\n    public void resetSelection() {\n         resetNodesSelection();\n         resetEdgesSelection();", "fixed": "     }\n     @Override\n    public synchronized void resetSelection() {\n         resetNodesSelection();\n         resetEdgesSelection();", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "038c9b6d6103052795b6d6e1175cd964c7461bb2", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Change Modifier", "problem": "         }\n         \n        protected int readULong(final int position) throws NtlmEngineException {\n             return NtlmEngine.readULong(messageContents, position);\n         }\n         \n        protected byte[] readSecurityBuffer(final int position) throws NtlmEngineException {\n             return NtlmEngine.readSecurityBuffer(messageContents, position);\n         }", "fixed": "         }\n         \n        protected final int readULong(final int position) throws NtlmEngineException {\n             return NtlmEngine.readULong(messageContents, position);\n         }\n         \n        protected final byte[] readSecurityBuffer(final int position) throws NtlmEngineException {\n             return NtlmEngine.readSecurityBuffer(messageContents, position);\n         }", "sourceBeforeFix": "4", "sourceAfterFix": "20"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should set uuid on implementation id global property\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)\n\tpublic void setImplementationId(ImplementationId implementationId) throws APIException;\n \t/**\n \t * Gets the list of locales which the administrator has allowed for use on the system. This is", "fixed": " \t * @should set uuid on implementation id global property\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)\n\tpublic void setImplementationId(ImplementationId implementationId);\n \t/**\n \t * Gets the list of locales which the administrator has allowed for use on the system. This is", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      * @param hostName the name of the host.\n      */\n     @LogMessage(level = Level.WARN)\n    @Message(id = 15804, value = \"Interrupted awaiting final response from host %s\")\n     void interruptedAwaitingFinalResponse(String hostName);\n     /**", "fixed": "      * @param hostName the name of the host.\n      */\n     @LogMessage(level = Level.WARN)\n    @Message(id = 10804, value = \"Interrupted awaiting final response from host %s\")\n     void interruptedAwaitingFinalResponse(String hostName);\n     /**", "sourceBeforeFix": "id=15805", "sourceAfterFix": "id=10805"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  private final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "         @ApiResponse(code = 200, message = \"successful operation\", response = User.class),\n         @ApiResponse(code = 400, message = \"Invalid username supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"User not found\", response = Void.class) })\n    User getUserByName(@PathParam(\"username\") @ApiParam(\"The name that needs to be fetched. Use user1 for testing. \") String username);\n     @GET\n     @Path(\"/login\")", "fixed": "         @ApiResponse(code = 200, message = \"successful operation\", response = User.class),\n         @ApiResponse(code = 400, message = \"Invalid username supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"User not found\", response = Void.class) })\n    User getUserByName(@PathParam(\"username\") @ApiParam(\"The name that needs to be fetched. Use user1 for testing. \") String username) throws Exception;\n     @GET\n     @Path(\"/login\")", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "3761eecbff48b37391956c4c2d035c3b8456e39e", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "     @Test\n     public void testTimerInvoked() throws Exception {\n        mock.expectedMessageCount(1);\n         assertMockEndpointsSatisfied();\n     }", "fixed": "     @Test\n     public void testTimerInvoked() throws Exception {\n        mock.expectedMinimumMessageCount(1);\n         assertMockEndpointsSatisfied();\n     }", "sourceBeforeFix": "mock.expectedMessageCount(1)", "sourceAfterFix": "mock.expectedMinimumMessageCount(1)"}
{"fixCommitSHA1": "4665dcf9ab41c3c61cd42aad296ebfe518bfa003", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\n \t\tBuffer pixels) {\n\t\tGL.glTexSubImage2DEXT(target, level, xoffset, yoffset, width, height, format, type, pixels, Memory.getPosition(pixels));\n \t}\n \tpublic void glViewport (int x, int y, int width, int height) {", "fixed": " \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\n \t\tBuffer pixels) {\n\t\tGL.glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels, Memory.getPosition(pixels));\n \t}\n \tpublic void glViewport (int x, int y, int width, int height) {", "sourceBeforeFix": "GL.glBindTextureEXT(target,texture)", "sourceAfterFix": "GL.glBindTexture(target,texture)"}
{"fixCommitSHA1": "48b99e43fca1306ba54dad61bdacd4259673552b", "projectName": "druid-io.druid", "bugType": "Change Identifier Used", "problem": "     synchronized (lock) {\n       if (segmentsToDrop.contains(holder)) {\n         if (callback != null) {\n          currentlyProcessing.addCallback(callback);\n         }\n         return;\n       }", "fixed": "     synchronized (lock) {\n       if (segmentsToDrop.contains(holder)) {\n         if (callback != null) {\n          holder.addCallback(callback);\n         }\n         return;\n       }", "sourceBeforeFix": "currentlyProcessing.addCallback(callback)", "sourceAfterFix": "holder.addCallback(callback)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15869, value = \"Unknown %s %s\")\n     String unknown(String name, String value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10869, value = \"Unknown %s %s\")\n     String unknown(String name, String value);\n     /**", "sourceBeforeFix": "id=15839", "sourceAfterFix": "id=10839"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15844, value = \"Invalid rollout plan. Server group %s appears more than once in the plan.\")\n     String invalidRolloutPlanGroupAlreadyExists(String group);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10844, value = \"Invalid rollout plan. Server group %s appears more than once in the plan.\")\n     String invalidRolloutPlanGroupAlreadyExists(String group);\n     /**", "sourceBeforeFix": "id=15850", "sourceAfterFix": "id=10850"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "         @ApiResponse(code = 200, message = \"successful operation\", response = User.class),\n         @ApiResponse(code = 400, message = \"Invalid username supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"User not found\", response = Void.class) })\n    User getUserByName(@PathParam(\"username\") @ApiParam(\"The name that needs to be fetched. Use user1 for testing. \") String username);\n     @GET\n     @Path(\"/login\")", "fixed": "         @ApiResponse(code = 200, message = \"successful operation\", response = User.class),\n         @ApiResponse(code = 400, message = \"Invalid username supplied\", response = Void.class),\n         @ApiResponse(code = 404, message = \"User not found\", response = Void.class) })\n    User getUserByName(@PathParam(\"username\") @ApiParam(\"The name that needs to be fetched. Use user1 for testing. \") String username) throws Exception;\n     @GET\n     @Path(\"/login\")", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory moveFunctionDeclarations =\n       new PassFactory(\"moveFunctionDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameter(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "fixed": " \t}\r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glGetTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tGL11.glGetTexParameteriv(target, pname, params);\r\n \t}\r\n \tpublic int glGetUniformLocation (int program, String name) {\r", "sourceBeforeFix": "GL20.glUniformMatrix3(location,transpose,toFloatBuffer(value,offset,count * 9))", "sourceAfterFix": "GL20.glUniformMatrix3fv(location,transpose,toFloatBuffer(value,offset,count * 9))"}
{"fixCommitSHA1": "80247ada8e7daa46660c732c4fc927e26f055d76", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "         for (Property property : legacyModel.asPropertyList()) {\n             String name = property.getName();\n             final ModelNode legacyValue = property.getValue();\n            if (legacyModel.isDefined()) {\n                 final ModelNode value;\n                 switch (name) {\n                     case JacORBSubsystemConstants.ORB_GIOP_MINOR_VERSION:", "fixed": "         for (Property property : legacyModel.asPropertyList()) {\n             String name = property.getName();\n             final ModelNode legacyValue = property.getValue();\n            if (legacyValue.isDefined()) {\n                 final ModelNode value;\n                 switch (name) {\n                     case JacORBSubsystemConstants.ORB_GIOP_MINOR_VERSION:", "sourceBeforeFix": "legacyModel.isDefined()", "sourceAfterFix": "legacyValue.isDefined()"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glGetProgramiv (int program, int pname, IntBuffer params) {\r\n\t\tGL20.glGetProgram(program, pname, params);\r\n \t}\r\n \tpublic void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tEXTFramebufferObject.glGetRenderbufferParameterEXT(target, pname, params);\r\n \t}\r\n \tpublic String glGetShaderInfoLog (int shader) {\r", "fixed": " \t}\r\n \tpublic void glGetProgramiv (int program, int pname, IntBuffer params) {\r\n\t\tGL20.glGetProgramiv(program, pname, params);\r\n \t}\r\n \tpublic void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {\r\n\t\tEXTFramebufferObject.glGetRenderbufferParameterivEXT(target, pname, params);\r\n \t}\r\n \tpublic String glGetShaderInfoLog (int shader) {\r", "sourceBeforeFix": "GL20.glUniformMatrix2(location,transpose,toFloatBuffer(value,offset,count << 2))", "sourceAfterFix": "GL20.glUniformMatrix2fv(location,transpose,toFloatBuffer(value,offset,count << 2))"}
{"fixCommitSHA1": "f9c863f126519ad2cfd7af4cef3eed04e8f87ea3", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"apply\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;C)Z\");\n         } else if (propertyClass == long.class) {\n            mw.visitVarInsn(LLOAD, context.var(\"long\"));\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"apply\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;J)Z\");\n         } else if (propertyClass == float.class) {", "fixed": "             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"apply\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;C)Z\");\n         } else if (propertyClass == long.class) {\n            mw.visitVarInsn(LLOAD, context.var(\"long\", 2));\n             mw.visitMethodInsn(INVOKESTATIC, getType(FilterUtils.class), \"apply\",\n                                \"(Lcom/alibaba/fastjson/serializer/JSONSerializer;Ljava/lang/Object;Ljava/lang/String;J)Z\");\n         } else if (propertyClass == float.class) {", "sourceBeforeFix": "context.var(\"double\")", "sourceAfterFix": "context.var(\"double\",2)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedJingEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default JingEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedJingEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default JingEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  private final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "c4babda4bab878adeec4d534a1e62c8ddf5c5c06", "projectName": "wildfly.wildfly", "bugType": "Change Identifier Used", "problem": "             this.name = \"/\";\n             this.value = \"\";\n             this.isLeaf = false;\n            this.seperator = \"\";\n         }\n         /**\n          * Constructor for generic folder where resource=*.", "fixed": "             this.name = \"/\";\n             this.value = \"\";\n             this.isLeaf = false;\n            this.separator = \"\";\n         }\n         /**\n          * Constructor for generic folder where resource=*.", "sourceBeforeFix": "this.seperator", "sourceAfterFix": "this.separator"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedToMe() throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_to_me.json\",\n                 null, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedToMe() throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_to_me.json\",\n                 null, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline.json\",true))"}
{"fixCommitSHA1": "de4c207aafb924e5a104e7f1b9e3b37c0f05bebb", "projectName": "yusuke.twitter4j", "bugType": "Same Function Swap Args", "problem": "         \n         User user = null;\n         try {\n            user = twitter1.checkUserListMembership(id1.screenName, id2.id, userList.getId());\n             fail(\"id2 shouldn't be a member of the userList yet. expecting a TwitterException\");\n         } catch (TwitterException te) {\n             assertEquals(404, te.getStatusCode());", "fixed": "         \n         User user = null;\n         try {\n            user = twitter1.checkUserListMembership(id1.screenName, userList.getId(), id2.id);\n             fail(\"id2 shouldn't be a member of the userList yet. expecting a TwitterException\");\n         } catch (TwitterException te) {\n             assertEquals(404, te.getStatusCode());", "sourceBeforeFix": "twitter1.checkUserListMembership(id1.screenName,id2.id,userList.getId())", "sourceAfterFix": "twitter1.checkUserListMembership(id1.screenName,userList.getId(),id2.id)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15851, value = \"Operation targets host %s but that host is not registered\")\n     String invalidOperationTargetHost(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10851, value = \"Operation targets host %s but that host is not registered\")\n     String invalidOperationTargetHost(String name);\n     /**", "sourceBeforeFix": "id=15856", "sourceAfterFix": "id=10856"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15861, value = \"Cannot remove deployment %s from the domain as it is still used by server groups %s\")\n     String cannotRemoveDeploymentInUse(String name, List<String> groups);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10861, value = \"Cannot remove deployment %s from the domain as it is still used by server groups %s\")\n     String cannotRemoveDeploymentInUse(String name, List<String> groups);\n     /**", "sourceBeforeFix": "id=15844", "sourceAfterFix": "id=10844"}
{"fixCommitSHA1": "f1f4c0fbfc0c36363a3751f942071199eb3dbeeb", "projectName": "Alluxio.alluxio", "bugType": "Change Unary Operator\t", "problem": "     for (FileStatus status : files) {\n       UfsStatus retStatus;\n      if (status.isDir()) {\n         retStatus = new UfsFileStatus(status.getPath().getName(), status.getLen(),\n             status.getModificationTime(), status.getOwner(), status.getGroup(),\n             status.getPermission().toShort());", "fixed": "     for (FileStatus status : files) {\n       UfsStatus retStatus;\n      if (!status.isDir()) {\n         retStatus = new UfsFileStatus(status.getPath().getName(), status.getLen(),\n             status.getModificationTime(), status.getOwner(), status.getGroup(),\n             status.getPermission().toShort());", "sourceBeforeFix": "status.isDir()", "sourceAfterFix": "!status.isDir()"}
{"fixCommitSHA1": "f135cc4188dd173e8fc175bc5d26cf1a970ac39e", "projectName": "wildfly.wildfly", "bugType": "Wrong Function Name", "problem": "                 ModelNode oldResponse = response;\n                 try {\n                     flags = EnumSet.noneOf(Flag.class);\n                    response = step.response;\n                     ModelNode newOperation = operation = step.operation;\n                     modelAddress = PathAddress.pathAddress(newOperation.get(ADDRESS));\n                     step.handler.execute(this, newOperation);", "fixed": "                 ModelNode oldResponse = response;\n                 try {\n                     flags = EnumSet.noneOf(Flag.class);\n                    response = this.response = step.response;\n                     ModelNode newOperation = operation = step.operation;\n                     modelAddress = PathAddress.pathAddress(newOperation.get(ADDRESS));\n                     step.handler.execute(this, newOperation);", "sourceBeforeFix": "response.set(ROLLED_BACK)", "sourceAfterFix": "response.get(ROLLED_BACK)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory invertContextualRenaming =\n       new PassFactory(\"invertNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface LanguageEndpointBuilder\n            extends\n                EndpointProducerBuilder {\n         default AdvancedLanguageEndpointBuilder advanced() {\n             return (AdvancedLanguageEndpointBuilder) this;\n         }", "fixed": "     \n    public interface LanguageEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedLanguageEndpointBuilder advanced() {\n             return (AdvancedLanguageEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "b2cfd099988a9491b1fa0052ab32a0c05596698e", "projectName": "brettwooldridge.HikariCP", "bugType": "Change Numeric Literal", "problem": "          Connection connection6 = ds.getConnection();\n          Connection connection7 = ds.getConnection();\n         Thread.sleep(1200);\n          Assert.assertSame(\"Totals connections not as expected\", 10, TestElf.getPool(ds).getTotalConnections());\n          Assert.assertSame(\"Idle connections not as expected\", 3, TestElf.getPool(ds).getIdleConnections());", "fixed": "          Connection connection6 = ds.getConnection();\n          Connection connection7 = ds.getConnection();\n         Thread.sleep(2000);\n          Assert.assertSame(\"Totals connections not as expected\", 10, TestElf.getPool(ds).getTotalConnections());\n          Assert.assertSame(\"Idle connections not as expected\", 3, TestElf.getPool(ds).getIdleConnections());", "sourceBeforeFix": "Thread.sleep(1200)", "sourceAfterFix": "Thread.sleep(2000)"}
{"fixCommitSHA1": "83b9dd427535bce39be43a9e8224cdbc352d7427", "projectName": "square.okhttp", "bugType": "Change Modifier", "problem": "     private final String contentType;\n     private final String contentLength;\n    public CacheResponseBody(final DiskLruCache.Snapshot snapshot,\n         String contentType, String contentLength) {\n       this.snapshot = snapshot;\n       this.contentType = contentType;", "fixed": "     private final String contentType;\n     private final String contentLength;\n    CacheResponseBody(final DiskLruCache.Snapshot snapshot,\n         String contentType, String contentLength) {\n       this.snapshot = snapshot;\n       this.contentType = contentType;", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "c39ce11b105be36238be1cc5b406dd0037c8284c", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "      *\n      * @param resource the resource\n      */\n    public ResourceInternal(T resource) {\n       mResource = resource;\n       mLastAccessTimeMs = mClock.millis();\n     }", "fixed": "      *\n      * @param resource the resource\n      */\n    public ResourceInternal(R resource) {\n       mResource = resource;\n       mLastAccessTimeMs = mClock.millis();\n     }", "sourceBeforeFix": "T", "sourceAfterFix": "R"}
{"fixCommitSHA1": "f006de8639371e844451db9024bcf4c8823b45b6", "projectName": "druid-io.druid", "bugType": "Change Identifier Used", "problem": "       } else {\n         Set<String> metricsSet = new HashSet<>();\n         for (TimelineObjectHolder<String, DataSegment> timelineObjectHolder : timeLineSegments) {\n          metricsSet.addAll(timelineObjectHolder.getObject().getChunk(0).getObject().getDimensions());\n         }\n         metricsList = Lists.newArrayList(metricsSet);\n       }", "fixed": "       } else {\n         Set<String> metricsSet = new HashSet<>();\n         for (TimelineObjectHolder<String, DataSegment> timelineObjectHolder : timeLineSegments) {\n          metricsSet.addAll(timelineObjectHolder.getObject().getChunk(0).getObject().getMetrics());\n         }\n         metricsList = Lists.newArrayList(metricsSet);\n       }", "sourceBeforeFix": "timelineObjectHolder.getObject().getChunk(0).getObject().getDimensions()", "sourceAfterFix": "timelineObjectHolder.getObject().getChunk(0).getObject().getMetrics()"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedJGroupsRaftEndpointBuilder\n             extends\n                 AdvancedJGroupsRaftEndpointConsumerBuilder, AdvancedJGroupsRaftEndpointProducerBuilder {\n         default JGroupsRaftEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedJGroupsRaftEndpointBuilder\n             extends\n                 AdvancedJGroupsRaftEndpointConsumerBuilder, AdvancedJGroupsRaftEndpointProducerBuilder {\n         default JGroupsRaftEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory instrumentFunctions =\n       new PassFactory(\"instrumentFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fa829ec763703ed534b7fa1d79271857a28f4142", "projectName": "openhab.openhab", "bugType": "Change Numeric Literal", "problem": "     @Override\n     public byte[] decodeMessage() {\n        byte[] data = new byte[19];\n        data[0] = 0x13;\n         data[1] = RFXComBaseMessage.PacketType.CURRENT_ENERGY.toByte();\n         data[2] = subType.toByte();\n         data[3] = seqNbr;", "fixed": "     @Override\n     public byte[] decodeMessage() {\n        byte[] data = new byte[20];\n        data[0] = (byte)(data.length-1);\n         data[1] = RFXComBaseMessage.PacketType.CURRENT_ENERGY.toByte();\n         data[2] = subType.toByte();\n         data[3] = seqNbr;", "sourceBeforeFix": "new byte[19]", "sourceAfterFix": "new byte[20]"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStream<OUT> writeAsCsv(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsCsv<OUT> format, long millis, OUT endTuple) {\n\t\tDataStream<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByMillis<OUT>(\n \t\t\t\tpath, format, millis, endTuple));\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "fixed": " \t * \n \t * @return the data stream constructed\n \t */\n\tprivate DataStreamSink<OUT> writeAsCsv(DataStream<OUT> inputStream, String path,\n \t\t\tWriteFormatAsCsv<OUT> format, long millis, OUT endTuple) {\n\t\tDataStreamSink<OUT> returnStream = addSink(inputStream, new WriteSinkFunctionByMillis<OUT>(\n \t\t\t\tpath, format, millis, endTuple));\n \t\tjobGraphBuilder.setBytesFrom(inputStream.getId(), returnStream.getId());\n \t\tjobGraphBuilder.setMutability(returnStream.getId(), false);", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "0e5fb3b2a49dc21509c63d70d2a6120830c4d51a", "projectName": "Activiti.Activiti", "bugType": "Change Numeric Literal", "problem": "     ModelMBeanInfo beanInfo = mbeanInfoAssembler.getMBeanInfo(new BadInherited(), null, \"someName\");\r\n     assertNotNull(beanInfo);\r\n     assertNotNull(beanInfo.getAttributes());\r\n    assertEquals(0, beanInfo.getAttributes().length);\r\n     assertNotNull(beanInfo.getOperations());\r\n    assertEquals(0, beanInfo.getOperations().length);\r\n   }\r", "fixed": "     ModelMBeanInfo beanInfo = mbeanInfoAssembler.getMBeanInfo(new BadInherited(), null, \"someName\");\r\n     assertNotNull(beanInfo);\r\n     assertNotNull(beanInfo.getAttributes());\r\n    assertEquals(2, beanInfo.getAttributes().length);\r\n     assertNotNull(beanInfo.getOperations());\r\n    assertEquals(1, beanInfo.getOperations().length);\r\n   }\r", "sourceBeforeFix": "assertEquals(0,beanInfo.getAttributes().length)", "sourceAfterFix": "assertEquals(2,beanInfo.getAttributes().length)"}
{"fixCommitSHA1": "3691be4c1f9974b445e682c6d290306700eab602", "projectName": "Atmosphere.atmosphere", "bugType": "Wrong Function Name", "problem": "             final Map<String, String> m = new HashMap<String, String>();\n             for (Map.Entry<String,AtmosphereHandlerWrapper> e : config.handlers().entrySet()) {\n                 UriTemplate t = new UriTemplate(e.getKey());\n                logger.trace(\"Trying to map {} to {}\", t, path);\n                 if (t.match(path, m)) {\n                     atmosphereHandlerWrapper = e.getValue();\n                     logger.trace(\"Mapped {} to {}\", t, e.getValue());", "fixed": "             final Map<String, String> m = new HashMap<String, String>();\n             for (Map.Entry<String,AtmosphereHandlerWrapper> e : config.handlers().entrySet()) {\n                 UriTemplate t = new UriTemplate(e.getKey());\n                logger.debug(\"Trying to map {} to {}\", t, path);\n                 if (t.match(path, m)) {\n                     atmosphereHandlerWrapper = e.getValue();\n                     logger.trace(\"Mapped {} to {}\", t, e.getValue());", "sourceBeforeFix": "logger.trace(\"Trying to map {} to {}\",t,path)", "sourceAfterFix": "logger.debug(\"Trying to map {} to {}\",t,path)"}
{"fixCommitSHA1": "1a9bb447fd14415ef270f3dd7af8a0d4e0017177", "projectName": "Atmosphere.atmosphere", "bugType": "Change Identifier Used", "problem": "     @Override\n     public final AtmosphereResource create(AtmosphereConfig config,\n                                            Broadcaster broadcaster,\n                                           DefaultAtmosphereRequest request,\n                                            AtmosphereResponse response,\n                                            AsyncSupport<?> a,\n                                            AtmosphereHandler handler) {", "fixed": "     @Override\n     public final AtmosphereResource create(AtmosphereConfig config,\n                                            Broadcaster broadcaster,\n                                           AtmosphereRequest request,\n                                            AtmosphereResponse response,\n                                            AsyncSupport<?> a,\n                                            AtmosphereHandler handler) {", "sourceBeforeFix": "DefaultAtmosphereRequest request", "sourceAfterFix": "AtmosphereRequest request"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15867, value = \"Cannot use %s with the same value for parameters %s and %s. \" +\n             \"Use %s to redeploy the same content or %s to replace content with a new version with the same name.\")\n     String cannotUseSameValueForParameters(String opName, String param1, String param2, String redeployOpName, String replaceOpName);", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10867, value = \"Cannot use %s with the same value for parameters %s and %s. \" +\n             \"Use %s to redeploy the same content or %s to replace content with a new version with the same name.\")\n     String cannotUseSameValueForParameters(String opName, String param1, String param2, String redeployOpName, String replaceOpName);", "sourceBeforeFix": "id=15872", "sourceAfterFix": "id=10872"}
{"fixCommitSHA1": "0357cee3c69cd265d295a0db716ae57fb1107ea4", "projectName": "apache.hive", "bugType": "More Specific If", "problem": "       boolean hasAsClause = (!isInTransform) && (child.getChildCount() == 2);\n      if (!isUDTF && child.getChildCount() > 2) {\n         throw new SemanticException(ErrorMsg.INVALID_AS.getMsg());\n       }", "fixed": "       boolean hasAsClause = (!isInTransform) && (child.getChildCount() == 2);\n      if (!isInTransform && !isUDTF && child.getChildCount() > 2) {\n         throw new SemanticException(ErrorMsg.INVALID_AS.getMsg());\n       }", "sourceBeforeFix": "!isUDTF && child.getChildCount() > 2", "sourceAfterFix": "!isInTransform && !isUDTF && child.getChildCount() > 2"}
{"fixCommitSHA1": "1b65b9c021feaab009ed5bf597d9e791c4c16727", "projectName": "Atmosphere.atmosphere", "bugType": "Change Binary Operator", "problem": "         }\n        if (servletClass != null && filterClass != null) {\n             ReflectorServletProcessor r = new ReflectorServletProcessor();\n             r.setServletClassName(servletClass);\n             r.setFilterClassName(filterClass);", "fixed": "         }\n        if (servletClass != null || filterClass != null) {\n             ReflectorServletProcessor r = new ReflectorServletProcessor();\n             r.setServletClassName(servletClass);\n             r.setFilterClassName(filterClass);", "sourceBeforeFix": "servletClass != null && filterClass != null", "sourceAfterFix": "servletClass != null || filterClass != null"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15861, value = \"Cannot remove deployment %s from the domain as it is still used by server groups %s\")\n     String cannotRemoveDeploymentInUse(String name, List<String> groups);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10861, value = \"Cannot remove deployment %s from the domain as it is still used by server groups %s\")\n     String cannotRemoveDeploymentInUse(String name, List<String> groups);\n     /**", "sourceBeforeFix": "id=15849", "sourceAfterFix": "id=10849"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureCheckGetCssName =\n       new PassFactory(\"checkMissingGetCssName\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "fixed": "   }\n   \n  class GlobalTypeResolver implements HotSwapCompilerPass {\n     private final AbstractCompiler compiler;\n     GlobalTypeResolver(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedByMe() throws TwitterException {\n        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",\n                 null, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public ResponseList<Status> getRetweetedByMe() throws TwitterException {\n        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",\n                 null, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,true))"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_tw() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016/05/06\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_tw() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016/05/06\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "b31b4de025de3beefcd5bf164bb64e13f2ce0691", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * name whose type is capable of being refined.\n    * @return The current type of the node if it can be refined, null otherwise.\n    */\n  JSType getTypeIfRefinable(Node node, FlowScope scope) {\n     switch (node.getType()) {\n       case Token.NAME:\n         StaticSlot<JSType> nameVar = scope.getSlot(node.getString());", "fixed": "    * name whose type is capable of being refined.\n    * @return The current type of the node if it can be refined, null otherwise.\n    */\n  protected JSType getTypeIfRefinable(Node node, FlowScope scope) {\n     switch (node.getType()) {\n       case Token.NAME:\n         StaticSlot<JSType> nameVar = scope.getSlot(node.getString());", "sourceBeforeFix": "16", "sourceAfterFix": "20"}
{"fixCommitSHA1": "d2b19965df52e66385a2d7146887a44cea50330a", "projectName": "google.closure-compiler", "bugType": "Wrong Function Name", "problem": "   @Override\n   public void process(Node externs, Node root) {\n    logger.info(\"Aliasing common strings\");\n     NodeTraversal.traverse(compiler, root, this);", "fixed": "   @Override\n   public void process(Node externs, Node root) {\n    logger.fine(\"Aliasing common strings\");\n     NodeTraversal.traverse(compiler, root, this);", "sourceBeforeFix": "logger.info(sb.toString())", "sourceAfterFix": "logger.fine(sb.toString())"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15846, value = \"Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.\")\n     String invalidRolloutPlanLess(String name, String propertyName, int value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10846, value = \"Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.\")\n     String invalidRolloutPlanLess(String name, String propertyName, int value);\n     /**", "sourceBeforeFix": "id=15852", "sourceAfterFix": "id=10852"}
{"fixCommitSHA1": "85d8d2fce8253c065ccaa9b02d8a30a58bbea67b", "projectName": "swagger-api.swagger-core", "bugType": "Wrong Function Name", "problem": "                 if (getter != null) {\n                     if (paramType == null) {\n                        paramType = getter.getRawReturnType();\n                     }\n                     for (final Annotation fieldAnnotation : getter.annotations()) {", "fixed": "                 if (getter != null) {\n                     if (paramType == null) {\n                        paramType = getter.getType();\n                     }\n                     for (final Annotation fieldAnnotation : getter.annotations()) {", "sourceBeforeFix": "field.getRawType()", "sourceAfterFix": "field.getType()"}
{"fixCommitSHA1": "5e1423f749d6b030e153083e8667b43b11e43a7f", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "     protected RouteBuilder createRouteBuilder() throws Exception {\n         return new RouteBuilder() {\n             public void configure() throws Exception {\n                from(getFtpUrl()).to(\"mock:result\");\n             }\n         };\n     }", "fixed": "     protected RouteBuilder createRouteBuilder() throws Exception {\n         return new RouteBuilder() {\n             public void configure() throws Exception {\n                from(getFtpUrl())\n                    .to(\"log:result\")\n                    .to(\"mock:result\");\n             }\n         };\n     }", "sourceBeforeFix": "new NotifyBuilder(context).whenDone(4)", "sourceAfterFix": "new NotifyBuilder(context).whenDone(2)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface BraintreeEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedBraintreeEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface BraintreeEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedBraintreeEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseAnonymousFunctions =\n       new PassFactory(\"collapseAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "486b290863a66641b0ec30dbf2d9e349733cae44", "projectName": "apache.hbase", "bugType": "Wrong Function Name", "problem": "    */\n   public void majorCompact(final String tableNameOrRegionName)\n   throws IOException, InterruptedException {\n    majorCompact(Bytes.toBytesBinary(tableNameOrRegionName));\n   }\n   /**", "fixed": "    */\n   public void majorCompact(final String tableNameOrRegionName)\n   throws IOException, InterruptedException {\n    majorCompact(Bytes.toBytes(tableNameOrRegionName));\n   }\n   /**", "sourceBeforeFix": "Bytes.toBytesBinary(tableNameOrRegionName)", "sourceAfterFix": "Bytes.toBytes(tableNameOrRegionName)"}
{"fixCommitSHA1": "2d0eeff752d0d83b0d34b40bb67ed9329be3a708", "projectName": "apache.camel", "bugType": "Change Numeric Literal", "problem": "     public void testRouteStartupOrder() throws Exception {\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedMessageCount(0);\n         template.sendBody(\"direct:start\", \"Hello World\");", "fixed": "     public void testRouteStartupOrder() throws Exception {\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedMessageCount(1);\n         template.sendBody(\"direct:start\", \"Hello World\");", "sourceBeforeFix": "mock.expectedMessageCount(0)", "sourceAfterFix": "mock.expectedMessageCount(1)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory latePeepholeOptimizations =\n       new PassFactory(\"latePeepholeOptimizations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "957c04e597ba47ce301a5aab98ed57be4a967f95", "projectName": "netty.netty", "bugType": "Less Specific If", "problem": "         if (handlers == null) {\n             throw new NullPointerException(\"handlers\");\n         }\n        if (handlers[0] == null) {\n             return this;\n         }", "fixed": "         if (handlers == null) {\n             throw new NullPointerException(\"handlers\");\n         }\n        if (handlers.length == 0 || handlers[0] == null) {\n             return this;\n         }", "sourceBeforeFix": "handlers[0] == null", "sourceAfterFix": "handlers.length == 0 || handlers[0] == null"}
{"fixCommitSHA1": "51271a02806489a2e2b5539475eb2131fd29b77d", "projectName": "google.closure-compiler", "bugType": "Change Caller in Function Call", "problem": "           MapDifference<String, PropertyAccessKind> sourceDifference =\n               Maps.difference(\n                   compiler.getSourceGetterAndSetterProperties(),\n                  GatherGettersAndSetterProperties.gather(compiler, mainRoot));\n           assertWithMessage(\"Pass did not update new source getters / setters\")\n               .that(sourceDifference.entriesOnlyOnRight())\n               .isEmpty();", "fixed": "           MapDifference<String, PropertyAccessKind> sourceDifference =\n               Maps.difference(\n                   compiler.getSourceGetterAndSetterProperties(),\n                  GatherGetterAndSetterProperties.gather(compiler, mainRoot));\n           assertWithMessage(\"Pass did not update new source getters / setters\")\n               .that(sourceDifference.entriesOnlyOnRight())\n               .isEmpty();", "sourceBeforeFix": "GatherGettersAndSetterProperties.gather(compiler,externsRoot)", "sourceAfterFix": "GatherGetterAndSetterProperties.gather(compiler,externsRoot)"}
{"fixCommitSHA1": "165540532a351f8c2c249f0aad2b1827441aa46e", "projectName": "facebook.presto", "bugType": "Same Function Less Args", "problem": "                         continue;\n                     }\n                     bigArrayField.setAccessible(true);\n                    MethodHandle sizeOf = Reflection.methodHandle(bigArrayField.getType(), \"sizeOf\", null);\n                     overhead += (long) sizeOf.invokeWithArguments(bigArrayField.get(stateField.get(state)));\n                 }\n             }", "fixed": "                         continue;\n                     }\n                     bigArrayField.setAccessible(true);\n                    MethodHandle sizeOf = Reflection.methodHandle(bigArrayField.getType(), \"sizeOf\");\n                     overhead += (long) sizeOf.invokeWithArguments(bigArrayField.get(stateField.get(state)));\n                 }\n             }", "sourceBeforeFix": "Reflection.methodHandle(type,\"sizeOf\",null)", "sourceAfterFix": "Reflection.methodHandle(type,\"sizeOf\")"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public List<SavedSearch> getSavedSearches() throws TwitterException {\n        return SavedSearch.constructSavedSearches(get(getBaseURL() + \"saved_searches.json\", true));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n      */\n     public List<SavedSearch> getSavedSearches() throws TwitterException {\n        return SavedSearch.createSavedSearchList(get(getBaseURL() + \"saved_searches.json\", true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites.json\",\"page\",String.valueOf(page),true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory rewriteFunctionExpressions =\n       new PassFactory(\"rewriteFunctionExpressions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "38eb6222bddaf49c3c9ae73ddef0cfe4ff5efa48", "projectName": "alibaba.dubbo", "bugType": "Change Numeric Literal", "problem": "     @Test\n     public void test_Decode_Error_Response_Object() throws IOException {\n        byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, 0x20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n         Person person = new Person();\n         byte[] request = getRequestBytes(person, header);", "fixed": "     @Test\n     public void test_Decode_Error_Response_Object() throws IOException {\n        byte[] header = new byte[]{MAGIC_HIGH, MAGIC_LOW, 0x02, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n         Person person = new Person();\n         byte[] request = getRequestBytes(person, header);", "sourceBeforeFix": "(byte)0xff", "sourceAfterFix": "(byte)0xe2"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineConstants =\n       new PassFactory(\"inlineConstants\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "d7b19bfc78039804e5460a01e6d5939d2f4ce5f7", "projectName": "Alluxio.alluxio", "bugType": "Same Function More Args", "problem": "    */\n   public int unpin(TachyonURI path) throws IOException {\n     try {\n      mTfs.setPin(mTfs.open(path), false);\n       System.out.println(\"File '\" + path + \"' was successfully unpinned.\");\n       return 0;\n     } catch (Exception e) {", "fixed": "    */\n   public int unpin(TachyonURI path) throws IOException {\n     try {\n      mTfs.setPin(mTfs.open(path), true);\n       System.out.println(\"File '\" + path + \"' was successfully unpinned.\");\n       return 0;\n     } catch (Exception e) {", "sourceBeforeFix": "mTfs.mkdirs(path)", "sourceAfterFix": "mTfs.mkdirs(path,true)"}
{"fixCommitSHA1": "dad70872c09aa162f4567263f677a49b0455be76", "projectName": "facebook.presto", "bugType": "Wrong Function Name", "problem": "                 .outputRowsCount(inputStatistics.getOutputRowCount() * xStats.getValuesFraction() * 0.5);\n        assertThat(computeSemiJoin(inputStatistics, inputStatistics, unknown, u))\n                 .symbolStats(unknown, stats -> stats\n                         .nullsFraction(0)\n                         .distinctValuesCountUnknown()", "fixed": "                 .outputRowsCount(inputStatistics.getOutputRowCount() * xStats.getValuesFraction() * 0.5);\n        assertThat(computeAntiJoin(inputStatistics, inputStatistics, unknown, u))\n                 .symbolStats(unknown, stats -> stats\n                         .nullsFraction(0)\n                         .distinctValuesCountUnknown()", "sourceBeforeFix": "computeSemiJoin(inputStatistics,inputStatistics,x,unknown)", "sourceAfterFix": "computeAntiJoin(inputStatistics,inputStatistics,x,unknown)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15853, value = \"Unexpected initial path key %s\")\n     IllegalStateException unexpectedInitialPathKey(String key);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10853, value = \"Unexpected initial path key %s\")\n     IllegalStateException unexpectedInitialPathKey(String key);\n     /**", "sourceBeforeFix": "id=15849", "sourceAfterFix": "id=10849"}
{"fixCommitSHA1": "8abfa48f2eb5edaf3f5a2cc2350e4e3c232f4152", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "          * @param lastLine the last line of the suppression region\n          * @param lastColumn the last column of the suppression region\n          */\n        public Entry(String checkName, int firstLine, int firstColumn,\n             int lastLine, int lastColumn) {\n             this.checkName = checkName;\n             this.firstLine = firstLine;", "fixed": "          * @param lastLine the last line of the suppression region\n          * @param lastColumn the last column of the suppression region\n          */\n        Entry(String checkName, int firstLine, int firstColumn,\n             int lastLine, int lastColumn) {\n             this.checkName = checkName;\n             this.firstLine = firstLine;", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "c131546eaadd07baf950bd6a44d07ee42d109e4c", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t\t\trpcEndpoint.start();\n\t\t\tCompletableFuture<Boolean> terminationFuture = rpcEndpoint.getTerminationFuture();\n \t\t\trpcService.stopService();", "fixed": " \t\t\trpcEndpoint.start();\n\t\t\tCompletableFuture<Void> terminationFuture = rpcEndpoint.getTerminationFuture();\n \t\t\trpcService.stopService();", "sourceBeforeFix": "CompletableFuture<Boolean>", "sourceAfterFix": "CompletableFuture<Void>"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public List<Trends> getWeeklyTrends(Date date, boolean excludeHashTags) throws TwitterException {\n        return Trends.constructTrendsList(get(getSearchBaseURL()\n                 + \"trends/weekly.json?date=\" + toDateStr(date)\n                 + (excludeHashTags ? \"&exclude=hashtags\" : \"\"), false));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public List<Trends> getWeeklyTrends(Date date, boolean excludeHashTags) throws TwitterException {\n        return Trends.createTrendsList(get(getSearchBaseURL()\n                 + \"trends/weekly.json?date=\" + toDateStr(date)\n                 + (excludeHashTags ? \"&exclude=hashtags\" : \"\"), false));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline.json\",true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline.json\",true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineVariables =\n       new PassFactory(\"inlineVariables\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "3eb7527a211517cd1e9995239daac6aae5819ede", "projectName": "wildfly.wildfly", "bugType": "Change Unary Operator\t", "problem": "     private String validate(ModelNode param, ModelNode locations) {\n         String failure = typeValidator.validateParameter(SCHEMA_LOCATION, param);\n         String uri = param.asProperty().getName();\n        if (failure == null && !locations.isDefined()) {\n             for (ModelNode node : locations.asList()) {\n                 if (uri.equals(node.asProperty().getName())) {\n                     failure = \"Schema with URI \" + uri + \" already registered with location \" + node.asProperty().getValue().asString();", "fixed": "     private String validate(ModelNode param, ModelNode locations) {\n         String failure = typeValidator.validateParameter(SCHEMA_LOCATION, param);\n         String uri = param.asProperty().getName();\n        if (failure == null && locations.isDefined()) {\n             for (ModelNode node : locations.asList()) {\n                 if (uri.equals(node.asProperty().getName())) {\n                     failure = \"Schema with URI \" + uri + \" already registered with location \" + node.asProperty().getValue().asString();", "sourceBeforeFix": "!locations.isDefined()", "sourceAfterFix": "locations.isDefined()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory inlineSimpleMethods =\n       new PassFactory(\"inlineSimpleMethods\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "58ce4c40970fc29d00e5740bc6098eb475668e86", "projectName": "checkstyle.checkstyle", "bugType": "Change Identifier Used", "problem": "  * <p>\n  * Checks the Javadoc of a method or constructor.\n  * By default, does not check for unused throws.\n * To check for unused throws, set property checkUnusedThrows to true.\n  * The scope to verify is specified using the {@link Scope} class and\n* defaults to {@link Scope\n  * set property scope to one of the {@link Scope} constants.", "fixed": "  * <p>\n  * Checks the Javadoc of a method or constructor.\n  * By default, does not check for unused throws.\n * To allow documented <code>java.lang.RuntimeException</code>s\n * that are not declared, set property allowUndeclaredRTE to true.\n  * The scope to verify is specified using the {@link Scope} class and\n* defaults to {@link Scope\n  * set property scope to one of the {@link Scope} constants.", "sourceBeforeFix": "mCheckUnusedThrows=aFlag", "sourceAfterFix": "mAllowUndeclaredRTE=aFlag"}
{"fixCommitSHA1": "998d200618f6c6699f8bacd059ffda7c54f4d39e", "projectName": "facebook.presto", "bugType": "Change Identifier Used", "problem": "     public static Rule<ExchangeNode> checkRulesAreFiredBeforeAddExchangesRule()\n     {\n        return checkPlanDoNotMatch(exchange(), \"Expected rules to be fired before 'AddExchanges' optimizer\");\n     }\n    public static <T extends PlanNode> Rule<T> checkPlanDoNotMatch(Pattern<T> pattern, String message)\n     {\n         return new CheckNoPlanNodeMatchesRule<>(pattern, message);\n     }", "fixed": "     public static Rule<ExchangeNode> checkRulesAreFiredBeforeAddExchangesRule()\n     {\n        return checkNoPlanNodeMatches(exchange(), \"Expected rules to be fired before 'AddExchanges' optimizer\");\n     }\n    private static <T extends PlanNode> Rule<T> checkNoPlanNodeMatches(Pattern<T> pattern, String message)\n     {\n         return new CheckNoPlanNodeMatchesRule<>(pattern, message);\n     }", "sourceBeforeFix": "checkPlanDoNotMatch(exchange(),\"Expected rules to be fired before 'AddExchanges' optimizer\")", "sourceAfterFix": "checkNoPlanNodeMatches(exchange(),\"Expected rules to be fired before 'AddExchanges' optimizer\")"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface WordpressEndpointBuilder\n             extends\n                 WordpressEndpointConsumerBuilder, WordpressEndpointProducerBuilder {\n         default AdvancedWordpressEndpointBuilder advanced() {", "fixed": "     \n    public interface WordpressEndpointBuilder\n             extends\n                 WordpressEndpointConsumerBuilder, WordpressEndpointProducerBuilder {\n         default AdvancedWordpressEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "277bb371203e1d1a6ceee1f6f1efa4ad9f093156", "projectName": "apache.camel", "bugType": "Change Identifier Used", "problem": "             redeliveryDelayResult += redeliveryDelayResult * variance;\n         }\n        if (maximumRedeliveryDelay > 0 && redeliveryDelay > maximumRedeliveryDelay) {\n             redeliveryDelayResult = maximumRedeliveryDelay;\n         }", "fixed": "             redeliveryDelayResult += redeliveryDelayResult * variance;\n         }\n        if (maximumRedeliveryDelay > 0 && redeliveryDelayResult > maximumRedeliveryDelay) {\n             redeliveryDelayResult = maximumRedeliveryDelay;\n         }", "sourceBeforeFix": "redeliveryDelay > maximumRedeliveryDelay", "sourceAfterFix": "redeliveryDelayResult > maximumRedeliveryDelay"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "5a15366e9871141aecf4408342479a07c2a24b57", "projectName": "NLPchina.ansj_seg", "bugType": "Change Modifier", "problem": " \t}\n \t@Override\n\tpublic boolean incrementToken() throws IOException {\n \t\tclearAttributes();\n \t\tint position = 0;\n \t\tTerm term = null;", "fixed": " \t}\n \t@Override\n\tpublic final boolean incrementToken() throws IOException {\n \t\tclearAttributes();\n \t\tint position = 0;\n \t\tTerm term = null;", "sourceBeforeFix": "1", "sourceAfterFix": "17"}
{"fixCommitSHA1": "172df327833aba5ce2c853bbc18b3826a5b83ee7", "projectName": "libgdx.libgdx", "bugType": "Same Function More Args", "problem": " \t\t\t\t\t\trepeatY = Repeat;\r\n \t\t\t\t\t}\r\n\t\t\t\t\tpageImage = new Texture(file, TextureFilter.isMipMap(min) || TextureFilter.isMipMap(max) ? true : false);\r\n \t\t\t\t\tpageImage.setFilter(min, max);\r\n \t\t\t\t\tpageImage.setWrap(repeatX, repeatY);\r\n \t\t\t\t\ttextures.add(pageImage);\r", "fixed": " \t\t\t\t\t\trepeatY = Repeat;\r\n \t\t\t\t\t}\r\n\t\t\t\t\tpageImage = new Texture(file, format, TextureFilter.isMipMap(min) || TextureFilter.isMipMap(max) ? true : false);\r\n \t\t\t\t\tpageImage.setFilter(min, max);\r\n \t\t\t\t\tpageImage.setWrap(repeatX, repeatY);\r\n \t\t\t\t\ttextures.add(pageImage);\r", "sourceBeforeFix": "new Texture(file,TextureFilter.isMipMap(min) || TextureFilter.isMipMap(max) ? true : false)", "sourceAfterFix": "new Texture(file,format,TextureFilter.isMipMap(min) || TextureFilter.isMipMap(max) ? true : false)"}
{"fixCommitSHA1": "c7fd539c43b8e027a74d0f9118e9f3d48bc930d1", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "                             clusterMap.delete(buildAttributeName(entry.getKey()));\n                             iterator.remove();\n                         } else {\n                            clusterMap.put(buildAttributeName(entry.getKey()), cacheEntry.value);\n                             cacheEntry.dirty = false;\n                         }\n                     }", "fixed": "                             clusterMap.delete(buildAttributeName(entry.getKey()));\n                             iterator.remove();\n                         } else {\n                            clusterMap.set(buildAttributeName(entry.getKey()), cacheEntry.value);\n                             cacheEntry.dirty = false;\n                         }\n                     }", "sourceBeforeFix": "clusterMap.put(buildAttributeName(entry.getKey()),cacheEntry.value)", "sourceAfterFix": "clusterMap.set(buildAttributeName(entry.getKey()),cacheEntry.value)"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface CMISEndpointBuilder\n             extends\n                 CMISEndpointConsumerBuilder, CMISEndpointProducerBuilder {\n         default AdvancedCMISEndpointBuilder advanced() {", "fixed": "     \n    public interface CMISEndpointBuilder\n             extends\n                 CMISEndpointConsumerBuilder, CMISEndpointProducerBuilder {\n         default AdvancedCMISEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "e7c6ca945fd2d85b1dd86483d699d7af2399d0fc", "projectName": "netty.netty", "bugType": "Change Identifier Used", "problem": "             if (empty) {\n                buf.clear();\n             }\n             channel.notifyFlushFutures(writtenBytes);", "fixed": "             if (empty) {\n                buf.discardReadBytes();\n             }\n             channel.notifyFlushFutures(writtenBytes);", "sourceBeforeFix": "buf.clear()", "sourceAfterFix": "buf.discardReadBytes()"}
{"fixCommitSHA1": "b7bc9bf9bd0793f2acbf158651e3200b30f97d99", "projectName": "apache.storm", "bugType": "Change Identifier Used", "problem": "     public static List<ACL> mkTopoOnlyAcls(Map topoConf) throws NoSuchAlgorithmException {\n         List<ACL> aclList = null;\n         String payload = (String) topoConf.get(Config.STORM_ZOOKEEPER_TOPOLOGY_AUTH_PAYLOAD);\n        if (Utils.isZkAuthenticationConfiguredStormServer(topoConf)) {\n             aclList = new ArrayList<>();\n             ACL acl1 = ZooDefs.Ids.CREATOR_ALL_ACL.get(0);\n             aclList.add(acl1);", "fixed": "     public static List<ACL> mkTopoOnlyAcls(Map topoConf) throws NoSuchAlgorithmException {\n         List<ACL> aclList = null;\n         String payload = (String) topoConf.get(Config.STORM_ZOOKEEPER_TOPOLOGY_AUTH_PAYLOAD);\n        if (Utils.isZkAuthenticationConfiguredTopology(topoConf)) {\n             aclList = new ArrayList<>();\n             ACL acl1 = ZooDefs.Ids.CREATOR_ALL_ACL.get(0);\n             aclList.add(acl1);", "sourceBeforeFix": "Utils.isZkAuthenticationConfiguredStormServer(topoConf)", "sourceAfterFix": "Utils.isZkAuthenticationConfiguredTopology(topoConf)"}
{"fixCommitSHA1": "74d3742b6e39c174111d3b0a6177c25b93f9c926", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStream<OUT> writeAsCsv(String path, int batchSize, OUT endTuple) {\n \t\tif (this instanceof SingleOutputStreamOperator) {\n \t\t\t((SingleOutputStreamOperator<?, ?>) this).setMutability(false);\n \t\t}", "fixed": " \t * \n \t * @return The closed DataStream\n \t */\n\tpublic DataStreamSink<OUT> writeAsCsv(String path, int batchSize, OUT endTuple) {\n \t\tif (this instanceof SingleOutputStreamOperator) {\n \t\t\t((SingleOutputStreamOperator<?, ?>) this).setMutability(false);\n \t\t}", "sourceBeforeFix": "DataStream<OUT>", "sourceAfterFix": "DataStreamSink<OUT>"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkStrictMode =\n       new PassFactory(\"checkStrictMode\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedSesEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default SesEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedSesEndpointBuilder\n             extends\n                 EndpointProducerBuilder {\n         default SesEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "ae59e41fb8dfd5e672edc822fe16f3306ca87002", "projectName": "neo4j.neo4j", "bugType": "Change Modifier", "problem": "         this.base = base.getAbsoluteFile();\n     }\n    private void recursiveDelete( File file )\n     {\n         File[] files = file.listFiles();\n         if ( files != null ) for ( File each : files )", "fixed": "         this.base = base.getAbsoluteFile();\n     }\n    public static void recursiveDelete( File file )\n     {\n         File[] files = file.listFiles();\n         if ( files != null ) for ( File each : files )", "sourceBeforeFix": "2", "sourceAfterFix": "9"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  private final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fa5635c39e3000406103657977b98efa79bd4512", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      * {@inheritDoc}\n      */\n     public List<Trends> getWeeklyTrends() throws TwitterException {\n        return TrendsJSONImpl.createTrendsList(http.get(conf.getSearchBaseURL()\n                 + \"trends/weekly.json\"));\n     }", "fixed": "      * {@inheritDoc}\n      */\n     public List<Trends> getWeeklyTrends() throws TwitterException {\n        return TrendsJSONImpl.createTrendsList(http.get(conf.getRestBaseURL()\n                 + \"trends/weekly.json\"));\n     }", "sourceBeforeFix": "conf.getSearchBaseURL()", "sourceAfterFix": "conf.getRestBaseURL()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15848, value = \"Exception getting result from host %s: %s\")\n     String exceptionAwaitingResultFromHost(String name, String message);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10848, value = \"Exception getting result from host %s: %s\")\n     String exceptionAwaitingResultFromHost(String name, String message);\n     /**", "sourceBeforeFix": "id=15839", "sourceAfterFix": "id=10839"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  private final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  private final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "19c2a076c25faf94ae9e8f4072f2a4590c9ee1fe", "projectName": "spring-projects.spring-boot", "bugType": "Wrong Function Name", "problem": " \t\tthis.container.stop();\n \t\tthis.container = factory\n\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\nGetMethod get2 = new GetMethod(\"http:\n \t\tassertThat(client.executeMethod(get2), equalTo(200));", "fixed": " \t\tthis.container.stop();\n \t\tthis.container = factory\n\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\nGetMethod get2 = new GetMethod(\"http:\n \t\tassertThat(client.executeMethod(get2), equalTo(200));", "sourceBeforeFix": "factory.getEmbdeddedServletContainer(initializers[0],initializers[1])", "sourceAfterFix": "factory.getEmbeddedServletContainer(initializers[0],initializers[1])"}
{"fixCommitSHA1": "46fa8090954480eecdeb6e7367f0e30655853f42", "projectName": "checkstyle.checkstyle", "bugType": "Same Function More Args", "problem": "         if (!inputFile.exists()) {\n             throw new FileNotFoundException(inputFile.getPath() + \" (No such file or directory)\");\n         }\n        final StringBuilder buf = new StringBuilder();\n         final FileInputStream stream = new FileInputStream(inputFile);\n         final Reader reader = new InputStreamReader(stream, decoder);\n         try {", "fixed": "         if (!inputFile.exists()) {\n             throw new FileNotFoundException(inputFile.getPath() + \" (No such file or directory)\");\n         }\n        final StringBuilder buf = new StringBuilder(1024);\n         final FileInputStream stream = new FileInputStream(inputFile);\n         final Reader reader = new InputStreamReader(stream, decoder);\n         try {", "sourceBeforeFix": "new StringBuilder()", "sourceAfterFix": "new StringBuilder(1024)"}
{"fixCommitSHA1": "43b2fa49ca351c05c453c8cd0eec32ce6277c830", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t\tinvalidateHierarchy();\r\n \t}\r\n\tpublic String getText () {\r\n \t\treturn text;\r\n \t}\r", "fixed": " \t\tinvalidateHierarchy();\r\n \t}\r\n\tpublic CharSequence getText () {\r\n \t\treturn text;\r\n \t}\r", "sourceBeforeFix": "String text", "sourceAfterFix": "CharSequence text"}
{"fixCommitSHA1": "4e2b481ca535a5db34807f8cc88c79740f485c49", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": " \t\t\tHttpServletResponse response) throws ServletException, IOException {\r\n \t\tHttpSession httpSession = request.getSession();\r\n\t\tString ipAddress = request.getLocalAddr();\r\n \t\tInteger loginAttempts = loginAttemptsByIP.get(ipAddress);\r\n \t\tif (loginAttempts == null)\r\n \t\t\tloginAttempts = 1;\r", "fixed": " \t\t\tHttpServletResponse response) throws ServletException, IOException {\r\n \t\tHttpSession httpSession = request.getSession();\r\n\t\tString ipAddress = request.getRemoteAddr();\r\n \t\tInteger loginAttempts = loginAttemptsByIP.get(ipAddress);\r\n \t\tif (loginAttempts == null)\r\n \t\t\tloginAttempts = 1;\r", "sourceBeforeFix": "request.getLocalAddr()", "sourceAfterFix": "request.getRemoteAddr()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameLabels =\n       new PassFactory(\"renameLabels\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "bdd386e699e23c48524b822b9b890b077f294c69", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     return result;\n   }\n  private String rule(String rule) {\n     return \"com.google.javascript.jscomp.ConformanceRules$\" + rule;\n   }\n  private String value(String value) {\n     return \"  value: '\" + value + \"'\\n\";\n   }", "fixed": "     return result;\n   }\n  private static String rule(String rule) {\n     return \"com.google.javascript.jscomp.ConformanceRules$\" + rule;\n   }\n  private static String value(String value) {\n     return \"  value: '\" + value + \"'\\n\";\n   }", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 15853, value = \"Unexpected initial path key %s\")\n     IllegalStateException unexpectedInitialPathKey(String key);\n     /**", "fixed": "      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n    @Message(id = 10853, value = \"Unexpected initial path key %s\")\n     IllegalStateException unexpectedInitialPathKey(String key);\n     /**", "sourceBeforeFix": "id=15871", "sourceAfterFix": "id=10871"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory removeUnusedPrototypeProperties =\n       new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "abe1be1a14fff193c7322c0b4f23aadc60435a4e", "projectName": "swagger-api.swagger-codegen", "bugType": "Missing Throws Exception", "problem": "     @ApiOperation(value = \"Create user\", notes = \"This can only be done by the logged in user.\", tags={ \"user\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Void.class) })\n    void createUser(@Valid User body);\n     @POST\n     @Path(\"/createWithArray\")", "fixed": "     @ApiOperation(value = \"Create user\", notes = \"This can only be done by the logged in user.\", tags={ \"user\",  })\n     @ApiResponses(value = { \n         @ApiResponse(code = 200, message = \"successful operation\", response = Void.class) })\n    void createUser(@Valid User body) throws Exception;\n     @POST\n     @Path(\"/createWithArray\")", "sourceBeforeFix": "0", "sourceAfterFix": "0"}
{"fixCommitSHA1": "7a90cfe13f0b030f6e091154c1d0091c685039f1", "projectName": "Graylog2.graylog2-server", "bugType": "Wrong Function Name", "problem": "     public BufferClassesResponse getBufferClasses() {\n         try {\n            return api.path(routes.BufferResource().getBufferClasses(), BufferClassesResponse.class).node(this).execute();\n         } catch (Exception e) {\n             LOG.error(\"Unable to read buffer class names from node \" + this, e);\n         }", "fixed": "     public BufferClassesResponse getBufferClasses() {\n         try {\n            return api.path(routes.BuffersResource().getBufferClasses(), BufferClassesResponse.class).node(this).execute();\n         } catch (Exception e) {\n             LOG.error(\"Unable to read buffer class names from node \" + this, e);\n         }", "sourceBeforeFix": "routes.BufferResource()", "sourceAfterFix": "routes.BuffersResource()"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n \t * @return True, if the comparator supports that specific form of serialization, false if not.\n \t */\n\tpublic boolean supportsSerializationWithKeyNormalization();\n \t/**\n \t * Gets the number of bytes that the normalized key would maximally take. A value of", "fixed": " \t * \n \t * @return True, if the comparator supports that specific form of serialization, false if not.\n \t */\n\tpublic abstract boolean supportsSerializationWithKeyNormalization();\n \t/**\n \t * Gets the number of bytes that the normalized key would maximally take. A value of", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15847, value = \"Interrupted waiting for result from host %s\")\n     String interruptedAwaitingResultFromHost(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10847, value = \"Interrupted waiting for result from host %s\")\n     String interruptedAwaitingResultFromHost(String name);\n     /**", "sourceBeforeFix": "id=15852", "sourceAfterFix": "id=10852"}
{"fixCommitSHA1": "7d6e8e06aac1ca273f180c38456922e77443811b", "projectName": "hazelcast.hazelcast", "bugType": "Change Numeric Literal", "problem": "      */\n     @Test\n     public void async_whenMultipleAndThenOnSameFuture() throws Exception {\n        int callTimeout = 1000;\n         Config config = new Config().setProperty(OPERATION_CALL_TIMEOUT_MILLIS.getName(), \"\" + callTimeout);\n         TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(2);", "fixed": "      */\n     @Test\n     public void async_whenMultipleAndThenOnSameFuture() throws Exception {\n        int callTimeout = 5000;\n         Config config = new Config().setProperty(OPERATION_CALL_TIMEOUT_MILLIS.getName(), \"\" + callTimeout);\n         TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(2);", "sourceBeforeFix": "callTimeout=1000", "sourceAfterFix": "callTimeout=5000"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory extractPrototypeMemberDeclarations =\n       new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "fixed": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "sourceBeforeFix": "GL20.glUniformMatrix4(location,transpose,toFloatBuffer(value,offset,count << 4))", "sourceAfterFix": "GL20.glUniformMatrix4fv(location,transpose,toFloatBuffer(value,offset,count << 4))"}
{"fixCommitSHA1": "f051bfd17154fe5974bd0af2b10e2926fe8191e8", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": "\t\t\t\tWorldManifold manifold = contact.GetWorldManifold();\r\n \t\t\t\tint numContactPoints = manifold.getNumberOfContactPoints();\r\n \t\t\t\tfor (int j = 0; j < numContactPoints; j++) {\r\n \t\t\t\t\tVector2 point = manifold.getPoints()[j];\r", "fixed": "\t\t\t\tWorldManifold manifold = contact.getWorldManifold();\r\n \t\t\t\tint numContactPoints = manifold.getNumberOfContactPoints();\r\n \t\t\t\tfor (int j = 0; j < numContactPoints; j++) {\r\n \t\t\t\t\tVector2 point = manifold.getPoints()[j];\r", "sourceBeforeFix": "contact.GetWorldManifold()", "sourceAfterFix": "contact.getWorldManifold()"}
{"fixCommitSHA1": "e7bf415427b37bbc760ff9b9c69650db8ec477e4", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnBean(ConnectionFactory.class)\n\t@ConditionalOnEnablednHealthIndicator(\"jms\")\n \tpublic static class JmsHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<JmsHealthIndicator, ConnectionFactory> {", "fixed": " \t@Configuration\n \t@ConditionalOnBean(ConnectionFactory.class)\n\t@ConditionalOnEnabledHealthIndicator(\"jms\")\n \tpublic static class JmsHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<JmsHealthIndicator, ConnectionFactory> {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"redis\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"redis\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  private final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * A lot of the options are not configurable, because ReplaceMessages\n    * has a lot of legacy logic.\n    */\n  final PassFactory replaceMessages =\n       new PassFactory(\"replaceMessages\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "a5a28bef5e182a059f2dbe1718d7cde06e33cd78", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "             }\n             modulePath = jbossHome + File.separatorChar + \"modules\";\n         }else{\n           modulePath = modulePath.split(File.pathSeparator)[1];\n         }\n         File moduleDir = new File(modulePath);\n         if (!moduleDir.exists()) {", "fixed": "             }\n             modulePath = jbossHome + File.separatorChar + \"modules\";\n         }else{\n           modulePath = modulePath.split(File.pathSeparator)[0];\n         }\n         File moduleDir = new File(modulePath);\n         if (!moduleDir.exists()) {", "sourceBeforeFix": "modulePath.split(File.pathSeparator)[1]", "sourceAfterFix": "modulePath.split(File.pathSeparator)[0]"}
{"fixCommitSHA1": "3065ef5006b71e1369756b451da4c0746ab20b8c", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t\t\tif (transformations != null)\r\n \t\t\t\ttransform(transformations[i], vertices, vertexSize, offset, numComponents, voffset / vertexSize, vsize / vertexSize);\r\n \t\t\tmesh.getIndices(indices, ioffset);\r\n\t\t\tfor (int j = 0; j < isize; i++)\r\n \t\t\t\tindices[ioffset+j] = (short)(indices[ioffset+j] + voffset);\r\n \t\t\tvoffset += vsize;\r\n \t\t\tioffset += isize;\r", "fixed": " \t\t\tif (transformations != null)\r\n \t\t\t\ttransform(transformations[i], vertices, vertexSize, offset, numComponents, voffset / vertexSize, vsize / vertexSize);\r\n \t\t\tmesh.getIndices(indices, ioffset);\r\n\t\t\tfor (int j = 0; j < isize; j++)\r\n \t\t\t\tindices[ioffset+j] = (short)(indices[ioffset+j] + voffset);\r\n \t\t\tvoffset += vsize;\r\n \t\t\tioffset += isize;\r", "sourceBeforeFix": "i++", "sourceAfterFix": "j++"}
{"fixCommitSHA1": "9bcf32ab62047ea4913d9cde9f9e73e7acbfcda6", "projectName": "Graylog2.graylog2-server", "bugType": "Change Numeric Literal", "problem": "         assertEquals(1, serverStub.callsToProcessBufferInserter);\n         assertEquals(\"{\\\"foo\\\":\\\"zomg\\\"}\", lm.getField(\"_lol\"));\n        assertEquals(8, lm.getFields().size());\n     }\n }\n\\ No newline at end of file", "fixed": "         assertEquals(1, serverStub.callsToProcessBufferInserter);\n         assertEquals(\"{\\\"foo\\\":\\\"zomg\\\"}\", lm.getField(\"_lol\"));\n        assertEquals(5, lm.getFields().size());\n     }\n }\n\\ No newline at end of file", "sourceBeforeFix": "assertEquals(8,lm.getFields().size())", "sourceAfterFix": "assertEquals(5,lm.getFields().size())"}
{"fixCommitSHA1": "e04a3bf7703544cf5012eb2f55626af8e0a2cb8c", "projectName": "apache.flink", "bugType": "Delete Throws Exception", "problem": " \t\t}\n \t\t@Override\n\t\tpublic List<Integer> snapshotState(long checkpointId, long timestamp) throws Exception {\n \t\t\treturn Collections.singletonList(saveRecordCnt);\n \t\t}\n \t\t@Override\n\t\tpublic void restoreState(List<Integer> state) throws Exception {\n \t\t\tfor (Integer i : state) {\n \t\t\t\tsaveRecordCnt += i;\n \t\t\t}", "fixed": " \t\t}\n \t\t@Override\n\t\tpublic List<Integer> snapshotState(long checkpointId, long timestamp) {\n \t\t\treturn Collections.singletonList(saveRecordCnt);\n \t\t}\n \t\t@Override\n\t\tpublic void restoreState(List<Integer> state) {\n \t\t\tfor (Integer i : state) {\n \t\t\t\tsaveRecordCnt += i;\n \t\t\t}", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15846, value = \"Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.\")\n     String invalidRolloutPlanLess(String name, String propertyName, int value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10846, value = \"Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.\")\n     String invalidRolloutPlanLess(String name, String propertyName, int value);\n     /**", "sourceBeforeFix": "id=15862", "sourceAfterFix": "id=10862"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  private final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Renames properties so that the two properties that never appear on\n    * the same object get the same name.\n    */\n  final PassFactory ambiguateProperties =\n       new PassFactory(\"ambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "19c2a076c25faf94ae9e8f4072f2a4590c9ee1fe", "projectName": "spring-projects.spring-boot", "bugType": "Wrong Function Name", "problem": " \tpublic void doubleStop() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tthis.container = factory\n\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n \t\tthis.container.stop();\n \t\tthis.container.stop();\n \t}", "fixed": " \tpublic void doubleStop() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tthis.container = factory\n\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \t\tthis.container.stop();\n \t\tthis.container.stop();\n \t}", "sourceBeforeFix": "factory.getEmbdeddedServletContainer()", "sourceAfterFix": "factory.getEmbeddedServletContainer()"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15846, value = \"Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.\")\n     String invalidRolloutPlanLess(String name, String propertyName, int value);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10846, value = \"Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.\")\n     String invalidRolloutPlanLess(String name, String propertyName, int value);\n     /**", "sourceBeforeFix": "id=15866", "sourceAfterFix": "id=10866"}
{"fixCommitSHA1": "fd3e0ff191f3e26b09f52f538748133b65f40740", "projectName": "apache.hbase", "bugType": "Change Identifier Used", "problem": "       if (expMsg.contains(\"No FileSystem for scheme\")) {\n         newMsg =\n             \"Unsupported filesystem scheme found in the backup target url. Error Message: \"\n                + newMsg;\n         LOG.error(newMsg);\n         throw new IOException(newMsg);\n       } else {", "fixed": "       if (expMsg.contains(\"No FileSystem for scheme\")) {\n         newMsg =\n             \"Unsupported filesystem scheme found in the backup target url. Error Message: \"\n                + expMsg;\n         LOG.error(newMsg);\n         throw new IOException(newMsg);\n       } else {", "sourceBeforeFix": "\"Unsupported filesystem scheme found in the backup target url. Error Message: \" + newMsg", "sourceAfterFix": "\"Unsupported filesystem scheme found in the backup target url. Error Message: \" + expMsg"}
{"fixCommitSHA1": "e8a74c8ad07bbf497026a6b8bde532cd61f79f17", "projectName": "netty.netty", "bugType": "More Specific If", "problem": "         if (getDomain() == null && that.getDomain() != null) {\n             return false;\n        } else if (that.getDomain() == null) {\n             return false;\n         }\n         return getDomain().equalsIgnoreCase(that.getDomain());", "fixed": "         if (getDomain() == null && that.getDomain() != null) {\n             return false;\n        } else if (that.getDomain() == null && getDomain() != null) {\n             return false;\n         }\n         return getDomain().equalsIgnoreCase(that.getDomain());", "sourceBeforeFix": "c.getPath() == null", "sourceAfterFix": "c.getPath() == null && getPath() != null"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass2 =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "dce2381dc4a877fcbfb869f115152ecd44a92173", "projectName": "apache.hadoop", "bugType": "Change Identifier Used", "problem": " public class RMNodeLabelsManager extends CommonNodeLabelsManager {\n   protected static class Queue {\n    protected Set<String> acccessibleNodeLabels;\n     protected Resource resource;\n     protected Queue() {\n      acccessibleNodeLabels =\n           Collections.newSetFromMap(new ConcurrentHashMap<String, Boolean>());\n       resource = Resource.newInstance(0, 0);\n     }", "fixed": " public class RMNodeLabelsManager extends CommonNodeLabelsManager {\n   protected static class Queue {\n    protected Set<String> accessibleNodeLabels;\n     protected Resource resource;\n     protected Queue() {\n      accessibleNodeLabels =\n           Collections.newSetFromMap(new ConcurrentHashMap<String, Boolean>());\n       resource = Resource.newInstance(0, 0);\n     }", "sourceBeforeFix": "entry.getValue().acccessibleNodeLabels", "sourceAfterFix": "entry.getValue().accessibleNodeLabels"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface MiloServerEndpointBuilder\n             extends\n                 MiloServerEndpointConsumerBuilder, MiloServerEndpointProducerBuilder {\n         default AdvancedMiloServerEndpointBuilder advanced() {", "fixed": "     \n    public interface MiloServerEndpointBuilder\n             extends\n                 MiloServerEndpointConsumerBuilder, MiloServerEndpointProducerBuilder {\n         default AdvancedMiloServerEndpointBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "d83dd417fff4ae2407e04a21056f331a773d970b", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "         private boolean fallback;\n        public SampleLanguage(boolean fallback) {\n             this.fallback = fallback;\n         }", "fixed": "         private boolean fallback;\n        SampleLanguage(boolean fallback) {\n             this.fallback = fallback;\n         }", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "a3b9f6f1ebb21dd528effcceba2ac207f40b15e8", "projectName": "alibaba.canal", "bugType": "More Specific If", "problem": "     }\n     public static String unescapeName(String name) {\n        if (name.length() > 2) {\n             char c0 = name.charAt(0);\n             char x0 = name.charAt(name.length() - 1);\n             if ((c0 == '\"' && x0 == '\"') || (c0 == '`' && x0 == '`')) {", "fixed": "     }\n     public static String unescapeName(String name) {\n        if (name != null && name.length() > 2) {\n             char c0 = name.charAt(0);\n             char x0 = name.charAt(name.length() - 1);\n             if ((c0 == '\"' && x0 == '\"') || (c0 == '`' && x0 == '`')) {", "sourceBeforeFix": "name.length() > 2", "sourceAfterFix": "name != null && name.length() > 2"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "5e4bd548ddec694c9764e29ad0118f5fd8d0ecd0", "projectName": "JakeWharton.NineOldAndroids", "bugType": "Change Operand ", "problem": "         final float sX = mScaleX;\n         final float sY = mScaleY;\n        if ((sX != 0) || (sX != 0)) {\n             final float deltaSX = ((sX * w) - w) / 2f;\n             final float deltaSY = ((sY * h) - h) / 2f;\n             m.postScale(sX, sY);", "fixed": "         final float sX = mScaleX;\n         final float sY = mScaleY;\n        if ((sX != 0) || (sY != 0)) {\n             final float deltaSX = ((sX * w) - w) / 2f;\n             final float deltaSY = ((sY * h) - h) / 2f;\n             m.postScale(sX, sY);", "sourceBeforeFix": "sX != 0", "sourceAfterFix": "sY != 0"}
{"fixCommitSHA1": "35d27031902e30f4c9ed1f0a76800ef157449925", "projectName": "wildfly.wildfly", "bugType": "Change Boolean Literal", "problem": "     public static final ConnectorRefsAttribute CLUSTER_CONNECTION_CONNECTORS = new ConnectorRefsAttribute(CommonAttributes.STATIC_CONNECTORS, false, true);\n    public static final ConnectorRefsAttribute BRIDGE_CONNECTORS = new ConnectorRefsAttribute(CommonAttributes.STATIC_CONNECTORS, true, false);\n     public static final ConnectorRefsAttribute BROADCAST_GROUP = new ConnectorRefsAttribute(CommonAttributes.CONNECTORS, false, true);", "fixed": "     public static final ConnectorRefsAttribute CLUSTER_CONNECTION_CONNECTORS = new ConnectorRefsAttribute(CommonAttributes.STATIC_CONNECTORS, false, true);\n    public static final ConnectorRefsAttribute BRIDGE_CONNECTORS = new ConnectorRefsAttribute(CommonAttributes.STATIC_CONNECTORS, true, true);\n     public static final ConnectorRefsAttribute BROADCAST_GROUP = new ConnectorRefsAttribute(CommonAttributes.CONNECTORS, false, true);", "sourceBeforeFix": "new ConnectorRefsAttribute(CommonAttributes.STATIC_CONNECTORS,true,false)", "sourceAfterFix": "new ConnectorRefsAttribute(CommonAttributes.STATIC_CONNECTORS,true,true)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "ae6599c6ec02c7973209010991a23fde5db8217f", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     }\n     @Converter\n    public static String toIso(Country country) {\n         return country.getIso();\n     }\n }", "fixed": "     }\n     @Converter\n    public String toIso(Country country) {\n         return country.getIso();\n     }\n }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "ae4c271f7068895d43ad42712cb64b5bc81525a3", "projectName": "Alluxio.alluxio", "bugType": "Change Identifier Used", "problem": "   private static final int MAX_PACKETS_IN_FLIGHT =\n       Configuration.getInt(PropertyKey.USER_NETWORK_NETTY_READER_BUFFER_SIZE_PACKETS);\n   private static final long READ_TIMEOUT_MS =\n      Configuration.getLong(PropertyKey.USER_NETWORK_NETTY_TIMEOUT_MS);\n   \n   private static final ByteBuf THROWABLE = Unpooled.buffer(0);", "fixed": "   private static final int MAX_PACKETS_IN_FLIGHT =\n       Configuration.getInt(PropertyKey.USER_NETWORK_NETTY_READER_BUFFER_SIZE_PACKETS);\n   private static final long READ_TIMEOUT_MS =\n      Configuration.getMs(PropertyKey.USER_NETWORK_NETTY_TIMEOUT_MS);\n   \n   private static final ByteBuf THROWABLE = Unpooled.buffer(0);", "sourceBeforeFix": "Configuration.getLong(PropertyKey.USER_NETWORK_NETTY_TIMEOUT_MS)", "sourceAfterFix": "Configuration.getMs(PropertyKey.USER_NETWORK_NETTY_TIMEOUT_MS)"}
{"fixCommitSHA1": "39aa03261a00c409f29341c286febaec99468d65", "projectName": "apache.flink", "bugType": "Change Boolean Literal", "problem": " \tpublic void connectTo(final AbstractJobVertex vertex, final ChannelType channelType,\n \t\t\tfinal CompressionLevel compressionLevel, final DistributionPattern distributionPattern)\n \t\t\tthrows JobGraphDefinitionException {\n\t\tthis.connectTo(vertex, channelType, compressionLevel, -1, -1, distributionPattern, false);\n \t}\n \t/**", "fixed": " \tpublic void connectTo(final AbstractJobVertex vertex, final ChannelType channelType,\n \t\t\tfinal CompressionLevel compressionLevel, final DistributionPattern distributionPattern)\n \t\t\tthrows JobGraphDefinitionException {\n\t\tthis.connectTo(vertex, channelType, compressionLevel, -1, -1, distributionPattern, true);\n \t}\n \t/**", "sourceBeforeFix": "this.connectTo(vertex,null,null,-1,-1,DistributionPattern.BIPARTITE,false)", "sourceAfterFix": "this.connectTo(vertex,null,null,-1,-1,DistributionPattern.BIPARTITE,true)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory computeFunctionNames =\n       new PassFactory(\"computeFunctionNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "1daccd54d2ff2ecdb21d8c60268600c37febbb70", "projectName": "Alluxio.alluxio", "bugType": "Change Operand ", "problem": "   public static void createFiles() throws IOException {\n     long startTimeMs = CommonUtils.getCurrentMs();\n    for (int k = 0; k < THREADS; k ++) {\n       int fileId = MTC.createFile(FILE_NAME + (k + BASE_FILE_NUMBER));\n       CommonUtils.printTimeTakenMs(startTimeMs, LOG, \"user_createFiles with fileId \" + fileId);\n     }", "fixed": "   public static void createFiles() throws IOException {\n     long startTimeMs = CommonUtils.getCurrentMs();\n    for (int k = 0; k < FILES; k++) {\n       int fileId = MTC.createFile(FILE_NAME + (k + BASE_FILE_NUMBER));\n       CommonUtils.printTimeTakenMs(startTimeMs, LOG, \"user_createFiles with fileId \" + fileId);\n     }", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "times + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "9d29b3be6a155045aa07ed40d01c9edbaef19b3d", "projectName": "Alluxio.alluxio", "bugType": "Wrong Function Name", "problem": "       FileStatus fStatus = mFileSystem.getFileStatus(new Path(path));\n       BlockLocation[] bLocations = mFileSystem.getFileBlockLocations(fStatus, offset, 1);\n       if (bLocations.length > 0) {\n        String[] names = bLocations[0].getNames();\n         Collections.addAll(ret, names);\n       }\n     } catch (IOException e) {", "fixed": "       FileStatus fStatus = mFileSystem.getFileStatus(new Path(path));\n       BlockLocation[] bLocations = mFileSystem.getFileBlockLocations(fStatus, offset, 1);\n       if (bLocations.length > 0) {\n        String[] names = bLocations[0].getHosts();\n         Collections.addAll(ret, names);\n       }\n     } catch (IOException e) {", "sourceBeforeFix": "bLocations[0].getNames()", "sourceAfterFix": "bLocations[0].getHosts()"}
{"fixCommitSHA1": "e6bf561b6532c12c8bb202ba7e03aa3f2e6b8a2b", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t\ttextureParam.minFilter = TextureFilter.Linear;\r\n \t\ttextureParam.magFilter = TextureFilter.Linear;\r\n \t\tif (parameter == null)\r\n\t\t\tdeps.add(new AssetDescriptor(Gdx.files.internal(fileName).nameWithoutExtension() + \".png\", Texture.class, textureParam));\r\n \t\telse\r\n \t\t\tdeps.add(new AssetDescriptor(parameter.texturePath, Texture.class, textureParam));\r\n \t\treturn deps;\r", "fixed": " \t\ttextureParam.minFilter = TextureFilter.Linear;\r\n \t\ttextureParam.magFilter = TextureFilter.Linear;\r\n \t\tif (parameter == null)\r\n\t\t\tdeps.add(new AssetDescriptor(Gdx.files.internal(fileName).pathWithoutExtension() + \".png\", Texture.class, textureParam));\r\n \t\telse\r\n \t\t\tdeps.add(new AssetDescriptor(parameter.texturePath, Texture.class, textureParam));\r\n \t\treturn deps;\r", "sourceBeforeFix": "Gdx.files.internal(fileName).nameWithoutExtension()", "sourceAfterFix": "Gdx.files.internal(fileName).pathWithoutExtension()"}
{"fixCommitSHA1": "c98bab51de22a20990ff8805825e8638e0686464", "projectName": "apache.hbase", "bugType": "Wrong Function Name", "problem": "   @Test\n   public void testOnlineConfigChange() throws IOException {\n     LOG.debug(\"Starting the test\");\n    Admin admin = TEST_UTIL.getHBaseAdmin();\n     ServerName server = TEST_UTIL.getHBaseCluster().getRegionServer(0).getServerName();\n     admin.updateConfiguration(server);\n   }", "fixed": "   @Test\n   public void testOnlineConfigChange() throws IOException {\n     LOG.debug(\"Starting the test\");\n    Admin admin = TEST_UTIL.getAdmin();\n     ServerName server = TEST_UTIL.getHBaseCluster().getRegionServer(0).getServerName();\n     admin.updateConfiguration(server);\n   }", "sourceBeforeFix": "TEST_UTIL.getHBaseAdmin()", "sourceAfterFix": "TEST_UTIL.getAdmin()"}
{"fixCommitSHA1": "f9e60b9fa8dfcbf5dc37b2a88922f57cb292c7dd", "projectName": "wildfly.wildfly", "bugType": "Wrong Function Name", "problem": "         Host undertowHost = getUndertowHost(hostInfo);\n         if (undertowHost != null && !undertowHost.getServer().getListeners().isEmpty()) {\n             if (!securePort) {\n                return undertowHost.getServer().getListeners().get(0).getBinding().getValue().getPort();\n             } else {\n                 for(ListenerService<?> listener : undertowHost.getServer().getListeners()) {\n                     if (listener.isSecure()) {", "fixed": "         Host undertowHost = getUndertowHost(hostInfo);\n         if (undertowHost != null && !undertowHost.getServer().getListeners().isEmpty()) {\n             if (!securePort) {\n                return undertowHost.getServer().getListeners().get(0).getBinding().getValue().getAbsolutePort();\n             } else {\n                 for(ListenerService<?> listener : undertowHost.getServer().getListeners()) {\n                     if (listener.isSecure()) {", "sourceBeforeFix": "undertowHost.getServer().getListeners().get(0).getBinding().getValue().getPort()", "sourceAfterFix": "undertowHost.getServer().getListeners().get(0).getBinding().getValue().getAbsolutePort()"}
{"fixCommitSHA1": "3a82878c2163e69855a8dac520d1e22971d19ff4", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "         MockEndpoint endpointB = getMockEndpoint(\"mock:b\");\n         MockEndpoint endpointC = getMockEndpoint(\"mock:c\");\n        endpointA.expectedBodiesReceived(\"A blue car!\", \"A blue car, again!\");\n         endpointA.expectedHeaderReceived(\"color\", \"blue\");\n         endpointB.expectedHeaderReceived(\"color\", \"red\");\n         endpointB.expectedBodiesReceived(\"A red car!\");", "fixed": "         MockEndpoint endpointB = getMockEndpoint(\"mock:b\");\n         MockEndpoint endpointC = getMockEndpoint(\"mock:c\");\n        endpointA.expectedBodiesReceivedInAnyOrder(\"A blue car!\", \"A blue car, again!\");\n         endpointA.expectedHeaderReceived(\"color\", \"blue\");\n         endpointB.expectedHeaderReceived(\"color\", \"red\");\n         endpointB.expectedBodiesReceived(\"A red car!\");", "sourceBeforeFix": "endpointA.expectedBodiesReceived(\"A blue car!\",\"A blue car, again!\")", "sourceAfterFix": "endpointA.expectedBodiesReceivedInAnyOrder(\"A blue car!\",\"A blue car, again!\")"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should execute sql containing group by\n \t */\n \t@Authorized(PrivilegeConstants.SQL_LEVEL_ACCESS)\n\tpublic List<List<Object>> executeSQL(String sql, boolean selectOnly) throws APIException;\n \t/**\n \t * Get the implementation id stored for this server Returns null if no implementation id has", "fixed": " \t * @should execute sql containing group by\n \t */\n \t@Authorized(PrivilegeConstants.SQL_LEVEL_ACCESS)\n\tpublic List<List<Object>> executeSQL(String sql, boolean selectOnly);\n \t/**\n \t * Get the implementation id stored for this server Returns null if no implementation id has", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedXQueryEndpointBuilder\n             extends\n                 AdvancedXQueryEndpointConsumerBuilder, AdvancedXQueryEndpointProducerBuilder {\n         default XQueryEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedXQueryEndpointBuilder\n             extends\n                 AdvancedXQueryEndpointConsumerBuilder, AdvancedXQueryEndpointProducerBuilder {\n         default XQueryEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameter(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "fixed": " \t}\r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n\t\tGL11.glTexParameterfv(target, pname, params);\r\n \t}\r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r", "sourceBeforeFix": "GL11.glTexParameter(target,pname,params)", "sourceAfterFix": "GL11.glTexParameteriv(target,pname,params)"}
{"fixCommitSHA1": "6ec426667bbf19be4fca84eec48e03152e2cfffe", "projectName": "joelittlejohn.jsonschema2pojo", "bugType": "Change Identifier Used", "problem": "         });\n         assertThat(args.didExit(), is(false));\n        assertThat(args.getSource().next().getFile(), is(\"/home/source\"));\n         assertThat(args.getTargetDirectory(), is(theFile(\"/home/target\")));\n         assertThat(args.getTargetPackage(), is(\"mypackage\"));\n         assertThat(args.isGenerateBuilders(), is(true));", "fixed": "         });\n         assertThat(args.didExit(), is(false));\n        assertThat(args.getSource().next().getFile(), endsWith(\"/home/source\"));\n         assertThat(args.getTargetDirectory(), is(theFile(\"/home/target\")));\n         assertThat(args.getTargetPackage(), is(\"mypackage\"));\n         assertThat(args.isGenerateBuilders(), is(true));", "sourceBeforeFix": "is(\"/home/source\")", "sourceAfterFix": "endsWith(\"/home/source\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory checkGlobalNames =\n       new PassFactory(\"Check names\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "40bc1faf5c4df7faea20f37ffce6a62fb90b8cd9", "projectName": "jersey.jersey", "bugType": "Less Specific If", "problem": "*         {@link\n      */\n     public static List<MediaType> createQualitySourceMediaTypes(Produces mime) {\n        if (mime == null) {\n             return GENERAL_QUALITY_SOURCE_MEDIA_TYPE_LIST;\n         }", "fixed": "*         {@link\n      */\n     public static List<MediaType> createQualitySourceMediaTypes(Produces mime) {\n        if (mime == null || mime.value().length == 0) {\n             return GENERAL_QUALITY_SOURCE_MEDIA_TYPE_LIST;\n         }", "sourceBeforeFix": "mime == null", "sourceAfterFix": "mime == null || mime.value().length == 0"}
{"fixCommitSHA1": "a295b91c37f681199a83fdb963344c19e0d015c0", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "     protected void handleQPoll(String[] args) {\n         long timeout = 0;\n         if (args.length > 1) {\n            timeout = Long.valueOf(args[1]);\n         }\n         try {\n             println(getQueue().poll(timeout, TimeUnit.SECONDS));", "fixed": "     protected void handleQPoll(String[] args) {\n         long timeout = 0;\n         if (args.length > 1) {\n            timeout = Long.parseLong(args[1]);\n         }\n         try {\n             println(getQueue().poll(timeout, TimeUnit.SECONDS));", "sourceBeforeFix": "Long.valueOf(args[1])", "sourceAfterFix": "Long.parseLong(args[1])"}
{"fixCommitSHA1": "f22ad62066cfd1bf3d7415251af2c2732db34acf", "projectName": "AsyncHttpClient.async-http-client", "bugType": "Same Function Less Args", "problem": "     @Override\n     public long transferTo(WritableByteChannel target, long position) throws IOException {\n        long written = body.transferTo(position, Long.MAX_VALUE, target);\n         if (written > 0) {\n             transfered += written;\n         }", "fixed": "     @Override\n     public long transferTo(WritableByteChannel target, long position) throws IOException {\n        long written = body.transferTo(position, target);\n         if (written > 0) {\n             transfered += written;\n         }", "sourceBeforeFix": "body.transferTo(position,Long.MAX_VALUE,target)", "sourceAfterFix": "body.transferTo(position,target)"}
{"fixCommitSHA1": "626cf14a6e42fa0a2d144e8e16940e09bafd754a", "projectName": "druid-io.druid", "bugType": "Change Identifier Used", "problem": "   public boolean isAtCapacity()\n   {\n    return getCurrCapacity() >= worker.getCapacity();\n   }\n   public boolean canRunTask(Task task)\n   {\n    return (worker.getCapacity() - getCurrCapacity() >= task.getTaskResource().getRequiredCapacity()\n             && !getAvailabilityGroups().contains(task.getTaskResource().getAvailabilityGroup()));\n   }", "fixed": "   public boolean isAtCapacity()\n   {\n    return getCurrCapacityUsed() >= worker.getCapacity();\n   }\n   public boolean canRunTask(Task task)\n   {\n    return (worker.getCapacity() - getCurrCapacityUsed() >= task.getTaskResource().getRequiredCapacity()\n             && !getAvailabilityGroups().contains(task.getTaskResource().getAvailabilityGroup()));\n   }", "sourceBeforeFix": "getCurrCapacity()", "sourceAfterFix": "getCurrCapacityUsed()"}
{"fixCommitSHA1": "499d9d3f89368592549f1ec3701f5a7616113a4c", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \t@Test\n \tpublic void testTokenGetters_2() throws Exception {\n \t\tmkdir(parserpkgdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(674);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"@parser::header {\\n\");\n \t\tgrammarBuilder.append(\"}\\n\");", "fixed": " \t@Test\n \tpublic void testTokenGetters_2() throws Exception {\n \t\tmkdir(parserpkgdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(734);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"@parser::header {\\n\");\n \t\tgrammarBuilder.append(\"}\\n\");", "sourceBeforeFix": "new StringBuilder(674)", "sourceAfterFix": "new StringBuilder(734)"}
{"fixCommitSHA1": "0a2b272cb8cb45faafd95a3bbc9e9af813620e09", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "         super(name, service.getNodeEngine());\n         this.partitionId = partitionId;\n         this.lockNamespace = new DefaultObjectNamespace(MultiMapService.SERVICE_NAME, name);\n        final LockService lockService = nodeEngine.getService(LockService.SERVICE_NAME);\n         this.lockStore = lockService == null ? null : lockService.createLockStore(partitionId, lockNamespace);\n         this.creationTime = currentTimeMillis();\n     }", "fixed": "         super(name, service.getNodeEngine());\n         this.partitionId = partitionId;\n         this.lockNamespace = new DefaultObjectNamespace(MultiMapService.SERVICE_NAME, name);\n        final LockService lockService = nodeEngine.getSharedService(LockService.SERVICE_NAME);\n         this.lockStore = lockService == null ? null : lockService.createLockStore(partitionId, lockNamespace);\n         this.creationTime = currentTimeMillis();\n     }", "sourceBeforeFix": "nodeEngine.getService(LockService.SERVICE_NAME)", "sourceAfterFix": "nodeEngine.getSharedService(LockService.SERVICE_NAME)"}
{"fixCommitSHA1": "737a3508546a125e900be9d1bb123952c0a81f20", "projectName": "netty.netty", "bugType": "Change Modifier", "problem": " \npublic class RxtxChannelOption<T> extends ChannelOption<T> {\n     public static final RxtxChannelOption<Integer> BAUD_RATE =\n             new RxtxChannelOption<Integer>(\"BAUD_RATE\");", "fixed": " \npublic final class RxtxChannelOption<T> extends ChannelOption<T> {\n     public static final RxtxChannelOption<Integer> BAUD_RATE =\n             new RxtxChannelOption<Integer>(\"BAUD_RATE\");", "sourceBeforeFix": "1", "sourceAfterFix": "17"}
{"fixCommitSHA1": "01fec049c0fb6b1c326d802687f3093b502123e0", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": " \t\t\t\t\tthrow new MandatoryModuleException(ex.getModuleId(), \"Got an error while starting a mandatory module: \"\r\n \t\t\t\t\t        + e.getMessage() + \". Check the server logs for more information\");\r\n \t\t\t\t}\r\n\t\t\t\tcatch (Throwable t2) {\r\n \t\t\t\t\tlog.warn(\"caught another error: \", t2);\r", "fixed": " \t\t\t\t\tthrow new MandatoryModuleException(ex.getModuleId(), \"Got an error while starting a mandatory module: \"\r\n \t\t\t\t\t        + e.getMessage() + \". Check the server logs for more information\");\r\n \t\t\t\t}\r\n\t\t\t\tcatch (Exception t2) {\r\n \t\t\t\t\tlog.warn(\"caught another error: \", t2);\r", "sourceBeforeFix": "Throwable t2", "sourceAfterFix": "Exception t2"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory coalesceVariableNames =\n       new PassFactory(\"coalesceVariableNames\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "fixed": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2fv(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2fv(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "sourceBeforeFix": "GL20.glGetVertexAttrib(index,pname,params)", "sourceAfterFix": "GL20.glGetVertexAttribiv(index,pname,params)"}
{"fixCommitSHA1": "55ed50c4975cf694828d46ee9ca32ce72a9ef913", "projectName": "clojure.clojure", "bugType": "Change Identifier Used", "problem": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 14:\r\n\t\t\treturn invoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "fixed": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 14:\r\n\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "sourceBeforeFix": "invoke(args.first(),(args=args.rest()).first(),args.rest())", "sourceAfterFix": "doInvoke(args.first(),(args=args.rest()).first(),args.rest())"}
{"fixCommitSHA1": "d4394e3727c822cd62e1e916335493df61ee409d", "projectName": "alibaba.fastjson", "bugType": "More Specific If", "problem": "                 mw.visitVarInsn(ASTORE, context.var(\"fied_ser\"));\n                 Label instanceOfElse_ = new Label(), instanceOfEnd_ = new Label();\n                if (context.writeDirect) {\n                     mw.visitVarInsn(ALOAD, context.var(\"fied_ser\"));\n                     mw.visitTypeInsn(INSTANCEOF, type(JavaBeanSerializer.class));\n                     mw.visitJumpInsn(IFEQ, instanceOfElse_);", "fixed": "                 mw.visitVarInsn(ASTORE, context.var(\"fied_ser\"));\n                 Label instanceOfElse_ = new Label(), instanceOfEnd_ = new Label();\n                if (context.writeDirect && Modifier.isPublic(fieldClass.getModifiers())) {\n                     mw.visitVarInsn(ALOAD, context.var(\"fied_ser\"));\n                     mw.visitTypeInsn(INSTANCEOF, type(JavaBeanSerializer.class));\n                     mw.visitJumpInsn(IFEQ, instanceOfElse_);", "sourceBeforeFix": "elementClass != null", "sourceAfterFix": "elementClass != null && Modifier.isPublic(elementClass.getModifiers())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory minimizeExitPoints =\n       new PassFactory(\"minimizeExitPoints\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory exportTestFunctions =\n       new PassFactory(\"exportTestFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "9716d2ae673a576cb345c3bfb24cf71654d8f112", "projectName": "openhab.openhab", "bugType": "Wrong Function Name", "problem": " \t */\n \tpublic GarageDoorData getGarageData() throws InvalidLoginException,\n \t\t\tIOException {\n\t\tlogger.debug(\"Retreiveing door data\");\n \t\tString url = String.format(\n \t\t\t\t\"%s/api/v4/userdevicedetails/get?appId=%s&SecurityToken=%s\",\n \t\t\t\tWEBSITE, enc(appId), enc(getSecurityToken()));", "fixed": " \t */\n \tpublic GarageDoorData getGarageData() throws InvalidLoginException,\n \t\t\tIOException {\n\t\tlogger.trace(\"Retreiveing door data\");\n \t\tString url = String.format(\n \t\t\t\t\"%s/api/v4/userdevicedetails/get?appId=%s&SecurityToken=%s\",\n \t\t\t\tWEBSITE, enc(appId), enc(getSecurityToken()));", "sourceBeforeFix": "logger.debug(\"Requsting URL {}\",url)", "sourceAfterFix": "logger.trace(\"Requsting URL {}\",url)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final HotSwapPassFactory checkRequires =\n       new HotSwapPassFactory(\"checkRequires\", true) {\n     @Override\n     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "fixed": " \t}\r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n\t\tGL20.glGetVertexAttribfv(index, pname, params);\r\n \t}\r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n\t\tGL20.glGetVertexAttribiv(index, pname, params);\r\n \t}\r\n \tpublic void glHint (int target, int mode) {\r", "sourceBeforeFix": "GL20.glUniform4(location,toIntBuffer(v,offset,count << 2))", "sourceAfterFix": "GL20.glUniform4iv(location,toIntBuffer(v,offset,count << 2))"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15837, value = \"One of the groups does not define neither \" + SERVER_GROUP + \" nor \" + CONCURRENT_GROUPS + \": %s\")\n     String unexpectedInSeriesGroup(String rolloutPlan);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10837, value = \"One of the groups does not define neither \" + SERVER_GROUP + \" nor \" + CONCURRENT_GROUPS + \": %s\")\n     String unexpectedInSeriesGroup(String rolloutPlan);\n     /**", "sourceBeforeFix": "id=15849", "sourceAfterFix": "id=10849"}
{"fixCommitSHA1": "6ca7d1534779e93064f0dda88c7a0d999c068ecf", "projectName": "Alluxio.alluxio", "bugType": "Same Function More Args", "problem": "       mAdditionalMasters = Lists.newArrayList();\n       List<? extends  Master> masters = Lists.newArrayList(mBlockMaster, mFileSystemMaster);\n       ServiceLoader<MasterFactory> discoveredMasterFactories =\n          ServiceLoader.load(MasterFactory.class);\n       for (MasterFactory factory : discoveredMasterFactories) {\n         Master master = factory.create(masters, journalDirectory);\n         if (master != null) {", "fixed": "       mAdditionalMasters = Lists.newArrayList();\n       List<? extends  Master> masters = Lists.newArrayList(mBlockMaster, mFileSystemMaster);\n       ServiceLoader<MasterFactory> discoveredMasterFactories =\n          ServiceLoader.load(MasterFactory.class, MasterFactory.class.getClassLoader());\n       for (MasterFactory factory : discoveredMasterFactories) {\n         Master master = factory.create(masters, journalDirectory);\n         if (master != null) {", "sourceBeforeFix": "ServiceLoader.load(MasterFactory.class)", "sourceAfterFix": "ServiceLoader.load(MasterFactory.class,MasterFactory.class.getClassLoader())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  private final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "    * Process smart name processing - removes unused classes and does referencing\n    * starting with minimum set of names.\n    */\n  final PassFactory smartNamePass =\n       new PassFactory(\"smartNamePass\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     }\n   };\n  private final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "     }\n   };\n  final PassFactory nameUnmappedAnonymousFunctions =\n       new PassFactory(\"nameAnonymousFunctions\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * \n* @see\n \t */\n\tpublic boolean equalToReference(T candidate);\n \t/**\n \t * This method compares the element that has been set as reference in this type accessor, to the", "fixed": " \t * \n* @see\n \t */\n\tpublic abstract boolean equalToReference(T candidate);\n \t/**\n \t * This method compares the element that has been set as reference in this type accessor, to the", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "615135aaa2ec18ea6c0b4785749079df4db5fd7a", "projectName": "joelittlejohn.jsonschema2pojo", "bugType": "Change Identifier Used", "problem": "         });\n         assertThat(args.didExit(), is(false));\n        assertThat(args.getSource().next().getFile(), is(\"/home/source\"));\n         assertThat(args.getTargetDirectory(), is(theFile(\"/home/target\")));\n         assertThat(args.getTargetPackage(), is(\"mypackage\"));\n         assertThat(args.isGenerateBuilders(), is(true));", "fixed": "         });\n         assertThat(args.didExit(), is(false));\n        assertThat(args.getSource().next().getFile(), endsWith(\"/home/source\"));\n         assertThat(args.getTargetDirectory(), is(theFile(\"/home/target\")));\n         assertThat(args.getTargetPackage(), is(\"mypackage\"));\n         assertThat(args.isGenerateBuilders(), is(true));", "sourceBeforeFix": "is(\"/home/source\")", "sourceAfterFix": "endsWith(\"/home/source\")"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15843, value = \"Invalid rollout plan. Plan operations affect server groups %s that are not reflected in the rollout plan\")\n     String invalidRolloutPlan(Set<String> groups);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10843, value = \"Invalid rollout plan. Plan operations affect server groups %s that are not reflected in the rollout plan\")\n     String invalidRolloutPlan(Set<String> groups);\n     /**", "sourceBeforeFix": "id=15864", "sourceAfterFix": "id=10864"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory replaceStrings =\n       new PassFactory(\"replaceStrings\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the error message\n      */\n    @Message(id = 15837, value = \"One of the groups does not define neither \" + SERVER_GROUP + \" nor \" + CONCURRENT_GROUPS + \": %s\")\n     String unexpectedInSeriesGroup(String rolloutPlan);\n     /**", "fixed": "      *\n      * @return the error message\n      */\n    @Message(id = 10837, value = \"One of the groups does not define neither \" + SERVER_GROUP + \" nor \" + CONCURRENT_GROUPS + \": %s\")\n     String unexpectedInSeriesGroup(String rolloutPlan);\n     /**", "sourceBeforeFix": "id=15846", "sourceAfterFix": "id=10846"}
{"fixCommitSHA1": "55ed50c4975cf694828d46ee9ca32ce72a9ef913", "projectName": "clojure.clojure", "bugType": "Change Identifier Used", "problem": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 11:\r\n\t\t\treturn invoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "fixed": " \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 11:\r\n\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r", "sourceBeforeFix": "invoke(args.first(),(args=args.rest()).first(),args.rest())", "sourceAfterFix": "doInvoke(args.first(),(args=args.rest()).first(),args.rest())"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "4665dcf9ab41c3c61cd42aad296ebfe518bfa003", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\n \tpublic void glDrawArrays (int mode, int first, int count) {\n\t\tGL.glDrawArraysEXT(mode, first, count);\n \t}\n \tpublic void glDrawElements (int mode, int count, int type, Buffer indices) {", "fixed": " \t}\n \tpublic void glDrawArrays (int mode, int first, int count) {\n\t\tGL.glDrawArrays(mode, first, count);\n \t}\n \tpublic void glDrawElements (int mode, int count, int type, Buffer indices) {", "sourceBeforeFix": "GL.glDrawArraysEXT(mode,first,count)", "sourceAfterFix": "GL.glDrawArrays(mode,first,count)"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Wrong Function Name", "problem": "* @see <a href=\"http:\n     */\n     public ResponseList<DirectMessage> getDirectMessages() throws TwitterException {\n        return DirectMessage.constructDirectMessages(get(getBaseURL() + \"direct_messages.json\", true));\n     }\n     /**", "fixed": "* @see <a href=\"http:\n     */\n     public ResponseList<DirectMessage> getDirectMessages() throws TwitterException {\n        return DirectMessage.createDirectMessageList(get(getBaseURL() + \"direct_messages.json\", true));\n     }\n     /**", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",null,true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",null,true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory groupVariableDeclarations =\n       new PassFactory(\"groupVariableDeclarations\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should set uuid on implementation id global property\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)\n\tpublic void setImplementationId(ImplementationId implementationId) throws APIException;\n \t/**\n \t * Gets the list of locales which the administrator has allowed for use on the system. This is", "fixed": " \t * @should set uuid on implementation id global property\n \t */\n \t@Authorized(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID)\n\tpublic void setImplementationId(ImplementationId implementationId);\n \t/**\n \t * Gets the list of locales which the administrator has allowed for use on the system. This is", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory sanityCheckVars =\n       new PassFactory(\"sanityCheckVars\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface AdvancedRefEndpointBuilder\n             extends\n                 AdvancedRefEndpointConsumerBuilder, AdvancedRefEndpointProducerBuilder {\n         default RefEndpointBuilder basic() {", "fixed": "     \n    public interface AdvancedRefEndpointBuilder\n             extends\n                 AdvancedRefEndpointConsumerBuilder, AdvancedRefEndpointProducerBuilder {\n         default RefEndpointBuilder basic() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "0c04572d3c4dfd164456a085aaa9782541c8d718", "projectName": "openhab.openhab", "bugType": "Same Function More Args", "problem": " \t */\n \tstatic public DecimalType deltaSince(Item item, AbstractInstant timestamp, String serviceName) {\n \t\tDecimalType result = null;\n\t\tHistoricItem itemThen = historicState(item, timestamp);\n \t\tif (itemThen != null) {\n \t\t\tDecimalType valueThen = (DecimalType) itemThen.getState();\n \t\t\tDecimalType valueNow = (DecimalType) item.getStateAs(DecimalType.class);", "fixed": " \t */\n \tstatic public DecimalType deltaSince(Item item, AbstractInstant timestamp, String serviceName) {\n \t\tDecimalType result = null;\n\t\tHistoricItem itemThen = historicState(item, timestamp, serviceName);\n \t\tif (itemThen != null) {\n \t\t\tDecimalType valueThen = (DecimalType) itemThen.getState();\n \t\t\tDecimalType valueNow = (DecimalType) item.getStateAs(DecimalType.class);", "sourceBeforeFix": "historicState(item,timestamp)", "sourceAfterFix": "historicState(item,timestamp,serviceName)"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Change Identifier Used", "problem": "                 } else {\n                     statistics.increaseCacheHits(1);\n                 }\n                statistics.addGetTimeNano(System.nanoTime() - start);\n             }\n         }\n     }", "fixed": "                 } else {\n                     statistics.increaseCacheHits(1);\n                 }\n                statistics.addGetTimeNanos(System.nanoTime() - start);\n             }\n         }\n     }", "sourceBeforeFix": "statistics.addPutTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addPutTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15857, value = \"Only 1 piece of content is currently supported (AS7-431)\")\n     String as7431();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10857, value = \"Only 1 piece of content is currently supported (AS7-431)\")\n     String as7431();\n     /**", "sourceBeforeFix": "id=15835", "sourceAfterFix": "id=10835"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory disambiguateProperties =\n       new PassFactory(\"disambiguateProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t * @should delete global property from database\n \t */\n \t@Authorized(PrivilegeConstants.PURGE_GLOBAL_PROPERTIES)\n\tpublic void purgeGlobalProperty(GlobalProperty globalProperty) throws APIException;\n \t/**\n \t * Completely remove the given global properties from the database", "fixed": " \t * @should delete global property from database\n \t */\n \t@Authorized(PrivilegeConstants.PURGE_GLOBAL_PROPERTIES)\n\tpublic void purgeGlobalProperty(GlobalProperty globalProperty);\n \t/**\n \t * Completely remove the given global properties from the database", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "e7d4575d49668d1877d9ecdccb9f5d422b2b1a49", "projectName": "naver.pinpoint", "bugType": "Change Binary Operator", "problem": "             return -1;\r\n         }\r\n         int newId = nextId();\r\n        if (newId > max) {\r\n             throw new IndexOutOfBoundsException(\"size=\" + index.length + \" id=\" + id);\r\n         }\r", "fixed": "             return -1;\r\n         }\r\n         int newId = nextId();\r\n        if (newId >= max) {\n             throw new IndexOutOfBoundsException(\"size=\" + index.length + \" id=\" + id);\r\n         }\r", "sourceBeforeFix": "newId > max", "sourceAfterFix": "newId >= max"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface HdfsEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedHdfsEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface HdfsEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedHdfsEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "      */\n     public ResponseList<Status> getPublicTimeline(long sinceID) throws\n             TwitterException {\n        return Status.constructStatuses(get(getBaseURL() +\n                 \"statuses/public_timeline.json\", null, new Paging((long) sinceID).asPostParameterList(Paging.S)\n                 , false));\n     }", "fixed": "      */\n     public ResponseList<Status> getPublicTimeline(long sinceID) throws\n             TwitterException {\n        return Status.createStatuseList(get(getBaseURL() +\n                 \"statuses/public_timeline.json\", null, new Paging((long) sinceID).asPostParameterList(Paging.S)\n                 , false));\n     }", "sourceBeforeFix": "SavedSearch.constructSavedSearches(get(getBaseURL() + \"saved_searches.json\",true))", "sourceAfterFix": "SavedSearch.createSavedSearchList(get(getBaseURL() + \"saved_searches.json\",true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory collapseObjectLiterals =\n       new PassFactory(\"collapseObjectLiterals\", false) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  private final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Look for function calls that have no side effects, and annotate them\n    * that way.\n    */\n  final PassFactory markNoSideEffectCalls =\n       new PassFactory(\"markNoSideEffectCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "283b039b2b8ce9bdc4beae8c7df3442d0eb4175a", "projectName": "apache.flink", "bugType": "Change Identifier Used", "problem": " \t\t\t\tif(scheduledJobs.size() == 0) {\n \t\t\t\t\tSystem.out.println(\"No scheduled jobs.\");\n \t\t\t\t} else {\n\t\t\t\t\tCollections.sort(runningJobs, njec);\n \t\t\t\t\tSystem.out.println(\"----------------------- Scheduled Jobs -----------------------\");\n \t\t\t\t\tfor(RecentJobEvent je : scheduledJobs) {", "fixed": " \t\t\t\tif(scheduledJobs.size() == 0) {\n \t\t\t\t\tSystem.out.println(\"No scheduled jobs.\");\n \t\t\t\t} else {\n\t\t\t\t\tCollections.sort(scheduledJobs, njec);\n \t\t\t\t\tSystem.out.println(\"----------------------- Scheduled Jobs -----------------------\");\n \t\t\t\t\tfor(RecentJobEvent je : scheduledJobs) {", "sourceBeforeFix": "Collections.sort(runningJobs,njec)", "sourceAfterFix": "Collections.sort(scheduledJobs,njec)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   }\n   \n  private final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   }\n   \n  final PassFactory renameVars =\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15860, value = \"No deployment with name %s found\")\n     String noDeploymentContentWithName(String name);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10860, value = \"No deployment with name %s found\")\n     String noDeploymentContentWithName(String name);\n     /**", "sourceBeforeFix": "id=15865", "sourceAfterFix": "id=10865"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory flowSensitiveInlineVariables =\n       new PassFactory(\"flowSensitiveInlineVariables\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory ignoreCajaProperties =\n       new PassFactory(\"ignoreCajaProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "bdd386e699e23c48524b822b9b890b077f294c69", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "     out.append(\"\\n}\\n\");\n   }\n  private CharSequence offsetValue(int line, int column) throws IOException {\n     StringBuilder out = new StringBuilder();\n     out.append(\"{\\n\");\n     appendFirstField(out, \"line\", String.valueOf(line));", "fixed": "     out.append(\"\\n}\\n\");\n   }\n  private static CharSequence offsetValue(int line, int column) throws IOException {\n     StringBuilder out = new StringBuilder();\n     out.append(\"{\\n\");\n     appendFirstField(out, \"line\", String.valueOf(line));", "sourceBeforeFix": "2", "sourceAfterFix": "10"}
{"fixCommitSHA1": "9f1dcae64b97de86fccf34e7114790e22181de64", "projectName": "Activiti.Activiti", "bugType": "Change Identifier Used", "problem": "     } else if (Test.class.isAssignableFrom(testClass)) {\n      TestSuite testSuite = new TestSuite(testClass);\n       suite.addTest(testSuite);\n     } else {\n       throw new RuntimeException(\"Class \" + classname + \" is not a TestCase nor a TestSuite\");", "fixed": "     } else if (Test.class.isAssignableFrom(testClass)) {\n      ServletTestSuite testSuite = new ServletTestSuite(testClass);\n       suite.addTest(testSuite);\n     } else {\n       throw new RuntimeException(\"Class \" + classname + \" is not a TestCase nor a TestSuite\");", "sourceBeforeFix": "TestSuite testSuite=new TestSuite(testClass); ", "sourceAfterFix": "ServletTestSuite testSuite=new ServletTestSuite(testClass); "}
{"fixCommitSHA1": "73248ac2e39d5f905aeab743fc8410c6943474ba", "projectName": "antlr.antlr4", "bugType": "Change Numeric Literal", "problem": " \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_1() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(741);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {Console.WriteLine($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "fixed": " \t@Test\n \tpublic void testMultipleAlternativesWithCommonLabel_1() throws Exception {\n \t\tmkdir(tmpdir);\n\t\tStringBuilder grammarBuilder = new StringBuilder(740);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s : e {Console.WriteLine($e.v);};\\n\");\n \t\tgrammarBuilder.append(\"e returns [int v]\\n\");", "sourceBeforeFix": "new StringBuilder(246)", "sourceAfterFix": "new StringBuilder(245)"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15855, value = \"Invalid byte stream.\")\n     String invalidByteStream();\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10855, value = \"Invalid byte stream.\")\n     String invalidByteStream();\n     /**", "sourceBeforeFix": "id=15852", "sourceAfterFix": "id=10852"}
{"fixCommitSHA1": "8abfa48f2eb5edaf3f5a2cc2350e4e3c232f4152", "projectName": "checkstyle.checkstyle", "bugType": "Change Modifier", "problem": "          */\n         private static final long serialVersionUID = -1926935338069418119L;\n        public FileSelectionAction() {\n             super(\"Select Java File\");\n             putValue(Action.MNEMONIC_KEY, KeyEvent.VK_S);\n         }", "fixed": "          */\n         private static final long serialVersionUID = -1926935338069418119L;\n        FileSelectionAction() {\n             super(\"Select Java File\");\n             putValue(Action.MNEMONIC_KEY, KeyEvent.VK_S);\n         }", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "22298e1958a648d627ae3cbc3fe7bf0f2613286f", "projectName": "spring-projects.spring-security-oauth", "bugType": "Change Numeric Literal", "problem": " \tpublic FrameworkEndpointHandlerMapping() {\n\t\tsetOrder(Ordered.LOWEST_PRECEDENCE - 1);\n \t}\n \t/**", "fixed": " \tpublic FrameworkEndpointHandlerMapping() {\n\t\tsetOrder(Ordered.LOWEST_PRECEDENCE - 2);\n \t}\n \t/**", "sourceBeforeFix": "Ordered.LOWEST_PRECEDENCE - 1", "sourceAfterFix": "Ordered.LOWEST_PRECEDENCE - 2"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "fixed": " \t}\r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n\t\tGL20.glUniform2fv(location, v);\r\n \t}\r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n\t\tGL20.glUniform2fv(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform2i (int location, int x, int y) {\r", "sourceBeforeFix": "GL20.glUniform2(location,v)", "sourceAfterFix": "GL20.glUniform2fv(location,v)"}
{"fixCommitSHA1": "f9e5e4396a481051abc07a5fd6a456310c89d980", "projectName": "stanfordnlp.CoreNLP", "bugType": "More Specific If", "problem": "     if (this.annotationDocument.get(CoreAnnotations.SentencesAnnotation.class) != null) {\n       wrapSentences();\n      if (sentences.get(0).entityMentions() != null) {\n         buildDocumentEntityMentionsList();\n       }", "fixed": "     if (this.annotationDocument.get(CoreAnnotations.SentencesAnnotation.class) != null) {\n       wrapSentences();\n      if (sentences.size() > 0 && sentences.get(0).entityMentions() != null) {\n         buildDocumentEntityMentionsList();\n       }", "sourceBeforeFix": "sentences.get(0).entityMentions() != null", "sourceAfterFix": "sentences.size() > 0 && sentences.get(0).entityMentions() != null"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glUniform2iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform2(location, v);\r\n \t}\r\n \tpublic void glUniform2iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform2(location, toIntBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform3f (int location, float x, float y, float z) {\r", "fixed": " \t}\r\n \tpublic void glUniform2iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform2iv(location, v);\r\n \t}\r\n \tpublic void glUniform2iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform2iv(location, toIntBuffer(v, offset, count << 1));\r\n \t}\r\n \tpublic void glUniform3f (int location, float x, float y, float z) {\r", "sourceBeforeFix": "GL20.glUniformMatrix2(location,transpose,value)", "sourceAfterFix": "GL20.glUniformMatrix2fv(location,transpose,value)"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory runtimeTypeCheck =\n       new PassFactory(\"runtimeTypeCheck\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
