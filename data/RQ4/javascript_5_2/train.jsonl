{"id": "/data/all/data/dncuug/scaffolder", "bugType": "no-debugger", "problem": "            };\n            debugger;\n            return $http({", "fixed": "            };\n           \n            return $http({", "message": "Unexpected 'debugger' statement."}
{"id": "/data/all/data/smart-table/smart-table-core", "bugType": "require-yield", "problem": "  })\n  .test('slice directive should tell whether next page is enabled', function * (t) {\n    const table = fakeTable();", "fixed": "  })\n  .test('slice directive should tell whether next page is enabled', (t) => {\n    const table = fakeTable();", "message": "This generator function does not have 'yield'."}
{"id": "/data/all/data/sinonjs/referee", "bugType": "prefer-rest-params", "problem": "                    failed = true;\n                    var failArgs = [type, name, arguments[0]];\n                    fail.apply(this, failArgs.concat(slice.call(arguments, 1)));\n                    return true;", "fixed": "                    failed = true;\n                    var failArgs = [type, name].concat(slice.call(arguments));\n                    fail.apply(this, failArgs);\n                    return true;", "message": "Use the rest parameters instead of 'arguments'."}
{"id": "/data/all/data/vowsjs/vows", "bugType": "prefer-spread", "problem": "        try {\n          test.apply(null, args)\n          assert.ok(_.isObject(this.report))", "fixed": "        try {\n          test(...args)\n          assert.ok(_.isObject(this.report))", "message": "Use the spread operator instead of '.apply()'."}
{"id": "/data/all/data/tjworks/angoose", "bugType": "no-console", "problem": "angular.module('angoose.ui.services').provider('$ui', serviceProvider).provider('$deform', serviceProvider).run(['$ui','$rootScope', function($ui, $rootScope){\n    console.log(\"settup $define\");\n    $rootScope.defineQuery = function(meta){", "fixed": "angular.module('angoose.ui.services').provider('$ui', serviceProvider).provider('$deform', serviceProvider).run(['$ui','$rootScope', function($ui, $rootScope){\n    $rootScope.defineQuery = function(meta){", "message": "Unexpected console statement."}
