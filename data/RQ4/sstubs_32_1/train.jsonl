{"fixCommitSHA1": "b30c9ba15edd3060a51d6e46a735cdbd838ada7f", "projectName": "facebook.presto", "bugType": "Change Identifier Used", "problem": "         skipRequestBody(request);\n         for (String value : authenticateHeaders) {\n            response.setHeader(WWW_AUTHENTICATE, value);\n         }\n         if (messages.isEmpty()) {", "fixed": "         skipRequestBody(request);\n         for (String value : authenticateHeaders) {\n            response.addHeader(WWW_AUTHENTICATE, value);\n         }\n         if (messages.isEmpty()) {", "sourceBeforeFix": "response.setHeader(WWW_AUTHENTICATE,value)", "sourceAfterFix": "response.addHeader(WWW_AUTHENTICATE,value)"}
{"fixCommitSHA1": "609361434c29e231a2d296dcd39e10de8dc50de6", "projectName": "alibaba.fastjson", "bugType": "Same Function More Args", "problem": "     public void test_kr_2() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub1445\uc6d406\uc77c\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "fixed": "     public void test_kr_2() throws Exception {\n         Entity vo = JSON.parseObject(\"{\\\"date\\\":\\\"2016\ub1445\uc6d406\uc77c\\\"}\", Entity.class);\n        Calendar calendar = Calendar.getInstance(JSON.defaultTimeZone, JSON.defaultLocale);\n         calendar.setTime(vo.date);\n         Assert.assertEquals(2016, calendar.get(Calendar.YEAR));\n         Assert.assertEquals(4, calendar.get(Calendar.MONTH));", "sourceBeforeFix": "Calendar.getInstance(JSON.defaultLocale)", "sourceAfterFix": "Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform3(location, v);\r\n \t}\r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform3(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r", "fixed": " \t}\r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n\t\tGL20.glUniform3iv(location, v);\r\n \t}\r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n\t\tGL20.glUniform3iv(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r", "sourceBeforeFix": "EXTFramebufferObject.glGetRenderbufferParameterEXT(target,pname,params)", "sourceAfterFix": "EXTFramebufferObject.glGetRenderbufferParameterivEXT(target,pname,params)"}
{"fixCommitSHA1": "292df7f0b637a17c8a6a78b2cf9dbb483bbeb4da", "projectName": "hazelcast.hazelcast", "bugType": "Wrong Function Name", "problem": "                 } else {\n                     statistics.increaseCacheHits(1);\n                 }\n                statistics.addGetTimeNano(System.nanoTime() - start);\n             }\n         }\n     }", "fixed": "                 } else {\n                     statistics.increaseCacheHits(1);\n                 }\n                statistics.addGetTimeNanos(System.nanoTime() - start);\n             }\n         }\n     }", "sourceBeforeFix": "statistics.addPutTimeNano(System.nanoTime() - start)", "sourceAfterFix": "statistics.addPutTimeNanos(System.nanoTime() - start)"}
{"fixCommitSHA1": "cc3afab8cec819419e52eb1fdc990625e0afd688", "projectName": "Alluxio.alluxio", "bugType": "Change Operand ", "problem": "       if (mWrite) {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n          String filePath = FILE_NAME + (mWorkerId + BASE_FILE_NUMBER);\n           OutputStream os = mHdfsFs.create(new Path(filePath));\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n             mBuf.putInt(0, k + mWorkerId);", "fixed": "       if (mWrite) {\n         for (int times = mLeft; times < mRight; times ++) {\n           long startTimeMs = System.currentTimeMillis();\n          String filePath = FILE_NAME + (times + BASE_FILE_NUMBER);\n           OutputStream os = mHdfsFs.create(new Path(filePath));\n           for (int k = 0; k < BLOCKS_PER_FILE; k ++) {\n             mBuf.putInt(0, k + mWorkerId);", "sourceBeforeFix": "mWorkerId + BASE_FILE_NUMBER", "sourceAfterFix": "pId + BASE_FILE_NUMBER"}
{"fixCommitSHA1": "8fdd403b6c8331d56890de3165b7a0e77a0eaa42", "projectName": "apache.flink", "bugType": "Change Modifier", "problem": " \t * @throws IOException Thrown, if the de-serialization encountered an I/O related error. Typically raised by the\n \t *                     input view, which may have an underlying I/O channel from which it reads.\n \t */\n\tpublic void deserialize(T target, DataInputView source) throws IOException;\n \t/**\n \t * Copies exactly one record from the source input view to the target output view. Whether this operation", "fixed": " \t * @throws IOException Thrown, if the de-serialization encountered an I/O related error. Typically raised by the\n \t *                     input view, which may have an underlying I/O channel from which it reads.\n \t */\n\tpublic abstract void deserialize(T target, DataInputView source) throws IOException;\n \t/**\n \t * Copies exactly one record from the source input view to the target output view. Whether this operation", "sourceBeforeFix": "1", "sourceAfterFix": "1025"}
{"fixCommitSHA1": "2355977a614aa8bc281c7384e9e15f86d33cacec", "projectName": "Atmosphere.atmosphere", "bugType": "More Specific If", "problem": "                 broadcasterClassName = lookupDefaultBroadcasterType(broadcasterClassName);\n             }\n            if (broadcasterFactoryClassName != null) {\n                 broadcasterFactory = newClassInstance(BroadcasterFactory.class,\n                         (Class<BroadcasterFactory>) IOUtils.loadClass(getClass(), broadcasterFactoryClassName));\n                 Class<? extends Broadcaster> bc =", "fixed": "                 broadcasterClassName = lookupDefaultBroadcasterType(broadcasterClassName);\n             }\n            if (broadcasterFactoryClassName != null && broadcasterFactory == null) {\n                 broadcasterFactory = newClassInstance(BroadcasterFactory.class,\n                         (Class<BroadcasterFactory>) IOUtils.loadClass(getClass(), broadcasterFactoryClassName));\n                 Class<? extends Broadcaster> bc =", "sourceBeforeFix": "broadcasterFactoryClassName != null", "sourceAfterFix": "broadcasterFactoryClassName != null && broadcasterFactory == null"}
{"fixCommitSHA1": "e2119d33293008fcc876f5fcd58ede2993eb24d6", "projectName": "spring-projects.spring-boot", "bugType": "Change Identifier Used", "problem": " \t@Configuration\n \t@ConditionalOnBean(RabbitTemplate.class)\n\t@ConditionalOnEnablednHealthIndicator(\"rabbit\")\n \tpublic static class RabbitHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<RabbitHealthIndicator, RabbitTemplate> {", "fixed": " \t@Configuration\n \t@ConditionalOnBean(RabbitTemplate.class)\n\t@ConditionalOnEnabledHealthIndicator(\"rabbit\")\n \tpublic static class RabbitHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<RabbitHealthIndicator, RabbitTemplate> {", "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"db\")", "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"db\")"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory checkRegExp =\n       new PassFactory(\"checkRegExp\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory closureOptimizePrimitives =\n       new PassFactory(\"closureOptimizePrimitives\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "96a693e908733abaa7f93b4ffe21f435568bf329", "projectName": "naver.pinpoint", "bugType": "Change Identifier Used", "problem": "     private final ClassLoader agentClassLoader = this.getClass().getClassLoader();\n     private final TransformerRegistry transformerRegistry;\n    private final DynamicTrnasformerRegistry dynamicTransformerRegistry;\n     private final DefaultProfilerPluginContext globalContext;    \n     private final Filter<String> debugTargetFilter;", "fixed": "     private final ClassLoader agentClassLoader = this.getClass().getClassLoader();\n     private final TransformerRegistry transformerRegistry;\n    private final DynamicTransformerRegistry dynamicTransformerRegistry;\n     private final DefaultProfilerPluginContext globalContext;    \n     private final Filter<String> debugTargetFilter;", "sourceBeforeFix": "private final DynamicTrnasformerRegistry dynamicTransformerRegistry; ", "sourceAfterFix": "private final DynamicTransformerRegistry dynamicTransformerRegistry; "}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 15872, value = \"Invalid code %d\")\n     IllegalArgumentException invalidCode(int code);\n }", "fixed": "      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n    @Message(id = 10872, value = \"Invalid code %d\")\n     IllegalArgumentException invalidCode(int code);\n }", "sourceBeforeFix": "id=15855", "sourceAfterFix": "id=10855"}
{"fixCommitSHA1": "01fec049c0fb6b1c326d802687f3093b502123e0", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": " \t\t\t\t\t\t\ttry {\r\n \t\t\t\t\t\t\t\tModuleFactory.stopModule(mod, true, true);\r\n \t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tcatch (Throwable t3) {\r\n \t\t\t\t\t\t\t\tlog.trace(\"Unable to shutdown module:\" + mod, t3);\r", "fixed": " \t\t\t\t\t\t\ttry {\r\n \t\t\t\t\t\t\t\tModuleFactory.stopModule(mod, true, true);\r\n \t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tcatch (Exception t3) {\r\n \t\t\t\t\t\t\t\tlog.trace(\"Unable to shutdown module:\" + mod, t3);\r", "sourceBeforeFix": "Throwable e", "sourceAfterFix": "Exception e"}
{"fixCommitSHA1": "4665dcf9ab41c3c61cd42aad296ebfe518bfa003", "projectName": "libgdx.libgdx", "bugType": "Change Identifier Used", "problem": " \t}\n \tpublic void glGenTextures (int n, IntBuffer textures) {\n\t\tGL.glGenTexturesEXT(n, textures, Memory.getPosition(textures));\n \t}\n \tpublic int glGetError () {", "fixed": " \t}\n \tpublic void glGenTextures (int n, IntBuffer textures) {\n\t\tGL.glGenTextures(n, textures, Memory.getPosition(textures));\n \t}\n \tpublic int glGetError () {", "sourceBeforeFix": "GL.glCopyTexImage2DEXT(target,level,internalformat,x,y,width,height,border)", "sourceAfterFix": "GL.glCopyTexImage2D(target,level,internalformat,x,y,width,height,border)"}
{"fixCommitSHA1": "e668660a9ca77bc1bfc091967cc10975594d884e", "projectName": "druid-io.druid", "bugType": "Wrong Function Name", "problem": "                   ),\n                   configFactory.build(EC2AutoScalingStrategyConfig.class)\n               );\n            } else if (config.getStorageImpl().equalsIgnoreCase(\"noop\")) {\n               strategy = new NoopScalingStrategy();\n             } else {\n               throw new ISE(\"Invalid strategy implementation: %s\",config.getStrategyImpl());", "fixed": "                   ),\n                   configFactory.build(EC2AutoScalingStrategyConfig.class)\n               );\n            } else if (config.getStrategyImpl().equalsIgnoreCase(\"noop\")) {\n               strategy = new NoopScalingStrategy();\n             } else {\n               throw new ISE(\"Invalid strategy implementation: %s\",config.getStrategyImpl());", "sourceBeforeFix": "config.getStorageImpl()", "sourceAfterFix": "config.getStrategyImpl()"}
{"fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf", "projectName": "yusuke.twitter4j", "bugType": "Change Identifier Used", "problem": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserListSubscriptions(String user, long cursor) throws TwitterException {\n        return twitter4j.List.constructListOfLists(get(getApiBaseURL() + V1 +\n                 user + \"/lists/subscriptions.json?cursor=\" + cursor, true));\n     }", "fixed": "* @see <a href=\"http:\n      */\n     public PagableResponseList<twitter4j.List> getUserListSubscriptions(String user, long cursor) throws TwitterException {\n        return twitter4j.List.createListList(get(getApiBaseURL() + V1 +\n                 user + \"/lists/subscriptions.json?cursor=\" + cursor, true));\n     }", "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"favorites/\" + id+ \".json\",new PostParameter[0],true))", "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"favorites/\" + id+ \".json\",new PostParameter[0],true))"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory convertToDottedProperties =\n       new PassFactory(\"convertToDottedProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "2", "sourceAfterFix": "0"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface MvelEndpointBuilder\n            extends\n                EndpointProducerBuilder {\n         default AdvancedMvelEndpointBuilder advanced() {\n             return (AdvancedMvelEndpointBuilder) this;\n         }", "fixed": "     \n    public interface MvelEndpointBuilder extends EndpointProducerBuilder {\n         default AdvancedMvelEndpointBuilder advanced() {\n             return (AdvancedMvelEndpointBuilder) this;\n         }", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   };\n   \n  private final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "   };\n   \n  final PassFactory objectPropertyStringPostprocess =\n       new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "   \n  private final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "fixed": "   \n  final PassFactory markUnnormalized =\n       new PassFactory(\"markUnnormalized\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f", "projectName": "libgdx.libgdx", "bugType": "Wrong Function Name", "problem": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShader(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "fixed": " \t}\r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n\t\tGL20.glGetShaderiv(shader, pname, params);\r\n \t}\r\n \tpublic String glGetString (int name) {\r", "sourceBeforeFix": "GL20.glUniform4(location,toIntBuffer(v,offset,count << 2))", "sourceAfterFix": "GL20.glUniform4iv(location,toIntBuffer(v,offset,count << 2))"}
{"fixCommitSHA1": "1d5647b92215f0ceabced59275225ad829061663", "projectName": "spring-projects.spring-boot", "bugType": "Change Modifier", "problem": " \tprivate int port = Integer.valueOf(System.getProperty(\"port\"));\n \t@Test\n\tpublic void testHome() throws Exception {\nString url = \"http:\n \t\tResponseEntity<String> entity = this.rest.getForEntity(url, String.class);\n \t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);", "fixed": " \tprivate int port = Integer.valueOf(System.getProperty(\"port\"));\n \t@Test\n\tvoid testHome() throws Exception {\nString url = \"http:\n \t\tResponseEntity<String> entity = this.rest.getForEntity(url, String.class);\n \t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);", "sourceBeforeFix": "1", "sourceAfterFix": "0"}
{"fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa", "projectName": "wildfly.wildfly", "bugType": "Change Numeric Literal", "problem": "      *\n      * @return the message.\n      */\n    @Message(id = 15858, value = \"No deployment content with hash %s is available in the deployment content repository.\")\n     String noDeploymentContentWithHash(String hash);\n     /**", "fixed": "      *\n      * @return the message.\n      */\n    @Message(id = 10858, value = \"No deployment content with hash %s is available in the deployment content repository.\")\n     String noDeploymentContentWithHash(String hash);\n     /**", "sourceBeforeFix": "id=15835", "sourceAfterFix": "id=10835"}
{"fixCommitSHA1": "7715581cb3521f0d6ba48f957e8daa492383fba3", "projectName": "google.guice", "bugType": "Same Function Less Args", "problem": "     });\n     ensureWorks(child, Foo.class, Bar.class);\n     ensureFails(child, ALLOW_BINDING, FooImpl.class);\n    ensureInChild(parent, FooImpl.class, FooBar.class, Foo.class);\n     Injector grandchild = child.createChildInjector(new AbstractModule() {\n       @Override", "fixed": "     });\n     ensureWorks(child, Foo.class, Bar.class);\n     ensureFails(child, ALLOW_BINDING, FooImpl.class);\n    ensureInChild(parent, FooImpl.class, Foo.class);\n     Injector grandchild = child.createChildInjector(new AbstractModule() {\n       @Override", "sourceBeforeFix": "ensureInChild(parent,FooImpl.class,FooBar.class,Foo.class)", "sourceAfterFix": "ensureInChild(parent,FooImpl.class,Foo.class)"}
{"fixCommitSHA1": "b102d67173da3ca972abf7fcd0a2f779ef9870a3", "projectName": "druid-io.druid", "bugType": "Wrong Function Name", "problem": "   public Optional<ResourceManagementScheduler> getResourceManagementScheduler()\n   {\n     if (leading) {\n      return Optional.of(resourceManagementScheduler);\n     } else {\n       return Optional.absent();\n     }", "fixed": "   public Optional<ResourceManagementScheduler> getResourceManagementScheduler()\n   {\n     if (leading) {\n      return Optional.fromNullable(resourceManagementScheduler);\n     } else {\n       return Optional.absent();\n     }", "sourceBeforeFix": "Optional.of(resourceManagementScheduler)", "sourceAfterFix": "Optional.fromNullable(resourceManagementScheduler)"}
{"fixCommitSHA1": "477de6254ea1c1a70dc62a25e3b7ce4e86b1e142", "projectName": "openmrs.openmrs-core", "bugType": "Delete Throws Exception", "problem": " \t */\n \t@Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)\n\tpublic SortedMap<String, String> getSystemVariables() throws APIException;\n \t/**\n \t * Get a map of all the System Information. Java, user, time, runtime properties, etc", "fixed": " \t */\n \t@Authorized(PrivilegeConstants.VIEW_ADMIN_FUNCTIONS)\n\tpublic SortedMap<String, String> getSystemVariables();\n \t/**\n \t * Get a map of all the System Information. Java, user, time, runtime properties, etc", "sourceBeforeFix": "1", "sourceAfterFix": "1"}
{"fixCommitSHA1": "3dddcc4cdf4a74ddbd4607c6aaee5bdd8ac46c27", "projectName": "gephi.gephi", "bugType": "Change Modifier", "problem": "     }\n     @Override\n    public void display(GL2 gl, GLU glu) {\n         markTime++;\n         VizModel vizModel = VizController.getInstance().getVizModel();", "fixed": "     }\n     @Override\n    public synchronized void display(GL2 gl, GLU glu) {\n         markTime++;\n         VizModel vizModel = VizController.getInstance().getVizModel();", "sourceBeforeFix": "1", "sourceAfterFix": "33"}
{"fixCommitSHA1": "042b972a5853424d39be1cb76f2710d4bc3380e0", "projectName": "google.closure-compiler", "bugType": "Change Modifier", "problem": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  private final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "fixed": "    * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n    * {@code var x,y;}.\n    */\n  final PassFactory exploitAssign =\n       new PassFactory(\"expointAssign\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {", "sourceBeforeFix": "18", "sourceAfterFix": "16"}
{"fixCommitSHA1": "930d814a14d2221a9b745802ea946f44e1b32588", "projectName": "apache.camel", "bugType": "Change Modifier", "problem": "     \n    public static interface WebsocketEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedWebsocketEndpointProducerBuilder advanced() {", "fixed": "     \n    public interface WebsocketEndpointProducerBuilder\n             extends\n                 EndpointProducerBuilder {\n         default AdvancedWebsocketEndpointProducerBuilder advanced() {", "sourceBeforeFix": "9", "sourceAfterFix": "1"}
{"fixCommitSHA1": "01fec049c0fb6b1c326d802687f3093b502123e0", "projectName": "openmrs.openmrs-core", "bugType": "Change Identifier Used", "problem": " \t\t\t\t\tthrow new MandatoryModuleException(ex.getModuleId(), \"Got an error while starting a mandatory module: \"\r\n \t\t\t\t\t        + e.getMessage() + \". Check the server logs for more information\");\r\n \t\t\t\t}\r\n\t\t\t\tcatch (Throwable t2) {\r\n \t\t\t\t\tlog.warn(\"caught another error: \", t2);\r", "fixed": " \t\t\t\t\tthrow new MandatoryModuleException(ex.getModuleId(), \"Got an error while starting a mandatory module: \"\r\n \t\t\t\t\t        + e.getMessage() + \". Check the server logs for more information\");\r\n \t\t\t\t}\r\n\t\t\t\tcatch (Exception t2) {\r\n \t\t\t\t\tlog.warn(\"caught another error: \", t2);\r", "sourceBeforeFix": "Throwable t3", "sourceAfterFix": "Exception t3"}
{"fixCommitSHA1": "a35860eadb4400f069e306ccd76f1a19ecfb3ba1", "projectName": "google.guava", "bugType": "Change Identifier Used", "problem": "   }\n   @Override\n  public N removeOutEdge(Object edge) {\n     N previousNode = incidentEdgeMap.remove(edge);\n     return checkNotNull(previousNode);\n   }", "fixed": "   }\n   @Override\n  public N removeOutEdge(E edge) {\n     N previousNode = incidentEdgeMap.remove(edge);\n     return checkNotNull(previousNode);\n   }", "sourceBeforeFix": "Object edge", "sourceAfterFix": "E edge"}
{"fixCommitSHA1": "d55fc4de68d1c8d9a5aff883e2c5f84ad02aa0b8", "projectName": "apache.camel", "bugType": "Wrong Function Name", "problem": "     @Test\n     public void testConfiguration() throws Exception {\n        assertNotPresent(GsonConverter.class);\n         assertPresent(JacksonConverter.class);\n     }", "fixed": "     @Test\n     public void testConfiguration() throws Exception {\n        assertPresent(GsonConverter.class);\n         assertPresent(JacksonConverter.class);\n     }", "sourceBeforeFix": "assertNotPresent(GsonConverter.class)", "sourceAfterFix": "assertPresent(GsonConverter.class)"}
